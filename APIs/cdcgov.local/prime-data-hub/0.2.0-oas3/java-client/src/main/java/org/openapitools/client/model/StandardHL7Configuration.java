/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StandardHL7ConfigurationTransport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A standard HL7 configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:32.539681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandardHL7Configuration {
  public static final String SERIALIZED_NAME_CONVERT_TIMESTAMP_TO_DATE_TIME = "convertTimestampToDateTime";
  @SerializedName(SERIALIZED_NAME_CONVERT_TIMESTAMP_TO_DATE_TIME)
  private String convertTimestampToDateTime;

  public static final String SERIALIZED_NAME_DEFAULT_AOE_TO_UNKNOWN = "defaultAoeToUnknown";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AOE_TO_UNKNOWN)
  private Boolean defaultAoeToUnknown = false;

  public static final String SERIALIZED_NAME_INCLUDE_A_O_E = "includeAOE";
  @SerializedName(SERIALIZED_NAME_INCLUDE_A_O_E)
  private Boolean includeAOE;

  public static final String SERIALIZED_NAME_NAME_FORMAT = "nameFormat";
  @SerializedName(SERIALIZED_NAME_NAME_FORMAT)
  private String nameFormat = "standard";

  /**
   * How to format phone numbers (XTN fields)
   */
  @JsonAdapter(PhoneNumberFormattingEnum.Adapter.class)
  public enum PhoneNumberFormattingEnum {
    STANDARD("STANDARD"),
    
    ONLY_DIGITS_IN_COMPONENT_ONE("ONLY_DIGITS_IN_COMPONENT_ONE"),
    
    AREA_LOCAL_IN_COMPONENT_ONE("AREA_LOCAL_IN_COMPONENT_ONE");

    private String value;

    PhoneNumberFormattingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneNumberFormattingEnum fromValue(String value) {
      for (PhoneNumberFormattingEnum b : PhoneNumberFormattingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneNumberFormattingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneNumberFormattingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneNumberFormattingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneNumberFormattingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneNumberFormattingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_NUMBER_FORMATTING = "phoneNumberFormatting";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_FORMATTING)
  private PhoneNumberFormattingEnum phoneNumberFormatting = PhoneNumberFormattingEnum.STANDARD;

  public static final String SERIALIZED_NAME_RECEIVING_APPLICATION_NAME = "receivingApplicationName";
  @SerializedName(SERIALIZED_NAME_RECEIVING_APPLICATION_NAME)
  private String receivingApplicationName;

  public static final String SERIALIZED_NAME_RECEIVING_APPLICATION_O_I_D = "receivingApplicationOID";
  @SerializedName(SERIALIZED_NAME_RECEIVING_APPLICATION_O_I_D)
  private String receivingApplicationOID;

  public static final String SERIALIZED_NAME_RECEIVING_FACILITY_NAME = "receivingFacilityName";
  @SerializedName(SERIALIZED_NAME_RECEIVING_FACILITY_NAME)
  private String receivingFacilityName;

  public static final String SERIALIZED_NAME_RECEIVING_FACILITY_O_I_D = "receivingFacilityOID";
  @SerializedName(SERIALIZED_NAME_RECEIVING_FACILITY_O_I_D)
  private String receivingFacilityOID;

  public static final String SERIALIZED_NAME_RECEIVING_ORGANIZATION = "receivingOrganization";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ORGANIZATION)
  private String receivingOrganization;

  public static final String SERIALIZED_NAME_REPORTING_FACILITY_ID = "reportingFacilityId";
  @SerializedName(SERIALIZED_NAME_REPORTING_FACILITY_ID)
  private String reportingFacilityId;

  public static final String SERIALIZED_NAME_REPORTING_FACILITY_ID_TYPE = "reportingFacilityIdType";
  @SerializedName(SERIALIZED_NAME_REPORTING_FACILITY_ID_TYPE)
  private String reportingFacilityIdType;

  public static final String SERIALIZED_NAME_REPORTING_FACILITY_NAME = "reportingFacilityName";
  @SerializedName(SERIALIZED_NAME_REPORTING_FACILITY_NAME)
  private String reportingFacilityName;

  public static final String SERIALIZED_NAME_SUPPRESS_AOE = "suppressAoe";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_AOE)
  private Boolean suppressAoe = false;

  public static final String SERIALIZED_NAME_SUPPRESS_HL7_FIELDS = "suppressHl7Fields";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_HL7_FIELDS)
  private String suppressHl7Fields;

  public static final String SERIALIZED_NAME_SUPPRESS_QST_FOR_AOE = "suppressQstForAoe";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_QST_FOR_AOE)
  private Boolean suppressQstForAoe = false;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private StandardHL7ConfigurationTransport transport;

  public static final String SERIALIZED_NAME_TRUNCATE_H_D_NAMESPACE_IDS = "truncateHDNamespaceIds";
  @SerializedName(SERIALIZED_NAME_TRUNCATE_H_D_NAMESPACE_IDS)
  private Boolean truncateHDNamespaceIds = false;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USE_BATCH_HEADERS = "useBatchHeaders";
  @SerializedName(SERIALIZED_NAME_USE_BATCH_HEADERS)
  private Boolean useBatchHeaders;

  public static final String SERIALIZED_NAME_USE_BLANK_INSTEAD_OF_UNKNOWN = "useBlankInsteadOfUnknown";
  @SerializedName(SERIALIZED_NAME_USE_BLANK_INSTEAD_OF_UNKNOWN)
  private String useBlankInsteadOfUnknown;

  public static final String SERIALIZED_NAME_USE_PID14_FOR_PATIENT_EMAIL = "usePid14ForPatientEmail";
  @SerializedName(SERIALIZED_NAME_USE_PID14_FOR_PATIENT_EMAIL)
  private Boolean usePid14ForPatientEmail = false;

  public static final String SERIALIZED_NAME_USE_TEST_PROCESSING_MODE = "useTestProcessingMode";
  @SerializedName(SERIALIZED_NAME_USE_TEST_PROCESSING_MODE)
  private Boolean useTestProcessingMode = false;

  public StandardHL7Configuration() {
  }

  public StandardHL7Configuration convertTimestampToDateTime(String convertTimestampToDateTime) {
    this.convertTimestampToDateTime = convertTimestampToDateTime;
    return this;
  }

  /**
   * A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format
   * @return convertTimestampToDateTime
   */
  @javax.annotation.Nullable
  public String getConvertTimestampToDateTime() {
    return convertTimestampToDateTime;
  }

  public void setConvertTimestampToDateTime(String convertTimestampToDateTime) {
    this.convertTimestampToDateTime = convertTimestampToDateTime;
  }


  public StandardHL7Configuration defaultAoeToUnknown(Boolean defaultAoeToUnknown) {
    this.defaultAoeToUnknown = defaultAoeToUnknown;
    return this;
  }

  /**
   * Default the AOE result to UNK
   * @return defaultAoeToUnknown
   */
  @javax.annotation.Nullable
  public Boolean getDefaultAoeToUnknown() {
    return defaultAoeToUnknown;
  }

  public void setDefaultAoeToUnknown(Boolean defaultAoeToUnknown) {
    this.defaultAoeToUnknown = defaultAoeToUnknown;
  }


  public StandardHL7Configuration includeAOE(Boolean includeAOE) {
    this.includeAOE = includeAOE;
    return this;
  }

  /**
   * Include the AOE
   * @return includeAOE
   */
  @javax.annotation.Nonnull
  public Boolean getIncludeAOE() {
    return includeAOE;
  }

  public void setIncludeAOE(Boolean includeAOE) {
    this.includeAOE = includeAOE;
  }


  public StandardHL7Configuration nameFormat(String nameFormat) {
    this.nameFormat = nameFormat;
    return this;
  }

  /**
   * The format to use for the file name generated by the translation
   * @return nameFormat
   */
  @javax.annotation.Nullable
  public String getNameFormat() {
    return nameFormat;
  }

  public void setNameFormat(String nameFormat) {
    this.nameFormat = nameFormat;
  }


  public StandardHL7Configuration phoneNumberFormatting(PhoneNumberFormattingEnum phoneNumberFormatting) {
    this.phoneNumberFormatting = phoneNumberFormatting;
    return this;
  }

  /**
   * How to format phone numbers (XTN fields)
   * @return phoneNumberFormatting
   */
  @javax.annotation.Nullable
  public PhoneNumberFormattingEnum getPhoneNumberFormatting() {
    return phoneNumberFormatting;
  }

  public void setPhoneNumberFormatting(PhoneNumberFormattingEnum phoneNumberFormatting) {
    this.phoneNumberFormatting = phoneNumberFormatting;
  }


  public StandardHL7Configuration receivingApplicationName(String receivingApplicationName) {
    this.receivingApplicationName = receivingApplicationName;
    return this;
  }

  /**
   * The receiving application name (needed for HL7 formats)
   * @return receivingApplicationName
   */
  @javax.annotation.Nullable
  public String getReceivingApplicationName() {
    return receivingApplicationName;
  }

  public void setReceivingApplicationName(String receivingApplicationName) {
    this.receivingApplicationName = receivingApplicationName;
  }


  public StandardHL7Configuration receivingApplicationOID(String receivingApplicationOID) {
    this.receivingApplicationOID = receivingApplicationOID;
    return this;
  }

  /**
   * The receiving application OID
   * @return receivingApplicationOID
   */
  @javax.annotation.Nullable
  public String getReceivingApplicationOID() {
    return receivingApplicationOID;
  }

  public void setReceivingApplicationOID(String receivingApplicationOID) {
    this.receivingApplicationOID = receivingApplicationOID;
  }


  public StandardHL7Configuration receivingFacilityName(String receivingFacilityName) {
    this.receivingFacilityName = receivingFacilityName;
    return this;
  }

  /**
   * The receiving facility name
   * @return receivingFacilityName
   */
  @javax.annotation.Nullable
  public String getReceivingFacilityName() {
    return receivingFacilityName;
  }

  public void setReceivingFacilityName(String receivingFacilityName) {
    this.receivingFacilityName = receivingFacilityName;
  }


  public StandardHL7Configuration receivingFacilityOID(String receivingFacilityOID) {
    this.receivingFacilityOID = receivingFacilityOID;
    return this;
  }

  /**
   * The receiving facility name
   * @return receivingFacilityOID
   */
  @javax.annotation.Nullable
  public String getReceivingFacilityOID() {
    return receivingFacilityOID;
  }

  public void setReceivingFacilityOID(String receivingFacilityOID) {
    this.receivingFacilityOID = receivingFacilityOID;
  }


  public StandardHL7Configuration receivingOrganization(String receivingOrganization) {
    this.receivingOrganization = receivingOrganization;
    return this;
  }

  /**
   * The name of the receiving organization in the message
   * @return receivingOrganization
   */
  @javax.annotation.Nullable
  public String getReceivingOrganization() {
    return receivingOrganization;
  }

  public void setReceivingOrganization(String receivingOrganization) {
    this.receivingOrganization = receivingOrganization;
  }


  public StandardHL7Configuration reportingFacilityId(String reportingFacilityId) {
    this.reportingFacilityId = reportingFacilityId;
    return this;
  }

  /**
   * The reporting facility id (if different from CDC PRIME&#39;s OID)
   * @return reportingFacilityId
   */
  @javax.annotation.Nullable
  public String getReportingFacilityId() {
    return reportingFacilityId;
  }

  public void setReportingFacilityId(String reportingFacilityId) {
    this.reportingFacilityId = reportingFacilityId;
  }


  public StandardHL7Configuration reportingFacilityIdType(String reportingFacilityIdType) {
    this.reportingFacilityIdType = reportingFacilityIdType;
    return this;
  }

  /**
   * The reporting facility id type (if different from OID)
   * @return reportingFacilityIdType
   */
  @javax.annotation.Nullable
  public String getReportingFacilityIdType() {
    return reportingFacilityIdType;
  }

  public void setReportingFacilityIdType(String reportingFacilityIdType) {
    this.reportingFacilityIdType = reportingFacilityIdType;
  }


  public StandardHL7Configuration reportingFacilityName(String reportingFacilityName) {
    this.reportingFacilityName = reportingFacilityName;
    return this;
  }

  /**
   * The reporting facility name (if different from CDC PRIME)
   * @return reportingFacilityName
   */
  @javax.annotation.Nullable
  public String getReportingFacilityName() {
    return reportingFacilityName;
  }

  public void setReportingFacilityName(String reportingFacilityName) {
    this.reportingFacilityName = reportingFacilityName;
  }


  public StandardHL7Configuration suppressAoe(Boolean suppressAoe) {
    this.suppressAoe = suppressAoe;
    return this;
  }

  /**
   * Suppress the AOE OBX results
   * @return suppressAoe
   */
  @javax.annotation.Nullable
  public Boolean getSuppressAoe() {
    return suppressAoe;
  }

  public void setSuppressAoe(Boolean suppressAoe) {
    this.suppressAoe = suppressAoe;
  }


  public StandardHL7Configuration suppressHl7Fields(String suppressHl7Fields) {
    this.suppressHl7Fields = suppressHl7Fields;
    return this;
  }

  /**
   * A comma delimited list of HL7 fields to suppress
   * @return suppressHl7Fields
   */
  @javax.annotation.Nullable
  public String getSuppressHl7Fields() {
    return suppressHl7Fields;
  }

  public void setSuppressHl7Fields(String suppressHl7Fields) {
    this.suppressHl7Fields = suppressHl7Fields;
  }


  public StandardHL7Configuration suppressQstForAoe(Boolean suppressQstForAoe) {
    this.suppressQstForAoe = suppressQstForAoe;
    return this;
  }

  /**
   * Suppress QST component is AOE OBX segments
   * @return suppressQstForAoe
   */
  @javax.annotation.Nullable
  public Boolean getSuppressQstForAoe() {
    return suppressQstForAoe;
  }

  public void setSuppressQstForAoe(Boolean suppressQstForAoe) {
    this.suppressQstForAoe = suppressQstForAoe;
  }


  public StandardHL7Configuration transport(StandardHL7ConfigurationTransport transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nonnull
  public StandardHL7ConfigurationTransport getTransport() {
    return transport;
  }

  public void setTransport(StandardHL7ConfigurationTransport transport) {
    this.transport = transport;
  }


  public StandardHL7Configuration truncateHDNamespaceIds(Boolean truncateHDNamespaceIds) {
    this.truncateHDNamespaceIds = truncateHDNamespaceIds;
    return this;
  }

  /**
   * Truncate the HD fields to HD_TRUNCATION_LIMIT
   * @return truncateHDNamespaceIds
   */
  @javax.annotation.Nullable
  public Boolean getTruncateHDNamespaceIds() {
    return truncateHDNamespaceIds;
  }

  public void setTruncateHDNamespaceIds(Boolean truncateHDNamespaceIds) {
    this.truncateHDNamespaceIds = truncateHDNamespaceIds;
  }


  public StandardHL7Configuration type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The discrimenator
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public StandardHL7Configuration useBatchHeaders(Boolean useBatchHeaders) {
    this.useBatchHeaders = useBatchHeaders;
    return this;
  }

  /**
   * Use BHS and FHS header
   * @return useBatchHeaders
   */
  @javax.annotation.Nonnull
  public Boolean getUseBatchHeaders() {
    return useBatchHeaders;
  }

  public void setUseBatchHeaders(Boolean useBatchHeaders) {
    this.useBatchHeaders = useBatchHeaders;
  }


  public StandardHL7Configuration useBlankInsteadOfUnknown(String useBlankInsteadOfUnknown) {
    this.useBlankInsteadOfUnknown = useBlankInsteadOfUnknown;
    return this;
  }

  /**
   * A comma delimited list of element names that should use blank instead of unknown
   * @return useBlankInsteadOfUnknown
   */
  @javax.annotation.Nullable
  public String getUseBlankInsteadOfUnknown() {
    return useBlankInsteadOfUnknown;
  }

  public void setUseBlankInsteadOfUnknown(String useBlankInsteadOfUnknown) {
    this.useBlankInsteadOfUnknown = useBlankInsteadOfUnknown;
  }


  public StandardHL7Configuration usePid14ForPatientEmail(Boolean usePid14ForPatientEmail) {
    this.usePid14ForPatientEmail = usePid14ForPatientEmail;
    return this;
  }

  /**
   * Use the PID-14 field for patient email instead of the standard PID-13 field
   * @return usePid14ForPatientEmail
   */
  @javax.annotation.Nullable
  public Boolean getUsePid14ForPatientEmail() {
    return usePid14ForPatientEmail;
  }

  public void setUsePid14ForPatientEmail(Boolean usePid14ForPatientEmail) {
    this.usePid14ForPatientEmail = usePid14ForPatientEmail;
  }


  public StandardHL7Configuration useTestProcessingMode(Boolean useTestProcessingMode) {
    this.useTestProcessingMode = useTestProcessingMode;
    return this;
  }

  /**
   * Set a test process mode flag
   * @return useTestProcessingMode
   */
  @javax.annotation.Nullable
  public Boolean getUseTestProcessingMode() {
    return useTestProcessingMode;
  }

  public void setUseTestProcessingMode(Boolean useTestProcessingMode) {
    this.useTestProcessingMode = useTestProcessingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardHL7Configuration standardHL7Configuration = (StandardHL7Configuration) o;
    return Objects.equals(this.convertTimestampToDateTime, standardHL7Configuration.convertTimestampToDateTime) &&
        Objects.equals(this.defaultAoeToUnknown, standardHL7Configuration.defaultAoeToUnknown) &&
        Objects.equals(this.includeAOE, standardHL7Configuration.includeAOE) &&
        Objects.equals(this.nameFormat, standardHL7Configuration.nameFormat) &&
        Objects.equals(this.phoneNumberFormatting, standardHL7Configuration.phoneNumberFormatting) &&
        Objects.equals(this.receivingApplicationName, standardHL7Configuration.receivingApplicationName) &&
        Objects.equals(this.receivingApplicationOID, standardHL7Configuration.receivingApplicationOID) &&
        Objects.equals(this.receivingFacilityName, standardHL7Configuration.receivingFacilityName) &&
        Objects.equals(this.receivingFacilityOID, standardHL7Configuration.receivingFacilityOID) &&
        Objects.equals(this.receivingOrganization, standardHL7Configuration.receivingOrganization) &&
        Objects.equals(this.reportingFacilityId, standardHL7Configuration.reportingFacilityId) &&
        Objects.equals(this.reportingFacilityIdType, standardHL7Configuration.reportingFacilityIdType) &&
        Objects.equals(this.reportingFacilityName, standardHL7Configuration.reportingFacilityName) &&
        Objects.equals(this.suppressAoe, standardHL7Configuration.suppressAoe) &&
        Objects.equals(this.suppressHl7Fields, standardHL7Configuration.suppressHl7Fields) &&
        Objects.equals(this.suppressQstForAoe, standardHL7Configuration.suppressQstForAoe) &&
        Objects.equals(this.transport, standardHL7Configuration.transport) &&
        Objects.equals(this.truncateHDNamespaceIds, standardHL7Configuration.truncateHDNamespaceIds) &&
        Objects.equals(this.type, standardHL7Configuration.type) &&
        Objects.equals(this.useBatchHeaders, standardHL7Configuration.useBatchHeaders) &&
        Objects.equals(this.useBlankInsteadOfUnknown, standardHL7Configuration.useBlankInsteadOfUnknown) &&
        Objects.equals(this.usePid14ForPatientEmail, standardHL7Configuration.usePid14ForPatientEmail) &&
        Objects.equals(this.useTestProcessingMode, standardHL7Configuration.useTestProcessingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convertTimestampToDateTime, defaultAoeToUnknown, includeAOE, nameFormat, phoneNumberFormatting, receivingApplicationName, receivingApplicationOID, receivingFacilityName, receivingFacilityOID, receivingOrganization, reportingFacilityId, reportingFacilityIdType, reportingFacilityName, suppressAoe, suppressHl7Fields, suppressQstForAoe, transport, truncateHDNamespaceIds, type, useBatchHeaders, useBlankInsteadOfUnknown, usePid14ForPatientEmail, useTestProcessingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardHL7Configuration {\n");
    sb.append("    convertTimestampToDateTime: ").append(toIndentedString(convertTimestampToDateTime)).append("\n");
    sb.append("    defaultAoeToUnknown: ").append(toIndentedString(defaultAoeToUnknown)).append("\n");
    sb.append("    includeAOE: ").append(toIndentedString(includeAOE)).append("\n");
    sb.append("    nameFormat: ").append(toIndentedString(nameFormat)).append("\n");
    sb.append("    phoneNumberFormatting: ").append(toIndentedString(phoneNumberFormatting)).append("\n");
    sb.append("    receivingApplicationName: ").append(toIndentedString(receivingApplicationName)).append("\n");
    sb.append("    receivingApplicationOID: ").append(toIndentedString(receivingApplicationOID)).append("\n");
    sb.append("    receivingFacilityName: ").append(toIndentedString(receivingFacilityName)).append("\n");
    sb.append("    receivingFacilityOID: ").append(toIndentedString(receivingFacilityOID)).append("\n");
    sb.append("    receivingOrganization: ").append(toIndentedString(receivingOrganization)).append("\n");
    sb.append("    reportingFacilityId: ").append(toIndentedString(reportingFacilityId)).append("\n");
    sb.append("    reportingFacilityIdType: ").append(toIndentedString(reportingFacilityIdType)).append("\n");
    sb.append("    reportingFacilityName: ").append(toIndentedString(reportingFacilityName)).append("\n");
    sb.append("    suppressAoe: ").append(toIndentedString(suppressAoe)).append("\n");
    sb.append("    suppressHl7Fields: ").append(toIndentedString(suppressHl7Fields)).append("\n");
    sb.append("    suppressQstForAoe: ").append(toIndentedString(suppressQstForAoe)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    truncateHDNamespaceIds: ").append(toIndentedString(truncateHDNamespaceIds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    useBatchHeaders: ").append(toIndentedString(useBatchHeaders)).append("\n");
    sb.append("    useBlankInsteadOfUnknown: ").append(toIndentedString(useBlankInsteadOfUnknown)).append("\n");
    sb.append("    usePid14ForPatientEmail: ").append(toIndentedString(usePid14ForPatientEmail)).append("\n");
    sb.append("    useTestProcessingMode: ").append(toIndentedString(useTestProcessingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("convertTimestampToDateTime");
    openapiFields.add("defaultAoeToUnknown");
    openapiFields.add("includeAOE");
    openapiFields.add("nameFormat");
    openapiFields.add("phoneNumberFormatting");
    openapiFields.add("receivingApplicationName");
    openapiFields.add("receivingApplicationOID");
    openapiFields.add("receivingFacilityName");
    openapiFields.add("receivingFacilityOID");
    openapiFields.add("receivingOrganization");
    openapiFields.add("reportingFacilityId");
    openapiFields.add("reportingFacilityIdType");
    openapiFields.add("reportingFacilityName");
    openapiFields.add("suppressAoe");
    openapiFields.add("suppressHl7Fields");
    openapiFields.add("suppressQstForAoe");
    openapiFields.add("transport");
    openapiFields.add("truncateHDNamespaceIds");
    openapiFields.add("type");
    openapiFields.add("useBatchHeaders");
    openapiFields.add("useBlankInsteadOfUnknown");
    openapiFields.add("usePid14ForPatientEmail");
    openapiFields.add("useTestProcessingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("includeAOE");
    openapiRequiredFields.add("transport");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("useBatchHeaders");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandardHL7Configuration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardHL7Configuration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardHL7Configuration is not found in the empty JSON string", StandardHL7Configuration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandardHL7Configuration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardHL7Configuration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StandardHL7Configuration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("convertTimestampToDateTime") != null && !jsonObj.get("convertTimestampToDateTime").isJsonNull()) && !jsonObj.get("convertTimestampToDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convertTimestampToDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convertTimestampToDateTime").toString()));
      }
      if ((jsonObj.get("nameFormat") != null && !jsonObj.get("nameFormat").isJsonNull()) && !jsonObj.get("nameFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFormat").toString()));
      }
      if ((jsonObj.get("phoneNumberFormatting") != null && !jsonObj.get("phoneNumberFormatting").isJsonNull()) && !jsonObj.get("phoneNumberFormatting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberFormatting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberFormatting").toString()));
      }
      // validate the optional field `phoneNumberFormatting`
      if (jsonObj.get("phoneNumberFormatting") != null && !jsonObj.get("phoneNumberFormatting").isJsonNull()) {
        PhoneNumberFormattingEnum.validateJsonElement(jsonObj.get("phoneNumberFormatting"));
      }
      if ((jsonObj.get("receivingApplicationName") != null && !jsonObj.get("receivingApplicationName").isJsonNull()) && !jsonObj.get("receivingApplicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingApplicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingApplicationName").toString()));
      }
      if ((jsonObj.get("receivingApplicationOID") != null && !jsonObj.get("receivingApplicationOID").isJsonNull()) && !jsonObj.get("receivingApplicationOID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingApplicationOID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingApplicationOID").toString()));
      }
      if ((jsonObj.get("receivingFacilityName") != null && !jsonObj.get("receivingFacilityName").isJsonNull()) && !jsonObj.get("receivingFacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingFacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingFacilityName").toString()));
      }
      if ((jsonObj.get("receivingFacilityOID") != null && !jsonObj.get("receivingFacilityOID").isJsonNull()) && !jsonObj.get("receivingFacilityOID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingFacilityOID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingFacilityOID").toString()));
      }
      if ((jsonObj.get("receivingOrganization") != null && !jsonObj.get("receivingOrganization").isJsonNull()) && !jsonObj.get("receivingOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingOrganization").toString()));
      }
      if ((jsonObj.get("reportingFacilityId") != null && !jsonObj.get("reportingFacilityId").isJsonNull()) && !jsonObj.get("reportingFacilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingFacilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingFacilityId").toString()));
      }
      if ((jsonObj.get("reportingFacilityIdType") != null && !jsonObj.get("reportingFacilityIdType").isJsonNull()) && !jsonObj.get("reportingFacilityIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingFacilityIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingFacilityIdType").toString()));
      }
      if ((jsonObj.get("reportingFacilityName") != null && !jsonObj.get("reportingFacilityName").isJsonNull()) && !jsonObj.get("reportingFacilityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingFacilityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingFacilityName").toString()));
      }
      if ((jsonObj.get("suppressHl7Fields") != null && !jsonObj.get("suppressHl7Fields").isJsonNull()) && !jsonObj.get("suppressHl7Fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suppressHl7Fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suppressHl7Fields").toString()));
      }
      // validate the required field `transport`
      StandardHL7ConfigurationTransport.validateJsonElement(jsonObj.get("transport"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("useBlankInsteadOfUnknown") != null && !jsonObj.get("useBlankInsteadOfUnknown").isJsonNull()) && !jsonObj.get("useBlankInsteadOfUnknown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `useBlankInsteadOfUnknown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("useBlankInsteadOfUnknown").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardHL7Configuration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardHL7Configuration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardHL7Configuration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardHL7Configuration.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardHL7Configuration>() {
           @Override
           public void write(JsonWriter out, StandardHL7Configuration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardHL7Configuration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandardHL7Configuration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandardHL7Configuration
   * @throws IOException if the JSON string is invalid with respect to StandardHL7Configuration
   */
  public static StandardHL7Configuration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardHL7Configuration.class);
  }

  /**
   * Convert an instance of StandardHL7Configuration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

