/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single filter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:32.539681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceiverJurisdictionalFiltersInner {
  public static final String SERIALIZED_NAME_DOES_NOT_MATCH = "doesNotMatch";
  @SerializedName(SERIALIZED_NAME_DOES_NOT_MATCH)
  private Boolean doesNotMatch = false;

  /**
   * What fields to match in the filter
   */
  @JsonAdapter(MatchFieldsEnum.Adapter.class)
  public enum MatchFieldsEnum {
    FACILITY_OR_PATIENT_ADDRESS("FACILITY_OR_PATIENT_ADDRESS"),
    
    FACILITY_ADDRESS("FACILITY_ADDRESS"),
    
    FACILITY_NAME("FACILITY_NAME"),
    
    ABNORMAL_VALUE("ABNORMAL_VALUE");

    private String value;

    MatchFieldsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchFieldsEnum fromValue(String value) {
      for (MatchFieldsEnum b : MatchFieldsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchFieldsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchFieldsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchFieldsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchFieldsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchFieldsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_FIELDS = "matchFields";
  @SerializedName(SERIALIZED_NAME_MATCH_FIELDS)
  private MatchFieldsEnum matchFields;

  public static final String SERIALIZED_NAME_MATCH_VALUES = "matchValues";
  @SerializedName(SERIALIZED_NAME_MATCH_VALUES)
  private List<String> matchValues = new ArrayList<>();

  public ReceiverJurisdictionalFiltersInner() {
  }

  public ReceiverJurisdictionalFiltersInner doesNotMatch(Boolean doesNotMatch) {
    this.doesNotMatch = doesNotMatch;
    return this;
  }

  /**
   * Ensure that the result does not match
   * @return doesNotMatch
   */
  @javax.annotation.Nullable
  public Boolean getDoesNotMatch() {
    return doesNotMatch;
  }

  public void setDoesNotMatch(Boolean doesNotMatch) {
    this.doesNotMatch = doesNotMatch;
  }


  public ReceiverJurisdictionalFiltersInner matchFields(MatchFieldsEnum matchFields) {
    this.matchFields = matchFields;
    return this;
  }

  /**
   * What fields to match in the filter
   * @return matchFields
   */
  @javax.annotation.Nullable
  public MatchFieldsEnum getMatchFields() {
    return matchFields;
  }

  public void setMatchFields(MatchFieldsEnum matchFields) {
    this.matchFields = matchFields;
  }


  public ReceiverJurisdictionalFiltersInner matchValues(List<String> matchValues) {
    this.matchValues = matchValues;
    return this;
  }

  public ReceiverJurisdictionalFiltersInner addMatchValuesItem(String matchValuesItem) {
    if (this.matchValues == null) {
      this.matchValues = new ArrayList<>();
    }
    this.matchValues.add(matchValuesItem);
    return this;
  }

  /**
   * What is the value to match against
   * @return matchValues
   */
  @javax.annotation.Nullable
  public List<String> getMatchValues() {
    return matchValues;
  }

  public void setMatchValues(List<String> matchValues) {
    this.matchValues = matchValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiverJurisdictionalFiltersInner receiverJurisdictionalFiltersInner = (ReceiverJurisdictionalFiltersInner) o;
    return Objects.equals(this.doesNotMatch, receiverJurisdictionalFiltersInner.doesNotMatch) &&
        Objects.equals(this.matchFields, receiverJurisdictionalFiltersInner.matchFields) &&
        Objects.equals(this.matchValues, receiverJurisdictionalFiltersInner.matchValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doesNotMatch, matchFields, matchValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiverJurisdictionalFiltersInner {\n");
    sb.append("    doesNotMatch: ").append(toIndentedString(doesNotMatch)).append("\n");
    sb.append("    matchFields: ").append(toIndentedString(matchFields)).append("\n");
    sb.append("    matchValues: ").append(toIndentedString(matchValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doesNotMatch");
    openapiFields.add("matchFields");
    openapiFields.add("matchValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceiverJurisdictionalFiltersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceiverJurisdictionalFiltersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiverJurisdictionalFiltersInner is not found in the empty JSON string", ReceiverJurisdictionalFiltersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceiverJurisdictionalFiltersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceiverJurisdictionalFiltersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("matchFields") != null && !jsonObj.get("matchFields").isJsonNull()) && !jsonObj.get("matchFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchFields").toString()));
      }
      // validate the optional field `matchFields`
      if (jsonObj.get("matchFields") != null && !jsonObj.get("matchFields").isJsonNull()) {
        MatchFieldsEnum.validateJsonElement(jsonObj.get("matchFields"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("matchValues") != null && !jsonObj.get("matchValues").isJsonNull() && !jsonObj.get("matchValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchValues` to be an array in the JSON string but got `%s`", jsonObj.get("matchValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiverJurisdictionalFiltersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiverJurisdictionalFiltersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiverJurisdictionalFiltersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiverJurisdictionalFiltersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiverJurisdictionalFiltersInner>() {
           @Override
           public void write(JsonWriter out, ReceiverJurisdictionalFiltersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiverJurisdictionalFiltersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceiverJurisdictionalFiltersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceiverJurisdictionalFiltersInner
   * @throws IOException if the JSON string is invalid with respect to ReceiverJurisdictionalFiltersInner
   */
  public static ReceiverJurisdictionalFiltersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiverJurisdictionalFiltersInner.class);
  }

  /**
   * Convert an instance of ReceiverJurisdictionalFiltersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

