/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a single AS2 connection in all of it variations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:32.539681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2Transport {
  public static final String SERIALIZED_NAME_CONTENT_DESCRIPTION = "contentDescription";
  @SerializedName(SERIALIZED_NAME_CONTENT_DESCRIPTION)
  private String contentDescription = "SARS-CoV-2 Electronic Lab Results";

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType = "application/hl7-v2";

  public static final String SERIALIZED_NAME_RECEIVER_ID = "receiverId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_ID)
  private String receiverId;

  public static final String SERIALIZED_NAME_RECEIVER_URL = "receiverUrl";
  @SerializedName(SERIALIZED_NAME_RECEIVER_URL)
  private String receiverUrl;

  public static final String SERIALIZED_NAME_SENDER_EMAIL = "senderEmail";
  @SerializedName(SERIALIZED_NAME_SENDER_EMAIL)
  private String senderEmail = "reportstream@cdc.gov";

  public static final String SERIALIZED_NAME_SENDER_ID = "senderId";
  @SerializedName(SERIALIZED_NAME_SENDER_ID)
  private String senderId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AS2Transport() {
  }

  public AS2Transport contentDescription(String contentDescription) {
    this.contentDescription = contentDescription;
    return this;
  }

  /**
   * A description of the content of the message. Usually, the same for all messages.
   * @return contentDescription
   */
  @javax.annotation.Nullable
  public String getContentDescription() {
    return contentDescription;
  }

  public void setContentDescription(String contentDescription) {
    this.contentDescription = contentDescription;
  }


  public AS2Transport mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The MIME type of the message
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public AS2Transport receiverId(String receiverId) {
    this.receiverId = receiverId;
    return this;
  }

  /**
   * The AS2 id of the receiver. Usually, the same for all senders.
   * @return receiverId
   */
  @javax.annotation.Nonnull
  public String getReceiverId() {
    return receiverId;
  }

  public void setReceiverId(String receiverId) {
    this.receiverId = receiverId;
  }


  public AS2Transport receiverUrl(String receiverUrl) {
    this.receiverUrl = receiverUrl;
    return this;
  }

  /**
   * The URL to the AS2 end-point
   * @return receiverUrl
   */
  @javax.annotation.Nonnull
  public String getReceiverUrl() {
    return receiverUrl;
  }

  public void setReceiverUrl(String receiverUrl) {
    this.receiverUrl = receiverUrl;
  }


  public AS2Transport senderEmail(String senderEmail) {
    this.senderEmail = senderEmail;
    return this;
  }

  /**
   * The email address to contact someone about the message
   * @return senderEmail
   */
  @javax.annotation.Nullable
  public String getSenderEmail() {
    return senderEmail;
  }

  public void setSenderEmail(String senderEmail) {
    this.senderEmail = senderEmail;
  }


  public AS2Transport senderId(String senderId) {
    this.senderId = senderId;
    return this;
  }

  /**
   * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
   * @return senderId
   */
  @javax.annotation.Nonnull
  public String getSenderId() {
    return senderId;
  }

  public void setSenderId(String senderId) {
    this.senderId = senderId;
  }


  public AS2Transport type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The discriminator
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2Transport as2Transport = (AS2Transport) o;
    return Objects.equals(this.contentDescription, as2Transport.contentDescription) &&
        Objects.equals(this.mimeType, as2Transport.mimeType) &&
        Objects.equals(this.receiverId, as2Transport.receiverId) &&
        Objects.equals(this.receiverUrl, as2Transport.receiverUrl) &&
        Objects.equals(this.senderEmail, as2Transport.senderEmail) &&
        Objects.equals(this.senderId, as2Transport.senderId) &&
        Objects.equals(this.type, as2Transport.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentDescription, mimeType, receiverId, receiverUrl, senderEmail, senderId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2Transport {\n");
    sb.append("    contentDescription: ").append(toIndentedString(contentDescription)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    receiverId: ").append(toIndentedString(receiverId)).append("\n");
    sb.append("    receiverUrl: ").append(toIndentedString(receiverUrl)).append("\n");
    sb.append("    senderEmail: ").append(toIndentedString(senderEmail)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentDescription");
    openapiFields.add("mimeType");
    openapiFields.add("receiverId");
    openapiFields.add("receiverUrl");
    openapiFields.add("senderEmail");
    openapiFields.add("senderId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("receiverId");
    openapiRequiredFields.add("receiverUrl");
    openapiRequiredFields.add("senderId");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2Transport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2Transport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2Transport is not found in the empty JSON string", AS2Transport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2Transport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2Transport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AS2Transport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentDescription") != null && !jsonObj.get("contentDescription").isJsonNull()) && !jsonObj.get("contentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentDescription").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if (!jsonObj.get("receiverId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverId").toString()));
      }
      if (!jsonObj.get("receiverUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverUrl").toString()));
      }
      if ((jsonObj.get("senderEmail") != null && !jsonObj.get("senderEmail").isJsonNull()) && !jsonObj.get("senderEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderEmail").toString()));
      }
      if (!jsonObj.get("senderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2Transport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2Transport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2Transport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2Transport.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2Transport>() {
           @Override
           public void write(JsonWriter out, AS2Transport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2Transport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2Transport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2Transport
   * @throws IOException if the JSON string is invalid with respect to AS2Transport
   */
  public static AS2Transport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2Transport.class);
  }

  /**
   * Convert an instance of AS2Transport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

