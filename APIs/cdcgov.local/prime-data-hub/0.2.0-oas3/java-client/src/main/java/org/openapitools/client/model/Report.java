/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Destination;
import org.openapitools.client.model.Detail;
import org.openapitools.client.model.ItemRouting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:32.539681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Report {
  public static final String SERIALIZED_NAME_DESTINATION_COUNT = "destinationCount";
  @SerializedName(SERIALIZED_NAME_DESTINATION_COUNT)
  private Integer destinationCount;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<Destination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_COUNT = "errorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Integer errorCount;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Detail> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REPORT_ITEM_COUNT = "reportItemCount";
  @SerializedName(SERIALIZED_NAME_REPORT_ITEM_COUNT)
  private Integer reportItemCount;

  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private List<ItemRouting> routing = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_WARNING_COUNT = "warningCount";
  @SerializedName(SERIALIZED_NAME_WARNING_COUNT)
  private Integer warningCount;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Detail> warnings = new ArrayList<>();

  public Report() {
  }

  public Report destinationCount(Integer destinationCount) {
    this.destinationCount = destinationCount;
    return this;
  }

  /**
   * total destinations recieving the report(s)
   * @return destinationCount
   */
  @javax.annotation.Nullable
  public Integer getDestinationCount() {
    return destinationCount;
  }

  public void setDestinationCount(Integer destinationCount) {
    this.destinationCount = destinationCount;
  }


  public Report destinations(List<Destination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public Report addDestinationsItem(Destination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * where the report is being sent to
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<Destination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<Destination> destinations) {
    this.destinations = destinations;
  }


  public Report errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * total errors found during initial validation.  There may be multiple errors per item.
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public Report errors(List<Detail> errors) {
    this.errors = errors;
    return this;
  }

  public Report addErrorsItem(Detail errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * a list of errors in the report
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Detail> getErrors() {
    return errors;
  }

  public void setErrors(List<Detail> errors) {
    this.errors = errors;
  }


  public Report id(String id) {
    this.id = id;
    return this;
  }

  /**
   * the id for the report assigned by the Hub
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Report reportItemCount(Integer reportItemCount) {
    this.reportItemCount = reportItemCount;
    return this;
  }

  /**
   * total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
   * @return reportItemCount
   */
  @javax.annotation.Nullable
  public Integer getReportItemCount() {
    return reportItemCount;
  }

  public void setReportItemCount(Integer reportItemCount) {
    this.reportItemCount = reportItemCount;
  }


  public Report routing(List<ItemRouting> routing) {
    this.routing = routing;
    return this;
  }

  public Report addRoutingItem(ItemRouting routingItem) {
    if (this.routing == null) {
      this.routing = new ArrayList<>();
    }
    this.routing.add(routingItem);
    return this;
  }

  /**
   * The receiver destination names for each item in the report. This is displayed when verbose&#x3D;true is present on the query string.
   * @return routing
   */
  @javax.annotation.Nullable
  public List<ItemRouting> getRouting() {
    return routing;
  }

  public void setRouting(List<ItemRouting> routing) {
    this.routing = routing;
  }


  public Report timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * the timestamp for this report submission
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public Report topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * the topic configured for the client organization sender
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public Report warningCount(Integer warningCount) {
    this.warningCount = warningCount;
    return this;
  }

  /**
   * total warnings found during initial validation.  There may be multiple warnings per item.
   * @return warningCount
   */
  @javax.annotation.Nullable
  public Integer getWarningCount() {
    return warningCount;
  }

  public void setWarningCount(Integer warningCount) {
    this.warningCount = warningCount;
  }


  public Report warnings(List<Detail> warnings) {
    this.warnings = warnings;
    return this;
  }

  public Report addWarningsItem(Detail warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * a list of warnings in the report
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Detail> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<Detail> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.destinationCount, report.destinationCount) &&
        Objects.equals(this.destinations, report.destinations) &&
        Objects.equals(this.errorCount, report.errorCount) &&
        Objects.equals(this.errors, report.errors) &&
        Objects.equals(this.id, report.id) &&
        Objects.equals(this.reportItemCount, report.reportItemCount) &&
        Objects.equals(this.routing, report.routing) &&
        Objects.equals(this.timestamp, report.timestamp) &&
        Objects.equals(this.topic, report.topic) &&
        Objects.equals(this.warningCount, report.warningCount) &&
        Objects.equals(this.warnings, report.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationCount, destinations, errorCount, errors, id, reportItemCount, routing, timestamp, topic, warningCount, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    destinationCount: ").append(toIndentedString(destinationCount)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reportItemCount: ").append(toIndentedString(reportItemCount)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    warningCount: ").append(toIndentedString(warningCount)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationCount");
    openapiFields.add("destinations");
    openapiFields.add("errorCount");
    openapiFields.add("errors");
    openapiFields.add("id");
    openapiFields.add("reportItemCount");
    openapiFields.add("routing");
    openapiFields.add("timestamp");
    openapiFields.add("topic");
    openapiFields.add("warningCount");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Report
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Report.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Report.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            Destination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Detail.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) {
        JsonArray jsonArrayrouting = jsonObj.getAsJsonArray("routing");
        if (jsonArrayrouting != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routing` to be an array in the JSON string but got `%s`", jsonObj.get("routing").toString()));
          }

          // validate the optional field `routing` (array)
          for (int i = 0; i < jsonArrayrouting.size(); i++) {
            ItemRouting.validateJsonElement(jsonArrayrouting.get(i));
          };
        }
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Detail.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Report given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Report
   * @throws IOException if the JSON string is invalid with respect to Report
   */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

  /**
   * Convert an instance of Report to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

