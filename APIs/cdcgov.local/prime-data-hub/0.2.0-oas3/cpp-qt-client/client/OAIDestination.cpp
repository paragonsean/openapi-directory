/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestination::OAIDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestination::OAIDestination() {
    this->initializeModel();
}

OAIDestination::~OAIDestination() {}

void OAIDestination::initializeModel() {

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_sending_at_isSet = false;
    m_sending_at_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestination::fromJsonObject(QJsonObject json) {

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("itemCount")]);
    m_item_count_isSet = !json[QString("itemCount")].isNull() && m_item_count_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_sending_at_isValid = ::OpenAPI::fromJsonValue(m_sending_at, json[QString("sending_at")]);
    m_sending_at_isSet = !json[QString("sending_at")].isNull() && m_sending_at_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_item_count_isSet) {
        obj.insert(QString("itemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_sending_at_isSet) {
        obj.insert(QString("sending_at"), ::OpenAPI::toJsonValue(m_sending_at));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

qint32 OAIDestination::getItemCount() const {
    return m_item_count;
}
void OAIDestination::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIDestination::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIDestination::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAIDestination::getOrganization() const {
    return m_organization;
}
void OAIDestination::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIDestination::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIDestination::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIDestination::getOrganizationId() const {
    return m_organization_id;
}
void OAIDestination::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIDestination::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIDestination::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QDateTime OAIDestination::getSendingAt() const {
    return m_sending_at;
}
void OAIDestination::setSendingAt(const QDateTime &sending_at) {
    m_sending_at = sending_at;
    m_sending_at_isSet = true;
}

bool OAIDestination::is_sending_at_Set() const{
    return m_sending_at_isSet;
}

bool OAIDestination::is_sending_at_Valid() const{
    return m_sending_at_isValid;
}

QString OAIDestination::getService() const {
    return m_service;
}
void OAIDestination::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIDestination::is_service_Set() const{
    return m_service_isSet;
}

bool OAIDestination::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
