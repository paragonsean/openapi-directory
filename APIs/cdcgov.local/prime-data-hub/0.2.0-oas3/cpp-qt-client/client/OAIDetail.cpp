/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetail::OAIDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetail::OAIDetail() {
    this->initializeModel();
}

OAIDetail::~OAIDetail() {}

void OAIDetail::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetail::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIDetail::getDetail() const {
    return m_detail;
}
void OAIDetail::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIDetail::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIDetail::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIDetail::getId() const {
    return m_id;
}
void OAIDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDetail::getScope() const {
    return m_scope;
}
void OAIDetail::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDetail::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDetail::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
