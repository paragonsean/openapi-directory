/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiver_jurisdictionalFilters_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiver_jurisdictionalFilters_inner::OAIReceiver_jurisdictionalFilters_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiver_jurisdictionalFilters_inner::OAIReceiver_jurisdictionalFilters_inner() {
    this->initializeModel();
}

OAIReceiver_jurisdictionalFilters_inner::~OAIReceiver_jurisdictionalFilters_inner() {}

void OAIReceiver_jurisdictionalFilters_inner::initializeModel() {

    m_does_not_match_isSet = false;
    m_does_not_match_isValid = false;

    m_match_fields_isSet = false;
    m_match_fields_isValid = false;

    m_match_values_isSet = false;
    m_match_values_isValid = false;
}

void OAIReceiver_jurisdictionalFilters_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiver_jurisdictionalFilters_inner::fromJsonObject(QJsonObject json) {

    m_does_not_match_isValid = ::OpenAPI::fromJsonValue(m_does_not_match, json[QString("doesNotMatch")]);
    m_does_not_match_isSet = !json[QString("doesNotMatch")].isNull() && m_does_not_match_isValid;

    m_match_fields_isValid = ::OpenAPI::fromJsonValue(m_match_fields, json[QString("matchFields")]);
    m_match_fields_isSet = !json[QString("matchFields")].isNull() && m_match_fields_isValid;

    m_match_values_isValid = ::OpenAPI::fromJsonValue(m_match_values, json[QString("matchValues")]);
    m_match_values_isSet = !json[QString("matchValues")].isNull() && m_match_values_isValid;
}

QString OAIReceiver_jurisdictionalFilters_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiver_jurisdictionalFilters_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_does_not_match_isSet) {
        obj.insert(QString("doesNotMatch"), ::OpenAPI::toJsonValue(m_does_not_match));
    }
    if (m_match_fields_isSet) {
        obj.insert(QString("matchFields"), ::OpenAPI::toJsonValue(m_match_fields));
    }
    if (m_match_values.size() > 0) {
        obj.insert(QString("matchValues"), ::OpenAPI::toJsonValue(m_match_values));
    }
    return obj;
}

bool OAIReceiver_jurisdictionalFilters_inner::isDoesNotMatch() const {
    return m_does_not_match;
}
void OAIReceiver_jurisdictionalFilters_inner::setDoesNotMatch(const bool &does_not_match) {
    m_does_not_match = does_not_match;
    m_does_not_match_isSet = true;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_does_not_match_Set() const{
    return m_does_not_match_isSet;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_does_not_match_Valid() const{
    return m_does_not_match_isValid;
}

QString OAIReceiver_jurisdictionalFilters_inner::getMatchFields() const {
    return m_match_fields;
}
void OAIReceiver_jurisdictionalFilters_inner::setMatchFields(const QString &match_fields) {
    m_match_fields = match_fields;
    m_match_fields_isSet = true;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_match_fields_Set() const{
    return m_match_fields_isSet;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_match_fields_Valid() const{
    return m_match_fields_isValid;
}

QList<QString> OAIReceiver_jurisdictionalFilters_inner::getMatchValues() const {
    return m_match_values;
}
void OAIReceiver_jurisdictionalFilters_inner::setMatchValues(const QList<QString> &match_values) {
    m_match_values = match_values;
    m_match_values_isSet = true;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_match_values_Set() const{
    return m_match_values_isSet;
}

bool OAIReceiver_jurisdictionalFilters_inner::is_match_values_Valid() const{
    return m_match_values_isValid;
}

bool OAIReceiver_jurisdictionalFilters_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_does_not_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiver_jurisdictionalFilters_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
