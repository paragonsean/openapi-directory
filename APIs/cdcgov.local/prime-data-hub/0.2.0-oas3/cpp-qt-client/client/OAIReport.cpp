/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_destination_count_isSet = false;
    m_destination_count_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_report_item_count_isSet = false;
    m_report_item_count_isValid = false;

    m_routing_isSet = false;
    m_routing_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_warning_count_isSet = false;
    m_warning_count_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_destination_count_isValid = ::OpenAPI::fromJsonValue(m_destination_count, json[QString("destinationCount")]);
    m_destination_count_isSet = !json[QString("destinationCount")].isNull() && m_destination_count_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_report_item_count_isValid = ::OpenAPI::fromJsonValue(m_report_item_count, json[QString("reportItemCount")]);
    m_report_item_count_isSet = !json[QString("reportItemCount")].isNull() && m_report_item_count_isValid;

    m_routing_isValid = ::OpenAPI::fromJsonValue(m_routing, json[QString("routing")]);
    m_routing_isSet = !json[QString("routing")].isNull() && m_routing_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_warning_count_isValid = ::OpenAPI::fromJsonValue(m_warning_count, json[QString("warningCount")]);
    m_warning_count_isSet = !json[QString("warningCount")].isNull() && m_warning_count_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_count_isSet) {
        obj.insert(QString("destinationCount"), ::OpenAPI::toJsonValue(m_destination_count));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_report_item_count_isSet) {
        obj.insert(QString("reportItemCount"), ::OpenAPI::toJsonValue(m_report_item_count));
    }
    if (m_routing.size() > 0) {
        obj.insert(QString("routing"), ::OpenAPI::toJsonValue(m_routing));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_warning_count_isSet) {
        obj.insert(QString("warningCount"), ::OpenAPI::toJsonValue(m_warning_count));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

qint32 OAIReport::getDestinationCount() const {
    return m_destination_count;
}
void OAIReport::setDestinationCount(const qint32 &destination_count) {
    m_destination_count = destination_count;
    m_destination_count_isSet = true;
}

bool OAIReport::is_destination_count_Set() const{
    return m_destination_count_isSet;
}

bool OAIReport::is_destination_count_Valid() const{
    return m_destination_count_isValid;
}

QList<OAIDestination> OAIReport::getDestinations() const {
    return m_destinations;
}
void OAIReport::setDestinations(const QList<OAIDestination> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIReport::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIReport::is_destinations_Valid() const{
    return m_destinations_isValid;
}

qint32 OAIReport::getErrorCount() const {
    return m_error_count;
}
void OAIReport::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIReport::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIReport::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QList<OAIDetail> OAIReport::getErrors() const {
    return m_errors;
}
void OAIReport::setErrors(const QList<OAIDetail> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIReport::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIReport::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIReport::getId() const {
    return m_id;
}
void OAIReport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReport::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIReport::getReportItemCount() const {
    return m_report_item_count;
}
void OAIReport::setReportItemCount(const qint32 &report_item_count) {
    m_report_item_count = report_item_count;
    m_report_item_count_isSet = true;
}

bool OAIReport::is_report_item_count_Set() const{
    return m_report_item_count_isSet;
}

bool OAIReport::is_report_item_count_Valid() const{
    return m_report_item_count_isValid;
}

QList<OAIItemRouting> OAIReport::getRouting() const {
    return m_routing;
}
void OAIReport::setRouting(const QList<OAIItemRouting> &routing) {
    m_routing = routing;
    m_routing_isSet = true;
}

bool OAIReport::is_routing_Set() const{
    return m_routing_isSet;
}

bool OAIReport::is_routing_Valid() const{
    return m_routing_isValid;
}

QString OAIReport::getTimestamp() const {
    return m_timestamp;
}
void OAIReport::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIReport::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIReport::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIReport::getTopic() const {
    return m_topic;
}
void OAIReport::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIReport::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIReport::is_topic_Valid() const{
    return m_topic_isValid;
}

qint32 OAIReport::getWarningCount() const {
    return m_warning_count;
}
void OAIReport::setWarningCount(const qint32 &warning_count) {
    m_warning_count = warning_count;
    m_warning_count_isSet = true;
}

bool OAIReport::is_warning_count_Set() const{
    return m_warning_count_isSet;
}

bool OAIReport::is_warning_count_Valid() const{
    return m_warning_count_isValid;
}

QList<OAIDetail> OAIReport::getWarnings() const {
    return m_warnings;
}
void OAIReport::setWarnings(const QList<OAIDetail> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReport::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReport::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
