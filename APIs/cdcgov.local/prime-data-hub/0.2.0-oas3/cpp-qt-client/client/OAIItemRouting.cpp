/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemRouting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemRouting::OAIItemRouting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemRouting::OAIItemRouting() {
    this->initializeModel();
}

OAIItemRouting::~OAIItemRouting() {}

void OAIItemRouting::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_report_index_isSet = false;
    m_report_index_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIItemRouting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemRouting::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_report_index_isValid = ::OpenAPI::fromJsonValue(m_report_index, json[QString("reportIndex")]);
    m_report_index_isSet = !json[QString("reportIndex")].isNull() && m_report_index_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIItemRouting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemRouting::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_report_index_isSet) {
        obj.insert(QString("reportIndex"), ::OpenAPI::toJsonValue(m_report_index));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QList<QString> OAIItemRouting::getDestinations() const {
    return m_destinations;
}
void OAIItemRouting::setDestinations(const QList<QString> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIItemRouting::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIItemRouting::is_destinations_Valid() const{
    return m_destinations_isValid;
}

qint32 OAIItemRouting::getReportIndex() const {
    return m_report_index;
}
void OAIItemRouting::setReportIndex(const qint32 &report_index) {
    m_report_index = report_index;
    m_report_index_isSet = true;
}

bool OAIItemRouting::is_report_index_Set() const{
    return m_report_index_isSet;
}

bool OAIItemRouting::is_report_index_Valid() const{
    return m_report_index_isValid;
}

QString OAIItemRouting::getTrackingId() const {
    return m_tracking_id;
}
void OAIItemRouting::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIItemRouting::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIItemRouting::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIItemRouting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemRouting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
