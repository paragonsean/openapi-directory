/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISFTPTransport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISFTPTransport::OAISFTPTransport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISFTPTransport::OAISFTPTransport() {
    this->initializeModel();
}

OAISFTPTransport::~OAISFTPTransport() {}

void OAISFTPTransport::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISFTPTransport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISFTPTransport::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISFTPTransport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISFTPTransport::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISFTPTransport::getFilePath() const {
    return m_file_path;
}
void OAISFTPTransport::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAISFTPTransport::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAISFTPTransport::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAISFTPTransport::getHost() const {
    return m_host;
}
void OAISFTPTransport::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISFTPTransport::is_host_Set() const{
    return m_host_isSet;
}

bool OAISFTPTransport::is_host_Valid() const{
    return m_host_isValid;
}

double OAISFTPTransport::getPort() const {
    return m_port;
}
void OAISFTPTransport::setPort(const double &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAISFTPTransport::is_port_Set() const{
    return m_port_isSet;
}

bool OAISFTPTransport::is_port_Valid() const{
    return m_port_isValid;
}

QString OAISFTPTransport::getType() const {
    return m_type;
}
void OAISFTPTransport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISFTPTransport::is_type_Set() const{
    return m_type_isSet;
}

bool OAISFTPTransport::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISFTPTransport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISFTPTransport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_path_isValid && m_host_isValid && m_port_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
