/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISender::OAISender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISender::OAISender() {
    this->initializeModel();
}

OAISender::~OAISender() {}

void OAISender::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAISender::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISender::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(m_organization_name, json[QString("organizationName")]);
    m_organization_name_isSet = !json[QString("organizationName")].isNull() && m_organization_name_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAISender::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISender::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_name_isSet) {
        obj.insert(QString("organizationName"), ::OpenAPI::toJsonValue(m_organization_name));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAISender::getDescription() const {
    return m_description;
}
void OAISender::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISender::is_description_Set() const{
    return m_description_isSet;
}

bool OAISender::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISender::getFormat() const {
    return m_format;
}
void OAISender::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISender::is_format_Set() const{
    return m_format_isSet;
}

bool OAISender::is_format_Valid() const{
    return m_format_isValid;
}

OAISettingMetadata OAISender::getMeta() const {
    return m_meta;
}
void OAISender::setMeta(const OAISettingMetadata &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAISender::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAISender::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAISender::getName() const {
    return m_name;
}
void OAISender::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISender::is_name_Set() const{
    return m_name_isSet;
}

bool OAISender::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISender::getOrganizationName() const {
    return m_organization_name;
}
void OAISender::setOrganizationName(const QString &organization_name) {
    m_organization_name = organization_name;
    m_organization_name_isSet = true;
}

bool OAISender::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAISender::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

QString OAISender::getSchema() const {
    return m_schema;
}
void OAISender::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISender::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISender::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAISender::getTopic() const {
    return m_topic;
}
void OAISender::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAISender::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAISender::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAISender::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISender::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_format_isValid && m_name_isValid && m_schema_isValid && m_topic_isValid && true;
}

} // namespace OpenAPI
