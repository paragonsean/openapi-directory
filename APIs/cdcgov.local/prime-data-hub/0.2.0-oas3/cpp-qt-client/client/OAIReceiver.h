/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReceiver.h
 *
 * A receiver of reports from the data hub
 */

#ifndef OAIReceiver_H
#define OAIReceiver_H

#include <QJsonObject>

#include "OAIReceiver_jurisdictionalFilters_inner.h"
#include "OAIReceiver_timing.h"
#include "OAIReceiver_translations_inner.h"
#include "OAISettingMetadata.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReceiver_jurisdictionalFilters_inner;
class OAISettingMetadata;
class OAIReceiver_timing;
class OAIReceiver_translations_inner;

class OAIReceiver : public OAIObject {
public:
    OAIReceiver();
    OAIReceiver(QString json);
    ~OAIReceiver() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIReceiver_jurisdictionalFilters_inner> getJurisdictionalFilters() const;
    void setJurisdictionalFilters(const QList<OAIReceiver_jurisdictionalFilters_inner> &jurisdictional_filters);
    bool is_jurisdictional_filters_Set() const;
    bool is_jurisdictional_filters_Valid() const;

    OAISettingMetadata getMeta() const;
    void setMeta(const OAISettingMetadata &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOrganizationName() const;
    void setOrganizationName(const QString &organization_name);
    bool is_organization_name_Set() const;
    bool is_organization_name_Valid() const;

    OAIReceiver_timing getTiming() const;
    void setTiming(const OAIReceiver_timing &timing);
    bool is_timing_Set() const;
    bool is_timing_Valid() const;

    QString getTopic() const;
    void setTopic(const QString &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    QList<OAIReceiver_translations_inner> getTranslations() const;
    void setTranslations(const QList<OAIReceiver_translations_inner> &translations);
    bool is_translations_Set() const;
    bool is_translations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIReceiver_jurisdictionalFilters_inner> m_jurisdictional_filters;
    bool m_jurisdictional_filters_isSet;
    bool m_jurisdictional_filters_isValid;

    OAISettingMetadata m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_organization_name;
    bool m_organization_name_isSet;
    bool m_organization_name_isValid;

    OAIReceiver_timing m_timing;
    bool m_timing_isSet;
    bool m_timing_isValid;

    QString m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    QList<OAIReceiver_translations_inner> m_translations;
    bool m_translations_isSet;
    bool m_translations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReceiver)

#endif // OAIReceiver_H
