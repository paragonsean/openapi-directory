/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_county_name_isSet = false;
    m_county_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_jurisdiction_isSet = false;
    m_jurisdiction_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_county_name_isValid = ::OpenAPI::fromJsonValue(m_county_name, json[QString("countyName")]);
    m_county_name_isSet = !json[QString("countyName")].isNull() && m_county_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_jurisdiction, json[QString("jurisdiction")]);
    m_jurisdiction_isSet = !json[QString("jurisdiction")].isNull() && m_jurisdiction_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("stateCode")]);
    m_state_code_isSet = !json[QString("stateCode")].isNull() && m_state_code_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_county_name_isSet) {
        obj.insert(QString("countyName"), ::OpenAPI::toJsonValue(m_county_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_jurisdiction_isSet) {
        obj.insert(QString("jurisdiction"), ::OpenAPI::toJsonValue(m_jurisdiction));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("stateCode"), ::OpenAPI::toJsonValue(m_state_code));
    }
    return obj;
}

QString OAIOrganization::getCountyName() const {
    return m_county_name;
}
void OAIOrganization::setCountyName(const QString &county_name) {
    m_county_name = county_name;
    m_county_name_isSet = true;
}

bool OAIOrganization::is_county_name_Set() const{
    return m_county_name_isSet;
}

bool OAIOrganization::is_county_name_Valid() const{
    return m_county_name_isValid;
}

QString OAIOrganization::getDescription() const {
    return m_description;
}
void OAIOrganization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrganization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrganization::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOrganization::getJurisdiction() const {
    return m_jurisdiction;
}
void OAIOrganization::setJurisdiction(const QString &jurisdiction) {
    m_jurisdiction = jurisdiction;
    m_jurisdiction_isSet = true;
}

bool OAIOrganization::is_jurisdiction_Set() const{
    return m_jurisdiction_isSet;
}

bool OAIOrganization::is_jurisdiction_Valid() const{
    return m_jurisdiction_isValid;
}

OAISettingMetadata OAIOrganization::getMeta() const {
    return m_meta;
}
void OAIOrganization::setMeta(const OAISettingMetadata &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIOrganization::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIOrganization::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganization::getStateCode() const {
    return m_state_code;
}
void OAIOrganization::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIOrganization::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIOrganization::is_state_code_Valid() const{
    return m_state_code_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_county_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdiction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_jurisdiction_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
