/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiver::OAIReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiver::OAIReceiver() {
    this->initializeModel();
}

OAIReceiver::~OAIReceiver() {}

void OAIReceiver::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_jurisdictional_filters_isSet = false;
    m_jurisdictional_filters_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;
}

void OAIReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiver::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_jurisdictional_filters_isValid = ::OpenAPI::fromJsonValue(m_jurisdictional_filters, json[QString("jurisdictionalFilters")]);
    m_jurisdictional_filters_isSet = !json[QString("jurisdictionalFilters")].isNull() && m_jurisdictional_filters_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(m_organization_name, json[QString("organizationName")]);
    m_organization_name_isSet = !json[QString("organizationName")].isNull() && m_organization_name_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;
}

QString OAIReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_jurisdictional_filters.size() > 0) {
        obj.insert(QString("jurisdictionalFilters"), ::OpenAPI::toJsonValue(m_jurisdictional_filters));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_name_isSet) {
        obj.insert(QString("organizationName"), ::OpenAPI::toJsonValue(m_organization_name));
    }
    if (m_timing.isSet()) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_translations.size() > 0) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    return obj;
}

QString OAIReceiver::getDescription() const {
    return m_description;
}
void OAIReceiver::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReceiver::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReceiver::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIReceiver_jurisdictionalFilters_inner> OAIReceiver::getJurisdictionalFilters() const {
    return m_jurisdictional_filters;
}
void OAIReceiver::setJurisdictionalFilters(const QList<OAIReceiver_jurisdictionalFilters_inner> &jurisdictional_filters) {
    m_jurisdictional_filters = jurisdictional_filters;
    m_jurisdictional_filters_isSet = true;
}

bool OAIReceiver::is_jurisdictional_filters_Set() const{
    return m_jurisdictional_filters_isSet;
}

bool OAIReceiver::is_jurisdictional_filters_Valid() const{
    return m_jurisdictional_filters_isValid;
}

OAISettingMetadata OAIReceiver::getMeta() const {
    return m_meta;
}
void OAIReceiver::setMeta(const OAISettingMetadata &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIReceiver::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIReceiver::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIReceiver::getName() const {
    return m_name;
}
void OAIReceiver::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReceiver::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReceiver::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReceiver::getOrganizationName() const {
    return m_organization_name;
}
void OAIReceiver::setOrganizationName(const QString &organization_name) {
    m_organization_name = organization_name;
    m_organization_name_isSet = true;
}

bool OAIReceiver::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAIReceiver::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

OAIReceiver_timing OAIReceiver::getTiming() const {
    return m_timing;
}
void OAIReceiver::setTiming(const OAIReceiver_timing &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAIReceiver::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAIReceiver::is_timing_Valid() const{
    return m_timing_isValid;
}

QString OAIReceiver::getTopic() const {
    return m_topic;
}
void OAIReceiver::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIReceiver::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIReceiver::is_topic_Valid() const{
    return m_topic_isValid;
}

QList<OAIReceiver_translations_inner> OAIReceiver::getTranslations() const {
    return m_translations;
}
void OAIReceiver::setTranslations(const QList<OAIReceiver_translations_inner> &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIReceiver::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIReceiver::is_translations_Valid() const{
    return m_translations_isValid;
}

bool OAIReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdictional_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_timing_isValid && m_topic_isValid && true;
}

} // namespace OpenAPI
