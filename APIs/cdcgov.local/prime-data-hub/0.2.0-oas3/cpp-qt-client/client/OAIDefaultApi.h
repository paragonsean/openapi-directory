/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOrganization.h"
#include "OAIReceiver.h"
#include "OAIReport.h"
#include "OAISender.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  client QString [required]
    * @param[in]  body QString [required]
    * @param[in]  option QString [optional]
    * @param[in]  r_default QList<QString> [optional]
    * @param[in]  route_to QList<QString> [optional]
    */
    virtual void reportsPost(const QString &client, const QString &body, const ::OpenAPI::OptionalParam<QString> &option = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &r_default = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &route_to = ::OpenAPI::OptionalParam<QList<QString>>());


    virtual void settingsOrganizationsGet();


    virtual void settingsOrganizationsHead();

    /**
    * @param[in]  organization_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameDelete(const QString &organization_name);

    /**
    * @param[in]  organization_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameGet(const QString &organization_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  oai_organization OAIOrganization [optional]
    */
    virtual void settingsOrganizationsOrganizationNamePut(const QString &organization_name, const ::OpenAPI::OptionalParam<OAIOrganization> &oai_organization = ::OpenAPI::OptionalParam<OAIOrganization>());

    /**
    * @param[in]  organization_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameReceiversGet(const QString &organization_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  receiver_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameReceiversReceiverNameDelete(const QString &organization_name, const QString &receiver_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  receiver_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameReceiversReceiverNameGet(const QString &organization_name, const QString &receiver_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  receiver_name QString [required]
    * @param[in]  oai_receiver OAIReceiver [optional]
    */
    virtual void settingsOrganizationsOrganizationNameReceiversReceiverNamePut(const QString &organization_name, const QString &receiver_name, const ::OpenAPI::OptionalParam<OAIReceiver> &oai_receiver = ::OpenAPI::OptionalParam<OAIReceiver>());

    /**
    * @param[in]  organization_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameSendersGet(const QString &organization_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  sender_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameSendersSenderNameDelete(const QString &organization_name, const QString &sender_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  sender_name QString [required]
    */
    virtual void settingsOrganizationsOrganizationNameSendersSenderNameGet(const QString &organization_name, const QString &sender_name);

    /**
    * @param[in]  organization_name QString [required]
    * @param[in]  sender_name QString [required]
    * @param[in]  oai_sender OAISender [optional]
    */
    virtual void settingsOrganizationsOrganizationNameSendersSenderNamePut(const QString &organization_name, const QString &sender_name, const ::OpenAPI::OptionalParam<OAISender> &oai_sender = ::OpenAPI::OptionalParam<OAISender>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reportsPostCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsHeadCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameDeleteCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNamePutCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameReceiversGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameSendersGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameSendersSenderNameGetCallback(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameSendersSenderNamePutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reportsPostSignal(OAIReport summary);
    void settingsOrganizationsGetSignal(QList<OAIOrganization> summary);
    void settingsOrganizationsHeadSignal();
    void settingsOrganizationsOrganizationNameDeleteSignal(OAIOrganization summary);
    void settingsOrganizationsOrganizationNameGetSignal(OAIOrganization summary);
    void settingsOrganizationsOrganizationNamePutSignal(OAIOrganization summary);
    void settingsOrganizationsOrganizationNameReceiversGetSignal(QList<OAIReceiver> summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignal(OAIReceiver summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignal(OAIReceiver summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignal(OAIReceiver summary);
    void settingsOrganizationsOrganizationNameSendersGetSignal(QList<OAISender> summary);
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignal(OAISender summary);
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignal(OAISender summary);
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignal(QList<OAISender> summary);


    void reportsPostSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void settingsOrganizationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization> summary);
    void settingsOrganizationsHeadSignalFull(OAIHttpRequestWorker *worker);
    void settingsOrganizationsOrganizationNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void settingsOrganizationsOrganizationNameGetSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void settingsOrganizationsOrganizationNamePutSignalFull(OAIHttpRequestWorker *worker, OAIOrganization summary);
    void settingsOrganizationsOrganizationNameReceiversGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReceiver> summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAIReceiver summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalFull(OAIHttpRequestWorker *worker, OAIReceiver summary);
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalFull(OAIHttpRequestWorker *worker, OAIReceiver summary);
    void settingsOrganizationsOrganizationNameSendersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISender> summary);
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAISender summary);
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignalFull(OAIHttpRequestWorker *worker, OAISender summary);
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignalFull(OAIHttpRequestWorker *worker, QList<OAISender> summary);

    Q_DECL_DEPRECATED_X("Use reportsPostSignalError() instead")
    void reportsPostSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsPostSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsGetSignalError() instead")
    void settingsOrganizationsGetSignalE(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsGetSignalError(QList<OAIOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsHeadSignalError() instead")
    void settingsOrganizationsHeadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsHeadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameDeleteSignalError() instead")
    void settingsOrganizationsOrganizationNameDeleteSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameDeleteSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameGetSignalError() instead")
    void settingsOrganizationsOrganizationNameGetSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameGetSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNamePutSignalError() instead")
    void settingsOrganizationsOrganizationNamePutSignalE(OAIOrganization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNamePutSignalError(OAIOrganization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversGetSignalError() instead")
    void settingsOrganizationsOrganizationNameReceiversGetSignalE(QList<OAIReceiver> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversGetSignalError(QList<OAIReceiver> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalError() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalE(OAIReceiver summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalError(OAIReceiver summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalError() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalE(OAIReceiver summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalError(OAIReceiver summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalError() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalE(OAIReceiver summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalError(OAIReceiver summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersGetSignalError() instead")
    void settingsOrganizationsOrganizationNameSendersGetSignalE(QList<OAISender> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersGetSignalError(QList<OAISender> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalError() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalE(OAISender summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalError(OAISender summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNameGetSignalError() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignalE(OAISender summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignalError(OAISender summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNamePutSignalError() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignalE(QList<OAISender> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignalError(QList<OAISender> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reportsPostSignalErrorFull() instead")
    void reportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsGetSignalErrorFull() instead")
    void settingsOrganizationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsHeadSignalErrorFull() instead")
    void settingsOrganizationsHeadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsHeadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameDeleteSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameGetSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNamePutSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversGetSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameReceiversGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameReceiversReceiverNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersGetSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameSendersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNameGetSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settingsOrganizationsOrganizationNameSendersSenderNamePutSignalErrorFull() instead")
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settingsOrganizationsOrganizationNameSendersSenderNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
