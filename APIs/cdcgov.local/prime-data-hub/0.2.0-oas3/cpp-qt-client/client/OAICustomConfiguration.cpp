/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomConfiguration::OAICustomConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomConfiguration::OAICustomConfiguration() {
    this->initializeModel();
}

OAICustomConfiguration::~OAICustomConfiguration() {}

void OAICustomConfiguration::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_format_isSet = false;
    m_name_format_isValid = false;

    m_receiving_organization_isSet = false;
    m_receiving_organization_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICustomConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomConfiguration::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_format_isValid = ::OpenAPI::fromJsonValue(m_name_format, json[QString("nameFormat")]);
    m_name_format_isSet = !json[QString("nameFormat")].isNull() && m_name_format_isValid;

    m_receiving_organization_isValid = ::OpenAPI::fromJsonValue(m_receiving_organization, json[QString("receivingOrganization")]);
    m_receiving_organization_isSet = !json[QString("receivingOrganization")].isNull() && m_receiving_organization_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICustomConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_format_isSet) {
        obj.insert(QString("nameFormat"), ::OpenAPI::toJsonValue(m_name_format));
    }
    if (m_receiving_organization_isSet) {
        obj.insert(QString("receivingOrganization"), ::OpenAPI::toJsonValue(m_receiving_organization));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICustomConfiguration::getFormat() const {
    return m_format;
}
void OAICustomConfiguration::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICustomConfiguration::is_format_Set() const{
    return m_format_isSet;
}

bool OAICustomConfiguration::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICustomConfiguration::getNameFormat() const {
    return m_name_format;
}
void OAICustomConfiguration::setNameFormat(const QString &name_format) {
    m_name_format = name_format;
    m_name_format_isSet = true;
}

bool OAICustomConfiguration::is_name_format_Set() const{
    return m_name_format_isSet;
}

bool OAICustomConfiguration::is_name_format_Valid() const{
    return m_name_format_isValid;
}

QString OAICustomConfiguration::getReceivingOrganization() const {
    return m_receiving_organization;
}
void OAICustomConfiguration::setReceivingOrganization(const QString &receiving_organization) {
    m_receiving_organization = receiving_organization;
    m_receiving_organization_isSet = true;
}

bool OAICustomConfiguration::is_receiving_organization_Set() const{
    return m_receiving_organization_isSet;
}

bool OAICustomConfiguration::is_receiving_organization_Valid() const{
    return m_receiving_organization_isValid;
}

QString OAICustomConfiguration::getSchemaName() const {
    return m_schema_name;
}
void OAICustomConfiguration::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAICustomConfiguration::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAICustomConfiguration::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

OAICustomConfiguration_transport OAICustomConfiguration::getTransport() const {
    return m_transport;
}
void OAICustomConfiguration::setTransport(const OAICustomConfiguration_transport &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAICustomConfiguration::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAICustomConfiguration::is_transport_Valid() const{
    return m_transport_isValid;
}

QString OAICustomConfiguration::getType() const {
    return m_type;
}
void OAICustomConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICustomConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_schema_name_isValid && m_transport_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
