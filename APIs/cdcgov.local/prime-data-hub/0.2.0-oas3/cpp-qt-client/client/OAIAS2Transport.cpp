/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2Transport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2Transport::OAIAS2Transport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2Transport::OAIAS2Transport() {
    this->initializeModel();
}

OAIAS2Transport::~OAIAS2Transport() {}

void OAIAS2Transport::initializeModel() {

    m_content_description_isSet = false;
    m_content_description_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_receiver_id_isSet = false;
    m_receiver_id_isValid = false;

    m_receiver_url_isSet = false;
    m_receiver_url_isValid = false;

    m_sender_email_isSet = false;
    m_sender_email_isValid = false;

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAS2Transport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2Transport::fromJsonObject(QJsonObject json) {

    m_content_description_isValid = ::OpenAPI::fromJsonValue(m_content_description, json[QString("contentDescription")]);
    m_content_description_isSet = !json[QString("contentDescription")].isNull() && m_content_description_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_receiver_id, json[QString("receiverId")]);
    m_receiver_id_isSet = !json[QString("receiverId")].isNull() && m_receiver_id_isValid;

    m_receiver_url_isValid = ::OpenAPI::fromJsonValue(m_receiver_url, json[QString("receiverUrl")]);
    m_receiver_url_isSet = !json[QString("receiverUrl")].isNull() && m_receiver_url_isValid;

    m_sender_email_isValid = ::OpenAPI::fromJsonValue(m_sender_email, json[QString("senderEmail")]);
    m_sender_email_isSet = !json[QString("senderEmail")].isNull() && m_sender_email_isValid;

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("senderId")]);
    m_sender_id_isSet = !json[QString("senderId")].isNull() && m_sender_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAS2Transport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2Transport::asJsonObject() const {
    QJsonObject obj;
    if (m_content_description_isSet) {
        obj.insert(QString("contentDescription"), ::OpenAPI::toJsonValue(m_content_description));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_receiver_id_isSet) {
        obj.insert(QString("receiverId"), ::OpenAPI::toJsonValue(m_receiver_id));
    }
    if (m_receiver_url_isSet) {
        obj.insert(QString("receiverUrl"), ::OpenAPI::toJsonValue(m_receiver_url));
    }
    if (m_sender_email_isSet) {
        obj.insert(QString("senderEmail"), ::OpenAPI::toJsonValue(m_sender_email));
    }
    if (m_sender_id_isSet) {
        obj.insert(QString("senderId"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAS2Transport::getContentDescription() const {
    return m_content_description;
}
void OAIAS2Transport::setContentDescription(const QString &content_description) {
    m_content_description = content_description;
    m_content_description_isSet = true;
}

bool OAIAS2Transport::is_content_description_Set() const{
    return m_content_description_isSet;
}

bool OAIAS2Transport::is_content_description_Valid() const{
    return m_content_description_isValid;
}

QString OAIAS2Transport::getMimeType() const {
    return m_mime_type;
}
void OAIAS2Transport::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAS2Transport::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAS2Transport::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIAS2Transport::getReceiverId() const {
    return m_receiver_id;
}
void OAIAS2Transport::setReceiverId(const QString &receiver_id) {
    m_receiver_id = receiver_id;
    m_receiver_id_isSet = true;
}

bool OAIAS2Transport::is_receiver_id_Set() const{
    return m_receiver_id_isSet;
}

bool OAIAS2Transport::is_receiver_id_Valid() const{
    return m_receiver_id_isValid;
}

QString OAIAS2Transport::getReceiverUrl() const {
    return m_receiver_url;
}
void OAIAS2Transport::setReceiverUrl(const QString &receiver_url) {
    m_receiver_url = receiver_url;
    m_receiver_url_isSet = true;
}

bool OAIAS2Transport::is_receiver_url_Set() const{
    return m_receiver_url_isSet;
}

bool OAIAS2Transport::is_receiver_url_Valid() const{
    return m_receiver_url_isValid;
}

QString OAIAS2Transport::getSenderEmail() const {
    return m_sender_email;
}
void OAIAS2Transport::setSenderEmail(const QString &sender_email) {
    m_sender_email = sender_email;
    m_sender_email_isSet = true;
}

bool OAIAS2Transport::is_sender_email_Set() const{
    return m_sender_email_isSet;
}

bool OAIAS2Transport::is_sender_email_Valid() const{
    return m_sender_email_isValid;
}

QString OAIAS2Transport::getSenderId() const {
    return m_sender_id;
}
void OAIAS2Transport::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAIAS2Transport::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAIAS2Transport::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAIAS2Transport::getType() const {
    return m_type;
}
void OAIAS2Transport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAS2Transport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAS2Transport::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAS2Transport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2Transport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_receiver_id_isValid && m_receiver_url_isValid && m_sender_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
