/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiver_translations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiver_translations_inner::OAIReceiver_translations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiver_translations_inner::OAIReceiver_translations_inner() {
    this->initializeModel();
}

OAIReceiver_translations_inner::~OAIReceiver_translations_inner() {}

void OAIReceiver_translations_inner::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_format_isSet = false;
    m_name_format_isValid = false;

    m_receiving_organization_isSet = false;
    m_receiving_organization_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_convert_timestamp_to_date_time_isSet = false;
    m_convert_timestamp_to_date_time_isValid = false;

    m_default_aoe_to_unknown_isSet = false;
    m_default_aoe_to_unknown_isValid = false;

    m_include_aoe_isSet = false;
    m_include_aoe_isValid = false;

    m_phone_number_formatting_isSet = false;
    m_phone_number_formatting_isValid = false;

    m_receiving_application_name_isSet = false;
    m_receiving_application_name_isValid = false;

    m_receiving_application_oid_isSet = false;
    m_receiving_application_oid_isValid = false;

    m_receiving_facility_name_isSet = false;
    m_receiving_facility_name_isValid = false;

    m_receiving_facility_oid_isSet = false;
    m_receiving_facility_oid_isValid = false;

    m_reporting_facility_id_isSet = false;
    m_reporting_facility_id_isValid = false;

    m_reporting_facility_id_type_isSet = false;
    m_reporting_facility_id_type_isValid = false;

    m_reporting_facility_name_isSet = false;
    m_reporting_facility_name_isValid = false;

    m_suppress_aoe_isSet = false;
    m_suppress_aoe_isValid = false;

    m_suppress_hl7_fields_isSet = false;
    m_suppress_hl7_fields_isValid = false;

    m_suppress_qst_for_aoe_isSet = false;
    m_suppress_qst_for_aoe_isValid = false;

    m_truncate_hd_namespace_ids_isSet = false;
    m_truncate_hd_namespace_ids_isValid = false;

    m_use_batch_headers_isSet = false;
    m_use_batch_headers_isValid = false;

    m_use_blank_instead_of_unknown_isSet = false;
    m_use_blank_instead_of_unknown_isValid = false;

    m_use_pid14_for_patient_email_isSet = false;
    m_use_pid14_for_patient_email_isValid = false;

    m_use_test_processing_mode_isSet = false;
    m_use_test_processing_mode_isValid = false;
}

void OAIReceiver_translations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiver_translations_inner::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_format_isValid = ::OpenAPI::fromJsonValue(m_name_format, json[QString("nameFormat")]);
    m_name_format_isSet = !json[QString("nameFormat")].isNull() && m_name_format_isValid;

    m_receiving_organization_isValid = ::OpenAPI::fromJsonValue(m_receiving_organization, json[QString("receivingOrganization")]);
    m_receiving_organization_isSet = !json[QString("receivingOrganization")].isNull() && m_receiving_organization_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_convert_timestamp_to_date_time_isValid = ::OpenAPI::fromJsonValue(m_convert_timestamp_to_date_time, json[QString("convertTimestampToDateTime")]);
    m_convert_timestamp_to_date_time_isSet = !json[QString("convertTimestampToDateTime")].isNull() && m_convert_timestamp_to_date_time_isValid;

    m_default_aoe_to_unknown_isValid = ::OpenAPI::fromJsonValue(m_default_aoe_to_unknown, json[QString("defaultAoeToUnknown")]);
    m_default_aoe_to_unknown_isSet = !json[QString("defaultAoeToUnknown")].isNull() && m_default_aoe_to_unknown_isValid;

    m_include_aoe_isValid = ::OpenAPI::fromJsonValue(m_include_aoe, json[QString("includeAOE")]);
    m_include_aoe_isSet = !json[QString("includeAOE")].isNull() && m_include_aoe_isValid;

    m_phone_number_formatting_isValid = ::OpenAPI::fromJsonValue(m_phone_number_formatting, json[QString("phoneNumberFormatting")]);
    m_phone_number_formatting_isSet = !json[QString("phoneNumberFormatting")].isNull() && m_phone_number_formatting_isValid;

    m_receiving_application_name_isValid = ::OpenAPI::fromJsonValue(m_receiving_application_name, json[QString("receivingApplicationName")]);
    m_receiving_application_name_isSet = !json[QString("receivingApplicationName")].isNull() && m_receiving_application_name_isValid;

    m_receiving_application_oid_isValid = ::OpenAPI::fromJsonValue(m_receiving_application_oid, json[QString("receivingApplicationOID")]);
    m_receiving_application_oid_isSet = !json[QString("receivingApplicationOID")].isNull() && m_receiving_application_oid_isValid;

    m_receiving_facility_name_isValid = ::OpenAPI::fromJsonValue(m_receiving_facility_name, json[QString("receivingFacilityName")]);
    m_receiving_facility_name_isSet = !json[QString("receivingFacilityName")].isNull() && m_receiving_facility_name_isValid;

    m_receiving_facility_oid_isValid = ::OpenAPI::fromJsonValue(m_receiving_facility_oid, json[QString("receivingFacilityOID")]);
    m_receiving_facility_oid_isSet = !json[QString("receivingFacilityOID")].isNull() && m_receiving_facility_oid_isValid;

    m_reporting_facility_id_isValid = ::OpenAPI::fromJsonValue(m_reporting_facility_id, json[QString("reportingFacilityId")]);
    m_reporting_facility_id_isSet = !json[QString("reportingFacilityId")].isNull() && m_reporting_facility_id_isValid;

    m_reporting_facility_id_type_isValid = ::OpenAPI::fromJsonValue(m_reporting_facility_id_type, json[QString("reportingFacilityIdType")]);
    m_reporting_facility_id_type_isSet = !json[QString("reportingFacilityIdType")].isNull() && m_reporting_facility_id_type_isValid;

    m_reporting_facility_name_isValid = ::OpenAPI::fromJsonValue(m_reporting_facility_name, json[QString("reportingFacilityName")]);
    m_reporting_facility_name_isSet = !json[QString("reportingFacilityName")].isNull() && m_reporting_facility_name_isValid;

    m_suppress_aoe_isValid = ::OpenAPI::fromJsonValue(m_suppress_aoe, json[QString("suppressAoe")]);
    m_suppress_aoe_isSet = !json[QString("suppressAoe")].isNull() && m_suppress_aoe_isValid;

    m_suppress_hl7_fields_isValid = ::OpenAPI::fromJsonValue(m_suppress_hl7_fields, json[QString("suppressHl7Fields")]);
    m_suppress_hl7_fields_isSet = !json[QString("suppressHl7Fields")].isNull() && m_suppress_hl7_fields_isValid;

    m_suppress_qst_for_aoe_isValid = ::OpenAPI::fromJsonValue(m_suppress_qst_for_aoe, json[QString("suppressQstForAoe")]);
    m_suppress_qst_for_aoe_isSet = !json[QString("suppressQstForAoe")].isNull() && m_suppress_qst_for_aoe_isValid;

    m_truncate_hd_namespace_ids_isValid = ::OpenAPI::fromJsonValue(m_truncate_hd_namespace_ids, json[QString("truncateHDNamespaceIds")]);
    m_truncate_hd_namespace_ids_isSet = !json[QString("truncateHDNamespaceIds")].isNull() && m_truncate_hd_namespace_ids_isValid;

    m_use_batch_headers_isValid = ::OpenAPI::fromJsonValue(m_use_batch_headers, json[QString("useBatchHeaders")]);
    m_use_batch_headers_isSet = !json[QString("useBatchHeaders")].isNull() && m_use_batch_headers_isValid;

    m_use_blank_instead_of_unknown_isValid = ::OpenAPI::fromJsonValue(m_use_blank_instead_of_unknown, json[QString("useBlankInsteadOfUnknown")]);
    m_use_blank_instead_of_unknown_isSet = !json[QString("useBlankInsteadOfUnknown")].isNull() && m_use_blank_instead_of_unknown_isValid;

    m_use_pid14_for_patient_email_isValid = ::OpenAPI::fromJsonValue(m_use_pid14_for_patient_email, json[QString("usePid14ForPatientEmail")]);
    m_use_pid14_for_patient_email_isSet = !json[QString("usePid14ForPatientEmail")].isNull() && m_use_pid14_for_patient_email_isValid;

    m_use_test_processing_mode_isValid = ::OpenAPI::fromJsonValue(m_use_test_processing_mode, json[QString("useTestProcessingMode")]);
    m_use_test_processing_mode_isSet = !json[QString("useTestProcessingMode")].isNull() && m_use_test_processing_mode_isValid;
}

QString OAIReceiver_translations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiver_translations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_format_isSet) {
        obj.insert(QString("nameFormat"), ::OpenAPI::toJsonValue(m_name_format));
    }
    if (m_receiving_organization_isSet) {
        obj.insert(QString("receivingOrganization"), ::OpenAPI::toJsonValue(m_receiving_organization));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_convert_timestamp_to_date_time_isSet) {
        obj.insert(QString("convertTimestampToDateTime"), ::OpenAPI::toJsonValue(m_convert_timestamp_to_date_time));
    }
    if (m_default_aoe_to_unknown_isSet) {
        obj.insert(QString("defaultAoeToUnknown"), ::OpenAPI::toJsonValue(m_default_aoe_to_unknown));
    }
    if (m_include_aoe_isSet) {
        obj.insert(QString("includeAOE"), ::OpenAPI::toJsonValue(m_include_aoe));
    }
    if (m_phone_number_formatting_isSet) {
        obj.insert(QString("phoneNumberFormatting"), ::OpenAPI::toJsonValue(m_phone_number_formatting));
    }
    if (m_receiving_application_name_isSet) {
        obj.insert(QString("receivingApplicationName"), ::OpenAPI::toJsonValue(m_receiving_application_name));
    }
    if (m_receiving_application_oid_isSet) {
        obj.insert(QString("receivingApplicationOID"), ::OpenAPI::toJsonValue(m_receiving_application_oid));
    }
    if (m_receiving_facility_name_isSet) {
        obj.insert(QString("receivingFacilityName"), ::OpenAPI::toJsonValue(m_receiving_facility_name));
    }
    if (m_receiving_facility_oid_isSet) {
        obj.insert(QString("receivingFacilityOID"), ::OpenAPI::toJsonValue(m_receiving_facility_oid));
    }
    if (m_reporting_facility_id_isSet) {
        obj.insert(QString("reportingFacilityId"), ::OpenAPI::toJsonValue(m_reporting_facility_id));
    }
    if (m_reporting_facility_id_type_isSet) {
        obj.insert(QString("reportingFacilityIdType"), ::OpenAPI::toJsonValue(m_reporting_facility_id_type));
    }
    if (m_reporting_facility_name_isSet) {
        obj.insert(QString("reportingFacilityName"), ::OpenAPI::toJsonValue(m_reporting_facility_name));
    }
    if (m_suppress_aoe_isSet) {
        obj.insert(QString("suppressAoe"), ::OpenAPI::toJsonValue(m_suppress_aoe));
    }
    if (m_suppress_hl7_fields_isSet) {
        obj.insert(QString("suppressHl7Fields"), ::OpenAPI::toJsonValue(m_suppress_hl7_fields));
    }
    if (m_suppress_qst_for_aoe_isSet) {
        obj.insert(QString("suppressQstForAoe"), ::OpenAPI::toJsonValue(m_suppress_qst_for_aoe));
    }
    if (m_truncate_hd_namespace_ids_isSet) {
        obj.insert(QString("truncateHDNamespaceIds"), ::OpenAPI::toJsonValue(m_truncate_hd_namespace_ids));
    }
    if (m_use_batch_headers_isSet) {
        obj.insert(QString("useBatchHeaders"), ::OpenAPI::toJsonValue(m_use_batch_headers));
    }
    if (m_use_blank_instead_of_unknown_isSet) {
        obj.insert(QString("useBlankInsteadOfUnknown"), ::OpenAPI::toJsonValue(m_use_blank_instead_of_unknown));
    }
    if (m_use_pid14_for_patient_email_isSet) {
        obj.insert(QString("usePid14ForPatientEmail"), ::OpenAPI::toJsonValue(m_use_pid14_for_patient_email));
    }
    if (m_use_test_processing_mode_isSet) {
        obj.insert(QString("useTestProcessingMode"), ::OpenAPI::toJsonValue(m_use_test_processing_mode));
    }
    return obj;
}

QString OAIReceiver_translations_inner::getFormat() const {
    return m_format;
}
void OAIReceiver_translations_inner::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIReceiver_translations_inner::is_format_Set() const{
    return m_format_isSet;
}

bool OAIReceiver_translations_inner::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIReceiver_translations_inner::getNameFormat() const {
    return m_name_format;
}
void OAIReceiver_translations_inner::setNameFormat(const QString &name_format) {
    m_name_format = name_format;
    m_name_format_isSet = true;
}

bool OAIReceiver_translations_inner::is_name_format_Set() const{
    return m_name_format_isSet;
}

bool OAIReceiver_translations_inner::is_name_format_Valid() const{
    return m_name_format_isValid;
}

QString OAIReceiver_translations_inner::getReceivingOrganization() const {
    return m_receiving_organization;
}
void OAIReceiver_translations_inner::setReceivingOrganization(const QString &receiving_organization) {
    m_receiving_organization = receiving_organization;
    m_receiving_organization_isSet = true;
}

bool OAIReceiver_translations_inner::is_receiving_organization_Set() const{
    return m_receiving_organization_isSet;
}

bool OAIReceiver_translations_inner::is_receiving_organization_Valid() const{
    return m_receiving_organization_isValid;
}

QString OAIReceiver_translations_inner::getSchemaName() const {
    return m_schema_name;
}
void OAIReceiver_translations_inner::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIReceiver_translations_inner::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIReceiver_translations_inner::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

OAIStandardHL7Configuration_transport OAIReceiver_translations_inner::getTransport() const {
    return m_transport;
}
void OAIReceiver_translations_inner::setTransport(const OAIStandardHL7Configuration_transport &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIReceiver_translations_inner::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIReceiver_translations_inner::is_transport_Valid() const{
    return m_transport_isValid;
}

QString OAIReceiver_translations_inner::getType() const {
    return m_type;
}
void OAIReceiver_translations_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReceiver_translations_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReceiver_translations_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReceiver_translations_inner::getConvertTimestampToDateTime() const {
    return m_convert_timestamp_to_date_time;
}
void OAIReceiver_translations_inner::setConvertTimestampToDateTime(const QString &convert_timestamp_to_date_time) {
    m_convert_timestamp_to_date_time = convert_timestamp_to_date_time;
    m_convert_timestamp_to_date_time_isSet = true;
}

bool OAIReceiver_translations_inner::is_convert_timestamp_to_date_time_Set() const{
    return m_convert_timestamp_to_date_time_isSet;
}

bool OAIReceiver_translations_inner::is_convert_timestamp_to_date_time_Valid() const{
    return m_convert_timestamp_to_date_time_isValid;
}

bool OAIReceiver_translations_inner::isDefaultAoeToUnknown() const {
    return m_default_aoe_to_unknown;
}
void OAIReceiver_translations_inner::setDefaultAoeToUnknown(const bool &default_aoe_to_unknown) {
    m_default_aoe_to_unknown = default_aoe_to_unknown;
    m_default_aoe_to_unknown_isSet = true;
}

bool OAIReceiver_translations_inner::is_default_aoe_to_unknown_Set() const{
    return m_default_aoe_to_unknown_isSet;
}

bool OAIReceiver_translations_inner::is_default_aoe_to_unknown_Valid() const{
    return m_default_aoe_to_unknown_isValid;
}

bool OAIReceiver_translations_inner::isIncludeAoe() const {
    return m_include_aoe;
}
void OAIReceiver_translations_inner::setIncludeAoe(const bool &include_aoe) {
    m_include_aoe = include_aoe;
    m_include_aoe_isSet = true;
}

bool OAIReceiver_translations_inner::is_include_aoe_Set() const{
    return m_include_aoe_isSet;
}

bool OAIReceiver_translations_inner::is_include_aoe_Valid() const{
    return m_include_aoe_isValid;
}

QString OAIReceiver_translations_inner::getPhoneNumberFormatting() const {
    return m_phone_number_formatting;
}
void OAIReceiver_translations_inner::setPhoneNumberFormatting(const QString &phone_number_formatting) {
    m_phone_number_formatting = phone_number_formatting;
    m_phone_number_formatting_isSet = true;
}

bool OAIReceiver_translations_inner::is_phone_number_formatting_Set() const{
    return m_phone_number_formatting_isSet;
}

bool OAIReceiver_translations_inner::is_phone_number_formatting_Valid() const{
    return m_phone_number_formatting_isValid;
}

QString OAIReceiver_translations_inner::getReceivingApplicationName() const {
    return m_receiving_application_name;
}
void OAIReceiver_translations_inner::setReceivingApplicationName(const QString &receiving_application_name) {
    m_receiving_application_name = receiving_application_name;
    m_receiving_application_name_isSet = true;
}

bool OAIReceiver_translations_inner::is_receiving_application_name_Set() const{
    return m_receiving_application_name_isSet;
}

bool OAIReceiver_translations_inner::is_receiving_application_name_Valid() const{
    return m_receiving_application_name_isValid;
}

QString OAIReceiver_translations_inner::getReceivingApplicationOid() const {
    return m_receiving_application_oid;
}
void OAIReceiver_translations_inner::setReceivingApplicationOid(const QString &receiving_application_oid) {
    m_receiving_application_oid = receiving_application_oid;
    m_receiving_application_oid_isSet = true;
}

bool OAIReceiver_translations_inner::is_receiving_application_oid_Set() const{
    return m_receiving_application_oid_isSet;
}

bool OAIReceiver_translations_inner::is_receiving_application_oid_Valid() const{
    return m_receiving_application_oid_isValid;
}

QString OAIReceiver_translations_inner::getReceivingFacilityName() const {
    return m_receiving_facility_name;
}
void OAIReceiver_translations_inner::setReceivingFacilityName(const QString &receiving_facility_name) {
    m_receiving_facility_name = receiving_facility_name;
    m_receiving_facility_name_isSet = true;
}

bool OAIReceiver_translations_inner::is_receiving_facility_name_Set() const{
    return m_receiving_facility_name_isSet;
}

bool OAIReceiver_translations_inner::is_receiving_facility_name_Valid() const{
    return m_receiving_facility_name_isValid;
}

QString OAIReceiver_translations_inner::getReceivingFacilityOid() const {
    return m_receiving_facility_oid;
}
void OAIReceiver_translations_inner::setReceivingFacilityOid(const QString &receiving_facility_oid) {
    m_receiving_facility_oid = receiving_facility_oid;
    m_receiving_facility_oid_isSet = true;
}

bool OAIReceiver_translations_inner::is_receiving_facility_oid_Set() const{
    return m_receiving_facility_oid_isSet;
}

bool OAIReceiver_translations_inner::is_receiving_facility_oid_Valid() const{
    return m_receiving_facility_oid_isValid;
}

QString OAIReceiver_translations_inner::getReportingFacilityId() const {
    return m_reporting_facility_id;
}
void OAIReceiver_translations_inner::setReportingFacilityId(const QString &reporting_facility_id) {
    m_reporting_facility_id = reporting_facility_id;
    m_reporting_facility_id_isSet = true;
}

bool OAIReceiver_translations_inner::is_reporting_facility_id_Set() const{
    return m_reporting_facility_id_isSet;
}

bool OAIReceiver_translations_inner::is_reporting_facility_id_Valid() const{
    return m_reporting_facility_id_isValid;
}

QString OAIReceiver_translations_inner::getReportingFacilityIdType() const {
    return m_reporting_facility_id_type;
}
void OAIReceiver_translations_inner::setReportingFacilityIdType(const QString &reporting_facility_id_type) {
    m_reporting_facility_id_type = reporting_facility_id_type;
    m_reporting_facility_id_type_isSet = true;
}

bool OAIReceiver_translations_inner::is_reporting_facility_id_type_Set() const{
    return m_reporting_facility_id_type_isSet;
}

bool OAIReceiver_translations_inner::is_reporting_facility_id_type_Valid() const{
    return m_reporting_facility_id_type_isValid;
}

QString OAIReceiver_translations_inner::getReportingFacilityName() const {
    return m_reporting_facility_name;
}
void OAIReceiver_translations_inner::setReportingFacilityName(const QString &reporting_facility_name) {
    m_reporting_facility_name = reporting_facility_name;
    m_reporting_facility_name_isSet = true;
}

bool OAIReceiver_translations_inner::is_reporting_facility_name_Set() const{
    return m_reporting_facility_name_isSet;
}

bool OAIReceiver_translations_inner::is_reporting_facility_name_Valid() const{
    return m_reporting_facility_name_isValid;
}

bool OAIReceiver_translations_inner::isSuppressAoe() const {
    return m_suppress_aoe;
}
void OAIReceiver_translations_inner::setSuppressAoe(const bool &suppress_aoe) {
    m_suppress_aoe = suppress_aoe;
    m_suppress_aoe_isSet = true;
}

bool OAIReceiver_translations_inner::is_suppress_aoe_Set() const{
    return m_suppress_aoe_isSet;
}

bool OAIReceiver_translations_inner::is_suppress_aoe_Valid() const{
    return m_suppress_aoe_isValid;
}

QString OAIReceiver_translations_inner::getSuppressHl7Fields() const {
    return m_suppress_hl7_fields;
}
void OAIReceiver_translations_inner::setSuppressHl7Fields(const QString &suppress_hl7_fields) {
    m_suppress_hl7_fields = suppress_hl7_fields;
    m_suppress_hl7_fields_isSet = true;
}

bool OAIReceiver_translations_inner::is_suppress_hl7_fields_Set() const{
    return m_suppress_hl7_fields_isSet;
}

bool OAIReceiver_translations_inner::is_suppress_hl7_fields_Valid() const{
    return m_suppress_hl7_fields_isValid;
}

bool OAIReceiver_translations_inner::isSuppressQstForAoe() const {
    return m_suppress_qst_for_aoe;
}
void OAIReceiver_translations_inner::setSuppressQstForAoe(const bool &suppress_qst_for_aoe) {
    m_suppress_qst_for_aoe = suppress_qst_for_aoe;
    m_suppress_qst_for_aoe_isSet = true;
}

bool OAIReceiver_translations_inner::is_suppress_qst_for_aoe_Set() const{
    return m_suppress_qst_for_aoe_isSet;
}

bool OAIReceiver_translations_inner::is_suppress_qst_for_aoe_Valid() const{
    return m_suppress_qst_for_aoe_isValid;
}

bool OAIReceiver_translations_inner::isTruncateHdNamespaceIds() const {
    return m_truncate_hd_namespace_ids;
}
void OAIReceiver_translations_inner::setTruncateHdNamespaceIds(const bool &truncate_hd_namespace_ids) {
    m_truncate_hd_namespace_ids = truncate_hd_namespace_ids;
    m_truncate_hd_namespace_ids_isSet = true;
}

bool OAIReceiver_translations_inner::is_truncate_hd_namespace_ids_Set() const{
    return m_truncate_hd_namespace_ids_isSet;
}

bool OAIReceiver_translations_inner::is_truncate_hd_namespace_ids_Valid() const{
    return m_truncate_hd_namespace_ids_isValid;
}

bool OAIReceiver_translations_inner::isUseBatchHeaders() const {
    return m_use_batch_headers;
}
void OAIReceiver_translations_inner::setUseBatchHeaders(const bool &use_batch_headers) {
    m_use_batch_headers = use_batch_headers;
    m_use_batch_headers_isSet = true;
}

bool OAIReceiver_translations_inner::is_use_batch_headers_Set() const{
    return m_use_batch_headers_isSet;
}

bool OAIReceiver_translations_inner::is_use_batch_headers_Valid() const{
    return m_use_batch_headers_isValid;
}

QString OAIReceiver_translations_inner::getUseBlankInsteadOfUnknown() const {
    return m_use_blank_instead_of_unknown;
}
void OAIReceiver_translations_inner::setUseBlankInsteadOfUnknown(const QString &use_blank_instead_of_unknown) {
    m_use_blank_instead_of_unknown = use_blank_instead_of_unknown;
    m_use_blank_instead_of_unknown_isSet = true;
}

bool OAIReceiver_translations_inner::is_use_blank_instead_of_unknown_Set() const{
    return m_use_blank_instead_of_unknown_isSet;
}

bool OAIReceiver_translations_inner::is_use_blank_instead_of_unknown_Valid() const{
    return m_use_blank_instead_of_unknown_isValid;
}

bool OAIReceiver_translations_inner::isUsePid14ForPatientEmail() const {
    return m_use_pid14_for_patient_email;
}
void OAIReceiver_translations_inner::setUsePid14ForPatientEmail(const bool &use_pid14_for_patient_email) {
    m_use_pid14_for_patient_email = use_pid14_for_patient_email;
    m_use_pid14_for_patient_email_isSet = true;
}

bool OAIReceiver_translations_inner::is_use_pid14_for_patient_email_Set() const{
    return m_use_pid14_for_patient_email_isSet;
}

bool OAIReceiver_translations_inner::is_use_pid14_for_patient_email_Valid() const{
    return m_use_pid14_for_patient_email_isValid;
}

bool OAIReceiver_translations_inner::isUseTestProcessingMode() const {
    return m_use_test_processing_mode;
}
void OAIReceiver_translations_inner::setUseTestProcessingMode(const bool &use_test_processing_mode) {
    m_use_test_processing_mode = use_test_processing_mode;
    m_use_test_processing_mode_isSet = true;
}

bool OAIReceiver_translations_inner::is_use_test_processing_mode_Set() const{
    return m_use_test_processing_mode_isSet;
}

bool OAIReceiver_translations_inner::is_use_test_processing_mode_Valid() const{
    return m_use_test_processing_mode_isValid;
}

bool OAIReceiver_translations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_timestamp_to_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_aoe_to_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_aoe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_formatting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_application_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_facility_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_facility_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_facility_id_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_facility_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_aoe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_hl7_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_qst_for_aoe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncate_hd_namespace_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_batch_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_blank_instead_of_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_pid14_for_patient_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_test_processing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiver_translations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_schema_name_isValid && m_transport_isValid && m_type_isValid && m_include_aoe_isValid && m_use_batch_headers_isValid && true;
}

} // namespace OpenAPI
