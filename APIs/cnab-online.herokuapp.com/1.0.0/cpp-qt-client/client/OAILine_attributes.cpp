/**
 * Cnab Online
 * Processe arquivos de retorno CNAB
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILine_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILine_attributes::OAILine_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILine_attributes::OAILine_attributes() {
    this->initializeModel();
}

OAILine_attributes::~OAILine_attributes() {}

void OAILine_attributes::initializeModel() {

    m_identified_fields_isSet = false;
    m_identified_fields_isValid = false;

    m_raw_text_isSet = false;
    m_raw_text_isValid = false;
}

void OAILine_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILine_attributes::fromJsonObject(QJsonObject json) {

    m_identified_fields_isValid = ::OpenAPI::fromJsonValue(m_identified_fields, json[QString("identified_fields")]);
    m_identified_fields_isSet = !json[QString("identified_fields")].isNull() && m_identified_fields_isValid;

    m_raw_text_isValid = ::OpenAPI::fromJsonValue(m_raw_text, json[QString("raw_text")]);
    m_raw_text_isSet = !json[QString("raw_text")].isNull() && m_raw_text_isValid;
}

QString OAILine_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILine_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_identified_fields.size() > 0) {
        obj.insert(QString("identified_fields"), ::OpenAPI::toJsonValue(m_identified_fields));
    }
    if (m_raw_text_isSet) {
        obj.insert(QString("raw_text"), ::OpenAPI::toJsonValue(m_raw_text));
    }
    return obj;
}

QList<OAILine_attributes_identified_fields_inner> OAILine_attributes::getIdentifiedFields() const {
    return m_identified_fields;
}
void OAILine_attributes::setIdentifiedFields(const QList<OAILine_attributes_identified_fields_inner> &identified_fields) {
    m_identified_fields = identified_fields;
    m_identified_fields_isSet = true;
}

bool OAILine_attributes::is_identified_fields_Set() const{
    return m_identified_fields_isSet;
}

bool OAILine_attributes::is_identified_fields_Valid() const{
    return m_identified_fields_isValid;
}

QString OAILine_attributes::getRawText() const {
    return m_raw_text;
}
void OAILine_attributes::setRawText(const QString &raw_text) {
    m_raw_text = raw_text;
    m_raw_text_isSet = true;
}

bool OAILine_attributes::is_raw_text_Set() const{
    return m_raw_text_isSet;
}

bool OAILine_attributes::is_raw_text_Valid() const{
    return m_raw_text_isValid;
}

bool OAILine_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identified_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILine_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
