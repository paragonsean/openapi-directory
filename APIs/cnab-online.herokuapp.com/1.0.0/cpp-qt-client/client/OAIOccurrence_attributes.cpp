/**
 * Cnab Online
 * Processe arquivos de retorno CNAB
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOccurrence_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOccurrence_attributes::OAIOccurrence_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOccurrence_attributes::OAIOccurrence_attributes() {
    this->initializeModel();
}

OAIOccurrence_attributes::~OAIOccurrence_attributes() {}

void OAIOccurrence_attributes::initializeModel() {

    m_agency_isSet = false;
    m_agency_isValid = false;

    m_bank_tax_isSet = false;
    m_bank_tax_isValid = false;

    m_charged_agency_isSet = false;
    m_charged_agency_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_code_name_isSet = false;
    m_code_name_isValid = false;

    m_credit_date_isSet = false;
    m_credit_date_isValid = false;

    m_discount_value_isSet = false;
    m_discount_value_isValid = false;

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_iof_tax_isSet = false;
    m_iof_tax_isValid = false;

    m_is_dda_isSet = false;
    m_is_dda_isValid = false;

    m_is_payment_isSet = false;
    m_is_payment_isValid = false;

    m_is_rejected_payment_isSet = false;
    m_is_rejected_payment_isValid = false;

    m_liquidation_code_isSet = false;
    m_liquidation_code_isValid = false;

    m_liquidation_description_isSet = false;
    m_liquidation_description_isValid = false;

    m_mulct_value_isSet = false;
    m_mulct_value_isValid = false;

    m_occurrence_date_isSet = false;
    m_occurrence_date_isValid = false;

    m_others_credits_value_isSet = false;
    m_others_credits_value_isValid = false;

    m_our_number_isSet = false;
    m_our_number_isValid = false;

    m_payer_allegation_isSet = false;
    m_payer_allegation_isValid = false;

    m_rebate_value_isSet = false;
    m_rebate_value_isValid = false;

    m_received_value_isSet = false;
    m_received_value_isValid = false;

    m_sequencial_number_isSet = false;
    m_sequencial_number_isValid = false;

    m_title_value_isSet = false;
    m_title_value_isValid = false;

    m_wallet_isSet = false;
    m_wallet_isValid = false;
}

void OAIOccurrence_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOccurrence_attributes::fromJsonObject(QJsonObject json) {

    m_agency_isValid = ::OpenAPI::fromJsonValue(m_agency, json[QString("agency")]);
    m_agency_isSet = !json[QString("agency")].isNull() && m_agency_isValid;

    m_bank_tax_isValid = ::OpenAPI::fromJsonValue(m_bank_tax, json[QString("bank_tax")]);
    m_bank_tax_isSet = !json[QString("bank_tax")].isNull() && m_bank_tax_isValid;

    m_charged_agency_isValid = ::OpenAPI::fromJsonValue(m_charged_agency, json[QString("charged_agency")]);
    m_charged_agency_isSet = !json[QString("charged_agency")].isNull() && m_charged_agency_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_code_name_isValid = ::OpenAPI::fromJsonValue(m_code_name, json[QString("code_name")]);
    m_code_name_isSet = !json[QString("code_name")].isNull() && m_code_name_isValid;

    m_credit_date_isValid = ::OpenAPI::fromJsonValue(m_credit_date, json[QString("credit_date")]);
    m_credit_date_isSet = !json[QString("credit_date")].isNull() && m_credit_date_isValid;

    m_discount_value_isValid = ::OpenAPI::fromJsonValue(m_discount_value, json[QString("discount_value")]);
    m_discount_value_isSet = !json[QString("discount_value")].isNull() && m_discount_value_isValid;

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("document_number")]);
    m_document_number_isSet = !json[QString("document_number")].isNull() && m_document_number_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_iof_tax_isValid = ::OpenAPI::fromJsonValue(m_iof_tax, json[QString("iof_tax")]);
    m_iof_tax_isSet = !json[QString("iof_tax")].isNull() && m_iof_tax_isValid;

    m_is_dda_isValid = ::OpenAPI::fromJsonValue(m_is_dda, json[QString("is_dda")]);
    m_is_dda_isSet = !json[QString("is_dda")].isNull() && m_is_dda_isValid;

    m_is_payment_isValid = ::OpenAPI::fromJsonValue(m_is_payment, json[QString("is_payment")]);
    m_is_payment_isSet = !json[QString("is_payment")].isNull() && m_is_payment_isValid;

    m_is_rejected_payment_isValid = ::OpenAPI::fromJsonValue(m_is_rejected_payment, json[QString("is_rejected_payment")]);
    m_is_rejected_payment_isSet = !json[QString("is_rejected_payment")].isNull() && m_is_rejected_payment_isValid;

    m_liquidation_code_isValid = ::OpenAPI::fromJsonValue(m_liquidation_code, json[QString("liquidation_code")]);
    m_liquidation_code_isSet = !json[QString("liquidation_code")].isNull() && m_liquidation_code_isValid;

    m_liquidation_description_isValid = ::OpenAPI::fromJsonValue(m_liquidation_description, json[QString("liquidation_description")]);
    m_liquidation_description_isSet = !json[QString("liquidation_description")].isNull() && m_liquidation_description_isValid;

    m_mulct_value_isValid = ::OpenAPI::fromJsonValue(m_mulct_value, json[QString("mulct_value")]);
    m_mulct_value_isSet = !json[QString("mulct_value")].isNull() && m_mulct_value_isValid;

    m_occurrence_date_isValid = ::OpenAPI::fromJsonValue(m_occurrence_date, json[QString("occurrence_date")]);
    m_occurrence_date_isSet = !json[QString("occurrence_date")].isNull() && m_occurrence_date_isValid;

    m_others_credits_value_isValid = ::OpenAPI::fromJsonValue(m_others_credits_value, json[QString("others_credits_value")]);
    m_others_credits_value_isSet = !json[QString("others_credits_value")].isNull() && m_others_credits_value_isValid;

    m_our_number_isValid = ::OpenAPI::fromJsonValue(m_our_number, json[QString("our_number")]);
    m_our_number_isSet = !json[QString("our_number")].isNull() && m_our_number_isValid;

    m_payer_allegation_isValid = ::OpenAPI::fromJsonValue(m_payer_allegation, json[QString("payer_allegation")]);
    m_payer_allegation_isSet = !json[QString("payer_allegation")].isNull() && m_payer_allegation_isValid;

    m_rebate_value_isValid = ::OpenAPI::fromJsonValue(m_rebate_value, json[QString("rebate_value")]);
    m_rebate_value_isSet = !json[QString("rebate_value")].isNull() && m_rebate_value_isValid;

    m_received_value_isValid = ::OpenAPI::fromJsonValue(m_received_value, json[QString("received_value")]);
    m_received_value_isSet = !json[QString("received_value")].isNull() && m_received_value_isValid;

    m_sequencial_number_isValid = ::OpenAPI::fromJsonValue(m_sequencial_number, json[QString("sequencial_number")]);
    m_sequencial_number_isSet = !json[QString("sequencial_number")].isNull() && m_sequencial_number_isValid;

    m_title_value_isValid = ::OpenAPI::fromJsonValue(m_title_value, json[QString("title_value")]);
    m_title_value_isSet = !json[QString("title_value")].isNull() && m_title_value_isValid;

    m_wallet_isValid = ::OpenAPI::fromJsonValue(m_wallet, json[QString("wallet")]);
    m_wallet_isSet = !json[QString("wallet")].isNull() && m_wallet_isValid;
}

QString OAIOccurrence_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOccurrence_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_agency_isSet) {
        obj.insert(QString("agency"), ::OpenAPI::toJsonValue(m_agency));
    }
    if (m_bank_tax_isSet) {
        obj.insert(QString("bank_tax"), ::OpenAPI::toJsonValue(m_bank_tax));
    }
    if (m_charged_agency_isSet) {
        obj.insert(QString("charged_agency"), ::OpenAPI::toJsonValue(m_charged_agency));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_code_name_isSet) {
        obj.insert(QString("code_name"), ::OpenAPI::toJsonValue(m_code_name));
    }
    if (m_credit_date_isSet) {
        obj.insert(QString("credit_date"), ::OpenAPI::toJsonValue(m_credit_date));
    }
    if (m_discount_value_isSet) {
        obj.insert(QString("discount_value"), ::OpenAPI::toJsonValue(m_discount_value));
    }
    if (m_document_number_isSet) {
        obj.insert(QString("document_number"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_iof_tax_isSet) {
        obj.insert(QString("iof_tax"), ::OpenAPI::toJsonValue(m_iof_tax));
    }
    if (m_is_dda_isSet) {
        obj.insert(QString("is_dda"), ::OpenAPI::toJsonValue(m_is_dda));
    }
    if (m_is_payment_isSet) {
        obj.insert(QString("is_payment"), ::OpenAPI::toJsonValue(m_is_payment));
    }
    if (m_is_rejected_payment_isSet) {
        obj.insert(QString("is_rejected_payment"), ::OpenAPI::toJsonValue(m_is_rejected_payment));
    }
    if (m_liquidation_code_isSet) {
        obj.insert(QString("liquidation_code"), ::OpenAPI::toJsonValue(m_liquidation_code));
    }
    if (m_liquidation_description_isSet) {
        obj.insert(QString("liquidation_description"), ::OpenAPI::toJsonValue(m_liquidation_description));
    }
    if (m_mulct_value_isSet) {
        obj.insert(QString("mulct_value"), ::OpenAPI::toJsonValue(m_mulct_value));
    }
    if (m_occurrence_date_isSet) {
        obj.insert(QString("occurrence_date"), ::OpenAPI::toJsonValue(m_occurrence_date));
    }
    if (m_others_credits_value_isSet) {
        obj.insert(QString("others_credits_value"), ::OpenAPI::toJsonValue(m_others_credits_value));
    }
    if (m_our_number_isSet) {
        obj.insert(QString("our_number"), ::OpenAPI::toJsonValue(m_our_number));
    }
    if (m_payer_allegation_isSet) {
        obj.insert(QString("payer_allegation"), ::OpenAPI::toJsonValue(m_payer_allegation));
    }
    if (m_rebate_value_isSet) {
        obj.insert(QString("rebate_value"), ::OpenAPI::toJsonValue(m_rebate_value));
    }
    if (m_received_value_isSet) {
        obj.insert(QString("received_value"), ::OpenAPI::toJsonValue(m_received_value));
    }
    if (m_sequencial_number_isSet) {
        obj.insert(QString("sequencial_number"), ::OpenAPI::toJsonValue(m_sequencial_number));
    }
    if (m_title_value_isSet) {
        obj.insert(QString("title_value"), ::OpenAPI::toJsonValue(m_title_value));
    }
    if (m_wallet_isSet) {
        obj.insert(QString("wallet"), ::OpenAPI::toJsonValue(m_wallet));
    }
    return obj;
}

QString OAIOccurrence_attributes::getAgency() const {
    return m_agency;
}
void OAIOccurrence_attributes::setAgency(const QString &agency) {
    m_agency = agency;
    m_agency_isSet = true;
}

bool OAIOccurrence_attributes::is_agency_Set() const{
    return m_agency_isSet;
}

bool OAIOccurrence_attributes::is_agency_Valid() const{
    return m_agency_isValid;
}

double OAIOccurrence_attributes::getBankTax() const {
    return m_bank_tax;
}
void OAIOccurrence_attributes::setBankTax(const double &bank_tax) {
    m_bank_tax = bank_tax;
    m_bank_tax_isSet = true;
}

bool OAIOccurrence_attributes::is_bank_tax_Set() const{
    return m_bank_tax_isSet;
}

bool OAIOccurrence_attributes::is_bank_tax_Valid() const{
    return m_bank_tax_isValid;
}

QString OAIOccurrence_attributes::getChargedAgency() const {
    return m_charged_agency;
}
void OAIOccurrence_attributes::setChargedAgency(const QString &charged_agency) {
    m_charged_agency = charged_agency;
    m_charged_agency_isSet = true;
}

bool OAIOccurrence_attributes::is_charged_agency_Set() const{
    return m_charged_agency_isSet;
}

bool OAIOccurrence_attributes::is_charged_agency_Valid() const{
    return m_charged_agency_isValid;
}

QString OAIOccurrence_attributes::getCode() const {
    return m_code;
}
void OAIOccurrence_attributes::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIOccurrence_attributes::is_code_Set() const{
    return m_code_isSet;
}

bool OAIOccurrence_attributes::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIOccurrence_attributes::getCodeName() const {
    return m_code_name;
}
void OAIOccurrence_attributes::setCodeName(const QString &code_name) {
    m_code_name = code_name;
    m_code_name_isSet = true;
}

bool OAIOccurrence_attributes::is_code_name_Set() const{
    return m_code_name_isSet;
}

bool OAIOccurrence_attributes::is_code_name_Valid() const{
    return m_code_name_isValid;
}

QString OAIOccurrence_attributes::getCreditDate() const {
    return m_credit_date;
}
void OAIOccurrence_attributes::setCreditDate(const QString &credit_date) {
    m_credit_date = credit_date;
    m_credit_date_isSet = true;
}

bool OAIOccurrence_attributes::is_credit_date_Set() const{
    return m_credit_date_isSet;
}

bool OAIOccurrence_attributes::is_credit_date_Valid() const{
    return m_credit_date_isValid;
}

double OAIOccurrence_attributes::getDiscountValue() const {
    return m_discount_value;
}
void OAIOccurrence_attributes::setDiscountValue(const double &discount_value) {
    m_discount_value = discount_value;
    m_discount_value_isSet = true;
}

bool OAIOccurrence_attributes::is_discount_value_Set() const{
    return m_discount_value_isSet;
}

bool OAIOccurrence_attributes::is_discount_value_Valid() const{
    return m_discount_value_isValid;
}

QString OAIOccurrence_attributes::getDocumentNumber() const {
    return m_document_number;
}
void OAIOccurrence_attributes::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAIOccurrence_attributes::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAIOccurrence_attributes::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAIOccurrence_attributes::getDueDate() const {
    return m_due_date;
}
void OAIOccurrence_attributes::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIOccurrence_attributes::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIOccurrence_attributes::is_due_date_Valid() const{
    return m_due_date_isValid;
}

double OAIOccurrence_attributes::getIofTax() const {
    return m_iof_tax;
}
void OAIOccurrence_attributes::setIofTax(const double &iof_tax) {
    m_iof_tax = iof_tax;
    m_iof_tax_isSet = true;
}

bool OAIOccurrence_attributes::is_iof_tax_Set() const{
    return m_iof_tax_isSet;
}

bool OAIOccurrence_attributes::is_iof_tax_Valid() const{
    return m_iof_tax_isValid;
}

QString OAIOccurrence_attributes::getIsDda() const {
    return m_is_dda;
}
void OAIOccurrence_attributes::setIsDda(const QString &is_dda) {
    m_is_dda = is_dda;
    m_is_dda_isSet = true;
}

bool OAIOccurrence_attributes::is_is_dda_Set() const{
    return m_is_dda_isSet;
}

bool OAIOccurrence_attributes::is_is_dda_Valid() const{
    return m_is_dda_isValid;
}

bool OAIOccurrence_attributes::isIsPayment() const {
    return m_is_payment;
}
void OAIOccurrence_attributes::setIsPayment(const bool &is_payment) {
    m_is_payment = is_payment;
    m_is_payment_isSet = true;
}

bool OAIOccurrence_attributes::is_is_payment_Set() const{
    return m_is_payment_isSet;
}

bool OAIOccurrence_attributes::is_is_payment_Valid() const{
    return m_is_payment_isValid;
}

bool OAIOccurrence_attributes::isIsRejectedPayment() const {
    return m_is_rejected_payment;
}
void OAIOccurrence_attributes::setIsRejectedPayment(const bool &is_rejected_payment) {
    m_is_rejected_payment = is_rejected_payment;
    m_is_rejected_payment_isSet = true;
}

bool OAIOccurrence_attributes::is_is_rejected_payment_Set() const{
    return m_is_rejected_payment_isSet;
}

bool OAIOccurrence_attributes::is_is_rejected_payment_Valid() const{
    return m_is_rejected_payment_isValid;
}

QString OAIOccurrence_attributes::getLiquidationCode() const {
    return m_liquidation_code;
}
void OAIOccurrence_attributes::setLiquidationCode(const QString &liquidation_code) {
    m_liquidation_code = liquidation_code;
    m_liquidation_code_isSet = true;
}

bool OAIOccurrence_attributes::is_liquidation_code_Set() const{
    return m_liquidation_code_isSet;
}

bool OAIOccurrence_attributes::is_liquidation_code_Valid() const{
    return m_liquidation_code_isValid;
}

QString OAIOccurrence_attributes::getLiquidationDescription() const {
    return m_liquidation_description;
}
void OAIOccurrence_attributes::setLiquidationDescription(const QString &liquidation_description) {
    m_liquidation_description = liquidation_description;
    m_liquidation_description_isSet = true;
}

bool OAIOccurrence_attributes::is_liquidation_description_Set() const{
    return m_liquidation_description_isSet;
}

bool OAIOccurrence_attributes::is_liquidation_description_Valid() const{
    return m_liquidation_description_isValid;
}

QString OAIOccurrence_attributes::getMulctValue() const {
    return m_mulct_value;
}
void OAIOccurrence_attributes::setMulctValue(const QString &mulct_value) {
    m_mulct_value = mulct_value;
    m_mulct_value_isSet = true;
}

bool OAIOccurrence_attributes::is_mulct_value_Set() const{
    return m_mulct_value_isSet;
}

bool OAIOccurrence_attributes::is_mulct_value_Valid() const{
    return m_mulct_value_isValid;
}

QString OAIOccurrence_attributes::getOccurrenceDate() const {
    return m_occurrence_date;
}
void OAIOccurrence_attributes::setOccurrenceDate(const QString &occurrence_date) {
    m_occurrence_date = occurrence_date;
    m_occurrence_date_isSet = true;
}

bool OAIOccurrence_attributes::is_occurrence_date_Set() const{
    return m_occurrence_date_isSet;
}

bool OAIOccurrence_attributes::is_occurrence_date_Valid() const{
    return m_occurrence_date_isValid;
}

double OAIOccurrence_attributes::getOthersCreditsValue() const {
    return m_others_credits_value;
}
void OAIOccurrence_attributes::setOthersCreditsValue(const double &others_credits_value) {
    m_others_credits_value = others_credits_value;
    m_others_credits_value_isSet = true;
}

bool OAIOccurrence_attributes::is_others_credits_value_Set() const{
    return m_others_credits_value_isSet;
}

bool OAIOccurrence_attributes::is_others_credits_value_Valid() const{
    return m_others_credits_value_isValid;
}

QString OAIOccurrence_attributes::getOurNumber() const {
    return m_our_number;
}
void OAIOccurrence_attributes::setOurNumber(const QString &our_number) {
    m_our_number = our_number;
    m_our_number_isSet = true;
}

bool OAIOccurrence_attributes::is_our_number_Set() const{
    return m_our_number_isSet;
}

bool OAIOccurrence_attributes::is_our_number_Valid() const{
    return m_our_number_isValid;
}

QString OAIOccurrence_attributes::getPayerAllegation() const {
    return m_payer_allegation;
}
void OAIOccurrence_attributes::setPayerAllegation(const QString &payer_allegation) {
    m_payer_allegation = payer_allegation;
    m_payer_allegation_isSet = true;
}

bool OAIOccurrence_attributes::is_payer_allegation_Set() const{
    return m_payer_allegation_isSet;
}

bool OAIOccurrence_attributes::is_payer_allegation_Valid() const{
    return m_payer_allegation_isValid;
}

double OAIOccurrence_attributes::getRebateValue() const {
    return m_rebate_value;
}
void OAIOccurrence_attributes::setRebateValue(const double &rebate_value) {
    m_rebate_value = rebate_value;
    m_rebate_value_isSet = true;
}

bool OAIOccurrence_attributes::is_rebate_value_Set() const{
    return m_rebate_value_isSet;
}

bool OAIOccurrence_attributes::is_rebate_value_Valid() const{
    return m_rebate_value_isValid;
}

double OAIOccurrence_attributes::getReceivedValue() const {
    return m_received_value;
}
void OAIOccurrence_attributes::setReceivedValue(const double &received_value) {
    m_received_value = received_value;
    m_received_value_isSet = true;
}

bool OAIOccurrence_attributes::is_received_value_Set() const{
    return m_received_value_isSet;
}

bool OAIOccurrence_attributes::is_received_value_Valid() const{
    return m_received_value_isValid;
}

double OAIOccurrence_attributes::getSequencialNumber() const {
    return m_sequencial_number;
}
void OAIOccurrence_attributes::setSequencialNumber(const double &sequencial_number) {
    m_sequencial_number = sequencial_number;
    m_sequencial_number_isSet = true;
}

bool OAIOccurrence_attributes::is_sequencial_number_Set() const{
    return m_sequencial_number_isSet;
}

bool OAIOccurrence_attributes::is_sequencial_number_Valid() const{
    return m_sequencial_number_isValid;
}

double OAIOccurrence_attributes::getTitleValue() const {
    return m_title_value;
}
void OAIOccurrence_attributes::setTitleValue(const double &title_value) {
    m_title_value = title_value;
    m_title_value_isSet = true;
}

bool OAIOccurrence_attributes::is_title_value_Set() const{
    return m_title_value_isSet;
}

bool OAIOccurrence_attributes::is_title_value_Valid() const{
    return m_title_value_isValid;
}

QString OAIOccurrence_attributes::getWallet() const {
    return m_wallet;
}
void OAIOccurrence_attributes::setWallet(const QString &wallet) {
    m_wallet = wallet;
    m_wallet_isSet = true;
}

bool OAIOccurrence_attributes::is_wallet_Set() const{
    return m_wallet_isSet;
}

bool OAIOccurrence_attributes::is_wallet_Valid() const{
    return m_wallet_isValid;
}

bool OAIOccurrence_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charged_agency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iof_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dda_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rejected_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mulct_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrence_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_others_credits_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_our_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_allegation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebate_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequencial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOccurrence_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
