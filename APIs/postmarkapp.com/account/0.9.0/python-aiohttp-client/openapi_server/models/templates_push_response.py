# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.templates_push_response_templates_inner import TemplatesPushResponseTemplatesInner
from openapi_server import util


class TemplatesPushResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, templates: List[TemplatesPushResponseTemplatesInner]=None, total_count: int=None):
        """TemplatesPushResponse - a model defined in OpenAPI

        :param templates: The templates of this TemplatesPushResponse.
        :param total_count: The total_count of this TemplatesPushResponse.
        """
        self.openapi_types = {
            'templates': List[TemplatesPushResponseTemplatesInner],
            'total_count': int
        }

        self.attribute_map = {
            'templates': 'Templates',
            'total_count': 'TotalCount'
        }

        self._templates = templates
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplatesPushResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplatesPushResponse of this TemplatesPushResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def templates(self):
        """Gets the templates of this TemplatesPushResponse.


        :return: The templates of this TemplatesPushResponse.
        :rtype: List[TemplatesPushResponseTemplatesInner]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this TemplatesPushResponse.


        :param templates: The templates of this TemplatesPushResponse.
        :type templates: List[TemplatesPushResponseTemplatesInner]
        """

        self._templates = templates

    @property
    def total_count(self):
        """Gets the total_count of this TemplatesPushResponse.


        :return: The total_count of this TemplatesPushResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this TemplatesPushResponse.


        :param total_count: The total_count of this TemplatesPushResponse.
        :type total_count: int
        """

        self._total_count = total_count
