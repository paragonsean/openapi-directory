/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISenderSignatureInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISenderSignatureInformation::OAISenderSignatureInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISenderSignatureInformation::OAISenderSignatureInformation() {
    this->initializeModel();
}

OAISenderSignatureInformation::~OAISenderSignatureInformation() {}

void OAISenderSignatureInformation::initializeModel() {

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reply_to_email_address_isSet = false;
    m_reply_to_email_address_isValid = false;
}

void OAISenderSignatureInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISenderSignatureInformation::fromJsonObject(QJsonObject json) {

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("Confirmed")]);
    m_confirmed_isSet = !json[QString("Confirmed")].isNull() && m_confirmed_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_reply_to_email_address_isValid = ::OpenAPI::fromJsonValue(m_reply_to_email_address, json[QString("ReplyToEmailAddress")]);
    m_reply_to_email_address_isSet = !json[QString("ReplyToEmailAddress")].isNull() && m_reply_to_email_address_isValid;
}

QString OAISenderSignatureInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISenderSignatureInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmed_isSet) {
        obj.insert(QString("Confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reply_to_email_address_isSet) {
        obj.insert(QString("ReplyToEmailAddress"), ::OpenAPI::toJsonValue(m_reply_to_email_address));
    }
    return obj;
}

bool OAISenderSignatureInformation::isConfirmed() const {
    return m_confirmed;
}
void OAISenderSignatureInformation::setConfirmed(const bool &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAISenderSignatureInformation::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAISenderSignatureInformation::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

QString OAISenderSignatureInformation::getDomain() const {
    return m_domain;
}
void OAISenderSignatureInformation::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAISenderSignatureInformation::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAISenderSignatureInformation::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAISenderSignatureInformation::getEmailAddress() const {
    return m_email_address;
}
void OAISenderSignatureInformation::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAISenderSignatureInformation::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAISenderSignatureInformation::is_email_address_Valid() const{
    return m_email_address_isValid;
}

qint64 OAISenderSignatureInformation::getId() const {
    return m_id;
}
void OAISenderSignatureInformation::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISenderSignatureInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAISenderSignatureInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISenderSignatureInformation::getName() const {
    return m_name;
}
void OAISenderSignatureInformation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISenderSignatureInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAISenderSignatureInformation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISenderSignatureInformation::getReplyToEmailAddress() const {
    return m_reply_to_email_address;
}
void OAISenderSignatureInformation::setReplyToEmailAddress(const QString &reply_to_email_address) {
    m_reply_to_email_address = reply_to_email_address;
    m_reply_to_email_address_isSet = true;
}

bool OAISenderSignatureInformation::is_reply_to_email_address_Set() const{
    return m_reply_to_email_address_isSet;
}

bool OAISenderSignatureInformation::is_reply_to_email_address_Valid() const{
    return m_reply_to_email_address_isValid;
}

bool OAISenderSignatureInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISenderSignatureInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
