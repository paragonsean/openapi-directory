/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerManagementAPIApi_H
#define OAI_OAIServerManagementAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateServerPayload.h"
#include "OAIEditServerPayload.h"
#include "OAIExtendedServerInfo.h"
#include "OAIServerListingResponse.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerManagementAPIApi : public QObject {
    Q_OBJECT

public:
    OAIServerManagementAPIApi(const int timeOut = 0);
    ~OAIServerManagementAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  body OAICreateServerPayload [optional]
    */
    virtual void createServer(const QString &x_postmark_account_token, const ::OpenAPI::OptionalParam<OAICreateServerPayload> &body = ::OpenAPI::OptionalParam<OAICreateServerPayload>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  serverid qint32 [required]
    */
    virtual void deleteServer(const QString &x_postmark_account_token, const qint32 &serverid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  serverid qint32 [required]
    * @param[in]  body OAIEditServerPayload [optional]
    */
    virtual void editServerInformation(const QString &x_postmark_account_token, const qint32 &serverid, const ::OpenAPI::OptionalParam<OAIEditServerPayload> &body = ::OpenAPI::OptionalParam<OAIEditServerPayload>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  serverid qint32 [required]
    */
    virtual void getServerInformation(const QString &x_postmark_account_token, const qint32 &serverid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  name QString [optional]
    */
    virtual void listServers(const QString &x_postmark_account_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createServerCallback(OAIHttpRequestWorker *worker);
    void deleteServerCallback(OAIHttpRequestWorker *worker);
    void editServerInformationCallback(OAIHttpRequestWorker *worker);
    void getServerInformationCallback(OAIHttpRequestWorker *worker);
    void listServersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createServerSignal(OAIExtendedServerInfo summary);
    void deleteServerSignal();
    void editServerInformationSignal(OAIExtendedServerInfo summary);
    void getServerInformationSignal(OAIExtendedServerInfo summary);
    void listServersSignal(OAIServerListingResponse summary);


    void createServerSignalFull(OAIHttpRequestWorker *worker, OAIExtendedServerInfo summary);
    void deleteServerSignalFull(OAIHttpRequestWorker *worker);
    void editServerInformationSignalFull(OAIHttpRequestWorker *worker, OAIExtendedServerInfo summary);
    void getServerInformationSignalFull(OAIHttpRequestWorker *worker, OAIExtendedServerInfo summary);
    void listServersSignalFull(OAIHttpRequestWorker *worker, OAIServerListingResponse summary);

    Q_DECL_DEPRECATED_X("Use createServerSignalError() instead")
    void createServerSignalE(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServerSignalError(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerSignalError() instead")
    void deleteServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editServerInformationSignalError() instead")
    void editServerInformationSignalE(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editServerInformationSignalError(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerInformationSignalError() instead")
    void getServerInformationSignalE(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInformationSignalError(OAIExtendedServerInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServersSignalError() instead")
    void listServersSignalE(OAIServerListingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServersSignalError(OAIServerListingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createServerSignalErrorFull() instead")
    void createServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerSignalErrorFull() instead")
    void deleteServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editServerInformationSignalErrorFull() instead")
    void editServerInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editServerInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerInformationSignalErrorFull() instead")
    void getServerInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServersSignalErrorFull() instead")
    void listServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
