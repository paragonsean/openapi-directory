/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainExtendedInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainExtendedInformation::OAIDomainExtendedInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainExtendedInformation::OAIDomainExtendedInformation() {
    this->initializeModel();
}

OAIDomainExtendedInformation::~OAIDomainExtendedInformation() {}

void OAIDomainExtendedInformation::initializeModel() {

    m_dkim_host_isSet = false;
    m_dkim_host_isValid = false;

    m_dkim_pending_host_isSet = false;
    m_dkim_pending_host_isValid = false;

    m_dkim_pending_text_value_isSet = false;
    m_dkim_pending_text_value_isValid = false;

    m_dkim_revoked_host_isSet = false;
    m_dkim_revoked_host_isValid = false;

    m_dkim_revoked_text_value_isSet = false;
    m_dkim_revoked_text_value_isValid = false;

    m_dkim_test_value_isSet = false;
    m_dkim_test_value_isValid = false;

    m_dkim_update_status_isSet = false;
    m_dkim_update_status_isValid = false;

    m_dkim_verified_isSet = false;
    m_dkim_verified_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_return_path_domain_isSet = false;
    m_return_path_domain_isValid = false;

    m_return_path_domain_cname_value_isSet = false;
    m_return_path_domain_cname_value_isValid = false;

    m_return_path_domain_verified_isSet = false;
    m_return_path_domain_verified_isValid = false;

    m_spf_host_isSet = false;
    m_spf_host_isValid = false;

    m_spf_text_value_isSet = false;
    m_spf_text_value_isValid = false;

    m_spf_verified_isSet = false;
    m_spf_verified_isValid = false;

    m_safe_to_remove_revoked_key_from_dns_isSet = false;
    m_safe_to_remove_revoked_key_from_dns_isValid = false;

    m_weak_dkim_isSet = false;
    m_weak_dkim_isValid = false;
}

void OAIDomainExtendedInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainExtendedInformation::fromJsonObject(QJsonObject json) {

    m_dkim_host_isValid = ::OpenAPI::fromJsonValue(m_dkim_host, json[QString("DKIMHost")]);
    m_dkim_host_isSet = !json[QString("DKIMHost")].isNull() && m_dkim_host_isValid;

    m_dkim_pending_host_isValid = ::OpenAPI::fromJsonValue(m_dkim_pending_host, json[QString("DKIMPendingHost")]);
    m_dkim_pending_host_isSet = !json[QString("DKIMPendingHost")].isNull() && m_dkim_pending_host_isValid;

    m_dkim_pending_text_value_isValid = ::OpenAPI::fromJsonValue(m_dkim_pending_text_value, json[QString("DKIMPendingTextValue")]);
    m_dkim_pending_text_value_isSet = !json[QString("DKIMPendingTextValue")].isNull() && m_dkim_pending_text_value_isValid;

    m_dkim_revoked_host_isValid = ::OpenAPI::fromJsonValue(m_dkim_revoked_host, json[QString("DKIMRevokedHost")]);
    m_dkim_revoked_host_isSet = !json[QString("DKIMRevokedHost")].isNull() && m_dkim_revoked_host_isValid;

    m_dkim_revoked_text_value_isValid = ::OpenAPI::fromJsonValue(m_dkim_revoked_text_value, json[QString("DKIMRevokedTextValue")]);
    m_dkim_revoked_text_value_isSet = !json[QString("DKIMRevokedTextValue")].isNull() && m_dkim_revoked_text_value_isValid;

    m_dkim_test_value_isValid = ::OpenAPI::fromJsonValue(m_dkim_test_value, json[QString("DKIMTestValue")]);
    m_dkim_test_value_isSet = !json[QString("DKIMTestValue")].isNull() && m_dkim_test_value_isValid;

    m_dkim_update_status_isValid = ::OpenAPI::fromJsonValue(m_dkim_update_status, json[QString("DKIMUpdateStatus")]);
    m_dkim_update_status_isSet = !json[QString("DKIMUpdateStatus")].isNull() && m_dkim_update_status_isValid;

    m_dkim_verified_isValid = ::OpenAPI::fromJsonValue(m_dkim_verified, json[QString("DKIMVerified")]);
    m_dkim_verified_isSet = !json[QString("DKIMVerified")].isNull() && m_dkim_verified_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_return_path_domain_isValid = ::OpenAPI::fromJsonValue(m_return_path_domain, json[QString("ReturnPathDomain")]);
    m_return_path_domain_isSet = !json[QString("ReturnPathDomain")].isNull() && m_return_path_domain_isValid;

    m_return_path_domain_cname_value_isValid = ::OpenAPI::fromJsonValue(m_return_path_domain_cname_value, json[QString("ReturnPathDomainCNAMEValue")]);
    m_return_path_domain_cname_value_isSet = !json[QString("ReturnPathDomainCNAMEValue")].isNull() && m_return_path_domain_cname_value_isValid;

    m_return_path_domain_verified_isValid = ::OpenAPI::fromJsonValue(m_return_path_domain_verified, json[QString("ReturnPathDomainVerified")]);
    m_return_path_domain_verified_isSet = !json[QString("ReturnPathDomainVerified")].isNull() && m_return_path_domain_verified_isValid;

    m_spf_host_isValid = ::OpenAPI::fromJsonValue(m_spf_host, json[QString("SPFHost")]);
    m_spf_host_isSet = !json[QString("SPFHost")].isNull() && m_spf_host_isValid;

    m_spf_text_value_isValid = ::OpenAPI::fromJsonValue(m_spf_text_value, json[QString("SPFTextValue")]);
    m_spf_text_value_isSet = !json[QString("SPFTextValue")].isNull() && m_spf_text_value_isValid;

    m_spf_verified_isValid = ::OpenAPI::fromJsonValue(m_spf_verified, json[QString("SPFVerified")]);
    m_spf_verified_isSet = !json[QString("SPFVerified")].isNull() && m_spf_verified_isValid;

    m_safe_to_remove_revoked_key_from_dns_isValid = ::OpenAPI::fromJsonValue(m_safe_to_remove_revoked_key_from_dns, json[QString("SafeToRemoveRevokedKeyFromDNS")]);
    m_safe_to_remove_revoked_key_from_dns_isSet = !json[QString("SafeToRemoveRevokedKeyFromDNS")].isNull() && m_safe_to_remove_revoked_key_from_dns_isValid;

    m_weak_dkim_isValid = ::OpenAPI::fromJsonValue(m_weak_dkim, json[QString("WeakDKIM")]);
    m_weak_dkim_isSet = !json[QString("WeakDKIM")].isNull() && m_weak_dkim_isValid;
}

QString OAIDomainExtendedInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainExtendedInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_dkim_host_isSet) {
        obj.insert(QString("DKIMHost"), ::OpenAPI::toJsonValue(m_dkim_host));
    }
    if (m_dkim_pending_host_isSet) {
        obj.insert(QString("DKIMPendingHost"), ::OpenAPI::toJsonValue(m_dkim_pending_host));
    }
    if (m_dkim_pending_text_value_isSet) {
        obj.insert(QString("DKIMPendingTextValue"), ::OpenAPI::toJsonValue(m_dkim_pending_text_value));
    }
    if (m_dkim_revoked_host_isSet) {
        obj.insert(QString("DKIMRevokedHost"), ::OpenAPI::toJsonValue(m_dkim_revoked_host));
    }
    if (m_dkim_revoked_text_value_isSet) {
        obj.insert(QString("DKIMRevokedTextValue"), ::OpenAPI::toJsonValue(m_dkim_revoked_text_value));
    }
    if (m_dkim_test_value_isSet) {
        obj.insert(QString("DKIMTestValue"), ::OpenAPI::toJsonValue(m_dkim_test_value));
    }
    if (m_dkim_update_status_isSet) {
        obj.insert(QString("DKIMUpdateStatus"), ::OpenAPI::toJsonValue(m_dkim_update_status));
    }
    if (m_dkim_verified_isSet) {
        obj.insert(QString("DKIMVerified"), ::OpenAPI::toJsonValue(m_dkim_verified));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_return_path_domain_isSet) {
        obj.insert(QString("ReturnPathDomain"), ::OpenAPI::toJsonValue(m_return_path_domain));
    }
    if (m_return_path_domain_cname_value_isSet) {
        obj.insert(QString("ReturnPathDomainCNAMEValue"), ::OpenAPI::toJsonValue(m_return_path_domain_cname_value));
    }
    if (m_return_path_domain_verified_isSet) {
        obj.insert(QString("ReturnPathDomainVerified"), ::OpenAPI::toJsonValue(m_return_path_domain_verified));
    }
    if (m_spf_host_isSet) {
        obj.insert(QString("SPFHost"), ::OpenAPI::toJsonValue(m_spf_host));
    }
    if (m_spf_text_value_isSet) {
        obj.insert(QString("SPFTextValue"), ::OpenAPI::toJsonValue(m_spf_text_value));
    }
    if (m_spf_verified_isSet) {
        obj.insert(QString("SPFVerified"), ::OpenAPI::toJsonValue(m_spf_verified));
    }
    if (m_safe_to_remove_revoked_key_from_dns_isSet) {
        obj.insert(QString("SafeToRemoveRevokedKeyFromDNS"), ::OpenAPI::toJsonValue(m_safe_to_remove_revoked_key_from_dns));
    }
    if (m_weak_dkim_isSet) {
        obj.insert(QString("WeakDKIM"), ::OpenAPI::toJsonValue(m_weak_dkim));
    }
    return obj;
}

QString OAIDomainExtendedInformation::getDkimHost() const {
    return m_dkim_host;
}
void OAIDomainExtendedInformation::setDkimHost(const QString &dkim_host) {
    m_dkim_host = dkim_host;
    m_dkim_host_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_host_Set() const{
    return m_dkim_host_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_host_Valid() const{
    return m_dkim_host_isValid;
}

QString OAIDomainExtendedInformation::getDkimPendingHost() const {
    return m_dkim_pending_host;
}
void OAIDomainExtendedInformation::setDkimPendingHost(const QString &dkim_pending_host) {
    m_dkim_pending_host = dkim_pending_host;
    m_dkim_pending_host_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_pending_host_Set() const{
    return m_dkim_pending_host_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_pending_host_Valid() const{
    return m_dkim_pending_host_isValid;
}

QString OAIDomainExtendedInformation::getDkimPendingTextValue() const {
    return m_dkim_pending_text_value;
}
void OAIDomainExtendedInformation::setDkimPendingTextValue(const QString &dkim_pending_text_value) {
    m_dkim_pending_text_value = dkim_pending_text_value;
    m_dkim_pending_text_value_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_pending_text_value_Set() const{
    return m_dkim_pending_text_value_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_pending_text_value_Valid() const{
    return m_dkim_pending_text_value_isValid;
}

QString OAIDomainExtendedInformation::getDkimRevokedHost() const {
    return m_dkim_revoked_host;
}
void OAIDomainExtendedInformation::setDkimRevokedHost(const QString &dkim_revoked_host) {
    m_dkim_revoked_host = dkim_revoked_host;
    m_dkim_revoked_host_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_revoked_host_Set() const{
    return m_dkim_revoked_host_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_revoked_host_Valid() const{
    return m_dkim_revoked_host_isValid;
}

QString OAIDomainExtendedInformation::getDkimRevokedTextValue() const {
    return m_dkim_revoked_text_value;
}
void OAIDomainExtendedInformation::setDkimRevokedTextValue(const QString &dkim_revoked_text_value) {
    m_dkim_revoked_text_value = dkim_revoked_text_value;
    m_dkim_revoked_text_value_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_revoked_text_value_Set() const{
    return m_dkim_revoked_text_value_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_revoked_text_value_Valid() const{
    return m_dkim_revoked_text_value_isValid;
}

QString OAIDomainExtendedInformation::getDkimTestValue() const {
    return m_dkim_test_value;
}
void OAIDomainExtendedInformation::setDkimTestValue(const QString &dkim_test_value) {
    m_dkim_test_value = dkim_test_value;
    m_dkim_test_value_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_test_value_Set() const{
    return m_dkim_test_value_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_test_value_Valid() const{
    return m_dkim_test_value_isValid;
}

QString OAIDomainExtendedInformation::getDkimUpdateStatus() const {
    return m_dkim_update_status;
}
void OAIDomainExtendedInformation::setDkimUpdateStatus(const QString &dkim_update_status) {
    m_dkim_update_status = dkim_update_status;
    m_dkim_update_status_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_update_status_Set() const{
    return m_dkim_update_status_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_update_status_Valid() const{
    return m_dkim_update_status_isValid;
}

bool OAIDomainExtendedInformation::isDkimVerified() const {
    return m_dkim_verified;
}
void OAIDomainExtendedInformation::setDkimVerified(const bool &dkim_verified) {
    m_dkim_verified = dkim_verified;
    m_dkim_verified_isSet = true;
}

bool OAIDomainExtendedInformation::is_dkim_verified_Set() const{
    return m_dkim_verified_isSet;
}

bool OAIDomainExtendedInformation::is_dkim_verified_Valid() const{
    return m_dkim_verified_isValid;
}

qint64 OAIDomainExtendedInformation::getId() const {
    return m_id;
}
void OAIDomainExtendedInformation::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDomainExtendedInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDomainExtendedInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDomainExtendedInformation::getName() const {
    return m_name;
}
void OAIDomainExtendedInformation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainExtendedInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainExtendedInformation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDomainExtendedInformation::getReturnPathDomain() const {
    return m_return_path_domain;
}
void OAIDomainExtendedInformation::setReturnPathDomain(const QString &return_path_domain) {
    m_return_path_domain = return_path_domain;
    m_return_path_domain_isSet = true;
}

bool OAIDomainExtendedInformation::is_return_path_domain_Set() const{
    return m_return_path_domain_isSet;
}

bool OAIDomainExtendedInformation::is_return_path_domain_Valid() const{
    return m_return_path_domain_isValid;
}

QString OAIDomainExtendedInformation::getReturnPathDomainCnameValue() const {
    return m_return_path_domain_cname_value;
}
void OAIDomainExtendedInformation::setReturnPathDomainCnameValue(const QString &return_path_domain_cname_value) {
    m_return_path_domain_cname_value = return_path_domain_cname_value;
    m_return_path_domain_cname_value_isSet = true;
}

bool OAIDomainExtendedInformation::is_return_path_domain_cname_value_Set() const{
    return m_return_path_domain_cname_value_isSet;
}

bool OAIDomainExtendedInformation::is_return_path_domain_cname_value_Valid() const{
    return m_return_path_domain_cname_value_isValid;
}

bool OAIDomainExtendedInformation::isReturnPathDomainVerified() const {
    return m_return_path_domain_verified;
}
void OAIDomainExtendedInformation::setReturnPathDomainVerified(const bool &return_path_domain_verified) {
    m_return_path_domain_verified = return_path_domain_verified;
    m_return_path_domain_verified_isSet = true;
}

bool OAIDomainExtendedInformation::is_return_path_domain_verified_Set() const{
    return m_return_path_domain_verified_isSet;
}

bool OAIDomainExtendedInformation::is_return_path_domain_verified_Valid() const{
    return m_return_path_domain_verified_isValid;
}

QString OAIDomainExtendedInformation::getSpfHost() const {
    return m_spf_host;
}
void OAIDomainExtendedInformation::setSpfHost(const QString &spf_host) {
    m_spf_host = spf_host;
    m_spf_host_isSet = true;
}

bool OAIDomainExtendedInformation::is_spf_host_Set() const{
    return m_spf_host_isSet;
}

bool OAIDomainExtendedInformation::is_spf_host_Valid() const{
    return m_spf_host_isValid;
}

QString OAIDomainExtendedInformation::getSpfTextValue() const {
    return m_spf_text_value;
}
void OAIDomainExtendedInformation::setSpfTextValue(const QString &spf_text_value) {
    m_spf_text_value = spf_text_value;
    m_spf_text_value_isSet = true;
}

bool OAIDomainExtendedInformation::is_spf_text_value_Set() const{
    return m_spf_text_value_isSet;
}

bool OAIDomainExtendedInformation::is_spf_text_value_Valid() const{
    return m_spf_text_value_isValid;
}

bool OAIDomainExtendedInformation::isSpfVerified() const {
    return m_spf_verified;
}
void OAIDomainExtendedInformation::setSpfVerified(const bool &spf_verified) {
    m_spf_verified = spf_verified;
    m_spf_verified_isSet = true;
}

bool OAIDomainExtendedInformation::is_spf_verified_Set() const{
    return m_spf_verified_isSet;
}

bool OAIDomainExtendedInformation::is_spf_verified_Valid() const{
    return m_spf_verified_isValid;
}

bool OAIDomainExtendedInformation::isSafeToRemoveRevokedKeyFromDns() const {
    return m_safe_to_remove_revoked_key_from_dns;
}
void OAIDomainExtendedInformation::setSafeToRemoveRevokedKeyFromDns(const bool &safe_to_remove_revoked_key_from_dns) {
    m_safe_to_remove_revoked_key_from_dns = safe_to_remove_revoked_key_from_dns;
    m_safe_to_remove_revoked_key_from_dns_isSet = true;
}

bool OAIDomainExtendedInformation::is_safe_to_remove_revoked_key_from_dns_Set() const{
    return m_safe_to_remove_revoked_key_from_dns_isSet;
}

bool OAIDomainExtendedInformation::is_safe_to_remove_revoked_key_from_dns_Valid() const{
    return m_safe_to_remove_revoked_key_from_dns_isValid;
}

bool OAIDomainExtendedInformation::isWeakDkim() const {
    return m_weak_dkim;
}
void OAIDomainExtendedInformation::setWeakDkim(const bool &weak_dkim) {
    m_weak_dkim = weak_dkim;
    m_weak_dkim_isSet = true;
}

bool OAIDomainExtendedInformation::is_weak_dkim_Set() const{
    return m_weak_dkim_isSet;
}

bool OAIDomainExtendedInformation::is_weak_dkim_Valid() const{
    return m_weak_dkim_isValid;
}

bool OAIDomainExtendedInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dkim_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_pending_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_pending_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_revoked_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_revoked_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_test_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dkim_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_path_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_path_domain_cname_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_path_domain_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spf_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_to_remove_revoked_key_from_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weak_dkim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainExtendedInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
