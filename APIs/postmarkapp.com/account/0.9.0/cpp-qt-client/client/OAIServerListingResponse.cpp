/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerListingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerListingResponse::OAIServerListingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerListingResponse::OAIServerListingResponse() {
    this->initializeModel();
}

OAIServerListingResponse::~OAIServerListingResponse() {}

void OAIServerListingResponse::initializeModel() {

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIServerListingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerListingResponse::fromJsonObject(QJsonObject json) {

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("Servers")]);
    m_servers_isSet = !json[QString("Servers")].isNull() && m_servers_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIServerListingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerListingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_servers.size() > 0) {
        obj.insert(QString("Servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIExtendedServerInfo> OAIServerListingResponse::getServers() const {
    return m_servers;
}
void OAIServerListingResponse::setServers(const QList<OAIExtendedServerInfo> &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIServerListingResponse::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIServerListingResponse::is_servers_Valid() const{
    return m_servers_isValid;
}

qint32 OAIServerListingResponse::getTotalCount() const {
    return m_total_count;
}
void OAIServerListingResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIServerListingResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIServerListingResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIServerListingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerListingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
