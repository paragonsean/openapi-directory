/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISenderSignaturesAPIApi_H
#define OAI_OAISenderSignaturesAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISenderListingResults.h"
#include "OAISenderSignatureCreationModel.h"
#include "OAISenderSignatureEditingModel.h"
#include "OAISenderSignatureExtendedInformation.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISenderSignaturesAPIApi : public QObject {
    Q_OBJECT

public:
    OAISenderSignaturesAPIApi(const int timeOut = 0);
    ~OAISenderSignaturesAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  body OAISenderSignatureCreationModel [optional]
    */
    virtual void createSenderSignature(const QString &x_postmark_account_token, const ::OpenAPI::OptionalParam<OAISenderSignatureCreationModel> &body = ::OpenAPI::OptionalParam<OAISenderSignatureCreationModel>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    */
    virtual void deleteSenderSignature(const QString &x_postmark_account_token, const qint32 &signatureid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    * @param[in]  body OAISenderSignatureEditingModel [optional]
    */
    virtual void editSenderSignature(const QString &x_postmark_account_token, const qint32 &signatureid, const ::OpenAPI::OptionalParam<OAISenderSignatureEditingModel> &body = ::OpenAPI::OptionalParam<OAISenderSignatureEditingModel>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    */
    virtual void getSenderSignature(const QString &x_postmark_account_token, const qint32 &signatureid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    */
    virtual void listSenderSignatures(const QString &x_postmark_account_token, const qint32 &count, const qint32 &offset);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    */
    virtual void requestNewDKIMKeyForSenderSignature(const QString &x_postmark_account_token, const qint32 &signatureid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    */
    virtual void requestSPFVerificationForSenderSignature(const QString &x_postmark_account_token, const qint32 &signatureid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  signatureid qint32 [required]
    */
    virtual void resendSenderSignatureConfirmationEmail(const QString &x_postmark_account_token, const qint32 &signatureid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void deleteSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void editSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void getSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void listSenderSignaturesCallback(OAIHttpRequestWorker *worker);
    void requestNewDKIMKeyForSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void requestSPFVerificationForSenderSignatureCallback(OAIHttpRequestWorker *worker);
    void resendSenderSignatureConfirmationEmailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSenderSignatureSignal(OAISenderSignatureExtendedInformation summary);
    void deleteSenderSignatureSignal(OAIStandardPostmarkResponse summary);
    void editSenderSignatureSignal(OAISenderSignatureExtendedInformation summary);
    void getSenderSignatureSignal(OAISenderSignatureExtendedInformation summary);
    void listSenderSignaturesSignal(OAISenderListingResults summary);
    void requestNewDKIMKeyForSenderSignatureSignal(OAIStandardPostmarkResponse summary);
    void requestSPFVerificationForSenderSignatureSignal(OAISenderSignatureExtendedInformation summary);
    void resendSenderSignatureConfirmationEmailSignal(OAIStandardPostmarkResponse summary);


    void createSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAISenderSignatureExtendedInformation summary);
    void deleteSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);
    void editSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAISenderSignatureExtendedInformation summary);
    void getSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAISenderSignatureExtendedInformation summary);
    void listSenderSignaturesSignalFull(OAIHttpRequestWorker *worker, OAISenderListingResults summary);
    void requestNewDKIMKeyForSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);
    void requestSPFVerificationForSenderSignatureSignalFull(OAIHttpRequestWorker *worker, OAISenderSignatureExtendedInformation summary);
    void resendSenderSignatureConfirmationEmailSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);

    Q_DECL_DEPRECATED_X("Use createSenderSignatureSignalError() instead")
    void createSenderSignatureSignalE(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSenderSignatureSignalError(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSenderSignatureSignalError() instead")
    void deleteSenderSignatureSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSenderSignatureSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editSenderSignatureSignalError() instead")
    void editSenderSignatureSignalE(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editSenderSignatureSignalError(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSenderSignatureSignalError() instead")
    void getSenderSignatureSignalE(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSenderSignatureSignalError(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSenderSignaturesSignalError() instead")
    void listSenderSignaturesSignalE(OAISenderListingResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSenderSignaturesSignalError(OAISenderListingResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNewDKIMKeyForSenderSignatureSignalError() instead")
    void requestNewDKIMKeyForSenderSignatureSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNewDKIMKeyForSenderSignatureSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSPFVerificationForSenderSignatureSignalError() instead")
    void requestSPFVerificationForSenderSignatureSignalE(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSPFVerificationForSenderSignatureSignalError(OAISenderSignatureExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendSenderSignatureConfirmationEmailSignalError() instead")
    void resendSenderSignatureConfirmationEmailSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendSenderSignatureConfirmationEmailSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSenderSignatureSignalErrorFull() instead")
    void createSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSenderSignatureSignalErrorFull() instead")
    void deleteSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editSenderSignatureSignalErrorFull() instead")
    void editSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSenderSignatureSignalErrorFull() instead")
    void getSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSenderSignaturesSignalErrorFull() instead")
    void listSenderSignaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSenderSignaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNewDKIMKeyForSenderSignatureSignalErrorFull() instead")
    void requestNewDKIMKeyForSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNewDKIMKeyForSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSPFVerificationForSenderSignatureSignalErrorFull() instead")
    void requestSPFVerificationForSenderSignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSPFVerificationForSenderSignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendSenderSignatureConfirmationEmailSignalErrorFull() instead")
    void resendSenderSignatureConfirmationEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendSenderSignatureConfirmationEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
