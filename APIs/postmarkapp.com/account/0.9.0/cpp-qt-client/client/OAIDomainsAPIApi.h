/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsAPIApi_H
#define OAI_OAIDomainsAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDKIMRotationResponse.h"
#include "OAIDomainCreationModel.h"
#include "OAIDomainEditingModel.h"
#include "OAIDomainExtendedInformation.h"
#include "OAIDomainListingResults.h"
#include "OAIDomainSPFResult.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsAPIApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsAPIApi(const int timeOut = 0);
    ~OAIDomainsAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  body OAIDomainCreationModel [optional]
    */
    virtual void createDomain(const QString &x_postmark_account_token, const ::OpenAPI::OptionalParam<OAIDomainCreationModel> &body = ::OpenAPI::OptionalParam<OAIDomainCreationModel>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void deleteDomain(const QString &x_postmark_account_token, const qint32 &domainid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    * @param[in]  body OAIDomainEditingModel [optional]
    */
    virtual void editDomain(const QString &x_postmark_account_token, const qint32 &domainid, const ::OpenAPI::OptionalParam<OAIDomainEditingModel> &body = ::OpenAPI::OptionalParam<OAIDomainEditingModel>());

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void getDomain(const QString &x_postmark_account_token, const qint32 &domainid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    */
    virtual void listDomains(const QString &x_postmark_account_token, const qint32 &count, const qint32 &offset);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void requestDkimVerificationForDomain(const QString &x_postmark_account_token, const qint32 &domainid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void requestReturnPathVerificationForDomain(const QString &x_postmark_account_token, const qint32 &domainid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void requestSPFVerificationForDomain(const QString &x_postmark_account_token, const qint32 &domainid);

    /**
    * @param[in]  x_postmark_account_token QString [required]
    * @param[in]  domainid qint32 [required]
    */
    virtual void rotateDKIMKeyForDomain(const QString &x_postmark_account_token, const qint32 &domainid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDomainCallback(OAIHttpRequestWorker *worker);
    void deleteDomainCallback(OAIHttpRequestWorker *worker);
    void editDomainCallback(OAIHttpRequestWorker *worker);
    void getDomainCallback(OAIHttpRequestWorker *worker);
    void listDomainsCallback(OAIHttpRequestWorker *worker);
    void requestDkimVerificationForDomainCallback(OAIHttpRequestWorker *worker);
    void requestReturnPathVerificationForDomainCallback(OAIHttpRequestWorker *worker);
    void requestSPFVerificationForDomainCallback(OAIHttpRequestWorker *worker);
    void rotateDKIMKeyForDomainCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDomainSignal(OAIDomainExtendedInformation summary);
    void deleteDomainSignal(OAIStandardPostmarkResponse summary);
    void editDomainSignal(OAIDomainExtendedInformation summary);
    void getDomainSignal(OAIDomainExtendedInformation summary);
    void listDomainsSignal(OAIDomainListingResults summary);
    void requestDkimVerificationForDomainSignal(OAIDomainExtendedInformation summary);
    void requestReturnPathVerificationForDomainSignal(OAIDomainExtendedInformation summary);
    void requestSPFVerificationForDomainSignal(OAIDomainSPFResult summary);
    void rotateDKIMKeyForDomainSignal(OAIDKIMRotationResponse summary);


    void createDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainExtendedInformation summary);
    void deleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);
    void editDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainExtendedInformation summary);
    void getDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainExtendedInformation summary);
    void listDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDomainListingResults summary);
    void requestDkimVerificationForDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainExtendedInformation summary);
    void requestReturnPathVerificationForDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainExtendedInformation summary);
    void requestSPFVerificationForDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainSPFResult summary);
    void rotateDKIMKeyForDomainSignalFull(OAIHttpRequestWorker *worker, OAIDKIMRotationResponse summary);

    Q_DECL_DEPRECATED_X("Use createDomainSignalError() instead")
    void createDomainSignalE(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDomainSignalError(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalError() instead")
    void deleteDomainSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editDomainSignalError() instead")
    void editDomainSignalE(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editDomainSignalError(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainSignalError() instead")
    void getDomainSignalE(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainSignalError(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsSignalError() instead")
    void listDomainsSignalE(OAIDomainListingResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsSignalError(OAIDomainListingResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDkimVerificationForDomainSignalError() instead")
    void requestDkimVerificationForDomainSignalE(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDkimVerificationForDomainSignalError(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestReturnPathVerificationForDomainSignalError() instead")
    void requestReturnPathVerificationForDomainSignalE(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestReturnPathVerificationForDomainSignalError(OAIDomainExtendedInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSPFVerificationForDomainSignalError() instead")
    void requestSPFVerificationForDomainSignalE(OAIDomainSPFResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSPFVerificationForDomainSignalError(OAIDomainSPFResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateDKIMKeyForDomainSignalError() instead")
    void rotateDKIMKeyForDomainSignalE(OAIDKIMRotationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateDKIMKeyForDomainSignalError(OAIDKIMRotationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDomainSignalErrorFull() instead")
    void createDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalErrorFull() instead")
    void deleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editDomainSignalErrorFull() instead")
    void editDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainSignalErrorFull() instead")
    void getDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsSignalErrorFull() instead")
    void listDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDkimVerificationForDomainSignalErrorFull() instead")
    void requestDkimVerificationForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDkimVerificationForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestReturnPathVerificationForDomainSignalErrorFull() instead")
    void requestReturnPathVerificationForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestReturnPathVerificationForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSPFVerificationForDomainSignalErrorFull() instead")
    void requestSPFVerificationForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSPFVerificationForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateDKIMKeyForDomainSignalErrorFull() instead")
    void rotateDKIMKeyForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateDKIMKeyForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
