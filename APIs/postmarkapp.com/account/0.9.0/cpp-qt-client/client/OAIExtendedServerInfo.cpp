/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedServerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedServerInfo::OAIExtendedServerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedServerInfo::OAIExtendedServerInfo() {
    this->initializeModel();
}

OAIExtendedServerInfo::~OAIExtendedServerInfo() {}

void OAIExtendedServerInfo::initializeModel() {

    m_api_tokens_isSet = false;
    m_api_tokens_isValid = false;

    m_bounce_hook_url_isSet = false;
    m_bounce_hook_url_isValid = false;

    m_click_hook_url_isSet = false;
    m_click_hook_url_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_delivery_hook_url_isSet = false;
    m_delivery_hook_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbound_address_isSet = false;
    m_inbound_address_isValid = false;

    m_inbound_domain_isSet = false;
    m_inbound_domain_isValid = false;

    m_inbound_hash_isSet = false;
    m_inbound_hash_isValid = false;

    m_inbound_hook_url_isSet = false;
    m_inbound_hook_url_isValid = false;

    m_inbound_spam_threshold_isSet = false;
    m_inbound_spam_threshold_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_hook_url_isSet = false;
    m_open_hook_url_isValid = false;

    m_post_first_open_only_isSet = false;
    m_post_first_open_only_isValid = false;

    m_raw_email_enabled_isSet = false;
    m_raw_email_enabled_isValid = false;

    m_server_link_isSet = false;
    m_server_link_isValid = false;

    m_smtp_api_activated_isSet = false;
    m_smtp_api_activated_isValid = false;

    m_track_links_isSet = false;
    m_track_links_isValid = false;

    m_track_opens_isSet = false;
    m_track_opens_isValid = false;
}

void OAIExtendedServerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedServerInfo::fromJsonObject(QJsonObject json) {

    m_api_tokens_isValid = ::OpenAPI::fromJsonValue(m_api_tokens, json[QString("ApiTokens")]);
    m_api_tokens_isSet = !json[QString("ApiTokens")].isNull() && m_api_tokens_isValid;

    m_bounce_hook_url_isValid = ::OpenAPI::fromJsonValue(m_bounce_hook_url, json[QString("BounceHookUrl")]);
    m_bounce_hook_url_isSet = !json[QString("BounceHookUrl")].isNull() && m_bounce_hook_url_isValid;

    m_click_hook_url_isValid = ::OpenAPI::fromJsonValue(m_click_hook_url, json[QString("ClickHookUrl")]);
    m_click_hook_url_isSet = !json[QString("ClickHookUrl")].isNull() && m_click_hook_url_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_delivery_hook_url_isValid = ::OpenAPI::fromJsonValue(m_delivery_hook_url, json[QString("DeliveryHookUrl")]);
    m_delivery_hook_url_isSet = !json[QString("DeliveryHookUrl")].isNull() && m_delivery_hook_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_inbound_address_isValid = ::OpenAPI::fromJsonValue(m_inbound_address, json[QString("InboundAddress")]);
    m_inbound_address_isSet = !json[QString("InboundAddress")].isNull() && m_inbound_address_isValid;

    m_inbound_domain_isValid = ::OpenAPI::fromJsonValue(m_inbound_domain, json[QString("InboundDomain")]);
    m_inbound_domain_isSet = !json[QString("InboundDomain")].isNull() && m_inbound_domain_isValid;

    m_inbound_hash_isValid = ::OpenAPI::fromJsonValue(m_inbound_hash, json[QString("InboundHash")]);
    m_inbound_hash_isSet = !json[QString("InboundHash")].isNull() && m_inbound_hash_isValid;

    m_inbound_hook_url_isValid = ::OpenAPI::fromJsonValue(m_inbound_hook_url, json[QString("InboundHookUrl")]);
    m_inbound_hook_url_isSet = !json[QString("InboundHookUrl")].isNull() && m_inbound_hook_url_isValid;

    m_inbound_spam_threshold_isValid = ::OpenAPI::fromJsonValue(m_inbound_spam_threshold, json[QString("InboundSpamThreshold")]);
    m_inbound_spam_threshold_isSet = !json[QString("InboundSpamThreshold")].isNull() && m_inbound_spam_threshold_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_open_hook_url_isValid = ::OpenAPI::fromJsonValue(m_open_hook_url, json[QString("OpenHookUrl")]);
    m_open_hook_url_isSet = !json[QString("OpenHookUrl")].isNull() && m_open_hook_url_isValid;

    m_post_first_open_only_isValid = ::OpenAPI::fromJsonValue(m_post_first_open_only, json[QString("PostFirstOpenOnly")]);
    m_post_first_open_only_isSet = !json[QString("PostFirstOpenOnly")].isNull() && m_post_first_open_only_isValid;

    m_raw_email_enabled_isValid = ::OpenAPI::fromJsonValue(m_raw_email_enabled, json[QString("RawEmailEnabled")]);
    m_raw_email_enabled_isSet = !json[QString("RawEmailEnabled")].isNull() && m_raw_email_enabled_isValid;

    m_server_link_isValid = ::OpenAPI::fromJsonValue(m_server_link, json[QString("ServerLink")]);
    m_server_link_isSet = !json[QString("ServerLink")].isNull() && m_server_link_isValid;

    m_smtp_api_activated_isValid = ::OpenAPI::fromJsonValue(m_smtp_api_activated, json[QString("SmtpApiActivated")]);
    m_smtp_api_activated_isSet = !json[QString("SmtpApiActivated")].isNull() && m_smtp_api_activated_isValid;

    m_track_links_isValid = ::OpenAPI::fromJsonValue(m_track_links, json[QString("TrackLinks")]);
    m_track_links_isSet = !json[QString("TrackLinks")].isNull() && m_track_links_isValid;

    m_track_opens_isValid = ::OpenAPI::fromJsonValue(m_track_opens, json[QString("TrackOpens")]);
    m_track_opens_isSet = !json[QString("TrackOpens")].isNull() && m_track_opens_isValid;
}

QString OAIExtendedServerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedServerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_api_tokens.size() > 0) {
        obj.insert(QString("ApiTokens"), ::OpenAPI::toJsonValue(m_api_tokens));
    }
    if (m_bounce_hook_url_isSet) {
        obj.insert(QString("BounceHookUrl"), ::OpenAPI::toJsonValue(m_bounce_hook_url));
    }
    if (m_click_hook_url_isSet) {
        obj.insert(QString("ClickHookUrl"), ::OpenAPI::toJsonValue(m_click_hook_url));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_delivery_hook_url_isSet) {
        obj.insert(QString("DeliveryHookUrl"), ::OpenAPI::toJsonValue(m_delivery_hook_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbound_address_isSet) {
        obj.insert(QString("InboundAddress"), ::OpenAPI::toJsonValue(m_inbound_address));
    }
    if (m_inbound_domain_isSet) {
        obj.insert(QString("InboundDomain"), ::OpenAPI::toJsonValue(m_inbound_domain));
    }
    if (m_inbound_hash_isSet) {
        obj.insert(QString("InboundHash"), ::OpenAPI::toJsonValue(m_inbound_hash));
    }
    if (m_inbound_hook_url_isSet) {
        obj.insert(QString("InboundHookUrl"), ::OpenAPI::toJsonValue(m_inbound_hook_url));
    }
    if (m_inbound_spam_threshold_isSet) {
        obj.insert(QString("InboundSpamThreshold"), ::OpenAPI::toJsonValue(m_inbound_spam_threshold));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_hook_url_isSet) {
        obj.insert(QString("OpenHookUrl"), ::OpenAPI::toJsonValue(m_open_hook_url));
    }
    if (m_post_first_open_only_isSet) {
        obj.insert(QString("PostFirstOpenOnly"), ::OpenAPI::toJsonValue(m_post_first_open_only));
    }
    if (m_raw_email_enabled_isSet) {
        obj.insert(QString("RawEmailEnabled"), ::OpenAPI::toJsonValue(m_raw_email_enabled));
    }
    if (m_server_link_isSet) {
        obj.insert(QString("ServerLink"), ::OpenAPI::toJsonValue(m_server_link));
    }
    if (m_smtp_api_activated_isSet) {
        obj.insert(QString("SmtpApiActivated"), ::OpenAPI::toJsonValue(m_smtp_api_activated));
    }
    if (m_track_links_isSet) {
        obj.insert(QString("TrackLinks"), ::OpenAPI::toJsonValue(m_track_links));
    }
    if (m_track_opens_isSet) {
        obj.insert(QString("TrackOpens"), ::OpenAPI::toJsonValue(m_track_opens));
    }
    return obj;
}

QList<QString> OAIExtendedServerInfo::getApiTokens() const {
    return m_api_tokens;
}
void OAIExtendedServerInfo::setApiTokens(const QList<QString> &api_tokens) {
    m_api_tokens = api_tokens;
    m_api_tokens_isSet = true;
}

bool OAIExtendedServerInfo::is_api_tokens_Set() const{
    return m_api_tokens_isSet;
}

bool OAIExtendedServerInfo::is_api_tokens_Valid() const{
    return m_api_tokens_isValid;
}

QString OAIExtendedServerInfo::getBounceHookUrl() const {
    return m_bounce_hook_url;
}
void OAIExtendedServerInfo::setBounceHookUrl(const QString &bounce_hook_url) {
    m_bounce_hook_url = bounce_hook_url;
    m_bounce_hook_url_isSet = true;
}

bool OAIExtendedServerInfo::is_bounce_hook_url_Set() const{
    return m_bounce_hook_url_isSet;
}

bool OAIExtendedServerInfo::is_bounce_hook_url_Valid() const{
    return m_bounce_hook_url_isValid;
}

QString OAIExtendedServerInfo::getClickHookUrl() const {
    return m_click_hook_url;
}
void OAIExtendedServerInfo::setClickHookUrl(const QString &click_hook_url) {
    m_click_hook_url = click_hook_url;
    m_click_hook_url_isSet = true;
}

bool OAIExtendedServerInfo::is_click_hook_url_Set() const{
    return m_click_hook_url_isSet;
}

bool OAIExtendedServerInfo::is_click_hook_url_Valid() const{
    return m_click_hook_url_isValid;
}

QString OAIExtendedServerInfo::getColor() const {
    return m_color;
}
void OAIExtendedServerInfo::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIExtendedServerInfo::is_color_Set() const{
    return m_color_isSet;
}

bool OAIExtendedServerInfo::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIExtendedServerInfo::getDeliveryHookUrl() const {
    return m_delivery_hook_url;
}
void OAIExtendedServerInfo::setDeliveryHookUrl(const QString &delivery_hook_url) {
    m_delivery_hook_url = delivery_hook_url;
    m_delivery_hook_url_isSet = true;
}

bool OAIExtendedServerInfo::is_delivery_hook_url_Set() const{
    return m_delivery_hook_url_isSet;
}

bool OAIExtendedServerInfo::is_delivery_hook_url_Valid() const{
    return m_delivery_hook_url_isValid;
}

qint32 OAIExtendedServerInfo::getId() const {
    return m_id;
}
void OAIExtendedServerInfo::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExtendedServerInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExtendedServerInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExtendedServerInfo::getInboundAddress() const {
    return m_inbound_address;
}
void OAIExtendedServerInfo::setInboundAddress(const QString &inbound_address) {
    m_inbound_address = inbound_address;
    m_inbound_address_isSet = true;
}

bool OAIExtendedServerInfo::is_inbound_address_Set() const{
    return m_inbound_address_isSet;
}

bool OAIExtendedServerInfo::is_inbound_address_Valid() const{
    return m_inbound_address_isValid;
}

QString OAIExtendedServerInfo::getInboundDomain() const {
    return m_inbound_domain;
}
void OAIExtendedServerInfo::setInboundDomain(const QString &inbound_domain) {
    m_inbound_domain = inbound_domain;
    m_inbound_domain_isSet = true;
}

bool OAIExtendedServerInfo::is_inbound_domain_Set() const{
    return m_inbound_domain_isSet;
}

bool OAIExtendedServerInfo::is_inbound_domain_Valid() const{
    return m_inbound_domain_isValid;
}

QString OAIExtendedServerInfo::getInboundHash() const {
    return m_inbound_hash;
}
void OAIExtendedServerInfo::setInboundHash(const QString &inbound_hash) {
    m_inbound_hash = inbound_hash;
    m_inbound_hash_isSet = true;
}

bool OAIExtendedServerInfo::is_inbound_hash_Set() const{
    return m_inbound_hash_isSet;
}

bool OAIExtendedServerInfo::is_inbound_hash_Valid() const{
    return m_inbound_hash_isValid;
}

QString OAIExtendedServerInfo::getInboundHookUrl() const {
    return m_inbound_hook_url;
}
void OAIExtendedServerInfo::setInboundHookUrl(const QString &inbound_hook_url) {
    m_inbound_hook_url = inbound_hook_url;
    m_inbound_hook_url_isSet = true;
}

bool OAIExtendedServerInfo::is_inbound_hook_url_Set() const{
    return m_inbound_hook_url_isSet;
}

bool OAIExtendedServerInfo::is_inbound_hook_url_Valid() const{
    return m_inbound_hook_url_isValid;
}

qint32 OAIExtendedServerInfo::getInboundSpamThreshold() const {
    return m_inbound_spam_threshold;
}
void OAIExtendedServerInfo::setInboundSpamThreshold(const qint32 &inbound_spam_threshold) {
    m_inbound_spam_threshold = inbound_spam_threshold;
    m_inbound_spam_threshold_isSet = true;
}

bool OAIExtendedServerInfo::is_inbound_spam_threshold_Set() const{
    return m_inbound_spam_threshold_isSet;
}

bool OAIExtendedServerInfo::is_inbound_spam_threshold_Valid() const{
    return m_inbound_spam_threshold_isValid;
}

QString OAIExtendedServerInfo::getName() const {
    return m_name;
}
void OAIExtendedServerInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExtendedServerInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExtendedServerInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExtendedServerInfo::getOpenHookUrl() const {
    return m_open_hook_url;
}
void OAIExtendedServerInfo::setOpenHookUrl(const QString &open_hook_url) {
    m_open_hook_url = open_hook_url;
    m_open_hook_url_isSet = true;
}

bool OAIExtendedServerInfo::is_open_hook_url_Set() const{
    return m_open_hook_url_isSet;
}

bool OAIExtendedServerInfo::is_open_hook_url_Valid() const{
    return m_open_hook_url_isValid;
}

bool OAIExtendedServerInfo::isPostFirstOpenOnly() const {
    return m_post_first_open_only;
}
void OAIExtendedServerInfo::setPostFirstOpenOnly(const bool &post_first_open_only) {
    m_post_first_open_only = post_first_open_only;
    m_post_first_open_only_isSet = true;
}

bool OAIExtendedServerInfo::is_post_first_open_only_Set() const{
    return m_post_first_open_only_isSet;
}

bool OAIExtendedServerInfo::is_post_first_open_only_Valid() const{
    return m_post_first_open_only_isValid;
}

bool OAIExtendedServerInfo::isRawEmailEnabled() const {
    return m_raw_email_enabled;
}
void OAIExtendedServerInfo::setRawEmailEnabled(const bool &raw_email_enabled) {
    m_raw_email_enabled = raw_email_enabled;
    m_raw_email_enabled_isSet = true;
}

bool OAIExtendedServerInfo::is_raw_email_enabled_Set() const{
    return m_raw_email_enabled_isSet;
}

bool OAIExtendedServerInfo::is_raw_email_enabled_Valid() const{
    return m_raw_email_enabled_isValid;
}

QString OAIExtendedServerInfo::getServerLink() const {
    return m_server_link;
}
void OAIExtendedServerInfo::setServerLink(const QString &server_link) {
    m_server_link = server_link;
    m_server_link_isSet = true;
}

bool OAIExtendedServerInfo::is_server_link_Set() const{
    return m_server_link_isSet;
}

bool OAIExtendedServerInfo::is_server_link_Valid() const{
    return m_server_link_isValid;
}

bool OAIExtendedServerInfo::isSmtpApiActivated() const {
    return m_smtp_api_activated;
}
void OAIExtendedServerInfo::setSmtpApiActivated(const bool &smtp_api_activated) {
    m_smtp_api_activated = smtp_api_activated;
    m_smtp_api_activated_isSet = true;
}

bool OAIExtendedServerInfo::is_smtp_api_activated_Set() const{
    return m_smtp_api_activated_isSet;
}

bool OAIExtendedServerInfo::is_smtp_api_activated_Valid() const{
    return m_smtp_api_activated_isValid;
}

QString OAIExtendedServerInfo::getTrackLinks() const {
    return m_track_links;
}
void OAIExtendedServerInfo::setTrackLinks(const QString &track_links) {
    m_track_links = track_links;
    m_track_links_isSet = true;
}

bool OAIExtendedServerInfo::is_track_links_Set() const{
    return m_track_links_isSet;
}

bool OAIExtendedServerInfo::is_track_links_Valid() const{
    return m_track_links_isValid;
}

bool OAIExtendedServerInfo::isTrackOpens() const {
    return m_track_opens;
}
void OAIExtendedServerInfo::setTrackOpens(const bool &track_opens) {
    m_track_opens = track_opens;
    m_track_opens_isSet = true;
}

bool OAIExtendedServerInfo::is_track_opens_Set() const{
    return m_track_opens_isSet;
}

bool OAIExtendedServerInfo::is_track_opens_Valid() const{
    return m_track_opens_isValid;
}

bool OAIExtendedServerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_spam_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_first_open_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_email_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_api_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_opens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedServerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
