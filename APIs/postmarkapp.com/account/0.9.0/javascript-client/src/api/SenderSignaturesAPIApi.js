/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SenderListingResults from '../model/SenderListingResults';
import SenderSignatureCreationModel from '../model/SenderSignatureCreationModel';
import SenderSignatureEditingModel from '../model/SenderSignatureEditingModel';
import SenderSignatureExtendedInformation from '../model/SenderSignatureExtendedInformation';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* SenderSignaturesAPI service.
* @module api/SenderSignaturesAPIApi
* @version 0.9.0
*/
export default class SenderSignaturesAPIApi {

    /**
    * Constructs a new SenderSignaturesAPIApi. 
    * @alias module:api/SenderSignaturesAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~createSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderSignatureExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Sender Signature
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/SenderSignatureCreationModel} [body] 
     * @param {module:api/SenderSignaturesAPIApi~createSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderSignatureExtendedInformation}
     */
    createSenderSignature(xPostmarkAccountToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling createSenderSignature");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SenderSignatureExtendedInformation;
      return this.apiClient.callApi(
        '/senders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~deleteSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Sender Signature
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature that should be deleted by the request.
     * @param {module:api/SenderSignaturesAPIApi~deleteSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    deleteSenderSignature(xPostmarkAccountToken, signatureid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling deleteSenderSignature");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling deleteSenderSignature");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/senders/{signatureid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~editSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderSignatureExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Sender Signature
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature that should be modified by the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/SenderSignatureEditingModel} [body] 
     * @param {module:api/SenderSignaturesAPIApi~editSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderSignatureExtendedInformation}
     */
    editSenderSignature(xPostmarkAccountToken, signatureid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling editSenderSignature");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling editSenderSignature");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SenderSignatureExtendedInformation;
      return this.apiClient.callApi(
        '/senders/{signatureid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~getSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderSignatureExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Sender Signature
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature that should be retrieved.
     * @param {module:api/SenderSignaturesAPIApi~getSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderSignatureExtendedInformation}
     */
    getSenderSignature(xPostmarkAccountToken, signatureid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling getSenderSignature");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling getSenderSignature");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SenderSignatureExtendedInformation;
      return this.apiClient.callApi(
        '/senders/{signatureid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSenderSignatures operation.
     * @callback module:api/SenderSignaturesAPIApi~listSenderSignaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderListingResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Sender Signatures
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} count Number of records to return per request. Max 500.
     * @param {Number} offset Number of records to skip
     * @param {module:api/SenderSignaturesAPIApi~listSenderSignaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderListingResults}
     */
    listSenderSignatures(xPostmarkAccountToken, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling listSenderSignatures");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling listSenderSignatures");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listSenderSignatures");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SenderListingResults;
      return this.apiClient.callApi(
        '/senders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNewDKIMKeyForSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~requestNewDKIMKeyForSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a new DKIM Key
     * Requests a new DKIM key to be created. Until the DNS entries are confirmed, the new values will be in the `DKIMPendingHost` and `DKIMPendingTextValue` fields. After the new DKIM value is verified in DNS, the pending values will migrate to `DKIMTextValue` and `DKIMPendingTextValue` and Postmark will begin to sign emails with the new DKIM key. 
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature for which a new DKIM Key should be generated.
     * @param {module:api/SenderSignaturesAPIApi~requestNewDKIMKeyForSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    requestNewDKIMKeyForSenderSignature(xPostmarkAccountToken, signatureid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling requestNewDKIMKeyForSenderSignature");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling requestNewDKIMKeyForSenderSignature");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/senders/{signatureid}/requestnewdkim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSPFVerificationForSenderSignature operation.
     * @callback module:api/SenderSignaturesAPIApi~requestSPFVerificationForSenderSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SenderSignatureExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request DNS Verification for SPF
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature for which SPF DNS records should be verified.
     * @param {module:api/SenderSignaturesAPIApi~requestSPFVerificationForSenderSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SenderSignatureExtendedInformation}
     */
    requestSPFVerificationForSenderSignature(xPostmarkAccountToken, signatureid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling requestSPFVerificationForSenderSignature");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling requestSPFVerificationForSenderSignature");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SenderSignatureExtendedInformation;
      return this.apiClient.callApi(
        '/senders/{signatureid}/verifyspf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendSenderSignatureConfirmationEmail operation.
     * @callback module:api/SenderSignaturesAPIApi~resendSenderSignatureConfirmationEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Signature Confirmation Email
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} signatureid The ID for the Sender Signature that should have its confirmation email resent.
     * @param {module:api/SenderSignaturesAPIApi~resendSenderSignatureConfirmationEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    resendSenderSignatureConfirmationEmail(xPostmarkAccountToken, signatureid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling resendSenderSignatureConfirmationEmail");
      }
      // verify the required parameter 'signatureid' is set
      if (signatureid === undefined || signatureid === null) {
        throw new Error("Missing the required parameter 'signatureid' when calling resendSenderSignatureConfirmationEmail");
      }

      let pathParams = {
        'signatureid': signatureid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/senders/{signatureid}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
