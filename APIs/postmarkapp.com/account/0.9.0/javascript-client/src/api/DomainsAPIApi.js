/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DKIMRotationResponse from '../model/DKIMRotationResponse';
import DomainCreationModel from '../model/DomainCreationModel';
import DomainEditingModel from '../model/DomainEditingModel';
import DomainExtendedInformation from '../model/DomainExtendedInformation';
import DomainListingResults from '../model/DomainListingResults';
import DomainSPFResult from '../model/DomainSPFResult';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* DomainsAPI service.
* @module api/DomainsAPIApi
* @version 0.9.0
*/
export default class DomainsAPIApi {

    /**
    * Constructs a new DomainsAPIApi. 
    * @alias module:api/DomainsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DomainsAPIApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Domain
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/DomainCreationModel} [body] 
     * @param {module:api/DomainsAPIApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainExtendedInformation}
     */
    createDomain(xPostmarkAccountToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling createDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainExtendedInformation;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DomainsAPIApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Domain
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain that should be deleted by the request.
     * @param {module:api/DomainsAPIApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    deleteDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling deleteDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling deleteDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/domains/{domainid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editDomain operation.
     * @callback module:api/DomainsAPIApi~editDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Domain
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain that should be modified by the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/DomainEditingModel} [body] 
     * @param {module:api/DomainsAPIApi~editDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainExtendedInformation}
     */
    editDomain(xPostmarkAccountToken, domainid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling editDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling editDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainExtendedInformation;
      return this.apiClient.callApi(
        '/domains/{domainid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomain operation.
     * @callback module:api/DomainsAPIApi~getDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Domain
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain that should be retrieved.
     * @param {module:api/DomainsAPIApi~getDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainExtendedInformation}
     */
    getDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling getDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling getDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainExtendedInformation;
      return this.apiClient.callApi(
        '/domains/{domainid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomains operation.
     * @callback module:api/DomainsAPIApi~listDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainListingResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Domains
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} count Number of records to return per request. Max 500.
     * @param {Number} offset Number of records to skip
     * @param {module:api/DomainsAPIApi~listDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainListingResults}
     */
    listDomains(xPostmarkAccountToken, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling listDomains");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling listDomains");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainListingResults;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDkimVerificationForDomain operation.
     * @callback module:api/DomainsAPIApi~requestDkimVerificationForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request DNS Verification for DKIM
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain for which DKIM DNS records should be verified.
     * @param {module:api/DomainsAPIApi~requestDkimVerificationForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainExtendedInformation}
     */
    requestDkimVerificationForDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling requestDkimVerificationForDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling requestDkimVerificationForDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainExtendedInformation;
      return this.apiClient.callApi(
        '/domains/{domainid}/verifydkim', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestReturnPathVerificationForDomain operation.
     * @callback module:api/DomainsAPIApi~requestReturnPathVerificationForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainExtendedInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request DNS Verification for Return-Path
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain for which Return-Path DNS records should be verified.
     * @param {module:api/DomainsAPIApi~requestReturnPathVerificationForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainExtendedInformation}
     */
    requestReturnPathVerificationForDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling requestReturnPathVerificationForDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling requestReturnPathVerificationForDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainExtendedInformation;
      return this.apiClient.callApi(
        '/domains/{domainid}/verifyreturnpath', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSPFVerificationForDomain operation.
     * @callback module:api/DomainsAPIApi~requestSPFVerificationForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainSPFResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request DNS Verification for SPF
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Domain for which SPF DNS records should be verified.
     * @param {module:api/DomainsAPIApi~requestSPFVerificationForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainSPFResult}
     */
    requestSPFVerificationForDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling requestSPFVerificationForDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling requestSPFVerificationForDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainSPFResult;
      return this.apiClient.callApi(
        '/domains/{domainid}/verifyspf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateDKIMKeyForDomain operation.
     * @callback module:api/DomainsAPIApi~rotateDKIMKeyForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DKIMRotationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate DKIM Key
     * Creates a new DKIM key to replace your current key. Until the DNS entries are confirmed, the new values will be in the `DKIMPendingHost` and `DKIMPendingTextValue` fields. After the new DKIM value is verified in DNS, the pending values will migrate to `DKIMTextValue` and `DKIMPendingTextValue` and Postmark will begin to sign emails with the new DKIM key. 
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} domainid The ID for the Sender Signature for which a new DKIM Key should be generated.
     * @param {module:api/DomainsAPIApi~rotateDKIMKeyForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DKIMRotationResponse}
     */
    rotateDKIMKeyForDomain(xPostmarkAccountToken, domainid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling rotateDKIMKeyForDomain");
      }
      // verify the required parameter 'domainid' is set
      if (domainid === undefined || domainid === null) {
        throw new Error("Missing the required parameter 'domainid' when calling rotateDKIMKeyForDomain");
      }

      let pathParams = {
        'domainid': domainid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DKIMRotationResponse;
      return this.apiClient.callApi(
        '/domains/{domainid}/rotatedkim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
