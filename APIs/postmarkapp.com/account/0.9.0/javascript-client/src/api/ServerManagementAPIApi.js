/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateServerPayload from '../model/CreateServerPayload';
import EditServerPayload from '../model/EditServerPayload';
import ExtendedServerInfo from '../model/ExtendedServerInfo';
import ServerListingResponse from '../model/ServerListingResponse';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* ServerManagementAPI service.
* @module api/ServerManagementAPIApi
* @version 0.9.0
*/
export default class ServerManagementAPIApi {

    /**
    * Constructs a new ServerManagementAPIApi. 
    * @alias module:api/ServerManagementAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createServer operation.
     * @callback module:api/ServerManagementAPIApi~createServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedServerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Server
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateServerPayload} [body] 
     * @param {module:api/ServerManagementAPIApi~createServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedServerInfo}
     */
    createServer(xPostmarkAccountToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling createServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtendedServerInfo;
      return this.apiClient.callApi(
        '/servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServer operation.
     * @callback module:api/ServerManagementAPIApi~deleteServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Server
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} serverid The ID of the Server that should be deleted.
     * @param {module:api/ServerManagementAPIApi~deleteServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServer(xPostmarkAccountToken, serverid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling deleteServer");
      }
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteServer");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editServerInformation operation.
     * @callback module:api/ServerManagementAPIApi~editServerInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedServerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a Server
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} serverid The ID of the Server to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditServerPayload} [body] 
     * @param {module:api/ServerManagementAPIApi~editServerInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedServerInfo}
     */
    editServerInformation(xPostmarkAccountToken, serverid, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling editServerInformation");
      }
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling editServerInformation");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtendedServerInfo;
      return this.apiClient.callApi(
        '/servers/{serverid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInformation operation.
     * @callback module:api/ServerManagementAPIApi~getServerInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendedServerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Server
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} serverid The ID of the Server to get.
     * @param {module:api/ServerManagementAPIApi~getServerInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendedServerInfo}
     */
    getServerInformation(xPostmarkAccountToken, serverid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling getServerInformation");
      }
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getServerInformation");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtendedServerInfo;
      return this.apiClient.callApi(
        '/servers/{serverid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServers operation.
     * @callback module:api/ServerManagementAPIApi~listServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerListingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List servers
     * @param {String} xPostmarkAccountToken The token associated with the Account on which this request will operate.
     * @param {Number} count Number of servers to return per request.
     * @param {Number} offset Number of servers to skip.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by a specific server name
     * @param {module:api/ServerManagementAPIApi~listServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerListingResponse}
     */
    listServers(xPostmarkAccountToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkAccountToken' is set
      if (xPostmarkAccountToken === undefined || xPostmarkAccountToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkAccountToken' when calling listServers");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling listServers");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listServers");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'name': opts['name']
      };
      let headerParams = {
        'X-Postmark-Account-Token': xPostmarkAccountToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerListingResponse;
      return this.apiClient.callApi(
        '/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
