/**
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SenderSignatureInformation model module.
 * @module model/SenderSignatureInformation
 * @version 0.9.0
 */
class SenderSignatureInformation {
    /**
     * Constructs a new <code>SenderSignatureInformation</code>.
     * 
     * @alias module:model/SenderSignatureInformation
     */
    constructor() { 
        
        SenderSignatureInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SenderSignatureInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SenderSignatureInformation} obj Optional instance to populate.
     * @return {module:model/SenderSignatureInformation} The populated <code>SenderSignatureInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SenderSignatureInformation();

            if (data.hasOwnProperty('Confirmed')) {
                obj['Confirmed'] = ApiClient.convertToType(data['Confirmed'], 'Boolean');
            }
            if (data.hasOwnProperty('Domain')) {
                obj['Domain'] = ApiClient.convertToType(data['Domain'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ReplyToEmailAddress')) {
                obj['ReplyToEmailAddress'] = ApiClient.convertToType(data['ReplyToEmailAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SenderSignatureInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SenderSignatureInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Domain'] && !(typeof data['Domain'] === 'string' || data['Domain'] instanceof String)) {
            throw new Error("Expected the field `Domain` to be a primitive type in the JSON string but got " + data['Domain']);
        }
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ReplyToEmailAddress'] && !(typeof data['ReplyToEmailAddress'] === 'string' || data['ReplyToEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `ReplyToEmailAddress` to be a primitive type in the JSON string but got " + data['ReplyToEmailAddress']);
        }

        return true;
    }


}



/**
 * @member {Boolean} Confirmed
 */
SenderSignatureInformation.prototype['Confirmed'] = undefined;

/**
 * @member {String} Domain
 */
SenderSignatureInformation.prototype['Domain'] = undefined;

/**
 * @member {String} EmailAddress
 */
SenderSignatureInformation.prototype['EmailAddress'] = undefined;

/**
 * @member {Number} ID
 */
SenderSignatureInformation.prototype['ID'] = undefined;

/**
 * @member {String} Name
 */
SenderSignatureInformation.prototype['Name'] = undefined;

/**
 * @member {String} ReplyToEmailAddress
 */
SenderSignatureInformation.prototype['ReplyToEmailAddress'] = undefined;






export default SenderSignatureInformation;

