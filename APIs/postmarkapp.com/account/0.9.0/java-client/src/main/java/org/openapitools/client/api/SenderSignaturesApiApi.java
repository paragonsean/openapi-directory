/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SenderListingResults;
import org.openapitools.client.model.SenderSignatureCreationModel;
import org.openapitools.client.model.SenderSignatureEditingModel;
import org.openapitools.client.model.SenderSignatureExtendedInformation;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SenderSignaturesApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SenderSignaturesApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SenderSignaturesApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSenderSignatureCall(String xPostmarkAccountToken, SenderSignatureCreationModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/senders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, SenderSignatureCreationModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling createSenderSignature(Async)");
        }

        return createSenderSignatureCall(xPostmarkAccountToken, body, _callback);

    }

    /**
     * Create a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return SenderSignatureExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SenderSignatureExtendedInformation createSenderSignature(String xPostmarkAccountToken, SenderSignatureCreationModel body) throws ApiException {
        ApiResponse<SenderSignatureExtendedInformation> localVarResp = createSenderSignatureWithHttpInfo(xPostmarkAccountToken, body);
        return localVarResp.getData();
    }

    /**
     * Create a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SenderSignatureExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SenderSignatureExtendedInformation> createSenderSignatureWithHttpInfo(String xPostmarkAccountToken, SenderSignatureCreationModel body) throws ApiException {
        okhttp3.Call localVarCall = createSenderSignatureValidateBeforeCall(xPostmarkAccountToken, body, null);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Sender Signature (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSenderSignatureAsync(String xPostmarkAccountToken, SenderSignatureCreationModel body, final ApiCallback<SenderSignatureExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSenderSignatureValidateBeforeCall(xPostmarkAccountToken, body, _callback);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be deleted by the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSenderSignatureCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling deleteSenderSignature(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling deleteSenderSignature(Async)");
        }

        return deleteSenderSignatureCall(xPostmarkAccountToken, signatureid, _callback);

    }

    /**
     * Delete a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be deleted by the request. (required)
     * @return StandardPostmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public StandardPostmarkResponse deleteSenderSignature(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        ApiResponse<StandardPostmarkResponse> localVarResp = deleteSenderSignatureWithHttpInfo(xPostmarkAccountToken, signatureid);
        return localVarResp.getData();
    }

    /**
     * Delete a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be deleted by the request. (required)
     * @return ApiResponse&lt;StandardPostmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardPostmarkResponse> deleteSenderSignatureWithHttpInfo(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        okhttp3.Call localVarCall = deleteSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Sender Signature (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be deleted by the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSenderSignatureAsync(String xPostmarkAccountToken, Integer signatureid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be modified by the request. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editSenderSignatureCall(String xPostmarkAccountToken, Integer signatureid, SenderSignatureEditingModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, SenderSignatureEditingModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling editSenderSignature(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling editSenderSignature(Async)");
        }

        return editSenderSignatureCall(xPostmarkAccountToken, signatureid, body, _callback);

    }

    /**
     * Update a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be modified by the request. (required)
     * @param body  (optional)
     * @return SenderSignatureExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SenderSignatureExtendedInformation editSenderSignature(String xPostmarkAccountToken, Integer signatureid, SenderSignatureEditingModel body) throws ApiException {
        ApiResponse<SenderSignatureExtendedInformation> localVarResp = editSenderSignatureWithHttpInfo(xPostmarkAccountToken, signatureid, body);
        return localVarResp.getData();
    }

    /**
     * Update a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be modified by the request. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SenderSignatureExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SenderSignatureExtendedInformation> editSenderSignatureWithHttpInfo(String xPostmarkAccountToken, Integer signatureid, SenderSignatureEditingModel body) throws ApiException {
        okhttp3.Call localVarCall = editSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, body, null);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Sender Signature (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be modified by the request. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editSenderSignatureAsync(String xPostmarkAccountToken, Integer signatureid, SenderSignatureEditingModel body, final ApiCallback<SenderSignatureExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = editSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, body, _callback);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSenderSignatureCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling getSenderSignature(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling getSenderSignature(Async)");
        }

        return getSenderSignatureCall(xPostmarkAccountToken, signatureid, _callback);

    }

    /**
     * Get a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be retrieved. (required)
     * @return SenderSignatureExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SenderSignatureExtendedInformation getSenderSignature(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        ApiResponse<SenderSignatureExtendedInformation> localVarResp = getSenderSignatureWithHttpInfo(xPostmarkAccountToken, signatureid);
        return localVarResp.getData();
    }

    /**
     * Get a Sender Signature
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be retrieved. (required)
     * @return ApiResponse&lt;SenderSignatureExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SenderSignatureExtendedInformation> getSenderSignatureWithHttpInfo(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        okhttp3.Call localVarCall = getSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, null);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Sender Signature (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSenderSignatureAsync(String xPostmarkAccountToken, Integer signatureid, final ApiCallback<SenderSignatureExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, _callback);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSenderSignatures
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSenderSignaturesCall(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSenderSignaturesValidateBeforeCall(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling listSenderSignatures(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listSenderSignatures(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listSenderSignatures(Async)");
        }

        return listSenderSignaturesCall(xPostmarkAccountToken, count, offset, _callback);

    }

    /**
     * List Sender Signatures
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @return SenderListingResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SenderListingResults listSenderSignatures(String xPostmarkAccountToken, Integer count, Integer offset) throws ApiException {
        ApiResponse<SenderListingResults> localVarResp = listSenderSignaturesWithHttpInfo(xPostmarkAccountToken, count, offset);
        return localVarResp.getData();
    }

    /**
     * List Sender Signatures
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @return ApiResponse&lt;SenderListingResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SenderListingResults> listSenderSignaturesWithHttpInfo(String xPostmarkAccountToken, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listSenderSignaturesValidateBeforeCall(xPostmarkAccountToken, count, offset, null);
        Type localVarReturnType = new TypeToken<SenderListingResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Sender Signatures (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSenderSignaturesAsync(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback<SenderListingResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSenderSignaturesValidateBeforeCall(xPostmarkAccountToken, count, offset, _callback);
        Type localVarReturnType = new TypeToken<SenderListingResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestNewDKIMKeyForSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestNewDKIMKeyForSenderSignatureCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}/requestnewdkim"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestNewDKIMKeyForSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling requestNewDKIMKeyForSenderSignature(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling requestNewDKIMKeyForSenderSignature(Async)");
        }

        return requestNewDKIMKeyForSenderSignatureCall(xPostmarkAccountToken, signatureid, _callback);

    }

    /**
     * Request a new DKIM Key
     * Requests a new DKIM key to be created. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @return StandardPostmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public StandardPostmarkResponse requestNewDKIMKeyForSenderSignature(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        ApiResponse<StandardPostmarkResponse> localVarResp = requestNewDKIMKeyForSenderSignatureWithHttpInfo(xPostmarkAccountToken, signatureid);
        return localVarResp.getData();
    }

    /**
     * Request a new DKIM Key
     * Requests a new DKIM key to be created. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @return ApiResponse&lt;StandardPostmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardPostmarkResponse> requestNewDKIMKeyForSenderSignatureWithHttpInfo(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        okhttp3.Call localVarCall = requestNewDKIMKeyForSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a new DKIM Key (asynchronously)
     * Requests a new DKIM key to be created. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestNewDKIMKeyForSenderSignatureAsync(String xPostmarkAccountToken, Integer signatureid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestNewDKIMKeyForSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSPFVerificationForSenderSignature
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which SPF DNS records should be verified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSPFVerificationForSenderSignatureCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}/verifyspf"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSPFVerificationForSenderSignatureValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling requestSPFVerificationForSenderSignature(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling requestSPFVerificationForSenderSignature(Async)");
        }

        return requestSPFVerificationForSenderSignatureCall(xPostmarkAccountToken, signatureid, _callback);

    }

    /**
     * Request DNS Verification for SPF
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which SPF DNS records should be verified. (required)
     * @return SenderSignatureExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SenderSignatureExtendedInformation requestSPFVerificationForSenderSignature(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        ApiResponse<SenderSignatureExtendedInformation> localVarResp = requestSPFVerificationForSenderSignatureWithHttpInfo(xPostmarkAccountToken, signatureid);
        return localVarResp.getData();
    }

    /**
     * Request DNS Verification for SPF
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which SPF DNS records should be verified. (required)
     * @return ApiResponse&lt;SenderSignatureExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SenderSignatureExtendedInformation> requestSPFVerificationForSenderSignatureWithHttpInfo(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        okhttp3.Call localVarCall = requestSPFVerificationForSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, null);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request DNS Verification for SPF (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature for which SPF DNS records should be verified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSPFVerificationForSenderSignatureAsync(String xPostmarkAccountToken, Integer signatureid, final ApiCallback<SenderSignatureExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSPFVerificationForSenderSignatureValidateBeforeCall(xPostmarkAccountToken, signatureid, _callback);
        Type localVarReturnType = new TypeToken<SenderSignatureExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendSenderSignatureConfirmationEmail
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should have its confirmation email resent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendSenderSignatureConfirmationEmailCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/senders/{signatureid}/resend"
            .replace("{" + "signatureid" + "}", localVarApiClient.escapeString(signatureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendSenderSignatureConfirmationEmailValidateBeforeCall(String xPostmarkAccountToken, Integer signatureid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling resendSenderSignatureConfirmationEmail(Async)");
        }

        // verify the required parameter 'signatureid' is set
        if (signatureid == null) {
            throw new ApiException("Missing the required parameter 'signatureid' when calling resendSenderSignatureConfirmationEmail(Async)");
        }

        return resendSenderSignatureConfirmationEmailCall(xPostmarkAccountToken, signatureid, _callback);

    }

    /**
     * Resend Signature Confirmation Email
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should have its confirmation email resent. (required)
     * @return StandardPostmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public StandardPostmarkResponse resendSenderSignatureConfirmationEmail(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        ApiResponse<StandardPostmarkResponse> localVarResp = resendSenderSignatureConfirmationEmailWithHttpInfo(xPostmarkAccountToken, signatureid);
        return localVarResp.getData();
    }

    /**
     * Resend Signature Confirmation Email
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should have its confirmation email resent. (required)
     * @return ApiResponse&lt;StandardPostmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardPostmarkResponse> resendSenderSignatureConfirmationEmailWithHttpInfo(String xPostmarkAccountToken, Integer signatureid) throws ApiException {
        okhttp3.Call localVarCall = resendSenderSignatureConfirmationEmailValidateBeforeCall(xPostmarkAccountToken, signatureid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Signature Confirmation Email (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param signatureid The ID for the Sender Signature that should have its confirmation email resent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendSenderSignatureConfirmationEmailAsync(String xPostmarkAccountToken, Integer signatureid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendSenderSignatureConfirmationEmailValidateBeforeCall(xPostmarkAccountToken, signatureid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
