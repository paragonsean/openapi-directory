/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DKIMRotationResponse;
import org.openapitools.client.model.DomainCreationModel;
import org.openapitools.client.model.DomainEditingModel;
import org.openapitools.client.model.DomainExtendedInformation;
import org.openapitools.client.model.DomainListingResults;
import org.openapitools.client.model.DomainSPFResult;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDomainCall(String xPostmarkAccountToken, DomainCreationModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDomainValidateBeforeCall(String xPostmarkAccountToken, DomainCreationModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling createDomain(Async)");
        }

        return createDomainCall(xPostmarkAccountToken, body, _callback);

    }

    /**
     * Create a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return DomainExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainExtendedInformation createDomain(String xPostmarkAccountToken, DomainCreationModel body) throws ApiException {
        ApiResponse<DomainExtendedInformation> localVarResp = createDomainWithHttpInfo(xPostmarkAccountToken, body);
        return localVarResp.getData();
    }

    /**
     * Create a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;DomainExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainExtendedInformation> createDomainWithHttpInfo(String xPostmarkAccountToken, DomainCreationModel body) throws ApiException {
        okhttp3.Call localVarCall = createDomainValidateBeforeCall(xPostmarkAccountToken, body, null);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Domain (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDomainAsync(String xPostmarkAccountToken, DomainCreationModel body, final ApiCallback<DomainExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDomainValidateBeforeCall(xPostmarkAccountToken, body, _callback);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be deleted by the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling deleteDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling deleteDomain(Async)");
        }

        return deleteDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Delete a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be deleted by the request. (required)
     * @return StandardPostmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public StandardPostmarkResponse deleteDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<StandardPostmarkResponse> localVarResp = deleteDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Delete a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be deleted by the request. (required)
     * @return ApiResponse&lt;StandardPostmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardPostmarkResponse> deleteDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Domain (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be deleted by the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be modified by the request. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editDomainCall(String xPostmarkAccountToken, Integer domainid, DomainEditingModel body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/domains/{domainid}"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, DomainEditingModel body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling editDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling editDomain(Async)");
        }

        return editDomainCall(xPostmarkAccountToken, domainid, body, _callback);

    }

    /**
     * Update a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be modified by the request. (required)
     * @param body  (optional)
     * @return DomainExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainExtendedInformation editDomain(String xPostmarkAccountToken, Integer domainid, DomainEditingModel body) throws ApiException {
        ApiResponse<DomainExtendedInformation> localVarResp = editDomainWithHttpInfo(xPostmarkAccountToken, domainid, body);
        return localVarResp.getData();
    }

    /**
     * Update a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be modified by the request. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;DomainExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainExtendedInformation> editDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid, DomainEditingModel body) throws ApiException {
        okhttp3.Call localVarCall = editDomainValidateBeforeCall(xPostmarkAccountToken, domainid, body, null);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Domain (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be modified by the request. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editDomainAsync(String xPostmarkAccountToken, Integer domainid, DomainEditingModel body, final ApiCallback<DomainExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = editDomainValidateBeforeCall(xPostmarkAccountToken, domainid, body, _callback);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling getDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling getDomain(Async)");
        }

        return getDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Get a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be retrieved. (required)
     * @return DomainExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainExtendedInformation getDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<DomainExtendedInformation> localVarResp = getDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Get a Domain
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be retrieved. (required)
     * @return ApiResponse&lt;DomainExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainExtendedInformation> getDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = getDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Domain (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain that should be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<DomainExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDomains
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDomainsCall(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDomainsValidateBeforeCall(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling listDomains(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listDomains(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listDomains(Async)");
        }

        return listDomainsCall(xPostmarkAccountToken, count, offset, _callback);

    }

    /**
     * List Domains
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @return DomainListingResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainListingResults listDomains(String xPostmarkAccountToken, Integer count, Integer offset) throws ApiException {
        ApiResponse<DomainListingResults> localVarResp = listDomainsWithHttpInfo(xPostmarkAccountToken, count, offset);
        return localVarResp.getData();
    }

    /**
     * List Domains
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @return ApiResponse&lt;DomainListingResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainListingResults> listDomainsWithHttpInfo(String xPostmarkAccountToken, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listDomainsValidateBeforeCall(xPostmarkAccountToken, count, offset, null);
        Type localVarReturnType = new TypeToken<DomainListingResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Domains (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of records to return per request. Max 500. (required)
     * @param offset Number of records to skip (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDomainsAsync(String xPostmarkAccountToken, Integer count, Integer offset, final ApiCallback<DomainListingResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDomainsValidateBeforeCall(xPostmarkAccountToken, count, offset, _callback);
        Type localVarReturnType = new TypeToken<DomainListingResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestDkimVerificationForDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which DKIM DNS records should be verified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestDkimVerificationForDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}/verifydkim"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestDkimVerificationForDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling requestDkimVerificationForDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling requestDkimVerificationForDomain(Async)");
        }

        return requestDkimVerificationForDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Request DNS Verification for DKIM
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which DKIM DNS records should be verified. (required)
     * @return DomainExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainExtendedInformation requestDkimVerificationForDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<DomainExtendedInformation> localVarResp = requestDkimVerificationForDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Request DNS Verification for DKIM
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which DKIM DNS records should be verified. (required)
     * @return ApiResponse&lt;DomainExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainExtendedInformation> requestDkimVerificationForDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = requestDkimVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request DNS Verification for DKIM (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which DKIM DNS records should be verified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestDkimVerificationForDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<DomainExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestDkimVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestReturnPathVerificationForDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which Return-Path DNS records should be verified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestReturnPathVerificationForDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}/verifyreturnpath"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestReturnPathVerificationForDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling requestReturnPathVerificationForDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling requestReturnPathVerificationForDomain(Async)");
        }

        return requestReturnPathVerificationForDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Request DNS Verification for Return-Path
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which Return-Path DNS records should be verified. (required)
     * @return DomainExtendedInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainExtendedInformation requestReturnPathVerificationForDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<DomainExtendedInformation> localVarResp = requestReturnPathVerificationForDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Request DNS Verification for Return-Path
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which Return-Path DNS records should be verified. (required)
     * @return ApiResponse&lt;DomainExtendedInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainExtendedInformation> requestReturnPathVerificationForDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = requestReturnPathVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request DNS Verification for Return-Path (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which Return-Path DNS records should be verified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestReturnPathVerificationForDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<DomainExtendedInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestReturnPathVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<DomainExtendedInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSPFVerificationForDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which SPF DNS records should be verified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSPFVerificationForDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}/verifyspf"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSPFVerificationForDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling requestSPFVerificationForDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling requestSPFVerificationForDomain(Async)");
        }

        return requestSPFVerificationForDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Request DNS Verification for SPF
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which SPF DNS records should be verified. (required)
     * @return DomainSPFResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DomainSPFResult requestSPFVerificationForDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<DomainSPFResult> localVarResp = requestSPFVerificationForDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Request DNS Verification for SPF
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which SPF DNS records should be verified. (required)
     * @return ApiResponse&lt;DomainSPFResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainSPFResult> requestSPFVerificationForDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = requestSPFVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<DomainSPFResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request DNS Verification for SPF (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Domain for which SPF DNS records should be verified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSPFVerificationForDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<DomainSPFResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSPFVerificationForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<DomainSPFResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateDKIMKeyForDomain
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateDKIMKeyForDomainCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domainid}/rotatedkim"
            .replace("{" + "domainid" + "}", localVarApiClient.escapeString(domainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateDKIMKeyForDomainValidateBeforeCall(String xPostmarkAccountToken, Integer domainid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling rotateDKIMKeyForDomain(Async)");
        }

        // verify the required parameter 'domainid' is set
        if (domainid == null) {
            throw new ApiException("Missing the required parameter 'domainid' when calling rotateDKIMKeyForDomain(Async)");
        }

        return rotateDKIMKeyForDomainCall(xPostmarkAccountToken, domainid, _callback);

    }

    /**
     * Rotate DKIM Key
     * Creates a new DKIM key to replace your current key. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @return DKIMRotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DKIMRotationResponse rotateDKIMKeyForDomain(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        ApiResponse<DKIMRotationResponse> localVarResp = rotateDKIMKeyForDomainWithHttpInfo(xPostmarkAccountToken, domainid);
        return localVarResp.getData();
    }

    /**
     * Rotate DKIM Key
     * Creates a new DKIM key to replace your current key. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @return ApiResponse&lt;DKIMRotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DKIMRotationResponse> rotateDKIMKeyForDomainWithHttpInfo(String xPostmarkAccountToken, Integer domainid) throws ApiException {
        okhttp3.Call localVarCall = rotateDKIMKeyForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, null);
        Type localVarReturnType = new TypeToken<DKIMRotationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate DKIM Key (asynchronously)
     * Creates a new DKIM key to replace your current key. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param domainid The ID for the Sender Signature for which a new DKIM Key should be generated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateDKIMKeyForDomainAsync(String xPostmarkAccountToken, Integer domainid, final ApiCallback<DKIMRotationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateDKIMKeyForDomainValidateBeforeCall(xPostmarkAccountToken, domainid, _callback);
        Type localVarReturnType = new TypeToken<DKIMRotationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
