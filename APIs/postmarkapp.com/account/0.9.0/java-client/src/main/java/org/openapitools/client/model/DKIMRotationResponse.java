/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:03.803506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DKIMRotationResponse {
  public static final String SERIALIZED_NAME_DK_I_M_HOST = "DKIMHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_HOST)
  private String dkIMHost;

  public static final String SERIALIZED_NAME_DK_I_M_PENDING_HOST = "DKIMPendingHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_PENDING_HOST)
  private String dkIMPendingHost;

  public static final String SERIALIZED_NAME_DK_I_M_PENDING_TEXT_VALUE = "DKIMPendingTextValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_PENDING_TEXT_VALUE)
  private String dkIMPendingTextValue;

  public static final String SERIALIZED_NAME_DK_I_M_REVOKED_HOST = "DKIMRevokedHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_REVOKED_HOST)
  private String dkIMRevokedHost;

  public static final String SERIALIZED_NAME_DK_I_M_REVOKED_TEXT_VALUE = "DKIMRevokedTextValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_REVOKED_TEXT_VALUE)
  private String dkIMRevokedTextValue;

  public static final String SERIALIZED_NAME_DK_I_M_TEST_VALUE = "DKIMTestValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_TEST_VALUE)
  private String dkIMTestValue;

  public static final String SERIALIZED_NAME_DK_I_M_UPDATE_STATUS = "DKIMUpdateStatus";
  @SerializedName(SERIALIZED_NAME_DK_I_M_UPDATE_STATUS)
  private String dkIMUpdateStatus;

  public static final String SERIALIZED_NAME_DK_I_M_VERIFIED = "DKIMVerified";
  @SerializedName(SERIALIZED_NAME_DK_I_M_VERIFIED)
  private Boolean dkIMVerified;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Long ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SAFE_TO_REMOVE_REVOKED_KEY_FROM_D_N_S = "SafeToRemoveRevokedKeyFromDNS";
  @SerializedName(SERIALIZED_NAME_SAFE_TO_REMOVE_REVOKED_KEY_FROM_D_N_S)
  private Boolean safeToRemoveRevokedKeyFromDNS;

  public static final String SERIALIZED_NAME_WEAK_D_K_I_M = "WeakDKIM";
  @SerializedName(SERIALIZED_NAME_WEAK_D_K_I_M)
  private Boolean weakDKIM;

  public DKIMRotationResponse() {
  }

  public DKIMRotationResponse dkIMHost(String dkIMHost) {
    this.dkIMHost = dkIMHost;
    return this;
  }

  /**
   * Get dkIMHost
   * @return dkIMHost
   */
  @javax.annotation.Nullable
  public String getDkIMHost() {
    return dkIMHost;
  }

  public void setDkIMHost(String dkIMHost) {
    this.dkIMHost = dkIMHost;
  }


  public DKIMRotationResponse dkIMPendingHost(String dkIMPendingHost) {
    this.dkIMPendingHost = dkIMPendingHost;
    return this;
  }

  /**
   * Get dkIMPendingHost
   * @return dkIMPendingHost
   */
  @javax.annotation.Nullable
  public String getDkIMPendingHost() {
    return dkIMPendingHost;
  }

  public void setDkIMPendingHost(String dkIMPendingHost) {
    this.dkIMPendingHost = dkIMPendingHost;
  }


  public DKIMRotationResponse dkIMPendingTextValue(String dkIMPendingTextValue) {
    this.dkIMPendingTextValue = dkIMPendingTextValue;
    return this;
  }

  /**
   * Get dkIMPendingTextValue
   * @return dkIMPendingTextValue
   */
  @javax.annotation.Nullable
  public String getDkIMPendingTextValue() {
    return dkIMPendingTextValue;
  }

  public void setDkIMPendingTextValue(String dkIMPendingTextValue) {
    this.dkIMPendingTextValue = dkIMPendingTextValue;
  }


  public DKIMRotationResponse dkIMRevokedHost(String dkIMRevokedHost) {
    this.dkIMRevokedHost = dkIMRevokedHost;
    return this;
  }

  /**
   * Get dkIMRevokedHost
   * @return dkIMRevokedHost
   */
  @javax.annotation.Nullable
  public String getDkIMRevokedHost() {
    return dkIMRevokedHost;
  }

  public void setDkIMRevokedHost(String dkIMRevokedHost) {
    this.dkIMRevokedHost = dkIMRevokedHost;
  }


  public DKIMRotationResponse dkIMRevokedTextValue(String dkIMRevokedTextValue) {
    this.dkIMRevokedTextValue = dkIMRevokedTextValue;
    return this;
  }

  /**
   * Get dkIMRevokedTextValue
   * @return dkIMRevokedTextValue
   */
  @javax.annotation.Nullable
  public String getDkIMRevokedTextValue() {
    return dkIMRevokedTextValue;
  }

  public void setDkIMRevokedTextValue(String dkIMRevokedTextValue) {
    this.dkIMRevokedTextValue = dkIMRevokedTextValue;
  }


  public DKIMRotationResponse dkIMTestValue(String dkIMTestValue) {
    this.dkIMTestValue = dkIMTestValue;
    return this;
  }

  /**
   * Get dkIMTestValue
   * @return dkIMTestValue
   */
  @javax.annotation.Nullable
  public String getDkIMTestValue() {
    return dkIMTestValue;
  }

  public void setDkIMTestValue(String dkIMTestValue) {
    this.dkIMTestValue = dkIMTestValue;
  }


  public DKIMRotationResponse dkIMUpdateStatus(String dkIMUpdateStatus) {
    this.dkIMUpdateStatus = dkIMUpdateStatus;
    return this;
  }

  /**
   * Get dkIMUpdateStatus
   * @return dkIMUpdateStatus
   */
  @javax.annotation.Nullable
  public String getDkIMUpdateStatus() {
    return dkIMUpdateStatus;
  }

  public void setDkIMUpdateStatus(String dkIMUpdateStatus) {
    this.dkIMUpdateStatus = dkIMUpdateStatus;
  }


  public DKIMRotationResponse dkIMVerified(Boolean dkIMVerified) {
    this.dkIMVerified = dkIMVerified;
    return this;
  }

  /**
   * Get dkIMVerified
   * @return dkIMVerified
   */
  @javax.annotation.Nullable
  public Boolean getDkIMVerified() {
    return dkIMVerified;
  }

  public void setDkIMVerified(Boolean dkIMVerified) {
    this.dkIMVerified = dkIMVerified;
  }


  public DKIMRotationResponse ID(Long ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public Long getID() {
    return ID;
  }

  public void setID(Long ID) {
    this.ID = ID;
  }


  public DKIMRotationResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DKIMRotationResponse safeToRemoveRevokedKeyFromDNS(Boolean safeToRemoveRevokedKeyFromDNS) {
    this.safeToRemoveRevokedKeyFromDNS = safeToRemoveRevokedKeyFromDNS;
    return this;
  }

  /**
   * Get safeToRemoveRevokedKeyFromDNS
   * @return safeToRemoveRevokedKeyFromDNS
   */
  @javax.annotation.Nullable
  public Boolean getSafeToRemoveRevokedKeyFromDNS() {
    return safeToRemoveRevokedKeyFromDNS;
  }

  public void setSafeToRemoveRevokedKeyFromDNS(Boolean safeToRemoveRevokedKeyFromDNS) {
    this.safeToRemoveRevokedKeyFromDNS = safeToRemoveRevokedKeyFromDNS;
  }


  public DKIMRotationResponse weakDKIM(Boolean weakDKIM) {
    this.weakDKIM = weakDKIM;
    return this;
  }

  /**
   * Get weakDKIM
   * @return weakDKIM
   */
  @javax.annotation.Nullable
  public Boolean getWeakDKIM() {
    return weakDKIM;
  }

  public void setWeakDKIM(Boolean weakDKIM) {
    this.weakDKIM = weakDKIM;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DKIMRotationResponse dkIMRotationResponse = (DKIMRotationResponse) o;
    return Objects.equals(this.dkIMHost, dkIMRotationResponse.dkIMHost) &&
        Objects.equals(this.dkIMPendingHost, dkIMRotationResponse.dkIMPendingHost) &&
        Objects.equals(this.dkIMPendingTextValue, dkIMRotationResponse.dkIMPendingTextValue) &&
        Objects.equals(this.dkIMRevokedHost, dkIMRotationResponse.dkIMRevokedHost) &&
        Objects.equals(this.dkIMRevokedTextValue, dkIMRotationResponse.dkIMRevokedTextValue) &&
        Objects.equals(this.dkIMTestValue, dkIMRotationResponse.dkIMTestValue) &&
        Objects.equals(this.dkIMUpdateStatus, dkIMRotationResponse.dkIMUpdateStatus) &&
        Objects.equals(this.dkIMVerified, dkIMRotationResponse.dkIMVerified) &&
        Objects.equals(this.ID, dkIMRotationResponse.ID) &&
        Objects.equals(this.name, dkIMRotationResponse.name) &&
        Objects.equals(this.safeToRemoveRevokedKeyFromDNS, dkIMRotationResponse.safeToRemoveRevokedKeyFromDNS) &&
        Objects.equals(this.weakDKIM, dkIMRotationResponse.weakDKIM);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dkIMHost, dkIMPendingHost, dkIMPendingTextValue, dkIMRevokedHost, dkIMRevokedTextValue, dkIMTestValue, dkIMUpdateStatus, dkIMVerified, ID, name, safeToRemoveRevokedKeyFromDNS, weakDKIM);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DKIMRotationResponse {\n");
    sb.append("    dkIMHost: ").append(toIndentedString(dkIMHost)).append("\n");
    sb.append("    dkIMPendingHost: ").append(toIndentedString(dkIMPendingHost)).append("\n");
    sb.append("    dkIMPendingTextValue: ").append(toIndentedString(dkIMPendingTextValue)).append("\n");
    sb.append("    dkIMRevokedHost: ").append(toIndentedString(dkIMRevokedHost)).append("\n");
    sb.append("    dkIMRevokedTextValue: ").append(toIndentedString(dkIMRevokedTextValue)).append("\n");
    sb.append("    dkIMTestValue: ").append(toIndentedString(dkIMTestValue)).append("\n");
    sb.append("    dkIMUpdateStatus: ").append(toIndentedString(dkIMUpdateStatus)).append("\n");
    sb.append("    dkIMVerified: ").append(toIndentedString(dkIMVerified)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    safeToRemoveRevokedKeyFromDNS: ").append(toIndentedString(safeToRemoveRevokedKeyFromDNS)).append("\n");
    sb.append("    weakDKIM: ").append(toIndentedString(weakDKIM)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DKIMHost");
    openapiFields.add("DKIMPendingHost");
    openapiFields.add("DKIMPendingTextValue");
    openapiFields.add("DKIMRevokedHost");
    openapiFields.add("DKIMRevokedTextValue");
    openapiFields.add("DKIMTestValue");
    openapiFields.add("DKIMUpdateStatus");
    openapiFields.add("DKIMVerified");
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("SafeToRemoveRevokedKeyFromDNS");
    openapiFields.add("WeakDKIM");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DKIMRotationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DKIMRotationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DKIMRotationResponse is not found in the empty JSON string", DKIMRotationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DKIMRotationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DKIMRotationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DKIMHost") != null && !jsonObj.get("DKIMHost").isJsonNull()) && !jsonObj.get("DKIMHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMHost").toString()));
      }
      if ((jsonObj.get("DKIMPendingHost") != null && !jsonObj.get("DKIMPendingHost").isJsonNull()) && !jsonObj.get("DKIMPendingHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMPendingHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMPendingHost").toString()));
      }
      if ((jsonObj.get("DKIMPendingTextValue") != null && !jsonObj.get("DKIMPendingTextValue").isJsonNull()) && !jsonObj.get("DKIMPendingTextValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMPendingTextValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMPendingTextValue").toString()));
      }
      if ((jsonObj.get("DKIMRevokedHost") != null && !jsonObj.get("DKIMRevokedHost").isJsonNull()) && !jsonObj.get("DKIMRevokedHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMRevokedHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMRevokedHost").toString()));
      }
      if ((jsonObj.get("DKIMRevokedTextValue") != null && !jsonObj.get("DKIMRevokedTextValue").isJsonNull()) && !jsonObj.get("DKIMRevokedTextValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMRevokedTextValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMRevokedTextValue").toString()));
      }
      if ((jsonObj.get("DKIMTestValue") != null && !jsonObj.get("DKIMTestValue").isJsonNull()) && !jsonObj.get("DKIMTestValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMTestValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMTestValue").toString()));
      }
      if ((jsonObj.get("DKIMUpdateStatus") != null && !jsonObj.get("DKIMUpdateStatus").isJsonNull()) && !jsonObj.get("DKIMUpdateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMUpdateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMUpdateStatus").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DKIMRotationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DKIMRotationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DKIMRotationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DKIMRotationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DKIMRotationResponse>() {
           @Override
           public void write(JsonWriter out, DKIMRotationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DKIMRotationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DKIMRotationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DKIMRotationResponse
   * @throws IOException if the JSON string is invalid with respect to DKIMRotationResponse
   */
  public static DKIMRotationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DKIMRotationResponse.class);
  }

  /**
   * Convert an instance of DKIMRotationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

