/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:03.803506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditServerPayload {
  public static final String SERIALIZED_NAME_BOUNCE_HOOK_URL = "BounceHookUrl";
  @SerializedName(SERIALIZED_NAME_BOUNCE_HOOK_URL)
  private String bounceHookUrl;

  public static final String SERIALIZED_NAME_CLICK_HOOK_URL = "ClickHookUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_HOOK_URL)
  private String clickHookUrl;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DELIVERY_HOOK_URL = "DeliveryHookUrl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_HOOK_URL)
  private String deliveryHookUrl;

  public static final String SERIALIZED_NAME_INBOUND_DOMAIN = "InboundDomain";
  @SerializedName(SERIALIZED_NAME_INBOUND_DOMAIN)
  private String inboundDomain;

  public static final String SERIALIZED_NAME_INBOUND_HOOK_URL = "InboundHookUrl";
  @SerializedName(SERIALIZED_NAME_INBOUND_HOOK_URL)
  private String inboundHookUrl;

  public static final String SERIALIZED_NAME_INBOUND_SPAM_THRESHOLD = "InboundSpamThreshold";
  @SerializedName(SERIALIZED_NAME_INBOUND_SPAM_THRESHOLD)
  private Integer inboundSpamThreshold;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_HOOK_URL = "OpenHookUrl";
  @SerializedName(SERIALIZED_NAME_OPEN_HOOK_URL)
  private String openHookUrl;

  public static final String SERIALIZED_NAME_POST_FIRST_OPEN_ONLY = "PostFirstOpenOnly";
  @SerializedName(SERIALIZED_NAME_POST_FIRST_OPEN_ONLY)
  private Boolean postFirstOpenOnly;

  public static final String SERIALIZED_NAME_RAW_EMAIL_ENABLED = "RawEmailEnabled";
  @SerializedName(SERIALIZED_NAME_RAW_EMAIL_ENABLED)
  private Boolean rawEmailEnabled;

  public static final String SERIALIZED_NAME_SMTP_API_ACTIVATED = "SmtpApiActivated";
  @SerializedName(SERIALIZED_NAME_SMTP_API_ACTIVATED)
  private Boolean smtpApiActivated;

  /**
   * Gets or Sets trackLinks
   */
  @JsonAdapter(TrackLinksEnum.Adapter.class)
  public enum TrackLinksEnum {
    NONE("None"),
    
    HTML_AND_TEXT_TRACKING("HtmlAndTextTracking"),
    
    HTML_ONLY_TRACKING("HtmlOnlyTracking"),
    
    TEXT_ONLY_TRACKING("TextOnlyTracking");

    private String value;

    TrackLinksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackLinksEnum fromValue(String value) {
      for (TrackLinksEnum b : TrackLinksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackLinksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackLinksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackLinksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackLinksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackLinksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACK_LINKS = "TrackLinks";
  @SerializedName(SERIALIZED_NAME_TRACK_LINKS)
  private TrackLinksEnum trackLinks;

  public static final String SERIALIZED_NAME_TRACK_OPENS = "TrackOpens";
  @SerializedName(SERIALIZED_NAME_TRACK_OPENS)
  private Boolean trackOpens;

  public EditServerPayload() {
  }

  public EditServerPayload bounceHookUrl(String bounceHookUrl) {
    this.bounceHookUrl = bounceHookUrl;
    return this;
  }

  /**
   * Get bounceHookUrl
   * @return bounceHookUrl
   */
  @javax.annotation.Nullable
  public String getBounceHookUrl() {
    return bounceHookUrl;
  }

  public void setBounceHookUrl(String bounceHookUrl) {
    this.bounceHookUrl = bounceHookUrl;
  }


  public EditServerPayload clickHookUrl(String clickHookUrl) {
    this.clickHookUrl = clickHookUrl;
    return this;
  }

  /**
   * Get clickHookUrl
   * @return clickHookUrl
   */
  @javax.annotation.Nullable
  public String getClickHookUrl() {
    return clickHookUrl;
  }

  public void setClickHookUrl(String clickHookUrl) {
    this.clickHookUrl = clickHookUrl;
  }


  public EditServerPayload color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public EditServerPayload deliveryHookUrl(String deliveryHookUrl) {
    this.deliveryHookUrl = deliveryHookUrl;
    return this;
  }

  /**
   * Get deliveryHookUrl
   * @return deliveryHookUrl
   */
  @javax.annotation.Nullable
  public String getDeliveryHookUrl() {
    return deliveryHookUrl;
  }

  public void setDeliveryHookUrl(String deliveryHookUrl) {
    this.deliveryHookUrl = deliveryHookUrl;
  }


  public EditServerPayload inboundDomain(String inboundDomain) {
    this.inboundDomain = inboundDomain;
    return this;
  }

  /**
   * Get inboundDomain
   * @return inboundDomain
   */
  @javax.annotation.Nullable
  public String getInboundDomain() {
    return inboundDomain;
  }

  public void setInboundDomain(String inboundDomain) {
    this.inboundDomain = inboundDomain;
  }


  public EditServerPayload inboundHookUrl(String inboundHookUrl) {
    this.inboundHookUrl = inboundHookUrl;
    return this;
  }

  /**
   * Get inboundHookUrl
   * @return inboundHookUrl
   */
  @javax.annotation.Nullable
  public String getInboundHookUrl() {
    return inboundHookUrl;
  }

  public void setInboundHookUrl(String inboundHookUrl) {
    this.inboundHookUrl = inboundHookUrl;
  }


  public EditServerPayload inboundSpamThreshold(Integer inboundSpamThreshold) {
    this.inboundSpamThreshold = inboundSpamThreshold;
    return this;
  }

  /**
   * Get inboundSpamThreshold
   * @return inboundSpamThreshold
   */
  @javax.annotation.Nullable
  public Integer getInboundSpamThreshold() {
    return inboundSpamThreshold;
  }

  public void setInboundSpamThreshold(Integer inboundSpamThreshold) {
    this.inboundSpamThreshold = inboundSpamThreshold;
  }


  public EditServerPayload name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EditServerPayload openHookUrl(String openHookUrl) {
    this.openHookUrl = openHookUrl;
    return this;
  }

  /**
   * Get openHookUrl
   * @return openHookUrl
   */
  @javax.annotation.Nullable
  public String getOpenHookUrl() {
    return openHookUrl;
  }

  public void setOpenHookUrl(String openHookUrl) {
    this.openHookUrl = openHookUrl;
  }


  public EditServerPayload postFirstOpenOnly(Boolean postFirstOpenOnly) {
    this.postFirstOpenOnly = postFirstOpenOnly;
    return this;
  }

  /**
   * Get postFirstOpenOnly
   * @return postFirstOpenOnly
   */
  @javax.annotation.Nullable
  public Boolean getPostFirstOpenOnly() {
    return postFirstOpenOnly;
  }

  public void setPostFirstOpenOnly(Boolean postFirstOpenOnly) {
    this.postFirstOpenOnly = postFirstOpenOnly;
  }


  public EditServerPayload rawEmailEnabled(Boolean rawEmailEnabled) {
    this.rawEmailEnabled = rawEmailEnabled;
    return this;
  }

  /**
   * Get rawEmailEnabled
   * @return rawEmailEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRawEmailEnabled() {
    return rawEmailEnabled;
  }

  public void setRawEmailEnabled(Boolean rawEmailEnabled) {
    this.rawEmailEnabled = rawEmailEnabled;
  }


  public EditServerPayload smtpApiActivated(Boolean smtpApiActivated) {
    this.smtpApiActivated = smtpApiActivated;
    return this;
  }

  /**
   * Get smtpApiActivated
   * @return smtpApiActivated
   */
  @javax.annotation.Nullable
  public Boolean getSmtpApiActivated() {
    return smtpApiActivated;
  }

  public void setSmtpApiActivated(Boolean smtpApiActivated) {
    this.smtpApiActivated = smtpApiActivated;
  }


  public EditServerPayload trackLinks(TrackLinksEnum trackLinks) {
    this.trackLinks = trackLinks;
    return this;
  }

  /**
   * Get trackLinks
   * @return trackLinks
   */
  @javax.annotation.Nullable
  public TrackLinksEnum getTrackLinks() {
    return trackLinks;
  }

  public void setTrackLinks(TrackLinksEnum trackLinks) {
    this.trackLinks = trackLinks;
  }


  public EditServerPayload trackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
    return this;
  }

  /**
   * Get trackOpens
   * @return trackOpens
   */
  @javax.annotation.Nullable
  public Boolean getTrackOpens() {
    return trackOpens;
  }

  public void setTrackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditServerPayload editServerPayload = (EditServerPayload) o;
    return Objects.equals(this.bounceHookUrl, editServerPayload.bounceHookUrl) &&
        Objects.equals(this.clickHookUrl, editServerPayload.clickHookUrl) &&
        Objects.equals(this.color, editServerPayload.color) &&
        Objects.equals(this.deliveryHookUrl, editServerPayload.deliveryHookUrl) &&
        Objects.equals(this.inboundDomain, editServerPayload.inboundDomain) &&
        Objects.equals(this.inboundHookUrl, editServerPayload.inboundHookUrl) &&
        Objects.equals(this.inboundSpamThreshold, editServerPayload.inboundSpamThreshold) &&
        Objects.equals(this.name, editServerPayload.name) &&
        Objects.equals(this.openHookUrl, editServerPayload.openHookUrl) &&
        Objects.equals(this.postFirstOpenOnly, editServerPayload.postFirstOpenOnly) &&
        Objects.equals(this.rawEmailEnabled, editServerPayload.rawEmailEnabled) &&
        Objects.equals(this.smtpApiActivated, editServerPayload.smtpApiActivated) &&
        Objects.equals(this.trackLinks, editServerPayload.trackLinks) &&
        Objects.equals(this.trackOpens, editServerPayload.trackOpens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bounceHookUrl, clickHookUrl, color, deliveryHookUrl, inboundDomain, inboundHookUrl, inboundSpamThreshold, name, openHookUrl, postFirstOpenOnly, rawEmailEnabled, smtpApiActivated, trackLinks, trackOpens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditServerPayload {\n");
    sb.append("    bounceHookUrl: ").append(toIndentedString(bounceHookUrl)).append("\n");
    sb.append("    clickHookUrl: ").append(toIndentedString(clickHookUrl)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    deliveryHookUrl: ").append(toIndentedString(deliveryHookUrl)).append("\n");
    sb.append("    inboundDomain: ").append(toIndentedString(inboundDomain)).append("\n");
    sb.append("    inboundHookUrl: ").append(toIndentedString(inboundHookUrl)).append("\n");
    sb.append("    inboundSpamThreshold: ").append(toIndentedString(inboundSpamThreshold)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openHookUrl: ").append(toIndentedString(openHookUrl)).append("\n");
    sb.append("    postFirstOpenOnly: ").append(toIndentedString(postFirstOpenOnly)).append("\n");
    sb.append("    rawEmailEnabled: ").append(toIndentedString(rawEmailEnabled)).append("\n");
    sb.append("    smtpApiActivated: ").append(toIndentedString(smtpApiActivated)).append("\n");
    sb.append("    trackLinks: ").append(toIndentedString(trackLinks)).append("\n");
    sb.append("    trackOpens: ").append(toIndentedString(trackOpens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BounceHookUrl");
    openapiFields.add("ClickHookUrl");
    openapiFields.add("Color");
    openapiFields.add("DeliveryHookUrl");
    openapiFields.add("InboundDomain");
    openapiFields.add("InboundHookUrl");
    openapiFields.add("InboundSpamThreshold");
    openapiFields.add("Name");
    openapiFields.add("OpenHookUrl");
    openapiFields.add("PostFirstOpenOnly");
    openapiFields.add("RawEmailEnabled");
    openapiFields.add("SmtpApiActivated");
    openapiFields.add("TrackLinks");
    openapiFields.add("TrackOpens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditServerPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditServerPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditServerPayload is not found in the empty JSON string", EditServerPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditServerPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditServerPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BounceHookUrl") != null && !jsonObj.get("BounceHookUrl").isJsonNull()) && !jsonObj.get("BounceHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BounceHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BounceHookUrl").toString()));
      }
      if ((jsonObj.get("ClickHookUrl") != null && !jsonObj.get("ClickHookUrl").isJsonNull()) && !jsonObj.get("ClickHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClickHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClickHookUrl").toString()));
      }
      if ((jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) && !jsonObj.get("Color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Color").toString()));
      }
      if ((jsonObj.get("DeliveryHookUrl") != null && !jsonObj.get("DeliveryHookUrl").isJsonNull()) && !jsonObj.get("DeliveryHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliveryHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeliveryHookUrl").toString()));
      }
      if ((jsonObj.get("InboundDomain") != null && !jsonObj.get("InboundDomain").isJsonNull()) && !jsonObj.get("InboundDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundDomain").toString()));
      }
      if ((jsonObj.get("InboundHookUrl") != null && !jsonObj.get("InboundHookUrl").isJsonNull()) && !jsonObj.get("InboundHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InboundHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InboundHookUrl").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OpenHookUrl") != null && !jsonObj.get("OpenHookUrl").isJsonNull()) && !jsonObj.get("OpenHookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenHookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenHookUrl").toString()));
      }
      if ((jsonObj.get("TrackLinks") != null && !jsonObj.get("TrackLinks").isJsonNull()) && !jsonObj.get("TrackLinks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackLinks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackLinks").toString()));
      }
      // validate the optional field `TrackLinks`
      if (jsonObj.get("TrackLinks") != null && !jsonObj.get("TrackLinks").isJsonNull()) {
        TrackLinksEnum.validateJsonElement(jsonObj.get("TrackLinks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditServerPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditServerPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditServerPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditServerPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<EditServerPayload>() {
           @Override
           public void write(JsonWriter out, EditServerPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditServerPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditServerPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditServerPayload
   * @throws IOException if the JSON string is invalid with respect to EditServerPayload
   */
  public static EditServerPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditServerPayload.class);
  }

  /**
   * Convert an instance of EditServerPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

