/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:03.803506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SenderSignatureExtendedInformation {
  public static final String SERIALIZED_NAME_CONFIRMED = "Confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_DK_I_M_HOST = "DKIMHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_HOST)
  private String dkIMHost;

  public static final String SERIALIZED_NAME_DK_I_M_PENDING_HOST = "DKIMPendingHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_PENDING_HOST)
  private String dkIMPendingHost;

  public static final String SERIALIZED_NAME_DK_I_M_PENDING_TEXT_VALUE = "DKIMPendingTextValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_PENDING_TEXT_VALUE)
  private String dkIMPendingTextValue;

  public static final String SERIALIZED_NAME_DK_I_M_REVOKED_HOST = "DKIMRevokedHost";
  @SerializedName(SERIALIZED_NAME_DK_I_M_REVOKED_HOST)
  private String dkIMRevokedHost;

  public static final String SERIALIZED_NAME_DK_I_M_REVOKED_TEXT_VALUE = "DKIMRevokedTextValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_REVOKED_TEXT_VALUE)
  private String dkIMRevokedTextValue;

  public static final String SERIALIZED_NAME_DK_I_M_TEST_VALUE = "DKIMTestValue";
  @SerializedName(SERIALIZED_NAME_DK_I_M_TEST_VALUE)
  private String dkIMTestValue;

  public static final String SERIALIZED_NAME_DK_I_M_UPDATE_STATUS = "DKIMUpdateStatus";
  @SerializedName(SERIALIZED_NAME_DK_I_M_UPDATE_STATUS)
  private String dkIMUpdateStatus;

  public static final String SERIALIZED_NAME_DK_I_M_VERIFIED = "DKIMVerified";
  @SerializedName(SERIALIZED_NAME_DK_I_M_VERIFIED)
  private Boolean dkIMVerified;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private Long ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPLY_TO_EMAIL_ADDRESS = "ReplyToEmailAddress";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_EMAIL_ADDRESS)
  private String replyToEmailAddress;

  public static final String SERIALIZED_NAME_RETURN_PATH_DOMAIN = "ReturnPathDomain";
  @SerializedName(SERIALIZED_NAME_RETURN_PATH_DOMAIN)
  private String returnPathDomain;

  public static final String SERIALIZED_NAME_RETURN_PATH_DOMAIN_C_N_A_M_E_VALUE = "ReturnPathDomainCNAMEValue";
  @SerializedName(SERIALIZED_NAME_RETURN_PATH_DOMAIN_C_N_A_M_E_VALUE)
  private String returnPathDomainCNAMEValue;

  public static final String SERIALIZED_NAME_RETURN_PATH_DOMAIN_VERIFIED = "ReturnPathDomainVerified";
  @SerializedName(SERIALIZED_NAME_RETURN_PATH_DOMAIN_VERIFIED)
  private Boolean returnPathDomainVerified;

  public static final String SERIALIZED_NAME_SP_F_HOST = "SPFHost";
  @SerializedName(SERIALIZED_NAME_SP_F_HOST)
  private String spFHost;

  public static final String SERIALIZED_NAME_SP_F_TEXT_VALUE = "SPFTextValue";
  @SerializedName(SERIALIZED_NAME_SP_F_TEXT_VALUE)
  private String spFTextValue;

  public static final String SERIALIZED_NAME_SP_F_VERIFIED = "SPFVerified";
  @SerializedName(SERIALIZED_NAME_SP_F_VERIFIED)
  private Boolean spFVerified;

  public static final String SERIALIZED_NAME_SAFE_TO_REMOVE_REVOKED_KEY_FROM_D_N_S = "SafeToRemoveRevokedKeyFromDNS";
  @SerializedName(SERIALIZED_NAME_SAFE_TO_REMOVE_REVOKED_KEY_FROM_D_N_S)
  private Boolean safeToRemoveRevokedKeyFromDNS;

  public static final String SERIALIZED_NAME_WEAK_D_K_I_M = "WeakDKIM";
  @SerializedName(SERIALIZED_NAME_WEAK_D_K_I_M)
  private Boolean weakDKIM;

  public SenderSignatureExtendedInformation() {
  }

  public SenderSignatureExtendedInformation confirmed(Boolean confirmed) {
    this.confirmed = confirmed;
    return this;
  }

  /**
   * Get confirmed
   * @return confirmed
   */
  @javax.annotation.Nullable
  public Boolean getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public SenderSignatureExtendedInformation dkIMHost(String dkIMHost) {
    this.dkIMHost = dkIMHost;
    return this;
  }

  /**
   * Get dkIMHost
   * @return dkIMHost
   */
  @javax.annotation.Nullable
  public String getDkIMHost() {
    return dkIMHost;
  }

  public void setDkIMHost(String dkIMHost) {
    this.dkIMHost = dkIMHost;
  }


  public SenderSignatureExtendedInformation dkIMPendingHost(String dkIMPendingHost) {
    this.dkIMPendingHost = dkIMPendingHost;
    return this;
  }

  /**
   * Get dkIMPendingHost
   * @return dkIMPendingHost
   */
  @javax.annotation.Nullable
  public String getDkIMPendingHost() {
    return dkIMPendingHost;
  }

  public void setDkIMPendingHost(String dkIMPendingHost) {
    this.dkIMPendingHost = dkIMPendingHost;
  }


  public SenderSignatureExtendedInformation dkIMPendingTextValue(String dkIMPendingTextValue) {
    this.dkIMPendingTextValue = dkIMPendingTextValue;
    return this;
  }

  /**
   * Get dkIMPendingTextValue
   * @return dkIMPendingTextValue
   */
  @javax.annotation.Nullable
  public String getDkIMPendingTextValue() {
    return dkIMPendingTextValue;
  }

  public void setDkIMPendingTextValue(String dkIMPendingTextValue) {
    this.dkIMPendingTextValue = dkIMPendingTextValue;
  }


  public SenderSignatureExtendedInformation dkIMRevokedHost(String dkIMRevokedHost) {
    this.dkIMRevokedHost = dkIMRevokedHost;
    return this;
  }

  /**
   * Get dkIMRevokedHost
   * @return dkIMRevokedHost
   */
  @javax.annotation.Nullable
  public String getDkIMRevokedHost() {
    return dkIMRevokedHost;
  }

  public void setDkIMRevokedHost(String dkIMRevokedHost) {
    this.dkIMRevokedHost = dkIMRevokedHost;
  }


  public SenderSignatureExtendedInformation dkIMRevokedTextValue(String dkIMRevokedTextValue) {
    this.dkIMRevokedTextValue = dkIMRevokedTextValue;
    return this;
  }

  /**
   * Get dkIMRevokedTextValue
   * @return dkIMRevokedTextValue
   */
  @javax.annotation.Nullable
  public String getDkIMRevokedTextValue() {
    return dkIMRevokedTextValue;
  }

  public void setDkIMRevokedTextValue(String dkIMRevokedTextValue) {
    this.dkIMRevokedTextValue = dkIMRevokedTextValue;
  }


  public SenderSignatureExtendedInformation dkIMTestValue(String dkIMTestValue) {
    this.dkIMTestValue = dkIMTestValue;
    return this;
  }

  /**
   * Get dkIMTestValue
   * @return dkIMTestValue
   */
  @javax.annotation.Nullable
  public String getDkIMTestValue() {
    return dkIMTestValue;
  }

  public void setDkIMTestValue(String dkIMTestValue) {
    this.dkIMTestValue = dkIMTestValue;
  }


  public SenderSignatureExtendedInformation dkIMUpdateStatus(String dkIMUpdateStatus) {
    this.dkIMUpdateStatus = dkIMUpdateStatus;
    return this;
  }

  /**
   * Get dkIMUpdateStatus
   * @return dkIMUpdateStatus
   */
  @javax.annotation.Nullable
  public String getDkIMUpdateStatus() {
    return dkIMUpdateStatus;
  }

  public void setDkIMUpdateStatus(String dkIMUpdateStatus) {
    this.dkIMUpdateStatus = dkIMUpdateStatus;
  }


  public SenderSignatureExtendedInformation dkIMVerified(Boolean dkIMVerified) {
    this.dkIMVerified = dkIMVerified;
    return this;
  }

  /**
   * Get dkIMVerified
   * @return dkIMVerified
   */
  @javax.annotation.Nullable
  public Boolean getDkIMVerified() {
    return dkIMVerified;
  }

  public void setDkIMVerified(Boolean dkIMVerified) {
    this.dkIMVerified = dkIMVerified;
  }


  public SenderSignatureExtendedInformation domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public SenderSignatureExtendedInformation emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public SenderSignatureExtendedInformation ID(Long ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public Long getID() {
    return ID;
  }

  public void setID(Long ID) {
    this.ID = ID;
  }


  public SenderSignatureExtendedInformation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SenderSignatureExtendedInformation replyToEmailAddress(String replyToEmailAddress) {
    this.replyToEmailAddress = replyToEmailAddress;
    return this;
  }

  /**
   * Get replyToEmailAddress
   * @return replyToEmailAddress
   */
  @javax.annotation.Nullable
  public String getReplyToEmailAddress() {
    return replyToEmailAddress;
  }

  public void setReplyToEmailAddress(String replyToEmailAddress) {
    this.replyToEmailAddress = replyToEmailAddress;
  }


  public SenderSignatureExtendedInformation returnPathDomain(String returnPathDomain) {
    this.returnPathDomain = returnPathDomain;
    return this;
  }

  /**
   * Get returnPathDomain
   * @return returnPathDomain
   */
  @javax.annotation.Nullable
  public String getReturnPathDomain() {
    return returnPathDomain;
  }

  public void setReturnPathDomain(String returnPathDomain) {
    this.returnPathDomain = returnPathDomain;
  }


  public SenderSignatureExtendedInformation returnPathDomainCNAMEValue(String returnPathDomainCNAMEValue) {
    this.returnPathDomainCNAMEValue = returnPathDomainCNAMEValue;
    return this;
  }

  /**
   * Get returnPathDomainCNAMEValue
   * @return returnPathDomainCNAMEValue
   */
  @javax.annotation.Nullable
  public String getReturnPathDomainCNAMEValue() {
    return returnPathDomainCNAMEValue;
  }

  public void setReturnPathDomainCNAMEValue(String returnPathDomainCNAMEValue) {
    this.returnPathDomainCNAMEValue = returnPathDomainCNAMEValue;
  }


  public SenderSignatureExtendedInformation returnPathDomainVerified(Boolean returnPathDomainVerified) {
    this.returnPathDomainVerified = returnPathDomainVerified;
    return this;
  }

  /**
   * Get returnPathDomainVerified
   * @return returnPathDomainVerified
   */
  @javax.annotation.Nullable
  public Boolean getReturnPathDomainVerified() {
    return returnPathDomainVerified;
  }

  public void setReturnPathDomainVerified(Boolean returnPathDomainVerified) {
    this.returnPathDomainVerified = returnPathDomainVerified;
  }


  public SenderSignatureExtendedInformation spFHost(String spFHost) {
    this.spFHost = spFHost;
    return this;
  }

  /**
   * Get spFHost
   * @return spFHost
   */
  @javax.annotation.Nullable
  public String getSpFHost() {
    return spFHost;
  }

  public void setSpFHost(String spFHost) {
    this.spFHost = spFHost;
  }


  public SenderSignatureExtendedInformation spFTextValue(String spFTextValue) {
    this.spFTextValue = spFTextValue;
    return this;
  }

  /**
   * Get spFTextValue
   * @return spFTextValue
   */
  @javax.annotation.Nullable
  public String getSpFTextValue() {
    return spFTextValue;
  }

  public void setSpFTextValue(String spFTextValue) {
    this.spFTextValue = spFTextValue;
  }


  public SenderSignatureExtendedInformation spFVerified(Boolean spFVerified) {
    this.spFVerified = spFVerified;
    return this;
  }

  /**
   * Get spFVerified
   * @return spFVerified
   */
  @javax.annotation.Nullable
  public Boolean getSpFVerified() {
    return spFVerified;
  }

  public void setSpFVerified(Boolean spFVerified) {
    this.spFVerified = spFVerified;
  }


  public SenderSignatureExtendedInformation safeToRemoveRevokedKeyFromDNS(Boolean safeToRemoveRevokedKeyFromDNS) {
    this.safeToRemoveRevokedKeyFromDNS = safeToRemoveRevokedKeyFromDNS;
    return this;
  }

  /**
   * Get safeToRemoveRevokedKeyFromDNS
   * @return safeToRemoveRevokedKeyFromDNS
   */
  @javax.annotation.Nullable
  public Boolean getSafeToRemoveRevokedKeyFromDNS() {
    return safeToRemoveRevokedKeyFromDNS;
  }

  public void setSafeToRemoveRevokedKeyFromDNS(Boolean safeToRemoveRevokedKeyFromDNS) {
    this.safeToRemoveRevokedKeyFromDNS = safeToRemoveRevokedKeyFromDNS;
  }


  public SenderSignatureExtendedInformation weakDKIM(Boolean weakDKIM) {
    this.weakDKIM = weakDKIM;
    return this;
  }

  /**
   * Get weakDKIM
   * @return weakDKIM
   */
  @javax.annotation.Nullable
  public Boolean getWeakDKIM() {
    return weakDKIM;
  }

  public void setWeakDKIM(Boolean weakDKIM) {
    this.weakDKIM = weakDKIM;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SenderSignatureExtendedInformation senderSignatureExtendedInformation = (SenderSignatureExtendedInformation) o;
    return Objects.equals(this.confirmed, senderSignatureExtendedInformation.confirmed) &&
        Objects.equals(this.dkIMHost, senderSignatureExtendedInformation.dkIMHost) &&
        Objects.equals(this.dkIMPendingHost, senderSignatureExtendedInformation.dkIMPendingHost) &&
        Objects.equals(this.dkIMPendingTextValue, senderSignatureExtendedInformation.dkIMPendingTextValue) &&
        Objects.equals(this.dkIMRevokedHost, senderSignatureExtendedInformation.dkIMRevokedHost) &&
        Objects.equals(this.dkIMRevokedTextValue, senderSignatureExtendedInformation.dkIMRevokedTextValue) &&
        Objects.equals(this.dkIMTestValue, senderSignatureExtendedInformation.dkIMTestValue) &&
        Objects.equals(this.dkIMUpdateStatus, senderSignatureExtendedInformation.dkIMUpdateStatus) &&
        Objects.equals(this.dkIMVerified, senderSignatureExtendedInformation.dkIMVerified) &&
        Objects.equals(this.domain, senderSignatureExtendedInformation.domain) &&
        Objects.equals(this.emailAddress, senderSignatureExtendedInformation.emailAddress) &&
        Objects.equals(this.ID, senderSignatureExtendedInformation.ID) &&
        Objects.equals(this.name, senderSignatureExtendedInformation.name) &&
        Objects.equals(this.replyToEmailAddress, senderSignatureExtendedInformation.replyToEmailAddress) &&
        Objects.equals(this.returnPathDomain, senderSignatureExtendedInformation.returnPathDomain) &&
        Objects.equals(this.returnPathDomainCNAMEValue, senderSignatureExtendedInformation.returnPathDomainCNAMEValue) &&
        Objects.equals(this.returnPathDomainVerified, senderSignatureExtendedInformation.returnPathDomainVerified) &&
        Objects.equals(this.spFHost, senderSignatureExtendedInformation.spFHost) &&
        Objects.equals(this.spFTextValue, senderSignatureExtendedInformation.spFTextValue) &&
        Objects.equals(this.spFVerified, senderSignatureExtendedInformation.spFVerified) &&
        Objects.equals(this.safeToRemoveRevokedKeyFromDNS, senderSignatureExtendedInformation.safeToRemoveRevokedKeyFromDNS) &&
        Objects.equals(this.weakDKIM, senderSignatureExtendedInformation.weakDKIM);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmed, dkIMHost, dkIMPendingHost, dkIMPendingTextValue, dkIMRevokedHost, dkIMRevokedTextValue, dkIMTestValue, dkIMUpdateStatus, dkIMVerified, domain, emailAddress, ID, name, replyToEmailAddress, returnPathDomain, returnPathDomainCNAMEValue, returnPathDomainVerified, spFHost, spFTextValue, spFVerified, safeToRemoveRevokedKeyFromDNS, weakDKIM);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SenderSignatureExtendedInformation {\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    dkIMHost: ").append(toIndentedString(dkIMHost)).append("\n");
    sb.append("    dkIMPendingHost: ").append(toIndentedString(dkIMPendingHost)).append("\n");
    sb.append("    dkIMPendingTextValue: ").append(toIndentedString(dkIMPendingTextValue)).append("\n");
    sb.append("    dkIMRevokedHost: ").append(toIndentedString(dkIMRevokedHost)).append("\n");
    sb.append("    dkIMRevokedTextValue: ").append(toIndentedString(dkIMRevokedTextValue)).append("\n");
    sb.append("    dkIMTestValue: ").append(toIndentedString(dkIMTestValue)).append("\n");
    sb.append("    dkIMUpdateStatus: ").append(toIndentedString(dkIMUpdateStatus)).append("\n");
    sb.append("    dkIMVerified: ").append(toIndentedString(dkIMVerified)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    replyToEmailAddress: ").append(toIndentedString(replyToEmailAddress)).append("\n");
    sb.append("    returnPathDomain: ").append(toIndentedString(returnPathDomain)).append("\n");
    sb.append("    returnPathDomainCNAMEValue: ").append(toIndentedString(returnPathDomainCNAMEValue)).append("\n");
    sb.append("    returnPathDomainVerified: ").append(toIndentedString(returnPathDomainVerified)).append("\n");
    sb.append("    spFHost: ").append(toIndentedString(spFHost)).append("\n");
    sb.append("    spFTextValue: ").append(toIndentedString(spFTextValue)).append("\n");
    sb.append("    spFVerified: ").append(toIndentedString(spFVerified)).append("\n");
    sb.append("    safeToRemoveRevokedKeyFromDNS: ").append(toIndentedString(safeToRemoveRevokedKeyFromDNS)).append("\n");
    sb.append("    weakDKIM: ").append(toIndentedString(weakDKIM)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Confirmed");
    openapiFields.add("DKIMHost");
    openapiFields.add("DKIMPendingHost");
    openapiFields.add("DKIMPendingTextValue");
    openapiFields.add("DKIMRevokedHost");
    openapiFields.add("DKIMRevokedTextValue");
    openapiFields.add("DKIMTestValue");
    openapiFields.add("DKIMUpdateStatus");
    openapiFields.add("DKIMVerified");
    openapiFields.add("Domain");
    openapiFields.add("EmailAddress");
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("ReplyToEmailAddress");
    openapiFields.add("ReturnPathDomain");
    openapiFields.add("ReturnPathDomainCNAMEValue");
    openapiFields.add("ReturnPathDomainVerified");
    openapiFields.add("SPFHost");
    openapiFields.add("SPFTextValue");
    openapiFields.add("SPFVerified");
    openapiFields.add("SafeToRemoveRevokedKeyFromDNS");
    openapiFields.add("WeakDKIM");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SenderSignatureExtendedInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SenderSignatureExtendedInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SenderSignatureExtendedInformation is not found in the empty JSON string", SenderSignatureExtendedInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SenderSignatureExtendedInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SenderSignatureExtendedInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DKIMHost") != null && !jsonObj.get("DKIMHost").isJsonNull()) && !jsonObj.get("DKIMHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMHost").toString()));
      }
      if ((jsonObj.get("DKIMPendingHost") != null && !jsonObj.get("DKIMPendingHost").isJsonNull()) && !jsonObj.get("DKIMPendingHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMPendingHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMPendingHost").toString()));
      }
      if ((jsonObj.get("DKIMPendingTextValue") != null && !jsonObj.get("DKIMPendingTextValue").isJsonNull()) && !jsonObj.get("DKIMPendingTextValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMPendingTextValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMPendingTextValue").toString()));
      }
      if ((jsonObj.get("DKIMRevokedHost") != null && !jsonObj.get("DKIMRevokedHost").isJsonNull()) && !jsonObj.get("DKIMRevokedHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMRevokedHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMRevokedHost").toString()));
      }
      if ((jsonObj.get("DKIMRevokedTextValue") != null && !jsonObj.get("DKIMRevokedTextValue").isJsonNull()) && !jsonObj.get("DKIMRevokedTextValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMRevokedTextValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMRevokedTextValue").toString()));
      }
      if ((jsonObj.get("DKIMTestValue") != null && !jsonObj.get("DKIMTestValue").isJsonNull()) && !jsonObj.get("DKIMTestValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMTestValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMTestValue").toString()));
      }
      if ((jsonObj.get("DKIMUpdateStatus") != null && !jsonObj.get("DKIMUpdateStatus").isJsonNull()) && !jsonObj.get("DKIMUpdateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DKIMUpdateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DKIMUpdateStatus").toString()));
      }
      if ((jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) && !jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
      if ((jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) && !jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ReplyToEmailAddress") != null && !jsonObj.get("ReplyToEmailAddress").isJsonNull()) && !jsonObj.get("ReplyToEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyToEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplyToEmailAddress").toString()));
      }
      if ((jsonObj.get("ReturnPathDomain") != null && !jsonObj.get("ReturnPathDomain").isJsonNull()) && !jsonObj.get("ReturnPathDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReturnPathDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReturnPathDomain").toString()));
      }
      if ((jsonObj.get("ReturnPathDomainCNAMEValue") != null && !jsonObj.get("ReturnPathDomainCNAMEValue").isJsonNull()) && !jsonObj.get("ReturnPathDomainCNAMEValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReturnPathDomainCNAMEValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReturnPathDomainCNAMEValue").toString()));
      }
      if ((jsonObj.get("SPFHost") != null && !jsonObj.get("SPFHost").isJsonNull()) && !jsonObj.get("SPFHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPFHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPFHost").toString()));
      }
      if ((jsonObj.get("SPFTextValue") != null && !jsonObj.get("SPFTextValue").isJsonNull()) && !jsonObj.get("SPFTextValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SPFTextValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SPFTextValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SenderSignatureExtendedInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SenderSignatureExtendedInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SenderSignatureExtendedInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SenderSignatureExtendedInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<SenderSignatureExtendedInformation>() {
           @Override
           public void write(JsonWriter out, SenderSignatureExtendedInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SenderSignatureExtendedInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SenderSignatureExtendedInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SenderSignatureExtendedInformation
   * @throws IOException if the JSON string is invalid with respect to SenderSignatureExtendedInformation
   */
  public static SenderSignatureExtendedInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SenderSignatureExtendedInformation.class);
  }

  /**
   * Convert an instance of SenderSignatureExtendedInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

