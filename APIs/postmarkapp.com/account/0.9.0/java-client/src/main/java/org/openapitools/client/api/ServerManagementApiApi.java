/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateServerPayload;
import org.openapitools.client.model.EditServerPayload;
import org.openapitools.client.model.ExtendedServerInfo;
import org.openapitools.client.model.ServerListingResponse;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerManagementApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServerManagementApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerManagementApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createServer
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServerCall(String xPostmarkAccountToken, CreateServerPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServerValidateBeforeCall(String xPostmarkAccountToken, CreateServerPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling createServer(Async)");
        }

        return createServerCall(xPostmarkAccountToken, body, _callback);

    }

    /**
     * Create a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return ExtendedServerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedServerInfo createServer(String xPostmarkAccountToken, CreateServerPayload body) throws ApiException {
        ApiResponse<ExtendedServerInfo> localVarResp = createServerWithHttpInfo(xPostmarkAccountToken, body);
        return localVarResp.getData();
    }

    /**
     * Create a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ExtendedServerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedServerInfo> createServerWithHttpInfo(String xPostmarkAccountToken, CreateServerPayload body) throws ApiException {
        okhttp3.Call localVarCall = createServerValidateBeforeCall(xPostmarkAccountToken, body, null);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Server (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServerAsync(String xPostmarkAccountToken, CreateServerPayload body, final ApiCallback<ExtendedServerInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServerValidateBeforeCall(xPostmarkAccountToken, body, _callback);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServer
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server that should be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerCall(String xPostmarkAccountToken, Integer serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServerValidateBeforeCall(String xPostmarkAccountToken, Integer serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling deleteServer(Async)");
        }

        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteServer(Async)");
        }

        return deleteServerCall(xPostmarkAccountToken, serverid, _callback);

    }

    /**
     * Delete a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server that should be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServer(String xPostmarkAccountToken, Integer serverid) throws ApiException {
        deleteServerWithHttpInfo(xPostmarkAccountToken, serverid);
    }

    /**
     * Delete a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server that should be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServerWithHttpInfo(String xPostmarkAccountToken, Integer serverid) throws ApiException {
        okhttp3.Call localVarCall = deleteServerValidateBeforeCall(xPostmarkAccountToken, serverid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Server (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server that should be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerAsync(String xPostmarkAccountToken, Integer serverid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServerValidateBeforeCall(xPostmarkAccountToken, serverid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editServerInformation
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to update. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editServerInformationCall(String xPostmarkAccountToken, Integer serverid, EditServerPayload body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/servers/{serverid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editServerInformationValidateBeforeCall(String xPostmarkAccountToken, Integer serverid, EditServerPayload body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling editServerInformation(Async)");
        }

        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling editServerInformation(Async)");
        }

        return editServerInformationCall(xPostmarkAccountToken, serverid, body, _callback);

    }

    /**
     * Edit a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to update. (required)
     * @param body  (optional)
     * @return ExtendedServerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedServerInfo editServerInformation(String xPostmarkAccountToken, Integer serverid, EditServerPayload body) throws ApiException {
        ApiResponse<ExtendedServerInfo> localVarResp = editServerInformationWithHttpInfo(xPostmarkAccountToken, serverid, body);
        return localVarResp.getData();
    }

    /**
     * Edit a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to update. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ExtendedServerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedServerInfo> editServerInformationWithHttpInfo(String xPostmarkAccountToken, Integer serverid, EditServerPayload body) throws ApiException {
        okhttp3.Call localVarCall = editServerInformationValidateBeforeCall(xPostmarkAccountToken, serverid, body, null);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a Server (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to update. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editServerInformationAsync(String xPostmarkAccountToken, Integer serverid, EditServerPayload body, final ApiCallback<ExtendedServerInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = editServerInformationValidateBeforeCall(xPostmarkAccountToken, serverid, body, _callback);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServerInformation
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerInformationCall(String xPostmarkAccountToken, Integer serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServerInformationValidateBeforeCall(String xPostmarkAccountToken, Integer serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling getServerInformation(Async)");
        }

        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getServerInformation(Async)");
        }

        return getServerInformationCall(xPostmarkAccountToken, serverid, _callback);

    }

    /**
     * Get a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to get. (required)
     * @return ExtendedServerInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedServerInfo getServerInformation(String xPostmarkAccountToken, Integer serverid) throws ApiException {
        ApiResponse<ExtendedServerInfo> localVarResp = getServerInformationWithHttpInfo(xPostmarkAccountToken, serverid);
        return localVarResp.getData();
    }

    /**
     * Get a Server
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to get. (required)
     * @return ApiResponse&lt;ExtendedServerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedServerInfo> getServerInformationWithHttpInfo(String xPostmarkAccountToken, Integer serverid) throws ApiException {
        okhttp3.Call localVarCall = getServerInformationValidateBeforeCall(xPostmarkAccountToken, serverid, null);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Server (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param serverid The ID of the Server to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerInformationAsync(String xPostmarkAccountToken, Integer serverid, final ApiCallback<ExtendedServerInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServerInformationValidateBeforeCall(xPostmarkAccountToken, serverid, _callback);
        Type localVarReturnType = new TypeToken<ExtendedServerInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServers
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of servers to return per request. (required)
     * @param offset Number of servers to skip. (required)
     * @param name Filter by a specific server name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServersCall(String xPostmarkAccountToken, Integer count, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xPostmarkAccountToken != null) {
            localVarHeaderParams.put("X-Postmark-Account-Token", localVarApiClient.parameterToString(xPostmarkAccountToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServersValidateBeforeCall(String xPostmarkAccountToken, Integer count, Integer offset, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkAccountToken' is set
        if (xPostmarkAccountToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkAccountToken' when calling listServers(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listServers(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listServers(Async)");
        }

        return listServersCall(xPostmarkAccountToken, count, offset, name, _callback);

    }

    /**
     * List servers
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of servers to return per request. (required)
     * @param offset Number of servers to skip. (required)
     * @param name Filter by a specific server name (optional)
     * @return ServerListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ServerListingResponse listServers(String xPostmarkAccountToken, Integer count, Integer offset, String name) throws ApiException {
        ApiResponse<ServerListingResponse> localVarResp = listServersWithHttpInfo(xPostmarkAccountToken, count, offset, name);
        return localVarResp.getData();
    }

    /**
     * List servers
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of servers to return per request. (required)
     * @param offset Number of servers to skip. (required)
     * @param name Filter by a specific server name (optional)
     * @return ApiResponse&lt;ServerListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerListingResponse> listServersWithHttpInfo(String xPostmarkAccountToken, Integer count, Integer offset, String name) throws ApiException {
        okhttp3.Call localVarCall = listServersValidateBeforeCall(xPostmarkAccountToken, count, offset, name, null);
        Type localVarReturnType = new TypeToken<ServerListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List servers (asynchronously)
     * 
     * @param xPostmarkAccountToken The token associated with the Account on which this request will operate. (required)
     * @param count Number of servers to return per request. (required)
     * @param offset Number of servers to skip. (required)
     * @param name Filter by a specific server name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServersAsync(String xPostmarkAccountToken, Integer count, Integer offset, String name, final ApiCallback<ServerListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServersValidateBeforeCall(xPostmarkAccountToken, count, offset, name, _callback);
        Type localVarReturnType = new TypeToken<ServerListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
