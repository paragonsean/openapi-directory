/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DKIMRotationResponse;
import org.openapitools.client.model.DomainCreationModel;
import org.openapitools.client.model.DomainEditingModel;
import org.openapitools.client.model.DomainExtendedInformation;
import org.openapitools.client.model.DomainListingResults;
import org.openapitools.client.model.DomainSPFResult;
import org.openapitools.client.model.StandardPostmarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApiApi
 */
@Disabled
public class DomainsApiApiTest {

    private final DomainsApiApi api = new DomainsApiApi();

    /**
     * Create a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        DomainCreationModel body = null;
        DomainExtendedInformation response = api.createDomain(xPostmarkAccountToken, body);
        // TODO: test validations
    }

    /**
     * Delete a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        StandardPostmarkResponse response = api.deleteDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

    /**
     * Update a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DomainEditingModel body = null;
        DomainExtendedInformation response = api.editDomain(xPostmarkAccountToken, domainid, body);
        // TODO: test validations
    }

    /**
     * Get a Domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DomainExtendedInformation response = api.getDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

    /**
     * List Domains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainsTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer count = null;
        Integer offset = null;
        DomainListingResults response = api.listDomains(xPostmarkAccountToken, count, offset);
        // TODO: test validations
    }

    /**
     * Request DNS Verification for DKIM
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestDkimVerificationForDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DomainExtendedInformation response = api.requestDkimVerificationForDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

    /**
     * Request DNS Verification for Return-Path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestReturnPathVerificationForDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DomainExtendedInformation response = api.requestReturnPathVerificationForDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

    /**
     * Request DNS Verification for SPF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSPFVerificationForDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DomainSPFResult response = api.requestSPFVerificationForDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

    /**
     * Rotate DKIM Key
     *
     * Creates a new DKIM key to replace your current key. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotateDKIMKeyForDomainTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer domainid = null;
        DKIMRotationResponse response = api.rotateDKIMKeyForDomain(xPostmarkAccountToken, domainid);
        // TODO: test validations
    }

}
