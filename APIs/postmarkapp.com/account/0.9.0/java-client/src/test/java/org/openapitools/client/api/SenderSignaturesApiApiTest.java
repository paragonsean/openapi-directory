/*
 * Postmark Account-level API
 * Postmark makes sending and receiving email incredibly easy. The Account-level API allows users to configure all Servers, Domains, and Sender Signatures associated with an Account. 
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SenderListingResults;
import org.openapitools.client.model.SenderSignatureCreationModel;
import org.openapitools.client.model.SenderSignatureEditingModel;
import org.openapitools.client.model.SenderSignatureExtendedInformation;
import org.openapitools.client.model.StandardPostmarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SenderSignaturesApiApi
 */
@Disabled
public class SenderSignaturesApiApiTest {

    private final SenderSignaturesApiApi api = new SenderSignaturesApiApi();

    /**
     * Create a Sender Signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        SenderSignatureCreationModel body = null;
        SenderSignatureExtendedInformation response = api.createSenderSignature(xPostmarkAccountToken, body);
        // TODO: test validations
    }

    /**
     * Delete a Sender Signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        StandardPostmarkResponse response = api.deleteSenderSignature(xPostmarkAccountToken, signatureid);
        // TODO: test validations
    }

    /**
     * Update a Sender Signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        SenderSignatureEditingModel body = null;
        SenderSignatureExtendedInformation response = api.editSenderSignature(xPostmarkAccountToken, signatureid, body);
        // TODO: test validations
    }

    /**
     * Get a Sender Signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        SenderSignatureExtendedInformation response = api.getSenderSignature(xPostmarkAccountToken, signatureid);
        // TODO: test validations
    }

    /**
     * List Sender Signatures
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSenderSignaturesTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer count = null;
        Integer offset = null;
        SenderListingResults response = api.listSenderSignatures(xPostmarkAccountToken, count, offset);
        // TODO: test validations
    }

    /**
     * Request a new DKIM Key
     *
     * Requests a new DKIM key to be created. Until the DNS entries are confirmed, the new values will be in the &#x60;DKIMPendingHost&#x60; and &#x60;DKIMPendingTextValue&#x60; fields. After the new DKIM value is verified in DNS, the pending values will migrate to &#x60;DKIMTextValue&#x60; and &#x60;DKIMPendingTextValue&#x60; and Postmark will begin to sign emails with the new DKIM key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestNewDKIMKeyForSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        StandardPostmarkResponse response = api.requestNewDKIMKeyForSenderSignature(xPostmarkAccountToken, signatureid);
        // TODO: test validations
    }

    /**
     * Request DNS Verification for SPF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSPFVerificationForSenderSignatureTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        SenderSignatureExtendedInformation response = api.requestSPFVerificationForSenderSignature(xPostmarkAccountToken, signatureid);
        // TODO: test validations
    }

    /**
     * Resend Signature Confirmation Email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendSenderSignatureConfirmationEmailTest() throws ApiException {
        String xPostmarkAccountToken = null;
        Integer signatureid = null;
        StandardPostmarkResponse response = api.resendSenderSignatureConfirmationEmail(xPostmarkAccountToken, signatureid);
        // TODO: test validations
    }

}
