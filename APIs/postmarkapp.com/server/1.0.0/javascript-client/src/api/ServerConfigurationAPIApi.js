/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditServerConfigurationRequest from '../model/EditServerConfigurationRequest';
import ServerConfigurationResponse from '../model/ServerConfigurationResponse';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* ServerConfigurationAPI service.
* @module api/ServerConfigurationAPIApi
* @version 1.0.0
*/
export default class ServerConfigurationAPIApi {

    /**
    * Constructs a new ServerConfigurationAPIApi. 
    * @alias module:api/ServerConfigurationAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the editCurrentServerConfiguration operation.
     * @callback module:api/ServerConfigurationAPIApi~editCurrentServerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Server Configuration
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditServerConfigurationRequest} [body] The settings that should be modified for the current server.
     * @param {module:api/ServerConfigurationAPIApi~editCurrentServerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerConfigurationResponse}
     */
    editCurrentServerConfiguration(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling editCurrentServerConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServerConfigurationResponse;
      return this.apiClient.callApi(
        '/server', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentServerConfiguration operation.
     * @callback module:api/ServerConfigurationAPIApi~getCurrentServerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Server Configuration
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:api/ServerConfigurationAPIApi~getCurrentServerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerConfigurationResponse}
     */
    getCurrentServerConfiguration(xPostmarkServerToken, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getCurrentServerConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerConfigurationResponse;
      return this.apiClient.callApi(
        '/server', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
