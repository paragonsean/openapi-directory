/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailWithTemplateRequest from '../model/EmailWithTemplateRequest';
import SendEmailRequest from '../model/SendEmailRequest';
import SendEmailResponse from '../model/SendEmailResponse';
import SendEmailTemplatedBatchRequest from '../model/SendEmailTemplatedBatchRequest';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* SendingAPI service.
* @module api/SendingAPIApi
* @version 1.0.0
*/
export default class SendingAPIApi {

    /**
    * Constructs a new SendingAPIApi. 
    * @alias module:api/SendingAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sendEmail operation.
     * @callback module:api/SendingAPIApi~sendEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a single email
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendEmailRequest} [body] 
     * @param {module:api/SendingAPIApi~sendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    sendEmail(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailBatch operation.
     * @callback module:api/SendingAPIApi~sendEmailBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SendEmailResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of emails
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SendEmailRequest>} [body] 
     * @param {module:api/SendingAPIApi~sendEmailBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SendEmailResponse>}
     */
    sendEmailBatch(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SendEmailResponse];
      return this.apiClient.callApi(
        '/email/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailBatchWithTemplates operation.
     * @callback module:api/SendingAPIApi~sendEmailBatchWithTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SendEmailResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of email using templates.
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:model/SendEmailTemplatedBatchRequest} body 
     * @param {module:api/SendingAPIApi~sendEmailBatchWithTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SendEmailResponse>}
     */
    sendEmailBatchWithTemplates(xPostmarkServerToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailBatchWithTemplates");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendEmailBatchWithTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SendEmailResponse];
      return this.apiClient.callApi(
        '/email/batchWithTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailWithTemplate operation.
     * @callback module:api/SendingAPIApi~sendEmailWithTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email using a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:model/EmailWithTemplateRequest} body 
     * @param {module:api/SendingAPIApi~sendEmailWithTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    sendEmailWithTemplate(xPostmarkServerToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailWithTemplate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendEmailWithTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/email/withTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
