/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InboundMessageFullDetailsResponse from '../model/InboundMessageFullDetailsResponse';
import InboundSearchResponse from '../model/InboundSearchResponse';
import MessageClickSearchResponse from '../model/MessageClickSearchResponse';
import MessageOpenSearchResponse from '../model/MessageOpenSearchResponse';
import OutboundMessageDetailsResponse from '../model/OutboundMessageDetailsResponse';
import OutboundMessageDumpResponse from '../model/OutboundMessageDumpResponse';
import OutboundSearchResponse from '../model/OutboundSearchResponse';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* MessagesAPI service.
* @module api/MessagesAPIApi
* @version 1.0.0
*/
export default class MessagesAPIApi {

    /**
    * Constructs a new MessagesAPIApi. 
    * @alias module:api/MessagesAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bypassRulesForInboundMessage operation.
     * @callback module:api/MessagesAPIApi~bypassRulesForInboundMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bypass rules for a blocked inbound message
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the message which should bypass inbound rules.
     * @param {module:api/MessagesAPIApi~bypassRulesForInboundMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    bypassRulesForInboundMessage(xPostmarkServerToken, messageid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling bypassRulesForInboundMessage");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling bypassRulesForInboundMessage");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/messages/inbound/{messageid}/bypass', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClicksForSingleOutboundMessage operation.
     * @callback module:api/MessagesAPIApi~getClicksForSingleOutboundMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageClickSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Message Clicks
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the Outbound Message for which click statistics should be retrieved.
     * @param {Number} count Number of message clicks to return per request. Max 500.
     * @param {Number} offset Number of messages to skip.
     * @param {module:api/MessagesAPIApi~getClicksForSingleOutboundMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageClickSearchResponse}
     */
    getClicksForSingleOutboundMessage(xPostmarkServerToken, messageid, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getClicksForSingleOutboundMessage");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getClicksForSingleOutboundMessage");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getClicksForSingleOutboundMessage");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getClicksForSingleOutboundMessage");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
        'count': count,
        'offset': offset
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageClickSearchResponse;
      return this.apiClient.callApi(
        '/messages/outbound/clicks/{messageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInboundMessageDetails operation.
     * @callback module:api/MessagesAPIApi~getInboundMessageDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundMessageFullDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inbound message details
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the message for which to details will be retrieved.
     * @param {module:api/MessagesAPIApi~getInboundMessageDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundMessageFullDetailsResponse}
     */
    getInboundMessageDetails(xPostmarkServerToken, messageid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getInboundMessageDetails");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getInboundMessageDetails");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundMessageFullDetailsResponse;
      return this.apiClient.callApi(
        '/messages/inbound/{messageid}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpensForSingleOutboundMessage operation.
     * @callback module:api/MessagesAPIApi~getOpensForSingleOutboundMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageOpenSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Message Opens
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the Outbound Message for which open statistics should be retrieved.
     * @param {Number} count Number of message opens to return per request. Max 500.
     * @param {Number} offset Number of messages to skip.
     * @param {module:api/MessagesAPIApi~getOpensForSingleOutboundMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageOpenSearchResponse}
     */
    getOpensForSingleOutboundMessage(xPostmarkServerToken, messageid, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOpensForSingleOutboundMessage");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getOpensForSingleOutboundMessage");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getOpensForSingleOutboundMessage");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getOpensForSingleOutboundMessage");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
        'count': count,
        'offset': offset
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageOpenSearchResponse;
      return this.apiClient.callApi(
        '/messages/outbound/opens/{messageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundMessageDetails operation.
     * @callback module:api/MessagesAPIApi~getOutboundMessageDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundMessageDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Outbound message details
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the message for which to retrieve details.
     * @param {module:api/MessagesAPIApi~getOutboundMessageDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundMessageDetailsResponse}
     */
    getOutboundMessageDetails(xPostmarkServerToken, messageid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundMessageDetails");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getOutboundMessageDetails");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundMessageDetailsResponse;
      return this.apiClient.callApi(
        '/messages/outbound/{messageid}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundMessageDump operation.
     * @callback module:api/MessagesAPIApi~getOutboundMessageDumpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundMessageDumpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Outbound message dump
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the message for which to retrieve a dump.
     * @param {module:api/MessagesAPIApi~getOutboundMessageDumpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundMessageDumpResponse}
     */
    getOutboundMessageDump(xPostmarkServerToken, messageid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundMessageDump");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getOutboundMessageDump");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundMessageDumpResponse;
      return this.apiClient.callApi(
        '/messages/outbound/{messageid}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryInboundMessageProcessing operation.
     * @callback module:api/MessagesAPIApi~retryInboundMessageProcessingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry a failed inbound message for processing
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} messageid The ID of the inbound message on which we should retry processing.
     * @param {module:api/MessagesAPIApi~retryInboundMessageProcessingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    retryInboundMessageProcessing(xPostmarkServerToken, messageid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling retryInboundMessageProcessing");
      }
      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling retryInboundMessageProcessing");
      }

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/messages/inbound/{messageid}/retry', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchClicksForOutboundMessages operation.
     * @callback module:api/MessagesAPIApi~searchClicksForOutboundMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageClickSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clicks for a all messages
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of message clicks to return per request. Max 500.
     * @param {Number} offset Number of messages to skip
     * @param {Object} opts Optional parameters
     * @param {String} [recipient] Filter by To, Cc, Bcc
     * @param {String} [tag] Filter by tag
     * @param {String} [clientName] Filter by client name, i.e. Outlook, Gmail
     * @param {String} [clientCompany] Filter by company, i.e. Microsoft, Apple, Google
     * @param {String} [clientFamily] Filter by client family, i.e. OS X, Chrome
     * @param {String} [osName] Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
     * @param {String} [osFamily] Filter by kind of OS used without specific version, i.e. OS X, Windows
     * @param {String} [osCompany] Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
     * @param {String} [platform] Filter by platform, i.e. webmail, desktop, mobile
     * @param {String} [country] Filter by country messages were opened in, i.e. Denmark, Russia
     * @param {String} [region] Filter by full name of region messages were opened in, i.e. Moscow, New York
     * @param {String} [city] Filter by full name of region messages were opened in, i.e. Moscow, New York
     * @param {module:api/MessagesAPIApi~searchClicksForOutboundMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageClickSearchResponse}
     */
    searchClicksForOutboundMessages(xPostmarkServerToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling searchClicksForOutboundMessages");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling searchClicksForOutboundMessages");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchClicksForOutboundMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'recipient': opts['recipient'],
        'tag': opts['tag'],
        'client_name': opts['clientName'],
        'client_company': opts['clientCompany'],
        'client_family': opts['clientFamily'],
        'os_name': opts['osName'],
        'os_family': opts['osFamily'],
        'os_company': opts['osCompany'],
        'platform': opts['platform'],
        'country': opts['country'],
        'region': opts['region'],
        'city': opts['city']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageClickSearchResponse;
      return this.apiClient.callApi(
        '/messages/outbound/clicks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInboundMessages operation.
     * @callback module:api/MessagesAPIApi~searchInboundMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inbound message search
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of messages to return per request. Max 500.
     * @param {Number} offset Number of messages to skip
     * @param {Object} opts Optional parameters
     * @param {String} [recipient] Filter by the user who was receiving the email
     * @param {String} [fromemail] Filter by the sender email address
     * @param {String} [subject] Filter by email subject
     * @param {String} [mailboxhash] Filter by mailboxhash
     * @param {String} [tag] Filter by tag
     * @param {module:model/String} [status] Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
     * @param {Date} [todate] Filter messages up to the date specified. e.g. `2014-02-01`
     * @param {Date} [fromdate] Filter messages starting from the date specified. e.g. `2014-02-01`
     * @param {module:api/MessagesAPIApi~searchInboundMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundSearchResponse}
     */
    searchInboundMessages(xPostmarkServerToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling searchInboundMessages");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling searchInboundMessages");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchInboundMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'recipient': opts['recipient'],
        'fromemail': opts['fromemail'],
        'subject': opts['subject'],
        'mailboxhash': opts['mailboxhash'],
        'tag': opts['tag'],
        'status': opts['status'],
        'todate': opts['todate'],
        'fromdate': opts['fromdate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundSearchResponse;
      return this.apiClient.callApi(
        '/messages/inbound', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOpensForOutboundMessages operation.
     * @callback module:api/MessagesAPIApi~searchOpensForOutboundMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageOpenSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opens for all messages
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of message opens to return per request. Max 500.
     * @param {Number} offset Number of messages to skip
     * @param {Object} opts Optional parameters
     * @param {String} [recipient] Filter by To, Cc, Bcc
     * @param {String} [tag] Filter by tag
     * @param {String} [clientName] Filter by client name, i.e. Outlook, Gmail
     * @param {String} [clientCompany] Filter by company, i.e. Microsoft, Apple, Google
     * @param {String} [clientFamily] Filter by client family, i.e. OS X, Chrome
     * @param {String} [osName] Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
     * @param {String} [osFamily] Filter by kind of OS used without specific version, i.e. OS X, Windows
     * @param {String} [osCompany] Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
     * @param {String} [platform] Filter by platform, i.e. webmail, desktop, mobile
     * @param {String} [country] Filter by country messages were opened in, i.e. Denmark, Russia
     * @param {String} [region] Filter by full name of region messages were opened in, i.e. Moscow, New York
     * @param {String} [city] Filter by full name of region messages were opened in, i.e. Moscow, New York
     * @param {module:api/MessagesAPIApi~searchOpensForOutboundMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageOpenSearchResponse}
     */
    searchOpensForOutboundMessages(xPostmarkServerToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling searchOpensForOutboundMessages");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling searchOpensForOutboundMessages");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchOpensForOutboundMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'recipient': opts['recipient'],
        'tag': opts['tag'],
        'client_name': opts['clientName'],
        'client_company': opts['clientCompany'],
        'client_family': opts['clientFamily'],
        'os_name': opts['osName'],
        'os_family': opts['osFamily'],
        'os_company': opts['osCompany'],
        'platform': opts['platform'],
        'country': opts['country'],
        'region': opts['region'],
        'city': opts['city']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageOpenSearchResponse;
      return this.apiClient.callApi(
        '/messages/outbound/opens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOutboundMessages operation.
     * @callback module:api/MessagesAPIApi~searchOutboundMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Outbound message search
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of messages to return per request. Max 500.
     * @param {Number} offset Number of messages to skip
     * @param {Object} opts Optional parameters
     * @param {String} [recipient] Filter by the user who was receiving the email
     * @param {String} [fromemail] Filter by the sender email address
     * @param {String} [tag] Filter by tag
     * @param {module:model/String} [status] Filter by status (`queued` or `sent`)
     * @param {Date} [todate] Filter messages up to the date specified. e.g. `2014-02-01`
     * @param {Date} [fromdate] Filter messages starting from the date specified. e.g. `2014-02-01`
     * @param {module:api/MessagesAPIApi~searchOutboundMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundSearchResponse}
     */
    searchOutboundMessages(xPostmarkServerToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling searchOutboundMessages");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling searchOutboundMessages");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling searchOutboundMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'recipient': opts['recipient'],
        'fromemail': opts['fromemail'],
        'tag': opts['tag'],
        'status': opts['status'],
        'todate': opts['todate'],
        'fromdate': opts['fromdate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundSearchResponse;
      return this.apiClient.callApi(
        '/messages/outbound', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
