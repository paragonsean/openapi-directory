/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetBounceCounts200Response from '../model/GetBounceCounts200Response';
import GetOutboundOpenCounts200Response from '../model/GetOutboundOpenCounts200Response';
import GetOutboundOpenCountsByEmailClient200Response from '../model/GetOutboundOpenCountsByEmailClient200Response';
import GetOutboundOpenCountsByPlatform200Response from '../model/GetOutboundOpenCountsByPlatform200Response';
import GetSpamComplaints200Response from '../model/GetSpamComplaints200Response';
import GetTrackedEmailCounts200Response from '../model/GetTrackedEmailCounts200Response';
import OutboundOverviewStatsResponse from '../model/OutboundOverviewStatsResponse';
import SentCountsResponse from '../model/SentCountsResponse';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* StatsAPI service.
* @module api/StatsAPIApi
* @version 1.0.0
*/
export default class StatsAPIApi {

    /**
    * Constructs a new StatsAPIApi. 
    * @alias module:api/StatsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBounceCounts operation.
     * @callback module:api/StatsAPIApi~getBounceCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBounceCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bounce counts
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getBounceCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBounceCounts200Response}
     */
    getBounceCounts(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getBounceCounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBounceCounts200Response;
      return this.apiClient.callApi(
        '/stats/outbound/bounces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundClickCounts operation.
     * @callback module:api/StatsAPIApi~getOutboundClickCountsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get click counts
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundClickCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOutboundClickCounts(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stats/outbound/clicks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundClickCountsByBrowserFamily operation.
     * @callback module:api/StatsAPIApi~getOutboundClickCountsByBrowserFamilyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get browser usage by family
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundClickCountsByBrowserFamilyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOutboundClickCountsByBrowserFamily(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByBrowserFamily");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stats/outbound/clicks/browserfamilies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundClickCountsByLocation operation.
     * @callback module:api/StatsAPIApi~getOutboundClickCountsByLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get clicks by body location
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundClickCountsByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOutboundClickCountsByLocation(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByLocation");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stats/outbound/clicks/location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundClickCountsByPlatform operation.
     * @callback module:api/StatsAPIApi~getOutboundClickCountsByPlatformCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get browser plaform usage
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundClickCountsByPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOutboundClickCountsByPlatform(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByPlatform");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/stats/outbound/clicks/platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundOpenCounts operation.
     * @callback module:api/StatsAPIApi~getOutboundOpenCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutboundOpenCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email open counts
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundOpenCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutboundOpenCounts200Response}
     */
    getOutboundOpenCounts(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOutboundOpenCounts200Response;
      return this.apiClient.callApi(
        '/stats/outbound/opens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundOpenCountsByEmailClient operation.
     * @callback module:api/StatsAPIApi~getOutboundOpenCountsByEmailClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutboundOpenCountsByEmailClient200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email client usage
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundOpenCountsByEmailClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutboundOpenCountsByEmailClient200Response}
     */
    getOutboundOpenCountsByEmailClient(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCountsByEmailClient");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOutboundOpenCountsByEmailClient200Response;
      return this.apiClient.callApi(
        '/stats/outbound/opens/emailclients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundOpenCountsByPlatform operation.
     * @callback module:api/StatsAPIApi~getOutboundOpenCountsByPlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutboundOpenCountsByPlatform200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email platform usage
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundOpenCountsByPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutboundOpenCountsByPlatform200Response}
     */
    getOutboundOpenCountsByPlatform(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCountsByPlatform");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOutboundOpenCountsByPlatform200Response;
      return this.apiClient.callApi(
        '/stats/outbound/opens/platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutboundOverviewStatistics operation.
     * @callback module:api/StatsAPIApi~getOutboundOverviewStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundOverviewStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get outbound overview
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getOutboundOverviewStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundOverviewStatsResponse}
     */
    getOutboundOverviewStatistics(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOverviewStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundOverviewStatsResponse;
      return this.apiClient.callApi(
        '/stats/outbound', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSentCounts operation.
     * @callback module:api/StatsAPIApi~getSentCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentCountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sent counts
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getSentCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentCountsResponse}
     */
    getSentCounts(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getSentCounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SentCountsResponse;
      return this.apiClient.callApi(
        '/stats/outbound/sends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpamComplaints operation.
     * @callback module:api/StatsAPIApi~getSpamComplaintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSpamComplaints200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get spam complaints
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats up to the date specified. e.g. `2014-02-01`
     * @param {module:api/StatsAPIApi~getSpamComplaintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSpamComplaints200Response}
     */
    getSpamComplaints(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getSpamComplaints");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSpamComplaints200Response;
      return this.apiClient.callApi(
        '/stats/outbound/spam', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackedEmailCounts operation.
     * @callback module:api/StatsAPIApi~getTrackedEmailCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTrackedEmailCounts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracked email counts
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Filter by tag
     * @param {Date} [fromdate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {Date} [todate] Filter stats starting from the date specified. e.g. `2014-01-01`
     * @param {module:api/StatsAPIApi~getTrackedEmailCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTrackedEmailCounts200Response}
     */
    getTrackedEmailCounts(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getTrackedEmailCounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTrackedEmailCounts200Response;
      return this.apiClient.callApi(
        '/stats/outbound/tracked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
