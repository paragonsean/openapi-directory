/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BounceActivationResponse from '../model/BounceActivationResponse';
import BounceDumpResponse from '../model/BounceDumpResponse';
import BounceInfoResponse from '../model/BounceInfoResponse';
import BounceSearchResponse from '../model/BounceSearchResponse';
import DeliveryStatsResponse from '../model/DeliveryStatsResponse';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* BouncesAPI service.
* @module api/BouncesAPIApi
* @version 1.0.0
*/
export default class BouncesAPIApi {

    /**
    * Constructs a new BouncesAPIApi. 
    * @alias module:api/BouncesAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateBounce operation.
     * @callback module:api/BouncesAPIApi~activateBounceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BounceActivationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate a bounce
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} bounceid The ID of the Bounce to activate.
     * @param {module:api/BouncesAPIApi~activateBounceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BounceActivationResponse}
     */
    activateBounce(xPostmarkServerToken, bounceid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling activateBounce");
      }
      // verify the required parameter 'bounceid' is set
      if (bounceid === undefined || bounceid === null) {
        throw new Error("Missing the required parameter 'bounceid' when calling activateBounce");
      }

      let pathParams = {
        'bounceid': bounceid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BounceActivationResponse;
      return this.apiClient.callApi(
        '/bounces/{bounceid}/activate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bouncesBounceidDumpGet operation.
     * @callback module:api/BouncesAPIApi~bouncesBounceidDumpGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BounceDumpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bounce dump
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} bounceid The ID for the bounce dump to retrieve.
     * @param {module:api/BouncesAPIApi~bouncesBounceidDumpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BounceDumpResponse}
     */
    bouncesBounceidDumpGet(xPostmarkServerToken, bounceid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling bouncesBounceidDumpGet");
      }
      // verify the required parameter 'bounceid' is set
      if (bounceid === undefined || bounceid === null) {
        throw new Error("Missing the required parameter 'bounceid' when calling bouncesBounceidDumpGet");
      }

      let pathParams = {
        'bounceid': bounceid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BounceDumpResponse;
      return this.apiClient.callApi(
        '/bounces/{bounceid}/dump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBounces operation.
     * @callback module:api/BouncesAPIApi~getBouncesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BounceSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bounces
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of bounces to return per request. Max 500.
     * @param {Number} offset Number of bounces to skip.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Filter by type of bounce
     * @param {Boolean} [inactive] Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
     * @param {String} [emailFilter] Filter by email address
     * @param {String} [messageID] Filter by messageID
     * @param {String} [tag] Filter by tag
     * @param {Date} [todate] Filter messages up to the date specified. e.g. `2014-02-01`
     * @param {Date} [fromdate] Filter messages starting from the date specified. e.g. `2014-02-01`
     * @param {module:api/BouncesAPIApi~getBouncesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BounceSearchResponse}
     */
    getBounces(xPostmarkServerToken, count, offset, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getBounces");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getBounces");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getBounces");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset,
        'type': opts['type'],
        'inactive': opts['inactive'],
        'emailFilter': opts['emailFilter'],
        'messageID': opts['messageID'],
        'tag': opts['tag'],
        'todate': opts['todate'],
        'fromdate': opts['fromdate']
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BounceSearchResponse;
      return this.apiClient.callApi(
        '/bounces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryStats operation.
     * @callback module:api/BouncesAPIApi~getDeliveryStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeliveryStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get delivery stats
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:api/BouncesAPIApi~getDeliveryStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeliveryStatsResponse}
     */
    getDeliveryStats(xPostmarkServerToken, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getDeliveryStats");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeliveryStatsResponse;
      return this.apiClient.callApi(
        '/deliverystats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleBounce operation.
     * @callback module:api/BouncesAPIApi~getSingleBounceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BounceInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single bounce
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} bounceid The ID of the bounce to retrieve.
     * @param {module:api/BouncesAPIApi~getSingleBounceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BounceInfoResponse}
     */
    getSingleBounce(xPostmarkServerToken, bounceid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getSingleBounce");
      }
      // verify the required parameter 'bounceid' is set
      if (bounceid === undefined || bounceid === null) {
        throw new Error("Missing the required parameter 'bounceid' when calling getSingleBounce");
      }

      let pathParams = {
        'bounceid': bounceid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BounceInfoResponse;
      return this.apiClient.callApi(
        '/bounces/{bounceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
