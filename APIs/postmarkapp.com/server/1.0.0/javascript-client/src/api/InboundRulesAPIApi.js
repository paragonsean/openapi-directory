/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateInboundRule200Response from '../model/CreateInboundRule200Response';
import CreateInboundRuleRequest from '../model/CreateInboundRuleRequest';
import ListInboundRules200Response from '../model/ListInboundRules200Response';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';

/**
* InboundRulesAPI service.
* @module api/InboundRulesAPIApi
* @version 1.0.0
*/
export default class InboundRulesAPIApi {

    /**
    * Constructs a new InboundRulesAPIApi. 
    * @alias module:api/InboundRulesAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInboundRule operation.
     * @callback module:api/InboundRulesAPIApi~createInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInboundRule200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an inbound rule trigger
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateInboundRuleRequest} [body] 
     * @param {module:api/InboundRulesAPIApi~createInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInboundRule200Response}
     */
    createInboundRule(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling createInboundRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInboundRule200Response;
      return this.apiClient.callApi(
        '/triggers/inboundrules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInboundRule operation.
     * @callback module:api/InboundRulesAPIApi~deleteInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardPostmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single trigger
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} triggerid The ID of the Inbound Rule that should be deleted.
     * @param {module:api/InboundRulesAPIApi~deleteInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardPostmarkResponse}
     */
    deleteInboundRule(xPostmarkServerToken, triggerid, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling deleteInboundRule");
      }
      // verify the required parameter 'triggerid' is set
      if (triggerid === undefined || triggerid === null) {
        throw new Error("Missing the required parameter 'triggerid' when calling deleteInboundRule");
      }

      let pathParams = {
        'triggerid': triggerid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandardPostmarkResponse;
      return this.apiClient.callApi(
        '/triggers/inboundrules/{triggerid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInboundRules operation.
     * @callback module:api/InboundRulesAPIApi~listInboundRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInboundRules200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inbound rule triggers
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count Number of records to return per request.
     * @param {Number} offset Number of records to skip.
     * @param {module:api/InboundRulesAPIApi~listInboundRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInboundRules200Response}
     */
    listInboundRules(xPostmarkServerToken, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling listInboundRules");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling listInboundRules");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listInboundRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': count,
        'offset': offset
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInboundRules200Response;
      return this.apiClient.callApi(
        '/triggers/inboundrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
