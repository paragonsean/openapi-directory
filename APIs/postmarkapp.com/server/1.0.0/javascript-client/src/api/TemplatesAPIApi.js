/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTemplateRequest from '../model/CreateTemplateRequest';
import EditTemplateRequest from '../model/EditTemplateRequest';
import EmailWithTemplateRequest from '../model/EmailWithTemplateRequest';
import SendEmailResponse from '../model/SendEmailResponse';
import SendEmailTemplatedBatchRequest from '../model/SendEmailTemplatedBatchRequest';
import StandardPostmarkResponse from '../model/StandardPostmarkResponse';
import TemplateDetailResponse from '../model/TemplateDetailResponse';
import TemplateListingResponse from '../model/TemplateListingResponse';
import TemplateRecordResponse from '../model/TemplateRecordResponse';
import TemplateValidationRequest from '../model/TemplateValidationRequest';
import TemplateValidationResponse from '../model/TemplateValidationResponse';

/**
* TemplatesAPI service.
* @module api/TemplatesAPIApi
* @version 1.0.0
*/
export default class TemplatesAPIApi {

    /**
    * Constructs a new TemplatesAPIApi. 
    * @alias module:api/TemplatesAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTemplate operation.
     * @callback module:api/TemplatesAPIApi~deleteTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} templateIdOrAlias The 'TemplateID' or 'Alias' value for the Template you wish to delete.
     * @param {module:api/TemplatesAPIApi~deleteTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailResponse}
     */
    deleteTemplate(xPostmarkServerToken, templateIdOrAlias, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling deleteTemplate");
      }
      // verify the required parameter 'templateIdOrAlias' is set
      if (templateIdOrAlias === undefined || templateIdOrAlias === null) {
        throw new Error("Missing the required parameter 'templateIdOrAlias' when calling deleteTemplate");
      }

      let pathParams = {
        'templateIdOrAlias': templateIdOrAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateDetailResponse;
      return this.apiClient.callApi(
        '/templates/{templateIdOrAlias}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleTemplate operation.
     * @callback module:api/TemplatesAPIApi~getSingleTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} templateIdOrAlias The 'TemplateID' or 'Alias' value for the Template you wish to retrieve.
     * @param {module:api/TemplatesAPIApi~getSingleTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDetailResponse}
     */
    getSingleTemplate(xPostmarkServerToken, templateIdOrAlias, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling getSingleTemplate");
      }
      // verify the required parameter 'templateIdOrAlias' is set
      if (templateIdOrAlias === undefined || templateIdOrAlias === null) {
        throw new Error("Missing the required parameter 'templateIdOrAlias' when calling getSingleTemplate");
      }

      let pathParams = {
        'templateIdOrAlias': templateIdOrAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateDetailResponse;
      return this.apiClient.callApi(
        '/templates/{templateIdOrAlias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplates operation.
     * @callback module:api/TemplatesAPIApi~listTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateListingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Templates associated with this Server
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Number} count The number of Templates to return
     * @param {Number} offset The number of Templates to \"skip\" before returning results.
     * @param {module:api/TemplatesAPIApi~listTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateListingResponse}
     */
    listTemplates(xPostmarkServerToken, count, offset, callback) {
      let postBody = null;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling listTemplates");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling listTemplates");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'Count': count,
        'Offset': offset
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateListingResponse;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailBatchWithTemplates_0 operation.
     * @callback module:api/TemplatesAPIApi~sendEmailBatchWithTemplates_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SendEmailResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of email using templates.
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:model/SendEmailTemplatedBatchRequest} body 
     * @param {module:api/TemplatesAPIApi~sendEmailBatchWithTemplates_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SendEmailResponse>}
     */
    sendEmailBatchWithTemplates_0(xPostmarkServerToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailBatchWithTemplates_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendEmailBatchWithTemplates_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SendEmailResponse];
      return this.apiClient.callApi(
        '/email/batchWithTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailWithTemplate_0 operation.
     * @callback module:api/TemplatesAPIApi~sendEmailWithTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an email using a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:model/EmailWithTemplateRequest} body 
     * @param {module:api/TemplatesAPIApi~sendEmailWithTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    sendEmailWithTemplate_0(xPostmarkServerToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailWithTemplate_0");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendEmailWithTemplate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/email/withTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatesPost operation.
     * @callback module:api/TemplatesAPIApi~templatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {module:model/CreateTemplateRequest} body 
     * @param {module:api/TemplatesAPIApi~templatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateRecordResponse}
     */
    templatesPost(xPostmarkServerToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling templatesPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling templatesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateRecordResponse;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testTemplateContent operation.
     * @callback module:api/TemplatesAPIApi~testTemplateContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateValidationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Template Content
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateValidationRequest} [body] 
     * @param {module:api/TemplatesAPIApi~testTemplateContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateValidationResponse}
     */
    testTemplateContent(xPostmarkServerToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling testTemplateContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateValidationResponse;
      return this.apiClient.callApi(
        '/templates/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplate operation.
     * @callback module:api/TemplatesAPIApi~updateTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Template
     * @param {String} xPostmarkServerToken The token associated with the Server on which this request will operate.
     * @param {String} templateIdOrAlias The 'TemplateID' or 'Alias' value for the Template you wish to update.
     * @param {module:model/EditTemplateRequest} body 
     * @param {module:api/TemplatesAPIApi~updateTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateRecordResponse}
     */
    updateTemplate(xPostmarkServerToken, templateIdOrAlias, body, callback) {
      let postBody = body;
      // verify the required parameter 'xPostmarkServerToken' is set
      if (xPostmarkServerToken === undefined || xPostmarkServerToken === null) {
        throw new Error("Missing the required parameter 'xPostmarkServerToken' when calling updateTemplate");
      }
      // verify the required parameter 'templateIdOrAlias' is set
      if (templateIdOrAlias === undefined || templateIdOrAlias === null) {
        throw new Error("Missing the required parameter 'templateIdOrAlias' when calling updateTemplate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTemplate");
      }

      let pathParams = {
        'templateIdOrAlias': templateIdOrAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Postmark-Server-Token': xPostmarkServerToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateRecordResponse;
      return this.apiClient.callApi(
        '/templates/{templateIdOrAlias}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
