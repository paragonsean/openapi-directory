/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import EmailNameAddressPair from './EmailNameAddressPair';
import MessageEventDetails from './MessageEventDetails';

/**
 * The OutboundMessageDetailsResponse model module.
 * @module model/OutboundMessageDetailsResponse
 * @version 1.0.0
 */
class OutboundMessageDetailsResponse {
    /**
     * Constructs a new <code>OutboundMessageDetailsResponse</code>.
     * @alias module:model/OutboundMessageDetailsResponse
     */
    constructor() { 
        
        OutboundMessageDetailsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OutboundMessageDetailsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutboundMessageDetailsResponse} obj Optional instance to populate.
     * @return {module:model/OutboundMessageDetailsResponse} The populated <code>OutboundMessageDetailsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutboundMessageDetailsResponse();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('Bcc')) {
                obj['Bcc'] = ApiClient.convertToType(data['Bcc'], [EmailNameAddressPair]);
            }
            if (data.hasOwnProperty('Body')) {
                obj['Body'] = ApiClient.convertToType(data['Body'], 'String');
            }
            if (data.hasOwnProperty('Cc')) {
                obj['Cc'] = ApiClient.convertToType(data['Cc'], [EmailNameAddressPair]);
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('HtmlBody')) {
                obj['HtmlBody'] = ApiClient.convertToType(data['HtmlBody'], 'String');
            }
            if (data.hasOwnProperty('MessageEvents')) {
                obj['MessageEvents'] = ApiClient.convertToType(data['MessageEvents'], [MessageEventDetails]);
            }
            if (data.hasOwnProperty('MessageID')) {
                obj['MessageID'] = ApiClient.convertToType(data['MessageID'], 'String');
            }
            if (data.hasOwnProperty('ReceivedAt')) {
                obj['ReceivedAt'] = ApiClient.convertToType(data['ReceivedAt'], 'Date');
            }
            if (data.hasOwnProperty('Recipients')) {
                obj['Recipients'] = ApiClient.convertToType(data['Recipients'], ['String']);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('Tag')) {
                obj['Tag'] = ApiClient.convertToType(data['Tag'], 'String');
            }
            if (data.hasOwnProperty('TextBody')) {
                obj['TextBody'] = ApiClient.convertToType(data['TextBody'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], [EmailNameAddressPair]);
            }
            if (data.hasOwnProperty('TrackLinks')) {
                obj['TrackLinks'] = ApiClient.convertToType(data['TrackLinks'], 'String');
            }
            if (data.hasOwnProperty('TrackOpens')) {
                obj['TrackOpens'] = ApiClient.convertToType(data['TrackOpens'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutboundMessageDetailsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutboundMessageDetailsResponse</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        if (data['Bcc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Bcc'])) {
                throw new Error("Expected the field `Bcc` to be an array in the JSON data but got " + data['Bcc']);
            }
            // validate the optional field `Bcc` (array)
            for (const item of data['Bcc']) {
                EmailNameAddressPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Body'] && !(typeof data['Body'] === 'string' || data['Body'] instanceof String)) {
            throw new Error("Expected the field `Body` to be a primitive type in the JSON string but got " + data['Body']);
        }
        if (data['Cc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Cc'])) {
                throw new Error("Expected the field `Cc` to be an array in the JSON data but got " + data['Cc']);
            }
            // validate the optional field `Cc` (array)
            for (const item of data['Cc']) {
                EmailNameAddressPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['HtmlBody'] && !(typeof data['HtmlBody'] === 'string' || data['HtmlBody'] instanceof String)) {
            throw new Error("Expected the field `HtmlBody` to be a primitive type in the JSON string but got " + data['HtmlBody']);
        }
        if (data['MessageEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MessageEvents'])) {
                throw new Error("Expected the field `MessageEvents` to be an array in the JSON data but got " + data['MessageEvents']);
            }
            // validate the optional field `MessageEvents` (array)
            for (const item of data['MessageEvents']) {
                MessageEventDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['MessageID'] && !(typeof data['MessageID'] === 'string' || data['MessageID'] instanceof String)) {
            throw new Error("Expected the field `MessageID` to be a primitive type in the JSON string but got " + data['MessageID']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Recipients'])) {
            throw new Error("Expected the field `Recipients` to be an array in the JSON data but got " + data['Recipients']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['Tag'] && !(typeof data['Tag'] === 'string' || data['Tag'] instanceof String)) {
            throw new Error("Expected the field `Tag` to be a primitive type in the JSON string but got " + data['Tag']);
        }
        // ensure the json data is a string
        if (data['TextBody'] && !(typeof data['TextBody'] === 'string' || data['TextBody'] instanceof String)) {
            throw new Error("Expected the field `TextBody` to be a primitive type in the JSON string but got " + data['TextBody']);
        }
        if (data['To']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['To'])) {
                throw new Error("Expected the field `To` to be an array in the JSON data but got " + data['To']);
            }
            // validate the optional field `To` (array)
            for (const item of data['To']) {
                EmailNameAddressPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TrackLinks'] && !(typeof data['TrackLinks'] === 'string' || data['TrackLinks'] instanceof String)) {
            throw new Error("Expected the field `TrackLinks` to be a primitive type in the JSON string but got " + data['TrackLinks']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attachment>} Attachments
 */
OutboundMessageDetailsResponse.prototype['Attachments'] = undefined;

/**
 * @member {Array.<module:model/EmailNameAddressPair>} Bcc
 */
OutboundMessageDetailsResponse.prototype['Bcc'] = undefined;

/**
 * @member {String} Body
 */
OutboundMessageDetailsResponse.prototype['Body'] = undefined;

/**
 * @member {Array.<module:model/EmailNameAddressPair>} Cc
 */
OutboundMessageDetailsResponse.prototype['Cc'] = undefined;

/**
 * @member {String} From
 */
OutboundMessageDetailsResponse.prototype['From'] = undefined;

/**
 * @member {String} HtmlBody
 */
OutboundMessageDetailsResponse.prototype['HtmlBody'] = undefined;

/**
 * @member {Array.<module:model/MessageEventDetails>} MessageEvents
 */
OutboundMessageDetailsResponse.prototype['MessageEvents'] = undefined;

/**
 * @member {String} MessageID
 */
OutboundMessageDetailsResponse.prototype['MessageID'] = undefined;

/**
 * @member {Date} ReceivedAt
 */
OutboundMessageDetailsResponse.prototype['ReceivedAt'] = undefined;

/**
 * @member {Array.<String>} Recipients
 */
OutboundMessageDetailsResponse.prototype['Recipients'] = undefined;

/**
 * @member {String} Status
 */
OutboundMessageDetailsResponse.prototype['Status'] = undefined;

/**
 * @member {String} Subject
 */
OutboundMessageDetailsResponse.prototype['Subject'] = undefined;

/**
 * @member {String} Tag
 */
OutboundMessageDetailsResponse.prototype['Tag'] = undefined;

/**
 * @member {String} TextBody
 */
OutboundMessageDetailsResponse.prototype['TextBody'] = undefined;

/**
 * @member {Array.<module:model/EmailNameAddressPair>} To
 */
OutboundMessageDetailsResponse.prototype['To'] = undefined;

/**
 * @member {module:model/OutboundMessageDetailsResponse.TrackLinksEnum} TrackLinks
 */
OutboundMessageDetailsResponse.prototype['TrackLinks'] = undefined;

/**
 * @member {Boolean} TrackOpens
 */
OutboundMessageDetailsResponse.prototype['TrackOpens'] = undefined;





/**
 * Allowed values for the <code>TrackLinks</code> property.
 * @enum {String}
 * @readonly
 */
OutboundMessageDetailsResponse['TrackLinksEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "HtmlAndText"
     * @const
     */
    "HtmlAndText": "HtmlAndText",

    /**
     * value: "HtmlOnly"
     * @const
     */
    "HtmlOnly": "HtmlOnly",

    /**
     * value: "TextOnly"
     * @const
     */
    "TextOnly": "TextOnly"
};



export default OutboundMessageDetailsResponse;

