/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EditServerConfigurationRequest model module.
 * @module model/EditServerConfigurationRequest
 * @version 1.0.0
 */
class EditServerConfigurationRequest {
    /**
     * Constructs a new <code>EditServerConfigurationRequest</code>.
     * @alias module:model/EditServerConfigurationRequest
     */
    constructor() { 
        
        EditServerConfigurationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditServerConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditServerConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/EditServerConfigurationRequest} The populated <code>EditServerConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditServerConfigurationRequest();

            if (data.hasOwnProperty('BounceHookUrl')) {
                obj['BounceHookUrl'] = ApiClient.convertToType(data['BounceHookUrl'], 'String');
            }
            if (data.hasOwnProperty('ClickHookUrl')) {
                obj['ClickHookUrl'] = ApiClient.convertToType(data['ClickHookUrl'], 'String');
            }
            if (data.hasOwnProperty('Color')) {
                obj['Color'] = ApiClient.convertToType(data['Color'], 'String');
            }
            if (data.hasOwnProperty('DeliveryHookUrl')) {
                obj['DeliveryHookUrl'] = ApiClient.convertToType(data['DeliveryHookUrl'], 'String');
            }
            if (data.hasOwnProperty('InboundDomain')) {
                obj['InboundDomain'] = ApiClient.convertToType(data['InboundDomain'], 'String');
            }
            if (data.hasOwnProperty('InboundHookUrl')) {
                obj['InboundHookUrl'] = ApiClient.convertToType(data['InboundHookUrl'], 'String');
            }
            if (data.hasOwnProperty('InboundSpamThreshold')) {
                obj['InboundSpamThreshold'] = ApiClient.convertToType(data['InboundSpamThreshold'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OpenHookUrl')) {
                obj['OpenHookUrl'] = ApiClient.convertToType(data['OpenHookUrl'], 'String');
            }
            if (data.hasOwnProperty('PostFirstOpenOnly')) {
                obj['PostFirstOpenOnly'] = ApiClient.convertToType(data['PostFirstOpenOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('RawEmailEnabled')) {
                obj['RawEmailEnabled'] = ApiClient.convertToType(data['RawEmailEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('SmtpApiActivated')) {
                obj['SmtpApiActivated'] = ApiClient.convertToType(data['SmtpApiActivated'], 'Boolean');
            }
            if (data.hasOwnProperty('TrackLinks')) {
                obj['TrackLinks'] = ApiClient.convertToType(data['TrackLinks'], 'String');
            }
            if (data.hasOwnProperty('TrackOpens')) {
                obj['TrackOpens'] = ApiClient.convertToType(data['TrackOpens'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditServerConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditServerConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BounceHookUrl'] && !(typeof data['BounceHookUrl'] === 'string' || data['BounceHookUrl'] instanceof String)) {
            throw new Error("Expected the field `BounceHookUrl` to be a primitive type in the JSON string but got " + data['BounceHookUrl']);
        }
        // ensure the json data is a string
        if (data['ClickHookUrl'] && !(typeof data['ClickHookUrl'] === 'string' || data['ClickHookUrl'] instanceof String)) {
            throw new Error("Expected the field `ClickHookUrl` to be a primitive type in the JSON string but got " + data['ClickHookUrl']);
        }
        // ensure the json data is a string
        if (data['Color'] && !(typeof data['Color'] === 'string' || data['Color'] instanceof String)) {
            throw new Error("Expected the field `Color` to be a primitive type in the JSON string but got " + data['Color']);
        }
        // ensure the json data is a string
        if (data['DeliveryHookUrl'] && !(typeof data['DeliveryHookUrl'] === 'string' || data['DeliveryHookUrl'] instanceof String)) {
            throw new Error("Expected the field `DeliveryHookUrl` to be a primitive type in the JSON string but got " + data['DeliveryHookUrl']);
        }
        // ensure the json data is a string
        if (data['InboundDomain'] && !(typeof data['InboundDomain'] === 'string' || data['InboundDomain'] instanceof String)) {
            throw new Error("Expected the field `InboundDomain` to be a primitive type in the JSON string but got " + data['InboundDomain']);
        }
        // ensure the json data is a string
        if (data['InboundHookUrl'] && !(typeof data['InboundHookUrl'] === 'string' || data['InboundHookUrl'] instanceof String)) {
            throw new Error("Expected the field `InboundHookUrl` to be a primitive type in the JSON string but got " + data['InboundHookUrl']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OpenHookUrl'] && !(typeof data['OpenHookUrl'] === 'string' || data['OpenHookUrl'] instanceof String)) {
            throw new Error("Expected the field `OpenHookUrl` to be a primitive type in the JSON string but got " + data['OpenHookUrl']);
        }
        // ensure the json data is a string
        if (data['TrackLinks'] && !(typeof data['TrackLinks'] === 'string' || data['TrackLinks'] instanceof String)) {
            throw new Error("Expected the field `TrackLinks` to be a primitive type in the JSON string but got " + data['TrackLinks']);
        }

        return true;
    }


}



/**
 * @member {String} BounceHookUrl
 */
EditServerConfigurationRequest.prototype['BounceHookUrl'] = undefined;

/**
 * Webhook url allowing real-time notification when tracked links are clicked.
 * @member {String} ClickHookUrl
 */
EditServerConfigurationRequest.prototype['ClickHookUrl'] = undefined;

/**
 * @member {module:model/EditServerConfigurationRequest.ColorEnum} Color
 */
EditServerConfigurationRequest.prototype['Color'] = undefined;

/**
 * @member {String} DeliveryHookUrl
 */
EditServerConfigurationRequest.prototype['DeliveryHookUrl'] = undefined;

/**
 * @member {String} InboundDomain
 */
EditServerConfigurationRequest.prototype['InboundDomain'] = undefined;

/**
 * @member {String} InboundHookUrl
 */
EditServerConfigurationRequest.prototype['InboundHookUrl'] = undefined;

/**
 * @member {Number} InboundSpamThreshold
 */
EditServerConfigurationRequest.prototype['InboundSpamThreshold'] = undefined;

/**
 * @member {String} Name
 */
EditServerConfigurationRequest.prototype['Name'] = undefined;

/**
 * @member {String} OpenHookUrl
 */
EditServerConfigurationRequest.prototype['OpenHookUrl'] = undefined;

/**
 * @member {Boolean} PostFirstOpenOnly
 */
EditServerConfigurationRequest.prototype['PostFirstOpenOnly'] = undefined;

/**
 * @member {Boolean} RawEmailEnabled
 */
EditServerConfigurationRequest.prototype['RawEmailEnabled'] = undefined;

/**
 * @member {Boolean} SmtpApiActivated
 */
EditServerConfigurationRequest.prototype['SmtpApiActivated'] = undefined;

/**
 * @member {module:model/EditServerConfigurationRequest.TrackLinksEnum} TrackLinks
 */
EditServerConfigurationRequest.prototype['TrackLinks'] = undefined;

/**
 * @member {Boolean} TrackOpens
 */
EditServerConfigurationRequest.prototype['TrackOpens'] = undefined;





/**
 * Allowed values for the <code>Color</code> property.
 * @enum {String}
 * @readonly
 */
EditServerConfigurationRequest['ColorEnum'] = {

    /**
     * value: "purple"
     * @const
     */
    "purple": "purple",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "turqoise"
     * @const
     */
    "turqoise": "turqoise",

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "grey"
     * @const
     */
    "grey": "grey"
};


/**
 * Allowed values for the <code>TrackLinks</code> property.
 * @enum {String}
 * @readonly
 */
EditServerConfigurationRequest['TrackLinksEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "HtmlAndText"
     * @const
     */
    "HtmlAndText": "HtmlAndText",

    /**
     * value: "HtmlOnly"
     * @const
     */
    "HtmlOnly": "HtmlOnly",

    /**
     * value: "TextOnly"
     * @const
     */
    "TextOnly": "TextOnly"
};



export default EditServerConfigurationRequest;

