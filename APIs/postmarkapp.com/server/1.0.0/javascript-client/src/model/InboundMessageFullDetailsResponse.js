/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import EmailNameAddressPair from './EmailNameAddressPair';
import InboundMessageDetailFromFull from './InboundMessageDetailFromFull';
import MessageHeader from './MessageHeader';

/**
 * The InboundMessageFullDetailsResponse model module.
 * @module model/InboundMessageFullDetailsResponse
 * @version 1.0.0
 */
class InboundMessageFullDetailsResponse {
    /**
     * Constructs a new <code>InboundMessageFullDetailsResponse</code>.
     * @alias module:model/InboundMessageFullDetailsResponse
     */
    constructor() { 
        
        InboundMessageFullDetailsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InboundMessageFullDetailsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundMessageFullDetailsResponse} obj Optional instance to populate.
     * @return {module:model/InboundMessageFullDetailsResponse} The populated <code>InboundMessageFullDetailsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundMessageFullDetailsResponse();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('BlockedReason')) {
                obj['BlockedReason'] = ApiClient.convertToType(data['BlockedReason'], 'String');
            }
            if (data.hasOwnProperty('Cc')) {
                obj['Cc'] = ApiClient.convertToType(data['Cc'], 'String');
            }
            if (data.hasOwnProperty('CcFull')) {
                obj['CcFull'] = ApiClient.convertToType(data['CcFull'], [EmailNameAddressPair]);
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('FromFull')) {
                obj['FromFull'] = InboundMessageDetailFromFull.constructFromObject(data['FromFull']);
            }
            if (data.hasOwnProperty('FromName')) {
                obj['FromName'] = ApiClient.convertToType(data['FromName'], 'String');
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], [MessageHeader]);
            }
            if (data.hasOwnProperty('HtmlBody')) {
                obj['HtmlBody'] = ApiClient.convertToType(data['HtmlBody'], 'String');
            }
            if (data.hasOwnProperty('MailboxHash')) {
                obj['MailboxHash'] = ApiClient.convertToType(data['MailboxHash'], 'String');
            }
            if (data.hasOwnProperty('MessageID')) {
                obj['MessageID'] = ApiClient.convertToType(data['MessageID'], 'String');
            }
            if (data.hasOwnProperty('OriginalRecipient')) {
                obj['OriginalRecipient'] = ApiClient.convertToType(data['OriginalRecipient'], 'String');
            }
            if (data.hasOwnProperty('ReplyTo')) {
                obj['ReplyTo'] = ApiClient.convertToType(data['ReplyTo'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('Tag')) {
                obj['Tag'] = ApiClient.convertToType(data['Tag'], 'String');
            }
            if (data.hasOwnProperty('TextBody')) {
                obj['TextBody'] = ApiClient.convertToType(data['TextBody'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
            if (data.hasOwnProperty('ToFull')) {
                obj['ToFull'] = ApiClient.convertToType(data['ToFull'], [EmailNameAddressPair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundMessageFullDetailsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundMessageFullDetailsResponse</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['BlockedReason'] && !(typeof data['BlockedReason'] === 'string' || data['BlockedReason'] instanceof String)) {
            throw new Error("Expected the field `BlockedReason` to be a primitive type in the JSON string but got " + data['BlockedReason']);
        }
        // ensure the json data is a string
        if (data['Cc'] && !(typeof data['Cc'] === 'string' || data['Cc'] instanceof String)) {
            throw new Error("Expected the field `Cc` to be a primitive type in the JSON string but got " + data['Cc']);
        }
        if (data['CcFull']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CcFull'])) {
                throw new Error("Expected the field `CcFull` to be an array in the JSON data but got " + data['CcFull']);
            }
            // validate the optional field `CcFull` (array)
            for (const item of data['CcFull']) {
                EmailNameAddressPair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // validate the optional field `FromFull`
        if (data['FromFull']) { // data not null
          InboundMessageDetailFromFull.validateJSON(data['FromFull']);
        }
        // ensure the json data is a string
        if (data['FromName'] && !(typeof data['FromName'] === 'string' || data['FromName'] instanceof String)) {
            throw new Error("Expected the field `FromName` to be a primitive type in the JSON string but got " + data['FromName']);
        }
        if (data['Headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Headers'])) {
                throw new Error("Expected the field `Headers` to be an array in the JSON data but got " + data['Headers']);
            }
            // validate the optional field `Headers` (array)
            for (const item of data['Headers']) {
                MessageHeader.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['HtmlBody'] && !(typeof data['HtmlBody'] === 'string' || data['HtmlBody'] instanceof String)) {
            throw new Error("Expected the field `HtmlBody` to be a primitive type in the JSON string but got " + data['HtmlBody']);
        }
        // ensure the json data is a string
        if (data['MailboxHash'] && !(typeof data['MailboxHash'] === 'string' || data['MailboxHash'] instanceof String)) {
            throw new Error("Expected the field `MailboxHash` to be a primitive type in the JSON string but got " + data['MailboxHash']);
        }
        // ensure the json data is a string
        if (data['MessageID'] && !(typeof data['MessageID'] === 'string' || data['MessageID'] instanceof String)) {
            throw new Error("Expected the field `MessageID` to be a primitive type in the JSON string but got " + data['MessageID']);
        }
        // ensure the json data is a string
        if (data['OriginalRecipient'] && !(typeof data['OriginalRecipient'] === 'string' || data['OriginalRecipient'] instanceof String)) {
            throw new Error("Expected the field `OriginalRecipient` to be a primitive type in the JSON string but got " + data['OriginalRecipient']);
        }
        // ensure the json data is a string
        if (data['ReplyTo'] && !(typeof data['ReplyTo'] === 'string' || data['ReplyTo'] instanceof String)) {
            throw new Error("Expected the field `ReplyTo` to be a primitive type in the JSON string but got " + data['ReplyTo']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['Tag'] && !(typeof data['Tag'] === 'string' || data['Tag'] instanceof String)) {
            throw new Error("Expected the field `Tag` to be a primitive type in the JSON string but got " + data['Tag']);
        }
        // ensure the json data is a string
        if (data['TextBody'] && !(typeof data['TextBody'] === 'string' || data['TextBody'] instanceof String)) {
            throw new Error("Expected the field `TextBody` to be a primitive type in the JSON string but got " + data['TextBody']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }
        if (data['ToFull']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ToFull'])) {
                throw new Error("Expected the field `ToFull` to be an array in the JSON data but got " + data['ToFull']);
            }
            // validate the optional field `ToFull` (array)
            for (const item of data['ToFull']) {
                EmailNameAddressPair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attachment>} Attachments
 */
InboundMessageFullDetailsResponse.prototype['Attachments'] = undefined;

/**
 * @member {String} BlockedReason
 */
InboundMessageFullDetailsResponse.prototype['BlockedReason'] = undefined;

/**
 * @member {String} Cc
 */
InboundMessageFullDetailsResponse.prototype['Cc'] = undefined;

/**
 * @member {Array.<module:model/EmailNameAddressPair>} CcFull
 */
InboundMessageFullDetailsResponse.prototype['CcFull'] = undefined;

/**
 * @member {String} Date
 */
InboundMessageFullDetailsResponse.prototype['Date'] = undefined;

/**
 * @member {String} From
 */
InboundMessageFullDetailsResponse.prototype['From'] = undefined;

/**
 * @member {module:model/InboundMessageDetailFromFull} FromFull
 */
InboundMessageFullDetailsResponse.prototype['FromFull'] = undefined;

/**
 * @member {String} FromName
 */
InboundMessageFullDetailsResponse.prototype['FromName'] = undefined;

/**
 * @member {Array.<module:model/MessageHeader>} Headers
 */
InboundMessageFullDetailsResponse.prototype['Headers'] = undefined;

/**
 * @member {String} HtmlBody
 */
InboundMessageFullDetailsResponse.prototype['HtmlBody'] = undefined;

/**
 * @member {String} MailboxHash
 */
InboundMessageFullDetailsResponse.prototype['MailboxHash'] = undefined;

/**
 * @member {String} MessageID
 */
InboundMessageFullDetailsResponse.prototype['MessageID'] = undefined;

/**
 * @member {String} OriginalRecipient
 */
InboundMessageFullDetailsResponse.prototype['OriginalRecipient'] = undefined;

/**
 * @member {String} ReplyTo
 */
InboundMessageFullDetailsResponse.prototype['ReplyTo'] = undefined;

/**
 * @member {String} Status
 */
InboundMessageFullDetailsResponse.prototype['Status'] = undefined;

/**
 * @member {String} Subject
 */
InboundMessageFullDetailsResponse.prototype['Subject'] = undefined;

/**
 * @member {String} Tag
 */
InboundMessageFullDetailsResponse.prototype['Tag'] = undefined;

/**
 * @member {String} TextBody
 */
InboundMessageFullDetailsResponse.prototype['TextBody'] = undefined;

/**
 * @member {String} To
 */
InboundMessageFullDetailsResponse.prototype['To'] = undefined;

/**
 * @member {Array.<module:model/EmailNameAddressPair>} ToFull
 */
InboundMessageFullDetailsResponse.prototype['ToFull'] = undefined;






export default InboundMessageFullDetailsResponse;

