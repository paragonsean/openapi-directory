/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateRecordResponse from './TemplateRecordResponse';

/**
 * The TemplateListingResponse model module.
 * @module model/TemplateListingResponse
 * @version 1.0.0
 */
class TemplateListingResponse {
    /**
     * Constructs a new <code>TemplateListingResponse</code>.
     * @alias module:model/TemplateListingResponse
     */
    constructor() { 
        
        TemplateListingResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TemplateListingResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateListingResponse} obj Optional instance to populate.
     * @return {module:model/TemplateListingResponse} The populated <code>TemplateListingResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateListingResponse();

            if (data.hasOwnProperty('Templates API')) {
                obj['Templates API'] = ApiClient.convertToType(data['Templates API'], [TemplateRecordResponse]);
            }
            if (data.hasOwnProperty('TotalCount')) {
                obj['TotalCount'] = ApiClient.convertToType(data['TotalCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateListingResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateListingResponse</code>.
     */
    static validateJSON(data) {
        if (data['Templates API']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Templates API'])) {
                throw new Error("Expected the field `Templates API` to be an array in the JSON data but got " + data['Templates API']);
            }
            // validate the optional field `Templates API` (array)
            for (const item of data['Templates API']) {
                TemplateRecordResponse.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Basic information for each Template returned from the query.
 * @member {Array.<module:model/TemplateRecordResponse>} Templates API
 */
TemplateListingResponse.prototype['Templates API'] = undefined;

/**
 * The total number of Templates API associated with this server.
 * @member {Number} TotalCount
 */
TemplateListingResponse.prototype['TotalCount'] = undefined;






export default TemplateListingResponse;

