/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import MessageHeader from './MessageHeader';

/**
 * The SendEmailRequest model module.
 * @module model/SendEmailRequest
 * @version 1.0.0
 */
class SendEmailRequest {
    /**
     * Constructs a new <code>SendEmailRequest</code>.
     * @alias module:model/SendEmailRequest
     */
    constructor() { 
        
        SendEmailRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendEmailRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendEmailRequest} obj Optional instance to populate.
     * @return {module:model/SendEmailRequest} The populated <code>SendEmailRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendEmailRequest();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('Bcc')) {
                obj['Bcc'] = ApiClient.convertToType(data['Bcc'], 'String');
            }
            if (data.hasOwnProperty('Cc')) {
                obj['Cc'] = ApiClient.convertToType(data['Cc'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], [MessageHeader]);
            }
            if (data.hasOwnProperty('HtmlBody')) {
                obj['HtmlBody'] = ApiClient.convertToType(data['HtmlBody'], 'String');
            }
            if (data.hasOwnProperty('ReplyTo')) {
                obj['ReplyTo'] = ApiClient.convertToType(data['ReplyTo'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('Tag')) {
                obj['Tag'] = ApiClient.convertToType(data['Tag'], 'String');
            }
            if (data.hasOwnProperty('TextBody')) {
                obj['TextBody'] = ApiClient.convertToType(data['TextBody'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
            if (data.hasOwnProperty('TrackLinks')) {
                obj['TrackLinks'] = ApiClient.convertToType(data['TrackLinks'], 'String');
            }
            if (data.hasOwnProperty('TrackOpens')) {
                obj['TrackOpens'] = ApiClient.convertToType(data['TrackOpens'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendEmailRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendEmailRequest</code>.
     */
    static validateJSON(data) {
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Bcc'] && !(typeof data['Bcc'] === 'string' || data['Bcc'] instanceof String)) {
            throw new Error("Expected the field `Bcc` to be a primitive type in the JSON string but got " + data['Bcc']);
        }
        // ensure the json data is a string
        if (data['Cc'] && !(typeof data['Cc'] === 'string' || data['Cc'] instanceof String)) {
            throw new Error("Expected the field `Cc` to be a primitive type in the JSON string but got " + data['Cc']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        if (data['Headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Headers'])) {
                throw new Error("Expected the field `Headers` to be an array in the JSON data but got " + data['Headers']);
            }
            // validate the optional field `Headers` (array)
            for (const item of data['Headers']) {
                MessageHeader.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['HtmlBody'] && !(typeof data['HtmlBody'] === 'string' || data['HtmlBody'] instanceof String)) {
            throw new Error("Expected the field `HtmlBody` to be a primitive type in the JSON string but got " + data['HtmlBody']);
        }
        // ensure the json data is a string
        if (data['ReplyTo'] && !(typeof data['ReplyTo'] === 'string' || data['ReplyTo'] instanceof String)) {
            throw new Error("Expected the field `ReplyTo` to be a primitive type in the JSON string but got " + data['ReplyTo']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['Tag'] && !(typeof data['Tag'] === 'string' || data['Tag'] instanceof String)) {
            throw new Error("Expected the field `Tag` to be a primitive type in the JSON string but got " + data['Tag']);
        }
        // ensure the json data is a string
        if (data['TextBody'] && !(typeof data['TextBody'] === 'string' || data['TextBody'] instanceof String)) {
            throw new Error("Expected the field `TextBody` to be a primitive type in the JSON string but got " + data['TextBody']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }
        // ensure the json data is a string
        if (data['TrackLinks'] && !(typeof data['TrackLinks'] === 'string' || data['TrackLinks'] instanceof String)) {
            throw new Error("Expected the field `TrackLinks` to be a primitive type in the JSON string but got " + data['TrackLinks']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Attachment>} Attachments
 */
SendEmailRequest.prototype['Attachments'] = undefined;

/**
 * Bcc recipient email address. Multiple addresses are comma seperated. Max 50.
 * @member {String} Bcc
 */
SendEmailRequest.prototype['Bcc'] = undefined;

/**
 * Recipient email address. Multiple addresses are comma seperated. Max 50.
 * @member {String} Cc
 */
SendEmailRequest.prototype['Cc'] = undefined;

/**
 * The sender email address. Must have a registered and confirmed Sender Signature.
 * @member {String} From
 */
SendEmailRequest.prototype['From'] = undefined;

/**
 * @member {Array.<module:model/MessageHeader>} Headers
 */
SendEmailRequest.prototype['Headers'] = undefined;

/**
 * If no TextBody specified HTML email message
 * @member {String} HtmlBody
 */
SendEmailRequest.prototype['HtmlBody'] = undefined;

/**
 * Reply To override email address. Defaults to the Reply To set in the sender signature.
 * @member {String} ReplyTo
 */
SendEmailRequest.prototype['ReplyTo'] = undefined;

/**
 * Email Subject
 * @member {String} Subject
 */
SendEmailRequest.prototype['Subject'] = undefined;

/**
 * Email tag that allows you to categorize outgoing emails and get detailed statistics.
 * @member {String} Tag
 */
SendEmailRequest.prototype['Tag'] = undefined;

/**
 * If no HtmlBody specified Plain text email message
 * @member {String} TextBody
 */
SendEmailRequest.prototype['TextBody'] = undefined;

/**
 * Recipient email address. Multiple addresses are comma seperated. Max 50.
 * @member {String} To
 */
SendEmailRequest.prototype['To'] = undefined;

/**
 * Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.
 * @member {module:model/SendEmailRequest.TrackLinksEnum} TrackLinks
 */
SendEmailRequest.prototype['TrackLinks'] = undefined;

/**
 * Activate open tracking for this email.
 * @member {Boolean} TrackOpens
 */
SendEmailRequest.prototype['TrackOpens'] = undefined;





/**
 * Allowed values for the <code>TrackLinks</code> property.
 * @enum {String}
 * @readonly
 */
SendEmailRequest['TrackLinksEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "HtmlAndText"
     * @const
     */
    "HtmlAndText": "HtmlAndText",

    /**
     * value: "HtmlOnly"
     * @const
     */
    "HtmlOnly": "HtmlOnly",

    /**
     * value: "TextOnly"
     * @const
     */
    "TextOnly": "TextOnly"
};



export default SendEmailRequest;

