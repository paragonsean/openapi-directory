/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTemplateRequest model module.
 * @module model/CreateTemplateRequest
 * @version 1.0.0
 */
class CreateTemplateRequest {
    /**
     * Constructs a new <code>CreateTemplateRequest</code>.
     * The contents required for creating a new template.
     * @alias module:model/CreateTemplateRequest
     * @param name {String} The friendly display name for the template.
     * @param subject {String} The Subject template definition for this Template.
     */
    constructor(name, subject) { 
        
        CreateTemplateRequest.initialize(this, name, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, subject) { 
        obj['Name'] = name;
        obj['Subject'] = subject;
    }

    /**
     * Constructs a <code>CreateTemplateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTemplateRequest} obj Optional instance to populate.
     * @return {module:model/CreateTemplateRequest} The populated <code>CreateTemplateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTemplateRequest();

            if (data.hasOwnProperty('Alias')) {
                obj['Alias'] = ApiClient.convertToType(data['Alias'], 'String');
            }
            if (data.hasOwnProperty('HtmlBody')) {
                obj['HtmlBody'] = ApiClient.convertToType(data['HtmlBody'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('TextBody')) {
                obj['TextBody'] = ApiClient.convertToType(data['TextBody'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTemplateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTemplateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTemplateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Alias'] && !(typeof data['Alias'] === 'string' || data['Alias'] instanceof String)) {
            throw new Error("Expected the field `Alias` to be a primitive type in the JSON string but got " + data['Alias']);
        }
        // ensure the json data is a string
        if (data['HtmlBody'] && !(typeof data['HtmlBody'] === 'string' || data['HtmlBody'] instanceof String)) {
            throw new Error("Expected the field `HtmlBody` to be a primitive type in the JSON string but got " + data['HtmlBody']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['TextBody'] && !(typeof data['TextBody'] === 'string' || data['TextBody'] instanceof String)) {
            throw new Error("Expected the field `TextBody` to be a primitive type in the JSON string but got " + data['TextBody']);
        }

        return true;
    }


}

CreateTemplateRequest.RequiredProperties = ["Name", "Subject"];

/**
 * The optional string identifier for referring to this Template (numbers, letters, and '.', '-', '_' characters, starts with a letter).
 * @member {String} Alias
 */
CreateTemplateRequest.prototype['Alias'] = undefined;

/**
 * The HTML template definition for this Template.
 * @member {String} HtmlBody
 */
CreateTemplateRequest.prototype['HtmlBody'] = undefined;

/**
 * The friendly display name for the template.
 * @member {String} Name
 */
CreateTemplateRequest.prototype['Name'] = undefined;

/**
 * The Subject template definition for this Template.
 * @member {String} Subject
 */
CreateTemplateRequest.prototype['Subject'] = undefined;

/**
 * The Text template definition for this Template.
 * @member {String} TextBody
 */
CreateTemplateRequest.prototype['TextBody'] = undefined;






export default CreateTemplateRequest;

