/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import MessageHeader from './MessageHeader';

/**
 * The EmailWithTemplateRequest model module.
 * @module model/EmailWithTemplateRequest
 * @version 1.0.0
 */
class EmailWithTemplateRequest {
    /**
     * Constructs a new <code>EmailWithTemplateRequest</code>.
     * @alias module:model/EmailWithTemplateRequest
     * @param from {String} 
     * @param templateAlias {String} Required if 'TemplateId' is not specified.
     * @param templateId {Number} Required if 'TemplateAlias' is not specified.
     * @param templateModel {Object} 
     * @param to {String} 
     */
    constructor(from, templateAlias, templateId, templateModel, to) { 
        
        EmailWithTemplateRequest.initialize(this, from, templateAlias, templateId, templateModel, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, templateAlias, templateId, templateModel, to) { 
        obj['From'] = from;
        obj['InlineCss'] = true;
        obj['TemplateAlias'] = templateAlias;
        obj['TemplateId'] = templateId;
        obj['TemplateModel'] = templateModel;
        obj['To'] = to;
    }

    /**
     * Constructs a <code>EmailWithTemplateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailWithTemplateRequest} obj Optional instance to populate.
     * @return {module:model/EmailWithTemplateRequest} The populated <code>EmailWithTemplateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailWithTemplateRequest();

            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('Bcc')) {
                obj['Bcc'] = ApiClient.convertToType(data['Bcc'], 'String');
            }
            if (data.hasOwnProperty('Cc')) {
                obj['Cc'] = ApiClient.convertToType(data['Cc'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], [MessageHeader]);
            }
            if (data.hasOwnProperty('InlineCss')) {
                obj['InlineCss'] = ApiClient.convertToType(data['InlineCss'], 'Boolean');
            }
            if (data.hasOwnProperty('ReplyTo')) {
                obj['ReplyTo'] = ApiClient.convertToType(data['ReplyTo'], 'String');
            }
            if (data.hasOwnProperty('Tag')) {
                obj['Tag'] = ApiClient.convertToType(data['Tag'], 'String');
            }
            if (data.hasOwnProperty('TemplateAlias')) {
                obj['TemplateAlias'] = ApiClient.convertToType(data['TemplateAlias'], 'String');
            }
            if (data.hasOwnProperty('TemplateId')) {
                obj['TemplateId'] = ApiClient.convertToType(data['TemplateId'], 'Number');
            }
            if (data.hasOwnProperty('TemplateModel')) {
                obj['TemplateModel'] = ApiClient.convertToType(data['TemplateModel'], Object);
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
            if (data.hasOwnProperty('TrackLinks')) {
                obj['TrackLinks'] = ApiClient.convertToType(data['TrackLinks'], 'String');
            }
            if (data.hasOwnProperty('TrackOpens')) {
                obj['TrackOpens'] = ApiClient.convertToType(data['TrackOpens'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailWithTemplateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailWithTemplateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmailWithTemplateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Bcc'] && !(typeof data['Bcc'] === 'string' || data['Bcc'] instanceof String)) {
            throw new Error("Expected the field `Bcc` to be a primitive type in the JSON string but got " + data['Bcc']);
        }
        // ensure the json data is a string
        if (data['Cc'] && !(typeof data['Cc'] === 'string' || data['Cc'] instanceof String)) {
            throw new Error("Expected the field `Cc` to be a primitive type in the JSON string but got " + data['Cc']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        if (data['Headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Headers'])) {
                throw new Error("Expected the field `Headers` to be an array in the JSON data but got " + data['Headers']);
            }
            // validate the optional field `Headers` (array)
            for (const item of data['Headers']) {
                MessageHeader.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ReplyTo'] && !(typeof data['ReplyTo'] === 'string' || data['ReplyTo'] instanceof String)) {
            throw new Error("Expected the field `ReplyTo` to be a primitive type in the JSON string but got " + data['ReplyTo']);
        }
        // ensure the json data is a string
        if (data['Tag'] && !(typeof data['Tag'] === 'string' || data['Tag'] instanceof String)) {
            throw new Error("Expected the field `Tag` to be a primitive type in the JSON string but got " + data['Tag']);
        }
        // ensure the json data is a string
        if (data['TemplateAlias'] && !(typeof data['TemplateAlias'] === 'string' || data['TemplateAlias'] instanceof String)) {
            throw new Error("Expected the field `TemplateAlias` to be a primitive type in the JSON string but got " + data['TemplateAlias']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }
        // ensure the json data is a string
        if (data['TrackLinks'] && !(typeof data['TrackLinks'] === 'string' || data['TrackLinks'] instanceof String)) {
            throw new Error("Expected the field `TrackLinks` to be a primitive type in the JSON string but got " + data['TrackLinks']);
        }

        return true;
    }


}

EmailWithTemplateRequest.RequiredProperties = ["From", "TemplateAlias", "TemplateId", "TemplateModel", "To"];

/**
 * @member {Array.<module:model/Attachment>} Attachments
 */
EmailWithTemplateRequest.prototype['Attachments'] = undefined;

/**
 * @member {String} Bcc
 */
EmailWithTemplateRequest.prototype['Bcc'] = undefined;

/**
 * @member {String} Cc
 */
EmailWithTemplateRequest.prototype['Cc'] = undefined;

/**
 * @member {String} From
 */
EmailWithTemplateRequest.prototype['From'] = undefined;

/**
 * @member {Array.<module:model/MessageHeader>} Headers
 */
EmailWithTemplateRequest.prototype['Headers'] = undefined;

/**
 * @member {Boolean} InlineCss
 * @default true
 */
EmailWithTemplateRequest.prototype['InlineCss'] = true;

/**
 * @member {String} ReplyTo
 */
EmailWithTemplateRequest.prototype['ReplyTo'] = undefined;

/**
 * @member {String} Tag
 */
EmailWithTemplateRequest.prototype['Tag'] = undefined;

/**
 * Required if 'TemplateId' is not specified.
 * @member {String} TemplateAlias
 */
EmailWithTemplateRequest.prototype['TemplateAlias'] = undefined;

/**
 * Required if 'TemplateAlias' is not specified.
 * @member {Number} TemplateId
 */
EmailWithTemplateRequest.prototype['TemplateId'] = undefined;

/**
 * @member {Object} TemplateModel
 */
EmailWithTemplateRequest.prototype['TemplateModel'] = undefined;

/**
 * @member {String} To
 */
EmailWithTemplateRequest.prototype['To'] = undefined;

/**
 * Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.
 * @member {module:model/EmailWithTemplateRequest.TrackLinksEnum} TrackLinks
 */
EmailWithTemplateRequest.prototype['TrackLinks'] = undefined;

/**
 * Activate open tracking for this email.
 * @member {Boolean} TrackOpens
 */
EmailWithTemplateRequest.prototype['TrackOpens'] = undefined;





/**
 * Allowed values for the <code>TrackLinks</code> property.
 * @enum {String}
 * @readonly
 */
EmailWithTemplateRequest['TrackLinksEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "HtmlAndText"
     * @const
     */
    "HtmlAndText": "HtmlAndText",

    /**
     * value: "HtmlOnly"
     * @const
     */
    "HtmlOnly": "HtmlOnly",

    /**
     * value: "TextOnly"
     * @const
     */
    "TextOnly": "TextOnly"
};



export default EmailWithTemplateRequest;

