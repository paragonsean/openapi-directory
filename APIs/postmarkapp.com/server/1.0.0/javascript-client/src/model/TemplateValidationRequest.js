/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TemplateValidationRequest model module.
 * @module model/TemplateValidationRequest
 * @version 1.0.0
 */
class TemplateValidationRequest {
    /**
     * Constructs a new <code>TemplateValidationRequest</code>.
     * @alias module:model/TemplateValidationRequest
     */
    constructor() { 
        
        TemplateValidationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['InlineCssForHtmlTestRender'] = true;
    }

    /**
     * Constructs a <code>TemplateValidationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateValidationRequest} obj Optional instance to populate.
     * @return {module:model/TemplateValidationRequest} The populated <code>TemplateValidationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateValidationRequest();

            if (data.hasOwnProperty('HtmlBody')) {
                obj['HtmlBody'] = ApiClient.convertToType(data['HtmlBody'], 'String');
            }
            if (data.hasOwnProperty('InlineCssForHtmlTestRender')) {
                obj['InlineCssForHtmlTestRender'] = ApiClient.convertToType(data['InlineCssForHtmlTestRender'], 'Boolean');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('TestRenderModel')) {
                obj['TestRenderModel'] = ApiClient.convertToType(data['TestRenderModel'], Object);
            }
            if (data.hasOwnProperty('TextBody')) {
                obj['TextBody'] = ApiClient.convertToType(data['TextBody'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateValidationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateValidationRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['HtmlBody'] && !(typeof data['HtmlBody'] === 'string' || data['HtmlBody'] instanceof String)) {
            throw new Error("Expected the field `HtmlBody` to be a primitive type in the JSON string but got " + data['HtmlBody']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['TextBody'] && !(typeof data['TextBody'] === 'string' || data['TextBody'] instanceof String)) {
            throw new Error("Expected the field `TextBody` to be a primitive type in the JSON string but got " + data['TextBody']);
        }

        return true;
    }


}



/**
 * The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 
 * @member {String} HtmlBody
 */
TemplateValidationRequest.prototype['HtmlBody'] = undefined;

/**
 * When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 
 * @member {Boolean} InlineCssForHtmlTestRender
 * @default true
 */
TemplateValidationRequest.prototype['InlineCssForHtmlTestRender'] = true;

/**
 * The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 
 * @member {String} Subject
 */
TemplateValidationRequest.prototype['Subject'] = undefined;

/**
 * The model to be used when rendering test content.
 * @member {Object} TestRenderModel
 */
TemplateValidationRequest.prototype['TestRenderModel'] = undefined;

/**
 * The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 
 * @member {String} TextBody
 */
TemplateValidationRequest.prototype['TextBody'] = undefined;






export default TemplateValidationRequest;

