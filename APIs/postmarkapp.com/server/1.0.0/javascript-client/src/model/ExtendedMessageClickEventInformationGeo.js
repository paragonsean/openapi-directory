/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExtendedMessageClickEventInformationGeo model module.
 * @module model/ExtendedMessageClickEventInformationGeo
 * @version 1.0.0
 */
class ExtendedMessageClickEventInformationGeo {
    /**
     * Constructs a new <code>ExtendedMessageClickEventInformationGeo</code>.
     * @alias module:model/ExtendedMessageClickEventInformationGeo
     */
    constructor() { 
        
        ExtendedMessageClickEventInformationGeo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedMessageClickEventInformationGeo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedMessageClickEventInformationGeo} obj Optional instance to populate.
     * @return {module:model/ExtendedMessageClickEventInformationGeo} The populated <code>ExtendedMessageClickEventInformationGeo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedMessageClickEventInformationGeo();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Coords')) {
                obj['Coords'] = ApiClient.convertToType(data['Coords'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('CountryISOCode')) {
                obj['CountryISOCode'] = ApiClient.convertToType(data['CountryISOCode'], 'String');
            }
            if (data.hasOwnProperty('IP')) {
                obj['IP'] = ApiClient.convertToType(data['IP'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('RegionISOCode')) {
                obj['RegionISOCode'] = ApiClient.convertToType(data['RegionISOCode'], 'String');
            }
            if (data.hasOwnProperty('Zip')) {
                obj['Zip'] = ApiClient.convertToType(data['Zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedMessageClickEventInformationGeo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedMessageClickEventInformationGeo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Coords'] && !(typeof data['Coords'] === 'string' || data['Coords'] instanceof String)) {
            throw new Error("Expected the field `Coords` to be a primitive type in the JSON string but got " + data['Coords']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['CountryISOCode'] && !(typeof data['CountryISOCode'] === 'string' || data['CountryISOCode'] instanceof String)) {
            throw new Error("Expected the field `CountryISOCode` to be a primitive type in the JSON string but got " + data['CountryISOCode']);
        }
        // ensure the json data is a string
        if (data['IP'] && !(typeof data['IP'] === 'string' || data['IP'] instanceof String)) {
            throw new Error("Expected the field `IP` to be a primitive type in the JSON string but got " + data['IP']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }
        // ensure the json data is a string
        if (data['RegionISOCode'] && !(typeof data['RegionISOCode'] === 'string' || data['RegionISOCode'] instanceof String)) {
            throw new Error("Expected the field `RegionISOCode` to be a primitive type in the JSON string but got " + data['RegionISOCode']);
        }
        // ensure the json data is a string
        if (data['Zip'] && !(typeof data['Zip'] === 'string' || data['Zip'] instanceof String)) {
            throw new Error("Expected the field `Zip` to be a primitive type in the JSON string but got " + data['Zip']);
        }

        return true;
    }


}



/**
 * @member {String} City
 */
ExtendedMessageClickEventInformationGeo.prototype['City'] = undefined;

/**
 * @member {String} Coords
 */
ExtendedMessageClickEventInformationGeo.prototype['Coords'] = undefined;

/**
 * @member {String} Country
 */
ExtendedMessageClickEventInformationGeo.prototype['Country'] = undefined;

/**
 * @member {String} CountryISOCode
 */
ExtendedMessageClickEventInformationGeo.prototype['CountryISOCode'] = undefined;

/**
 * @member {String} IP
 */
ExtendedMessageClickEventInformationGeo.prototype['IP'] = undefined;

/**
 * @member {String} Region
 */
ExtendedMessageClickEventInformationGeo.prototype['Region'] = undefined;

/**
 * @member {String} RegionISOCode
 */
ExtendedMessageClickEventInformationGeo.prototype['RegionISOCode'] = undefined;

/**
 * @member {String} Zip
 */
ExtendedMessageClickEventInformationGeo.prototype['Zip'] = undefined;






export default ExtendedMessageClickEventInformationGeo;

