# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounce_info_response import BounceInfoResponse
from openapi_server import util


class BounceSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounces: List[BounceInfoResponse]=None, total_count: int=None):
        """BounceSearchResponse - a model defined in OpenAPI

        :param bounces: The bounces of this BounceSearchResponse.
        :param total_count: The total_count of this BounceSearchResponse.
        """
        self.openapi_types = {
            'bounces': List[BounceInfoResponse],
            'total_count': int
        }

        self.attribute_map = {
            'bounces': 'Bounces',
            'total_count': 'TotalCount'
        }

        self._bounces = bounces
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BounceSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BounceSearchResponse of this BounceSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounces(self):
        """Gets the bounces of this BounceSearchResponse.


        :return: The bounces of this BounceSearchResponse.
        :rtype: List[BounceInfoResponse]
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this BounceSearchResponse.


        :param bounces: The bounces of this BounceSearchResponse.
        :type bounces: List[BounceInfoResponse]
        """

        self._bounces = bounces

    @property
    def total_count(self):
        """Gets the total_count of this BounceSearchResponse.


        :return: The total_count of this BounceSearchResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this BounceSearchResponse.


        :param total_count: The total_count of this BounceSearchResponse.
        :type total_count: int
        """

        self._total_count = total_count
