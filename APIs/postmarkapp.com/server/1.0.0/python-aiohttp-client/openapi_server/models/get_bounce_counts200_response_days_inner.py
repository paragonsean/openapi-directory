# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetBounceCounts200ResponseDaysInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, hard_bounce: int=None, smtp_api_error: int=None, soft_bounce: int=None, transient: int=None):
        """GetBounceCounts200ResponseDaysInner - a model defined in OpenAPI

        :param _date: The _date of this GetBounceCounts200ResponseDaysInner.
        :param hard_bounce: The hard_bounce of this GetBounceCounts200ResponseDaysInner.
        :param smtp_api_error: The smtp_api_error of this GetBounceCounts200ResponseDaysInner.
        :param soft_bounce: The soft_bounce of this GetBounceCounts200ResponseDaysInner.
        :param transient: The transient of this GetBounceCounts200ResponseDaysInner.
        """
        self.openapi_types = {
            '_date': str,
            'hard_bounce': int,
            'smtp_api_error': int,
            'soft_bounce': int,
            'transient': int
        }

        self.attribute_map = {
            '_date': 'Date',
            'hard_bounce': 'HardBounce',
            'smtp_api_error': 'SMTPApiError',
            'soft_bounce': 'SoftBounce',
            'transient': 'Transient'
        }

        self.__date = _date
        self._hard_bounce = hard_bounce
        self._smtp_api_error = smtp_api_error
        self._soft_bounce = soft_bounce
        self._transient = transient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBounceCounts200ResponseDaysInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getBounceCounts_200_response_Days_inner of this GetBounceCounts200ResponseDaysInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this GetBounceCounts200ResponseDaysInner.


        :return: The _date of this GetBounceCounts200ResponseDaysInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetBounceCounts200ResponseDaysInner.


        :param _date: The _date of this GetBounceCounts200ResponseDaysInner.
        :type _date: str
        """

        self.__date = _date

    @property
    def hard_bounce(self):
        """Gets the hard_bounce of this GetBounceCounts200ResponseDaysInner.


        :return: The hard_bounce of this GetBounceCounts200ResponseDaysInner.
        :rtype: int
        """
        return self._hard_bounce

    @hard_bounce.setter
    def hard_bounce(self, hard_bounce):
        """Sets the hard_bounce of this GetBounceCounts200ResponseDaysInner.


        :param hard_bounce: The hard_bounce of this GetBounceCounts200ResponseDaysInner.
        :type hard_bounce: int
        """

        self._hard_bounce = hard_bounce

    @property
    def smtp_api_error(self):
        """Gets the smtp_api_error of this GetBounceCounts200ResponseDaysInner.


        :return: The smtp_api_error of this GetBounceCounts200ResponseDaysInner.
        :rtype: int
        """
        return self._smtp_api_error

    @smtp_api_error.setter
    def smtp_api_error(self, smtp_api_error):
        """Sets the smtp_api_error of this GetBounceCounts200ResponseDaysInner.


        :param smtp_api_error: The smtp_api_error of this GetBounceCounts200ResponseDaysInner.
        :type smtp_api_error: int
        """

        self._smtp_api_error = smtp_api_error

    @property
    def soft_bounce(self):
        """Gets the soft_bounce of this GetBounceCounts200ResponseDaysInner.


        :return: The soft_bounce of this GetBounceCounts200ResponseDaysInner.
        :rtype: int
        """
        return self._soft_bounce

    @soft_bounce.setter
    def soft_bounce(self, soft_bounce):
        """Sets the soft_bounce of this GetBounceCounts200ResponseDaysInner.


        :param soft_bounce: The soft_bounce of this GetBounceCounts200ResponseDaysInner.
        :type soft_bounce: int
        """

        self._soft_bounce = soft_bounce

    @property
    def transient(self):
        """Gets the transient of this GetBounceCounts200ResponseDaysInner.


        :return: The transient of this GetBounceCounts200ResponseDaysInner.
        :rtype: int
        """
        return self._transient

    @transient.setter
    def transient(self, transient):
        """Sets the transient of this GetBounceCounts200ResponseDaysInner.


        :param transient: The transient of this GetBounceCounts200ResponseDaysInner.
        :type transient: int
        """

        self._transient = transient
