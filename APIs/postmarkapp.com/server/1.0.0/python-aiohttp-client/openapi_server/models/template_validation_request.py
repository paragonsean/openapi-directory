# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateValidationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_body: str=None, inline_css_for_html_test_render: bool=True, subject: str=None, test_render_model: object=None, text_body: str=None):
        """TemplateValidationRequest - a model defined in OpenAPI

        :param html_body: The html_body of this TemplateValidationRequest.
        :param inline_css_for_html_test_render: The inline_css_for_html_test_render of this TemplateValidationRequest.
        :param subject: The subject of this TemplateValidationRequest.
        :param test_render_model: The test_render_model of this TemplateValidationRequest.
        :param text_body: The text_body of this TemplateValidationRequest.
        """
        self.openapi_types = {
            'html_body': str,
            'inline_css_for_html_test_render': bool,
            'subject': str,
            'test_render_model': object,
            'text_body': str
        }

        self.attribute_map = {
            'html_body': 'HtmlBody',
            'inline_css_for_html_test_render': 'InlineCssForHtmlTestRender',
            'subject': 'Subject',
            'test_render_model': 'TestRenderModel',
            'text_body': 'TextBody'
        }

        self._html_body = html_body
        self._inline_css_for_html_test_render = inline_css_for_html_test_render
        self._subject = subject
        self._test_render_model = test_render_model
        self._text_body = text_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateValidationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateValidationRequest of this TemplateValidationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_body(self):
        """Gets the html_body of this TemplateValidationRequest.

        The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :return: The html_body of this TemplateValidationRequest.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this TemplateValidationRequest.

        The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :param html_body: The html_body of this TemplateValidationRequest.
        :type html_body: str
        """

        self._html_body = html_body

    @property
    def inline_css_for_html_test_render(self):
        """Gets the inline_css_for_html_test_render of this TemplateValidationRequest.

        When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 

        :return: The inline_css_for_html_test_render of this TemplateValidationRequest.
        :rtype: bool
        """
        return self._inline_css_for_html_test_render

    @inline_css_for_html_test_render.setter
    def inline_css_for_html_test_render(self, inline_css_for_html_test_render):
        """Sets the inline_css_for_html_test_render of this TemplateValidationRequest.

        When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 

        :param inline_css_for_html_test_render: The inline_css_for_html_test_render of this TemplateValidationRequest.
        :type inline_css_for_html_test_render: bool
        """

        self._inline_css_for_html_test_render = inline_css_for_html_test_render

    @property
    def subject(self):
        """Gets the subject of this TemplateValidationRequest.

        The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :return: The subject of this TemplateValidationRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TemplateValidationRequest.

        The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :param subject: The subject of this TemplateValidationRequest.
        :type subject: str
        """

        self._subject = subject

    @property
    def test_render_model(self):
        """Gets the test_render_model of this TemplateValidationRequest.

        The model to be used when rendering test content.

        :return: The test_render_model of this TemplateValidationRequest.
        :rtype: object
        """
        return self._test_render_model

    @test_render_model.setter
    def test_render_model(self, test_render_model):
        """Sets the test_render_model of this TemplateValidationRequest.

        The model to be used when rendering test content.

        :param test_render_model: The test_render_model of this TemplateValidationRequest.
        :type test_render_model: object
        """

        self._test_render_model = test_render_model

    @property
    def text_body(self):
        """Gets the text_body of this TemplateValidationRequest.

        The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 

        :return: The text_body of this TemplateValidationRequest.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this TemplateValidationRequest.

        The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 

        :param text_body: The text_body of this TemplateValidationRequest.
        :type text_body: str
        """

        self._text_body = text_body
