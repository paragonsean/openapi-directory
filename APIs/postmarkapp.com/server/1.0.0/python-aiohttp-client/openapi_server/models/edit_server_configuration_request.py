# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EditServerConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounce_hook_url: str=None, click_hook_url: str=None, color: str=None, delivery_hook_url: str=None, inbound_domain: str=None, inbound_hook_url: str=None, inbound_spam_threshold: int=None, name: str=None, open_hook_url: str=None, post_first_open_only: bool=None, raw_email_enabled: bool=None, smtp_api_activated: bool=None, track_links: str=None, track_opens: bool=None):
        """EditServerConfigurationRequest - a model defined in OpenAPI

        :param bounce_hook_url: The bounce_hook_url of this EditServerConfigurationRequest.
        :param click_hook_url: The click_hook_url of this EditServerConfigurationRequest.
        :param color: The color of this EditServerConfigurationRequest.
        :param delivery_hook_url: The delivery_hook_url of this EditServerConfigurationRequest.
        :param inbound_domain: The inbound_domain of this EditServerConfigurationRequest.
        :param inbound_hook_url: The inbound_hook_url of this EditServerConfigurationRequest.
        :param inbound_spam_threshold: The inbound_spam_threshold of this EditServerConfigurationRequest.
        :param name: The name of this EditServerConfigurationRequest.
        :param open_hook_url: The open_hook_url of this EditServerConfigurationRequest.
        :param post_first_open_only: The post_first_open_only of this EditServerConfigurationRequest.
        :param raw_email_enabled: The raw_email_enabled of this EditServerConfigurationRequest.
        :param smtp_api_activated: The smtp_api_activated of this EditServerConfigurationRequest.
        :param track_links: The track_links of this EditServerConfigurationRequest.
        :param track_opens: The track_opens of this EditServerConfigurationRequest.
        """
        self.openapi_types = {
            'bounce_hook_url': str,
            'click_hook_url': str,
            'color': str,
            'delivery_hook_url': str,
            'inbound_domain': str,
            'inbound_hook_url': str,
            'inbound_spam_threshold': int,
            'name': str,
            'open_hook_url': str,
            'post_first_open_only': bool,
            'raw_email_enabled': bool,
            'smtp_api_activated': bool,
            'track_links': str,
            'track_opens': bool
        }

        self.attribute_map = {
            'bounce_hook_url': 'BounceHookUrl',
            'click_hook_url': 'ClickHookUrl',
            'color': 'Color',
            'delivery_hook_url': 'DeliveryHookUrl',
            'inbound_domain': 'InboundDomain',
            'inbound_hook_url': 'InboundHookUrl',
            'inbound_spam_threshold': 'InboundSpamThreshold',
            'name': 'Name',
            'open_hook_url': 'OpenHookUrl',
            'post_first_open_only': 'PostFirstOpenOnly',
            'raw_email_enabled': 'RawEmailEnabled',
            'smtp_api_activated': 'SmtpApiActivated',
            'track_links': 'TrackLinks',
            'track_opens': 'TrackOpens'
        }

        self._bounce_hook_url = bounce_hook_url
        self._click_hook_url = click_hook_url
        self._color = color
        self._delivery_hook_url = delivery_hook_url
        self._inbound_domain = inbound_domain
        self._inbound_hook_url = inbound_hook_url
        self._inbound_spam_threshold = inbound_spam_threshold
        self._name = name
        self._open_hook_url = open_hook_url
        self._post_first_open_only = post_first_open_only
        self._raw_email_enabled = raw_email_enabled
        self._smtp_api_activated = smtp_api_activated
        self._track_links = track_links
        self._track_opens = track_opens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditServerConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditServerConfigurationRequest of this EditServerConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounce_hook_url(self):
        """Gets the bounce_hook_url of this EditServerConfigurationRequest.


        :return: The bounce_hook_url of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._bounce_hook_url

    @bounce_hook_url.setter
    def bounce_hook_url(self, bounce_hook_url):
        """Sets the bounce_hook_url of this EditServerConfigurationRequest.


        :param bounce_hook_url: The bounce_hook_url of this EditServerConfigurationRequest.
        :type bounce_hook_url: str
        """

        self._bounce_hook_url = bounce_hook_url

    @property
    def click_hook_url(self):
        """Gets the click_hook_url of this EditServerConfigurationRequest.

        Webhook url allowing real-time notification when tracked links are clicked.

        :return: The click_hook_url of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._click_hook_url

    @click_hook_url.setter
    def click_hook_url(self, click_hook_url):
        """Sets the click_hook_url of this EditServerConfigurationRequest.

        Webhook url allowing real-time notification when tracked links are clicked.

        :param click_hook_url: The click_hook_url of this EditServerConfigurationRequest.
        :type click_hook_url: str
        """

        self._click_hook_url = click_hook_url

    @property
    def color(self):
        """Gets the color of this EditServerConfigurationRequest.


        :return: The color of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this EditServerConfigurationRequest.


        :param color: The color of this EditServerConfigurationRequest.
        :type color: str
        """
        allowed_values = ["purple", "blue", "turqoise", "green", "red", "yellow", "grey"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def delivery_hook_url(self):
        """Gets the delivery_hook_url of this EditServerConfigurationRequest.


        :return: The delivery_hook_url of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._delivery_hook_url

    @delivery_hook_url.setter
    def delivery_hook_url(self, delivery_hook_url):
        """Sets the delivery_hook_url of this EditServerConfigurationRequest.


        :param delivery_hook_url: The delivery_hook_url of this EditServerConfigurationRequest.
        :type delivery_hook_url: str
        """

        self._delivery_hook_url = delivery_hook_url

    @property
    def inbound_domain(self):
        """Gets the inbound_domain of this EditServerConfigurationRequest.


        :return: The inbound_domain of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._inbound_domain

    @inbound_domain.setter
    def inbound_domain(self, inbound_domain):
        """Sets the inbound_domain of this EditServerConfigurationRequest.


        :param inbound_domain: The inbound_domain of this EditServerConfigurationRequest.
        :type inbound_domain: str
        """

        self._inbound_domain = inbound_domain

    @property
    def inbound_hook_url(self):
        """Gets the inbound_hook_url of this EditServerConfigurationRequest.


        :return: The inbound_hook_url of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._inbound_hook_url

    @inbound_hook_url.setter
    def inbound_hook_url(self, inbound_hook_url):
        """Sets the inbound_hook_url of this EditServerConfigurationRequest.


        :param inbound_hook_url: The inbound_hook_url of this EditServerConfigurationRequest.
        :type inbound_hook_url: str
        """

        self._inbound_hook_url = inbound_hook_url

    @property
    def inbound_spam_threshold(self):
        """Gets the inbound_spam_threshold of this EditServerConfigurationRequest.


        :return: The inbound_spam_threshold of this EditServerConfigurationRequest.
        :rtype: int
        """
        return self._inbound_spam_threshold

    @inbound_spam_threshold.setter
    def inbound_spam_threshold(self, inbound_spam_threshold):
        """Sets the inbound_spam_threshold of this EditServerConfigurationRequest.


        :param inbound_spam_threshold: The inbound_spam_threshold of this EditServerConfigurationRequest.
        :type inbound_spam_threshold: int
        """

        self._inbound_spam_threshold = inbound_spam_threshold

    @property
    def name(self):
        """Gets the name of this EditServerConfigurationRequest.


        :return: The name of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditServerConfigurationRequest.


        :param name: The name of this EditServerConfigurationRequest.
        :type name: str
        """

        self._name = name

    @property
    def open_hook_url(self):
        """Gets the open_hook_url of this EditServerConfigurationRequest.


        :return: The open_hook_url of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._open_hook_url

    @open_hook_url.setter
    def open_hook_url(self, open_hook_url):
        """Sets the open_hook_url of this EditServerConfigurationRequest.


        :param open_hook_url: The open_hook_url of this EditServerConfigurationRequest.
        :type open_hook_url: str
        """

        self._open_hook_url = open_hook_url

    @property
    def post_first_open_only(self):
        """Gets the post_first_open_only of this EditServerConfigurationRequest.


        :return: The post_first_open_only of this EditServerConfigurationRequest.
        :rtype: bool
        """
        return self._post_first_open_only

    @post_first_open_only.setter
    def post_first_open_only(self, post_first_open_only):
        """Sets the post_first_open_only of this EditServerConfigurationRequest.


        :param post_first_open_only: The post_first_open_only of this EditServerConfigurationRequest.
        :type post_first_open_only: bool
        """

        self._post_first_open_only = post_first_open_only

    @property
    def raw_email_enabled(self):
        """Gets the raw_email_enabled of this EditServerConfigurationRequest.


        :return: The raw_email_enabled of this EditServerConfigurationRequest.
        :rtype: bool
        """
        return self._raw_email_enabled

    @raw_email_enabled.setter
    def raw_email_enabled(self, raw_email_enabled):
        """Sets the raw_email_enabled of this EditServerConfigurationRequest.


        :param raw_email_enabled: The raw_email_enabled of this EditServerConfigurationRequest.
        :type raw_email_enabled: bool
        """

        self._raw_email_enabled = raw_email_enabled

    @property
    def smtp_api_activated(self):
        """Gets the smtp_api_activated of this EditServerConfigurationRequest.


        :return: The smtp_api_activated of this EditServerConfigurationRequest.
        :rtype: bool
        """
        return self._smtp_api_activated

    @smtp_api_activated.setter
    def smtp_api_activated(self, smtp_api_activated):
        """Sets the smtp_api_activated of this EditServerConfigurationRequest.


        :param smtp_api_activated: The smtp_api_activated of this EditServerConfigurationRequest.
        :type smtp_api_activated: bool
        """

        self._smtp_api_activated = smtp_api_activated

    @property
    def track_links(self):
        """Gets the track_links of this EditServerConfigurationRequest.


        :return: The track_links of this EditServerConfigurationRequest.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """Sets the track_links of this EditServerConfigurationRequest.


        :param track_links: The track_links of this EditServerConfigurationRequest.
        :type track_links: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]  # noqa: E501
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def track_opens(self):
        """Gets the track_opens of this EditServerConfigurationRequest.


        :return: The track_opens of this EditServerConfigurationRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """Sets the track_opens of this EditServerConfigurationRequest.


        :param track_opens: The track_opens of this EditServerConfigurationRequest.
        :type track_opens: bool
        """

        self._track_opens = track_opens
