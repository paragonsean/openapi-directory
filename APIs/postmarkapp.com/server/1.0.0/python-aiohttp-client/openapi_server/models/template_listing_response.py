# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_record_response import TemplateRecordResponse
from openapi_server import util


class TemplateListingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, templates_api: List[TemplateRecordResponse]=None, total_count: float=None):
        """TemplateListingResponse - a model defined in OpenAPI

        :param templates_api: The templates_api of this TemplateListingResponse.
        :param total_count: The total_count of this TemplateListingResponse.
        """
        self.openapi_types = {
            'templates_api': List[TemplateRecordResponse],
            'total_count': float
        }

        self.attribute_map = {
            'templates_api': 'Templates API',
            'total_count': 'TotalCount'
        }

        self._templates_api = templates_api
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateListingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateListingResponse of this TemplateListingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def templates_api(self):
        """Gets the templates_api of this TemplateListingResponse.

        Basic information for each Template returned from the query.

        :return: The templates_api of this TemplateListingResponse.
        :rtype: List[TemplateRecordResponse]
        """
        return self._templates_api

    @templates_api.setter
    def templates_api(self, templates_api):
        """Sets the templates_api of this TemplateListingResponse.

        Basic information for each Template returned from the query.

        :param templates_api: The templates_api of this TemplateListingResponse.
        :type templates_api: List[TemplateRecordResponse]
        """

        self._templates_api = templates_api

    @property
    def total_count(self):
        """Gets the total_count of this TemplateListingResponse.

        The total number of Templates API associated with this server.

        :return: The total_count of this TemplateListingResponse.
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this TemplateListingResponse.

        The total number of Templates API associated with this server.

        :param total_count: The total_count of this TemplateListingResponse.
        :type total_count: float
        """

        self._total_count = total_count
