# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.email_name_address_pair import EmailNameAddressPair
from openapi_server import util


class OutboundMessageDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, bcc: List[EmailNameAddressPair]=None, cc: List[EmailNameAddressPair]=None, _from: str=None, message_id: str=None, received_at: datetime=None, recipients: List[str]=None, status: str=None, subject: str=None, tag: str=None, to: List[EmailNameAddressPair]=None, track_links: str=None, track_opens: bool=None):
        """OutboundMessageDetail - a model defined in OpenAPI

        :param attachments: The attachments of this OutboundMessageDetail.
        :param bcc: The bcc of this OutboundMessageDetail.
        :param cc: The cc of this OutboundMessageDetail.
        :param _from: The _from of this OutboundMessageDetail.
        :param message_id: The message_id of this OutboundMessageDetail.
        :param received_at: The received_at of this OutboundMessageDetail.
        :param recipients: The recipients of this OutboundMessageDetail.
        :param status: The status of this OutboundMessageDetail.
        :param subject: The subject of this OutboundMessageDetail.
        :param tag: The tag of this OutboundMessageDetail.
        :param to: The to of this OutboundMessageDetail.
        :param track_links: The track_links of this OutboundMessageDetail.
        :param track_opens: The track_opens of this OutboundMessageDetail.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'bcc': List[EmailNameAddressPair],
            'cc': List[EmailNameAddressPair],
            '_from': str,
            'message_id': str,
            'received_at': datetime,
            'recipients': List[str],
            'status': str,
            'subject': str,
            'tag': str,
            'to': List[EmailNameAddressPair],
            'track_links': str,
            'track_opens': bool
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'bcc': 'Bcc',
            'cc': 'Cc',
            '_from': 'From',
            'message_id': 'MessageID',
            'received_at': 'ReceivedAt',
            'recipients': 'Recipients',
            'status': 'Status',
            'subject': 'Subject',
            'tag': 'Tag',
            'to': 'To',
            'track_links': 'TrackLinks',
            'track_opens': 'TrackOpens'
        }

        self._attachments = attachments
        self._bcc = bcc
        self._cc = cc
        self.__from = _from
        self._message_id = message_id
        self._received_at = received_at
        self._recipients = recipients
        self._status = status
        self._subject = subject
        self._tag = tag
        self._to = to
        self._track_links = track_links
        self._track_opens = track_opens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutboundMessageDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutboundMessageDetail of this OutboundMessageDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this OutboundMessageDetail.


        :return: The attachments of this OutboundMessageDetail.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this OutboundMessageDetail.


        :param attachments: The attachments of this OutboundMessageDetail.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def bcc(self):
        """Gets the bcc of this OutboundMessageDetail.


        :return: The bcc of this OutboundMessageDetail.
        :rtype: List[EmailNameAddressPair]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this OutboundMessageDetail.


        :param bcc: The bcc of this OutboundMessageDetail.
        :type bcc: List[EmailNameAddressPair]
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this OutboundMessageDetail.


        :return: The cc of this OutboundMessageDetail.
        :rtype: List[EmailNameAddressPair]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this OutboundMessageDetail.


        :param cc: The cc of this OutboundMessageDetail.
        :type cc: List[EmailNameAddressPair]
        """

        self._cc = cc

    @property
    def _from(self):
        """Gets the _from of this OutboundMessageDetail.


        :return: The _from of this OutboundMessageDetail.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this OutboundMessageDetail.


        :param _from: The _from of this OutboundMessageDetail.
        :type _from: str
        """

        self.__from = _from

    @property
    def message_id(self):
        """Gets the message_id of this OutboundMessageDetail.


        :return: The message_id of this OutboundMessageDetail.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this OutboundMessageDetail.


        :param message_id: The message_id of this OutboundMessageDetail.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def received_at(self):
        """Gets the received_at of this OutboundMessageDetail.


        :return: The received_at of this OutboundMessageDetail.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this OutboundMessageDetail.


        :param received_at: The received_at of this OutboundMessageDetail.
        :type received_at: datetime
        """

        self._received_at = received_at

    @property
    def recipients(self):
        """Gets the recipients of this OutboundMessageDetail.


        :return: The recipients of this OutboundMessageDetail.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this OutboundMessageDetail.


        :param recipients: The recipients of this OutboundMessageDetail.
        :type recipients: List[str]
        """

        self._recipients = recipients

    @property
    def status(self):
        """Gets the status of this OutboundMessageDetail.


        :return: The status of this OutboundMessageDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OutboundMessageDetail.


        :param status: The status of this OutboundMessageDetail.
        :type status: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this OutboundMessageDetail.


        :return: The subject of this OutboundMessageDetail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this OutboundMessageDetail.


        :param subject: The subject of this OutboundMessageDetail.
        :type subject: str
        """

        self._subject = subject

    @property
    def tag(self):
        """Gets the tag of this OutboundMessageDetail.


        :return: The tag of this OutboundMessageDetail.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this OutboundMessageDetail.


        :param tag: The tag of this OutboundMessageDetail.
        :type tag: str
        """

        self._tag = tag

    @property
    def to(self):
        """Gets the to of this OutboundMessageDetail.


        :return: The to of this OutboundMessageDetail.
        :rtype: List[EmailNameAddressPair]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this OutboundMessageDetail.


        :param to: The to of this OutboundMessageDetail.
        :type to: List[EmailNameAddressPair]
        """

        self._to = to

    @property
    def track_links(self):
        """Gets the track_links of this OutboundMessageDetail.


        :return: The track_links of this OutboundMessageDetail.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """Sets the track_links of this OutboundMessageDetail.


        :param track_links: The track_links of this OutboundMessageDetail.
        :type track_links: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]  # noqa: E501
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def track_opens(self):
        """Gets the track_opens of this OutboundMessageDetail.


        :return: The track_opens of this OutboundMessageDetail.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """Sets the track_opens of this OutboundMessageDetail.


        :param track_opens: The track_opens of this OutboundMessageDetail.
        :type track_opens: bool
        """

        self._track_opens = track_opens
