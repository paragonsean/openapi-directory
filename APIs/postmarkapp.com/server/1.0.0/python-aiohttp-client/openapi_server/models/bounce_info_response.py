# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BounceInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounced_at: datetime=None, can_activate: bool=None, content: str=None, description: str=None, details: str=None, dump_available: bool=None, email: str=None, id: str=None, inactive: bool=None, message_id: str=None, name: str=None, subject: str=None, tag: str=None, type: str=None, type_code: int=None):
        """BounceInfoResponse - a model defined in OpenAPI

        :param bounced_at: The bounced_at of this BounceInfoResponse.
        :param can_activate: The can_activate of this BounceInfoResponse.
        :param content: The content of this BounceInfoResponse.
        :param description: The description of this BounceInfoResponse.
        :param details: The details of this BounceInfoResponse.
        :param dump_available: The dump_available of this BounceInfoResponse.
        :param email: The email of this BounceInfoResponse.
        :param id: The id of this BounceInfoResponse.
        :param inactive: The inactive of this BounceInfoResponse.
        :param message_id: The message_id of this BounceInfoResponse.
        :param name: The name of this BounceInfoResponse.
        :param subject: The subject of this BounceInfoResponse.
        :param tag: The tag of this BounceInfoResponse.
        :param type: The type of this BounceInfoResponse.
        :param type_code: The type_code of this BounceInfoResponse.
        """
        self.openapi_types = {
            'bounced_at': datetime,
            'can_activate': bool,
            'content': str,
            'description': str,
            'details': str,
            'dump_available': bool,
            'email': str,
            'id': str,
            'inactive': bool,
            'message_id': str,
            'name': str,
            'subject': str,
            'tag': str,
            'type': str,
            'type_code': int
        }

        self.attribute_map = {
            'bounced_at': 'BouncedAt',
            'can_activate': 'CanActivate',
            'content': 'Content',
            'description': 'Description',
            'details': 'Details',
            'dump_available': 'DumpAvailable',
            'email': 'Email',
            'id': 'ID',
            'inactive': 'Inactive',
            'message_id': 'MessageID',
            'name': 'Name',
            'subject': 'Subject',
            'tag': 'Tag',
            'type': 'Type',
            'type_code': 'TypeCode'
        }

        self._bounced_at = bounced_at
        self._can_activate = can_activate
        self._content = content
        self._description = description
        self._details = details
        self._dump_available = dump_available
        self._email = email
        self._id = id
        self._inactive = inactive
        self._message_id = message_id
        self._name = name
        self._subject = subject
        self._tag = tag
        self._type = type
        self._type_code = type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BounceInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BounceInfoResponse of this BounceInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounced_at(self):
        """Gets the bounced_at of this BounceInfoResponse.


        :return: The bounced_at of this BounceInfoResponse.
        :rtype: datetime
        """
        return self._bounced_at

    @bounced_at.setter
    def bounced_at(self, bounced_at):
        """Sets the bounced_at of this BounceInfoResponse.


        :param bounced_at: The bounced_at of this BounceInfoResponse.
        :type bounced_at: datetime
        """

        self._bounced_at = bounced_at

    @property
    def can_activate(self):
        """Gets the can_activate of this BounceInfoResponse.


        :return: The can_activate of this BounceInfoResponse.
        :rtype: bool
        """
        return self._can_activate

    @can_activate.setter
    def can_activate(self, can_activate):
        """Sets the can_activate of this BounceInfoResponse.


        :param can_activate: The can_activate of this BounceInfoResponse.
        :type can_activate: bool
        """

        self._can_activate = can_activate

    @property
    def content(self):
        """Gets the content of this BounceInfoResponse.


        :return: The content of this BounceInfoResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BounceInfoResponse.


        :param content: The content of this BounceInfoResponse.
        :type content: str
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this BounceInfoResponse.


        :return: The description of this BounceInfoResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BounceInfoResponse.


        :param description: The description of this BounceInfoResponse.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this BounceInfoResponse.


        :return: The details of this BounceInfoResponse.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BounceInfoResponse.


        :param details: The details of this BounceInfoResponse.
        :type details: str
        """

        self._details = details

    @property
    def dump_available(self):
        """Gets the dump_available of this BounceInfoResponse.


        :return: The dump_available of this BounceInfoResponse.
        :rtype: bool
        """
        return self._dump_available

    @dump_available.setter
    def dump_available(self, dump_available):
        """Sets the dump_available of this BounceInfoResponse.


        :param dump_available: The dump_available of this BounceInfoResponse.
        :type dump_available: bool
        """

        self._dump_available = dump_available

    @property
    def email(self):
        """Gets the email of this BounceInfoResponse.


        :return: The email of this BounceInfoResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BounceInfoResponse.


        :param email: The email of this BounceInfoResponse.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this BounceInfoResponse.


        :return: The id of this BounceInfoResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BounceInfoResponse.


        :param id: The id of this BounceInfoResponse.
        :type id: str
        """

        self._id = id

    @property
    def inactive(self):
        """Gets the inactive of this BounceInfoResponse.


        :return: The inactive of this BounceInfoResponse.
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this BounceInfoResponse.


        :param inactive: The inactive of this BounceInfoResponse.
        :type inactive: bool
        """

        self._inactive = inactive

    @property
    def message_id(self):
        """Gets the message_id of this BounceInfoResponse.


        :return: The message_id of this BounceInfoResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this BounceInfoResponse.


        :param message_id: The message_id of this BounceInfoResponse.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def name(self):
        """Gets the name of this BounceInfoResponse.


        :return: The name of this BounceInfoResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BounceInfoResponse.


        :param name: The name of this BounceInfoResponse.
        :type name: str
        """

        self._name = name

    @property
    def subject(self):
        """Gets the subject of this BounceInfoResponse.


        :return: The subject of this BounceInfoResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this BounceInfoResponse.


        :param subject: The subject of this BounceInfoResponse.
        :type subject: str
        """

        self._subject = subject

    @property
    def tag(self):
        """Gets the tag of this BounceInfoResponse.


        :return: The tag of this BounceInfoResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this BounceInfoResponse.


        :param tag: The tag of this BounceInfoResponse.
        :type tag: str
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this BounceInfoResponse.


        :return: The type of this BounceInfoResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BounceInfoResponse.


        :param type: The type of this BounceInfoResponse.
        :type type: str
        """

        self._type = type

    @property
    def type_code(self):
        """Gets the type_code of this BounceInfoResponse.


        :return: The type_code of this BounceInfoResponse.
        :rtype: int
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this BounceInfoResponse.


        :param type_code: The type_code of this BounceInfoResponse.
        :type type_code: int
        """

        self._type_code = type_code
