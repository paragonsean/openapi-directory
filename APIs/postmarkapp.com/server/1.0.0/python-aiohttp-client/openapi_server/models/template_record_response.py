# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateRecordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, alias: str=None, name: str=None, template_id: float=None):
        """TemplateRecordResponse - a model defined in OpenAPI

        :param active: The active of this TemplateRecordResponse.
        :param alias: The alias of this TemplateRecordResponse.
        :param name: The name of this TemplateRecordResponse.
        :param template_id: The template_id of this TemplateRecordResponse.
        """
        self.openapi_types = {
            'active': bool,
            'alias': str,
            'name': str,
            'template_id': float
        }

        self.attribute_map = {
            'active': 'Active',
            'alias': 'Alias',
            'name': 'Name',
            'template_id': 'TemplateId'
        }

        self._active = active
        self._alias = alias
        self._name = name
        self._template_id = template_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateRecordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateRecordResponse of this TemplateRecordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this TemplateRecordResponse.

        True if this template is currently available for use.

        :return: The active of this TemplateRecordResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TemplateRecordResponse.

        True if this template is currently available for use.

        :param active: The active of this TemplateRecordResponse.
        :type active: bool
        """

        self._active = active

    @property
    def alias(self):
        """Gets the alias of this TemplateRecordResponse.

        The user-supplied alias for this template.

        :return: The alias of this TemplateRecordResponse.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this TemplateRecordResponse.

        The user-supplied alias for this template.

        :param alias: The alias of this TemplateRecordResponse.
        :type alias: str
        """

        self._alias = alias

    @property
    def name(self):
        """Gets the name of this TemplateRecordResponse.

        The display name for this template.

        :return: The name of this TemplateRecordResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateRecordResponse.

        The display name for this template.

        :param name: The name of this TemplateRecordResponse.
        :type name: str
        """

        self._name = name

    @property
    def template_id(self):
        """Gets the template_id of this TemplateRecordResponse.

        The associated ID for this template.

        :return: The template_id of this TemplateRecordResponse.
        :rtype: float
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this TemplateRecordResponse.

        The associated ID for this template.

        :param template_id: The template_id of this TemplateRecordResponse.
        :type template_id: float
        """

        self._template_id = template_id
