# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_message_click_event_information import ExtendedMessageClickEventInformation
from openapi_server import util


class MessageClickSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clicks: List[ExtendedMessageClickEventInformation]=None, total_count: int=None):
        """MessageClickSearchResponse - a model defined in OpenAPI

        :param clicks: The clicks of this MessageClickSearchResponse.
        :param total_count: The total_count of this MessageClickSearchResponse.
        """
        self.openapi_types = {
            'clicks': List[ExtendedMessageClickEventInformation],
            'total_count': int
        }

        self.attribute_map = {
            'clicks': 'Clicks',
            'total_count': 'TotalCount'
        }

        self._clicks = clicks
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageClickSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageClickSearchResponse of this MessageClickSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clicks(self):
        """Gets the clicks of this MessageClickSearchResponse.


        :return: The clicks of this MessageClickSearchResponse.
        :rtype: List[ExtendedMessageClickEventInformation]
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this MessageClickSearchResponse.


        :param clicks: The clicks of this MessageClickSearchResponse.
        :type clicks: List[ExtendedMessageClickEventInformation]
        """

        self._clicks = clicks

    @property
    def total_count(self):
        """Gets the total_count of this MessageClickSearchResponse.


        :return: The total_count of this MessageClickSearchResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this MessageClickSearchResponse.


        :param total_count: The total_count of this MessageClickSearchResponse.
        :type total_count: int
        """

        self._total_count = total_count
