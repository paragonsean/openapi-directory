# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateDetailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, alias: str=None, associated_server_id: int=None, html_body: str=None, name: str=None, subject: str=None, template_id: int=None, text_body: str=None):
        """TemplateDetailResponse - a model defined in OpenAPI

        :param active: The active of this TemplateDetailResponse.
        :param alias: The alias of this TemplateDetailResponse.
        :param associated_server_id: The associated_server_id of this TemplateDetailResponse.
        :param html_body: The html_body of this TemplateDetailResponse.
        :param name: The name of this TemplateDetailResponse.
        :param subject: The subject of this TemplateDetailResponse.
        :param template_id: The template_id of this TemplateDetailResponse.
        :param text_body: The text_body of this TemplateDetailResponse.
        """
        self.openapi_types = {
            'active': bool,
            'alias': str,
            'associated_server_id': int,
            'html_body': str,
            'name': str,
            'subject': str,
            'template_id': int,
            'text_body': str
        }

        self.attribute_map = {
            'active': 'Active',
            'alias': 'Alias',
            'associated_server_id': 'AssociatedServerId',
            'html_body': 'HtmlBody',
            'name': 'Name',
            'subject': 'Subject',
            'template_id': 'TemplateID',
            'text_body': 'TextBody'
        }

        self._active = active
        self._alias = alias
        self._associated_server_id = associated_server_id
        self._html_body = html_body
        self._name = name
        self._subject = subject
        self._template_id = template_id
        self._text_body = text_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateDetailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateDetailResponse of this TemplateDetailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this TemplateDetailResponse.

        Indicates that this template may be used for sending email.

        :return: The active of this TemplateDetailResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TemplateDetailResponse.

        Indicates that this template may be used for sending email.

        :param active: The active of this TemplateDetailResponse.
        :type active: bool
        """

        self._active = active

    @property
    def alias(self):
        """Gets the alias of this TemplateDetailResponse.

        The user-supplied alias for this template.

        :return: The alias of this TemplateDetailResponse.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this TemplateDetailResponse.

        The user-supplied alias for this template.

        :param alias: The alias of this TemplateDetailResponse.
        :type alias: str
        """

        self._alias = alias

    @property
    def associated_server_id(self):
        """Gets the associated_server_id of this TemplateDetailResponse.

        The ID of the Server with which this template is associated.

        :return: The associated_server_id of this TemplateDetailResponse.
        :rtype: int
        """
        return self._associated_server_id

    @associated_server_id.setter
    def associated_server_id(self, associated_server_id):
        """Sets the associated_server_id of this TemplateDetailResponse.

        The ID of the Server with which this template is associated.

        :param associated_server_id: The associated_server_id of this TemplateDetailResponse.
        :type associated_server_id: int
        """

        self._associated_server_id = associated_server_id

    @property
    def html_body(self):
        """Gets the html_body of this TemplateDetailResponse.

        The content to use for the HtmlBody when this template is used to send email.

        :return: The html_body of this TemplateDetailResponse.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this TemplateDetailResponse.

        The content to use for the HtmlBody when this template is used to send email.

        :param html_body: The html_body of this TemplateDetailResponse.
        :type html_body: str
        """

        self._html_body = html_body

    @property
    def name(self):
        """Gets the name of this TemplateDetailResponse.

        The display name for the template.

        :return: The name of this TemplateDetailResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateDetailResponse.

        The display name for the template.

        :param name: The name of this TemplateDetailResponse.
        :type name: str
        """

        self._name = name

    @property
    def subject(self):
        """Gets the subject of this TemplateDetailResponse.

        The content to use for the Subject when this template is used to send email.

        :return: The subject of this TemplateDetailResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TemplateDetailResponse.

        The content to use for the Subject when this template is used to send email.

        :param subject: The subject of this TemplateDetailResponse.
        :type subject: str
        """

        self._subject = subject

    @property
    def template_id(self):
        """Gets the template_id of this TemplateDetailResponse.

        The ID associated with the template.

        :return: The template_id of this TemplateDetailResponse.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this TemplateDetailResponse.

        The ID associated with the template.

        :param template_id: The template_id of this TemplateDetailResponse.
        :type template_id: int
        """

        self._template_id = template_id

    @property
    def text_body(self):
        """Gets the text_body of this TemplateDetailResponse.

        The content to use for the TextBody when this template is used to send email.

        :return: The text_body of this TemplateDetailResponse.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this TemplateDetailResponse.

        The content to use for the TextBody when this template is used to send email.

        :param text_body: The text_body of this TemplateDetailResponse.
        :type text_body: str
        """

        self._text_body = text_body
