# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_validation_result import TemplateValidationResult
from openapi_server import util


class TemplateValidationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_content_is_valid: bool=None, html_body: TemplateValidationResult=None, subject: TemplateValidationResult=None, suggested_template_model: object=None, text_body: TemplateValidationResult=None):
        """TemplateValidationResponse - a model defined in OpenAPI

        :param all_content_is_valid: The all_content_is_valid of this TemplateValidationResponse.
        :param html_body: The html_body of this TemplateValidationResponse.
        :param subject: The subject of this TemplateValidationResponse.
        :param suggested_template_model: The suggested_template_model of this TemplateValidationResponse.
        :param text_body: The text_body of this TemplateValidationResponse.
        """
        self.openapi_types = {
            'all_content_is_valid': bool,
            'html_body': TemplateValidationResult,
            'subject': TemplateValidationResult,
            'suggested_template_model': object,
            'text_body': TemplateValidationResult
        }

        self.attribute_map = {
            'all_content_is_valid': 'AllContentIsValid',
            'html_body': 'HtmlBody',
            'subject': 'Subject',
            'suggested_template_model': 'SuggestedTemplateModel',
            'text_body': 'TextBody'
        }

        self._all_content_is_valid = all_content_is_valid
        self._html_body = html_body
        self._subject = subject
        self._suggested_template_model = suggested_template_model
        self._text_body = text_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateValidationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateValidationResponse of this TemplateValidationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_content_is_valid(self):
        """Gets the all_content_is_valid of this TemplateValidationResponse.


        :return: The all_content_is_valid of this TemplateValidationResponse.
        :rtype: bool
        """
        return self._all_content_is_valid

    @all_content_is_valid.setter
    def all_content_is_valid(self, all_content_is_valid):
        """Sets the all_content_is_valid of this TemplateValidationResponse.


        :param all_content_is_valid: The all_content_is_valid of this TemplateValidationResponse.
        :type all_content_is_valid: bool
        """

        self._all_content_is_valid = all_content_is_valid

    @property
    def html_body(self):
        """Gets the html_body of this TemplateValidationResponse.


        :return: The html_body of this TemplateValidationResponse.
        :rtype: TemplateValidationResult
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this TemplateValidationResponse.


        :param html_body: The html_body of this TemplateValidationResponse.
        :type html_body: TemplateValidationResult
        """

        self._html_body = html_body

    @property
    def subject(self):
        """Gets the subject of this TemplateValidationResponse.


        :return: The subject of this TemplateValidationResponse.
        :rtype: TemplateValidationResult
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TemplateValidationResponse.


        :param subject: The subject of this TemplateValidationResponse.
        :type subject: TemplateValidationResult
        """

        self._subject = subject

    @property
    def suggested_template_model(self):
        """Gets the suggested_template_model of this TemplateValidationResponse.


        :return: The suggested_template_model of this TemplateValidationResponse.
        :rtype: object
        """
        return self._suggested_template_model

    @suggested_template_model.setter
    def suggested_template_model(self, suggested_template_model):
        """Sets the suggested_template_model of this TemplateValidationResponse.


        :param suggested_template_model: The suggested_template_model of this TemplateValidationResponse.
        :type suggested_template_model: object
        """

        self._suggested_template_model = suggested_template_model

    @property
    def text_body(self):
        """Gets the text_body of this TemplateValidationResponse.


        :return: The text_body of this TemplateValidationResponse.
        :rtype: TemplateValidationResult
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this TemplateValidationResponse.


        :param text_body: The text_body of this TemplateValidationResponse.
        :type text_body: TemplateValidationResult
        """

        self._text_body = text_body
