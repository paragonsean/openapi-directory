# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_message_click_event_information_client import ExtendedMessageClickEventInformationClient
from openapi_server.models.extended_message_click_event_information_geo import ExtendedMessageClickEventInformationGeo
from openapi_server.models.extended_message_click_event_information_os import ExtendedMessageClickEventInformationOS
from openapi_server import util


class ExtendedMessageOpenEventInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client: ExtendedMessageClickEventInformationClient=None, first_open: bool=None, geo: ExtendedMessageClickEventInformationGeo=None, message_id: str=None, os: ExtendedMessageClickEventInformationOS=None, platform: str=None, received_at: datetime=None, recipient: str=None, tag: str=None, user_agent: str=None):
        """ExtendedMessageOpenEventInformation - a model defined in OpenAPI

        :param client: The client of this ExtendedMessageOpenEventInformation.
        :param first_open: The first_open of this ExtendedMessageOpenEventInformation.
        :param geo: The geo of this ExtendedMessageOpenEventInformation.
        :param message_id: The message_id of this ExtendedMessageOpenEventInformation.
        :param os: The os of this ExtendedMessageOpenEventInformation.
        :param platform: The platform of this ExtendedMessageOpenEventInformation.
        :param received_at: The received_at of this ExtendedMessageOpenEventInformation.
        :param recipient: The recipient of this ExtendedMessageOpenEventInformation.
        :param tag: The tag of this ExtendedMessageOpenEventInformation.
        :param user_agent: The user_agent of this ExtendedMessageOpenEventInformation.
        """
        self.openapi_types = {
            'client': ExtendedMessageClickEventInformationClient,
            'first_open': bool,
            'geo': ExtendedMessageClickEventInformationGeo,
            'message_id': str,
            'os': ExtendedMessageClickEventInformationOS,
            'platform': str,
            'received_at': datetime,
            'recipient': str,
            'tag': str,
            'user_agent': str
        }

        self.attribute_map = {
            'client': 'Client',
            'first_open': 'FirstOpen',
            'geo': 'Geo',
            'message_id': 'MessageID',
            'os': 'OS',
            'platform': 'Platform',
            'received_at': 'ReceivedAt',
            'recipient': 'Recipient',
            'tag': 'Tag',
            'user_agent': 'UserAgent'
        }

        self._client = client
        self._first_open = first_open
        self._geo = geo
        self._message_id = message_id
        self._os = os
        self._platform = platform
        self._received_at = received_at
        self._recipient = recipient
        self._tag = tag
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedMessageOpenEventInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedMessageOpenEventInformation of this ExtendedMessageOpenEventInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self):
        """Gets the client of this ExtendedMessageOpenEventInformation.


        :return: The client of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageClickEventInformationClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ExtendedMessageOpenEventInformation.


        :param client: The client of this ExtendedMessageOpenEventInformation.
        :type client: ExtendedMessageClickEventInformationClient
        """

        self._client = client

    @property
    def first_open(self):
        """Gets the first_open of this ExtendedMessageOpenEventInformation.


        :return: The first_open of this ExtendedMessageOpenEventInformation.
        :rtype: bool
        """
        return self._first_open

    @first_open.setter
    def first_open(self, first_open):
        """Sets the first_open of this ExtendedMessageOpenEventInformation.


        :param first_open: The first_open of this ExtendedMessageOpenEventInformation.
        :type first_open: bool
        """

        self._first_open = first_open

    @property
    def geo(self):
        """Gets the geo of this ExtendedMessageOpenEventInformation.


        :return: The geo of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageClickEventInformationGeo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this ExtendedMessageOpenEventInformation.


        :param geo: The geo of this ExtendedMessageOpenEventInformation.
        :type geo: ExtendedMessageClickEventInformationGeo
        """

        self._geo = geo

    @property
    def message_id(self):
        """Gets the message_id of this ExtendedMessageOpenEventInformation.


        :return: The message_id of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ExtendedMessageOpenEventInformation.


        :param message_id: The message_id of this ExtendedMessageOpenEventInformation.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def os(self):
        """Gets the os of this ExtendedMessageOpenEventInformation.


        :return: The os of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageClickEventInformationOS
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ExtendedMessageOpenEventInformation.


        :param os: The os of this ExtendedMessageOpenEventInformation.
        :type os: ExtendedMessageClickEventInformationOS
        """

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this ExtendedMessageOpenEventInformation.


        :return: The platform of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ExtendedMessageOpenEventInformation.


        :param platform: The platform of this ExtendedMessageOpenEventInformation.
        :type platform: str
        """

        self._platform = platform

    @property
    def received_at(self):
        """Gets the received_at of this ExtendedMessageOpenEventInformation.


        :return: The received_at of this ExtendedMessageOpenEventInformation.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this ExtendedMessageOpenEventInformation.


        :param received_at: The received_at of this ExtendedMessageOpenEventInformation.
        :type received_at: datetime
        """

        self._received_at = received_at

    @property
    def recipient(self):
        """Gets the recipient of this ExtendedMessageOpenEventInformation.


        :return: The recipient of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this ExtendedMessageOpenEventInformation.


        :param recipient: The recipient of this ExtendedMessageOpenEventInformation.
        :type recipient: str
        """

        self._recipient = recipient

    @property
    def tag(self):
        """Gets the tag of this ExtendedMessageOpenEventInformation.


        :return: The tag of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ExtendedMessageOpenEventInformation.


        :param tag: The tag of this ExtendedMessageOpenEventInformation.
        :type tag: str
        """

        self._tag = tag

    @property
    def user_agent(self):
        """Gets the user_agent of this ExtendedMessageOpenEventInformation.


        :return: The user_agent of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ExtendedMessageOpenEventInformation.


        :param user_agent: The user_agent of this ExtendedMessageOpenEventInformation.
        :type user_agent: str
        """

        self._user_agent = user_agent
