# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_validation_error import TemplateValidationError
from openapi_server import util


class TemplateValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_is_valid: bool=None, rendered_content: str=None, validation_errors: List[TemplateValidationError]=None):
        """TemplateValidationResult - a model defined in OpenAPI

        :param content_is_valid: The content_is_valid of this TemplateValidationResult.
        :param rendered_content: The rendered_content of this TemplateValidationResult.
        :param validation_errors: The validation_errors of this TemplateValidationResult.
        """
        self.openapi_types = {
            'content_is_valid': bool,
            'rendered_content': str,
            'validation_errors': List[TemplateValidationError]
        }

        self.attribute_map = {
            'content_is_valid': 'ContentIsValid',
            'rendered_content': 'RenderedContent',
            'validation_errors': 'ValidationErrors'
        }

        self._content_is_valid = content_is_valid
        self._rendered_content = rendered_content
        self._validation_errors = validation_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateValidationResult of this TemplateValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_is_valid(self):
        """Gets the content_is_valid of this TemplateValidationResult.


        :return: The content_is_valid of this TemplateValidationResult.
        :rtype: bool
        """
        return self._content_is_valid

    @content_is_valid.setter
    def content_is_valid(self, content_is_valid):
        """Sets the content_is_valid of this TemplateValidationResult.


        :param content_is_valid: The content_is_valid of this TemplateValidationResult.
        :type content_is_valid: bool
        """

        self._content_is_valid = content_is_valid

    @property
    def rendered_content(self):
        """Gets the rendered_content of this TemplateValidationResult.


        :return: The rendered_content of this TemplateValidationResult.
        :rtype: str
        """
        return self._rendered_content

    @rendered_content.setter
    def rendered_content(self, rendered_content):
        """Sets the rendered_content of this TemplateValidationResult.


        :param rendered_content: The rendered_content of this TemplateValidationResult.
        :type rendered_content: str
        """

        self._rendered_content = rendered_content

    @property
    def validation_errors(self):
        """Gets the validation_errors of this TemplateValidationResult.


        :return: The validation_errors of this TemplateValidationResult.
        :rtype: List[TemplateValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this TemplateValidationResult.


        :param validation_errors: The validation_errors of this TemplateValidationResult.
        :type validation_errors: List[TemplateValidationError]
        """

        self._validation_errors = validation_errors
