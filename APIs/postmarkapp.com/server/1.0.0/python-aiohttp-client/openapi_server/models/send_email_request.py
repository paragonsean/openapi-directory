# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.message_header import MessageHeader
from openapi_server import util


class SendEmailRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, bcc: str=None, cc: str=None, _from: str=None, headers: List[MessageHeader]=None, html_body: str=None, reply_to: str=None, subject: str=None, tag: str=None, text_body: str=None, to: str=None, track_links: str=None, track_opens: bool=None):
        """SendEmailRequest - a model defined in OpenAPI

        :param attachments: The attachments of this SendEmailRequest.
        :param bcc: The bcc of this SendEmailRequest.
        :param cc: The cc of this SendEmailRequest.
        :param _from: The _from of this SendEmailRequest.
        :param headers: The headers of this SendEmailRequest.
        :param html_body: The html_body of this SendEmailRequest.
        :param reply_to: The reply_to of this SendEmailRequest.
        :param subject: The subject of this SendEmailRequest.
        :param tag: The tag of this SendEmailRequest.
        :param text_body: The text_body of this SendEmailRequest.
        :param to: The to of this SendEmailRequest.
        :param track_links: The track_links of this SendEmailRequest.
        :param track_opens: The track_opens of this SendEmailRequest.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'bcc': str,
            'cc': str,
            '_from': str,
            'headers': List[MessageHeader],
            'html_body': str,
            'reply_to': str,
            'subject': str,
            'tag': str,
            'text_body': str,
            'to': str,
            'track_links': str,
            'track_opens': bool
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'bcc': 'Bcc',
            'cc': 'Cc',
            '_from': 'From',
            'headers': 'Headers',
            'html_body': 'HtmlBody',
            'reply_to': 'ReplyTo',
            'subject': 'Subject',
            'tag': 'Tag',
            'text_body': 'TextBody',
            'to': 'To',
            'track_links': 'TrackLinks',
            'track_opens': 'TrackOpens'
        }

        self._attachments = attachments
        self._bcc = bcc
        self._cc = cc
        self.__from = _from
        self._headers = headers
        self._html_body = html_body
        self._reply_to = reply_to
        self._subject = subject
        self._tag = tag
        self._text_body = text_body
        self._to = to
        self._track_links = track_links
        self._track_opens = track_opens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendEmailRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendEmailRequest of this SendEmailRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this SendEmailRequest.


        :return: The attachments of this SendEmailRequest.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SendEmailRequest.


        :param attachments: The attachments of this SendEmailRequest.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def bcc(self):
        """Gets the bcc of this SendEmailRequest.

        Bcc recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The bcc of this SendEmailRequest.
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this SendEmailRequest.

        Bcc recipient email address. Multiple addresses are comma seperated. Max 50.

        :param bcc: The bcc of this SendEmailRequest.
        :type bcc: str
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this SendEmailRequest.

        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The cc of this SendEmailRequest.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this SendEmailRequest.

        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :param cc: The cc of this SendEmailRequest.
        :type cc: str
        """

        self._cc = cc

    @property
    def _from(self):
        """Gets the _from of this SendEmailRequest.

        The sender email address. Must have a registered and confirmed Sender Signature.

        :return: The _from of this SendEmailRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendEmailRequest.

        The sender email address. Must have a registered and confirmed Sender Signature.

        :param _from: The _from of this SendEmailRequest.
        :type _from: str
        """

        self.__from = _from

    @property
    def headers(self):
        """Gets the headers of this SendEmailRequest.


        :return: The headers of this SendEmailRequest.
        :rtype: List[MessageHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this SendEmailRequest.


        :param headers: The headers of this SendEmailRequest.
        :type headers: List[MessageHeader]
        """

        self._headers = headers

    @property
    def html_body(self):
        """Gets the html_body of this SendEmailRequest.

        If no TextBody specified HTML email message

        :return: The html_body of this SendEmailRequest.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this SendEmailRequest.

        If no TextBody specified HTML email message

        :param html_body: The html_body of this SendEmailRequest.
        :type html_body: str
        """

        self._html_body = html_body

    @property
    def reply_to(self):
        """Gets the reply_to of this SendEmailRequest.

        Reply To override email address. Defaults to the Reply To set in the sender signature.

        :return: The reply_to of this SendEmailRequest.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this SendEmailRequest.

        Reply To override email address. Defaults to the Reply To set in the sender signature.

        :param reply_to: The reply_to of this SendEmailRequest.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this SendEmailRequest.

        Email Subject

        :return: The subject of this SendEmailRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmailRequest.

        Email Subject

        :param subject: The subject of this SendEmailRequest.
        :type subject: str
        """

        self._subject = subject

    @property
    def tag(self):
        """Gets the tag of this SendEmailRequest.

        Email tag that allows you to categorize outgoing emails and get detailed statistics.

        :return: The tag of this SendEmailRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SendEmailRequest.

        Email tag that allows you to categorize outgoing emails and get detailed statistics.

        :param tag: The tag of this SendEmailRequest.
        :type tag: str
        """

        self._tag = tag

    @property
    def text_body(self):
        """Gets the text_body of this SendEmailRequest.

        If no HtmlBody specified Plain text email message

        :return: The text_body of this SendEmailRequest.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this SendEmailRequest.

        If no HtmlBody specified Plain text email message

        :param text_body: The text_body of this SendEmailRequest.
        :type text_body: str
        """

        self._text_body = text_body

    @property
    def to(self):
        """Gets the to of this SendEmailRequest.

        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The to of this SendEmailRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendEmailRequest.

        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :param to: The to of this SendEmailRequest.
        :type to: str
        """

        self._to = to

    @property
    def track_links(self):
        """Gets the track_links of this SendEmailRequest.

        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :return: The track_links of this SendEmailRequest.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """Sets the track_links of this SendEmailRequest.

        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :param track_links: The track_links of this SendEmailRequest.
        :type track_links: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]  # noqa: E501
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def track_opens(self):
        """Gets the track_opens of this SendEmailRequest.

        Activate open tracking for this email.

        :return: The track_opens of this SendEmailRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """Sets the track_opens of this SendEmailRequest.

        Activate open tracking for this email.

        :param track_opens: The track_opens of this SendEmailRequest.
        :type track_opens: bool
        """

        self._track_opens = track_opens
