# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendEmailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: int=None, message: str=None, message_id: str=None, submitted_at: datetime=None, to: str=None):
        """SendEmailResponse - a model defined in OpenAPI

        :param error_code: The error_code of this SendEmailResponse.
        :param message: The message of this SendEmailResponse.
        :param message_id: The message_id of this SendEmailResponse.
        :param submitted_at: The submitted_at of this SendEmailResponse.
        :param to: The to of this SendEmailResponse.
        """
        self.openapi_types = {
            'error_code': int,
            'message': str,
            'message_id': str,
            'submitted_at': datetime,
            'to': str
        }

        self.attribute_map = {
            'error_code': 'ErrorCode',
            'message': 'Message',
            'message_id': 'MessageID',
            'submitted_at': 'SubmittedAt',
            'to': 'To'
        }

        self._error_code = error_code
        self._message = message
        self._message_id = message_id
        self._submitted_at = submitted_at
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendEmailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendEmailResponse of this SendEmailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this SendEmailResponse.


        :return: The error_code of this SendEmailResponse.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SendEmailResponse.


        :param error_code: The error_code of this SendEmailResponse.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this SendEmailResponse.


        :return: The message of this SendEmailResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendEmailResponse.


        :param message: The message of this SendEmailResponse.
        :type message: str
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this SendEmailResponse.


        :return: The message_id of this SendEmailResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this SendEmailResponse.


        :param message_id: The message_id of this SendEmailResponse.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def submitted_at(self):
        """Gets the submitted_at of this SendEmailResponse.


        :return: The submitted_at of this SendEmailResponse.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this SendEmailResponse.


        :param submitted_at: The submitted_at of this SendEmailResponse.
        :type submitted_at: datetime
        """

        self._submitted_at = submitted_at

    @property
    def to(self):
        """Gets the to of this SendEmailResponse.


        :return: The to of this SendEmailResponse.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendEmailResponse.


        :param to: The to of this SendEmailResponse.
        :type to: str
        """

        self._to = to
