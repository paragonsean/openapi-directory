# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtendedMessageClickEventInformationGeo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, coords: str=None, country: str=None, country_iso_code: str=None, ip: str=None, region: str=None, region_iso_code: str=None, zip: str=None):
        """ExtendedMessageClickEventInformationGeo - a model defined in OpenAPI

        :param city: The city of this ExtendedMessageClickEventInformationGeo.
        :param coords: The coords of this ExtendedMessageClickEventInformationGeo.
        :param country: The country of this ExtendedMessageClickEventInformationGeo.
        :param country_iso_code: The country_iso_code of this ExtendedMessageClickEventInformationGeo.
        :param ip: The ip of this ExtendedMessageClickEventInformationGeo.
        :param region: The region of this ExtendedMessageClickEventInformationGeo.
        :param region_iso_code: The region_iso_code of this ExtendedMessageClickEventInformationGeo.
        :param zip: The zip of this ExtendedMessageClickEventInformationGeo.
        """
        self.openapi_types = {
            'city': str,
            'coords': str,
            'country': str,
            'country_iso_code': str,
            'ip': str,
            'region': str,
            'region_iso_code': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'City',
            'coords': 'Coords',
            'country': 'Country',
            'country_iso_code': 'CountryISOCode',
            'ip': 'IP',
            'region': 'Region',
            'region_iso_code': 'RegionISOCode',
            'zip': 'Zip'
        }

        self._city = city
        self._coords = coords
        self._country = country
        self._country_iso_code = country_iso_code
        self._ip = ip
        self._region = region
        self._region_iso_code = region_iso_code
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedMessageClickEventInformationGeo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedMessageClickEventInformation_Geo of this ExtendedMessageClickEventInformationGeo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this ExtendedMessageClickEventInformationGeo.


        :return: The city of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ExtendedMessageClickEventInformationGeo.


        :param city: The city of this ExtendedMessageClickEventInformationGeo.
        :type city: str
        """

        self._city = city

    @property
    def coords(self):
        """Gets the coords of this ExtendedMessageClickEventInformationGeo.


        :return: The coords of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this ExtendedMessageClickEventInformationGeo.


        :param coords: The coords of this ExtendedMessageClickEventInformationGeo.
        :type coords: str
        """

        self._coords = coords

    @property
    def country(self):
        """Gets the country of this ExtendedMessageClickEventInformationGeo.


        :return: The country of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ExtendedMessageClickEventInformationGeo.


        :param country: The country of this ExtendedMessageClickEventInformationGeo.
        :type country: str
        """

        self._country = country

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this ExtendedMessageClickEventInformationGeo.


        :return: The country_iso_code of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this ExtendedMessageClickEventInformationGeo.


        :param country_iso_code: The country_iso_code of this ExtendedMessageClickEventInformationGeo.
        :type country_iso_code: str
        """

        self._country_iso_code = country_iso_code

    @property
    def ip(self):
        """Gets the ip of this ExtendedMessageClickEventInformationGeo.


        :return: The ip of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ExtendedMessageClickEventInformationGeo.


        :param ip: The ip of this ExtendedMessageClickEventInformationGeo.
        :type ip: str
        """

        self._ip = ip

    @property
    def region(self):
        """Gets the region of this ExtendedMessageClickEventInformationGeo.


        :return: The region of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ExtendedMessageClickEventInformationGeo.


        :param region: The region of this ExtendedMessageClickEventInformationGeo.
        :type region: str
        """

        self._region = region

    @property
    def region_iso_code(self):
        """Gets the region_iso_code of this ExtendedMessageClickEventInformationGeo.


        :return: The region_iso_code of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._region_iso_code

    @region_iso_code.setter
    def region_iso_code(self, region_iso_code):
        """Sets the region_iso_code of this ExtendedMessageClickEventInformationGeo.


        :param region_iso_code: The region_iso_code of this ExtendedMessageClickEventInformationGeo.
        :type region_iso_code: str
        """

        self._region_iso_code = region_iso_code

    @property
    def zip(self):
        """Gets the zip of this ExtendedMessageClickEventInformationGeo.


        :return: The zip of this ExtendedMessageClickEventInformationGeo.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ExtendedMessageClickEventInformationGeo.


        :param zip: The zip of this ExtendedMessageClickEventInformationGeo.
        :type zip: str
        """

        self._zip = zip
