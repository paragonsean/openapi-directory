# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.message_header import MessageHeader
from openapi_server import util


class EmailWithTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, bcc: str=None, cc: str=None, _from: str=None, headers: List[MessageHeader]=None, inline_css: bool=True, reply_to: str=None, tag: str=None, template_alias: str=None, template_id: int=None, template_model: object=None, to: str=None, track_links: str=None, track_opens: bool=None):
        """EmailWithTemplateRequest - a model defined in OpenAPI

        :param attachments: The attachments of this EmailWithTemplateRequest.
        :param bcc: The bcc of this EmailWithTemplateRequest.
        :param cc: The cc of this EmailWithTemplateRequest.
        :param _from: The _from of this EmailWithTemplateRequest.
        :param headers: The headers of this EmailWithTemplateRequest.
        :param inline_css: The inline_css of this EmailWithTemplateRequest.
        :param reply_to: The reply_to of this EmailWithTemplateRequest.
        :param tag: The tag of this EmailWithTemplateRequest.
        :param template_alias: The template_alias of this EmailWithTemplateRequest.
        :param template_id: The template_id of this EmailWithTemplateRequest.
        :param template_model: The template_model of this EmailWithTemplateRequest.
        :param to: The to of this EmailWithTemplateRequest.
        :param track_links: The track_links of this EmailWithTemplateRequest.
        :param track_opens: The track_opens of this EmailWithTemplateRequest.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'bcc': str,
            'cc': str,
            '_from': str,
            'headers': List[MessageHeader],
            'inline_css': bool,
            'reply_to': str,
            'tag': str,
            'template_alias': str,
            'template_id': int,
            'template_model': object,
            'to': str,
            'track_links': str,
            'track_opens': bool
        }

        self.attribute_map = {
            'attachments': 'Attachments',
            'bcc': 'Bcc',
            'cc': 'Cc',
            '_from': 'From',
            'headers': 'Headers',
            'inline_css': 'InlineCss',
            'reply_to': 'ReplyTo',
            'tag': 'Tag',
            'template_alias': 'TemplateAlias',
            'template_id': 'TemplateId',
            'template_model': 'TemplateModel',
            'to': 'To',
            'track_links': 'TrackLinks',
            'track_opens': 'TrackOpens'
        }

        self._attachments = attachments
        self._bcc = bcc
        self._cc = cc
        self.__from = _from
        self._headers = headers
        self._inline_css = inline_css
        self._reply_to = reply_to
        self._tag = tag
        self._template_alias = template_alias
        self._template_id = template_id
        self._template_model = template_model
        self._to = to
        self._track_links = track_links
        self._track_opens = track_opens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailWithTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailWithTemplateRequest of this EmailWithTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this EmailWithTemplateRequest.


        :return: The attachments of this EmailWithTemplateRequest.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this EmailWithTemplateRequest.


        :param attachments: The attachments of this EmailWithTemplateRequest.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def bcc(self):
        """Gets the bcc of this EmailWithTemplateRequest.


        :return: The bcc of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailWithTemplateRequest.


        :param bcc: The bcc of this EmailWithTemplateRequest.
        :type bcc: str
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this EmailWithTemplateRequest.


        :return: The cc of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailWithTemplateRequest.


        :param cc: The cc of this EmailWithTemplateRequest.
        :type cc: str
        """

        self._cc = cc

    @property
    def _from(self):
        """Gets the _from of this EmailWithTemplateRequest.


        :return: The _from of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailWithTemplateRequest.


        :param _from: The _from of this EmailWithTemplateRequest.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def headers(self):
        """Gets the headers of this EmailWithTemplateRequest.


        :return: The headers of this EmailWithTemplateRequest.
        :rtype: List[MessageHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EmailWithTemplateRequest.


        :param headers: The headers of this EmailWithTemplateRequest.
        :type headers: List[MessageHeader]
        """

        self._headers = headers

    @property
    def inline_css(self):
        """Gets the inline_css of this EmailWithTemplateRequest.


        :return: The inline_css of this EmailWithTemplateRequest.
        :rtype: bool
        """
        return self._inline_css

    @inline_css.setter
    def inline_css(self, inline_css):
        """Sets the inline_css of this EmailWithTemplateRequest.


        :param inline_css: The inline_css of this EmailWithTemplateRequest.
        :type inline_css: bool
        """

        self._inline_css = inline_css

    @property
    def reply_to(self):
        """Gets the reply_to of this EmailWithTemplateRequest.


        :return: The reply_to of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this EmailWithTemplateRequest.


        :param reply_to: The reply_to of this EmailWithTemplateRequest.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def tag(self):
        """Gets the tag of this EmailWithTemplateRequest.


        :return: The tag of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EmailWithTemplateRequest.


        :param tag: The tag of this EmailWithTemplateRequest.
        :type tag: str
        """

        self._tag = tag

    @property
    def template_alias(self):
        """Gets the template_alias of this EmailWithTemplateRequest.

        Required if 'TemplateId' is not specified.

        :return: The template_alias of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._template_alias

    @template_alias.setter
    def template_alias(self, template_alias):
        """Sets the template_alias of this EmailWithTemplateRequest.

        Required if 'TemplateId' is not specified.

        :param template_alias: The template_alias of this EmailWithTemplateRequest.
        :type template_alias: str
        """
        if template_alias is None:
            raise ValueError("Invalid value for `template_alias`, must not be `None`")

        self._template_alias = template_alias

    @property
    def template_id(self):
        """Gets the template_id of this EmailWithTemplateRequest.

        Required if 'TemplateAlias' is not specified.

        :return: The template_id of this EmailWithTemplateRequest.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this EmailWithTemplateRequest.

        Required if 'TemplateAlias' is not specified.

        :param template_id: The template_id of this EmailWithTemplateRequest.
        :type template_id: int
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")

        self._template_id = template_id

    @property
    def template_model(self):
        """Gets the template_model of this EmailWithTemplateRequest.


        :return: The template_model of this EmailWithTemplateRequest.
        :rtype: object
        """
        return self._template_model

    @template_model.setter
    def template_model(self, template_model):
        """Sets the template_model of this EmailWithTemplateRequest.


        :param template_model: The template_model of this EmailWithTemplateRequest.
        :type template_model: object
        """
        if template_model is None:
            raise ValueError("Invalid value for `template_model`, must not be `None`")

        self._template_model = template_model

    @property
    def to(self):
        """Gets the to of this EmailWithTemplateRequest.


        :return: The to of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailWithTemplateRequest.


        :param to: The to of this EmailWithTemplateRequest.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def track_links(self):
        """Gets the track_links of this EmailWithTemplateRequest.

        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :return: The track_links of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """Sets the track_links of this EmailWithTemplateRequest.

        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :param track_links: The track_links of this EmailWithTemplateRequest.
        :type track_links: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]  # noqa: E501
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def track_opens(self):
        """Gets the track_opens of this EmailWithTemplateRequest.

        Activate open tracking for this email.

        :return: The track_opens of this EmailWithTemplateRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """Sets the track_opens of this EmailWithTemplateRequest.

        Activate open tracking for this email.

        :param track_opens: The track_opens of this EmailWithTemplateRequest.
        :type track_opens: bool
        """

        self._track_opens = track_opens
