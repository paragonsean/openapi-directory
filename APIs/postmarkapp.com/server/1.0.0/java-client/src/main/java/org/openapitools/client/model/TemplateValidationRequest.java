/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplateValidationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemplateValidationRequest {
  public static final String SERIALIZED_NAME_HTML_BODY = "HtmlBody";
  @SerializedName(SERIALIZED_NAME_HTML_BODY)
  private String htmlBody;

  public static final String SERIALIZED_NAME_INLINE_CSS_FOR_HTML_TEST_RENDER = "InlineCssForHtmlTestRender";
  @SerializedName(SERIALIZED_NAME_INLINE_CSS_FOR_HTML_TEST_RENDER)
  private Boolean inlineCssForHtmlTestRender = true;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEST_RENDER_MODEL = "TestRenderModel";
  @SerializedName(SERIALIZED_NAME_TEST_RENDER_MODEL)
  private Object testRenderModel;

  public static final String SERIALIZED_NAME_TEXT_BODY = "TextBody";
  @SerializedName(SERIALIZED_NAME_TEXT_BODY)
  private String textBody;

  public TemplateValidationRequest() {
  }

  public TemplateValidationRequest htmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

  /**
   * The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 
   * @return htmlBody
   */
  @javax.annotation.Nullable
  public String getHtmlBody() {
    return htmlBody;
  }

  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }


  public TemplateValidationRequest inlineCssForHtmlTestRender(Boolean inlineCssForHtmlTestRender) {
    this.inlineCssForHtmlTestRender = inlineCssForHtmlTestRender;
    return this;
  }

  /**
   * When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 
   * @return inlineCssForHtmlTestRender
   */
  @javax.annotation.Nullable
  public Boolean getInlineCssForHtmlTestRender() {
    return inlineCssForHtmlTestRender;
  }

  public void setInlineCssForHtmlTestRender(Boolean inlineCssForHtmlTestRender) {
    this.inlineCssForHtmlTestRender = inlineCssForHtmlTestRender;
  }


  public TemplateValidationRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public TemplateValidationRequest testRenderModel(Object testRenderModel) {
    this.testRenderModel = testRenderModel;
    return this;
  }

  /**
   * The model to be used when rendering test content.
   * @return testRenderModel
   */
  @javax.annotation.Nullable
  public Object getTestRenderModel() {
    return testRenderModel;
  }

  public void setTestRenderModel(Object testRenderModel) {
    this.testRenderModel = testRenderModel;
  }


  public TemplateValidationRequest textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

  /**
   * The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 
   * @return textBody
   */
  @javax.annotation.Nullable
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateValidationRequest templateValidationRequest = (TemplateValidationRequest) o;
    return Objects.equals(this.htmlBody, templateValidationRequest.htmlBody) &&
        Objects.equals(this.inlineCssForHtmlTestRender, templateValidationRequest.inlineCssForHtmlTestRender) &&
        Objects.equals(this.subject, templateValidationRequest.subject) &&
        Objects.equals(this.testRenderModel, templateValidationRequest.testRenderModel) &&
        Objects.equals(this.textBody, templateValidationRequest.textBody);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htmlBody, inlineCssForHtmlTestRender, subject, testRenderModel, textBody);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateValidationRequest {\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    inlineCssForHtmlTestRender: ").append(toIndentedString(inlineCssForHtmlTestRender)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    testRenderModel: ").append(toIndentedString(testRenderModel)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HtmlBody");
    openapiFields.add("InlineCssForHtmlTestRender");
    openapiFields.add("Subject");
    openapiFields.add("TestRenderModel");
    openapiFields.add("TextBody");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateValidationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateValidationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateValidationRequest is not found in the empty JSON string", TemplateValidationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateValidationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateValidationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("HtmlBody") != null && !jsonObj.get("HtmlBody").isJsonNull()) && !jsonObj.get("HtmlBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlBody").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("TextBody") != null && !jsonObj.get("TextBody").isJsonNull()) && !jsonObj.get("TextBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextBody").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateValidationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateValidationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateValidationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateValidationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateValidationRequest>() {
           @Override
           public void write(JsonWriter out, TemplateValidationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateValidationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateValidationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateValidationRequest
   * @throws IOException if the JSON string is invalid with respect to TemplateValidationRequest
   */
  public static TemplateValidationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateValidationRequest.class);
  }

  /**
   * Convert an instance of TemplateValidationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

