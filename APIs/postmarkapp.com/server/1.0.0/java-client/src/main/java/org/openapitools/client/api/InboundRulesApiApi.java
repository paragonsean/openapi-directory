/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateInboundRule200Response;
import org.openapitools.client.model.CreateInboundRuleRequest;
import org.openapitools.client.model.ListInboundRules200Response;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboundRulesApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboundRulesApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboundRulesApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInboundRule
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInboundRuleCall(String xPostmarkServerToken, CreateInboundRuleRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboundRuleValidateBeforeCall(String xPostmarkServerToken, CreateInboundRuleRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling createInboundRule(Async)");
        }

        return createInboundRuleCall(xPostmarkServerToken, body, _callback);

    }

    /**
     * Create an inbound rule trigger
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @return CreateInboundRule200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateInboundRule200Response createInboundRule(String xPostmarkServerToken, CreateInboundRuleRequest body) throws ApiException {
        ApiResponse<CreateInboundRule200Response> localVarResp = createInboundRuleWithHttpInfo(xPostmarkServerToken, body);
        return localVarResp.getData();
    }

    /**
     * Create an inbound rule trigger
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CreateInboundRule200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateInboundRule200Response> createInboundRuleWithHttpInfo(String xPostmarkServerToken, CreateInboundRuleRequest body) throws ApiException {
        okhttp3.Call localVarCall = createInboundRuleValidateBeforeCall(xPostmarkServerToken, body, null);
        Type localVarReturnType = new TypeToken<CreateInboundRule200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an inbound rule trigger (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInboundRuleAsync(String xPostmarkServerToken, CreateInboundRuleRequest body, final ApiCallback<CreateInboundRule200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboundRuleValidateBeforeCall(xPostmarkServerToken, body, _callback);
        Type localVarReturnType = new TypeToken<CreateInboundRule200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInboundRule
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param triggerid The ID of the Inbound Rule that should be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInboundRuleCall(String xPostmarkServerToken, Integer triggerid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules/{triggerid}"
            .replace("{" + "triggerid" + "}", localVarApiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboundRuleValidateBeforeCall(String xPostmarkServerToken, Integer triggerid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling deleteInboundRule(Async)");
        }

        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException("Missing the required parameter 'triggerid' when calling deleteInboundRule(Async)");
        }

        return deleteInboundRuleCall(xPostmarkServerToken, triggerid, _callback);

    }

    /**
     * Delete a single trigger
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param triggerid The ID of the Inbound Rule that should be deleted. (required)
     * @return StandardPostmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public StandardPostmarkResponse deleteInboundRule(String xPostmarkServerToken, Integer triggerid) throws ApiException {
        ApiResponse<StandardPostmarkResponse> localVarResp = deleteInboundRuleWithHttpInfo(xPostmarkServerToken, triggerid);
        return localVarResp.getData();
    }

    /**
     * Delete a single trigger
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param triggerid The ID of the Inbound Rule that should be deleted. (required)
     * @return ApiResponse&lt;StandardPostmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardPostmarkResponse> deleteInboundRuleWithHttpInfo(String xPostmarkServerToken, Integer triggerid) throws ApiException {
        okhttp3.Call localVarCall = deleteInboundRuleValidateBeforeCall(xPostmarkServerToken, triggerid, null);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a single trigger (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param triggerid The ID of the Inbound Rule that should be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInboundRuleAsync(String xPostmarkServerToken, Integer triggerid, final ApiCallback<StandardPostmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboundRuleValidateBeforeCall(xPostmarkServerToken, triggerid, _callback);
        Type localVarReturnType = new TypeToken<StandardPostmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInboundRules
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of records to return per request. (required)
     * @param offset Number of records to skip. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundRulesCall(String xPostmarkServerToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/inboundrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboundRulesValidateBeforeCall(String xPostmarkServerToken, Integer count, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling listInboundRules(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listInboundRules(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listInboundRules(Async)");
        }

        return listInboundRulesCall(xPostmarkServerToken, count, offset, _callback);

    }

    /**
     * List inbound rule triggers
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of records to return per request. (required)
     * @param offset Number of records to skip. (required)
     * @return ListInboundRules200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListInboundRules200Response listInboundRules(String xPostmarkServerToken, Integer count, Integer offset) throws ApiException {
        ApiResponse<ListInboundRules200Response> localVarResp = listInboundRulesWithHttpInfo(xPostmarkServerToken, count, offset);
        return localVarResp.getData();
    }

    /**
     * List inbound rule triggers
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of records to return per request. (required)
     * @param offset Number of records to skip. (required)
     * @return ApiResponse&lt;ListInboundRules200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInboundRules200Response> listInboundRulesWithHttpInfo(String xPostmarkServerToken, Integer count, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listInboundRulesValidateBeforeCall(xPostmarkServerToken, count, offset, null);
        Type localVarReturnType = new TypeToken<ListInboundRules200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inbound rule triggers (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of records to return per request. (required)
     * @param offset Number of records to skip. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInboundRulesAsync(String xPostmarkServerToken, Integer count, Integer offset, final ApiCallback<ListInboundRules200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboundRulesValidateBeforeCall(xPostmarkServerToken, count, offset, _callback);
        Type localVarReturnType = new TypeToken<ListInboundRules200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
