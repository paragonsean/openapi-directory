/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SentCountsResponseDaysInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of a get sent counts operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SentCountsResponse {
  public static final String SERIALIZED_NAME_DAYS = "Days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private List<SentCountsResponseDaysInner> days = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENT = "Sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Integer sent;

  public SentCountsResponse() {
  }

  public SentCountsResponse days(List<SentCountsResponseDaysInner> days) {
    this.days = days;
    return this;
  }

  public SentCountsResponse addDaysItem(SentCountsResponseDaysInner daysItem) {
    if (this.days == null) {
      this.days = new ArrayList<>();
    }
    this.days.add(daysItem);
    return this;
  }

  /**
   * Get days
   * @return days
   */
  @javax.annotation.Nullable
  public List<SentCountsResponseDaysInner> getDays() {
    return days;
  }

  public void setDays(List<SentCountsResponseDaysInner> days) {
    this.days = days;
  }


  public SentCountsResponse sent(Integer sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public Integer getSent() {
    return sent;
  }

  public void setSent(Integer sent) {
    this.sent = sent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentCountsResponse sentCountsResponse = (SentCountsResponse) o;
    return Objects.equals(this.days, sentCountsResponse.days) &&
        Objects.equals(this.sent, sentCountsResponse.sent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(days, sent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentCountsResponse {\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Days");
    openapiFields.add("Sent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentCountsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentCountsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentCountsResponse is not found in the empty JSON string", SentCountsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentCountsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentCountsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Days") != null && !jsonObj.get("Days").isJsonNull()) {
        JsonArray jsonArraydays = jsonObj.getAsJsonArray("Days");
        if (jsonArraydays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Days").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Days` to be an array in the JSON string but got `%s`", jsonObj.get("Days").toString()));
          }

          // validate the optional field `Days` (array)
          for (int i = 0; i < jsonArraydays.size(); i++) {
            SentCountsResponseDaysInner.validateJsonElement(jsonArraydays.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentCountsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentCountsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentCountsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentCountsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SentCountsResponse>() {
           @Override
           public void write(JsonWriter out, SentCountsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentCountsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentCountsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentCountsResponse
   * @throws IOException if the JSON string is invalid with respect to SentCountsResponse
   */
  public static SentCountsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentCountsResponse.class);
  }

  /**
   * Convert an instance of SentCountsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

