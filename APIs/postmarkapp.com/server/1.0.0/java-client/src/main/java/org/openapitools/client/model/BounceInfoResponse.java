/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BounceInfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BounceInfoResponse {
  public static final String SERIALIZED_NAME_BOUNCED_AT = "BouncedAt";
  @SerializedName(SERIALIZED_NAME_BOUNCED_AT)
  private OffsetDateTime bouncedAt;

  public static final String SERIALIZED_NAME_CAN_ACTIVATE = "CanActivate";
  @SerializedName(SERIALIZED_NAME_CAN_ACTIVATE)
  private Boolean canActivate;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_DUMP_AVAILABLE = "DumpAvailable";
  @SerializedName(SERIALIZED_NAME_DUMP_AVAILABLE)
  private Boolean dumpAvailable;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_INACTIVE = "Inactive";
  @SerializedName(SERIALIZED_NAME_INACTIVE)
  private Boolean inactive;

  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private String messageID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAG = "Tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_CODE = "TypeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private Integer typeCode;

  public BounceInfoResponse() {
  }

  public BounceInfoResponse bouncedAt(OffsetDateTime bouncedAt) {
    this.bouncedAt = bouncedAt;
    return this;
  }

  /**
   * Get bouncedAt
   * @return bouncedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBouncedAt() {
    return bouncedAt;
  }

  public void setBouncedAt(OffsetDateTime bouncedAt) {
    this.bouncedAt = bouncedAt;
  }


  public BounceInfoResponse canActivate(Boolean canActivate) {
    this.canActivate = canActivate;
    return this;
  }

  /**
   * Get canActivate
   * @return canActivate
   */
  @javax.annotation.Nullable
  public Boolean getCanActivate() {
    return canActivate;
  }

  public void setCanActivate(Boolean canActivate) {
    this.canActivate = canActivate;
  }


  public BounceInfoResponse content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public BounceInfoResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BounceInfoResponse details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public BounceInfoResponse dumpAvailable(Boolean dumpAvailable) {
    this.dumpAvailable = dumpAvailable;
    return this;
  }

  /**
   * Get dumpAvailable
   * @return dumpAvailable
   */
  @javax.annotation.Nullable
  public Boolean getDumpAvailable() {
    return dumpAvailable;
  }

  public void setDumpAvailable(Boolean dumpAvailable) {
    this.dumpAvailable = dumpAvailable;
  }


  public BounceInfoResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public BounceInfoResponse ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public BounceInfoResponse inactive(Boolean inactive) {
    this.inactive = inactive;
    return this;
  }

  /**
   * Get inactive
   * @return inactive
   */
  @javax.annotation.Nullable
  public Boolean getInactive() {
    return inactive;
  }

  public void setInactive(Boolean inactive) {
    this.inactive = inactive;
  }


  public BounceInfoResponse messageID(String messageID) {
    this.messageID = messageID;
    return this;
  }

  /**
   * Get messageID
   * @return messageID
   */
  @javax.annotation.Nullable
  public String getMessageID() {
    return messageID;
  }

  public void setMessageID(String messageID) {
    this.messageID = messageID;
  }


  public BounceInfoResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BounceInfoResponse subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public BounceInfoResponse tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public BounceInfoResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BounceInfoResponse typeCode(Integer typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * Get typeCode
   * @return typeCode
   */
  @javax.annotation.Nullable
  public Integer getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(Integer typeCode) {
    this.typeCode = typeCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BounceInfoResponse bounceInfoResponse = (BounceInfoResponse) o;
    return Objects.equals(this.bouncedAt, bounceInfoResponse.bouncedAt) &&
        Objects.equals(this.canActivate, bounceInfoResponse.canActivate) &&
        Objects.equals(this.content, bounceInfoResponse.content) &&
        Objects.equals(this.description, bounceInfoResponse.description) &&
        Objects.equals(this.details, bounceInfoResponse.details) &&
        Objects.equals(this.dumpAvailable, bounceInfoResponse.dumpAvailable) &&
        Objects.equals(this.email, bounceInfoResponse.email) &&
        Objects.equals(this.ID, bounceInfoResponse.ID) &&
        Objects.equals(this.inactive, bounceInfoResponse.inactive) &&
        Objects.equals(this.messageID, bounceInfoResponse.messageID) &&
        Objects.equals(this.name, bounceInfoResponse.name) &&
        Objects.equals(this.subject, bounceInfoResponse.subject) &&
        Objects.equals(this.tag, bounceInfoResponse.tag) &&
        Objects.equals(this.type, bounceInfoResponse.type) &&
        Objects.equals(this.typeCode, bounceInfoResponse.typeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bouncedAt, canActivate, content, description, details, dumpAvailable, email, ID, inactive, messageID, name, subject, tag, type, typeCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BounceInfoResponse {\n");
    sb.append("    bouncedAt: ").append(toIndentedString(bouncedAt)).append("\n");
    sb.append("    canActivate: ").append(toIndentedString(canActivate)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    dumpAvailable: ").append(toIndentedString(dumpAvailable)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    inactive: ").append(toIndentedString(inactive)).append("\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BouncedAt");
    openapiFields.add("CanActivate");
    openapiFields.add("Content");
    openapiFields.add("Description");
    openapiFields.add("Details");
    openapiFields.add("DumpAvailable");
    openapiFields.add("Email");
    openapiFields.add("ID");
    openapiFields.add("Inactive");
    openapiFields.add("MessageID");
    openapiFields.add("Name");
    openapiFields.add("Subject");
    openapiFields.add("Tag");
    openapiFields.add("Type");
    openapiFields.add("TypeCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BounceInfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BounceInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BounceInfoResponse is not found in the empty JSON string", BounceInfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BounceInfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BounceInfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) && !jsonObj.get("Content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) && !jsonObj.get("Details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Details").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("MessageID") != null && !jsonObj.get("MessageID").isJsonNull()) && !jsonObj.get("MessageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageID").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BounceInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BounceInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BounceInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BounceInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BounceInfoResponse>() {
           @Override
           public void write(JsonWriter out, BounceInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BounceInfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BounceInfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BounceInfoResponse
   * @throws IOException if the JSON string is invalid with respect to BounceInfoResponse
   */
  public static BounceInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BounceInfoResponse.class);
  }

  /**
   * Convert an instance of BounceInfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

