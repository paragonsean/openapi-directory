/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtendedMessageClickEventInformationGeo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedMessageClickEventInformationGeo {
  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COORDS = "Coords";
  @SerializedName(SERIALIZED_NAME_COORDS)
  private String coords;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_I_S_O_CODE = "CountryISOCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_I_S_O_CODE)
  private String countryISOCode;

  public static final String SERIALIZED_NAME_I_P = "IP";
  @SerializedName(SERIALIZED_NAME_I_P)
  private String IP;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_I_S_O_CODE = "RegionISOCode";
  @SerializedName(SERIALIZED_NAME_REGION_I_S_O_CODE)
  private String regionISOCode;

  public static final String SERIALIZED_NAME_ZIP = "Zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public ExtendedMessageClickEventInformationGeo() {
  }

  public ExtendedMessageClickEventInformationGeo city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ExtendedMessageClickEventInformationGeo coords(String coords) {
    this.coords = coords;
    return this;
  }

  /**
   * Get coords
   * @return coords
   */
  @javax.annotation.Nullable
  public String getCoords() {
    return coords;
  }

  public void setCoords(String coords) {
    this.coords = coords;
  }


  public ExtendedMessageClickEventInformationGeo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ExtendedMessageClickEventInformationGeo countryISOCode(String countryISOCode) {
    this.countryISOCode = countryISOCode;
    return this;
  }

  /**
   * Get countryISOCode
   * @return countryISOCode
   */
  @javax.annotation.Nullable
  public String getCountryISOCode() {
    return countryISOCode;
  }

  public void setCountryISOCode(String countryISOCode) {
    this.countryISOCode = countryISOCode;
  }


  public ExtendedMessageClickEventInformationGeo IP(String IP) {
    this.IP = IP;
    return this;
  }

  /**
   * Get IP
   * @return IP
   */
  @javax.annotation.Nullable
  public String getIP() {
    return IP;
  }

  public void setIP(String IP) {
    this.IP = IP;
  }


  public ExtendedMessageClickEventInformationGeo region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ExtendedMessageClickEventInformationGeo regionISOCode(String regionISOCode) {
    this.regionISOCode = regionISOCode;
    return this;
  }

  /**
   * Get regionISOCode
   * @return regionISOCode
   */
  @javax.annotation.Nullable
  public String getRegionISOCode() {
    return regionISOCode;
  }

  public void setRegionISOCode(String regionISOCode) {
    this.regionISOCode = regionISOCode;
  }


  public ExtendedMessageClickEventInformationGeo zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedMessageClickEventInformationGeo extendedMessageClickEventInformationGeo = (ExtendedMessageClickEventInformationGeo) o;
    return Objects.equals(this.city, extendedMessageClickEventInformationGeo.city) &&
        Objects.equals(this.coords, extendedMessageClickEventInformationGeo.coords) &&
        Objects.equals(this.country, extendedMessageClickEventInformationGeo.country) &&
        Objects.equals(this.countryISOCode, extendedMessageClickEventInformationGeo.countryISOCode) &&
        Objects.equals(this.IP, extendedMessageClickEventInformationGeo.IP) &&
        Objects.equals(this.region, extendedMessageClickEventInformationGeo.region) &&
        Objects.equals(this.regionISOCode, extendedMessageClickEventInformationGeo.regionISOCode) &&
        Objects.equals(this.zip, extendedMessageClickEventInformationGeo.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, coords, country, countryISOCode, IP, region, regionISOCode, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedMessageClickEventInformationGeo {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryISOCode: ").append(toIndentedString(countryISOCode)).append("\n");
    sb.append("    IP: ").append(toIndentedString(IP)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionISOCode: ").append(toIndentedString(regionISOCode)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("City");
    openapiFields.add("Coords");
    openapiFields.add("Country");
    openapiFields.add("CountryISOCode");
    openapiFields.add("IP");
    openapiFields.add("Region");
    openapiFields.add("RegionISOCode");
    openapiFields.add("Zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedMessageClickEventInformationGeo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedMessageClickEventInformationGeo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedMessageClickEventInformationGeo is not found in the empty JSON string", ExtendedMessageClickEventInformationGeo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedMessageClickEventInformationGeo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedMessageClickEventInformationGeo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Coords") != null && !jsonObj.get("Coords").isJsonNull()) && !jsonObj.get("Coords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Coords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Coords").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("CountryISOCode") != null && !jsonObj.get("CountryISOCode").isJsonNull()) && !jsonObj.get("CountryISOCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryISOCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryISOCode").toString()));
      }
      if ((jsonObj.get("IP") != null && !jsonObj.get("IP").isJsonNull()) && !jsonObj.get("IP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IP").toString()));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      if ((jsonObj.get("RegionISOCode") != null && !jsonObj.get("RegionISOCode").isJsonNull()) && !jsonObj.get("RegionISOCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionISOCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionISOCode").toString()));
      }
      if ((jsonObj.get("Zip") != null && !jsonObj.get("Zip").isJsonNull()) && !jsonObj.get("Zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedMessageClickEventInformationGeo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedMessageClickEventInformationGeo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedMessageClickEventInformationGeo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedMessageClickEventInformationGeo.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedMessageClickEventInformationGeo>() {
           @Override
           public void write(JsonWriter out, ExtendedMessageClickEventInformationGeo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedMessageClickEventInformationGeo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedMessageClickEventInformationGeo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedMessageClickEventInformationGeo
   * @throws IOException if the JSON string is invalid with respect to ExtendedMessageClickEventInformationGeo
   */
  public static ExtendedMessageClickEventInformationGeo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedMessageClickEventInformationGeo.class);
  }

  /**
   * Convert an instance of ExtendedMessageClickEventInformationGeo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

