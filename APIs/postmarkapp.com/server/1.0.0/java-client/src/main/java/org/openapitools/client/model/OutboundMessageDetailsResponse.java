/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.EmailNameAddressPair;
import org.openapitools.client.model.MessageEventDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OutboundMessageDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutboundMessageDetailsResponse {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BCC = "Bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  private List<EmailNameAddressPair> bcc = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY = "Body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CC = "Cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<EmailNameAddressPair> cc = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_HTML_BODY = "HtmlBody";
  @SerializedName(SERIALIZED_NAME_HTML_BODY)
  private String htmlBody;

  public static final String SERIALIZED_NAME_MESSAGE_EVENTS = "MessageEvents";
  @SerializedName(SERIALIZED_NAME_MESSAGE_EVENTS)
  private List<MessageEventDetails> messageEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private String messageID;

  public static final String SERIALIZED_NAME_RECEIVED_AT = "ReceivedAt";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AT)
  private OffsetDateTime receivedAt;

  public static final String SERIALIZED_NAME_RECIPIENTS = "Recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<String> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAG = "Tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TEXT_BODY = "TextBody";
  @SerializedName(SERIALIZED_NAME_TEXT_BODY)
  private String textBody;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<EmailNameAddressPair> to = new ArrayList<>();

  /**
   * Gets or Sets trackLinks
   */
  @JsonAdapter(TrackLinksEnum.Adapter.class)
  public enum TrackLinksEnum {
    NONE("None"),
    
    HTML_AND_TEXT("HtmlAndText"),
    
    HTML_ONLY("HtmlOnly"),
    
    TEXT_ONLY("TextOnly");

    private String value;

    TrackLinksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackLinksEnum fromValue(String value) {
      for (TrackLinksEnum b : TrackLinksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackLinksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackLinksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackLinksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackLinksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackLinksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACK_LINKS = "TrackLinks";
  @SerializedName(SERIALIZED_NAME_TRACK_LINKS)
  private TrackLinksEnum trackLinks;

  public static final String SERIALIZED_NAME_TRACK_OPENS = "TrackOpens";
  @SerializedName(SERIALIZED_NAME_TRACK_OPENS)
  private Boolean trackOpens;

  public OutboundMessageDetailsResponse() {
  }

  public OutboundMessageDetailsResponse attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public OutboundMessageDetailsResponse addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public OutboundMessageDetailsResponse bcc(List<EmailNameAddressPair> bcc) {
    this.bcc = bcc;
    return this;
  }

  public OutboundMessageDetailsResponse addBccItem(EmailNameAddressPair bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * Get bcc
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<EmailNameAddressPair> getBcc() {
    return bcc;
  }

  public void setBcc(List<EmailNameAddressPair> bcc) {
    this.bcc = bcc;
  }


  public OutboundMessageDetailsResponse body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public OutboundMessageDetailsResponse cc(List<EmailNameAddressPair> cc) {
    this.cc = cc;
    return this;
  }

  public OutboundMessageDetailsResponse addCcItem(EmailNameAddressPair ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<EmailNameAddressPair> getCc() {
    return cc;
  }

  public void setCc(List<EmailNameAddressPair> cc) {
    this.cc = cc;
  }


  public OutboundMessageDetailsResponse from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public OutboundMessageDetailsResponse htmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

  /**
   * Get htmlBody
   * @return htmlBody
   */
  @javax.annotation.Nullable
  public String getHtmlBody() {
    return htmlBody;
  }

  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }


  public OutboundMessageDetailsResponse messageEvents(List<MessageEventDetails> messageEvents) {
    this.messageEvents = messageEvents;
    return this;
  }

  public OutboundMessageDetailsResponse addMessageEventsItem(MessageEventDetails messageEventsItem) {
    if (this.messageEvents == null) {
      this.messageEvents = new ArrayList<>();
    }
    this.messageEvents.add(messageEventsItem);
    return this;
  }

  /**
   * Get messageEvents
   * @return messageEvents
   */
  @javax.annotation.Nullable
  public List<MessageEventDetails> getMessageEvents() {
    return messageEvents;
  }

  public void setMessageEvents(List<MessageEventDetails> messageEvents) {
    this.messageEvents = messageEvents;
  }


  public OutboundMessageDetailsResponse messageID(String messageID) {
    this.messageID = messageID;
    return this;
  }

  /**
   * Get messageID
   * @return messageID
   */
  @javax.annotation.Nullable
  public String getMessageID() {
    return messageID;
  }

  public void setMessageID(String messageID) {
    this.messageID = messageID;
  }


  public OutboundMessageDetailsResponse receivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
    return this;
  }

  /**
   * Get receivedAt
   * @return receivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceivedAt() {
    return receivedAt;
  }

  public void setReceivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
  }


  public OutboundMessageDetailsResponse recipients(List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public OutboundMessageDetailsResponse addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<String> recipients) {
    this.recipients = recipients;
  }


  public OutboundMessageDetailsResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public OutboundMessageDetailsResponse subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public OutboundMessageDetailsResponse tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public OutboundMessageDetailsResponse textBody(String textBody) {
    this.textBody = textBody;
    return this;
  }

  /**
   * Get textBody
   * @return textBody
   */
  @javax.annotation.Nullable
  public String getTextBody() {
    return textBody;
  }

  public void setTextBody(String textBody) {
    this.textBody = textBody;
  }


  public OutboundMessageDetailsResponse to(List<EmailNameAddressPair> to) {
    this.to = to;
    return this;
  }

  public OutboundMessageDetailsResponse addToItem(EmailNameAddressPair toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public List<EmailNameAddressPair> getTo() {
    return to;
  }

  public void setTo(List<EmailNameAddressPair> to) {
    this.to = to;
  }


  public OutboundMessageDetailsResponse trackLinks(TrackLinksEnum trackLinks) {
    this.trackLinks = trackLinks;
    return this;
  }

  /**
   * Get trackLinks
   * @return trackLinks
   */
  @javax.annotation.Nullable
  public TrackLinksEnum getTrackLinks() {
    return trackLinks;
  }

  public void setTrackLinks(TrackLinksEnum trackLinks) {
    this.trackLinks = trackLinks;
  }


  public OutboundMessageDetailsResponse trackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
    return this;
  }

  /**
   * Get trackOpens
   * @return trackOpens
   */
  @javax.annotation.Nullable
  public Boolean getTrackOpens() {
    return trackOpens;
  }

  public void setTrackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundMessageDetailsResponse outboundMessageDetailsResponse = (OutboundMessageDetailsResponse) o;
    return Objects.equals(this.attachments, outboundMessageDetailsResponse.attachments) &&
        Objects.equals(this.bcc, outboundMessageDetailsResponse.bcc) &&
        Objects.equals(this.body, outboundMessageDetailsResponse.body) &&
        Objects.equals(this.cc, outboundMessageDetailsResponse.cc) &&
        Objects.equals(this.from, outboundMessageDetailsResponse.from) &&
        Objects.equals(this.htmlBody, outboundMessageDetailsResponse.htmlBody) &&
        Objects.equals(this.messageEvents, outboundMessageDetailsResponse.messageEvents) &&
        Objects.equals(this.messageID, outboundMessageDetailsResponse.messageID) &&
        Objects.equals(this.receivedAt, outboundMessageDetailsResponse.receivedAt) &&
        Objects.equals(this.recipients, outboundMessageDetailsResponse.recipients) &&
        Objects.equals(this.status, outboundMessageDetailsResponse.status) &&
        Objects.equals(this.subject, outboundMessageDetailsResponse.subject) &&
        Objects.equals(this.tag, outboundMessageDetailsResponse.tag) &&
        Objects.equals(this.textBody, outboundMessageDetailsResponse.textBody) &&
        Objects.equals(this.to, outboundMessageDetailsResponse.to) &&
        Objects.equals(this.trackLinks, outboundMessageDetailsResponse.trackLinks) &&
        Objects.equals(this.trackOpens, outboundMessageDetailsResponse.trackOpens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, bcc, body, cc, from, htmlBody, messageEvents, messageID, receivedAt, recipients, status, subject, tag, textBody, to, trackLinks, trackOpens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundMessageDetailsResponse {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    messageEvents: ").append(toIndentedString(messageEvents)).append("\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    trackLinks: ").append(toIndentedString(trackLinks)).append("\n");
    sb.append("    trackOpens: ").append(toIndentedString(trackOpens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("Bcc");
    openapiFields.add("Body");
    openapiFields.add("Cc");
    openapiFields.add("From");
    openapiFields.add("HtmlBody");
    openapiFields.add("MessageEvents");
    openapiFields.add("MessageID");
    openapiFields.add("ReceivedAt");
    openapiFields.add("Recipients");
    openapiFields.add("Status");
    openapiFields.add("Subject");
    openapiFields.add("Tag");
    openapiFields.add("TextBody");
    openapiFields.add("To");
    openapiFields.add("TrackLinks");
    openapiFields.add("TrackOpens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutboundMessageDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutboundMessageDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutboundMessageDetailsResponse is not found in the empty JSON string", OutboundMessageDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutboundMessageDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutboundMessageDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if (jsonObj.get("Bcc") != null && !jsonObj.get("Bcc").isJsonNull()) {
        JsonArray jsonArraybcc = jsonObj.getAsJsonArray("Bcc");
        if (jsonArraybcc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Bcc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Bcc` to be an array in the JSON string but got `%s`", jsonObj.get("Bcc").toString()));
          }

          // validate the optional field `Bcc` (array)
          for (int i = 0; i < jsonArraybcc.size(); i++) {
            EmailNameAddressPair.validateJsonElement(jsonArraybcc.get(i));
          };
        }
      }
      if ((jsonObj.get("Body") != null && !jsonObj.get("Body").isJsonNull()) && !jsonObj.get("Body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Body").toString()));
      }
      if (jsonObj.get("Cc") != null && !jsonObj.get("Cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("Cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Cc` to be an array in the JSON string but got `%s`", jsonObj.get("Cc").toString()));
          }

          // validate the optional field `Cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            EmailNameAddressPair.validateJsonElement(jsonArraycc.get(i));
          };
        }
      }
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if ((jsonObj.get("HtmlBody") != null && !jsonObj.get("HtmlBody").isJsonNull()) && !jsonObj.get("HtmlBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlBody").toString()));
      }
      if (jsonObj.get("MessageEvents") != null && !jsonObj.get("MessageEvents").isJsonNull()) {
        JsonArray jsonArraymessageEvents = jsonObj.getAsJsonArray("MessageEvents");
        if (jsonArraymessageEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MessageEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MessageEvents` to be an array in the JSON string but got `%s`", jsonObj.get("MessageEvents").toString()));
          }

          // validate the optional field `MessageEvents` (array)
          for (int i = 0; i < jsonArraymessageEvents.size(); i++) {
            MessageEventDetails.validateJsonElement(jsonArraymessageEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("MessageID") != null && !jsonObj.get("MessageID").isJsonNull()) && !jsonObj.get("MessageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Recipients") != null && !jsonObj.get("Recipients").isJsonNull() && !jsonObj.get("Recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Recipients` to be an array in the JSON string but got `%s`", jsonObj.get("Recipients").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
      }
      if ((jsonObj.get("TextBody") != null && !jsonObj.get("TextBody").isJsonNull()) && !jsonObj.get("TextBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextBody").toString()));
      }
      if (jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) {
        JsonArray jsonArrayto = jsonObj.getAsJsonArray("To");
        if (jsonArrayto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("To").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `To` to be an array in the JSON string but got `%s`", jsonObj.get("To").toString()));
          }

          // validate the optional field `To` (array)
          for (int i = 0; i < jsonArrayto.size(); i++) {
            EmailNameAddressPair.validateJsonElement(jsonArrayto.get(i));
          };
        }
      }
      if ((jsonObj.get("TrackLinks") != null && !jsonObj.get("TrackLinks").isJsonNull()) && !jsonObj.get("TrackLinks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackLinks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackLinks").toString()));
      }
      // validate the optional field `TrackLinks`
      if (jsonObj.get("TrackLinks") != null && !jsonObj.get("TrackLinks").isJsonNull()) {
        TrackLinksEnum.validateJsonElement(jsonObj.get("TrackLinks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutboundMessageDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutboundMessageDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutboundMessageDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutboundMessageDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OutboundMessageDetailsResponse>() {
           @Override
           public void write(JsonWriter out, OutboundMessageDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutboundMessageDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutboundMessageDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutboundMessageDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to OutboundMessageDetailsResponse
   */
  public static OutboundMessageDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutboundMessageDetailsResponse.class);
  }

  /**
   * Convert an instance of OutboundMessageDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

