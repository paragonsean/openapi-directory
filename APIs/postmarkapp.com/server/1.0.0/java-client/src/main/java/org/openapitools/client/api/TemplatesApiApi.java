/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateTemplateRequest;
import org.openapitools.client.model.EditTemplateRequest;
import org.openapitools.client.model.EmailWithTemplateRequest;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.SendEmailTemplatedBatchRequest;
import org.openapitools.client.model.StandardPostmarkResponse;
import org.openapitools.client.model.TemplateDetailResponse;
import org.openapitools.client.model.TemplateListingResponse;
import org.openapitools.client.model.TemplateRecordResponse;
import org.openapitools.client.model.TemplateValidationRequest;
import org.openapitools.client.model.TemplateValidationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTemplate
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateCall(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateValidateBeforeCall(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling deleteTemplate(Async)");
        }

        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling deleteTemplate(Async)");
        }

        return deleteTemplateCall(xPostmarkServerToken, templateIdOrAlias, _callback);

    }

    /**
     * Delete a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to delete. (required)
     * @return TemplateDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateDetailResponse deleteTemplate(String xPostmarkServerToken, String templateIdOrAlias) throws ApiException {
        ApiResponse<TemplateDetailResponse> localVarResp = deleteTemplateWithHttpInfo(xPostmarkServerToken, templateIdOrAlias);
        return localVarResp.getData();
    }

    /**
     * Delete a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to delete. (required)
     * @return ApiResponse&lt;TemplateDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateDetailResponse> deleteTemplateWithHttpInfo(String xPostmarkServerToken, String templateIdOrAlias) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, null);
        Type localVarReturnType = new TypeToken<TemplateDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Template (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateAsync(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback<TemplateDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, _callback);
        Type localVarReturnType = new TypeToken<TemplateDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSingleTemplate
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleTemplateCall(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTemplateValidateBeforeCall(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getSingleTemplate(Async)");
        }

        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling getSingleTemplate(Async)");
        }

        return getSingleTemplateCall(xPostmarkServerToken, templateIdOrAlias, _callback);

    }

    /**
     * Get a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to retrieve. (required)
     * @return TemplateDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateDetailResponse getSingleTemplate(String xPostmarkServerToken, String templateIdOrAlias) throws ApiException {
        ApiResponse<TemplateDetailResponse> localVarResp = getSingleTemplateWithHttpInfo(xPostmarkServerToken, templateIdOrAlias);
        return localVarResp.getData();
    }

    /**
     * Get a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to retrieve. (required)
     * @return ApiResponse&lt;TemplateDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateDetailResponse> getSingleTemplateWithHttpInfo(String xPostmarkServerToken, String templateIdOrAlias) throws ApiException {
        okhttp3.Call localVarCall = getSingleTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, null);
        Type localVarReturnType = new TypeToken<TemplateDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Template (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleTemplateAsync(String xPostmarkServerToken, String templateIdOrAlias, final ApiCallback<TemplateDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, _callback);
        Type localVarReturnType = new TypeToken<TemplateDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplates
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count The number of Templates to return (required)
     * @param offset The number of Templates to \&quot;skip\&quot; before returning results. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesCall(String xPostmarkServerToken, BigDecimal count, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Offset", offset));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(String xPostmarkServerToken, BigDecimal count, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling listTemplates(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listTemplates(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listTemplates(Async)");
        }

        return listTemplatesCall(xPostmarkServerToken, count, offset, _callback);

    }

    /**
     * Get the Templates associated with this Server
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count The number of Templates to return (required)
     * @param offset The number of Templates to \&quot;skip\&quot; before returning results. (required)
     * @return TemplateListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateListingResponse listTemplates(String xPostmarkServerToken, BigDecimal count, BigDecimal offset) throws ApiException {
        ApiResponse<TemplateListingResponse> localVarResp = listTemplatesWithHttpInfo(xPostmarkServerToken, count, offset);
        return localVarResp.getData();
    }

    /**
     * Get the Templates associated with this Server
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count The number of Templates to return (required)
     * @param offset The number of Templates to \&quot;skip\&quot; before returning results. (required)
     * @return ApiResponse&lt;TemplateListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateListingResponse> listTemplatesWithHttpInfo(String xPostmarkServerToken, BigDecimal count, BigDecimal offset) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(xPostmarkServerToken, count, offset, null);
        Type localVarReturnType = new TypeToken<TemplateListingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Templates associated with this Server (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count The number of Templates to return (required)
     * @param offset The number of Templates to \&quot;skip\&quot; before returning results. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesAsync(String xPostmarkServerToken, BigDecimal count, BigDecimal offset, final ApiCallback<TemplateListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(xPostmarkServerToken, count, offset, _callback);
        Type localVarReturnType = new TypeToken<TemplateListingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendEmailBatchWithTemplates_0
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailBatchWithTemplates_0Call(String xPostmarkServerToken, SendEmailTemplatedBatchRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/email/batchWithTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailBatchWithTemplates_0ValidateBeforeCall(String xPostmarkServerToken, SendEmailTemplatedBatchRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailBatchWithTemplates_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendEmailBatchWithTemplates_0(Async)");
        }

        return sendEmailBatchWithTemplates_0Call(xPostmarkServerToken, body, _callback);

    }

    /**
     * Send a batch of email using templates.
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return List&lt;SendEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public List<SendEmailResponse> sendEmailBatchWithTemplates_0(String xPostmarkServerToken, SendEmailTemplatedBatchRequest body) throws ApiException {
        ApiResponse<List<SendEmailResponse>> localVarResp = sendEmailBatchWithTemplates_0WithHttpInfo(xPostmarkServerToken, body);
        return localVarResp.getData();
    }

    /**
     * Send a batch of email using templates.
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;SendEmailResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SendEmailResponse>> sendEmailBatchWithTemplates_0WithHttpInfo(String xPostmarkServerToken, SendEmailTemplatedBatchRequest body) throws ApiException {
        okhttp3.Call localVarCall = sendEmailBatchWithTemplates_0ValidateBeforeCall(xPostmarkServerToken, body, null);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a batch of email using templates. (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailBatchWithTemplates_0Async(String xPostmarkServerToken, SendEmailTemplatedBatchRequest body, final ApiCallback<List<SendEmailResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailBatchWithTemplates_0ValidateBeforeCall(xPostmarkServerToken, body, _callback);
        Type localVarReturnType = new TypeToken<List<SendEmailResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendEmailWithTemplate_0
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailWithTemplate_0Call(String xPostmarkServerToken, EmailWithTemplateRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/email/withTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailWithTemplate_0ValidateBeforeCall(String xPostmarkServerToken, EmailWithTemplateRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling sendEmailWithTemplate_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendEmailWithTemplate_0(Async)");
        }

        return sendEmailWithTemplate_0Call(xPostmarkServerToken, body, _callback);

    }

    /**
     * Send an email using a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return SendEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailResponse sendEmailWithTemplate_0(String xPostmarkServerToken, EmailWithTemplateRequest body) throws ApiException {
        ApiResponse<SendEmailResponse> localVarResp = sendEmailWithTemplate_0WithHttpInfo(xPostmarkServerToken, body);
        return localVarResp.getData();
    }

    /**
     * Send an email using a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return ApiResponse&lt;SendEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendEmailResponse> sendEmailWithTemplate_0WithHttpInfo(String xPostmarkServerToken, EmailWithTemplateRequest body) throws ApiException {
        okhttp3.Call localVarCall = sendEmailWithTemplate_0ValidateBeforeCall(xPostmarkServerToken, body, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send an email using a Template (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailWithTemplate_0Async(String xPostmarkServerToken, EmailWithTemplateRequest body, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailWithTemplate_0ValidateBeforeCall(xPostmarkServerToken, body, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesPost
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesPostCall(String xPostmarkServerToken, CreateTemplateRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesPostValidateBeforeCall(String xPostmarkServerToken, CreateTemplateRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling templatesPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling templatesPost(Async)");
        }

        return templatesPostCall(xPostmarkServerToken, body, _callback);

    }

    /**
     * Create a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return TemplateRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateRecordResponse templatesPost(String xPostmarkServerToken, CreateTemplateRequest body) throws ApiException {
        ApiResponse<TemplateRecordResponse> localVarResp = templatesPostWithHttpInfo(xPostmarkServerToken, body);
        return localVarResp.getData();
    }

    /**
     * Create a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @return ApiResponse&lt;TemplateRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateRecordResponse> templatesPostWithHttpInfo(String xPostmarkServerToken, CreateTemplateRequest body) throws ApiException {
        okhttp3.Call localVarCall = templatesPostValidateBeforeCall(xPostmarkServerToken, body, null);
        Type localVarReturnType = new TypeToken<TemplateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Template (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesPostAsync(String xPostmarkServerToken, CreateTemplateRequest body, final ApiCallback<TemplateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesPostValidateBeforeCall(xPostmarkServerToken, body, _callback);
        Type localVarReturnType = new TypeToken<TemplateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTemplateContent
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTemplateContentCall(String xPostmarkServerToken, TemplateValidationRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTemplateContentValidateBeforeCall(String xPostmarkServerToken, TemplateValidationRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling testTemplateContent(Async)");
        }

        return testTemplateContentCall(xPostmarkServerToken, body, _callback);

    }

    /**
     * Test Template Content
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @return TemplateValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateValidationResponse testTemplateContent(String xPostmarkServerToken, TemplateValidationRequest body) throws ApiException {
        ApiResponse<TemplateValidationResponse> localVarResp = testTemplateContentWithHttpInfo(xPostmarkServerToken, body);
        return localVarResp.getData();
    }

    /**
     * Test Template Content
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;TemplateValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateValidationResponse> testTemplateContentWithHttpInfo(String xPostmarkServerToken, TemplateValidationRequest body) throws ApiException {
        okhttp3.Call localVarCall = testTemplateContentValidateBeforeCall(xPostmarkServerToken, body, null);
        Type localVarReturnType = new TypeToken<TemplateValidationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Template Content (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTemplateContentAsync(String xPostmarkServerToken, TemplateValidationRequest body, final ApiCallback<TemplateValidationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTemplateContentValidateBeforeCall(xPostmarkServerToken, body, _callback);
        Type localVarReturnType = new TypeToken<TemplateValidationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplate
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to update. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCall(String xPostmarkServerToken, String templateIdOrAlias, EditTemplateRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/templates/{templateIdOrAlias}"
            .replace("{" + "templateIdOrAlias" + "}", localVarApiClient.escapeString(templateIdOrAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateValidateBeforeCall(String xPostmarkServerToken, String templateIdOrAlias, EditTemplateRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling updateTemplate(Async)");
        }

        // verify the required parameter 'templateIdOrAlias' is set
        if (templateIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'templateIdOrAlias' when calling updateTemplate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTemplate(Async)");
        }

        return updateTemplateCall(xPostmarkServerToken, templateIdOrAlias, body, _callback);

    }

    /**
     * Update a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to update. (required)
     * @param body  (required)
     * @return TemplateRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public TemplateRecordResponse updateTemplate(String xPostmarkServerToken, String templateIdOrAlias, EditTemplateRequest body) throws ApiException {
        ApiResponse<TemplateRecordResponse> localVarResp = updateTemplateWithHttpInfo(xPostmarkServerToken, templateIdOrAlias, body);
        return localVarResp.getData();
    }

    /**
     * Update a Template
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to update. (required)
     * @param body  (required)
     * @return ApiResponse&lt;TemplateRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateRecordResponse> updateTemplateWithHttpInfo(String xPostmarkServerToken, String templateIdOrAlias, EditTemplateRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, body, null);
        Type localVarReturnType = new TypeToken<TemplateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Template (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param templateIdOrAlias The &#39;TemplateID&#39; or &#39;Alias&#39; value for the Template you wish to update. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateAsync(String xPostmarkServerToken, String templateIdOrAlias, EditTemplateRequest body, final ApiCallback<TemplateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(xPostmarkServerToken, templateIdOrAlias, body, _callback);
        Type localVarReturnType = new TypeToken<TemplateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
