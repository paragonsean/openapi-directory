/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetBounceCounts200Response;
import org.openapitools.client.model.GetOutboundOpenCounts200Response;
import org.openapitools.client.model.GetOutboundOpenCountsByEmailClient200Response;
import org.openapitools.client.model.GetOutboundOpenCountsByPlatform200Response;
import org.openapitools.client.model.GetSpamComplaints200Response;
import org.openapitools.client.model.GetTrackedEmailCounts200Response;
import java.time.LocalDate;
import org.openapitools.client.model.OutboundOverviewStatsResponse;
import org.openapitools.client.model.SentCountsResponse;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBounceCounts
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBounceCountsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/bounces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBounceCountsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getBounceCounts(Async)");
        }

        return getBounceCountsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get bounce counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return GetBounceCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetBounceCounts200Response getBounceCounts(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetBounceCounts200Response> localVarResp = getBounceCountsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get bounce counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;GetBounceCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBounceCounts200Response> getBounceCountsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getBounceCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetBounceCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bounce counts (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBounceCountsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetBounceCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBounceCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetBounceCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundClickCounts
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClickCountsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCounts(Async)");
        }

        return getOutboundClickCountsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get click counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Object getOutboundClickCounts(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<Object> localVarResp = getOutboundClickCountsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get click counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOutboundClickCountsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClickCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get click counts (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClickCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundClickCountsByBrowserFamily
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByBrowserFamilyCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/browserfamilies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClickCountsByBrowserFamilyValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByBrowserFamily(Async)");
        }

        return getOutboundClickCountsByBrowserFamilyCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get browser usage by family
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Object getOutboundClickCountsByBrowserFamily(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<Object> localVarResp = getOutboundClickCountsByBrowserFamilyWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get browser usage by family
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOutboundClickCountsByBrowserFamilyWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClickCountsByBrowserFamilyValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get browser usage by family (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByBrowserFamilyAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClickCountsByBrowserFamilyValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundClickCountsByLocation
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByLocationCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClickCountsByLocationValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByLocation(Async)");
        }

        return getOutboundClickCountsByLocationCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get clicks by body location
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Object getOutboundClickCountsByLocation(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<Object> localVarResp = getOutboundClickCountsByLocationWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get clicks by body location
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOutboundClickCountsByLocationWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClickCountsByLocationValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get clicks by body location (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByLocationAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClickCountsByLocationValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundClickCountsByPlatform
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByPlatformCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/clicks/platforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundClickCountsByPlatformValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundClickCountsByPlatform(Async)");
        }

        return getOutboundClickCountsByPlatformCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get browser plaform usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public Object getOutboundClickCountsByPlatform(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<Object> localVarResp = getOutboundClickCountsByPlatformWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get browser plaform usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOutboundClickCountsByPlatformWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundClickCountsByPlatformValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get browser plaform usage (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundClickCountsByPlatformAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundClickCountsByPlatformValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundOpenCounts
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundOpenCountsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCounts(Async)");
        }

        return getOutboundOpenCountsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get email open counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return GetOutboundOpenCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundOpenCounts200Response getOutboundOpenCounts(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetOutboundOpenCounts200Response> localVarResp = getOutboundOpenCountsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get email open counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;GetOutboundOpenCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOutboundOpenCounts200Response> getOutboundOpenCountsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundOpenCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get email open counts (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetOutboundOpenCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundOpenCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundOpenCountsByEmailClient
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsByEmailClientCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens/emailclients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundOpenCountsByEmailClientValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCountsByEmailClient(Async)");
        }

        return getOutboundOpenCountsByEmailClientCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get email client usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return GetOutboundOpenCountsByEmailClient200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundOpenCountsByEmailClient200Response getOutboundOpenCountsByEmailClient(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetOutboundOpenCountsByEmailClient200Response> localVarResp = getOutboundOpenCountsByEmailClientWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get email client usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;GetOutboundOpenCountsByEmailClient200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOutboundOpenCountsByEmailClient200Response> getOutboundOpenCountsByEmailClientWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundOpenCountsByEmailClientValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCountsByEmailClient200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get email client usage (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsByEmailClientAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetOutboundOpenCountsByEmailClient200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundOpenCountsByEmailClientValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCountsByEmailClient200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundOpenCountsByPlatform
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsByPlatformCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/opens/platforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundOpenCountsByPlatformValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOpenCountsByPlatform(Async)");
        }

        return getOutboundOpenCountsByPlatformCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get email platform usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return GetOutboundOpenCountsByPlatform200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutboundOpenCountsByPlatform200Response getOutboundOpenCountsByPlatform(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetOutboundOpenCountsByPlatform200Response> localVarResp = getOutboundOpenCountsByPlatformWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get email platform usage
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;GetOutboundOpenCountsByPlatform200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOutboundOpenCountsByPlatform200Response> getOutboundOpenCountsByPlatformWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundOpenCountsByPlatformValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCountsByPlatform200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get email platform usage (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOpenCountsByPlatformAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetOutboundOpenCountsByPlatform200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundOpenCountsByPlatformValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetOutboundOpenCountsByPlatform200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutboundOverviewStatistics
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOverviewStatisticsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboundOverviewStatisticsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getOutboundOverviewStatistics(Async)");
        }

        return getOutboundOverviewStatisticsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get outbound overview
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return OutboundOverviewStatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public OutboundOverviewStatsResponse getOutboundOverviewStatistics(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<OutboundOverviewStatsResponse> localVarResp = getOutboundOverviewStatisticsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get outbound overview
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;OutboundOverviewStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutboundOverviewStatsResponse> getOutboundOverviewStatisticsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getOutboundOverviewStatisticsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<OutboundOverviewStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get outbound overview (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutboundOverviewStatisticsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<OutboundOverviewStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboundOverviewStatisticsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<OutboundOverviewStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSentCounts
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSentCountsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/sends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentCountsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getSentCounts(Async)");
        }

        return getSentCountsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get sent counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return SentCountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SentCountsResponse getSentCounts(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<SentCountsResponse> localVarResp = getSentCountsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get sent counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;SentCountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SentCountsResponse> getSentCountsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getSentCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<SentCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sent counts (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSentCountsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<SentCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<SentCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpamComplaints
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpamComplaintsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpamComplaintsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getSpamComplaints(Async)");
        }

        return getSpamComplaintsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get spam complaints
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return GetSpamComplaints200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetSpamComplaints200Response getSpamComplaints(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetSpamComplaints200Response> localVarResp = getSpamComplaintsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get spam complaints
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;GetSpamComplaints200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSpamComplaints200Response> getSpamComplaintsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getSpamComplaintsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetSpamComplaints200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get spam complaints (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpamComplaintsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetSpamComplaints200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpamComplaintsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetSpamComplaints200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackedEmailCounts
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackedEmailCountsCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/outbound/tracked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackedEmailCountsValidateBeforeCall(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getTrackedEmailCounts(Async)");
        }

        return getTrackedEmailCountsCall(xPostmarkServerToken, tag, fromdate, todate, _callback);

    }

    /**
     * Get tracked email counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @return GetTrackedEmailCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackedEmailCounts200Response getTrackedEmailCounts(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        ApiResponse<GetTrackedEmailCounts200Response> localVarResp = getTrackedEmailCountsWithHttpInfo(xPostmarkServerToken, tag, fromdate, todate);
        return localVarResp.getData();
    }

    /**
     * Get tracked email counts
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @return ApiResponse&lt;GetTrackedEmailCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrackedEmailCounts200Response> getTrackedEmailCountsWithHttpInfo(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate) throws ApiException {
        okhttp3.Call localVarCall = getTrackedEmailCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, null);
        Type localVarReturnType = new TypeToken<GetTrackedEmailCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracked email counts (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param tag Filter by tag (optional)
     * @param fromdate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param todate Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrackedEmailCountsAsync(String xPostmarkServerToken, String tag, LocalDate fromdate, LocalDate todate, final ApiCallback<GetTrackedEmailCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackedEmailCountsValidateBeforeCall(xPostmarkServerToken, tag, fromdate, todate, _callback);
        Type localVarReturnType = new TypeToken<GetTrackedEmailCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
