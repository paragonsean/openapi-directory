/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBounceCounts200ResponseDaysInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBounceCounts200ResponseDaysInner {
  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HARD_BOUNCE = "HardBounce";
  @SerializedName(SERIALIZED_NAME_HARD_BOUNCE)
  private Integer hardBounce;

  public static final String SERIALIZED_NAME_SM_T_P_API_ERROR = "SMTPApiError";
  @SerializedName(SERIALIZED_NAME_SM_T_P_API_ERROR)
  private Integer smTPApiError;

  public static final String SERIALIZED_NAME_SOFT_BOUNCE = "SoftBounce";
  @SerializedName(SERIALIZED_NAME_SOFT_BOUNCE)
  private Integer softBounce;

  public static final String SERIALIZED_NAME_TRANSIENT = "Transient";
  @SerializedName(SERIALIZED_NAME_TRANSIENT)
  private Integer _transient;

  public GetBounceCounts200ResponseDaysInner() {
  }

  public GetBounceCounts200ResponseDaysInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public GetBounceCounts200ResponseDaysInner hardBounce(Integer hardBounce) {
    this.hardBounce = hardBounce;
    return this;
  }

  /**
   * Get hardBounce
   * @return hardBounce
   */
  @javax.annotation.Nullable
  public Integer getHardBounce() {
    return hardBounce;
  }

  public void setHardBounce(Integer hardBounce) {
    this.hardBounce = hardBounce;
  }


  public GetBounceCounts200ResponseDaysInner smTPApiError(Integer smTPApiError) {
    this.smTPApiError = smTPApiError;
    return this;
  }

  /**
   * Get smTPApiError
   * @return smTPApiError
   */
  @javax.annotation.Nullable
  public Integer getSmTPApiError() {
    return smTPApiError;
  }

  public void setSmTPApiError(Integer smTPApiError) {
    this.smTPApiError = smTPApiError;
  }


  public GetBounceCounts200ResponseDaysInner softBounce(Integer softBounce) {
    this.softBounce = softBounce;
    return this;
  }

  /**
   * Get softBounce
   * @return softBounce
   */
  @javax.annotation.Nullable
  public Integer getSoftBounce() {
    return softBounce;
  }

  public void setSoftBounce(Integer softBounce) {
    this.softBounce = softBounce;
  }


  public GetBounceCounts200ResponseDaysInner _transient(Integer _transient) {
    this._transient = _transient;
    return this;
  }

  /**
   * Get _transient
   * @return _transient
   */
  @javax.annotation.Nullable
  public Integer getTransient() {
    return _transient;
  }

  public void setTransient(Integer _transient) {
    this._transient = _transient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBounceCounts200ResponseDaysInner getBounceCounts200ResponseDaysInner = (GetBounceCounts200ResponseDaysInner) o;
    return Objects.equals(this.date, getBounceCounts200ResponseDaysInner.date) &&
        Objects.equals(this.hardBounce, getBounceCounts200ResponseDaysInner.hardBounce) &&
        Objects.equals(this.smTPApiError, getBounceCounts200ResponseDaysInner.smTPApiError) &&
        Objects.equals(this.softBounce, getBounceCounts200ResponseDaysInner.softBounce) &&
        Objects.equals(this._transient, getBounceCounts200ResponseDaysInner._transient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, hardBounce, smTPApiError, softBounce, _transient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBounceCounts200ResponseDaysInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hardBounce: ").append(toIndentedString(hardBounce)).append("\n");
    sb.append("    smTPApiError: ").append(toIndentedString(smTPApiError)).append("\n");
    sb.append("    softBounce: ").append(toIndentedString(softBounce)).append("\n");
    sb.append("    _transient: ").append(toIndentedString(_transient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Date");
    openapiFields.add("HardBounce");
    openapiFields.add("SMTPApiError");
    openapiFields.add("SoftBounce");
    openapiFields.add("Transient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBounceCounts200ResponseDaysInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBounceCounts200ResponseDaysInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBounceCounts200ResponseDaysInner is not found in the empty JSON string", GetBounceCounts200ResponseDaysInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBounceCounts200ResponseDaysInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBounceCounts200ResponseDaysInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBounceCounts200ResponseDaysInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBounceCounts200ResponseDaysInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBounceCounts200ResponseDaysInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBounceCounts200ResponseDaysInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBounceCounts200ResponseDaysInner>() {
           @Override
           public void write(JsonWriter out, GetBounceCounts200ResponseDaysInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBounceCounts200ResponseDaysInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBounceCounts200ResponseDaysInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBounceCounts200ResponseDaysInner
   * @throws IOException if the JSON string is invalid with respect to GetBounceCounts200ResponseDaysInner
   */
  public static GetBounceCounts200ResponseDaysInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBounceCounts200ResponseDaysInner.class);
  }

  /**
   * Convert an instance of GetBounceCounts200ResponseDaysInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

