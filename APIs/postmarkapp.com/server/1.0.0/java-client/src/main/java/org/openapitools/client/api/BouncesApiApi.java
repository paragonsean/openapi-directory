/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BounceActivationResponse;
import org.openapitools.client.model.BounceDumpResponse;
import org.openapitools.client.model.BounceInfoResponse;
import org.openapitools.client.model.BounceSearchResponse;
import org.openapitools.client.model.DeliveryStatsResponse;
import java.time.LocalDate;
import org.openapitools.client.model.StandardPostmarkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BouncesApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BouncesApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BouncesApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateBounce
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the Bounce to activate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateBounceCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}/activate"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateBounceValidateBeforeCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling activateBounce(Async)");
        }

        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling activateBounce(Async)");
        }

        return activateBounceCall(xPostmarkServerToken, bounceid, _callback);

    }

    /**
     * Activate a bounce
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the Bounce to activate. (required)
     * @return BounceActivationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BounceActivationResponse activateBounce(String xPostmarkServerToken, Long bounceid) throws ApiException {
        ApiResponse<BounceActivationResponse> localVarResp = activateBounceWithHttpInfo(xPostmarkServerToken, bounceid);
        return localVarResp.getData();
    }

    /**
     * Activate a bounce
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the Bounce to activate. (required)
     * @return ApiResponse&lt;BounceActivationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BounceActivationResponse> activateBounceWithHttpInfo(String xPostmarkServerToken, Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = activateBounceValidateBeforeCall(xPostmarkServerToken, bounceid, null);
        Type localVarReturnType = new TypeToken<BounceActivationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate a bounce (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the Bounce to activate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateBounceAsync(String xPostmarkServerToken, Long bounceid, final ApiCallback<BounceActivationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateBounceValidateBeforeCall(xPostmarkServerToken, bounceid, _callback);
        Type localVarReturnType = new TypeToken<BounceActivationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bouncesBounceidDumpGet
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID for the bounce dump to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bouncesBounceidDumpGetCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}/dump"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bouncesBounceidDumpGetValidateBeforeCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling bouncesBounceidDumpGet(Async)");
        }

        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling bouncesBounceidDumpGet(Async)");
        }

        return bouncesBounceidDumpGetCall(xPostmarkServerToken, bounceid, _callback);

    }

    /**
     * Get bounce dump
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID for the bounce dump to retrieve. (required)
     * @return BounceDumpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BounceDumpResponse bouncesBounceidDumpGet(String xPostmarkServerToken, Long bounceid) throws ApiException {
        ApiResponse<BounceDumpResponse> localVarResp = bouncesBounceidDumpGetWithHttpInfo(xPostmarkServerToken, bounceid);
        return localVarResp.getData();
    }

    /**
     * Get bounce dump
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID for the bounce dump to retrieve. (required)
     * @return ApiResponse&lt;BounceDumpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BounceDumpResponse> bouncesBounceidDumpGetWithHttpInfo(String xPostmarkServerToken, Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = bouncesBounceidDumpGetValidateBeforeCall(xPostmarkServerToken, bounceid, null);
        Type localVarReturnType = new TypeToken<BounceDumpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bounce dump (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID for the bounce dump to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bouncesBounceidDumpGetAsync(String xPostmarkServerToken, Long bounceid, final ApiCallback<BounceDumpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bouncesBounceidDumpGetValidateBeforeCall(xPostmarkServerToken, bounceid, _callback);
        Type localVarReturnType = new TypeToken<BounceDumpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBounces
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of bounces to return per request. Max 500. (required)
     * @param offset Number of bounces to skip. (required)
     * @param type Filter by type of bounce (optional)
     * @param inactive Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn&#39;t specified it will return both active and inactive. (optional)
     * @param emailFilter Filter by email address (optional)
     * @param messageID Filter by messageID (optional)
     * @param tag Filter by tag (optional)
     * @param todate Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param fromdate Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBouncesCall(String xPostmarkServerToken, Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (inactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inactive", inactive));
        }

        if (emailFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailFilter", emailFilter));
        }

        if (messageID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messageID", messageID));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBouncesValidateBeforeCall(String xPostmarkServerToken, Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getBounces(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling getBounces(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getBounces(Async)");
        }

        return getBouncesCall(xPostmarkServerToken, count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);

    }

    /**
     * Get bounces
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of bounces to return per request. Max 500. (required)
     * @param offset Number of bounces to skip. (required)
     * @param type Filter by type of bounce (optional)
     * @param inactive Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn&#39;t specified it will return both active and inactive. (optional)
     * @param emailFilter Filter by email address (optional)
     * @param messageID Filter by messageID (optional)
     * @param tag Filter by tag (optional)
     * @param todate Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param fromdate Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return BounceSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BounceSearchResponse getBounces(String xPostmarkServerToken, Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate) throws ApiException {
        ApiResponse<BounceSearchResponse> localVarResp = getBouncesWithHttpInfo(xPostmarkServerToken, count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate);
        return localVarResp.getData();
    }

    /**
     * Get bounces
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of bounces to return per request. Max 500. (required)
     * @param offset Number of bounces to skip. (required)
     * @param type Filter by type of bounce (optional)
     * @param inactive Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn&#39;t specified it will return both active and inactive. (optional)
     * @param emailFilter Filter by email address (optional)
     * @param messageID Filter by messageID (optional)
     * @param tag Filter by tag (optional)
     * @param todate Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param fromdate Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @return ApiResponse&lt;BounceSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BounceSearchResponse> getBouncesWithHttpInfo(String xPostmarkServerToken, Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate) throws ApiException {
        okhttp3.Call localVarCall = getBouncesValidateBeforeCall(xPostmarkServerToken, count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, null);
        Type localVarReturnType = new TypeToken<BounceSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get bounces (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param count Number of bounces to return per request. Max 500. (required)
     * @param offset Number of bounces to skip. (required)
     * @param type Filter by type of bounce (optional)
     * @param inactive Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn&#39;t specified it will return both active and inactive. (optional)
     * @param emailFilter Filter by email address (optional)
     * @param messageID Filter by messageID (optional)
     * @param tag Filter by tag (optional)
     * @param todate Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param fromdate Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBouncesAsync(String xPostmarkServerToken, Integer count, Integer offset, String type, Boolean inactive, String emailFilter, String messageID, String tag, LocalDate todate, LocalDate fromdate, final ApiCallback<BounceSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBouncesValidateBeforeCall(xPostmarkServerToken, count, offset, type, inactive, emailFilter, messageID, tag, todate, fromdate, _callback);
        Type localVarReturnType = new TypeToken<BounceSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryStats
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryStatsCall(String xPostmarkServerToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deliverystats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryStatsValidateBeforeCall(String xPostmarkServerToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getDeliveryStats(Async)");
        }

        return getDeliveryStatsCall(xPostmarkServerToken, _callback);

    }

    /**
     * Get delivery stats
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @return DeliveryStatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public DeliveryStatsResponse getDeliveryStats(String xPostmarkServerToken) throws ApiException {
        ApiResponse<DeliveryStatsResponse> localVarResp = getDeliveryStatsWithHttpInfo(xPostmarkServerToken);
        return localVarResp.getData();
    }

    /**
     * Get delivery stats
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @return ApiResponse&lt;DeliveryStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeliveryStatsResponse> getDeliveryStatsWithHttpInfo(String xPostmarkServerToken) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryStatsValidateBeforeCall(xPostmarkServerToken, null);
        Type localVarReturnType = new TypeToken<DeliveryStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get delivery stats (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryStatsAsync(String xPostmarkServerToken, final ApiCallback<DeliveryStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryStatsValidateBeforeCall(xPostmarkServerToken, _callback);
        Type localVarReturnType = new TypeToken<DeliveryStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSingleBounce
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the bounce to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleBounceCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bounces/{bounceid}"
            .replace("{" + "bounceid" + "}", localVarApiClient.escapeString(bounceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPostmarkServerToken != null) {
            localVarHeaderParams.put("X-Postmark-Server-Token", localVarApiClient.parameterToString(xPostmarkServerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleBounceValidateBeforeCall(String xPostmarkServerToken, Long bounceid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPostmarkServerToken' is set
        if (xPostmarkServerToken == null) {
            throw new ApiException("Missing the required parameter 'xPostmarkServerToken' when calling getSingleBounce(Async)");
        }

        // verify the required parameter 'bounceid' is set
        if (bounceid == null) {
            throw new ApiException("Missing the required parameter 'bounceid' when calling getSingleBounce(Async)");
        }

        return getSingleBounceCall(xPostmarkServerToken, bounceid, _callback);

    }

    /**
     * Get a single bounce
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the bounce to retrieve. (required)
     * @return BounceInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BounceInfoResponse getSingleBounce(String xPostmarkServerToken, Long bounceid) throws ApiException {
        ApiResponse<BounceInfoResponse> localVarResp = getSingleBounceWithHttpInfo(xPostmarkServerToken, bounceid);
        return localVarResp.getData();
    }

    /**
     * Get a single bounce
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the bounce to retrieve. (required)
     * @return ApiResponse&lt;BounceInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BounceInfoResponse> getSingleBounceWithHttpInfo(String xPostmarkServerToken, Long bounceid) throws ApiException {
        okhttp3.Call localVarCall = getSingleBounceValidateBeforeCall(xPostmarkServerToken, bounceid, null);
        Type localVarReturnType = new TypeToken<BounceInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single bounce (asynchronously)
     * 
     * @param xPostmarkServerToken The token associated with the Server on which this request will operate. (required)
     * @param bounceid The ID of the bounce to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An error was generated due to incorrect use of the API. See the Message associated with this response for more information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Indicates an internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleBounceAsync(String xPostmarkServerToken, Long bounceid, final ApiCallback<BounceInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleBounceValidateBeforeCall(xPostmarkServerToken, bounceid, _callback);
        Type localVarReturnType = new TypeToken<BounceInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
