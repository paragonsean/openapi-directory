/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.EmailNameAddressPair;
import org.openapitools.client.model.InboundMessageDetailFromFull;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundMessageDetail {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "Cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private String cc;

  public static final String SERIALIZED_NAME_CC_FULL = "CcFull";
  @SerializedName(SERIALIZED_NAME_CC_FULL)
  private List<EmailNameAddressPair> ccFull = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_FROM_FULL = "FromFull";
  @SerializedName(SERIALIZED_NAME_FROM_FULL)
  private InboundMessageDetailFromFull fromFull;

  public static final String SERIALIZED_NAME_FROM_NAME = "FromName";
  @SerializedName(SERIALIZED_NAME_FROM_NAME)
  private String fromName;

  public static final String SERIALIZED_NAME_MAILBOX_HASH = "MailboxHash";
  @SerializedName(SERIALIZED_NAME_MAILBOX_HASH)
  private String mailboxHash;

  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private String messageID;

  public static final String SERIALIZED_NAME_ORIGINAL_RECIPIENT = "OriginalRecipient";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_RECIPIENT)
  private String originalRecipient;

  public static final String SERIALIZED_NAME_REPLY_TO = "ReplyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAG = "Tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TO_FULL = "ToFull";
  @SerializedName(SERIALIZED_NAME_TO_FULL)
  private List<EmailNameAddressPair> toFull = new ArrayList<>();

  public InboundMessageDetail() {
  }

  public InboundMessageDetail attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public InboundMessageDetail addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public InboundMessageDetail cc(String cc) {
    this.cc = cc;
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public String getCc() {
    return cc;
  }

  public void setCc(String cc) {
    this.cc = cc;
  }


  public InboundMessageDetail ccFull(List<EmailNameAddressPair> ccFull) {
    this.ccFull = ccFull;
    return this;
  }

  public InboundMessageDetail addCcFullItem(EmailNameAddressPair ccFullItem) {
    if (this.ccFull == null) {
      this.ccFull = new ArrayList<>();
    }
    this.ccFull.add(ccFullItem);
    return this;
  }

  /**
   * Get ccFull
   * @return ccFull
   */
  @javax.annotation.Nullable
  public List<EmailNameAddressPair> getCcFull() {
    return ccFull;
  }

  public void setCcFull(List<EmailNameAddressPair> ccFull) {
    this.ccFull = ccFull;
  }


  public InboundMessageDetail date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public InboundMessageDetail from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public InboundMessageDetail fromFull(InboundMessageDetailFromFull fromFull) {
    this.fromFull = fromFull;
    return this;
  }

  /**
   * Get fromFull
   * @return fromFull
   */
  @javax.annotation.Nullable
  public InboundMessageDetailFromFull getFromFull() {
    return fromFull;
  }

  public void setFromFull(InboundMessageDetailFromFull fromFull) {
    this.fromFull = fromFull;
  }


  public InboundMessageDetail fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  /**
   * Get fromName
   * @return fromName
   */
  @javax.annotation.Nullable
  public String getFromName() {
    return fromName;
  }

  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public InboundMessageDetail mailboxHash(String mailboxHash) {
    this.mailboxHash = mailboxHash;
    return this;
  }

  /**
   * Get mailboxHash
   * @return mailboxHash
   */
  @javax.annotation.Nullable
  public String getMailboxHash() {
    return mailboxHash;
  }

  public void setMailboxHash(String mailboxHash) {
    this.mailboxHash = mailboxHash;
  }


  public InboundMessageDetail messageID(String messageID) {
    this.messageID = messageID;
    return this;
  }

  /**
   * Get messageID
   * @return messageID
   */
  @javax.annotation.Nullable
  public String getMessageID() {
    return messageID;
  }

  public void setMessageID(String messageID) {
    this.messageID = messageID;
  }


  public InboundMessageDetail originalRecipient(String originalRecipient) {
    this.originalRecipient = originalRecipient;
    return this;
  }

  /**
   * Get originalRecipient
   * @return originalRecipient
   */
  @javax.annotation.Nullable
  public String getOriginalRecipient() {
    return originalRecipient;
  }

  public void setOriginalRecipient(String originalRecipient) {
    this.originalRecipient = originalRecipient;
  }


  public InboundMessageDetail replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Get replyTo
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public InboundMessageDetail status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public InboundMessageDetail subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public InboundMessageDetail tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public InboundMessageDetail to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public InboundMessageDetail toFull(List<EmailNameAddressPair> toFull) {
    this.toFull = toFull;
    return this;
  }

  public InboundMessageDetail addToFullItem(EmailNameAddressPair toFullItem) {
    if (this.toFull == null) {
      this.toFull = new ArrayList<>();
    }
    this.toFull.add(toFullItem);
    return this;
  }

  /**
   * Get toFull
   * @return toFull
   */
  @javax.annotation.Nullable
  public List<EmailNameAddressPair> getToFull() {
    return toFull;
  }

  public void setToFull(List<EmailNameAddressPair> toFull) {
    this.toFull = toFull;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundMessageDetail inboundMessageDetail = (InboundMessageDetail) o;
    return Objects.equals(this.attachments, inboundMessageDetail.attachments) &&
        Objects.equals(this.cc, inboundMessageDetail.cc) &&
        Objects.equals(this.ccFull, inboundMessageDetail.ccFull) &&
        Objects.equals(this.date, inboundMessageDetail.date) &&
        Objects.equals(this.from, inboundMessageDetail.from) &&
        Objects.equals(this.fromFull, inboundMessageDetail.fromFull) &&
        Objects.equals(this.fromName, inboundMessageDetail.fromName) &&
        Objects.equals(this.mailboxHash, inboundMessageDetail.mailboxHash) &&
        Objects.equals(this.messageID, inboundMessageDetail.messageID) &&
        Objects.equals(this.originalRecipient, inboundMessageDetail.originalRecipient) &&
        Objects.equals(this.replyTo, inboundMessageDetail.replyTo) &&
        Objects.equals(this.status, inboundMessageDetail.status) &&
        Objects.equals(this.subject, inboundMessageDetail.subject) &&
        Objects.equals(this.tag, inboundMessageDetail.tag) &&
        Objects.equals(this.to, inboundMessageDetail.to) &&
        Objects.equals(this.toFull, inboundMessageDetail.toFull);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, cc, ccFull, date, from, fromFull, fromName, mailboxHash, messageID, originalRecipient, replyTo, status, subject, tag, to, toFull);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundMessageDetail {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    ccFull: ").append(toIndentedString(ccFull)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromFull: ").append(toIndentedString(fromFull)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    mailboxHash: ").append(toIndentedString(mailboxHash)).append("\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    originalRecipient: ").append(toIndentedString(originalRecipient)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    toFull: ").append(toIndentedString(toFull)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("Cc");
    openapiFields.add("CcFull");
    openapiFields.add("Date");
    openapiFields.add("From");
    openapiFields.add("FromFull");
    openapiFields.add("FromName");
    openapiFields.add("MailboxHash");
    openapiFields.add("MessageID");
    openapiFields.add("OriginalRecipient");
    openapiFields.add("ReplyTo");
    openapiFields.add("Status");
    openapiFields.add("Subject");
    openapiFields.add("Tag");
    openapiFields.add("To");
    openapiFields.add("ToFull");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundMessageDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundMessageDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundMessageDetail is not found in the empty JSON string", InboundMessageDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundMessageDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundMessageDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("Attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
          }

          // validate the optional field `Attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("Cc") != null && !jsonObj.get("Cc").isJsonNull()) && !jsonObj.get("Cc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cc").toString()));
      }
      if (jsonObj.get("CcFull") != null && !jsonObj.get("CcFull").isJsonNull()) {
        JsonArray jsonArrayccFull = jsonObj.getAsJsonArray("CcFull");
        if (jsonArrayccFull != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CcFull").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CcFull` to be an array in the JSON string but got `%s`", jsonObj.get("CcFull").toString()));
          }

          // validate the optional field `CcFull` (array)
          for (int i = 0; i < jsonArrayccFull.size(); i++) {
            EmailNameAddressPair.validateJsonElement(jsonArrayccFull.get(i));
          };
        }
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      // validate the optional field `FromFull`
      if (jsonObj.get("FromFull") != null && !jsonObj.get("FromFull").isJsonNull()) {
        InboundMessageDetailFromFull.validateJsonElement(jsonObj.get("FromFull"));
      }
      if ((jsonObj.get("FromName") != null && !jsonObj.get("FromName").isJsonNull()) && !jsonObj.get("FromName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromName").toString()));
      }
      if ((jsonObj.get("MailboxHash") != null && !jsonObj.get("MailboxHash").isJsonNull()) && !jsonObj.get("MailboxHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MailboxHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MailboxHash").toString()));
      }
      if ((jsonObj.get("MessageID") != null && !jsonObj.get("MessageID").isJsonNull()) && !jsonObj.get("MessageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageID").toString()));
      }
      if ((jsonObj.get("OriginalRecipient") != null && !jsonObj.get("OriginalRecipient").isJsonNull()) && !jsonObj.get("OriginalRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalRecipient").toString()));
      }
      if ((jsonObj.get("ReplyTo") != null && !jsonObj.get("ReplyTo").isJsonNull()) && !jsonObj.get("ReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplyTo").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
      }
      if ((jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) && !jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      if (jsonObj.get("ToFull") != null && !jsonObj.get("ToFull").isJsonNull()) {
        JsonArray jsonArraytoFull = jsonObj.getAsJsonArray("ToFull");
        if (jsonArraytoFull != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ToFull").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ToFull` to be an array in the JSON string but got `%s`", jsonObj.get("ToFull").toString()));
          }

          // validate the optional field `ToFull` (array)
          for (int i = 0; i < jsonArraytoFull.size(); i++) {
            EmailNameAddressPair.validateJsonElement(jsonArraytoFull.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundMessageDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundMessageDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundMessageDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundMessageDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundMessageDetail>() {
           @Override
           public void write(JsonWriter out, InboundMessageDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundMessageDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundMessageDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundMessageDetail
   * @throws IOException if the JSON string is invalid with respect to InboundMessageDetail
   */
  public static InboundMessageDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundMessageDetail.class);
  }

  /**
   * Convert an instance of InboundMessageDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

