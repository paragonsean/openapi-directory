/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExtendedMessageClickEventInformationClient;
import org.openapitools.client.model.ExtendedMessageClickEventInformationGeo;
import org.openapitools.client.model.ExtendedMessageClickEventInformationOS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:05.377475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedMessageClickEventInformation {
  public static final String SERIALIZED_NAME_CLICK_LOCATION = "ClickLocation";
  @SerializedName(SERIALIZED_NAME_CLICK_LOCATION)
  private String clickLocation;

  public static final String SERIALIZED_NAME_CLIENT = "Client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private ExtendedMessageClickEventInformationClient client;

  public static final String SERIALIZED_NAME_GEO = "Geo";
  @SerializedName(SERIALIZED_NAME_GEO)
  private ExtendedMessageClickEventInformationGeo geo;

  public static final String SERIALIZED_NAME_MESSAGE_I_D = "MessageID";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_D)
  private String messageID;

  public static final String SERIALIZED_NAME_O_S = "OS";
  @SerializedName(SERIALIZED_NAME_O_S)
  private ExtendedMessageClickEventInformationOS OS;

  public static final String SERIALIZED_NAME_ORIGINAL_LINK = "OriginalLink";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_LINK)
  private String originalLink;

  public static final String SERIALIZED_NAME_PLATFORM = "Platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_RECEIVED_AT = "ReceivedAt";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AT)
  private OffsetDateTime receivedAt;

  public static final String SERIALIZED_NAME_RECIPIENT = "Recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_TAG = "Tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_USER_AGENT = "UserAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public ExtendedMessageClickEventInformation() {
  }

  public ExtendedMessageClickEventInformation clickLocation(String clickLocation) {
    this.clickLocation = clickLocation;
    return this;
  }

  /**
   * Get clickLocation
   * @return clickLocation
   */
  @javax.annotation.Nullable
  public String getClickLocation() {
    return clickLocation;
  }

  public void setClickLocation(String clickLocation) {
    this.clickLocation = clickLocation;
  }


  public ExtendedMessageClickEventInformation client(ExtendedMessageClickEventInformationClient client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public ExtendedMessageClickEventInformationClient getClient() {
    return client;
  }

  public void setClient(ExtendedMessageClickEventInformationClient client) {
    this.client = client;
  }


  public ExtendedMessageClickEventInformation geo(ExtendedMessageClickEventInformationGeo geo) {
    this.geo = geo;
    return this;
  }

  /**
   * Get geo
   * @return geo
   */
  @javax.annotation.Nullable
  public ExtendedMessageClickEventInformationGeo getGeo() {
    return geo;
  }

  public void setGeo(ExtendedMessageClickEventInformationGeo geo) {
    this.geo = geo;
  }


  public ExtendedMessageClickEventInformation messageID(String messageID) {
    this.messageID = messageID;
    return this;
  }

  /**
   * Get messageID
   * @return messageID
   */
  @javax.annotation.Nullable
  public String getMessageID() {
    return messageID;
  }

  public void setMessageID(String messageID) {
    this.messageID = messageID;
  }


  public ExtendedMessageClickEventInformation OS(ExtendedMessageClickEventInformationOS OS) {
    this.OS = OS;
    return this;
  }

  /**
   * Get OS
   * @return OS
   */
  @javax.annotation.Nullable
  public ExtendedMessageClickEventInformationOS getOS() {
    return OS;
  }

  public void setOS(ExtendedMessageClickEventInformationOS OS) {
    this.OS = OS;
  }


  public ExtendedMessageClickEventInformation originalLink(String originalLink) {
    this.originalLink = originalLink;
    return this;
  }

  /**
   * Get originalLink
   * @return originalLink
   */
  @javax.annotation.Nullable
  public String getOriginalLink() {
    return originalLink;
  }

  public void setOriginalLink(String originalLink) {
    this.originalLink = originalLink;
  }


  public ExtendedMessageClickEventInformation platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public ExtendedMessageClickEventInformation receivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
    return this;
  }

  /**
   * Get receivedAt
   * @return receivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceivedAt() {
    return receivedAt;
  }

  public void setReceivedAt(OffsetDateTime receivedAt) {
    this.receivedAt = receivedAt;
  }


  public ExtendedMessageClickEventInformation recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public ExtendedMessageClickEventInformation tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public ExtendedMessageClickEventInformation userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedMessageClickEventInformation extendedMessageClickEventInformation = (ExtendedMessageClickEventInformation) o;
    return Objects.equals(this.clickLocation, extendedMessageClickEventInformation.clickLocation) &&
        Objects.equals(this.client, extendedMessageClickEventInformation.client) &&
        Objects.equals(this.geo, extendedMessageClickEventInformation.geo) &&
        Objects.equals(this.messageID, extendedMessageClickEventInformation.messageID) &&
        Objects.equals(this.OS, extendedMessageClickEventInformation.OS) &&
        Objects.equals(this.originalLink, extendedMessageClickEventInformation.originalLink) &&
        Objects.equals(this.platform, extendedMessageClickEventInformation.platform) &&
        Objects.equals(this.receivedAt, extendedMessageClickEventInformation.receivedAt) &&
        Objects.equals(this.recipient, extendedMessageClickEventInformation.recipient) &&
        Objects.equals(this.tag, extendedMessageClickEventInformation.tag) &&
        Objects.equals(this.userAgent, extendedMessageClickEventInformation.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickLocation, client, geo, messageID, OS, originalLink, platform, receivedAt, recipient, tag, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedMessageClickEventInformation {\n");
    sb.append("    clickLocation: ").append(toIndentedString(clickLocation)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    geo: ").append(toIndentedString(geo)).append("\n");
    sb.append("    messageID: ").append(toIndentedString(messageID)).append("\n");
    sb.append("    OS: ").append(toIndentedString(OS)).append("\n");
    sb.append("    originalLink: ").append(toIndentedString(originalLink)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClickLocation");
    openapiFields.add("Client");
    openapiFields.add("Geo");
    openapiFields.add("MessageID");
    openapiFields.add("OS");
    openapiFields.add("OriginalLink");
    openapiFields.add("Platform");
    openapiFields.add("ReceivedAt");
    openapiFields.add("Recipient");
    openapiFields.add("Tag");
    openapiFields.add("UserAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedMessageClickEventInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedMessageClickEventInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedMessageClickEventInformation is not found in the empty JSON string", ExtendedMessageClickEventInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedMessageClickEventInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedMessageClickEventInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClickLocation") != null && !jsonObj.get("ClickLocation").isJsonNull()) && !jsonObj.get("ClickLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClickLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClickLocation").toString()));
      }
      // validate the optional field `Client`
      if (jsonObj.get("Client") != null && !jsonObj.get("Client").isJsonNull()) {
        ExtendedMessageClickEventInformationClient.validateJsonElement(jsonObj.get("Client"));
      }
      // validate the optional field `Geo`
      if (jsonObj.get("Geo") != null && !jsonObj.get("Geo").isJsonNull()) {
        ExtendedMessageClickEventInformationGeo.validateJsonElement(jsonObj.get("Geo"));
      }
      if ((jsonObj.get("MessageID") != null && !jsonObj.get("MessageID").isJsonNull()) && !jsonObj.get("MessageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageID").toString()));
      }
      // validate the optional field `OS`
      if (jsonObj.get("OS") != null && !jsonObj.get("OS").isJsonNull()) {
        ExtendedMessageClickEventInformationOS.validateJsonElement(jsonObj.get("OS"));
      }
      if ((jsonObj.get("OriginalLink") != null && !jsonObj.get("OriginalLink").isJsonNull()) && !jsonObj.get("OriginalLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalLink").toString()));
      }
      if ((jsonObj.get("Platform") != null && !jsonObj.get("Platform").isJsonNull()) && !jsonObj.get("Platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Platform").toString()));
      }
      if ((jsonObj.get("Recipient") != null && !jsonObj.get("Recipient").isJsonNull()) && !jsonObj.get("Recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Recipient").toString()));
      }
      if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
      }
      if ((jsonObj.get("UserAgent") != null && !jsonObj.get("UserAgent").isJsonNull()) && !jsonObj.get("UserAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserAgent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedMessageClickEventInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedMessageClickEventInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedMessageClickEventInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedMessageClickEventInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedMessageClickEventInformation>() {
           @Override
           public void write(JsonWriter out, ExtendedMessageClickEventInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedMessageClickEventInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedMessageClickEventInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedMessageClickEventInformation
   * @throws IOException if the JSON string is invalid with respect to ExtendedMessageClickEventInformation
   */
  public static ExtendedMessageClickEventInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedMessageClickEventInformation.class);
  }

  /**
   * Convert an instance of ExtendedMessageClickEventInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

