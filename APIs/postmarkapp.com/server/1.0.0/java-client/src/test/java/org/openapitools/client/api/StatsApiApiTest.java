/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetBounceCounts200Response;
import org.openapitools.client.model.GetOutboundOpenCounts200Response;
import org.openapitools.client.model.GetOutboundOpenCountsByEmailClient200Response;
import org.openapitools.client.model.GetOutboundOpenCountsByPlatform200Response;
import org.openapitools.client.model.GetSpamComplaints200Response;
import org.openapitools.client.model.GetTrackedEmailCounts200Response;
import java.time.LocalDate;
import org.openapitools.client.model.OutboundOverviewStatsResponse;
import org.openapitools.client.model.SentCountsResponse;
import org.openapitools.client.model.StandardPostmarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatsApiApi
 */
@Disabled
public class StatsApiApiTest {

    private final StatsApiApi api = new StatsApiApi();

    /**
     * Get bounce counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBounceCountsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetBounceCounts200Response response = api.getBounceCounts(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get click counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClickCountsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClickCounts(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get browser usage by family
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClickCountsByBrowserFamilyTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClickCountsByBrowserFamily(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get clicks by body location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClickCountsByLocationTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClickCountsByLocation(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get browser plaform usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundClickCountsByPlatformTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        Object response = api.getOutboundClickCountsByPlatform(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get email open counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundOpenCountsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetOutboundOpenCounts200Response response = api.getOutboundOpenCounts(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get email client usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundOpenCountsByEmailClientTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetOutboundOpenCountsByEmailClient200Response response = api.getOutboundOpenCountsByEmailClient(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get email platform usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundOpenCountsByPlatformTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetOutboundOpenCountsByPlatform200Response response = api.getOutboundOpenCountsByPlatform(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get outbound overview
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundOverviewStatisticsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        OutboundOverviewStatsResponse response = api.getOutboundOverviewStatistics(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get sent counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSentCountsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        SentCountsResponse response = api.getSentCounts(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get spam complaints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpamComplaintsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetSpamComplaints200Response response = api.getSpamComplaints(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

    /**
     * Get tracked email counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackedEmailCountsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String tag = null;
        LocalDate fromdate = null;
        LocalDate todate = null;
        GetTrackedEmailCounts200Response response = api.getTrackedEmailCounts(xPostmarkServerToken, tag, fromdate, todate);
        // TODO: test validations
    }

}
