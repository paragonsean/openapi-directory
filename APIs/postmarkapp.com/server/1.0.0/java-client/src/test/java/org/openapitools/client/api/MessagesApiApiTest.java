/*
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InboundMessageFullDetailsResponse;
import org.openapitools.client.model.InboundSearchResponse;
import java.time.LocalDate;
import org.openapitools.client.model.MessageClickSearchResponse;
import org.openapitools.client.model.MessageOpenSearchResponse;
import org.openapitools.client.model.OutboundMessageDetailsResponse;
import org.openapitools.client.model.OutboundMessageDumpResponse;
import org.openapitools.client.model.OutboundSearchResponse;
import org.openapitools.client.model.StandardPostmarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApiApi
 */
@Disabled
public class MessagesApiApiTest {

    private final MessagesApiApi api = new MessagesApiApi();

    /**
     * Bypass rules for a blocked inbound message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bypassRulesForInboundMessageTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        StandardPostmarkResponse response = api.bypassRulesForInboundMessage(xPostmarkServerToken, messageid);
        // TODO: test validations
    }

    /**
     * Retrieve Message Clicks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClicksForSingleOutboundMessageTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        Integer count = null;
        Integer offset = null;
        MessageClickSearchResponse response = api.getClicksForSingleOutboundMessage(xPostmarkServerToken, messageid, count, offset);
        // TODO: test validations
    }

    /**
     * Inbound message details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboundMessageDetailsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        InboundMessageFullDetailsResponse response = api.getInboundMessageDetails(xPostmarkServerToken, messageid);
        // TODO: test validations
    }

    /**
     * Retrieve Message Opens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpensForSingleOutboundMessageTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        Integer count = null;
        Integer offset = null;
        MessageOpenSearchResponse response = api.getOpensForSingleOutboundMessage(xPostmarkServerToken, messageid, count, offset);
        // TODO: test validations
    }

    /**
     * Outbound message details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundMessageDetailsTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        OutboundMessageDetailsResponse response = api.getOutboundMessageDetails(xPostmarkServerToken, messageid);
        // TODO: test validations
    }

    /**
     * Outbound message dump
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboundMessageDumpTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        OutboundMessageDumpResponse response = api.getOutboundMessageDump(xPostmarkServerToken, messageid);
        // TODO: test validations
    }

    /**
     * Retry a failed inbound message for processing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryInboundMessageProcessingTest() throws ApiException {
        String xPostmarkServerToken = null;
        String messageid = null;
        StandardPostmarkResponse response = api.retryInboundMessageProcessing(xPostmarkServerToken, messageid);
        // TODO: test validations
    }

    /**
     * Clicks for a all messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchClicksForOutboundMessagesTest() throws ApiException {
        String xPostmarkServerToken = null;
        Integer count = null;
        Integer offset = null;
        String recipient = null;
        String tag = null;
        String clientName = null;
        String clientCompany = null;
        String clientFamily = null;
        String osName = null;
        String osFamily = null;
        String osCompany = null;
        String platform = null;
        String country = null;
        String region = null;
        String city = null;
        MessageClickSearchResponse response = api.searchClicksForOutboundMessages(xPostmarkServerToken, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
        // TODO: test validations
    }

    /**
     * Inbound message search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchInboundMessagesTest() throws ApiException {
        String xPostmarkServerToken = null;
        Integer count = null;
        Integer offset = null;
        String recipient = null;
        String fromemail = null;
        String subject = null;
        String mailboxhash = null;
        String tag = null;
        String status = null;
        LocalDate todate = null;
        LocalDate fromdate = null;
        InboundSearchResponse response = api.searchInboundMessages(xPostmarkServerToken, count, offset, recipient, fromemail, subject, mailboxhash, tag, status, todate, fromdate);
        // TODO: test validations
    }

    /**
     * Opens for all messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOpensForOutboundMessagesTest() throws ApiException {
        String xPostmarkServerToken = null;
        Integer count = null;
        Integer offset = null;
        String recipient = null;
        String tag = null;
        String clientName = null;
        String clientCompany = null;
        String clientFamily = null;
        String osName = null;
        String osFamily = null;
        String osCompany = null;
        String platform = null;
        String country = null;
        String region = null;
        String city = null;
        MessageOpenSearchResponse response = api.searchOpensForOutboundMessages(xPostmarkServerToken, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
        // TODO: test validations
    }

    /**
     * Outbound message search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOutboundMessagesTest() throws ApiException {
        String xPostmarkServerToken = null;
        Integer count = null;
        Integer offset = null;
        String recipient = null;
        String fromemail = null;
        String tag = null;
        String status = null;
        LocalDate todate = null;
        LocalDate fromdate = null;
        OutboundSearchResponse response = api.searchOutboundMessages(xPostmarkServerToken, count, offset, recipient, fromemail, tag, status, todate, fromdate);
        // TODO: test validations
    }

}
