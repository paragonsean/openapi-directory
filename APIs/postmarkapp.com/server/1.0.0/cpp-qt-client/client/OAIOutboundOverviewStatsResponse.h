/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutboundOverviewStatsResponse.h
 *
 * 
 */

#ifndef OAIOutboundOverviewStatsResponse_H
#define OAIOutboundOverviewStatsResponse_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOutboundOverviewStatsResponse : public OAIObject {
public:
    OAIOutboundOverviewStatsResponse();
    OAIOutboundOverviewStatsResponse(QString json);
    ~OAIOutboundOverviewStatsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBounceRate() const;
    void setBounceRate(const qint32 &bounce_rate);
    bool is_bounce_rate_Set() const;
    bool is_bounce_rate_Valid() const;

    qint32 getBounced() const;
    void setBounced(const qint32 &bounced);
    bool is_bounced_Set() const;
    bool is_bounced_Valid() const;

    qint32 getOpens() const;
    void setOpens(const qint32 &opens);
    bool is_opens_Set() const;
    bool is_opens_Valid() const;

    qint32 getSmtpapiErrors() const;
    void setSmtpapiErrors(const qint32 &smtpapi_errors);
    bool is_smtpapi_errors_Set() const;
    bool is_smtpapi_errors_Valid() const;

    qint32 getSent() const;
    void setSent(const qint32 &sent);
    bool is_sent_Set() const;
    bool is_sent_Valid() const;

    qint32 getSpamComplaints() const;
    void setSpamComplaints(const qint32 &spam_complaints);
    bool is_spam_complaints_Set() const;
    bool is_spam_complaints_Valid() const;

    qint32 getSpamComplaintsRate() const;
    void setSpamComplaintsRate(const qint32 &spam_complaints_rate);
    bool is_spam_complaints_rate_Set() const;
    bool is_spam_complaints_rate_Valid() const;

    qint32 getTotalClicks() const;
    void setTotalClicks(const qint32 &total_clicks);
    bool is_total_clicks_Set() const;
    bool is_total_clicks_Valid() const;

    qint32 getTotalTrackedLinksSent() const;
    void setTotalTrackedLinksSent(const qint32 &total_tracked_links_sent);
    bool is_total_tracked_links_sent_Set() const;
    bool is_total_tracked_links_sent_Valid() const;

    qint32 getTracked() const;
    void setTracked(const qint32 &tracked);
    bool is_tracked_Set() const;
    bool is_tracked_Valid() const;

    qint32 getUniqueLinksClicked() const;
    void setUniqueLinksClicked(const qint32 &unique_links_clicked);
    bool is_unique_links_clicked_Set() const;
    bool is_unique_links_clicked_Valid() const;

    qint32 getUniqueOpens() const;
    void setUniqueOpens(const qint32 &unique_opens);
    bool is_unique_opens_Set() const;
    bool is_unique_opens_Valid() const;

    qint32 getWithClientRecorded() const;
    void setWithClientRecorded(const qint32 &with_client_recorded);
    bool is_with_client_recorded_Set() const;
    bool is_with_client_recorded_Valid() const;

    qint32 getWithLinkTracking() const;
    void setWithLinkTracking(const qint32 &with_link_tracking);
    bool is_with_link_tracking_Set() const;
    bool is_with_link_tracking_Valid() const;

    qint32 getWithOpenTracking() const;
    void setWithOpenTracking(const qint32 &with_open_tracking);
    bool is_with_open_tracking_Set() const;
    bool is_with_open_tracking_Valid() const;

    qint32 getWithPlatformRecorded() const;
    void setWithPlatformRecorded(const qint32 &with_platform_recorded);
    bool is_with_platform_recorded_Set() const;
    bool is_with_platform_recorded_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bounce_rate;
    bool m_bounce_rate_isSet;
    bool m_bounce_rate_isValid;

    qint32 m_bounced;
    bool m_bounced_isSet;
    bool m_bounced_isValid;

    qint32 m_opens;
    bool m_opens_isSet;
    bool m_opens_isValid;

    qint32 m_smtpapi_errors;
    bool m_smtpapi_errors_isSet;
    bool m_smtpapi_errors_isValid;

    qint32 m_sent;
    bool m_sent_isSet;
    bool m_sent_isValid;

    qint32 m_spam_complaints;
    bool m_spam_complaints_isSet;
    bool m_spam_complaints_isValid;

    qint32 m_spam_complaints_rate;
    bool m_spam_complaints_rate_isSet;
    bool m_spam_complaints_rate_isValid;

    qint32 m_total_clicks;
    bool m_total_clicks_isSet;
    bool m_total_clicks_isValid;

    qint32 m_total_tracked_links_sent;
    bool m_total_tracked_links_sent_isSet;
    bool m_total_tracked_links_sent_isValid;

    qint32 m_tracked;
    bool m_tracked_isSet;
    bool m_tracked_isValid;

    qint32 m_unique_links_clicked;
    bool m_unique_links_clicked_isSet;
    bool m_unique_links_clicked_isValid;

    qint32 m_unique_opens;
    bool m_unique_opens_isSet;
    bool m_unique_opens_isValid;

    qint32 m_with_client_recorded;
    bool m_with_client_recorded_isSet;
    bool m_with_client_recorded_isValid;

    qint32 m_with_link_tracking;
    bool m_with_link_tracking_isSet;
    bool m_with_link_tracking_isValid;

    qint32 m_with_open_tracking;
    bool m_with_open_tracking_isSet;
    bool m_with_open_tracking_isValid;

    qint32 m_with_platform_recorded;
    bool m_with_platform_recorded_isSet;
    bool m_with_platform_recorded_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutboundOverviewStatsResponse)

#endif // OAIOutboundOverviewStatsResponse_H
