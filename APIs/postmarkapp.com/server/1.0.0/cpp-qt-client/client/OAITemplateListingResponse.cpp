/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateListingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateListingResponse::OAITemplateListingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateListingResponse::OAITemplateListingResponse() {
    this->initializeModel();
}

OAITemplateListingResponse::~OAITemplateListingResponse() {}

void OAITemplateListingResponse::initializeModel() {

    m_templates_api_isSet = false;
    m_templates_api_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAITemplateListingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateListingResponse::fromJsonObject(QJsonObject json) {

    m_templates_api_isValid = ::OpenAPI::fromJsonValue(m_templates_api, json[QString("Templates API")]);
    m_templates_api_isSet = !json[QString("Templates API")].isNull() && m_templates_api_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAITemplateListingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateListingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_templates_api.size() > 0) {
        obj.insert(QString("Templates API"), ::OpenAPI::toJsonValue(m_templates_api));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAITemplateRecordResponse> OAITemplateListingResponse::getTemplatesApi() const {
    return m_templates_api;
}
void OAITemplateListingResponse::setTemplatesApi(const QList<OAITemplateRecordResponse> &templates_api) {
    m_templates_api = templates_api;
    m_templates_api_isSet = true;
}

bool OAITemplateListingResponse::is_templates_api_Set() const{
    return m_templates_api_isSet;
}

bool OAITemplateListingResponse::is_templates_api_Valid() const{
    return m_templates_api_isValid;
}

double OAITemplateListingResponse::getTotalCount() const {
    return m_total_count;
}
void OAITemplateListingResponse::setTotalCount(const double &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAITemplateListingResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAITemplateListingResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAITemplateListingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_templates_api.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateListingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
