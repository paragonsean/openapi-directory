/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTemplateRequest::OAICreateTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTemplateRequest::OAICreateTemplateRequest() {
    this->initializeModel();
}

OAICreateTemplateRequest::~OAICreateTemplateRequest() {}

void OAICreateTemplateRequest::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_html_body_isSet = false;
    m_html_body_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_text_body_isSet = false;
    m_text_body_isValid = false;
}

void OAICreateTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTemplateRequest::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_html_body_isValid = ::OpenAPI::fromJsonValue(m_html_body, json[QString("HtmlBody")]);
    m_html_body_isSet = !json[QString("HtmlBody")].isNull() && m_html_body_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_text_body_isValid = ::OpenAPI::fromJsonValue(m_text_body, json[QString("TextBody")]);
    m_text_body_isSet = !json[QString("TextBody")].isNull() && m_text_body_isValid;
}

QString OAICreateTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_html_body_isSet) {
        obj.insert(QString("HtmlBody"), ::OpenAPI::toJsonValue(m_html_body));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_text_body_isSet) {
        obj.insert(QString("TextBody"), ::OpenAPI::toJsonValue(m_text_body));
    }
    return obj;
}

QString OAICreateTemplateRequest::getAlias() const {
    return m_alias;
}
void OAICreateTemplateRequest::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAICreateTemplateRequest::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAICreateTemplateRequest::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAICreateTemplateRequest::getHtmlBody() const {
    return m_html_body;
}
void OAICreateTemplateRequest::setHtmlBody(const QString &html_body) {
    m_html_body = html_body;
    m_html_body_isSet = true;
}

bool OAICreateTemplateRequest::is_html_body_Set() const{
    return m_html_body_isSet;
}

bool OAICreateTemplateRequest::is_html_body_Valid() const{
    return m_html_body_isValid;
}

QString OAICreateTemplateRequest::getName() const {
    return m_name;
}
void OAICreateTemplateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTemplateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTemplateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateTemplateRequest::getSubject() const {
    return m_subject;
}
void OAICreateTemplateRequest::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICreateTemplateRequest::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICreateTemplateRequest::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICreateTemplateRequest::getTextBody() const {
    return m_text_body;
}
void OAICreateTemplateRequest::setTextBody(const QString &text_body) {
    m_text_body = text_body;
    m_text_body_isSet = true;
}

bool OAICreateTemplateRequest::is_text_body_Set() const{
    return m_text_body_isSet;
}

bool OAICreateTemplateRequest::is_text_body_Valid() const{
    return m_text_body_isValid;
}

bool OAICreateTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
