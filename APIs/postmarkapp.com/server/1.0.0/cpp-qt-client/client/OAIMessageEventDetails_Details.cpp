/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageEventDetails_Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageEventDetails_Details::OAIMessageEventDetails_Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageEventDetails_Details::OAIMessageEventDetails_Details() {
    this->initializeModel();
}

OAIMessageEventDetails_Details::~OAIMessageEventDetails_Details() {}

void OAIMessageEventDetails_Details::initializeModel() {

    m_bounce_id_isSet = false;
    m_bounce_id_isValid = false;

    m_delivery_message_isSet = false;
    m_delivery_message_isValid = false;

    m_destination_ip_isSet = false;
    m_destination_ip_isValid = false;

    m_destination_server_isSet = false;
    m_destination_server_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIMessageEventDetails_Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageEventDetails_Details::fromJsonObject(QJsonObject json) {

    m_bounce_id_isValid = ::OpenAPI::fromJsonValue(m_bounce_id, json[QString("BounceID")]);
    m_bounce_id_isSet = !json[QString("BounceID")].isNull() && m_bounce_id_isValid;

    m_delivery_message_isValid = ::OpenAPI::fromJsonValue(m_delivery_message, json[QString("DeliveryMessage")]);
    m_delivery_message_isSet = !json[QString("DeliveryMessage")].isNull() && m_delivery_message_isValid;

    m_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_destination_ip, json[QString("DestinationIP")]);
    m_destination_ip_isSet = !json[QString("DestinationIP")].isNull() && m_destination_ip_isValid;

    m_destination_server_isValid = ::OpenAPI::fromJsonValue(m_destination_server, json[QString("DestinationServer")]);
    m_destination_server_isSet = !json[QString("DestinationServer")].isNull() && m_destination_server_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;
}

QString OAIMessageEventDetails_Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageEventDetails_Details::asJsonObject() const {
    QJsonObject obj;
    if (m_bounce_id_isSet) {
        obj.insert(QString("BounceID"), ::OpenAPI::toJsonValue(m_bounce_id));
    }
    if (m_delivery_message_isSet) {
        obj.insert(QString("DeliveryMessage"), ::OpenAPI::toJsonValue(m_delivery_message));
    }
    if (m_destination_ip_isSet) {
        obj.insert(QString("DestinationIP"), ::OpenAPI::toJsonValue(m_destination_ip));
    }
    if (m_destination_server_isSet) {
        obj.insert(QString("DestinationServer"), ::OpenAPI::toJsonValue(m_destination_server));
    }
    if (m_summary_isSet) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIMessageEventDetails_Details::getBounceId() const {
    return m_bounce_id;
}
void OAIMessageEventDetails_Details::setBounceId(const QString &bounce_id) {
    m_bounce_id = bounce_id;
    m_bounce_id_isSet = true;
}

bool OAIMessageEventDetails_Details::is_bounce_id_Set() const{
    return m_bounce_id_isSet;
}

bool OAIMessageEventDetails_Details::is_bounce_id_Valid() const{
    return m_bounce_id_isValid;
}

QString OAIMessageEventDetails_Details::getDeliveryMessage() const {
    return m_delivery_message;
}
void OAIMessageEventDetails_Details::setDeliveryMessage(const QString &delivery_message) {
    m_delivery_message = delivery_message;
    m_delivery_message_isSet = true;
}

bool OAIMessageEventDetails_Details::is_delivery_message_Set() const{
    return m_delivery_message_isSet;
}

bool OAIMessageEventDetails_Details::is_delivery_message_Valid() const{
    return m_delivery_message_isValid;
}

QString OAIMessageEventDetails_Details::getDestinationIp() const {
    return m_destination_ip;
}
void OAIMessageEventDetails_Details::setDestinationIp(const QString &destination_ip) {
    m_destination_ip = destination_ip;
    m_destination_ip_isSet = true;
}

bool OAIMessageEventDetails_Details::is_destination_ip_Set() const{
    return m_destination_ip_isSet;
}

bool OAIMessageEventDetails_Details::is_destination_ip_Valid() const{
    return m_destination_ip_isValid;
}

QString OAIMessageEventDetails_Details::getDestinationServer() const {
    return m_destination_server;
}
void OAIMessageEventDetails_Details::setDestinationServer(const QString &destination_server) {
    m_destination_server = destination_server;
    m_destination_server_isSet = true;
}

bool OAIMessageEventDetails_Details::is_destination_server_Set() const{
    return m_destination_server_isSet;
}

bool OAIMessageEventDetails_Details::is_destination_server_Valid() const{
    return m_destination_server_isValid;
}

QString OAIMessageEventDetails_Details::getSummary() const {
    return m_summary;
}
void OAIMessageEventDetails_Details::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIMessageEventDetails_Details::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIMessageEventDetails_Details::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIMessageEventDetails_Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounce_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageEventDetails_Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
