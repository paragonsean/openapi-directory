/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesAPIApi_H
#define OAI_OAITemplatesAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTemplateRequest.h"
#include "OAIEditTemplateRequest.h"
#include "OAIEmailWithTemplateRequest.h"
#include "OAISendEmailResponse.h"
#include "OAISendEmailTemplatedBatchRequest.h"
#include "OAIStandardPostmarkResponse.h"
#include "OAITemplateDetailResponse.h"
#include "OAITemplateListingResponse.h"
#include "OAITemplateRecordResponse.h"
#include "OAITemplateValidationRequest.h"
#include "OAITemplateValidationResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesAPIApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesAPIApi(const int timeOut = 0);
    ~OAITemplatesAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  template_id_or_alias QString [required]
    */
    virtual void deleteTemplate(const QString &x_postmark_server_token, const QString &template_id_or_alias);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  template_id_or_alias QString [required]
    */
    virtual void getSingleTemplate(const QString &x_postmark_server_token, const QString &template_id_or_alias);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count double [required]
    * @param[in]  offset double [required]
    */
    virtual void listTemplates(const QString &x_postmark_server_token, const double &count, const double &offset);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  body OAISendEmailTemplatedBatchRequest [required]
    */
    virtual void sendEmailBatchWithTemplates(const QString &x_postmark_server_token, const OAISendEmailTemplatedBatchRequest &body);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  body OAIEmailWithTemplateRequest [required]
    */
    virtual void sendEmailWithTemplate(const QString &x_postmark_server_token, const OAIEmailWithTemplateRequest &body);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  body OAICreateTemplateRequest [required]
    */
    virtual void templatesPost(const QString &x_postmark_server_token, const OAICreateTemplateRequest &body);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  body OAITemplateValidationRequest [optional]
    */
    virtual void testTemplateContent(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<OAITemplateValidationRequest> &body = ::OpenAPI::OptionalParam<OAITemplateValidationRequest>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  template_id_or_alias QString [required]
    * @param[in]  body OAIEditTemplateRequest [required]
    */
    virtual void updateTemplate(const QString &x_postmark_server_token, const QString &template_id_or_alias, const OAIEditTemplateRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTemplateCallback(OAIHttpRequestWorker *worker);
    void getSingleTemplateCallback(OAIHttpRequestWorker *worker);
    void listTemplatesCallback(OAIHttpRequestWorker *worker);
    void sendEmailBatchWithTemplatesCallback(OAIHttpRequestWorker *worker);
    void sendEmailWithTemplateCallback(OAIHttpRequestWorker *worker);
    void templatesPostCallback(OAIHttpRequestWorker *worker);
    void testTemplateContentCallback(OAIHttpRequestWorker *worker);
    void updateTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTemplateSignal(OAITemplateDetailResponse summary);
    void getSingleTemplateSignal(OAITemplateDetailResponse summary);
    void listTemplatesSignal(OAITemplateListingResponse summary);
    void sendEmailBatchWithTemplatesSignal(QList<OAISendEmailResponse> summary);
    void sendEmailWithTemplateSignal(OAISendEmailResponse summary);
    void templatesPostSignal(OAITemplateRecordResponse summary);
    void testTemplateContentSignal(OAITemplateValidationResponse summary);
    void updateTemplateSignal(OAITemplateRecordResponse summary);


    void deleteTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplateDetailResponse summary);
    void getSingleTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplateDetailResponse summary);
    void listTemplatesSignalFull(OAIHttpRequestWorker *worker, OAITemplateListingResponse summary);
    void sendEmailBatchWithTemplatesSignalFull(OAIHttpRequestWorker *worker, QList<OAISendEmailResponse> summary);
    void sendEmailWithTemplateSignalFull(OAIHttpRequestWorker *worker, OAISendEmailResponse summary);
    void templatesPostSignalFull(OAIHttpRequestWorker *worker, OAITemplateRecordResponse summary);
    void testTemplateContentSignalFull(OAIHttpRequestWorker *worker, OAITemplateValidationResponse summary);
    void updateTemplateSignalFull(OAIHttpRequestWorker *worker, OAITemplateRecordResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalError() instead")
    void deleteTemplateSignalE(OAITemplateDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalError(OAITemplateDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleTemplateSignalError() instead")
    void getSingleTemplateSignalE(OAITemplateDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleTemplateSignalError(OAITemplateDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalError() instead")
    void listTemplatesSignalE(OAITemplateListingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalError(OAITemplateListingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailBatchWithTemplatesSignalError() instead")
    void sendEmailBatchWithTemplatesSignalE(QList<OAISendEmailResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailBatchWithTemplatesSignalError(QList<OAISendEmailResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailWithTemplateSignalError() instead")
    void sendEmailWithTemplateSignalE(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailWithTemplateSignalError(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesPostSignalError() instead")
    void templatesPostSignalE(OAITemplateRecordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesPostSignalError(OAITemplateRecordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testTemplateContentSignalError() instead")
    void testTemplateContentSignalE(OAITemplateValidationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testTemplateContentSignalError(OAITemplateValidationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalError() instead")
    void updateTemplateSignalE(OAITemplateRecordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalError(OAITemplateRecordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTemplateSignalErrorFull() instead")
    void deleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleTemplateSignalErrorFull() instead")
    void getSingleTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalErrorFull() instead")
    void listTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailBatchWithTemplatesSignalErrorFull() instead")
    void sendEmailBatchWithTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailBatchWithTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailWithTemplateSignalErrorFull() instead")
    void sendEmailWithTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailWithTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use templatesPostSignalErrorFull() instead")
    void templatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testTemplateContentSignalErrorFull() instead")
    void testTemplateContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testTemplateContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateSignalErrorFull() instead")
    void updateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
