/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBounceCounts_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBounceCounts_200_response::OAIGetBounceCounts_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBounceCounts_200_response::OAIGetBounceCounts_200_response() {
    this->initializeModel();
}

OAIGetBounceCounts_200_response::~OAIGetBounceCounts_200_response() {}

void OAIGetBounceCounts_200_response::initializeModel() {

    m_days_isSet = false;
    m_days_isValid = false;

    m_hard_bounce_isSet = false;
    m_hard_bounce_isValid = false;

    m_smtp_api_error_isSet = false;
    m_smtp_api_error_isValid = false;

    m_soft_bounce_isSet = false;
    m_soft_bounce_isValid = false;

    m_transient_isSet = false;
    m_transient_isValid = false;
}

void OAIGetBounceCounts_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBounceCounts_200_response::fromJsonObject(QJsonObject json) {

    m_days_isValid = ::OpenAPI::fromJsonValue(m_days, json[QString("Days")]);
    m_days_isSet = !json[QString("Days")].isNull() && m_days_isValid;

    m_hard_bounce_isValid = ::OpenAPI::fromJsonValue(m_hard_bounce, json[QString("HardBounce")]);
    m_hard_bounce_isSet = !json[QString("HardBounce")].isNull() && m_hard_bounce_isValid;

    m_smtp_api_error_isValid = ::OpenAPI::fromJsonValue(m_smtp_api_error, json[QString("SMTPApiError")]);
    m_smtp_api_error_isSet = !json[QString("SMTPApiError")].isNull() && m_smtp_api_error_isValid;

    m_soft_bounce_isValid = ::OpenAPI::fromJsonValue(m_soft_bounce, json[QString("SoftBounce")]);
    m_soft_bounce_isSet = !json[QString("SoftBounce")].isNull() && m_soft_bounce_isValid;

    m_transient_isValid = ::OpenAPI::fromJsonValue(m_transient, json[QString("Transient")]);
    m_transient_isSet = !json[QString("Transient")].isNull() && m_transient_isValid;
}

QString OAIGetBounceCounts_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBounceCounts_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_days.size() > 0) {
        obj.insert(QString("Days"), ::OpenAPI::toJsonValue(m_days));
    }
    if (m_hard_bounce_isSet) {
        obj.insert(QString("HardBounce"), ::OpenAPI::toJsonValue(m_hard_bounce));
    }
    if (m_smtp_api_error_isSet) {
        obj.insert(QString("SMTPApiError"), ::OpenAPI::toJsonValue(m_smtp_api_error));
    }
    if (m_soft_bounce_isSet) {
        obj.insert(QString("SoftBounce"), ::OpenAPI::toJsonValue(m_soft_bounce));
    }
    if (m_transient_isSet) {
        obj.insert(QString("Transient"), ::OpenAPI::toJsonValue(m_transient));
    }
    return obj;
}

QList<OAIGetBounceCounts_200_response_Days_inner> OAIGetBounceCounts_200_response::getDays() const {
    return m_days;
}
void OAIGetBounceCounts_200_response::setDays(const QList<OAIGetBounceCounts_200_response_Days_inner> &days) {
    m_days = days;
    m_days_isSet = true;
}

bool OAIGetBounceCounts_200_response::is_days_Set() const{
    return m_days_isSet;
}

bool OAIGetBounceCounts_200_response::is_days_Valid() const{
    return m_days_isValid;
}

qint32 OAIGetBounceCounts_200_response::getHardBounce() const {
    return m_hard_bounce;
}
void OAIGetBounceCounts_200_response::setHardBounce(const qint32 &hard_bounce) {
    m_hard_bounce = hard_bounce;
    m_hard_bounce_isSet = true;
}

bool OAIGetBounceCounts_200_response::is_hard_bounce_Set() const{
    return m_hard_bounce_isSet;
}

bool OAIGetBounceCounts_200_response::is_hard_bounce_Valid() const{
    return m_hard_bounce_isValid;
}

qint32 OAIGetBounceCounts_200_response::getSmtpApiError() const {
    return m_smtp_api_error;
}
void OAIGetBounceCounts_200_response::setSmtpApiError(const qint32 &smtp_api_error) {
    m_smtp_api_error = smtp_api_error;
    m_smtp_api_error_isSet = true;
}

bool OAIGetBounceCounts_200_response::is_smtp_api_error_Set() const{
    return m_smtp_api_error_isSet;
}

bool OAIGetBounceCounts_200_response::is_smtp_api_error_Valid() const{
    return m_smtp_api_error_isValid;
}

qint32 OAIGetBounceCounts_200_response::getSoftBounce() const {
    return m_soft_bounce;
}
void OAIGetBounceCounts_200_response::setSoftBounce(const qint32 &soft_bounce) {
    m_soft_bounce = soft_bounce;
    m_soft_bounce_isSet = true;
}

bool OAIGetBounceCounts_200_response::is_soft_bounce_Set() const{
    return m_soft_bounce_isSet;
}

bool OAIGetBounceCounts_200_response::is_soft_bounce_Valid() const{
    return m_soft_bounce_isValid;
}

qint32 OAIGetBounceCounts_200_response::getTransient() const {
    return m_transient;
}
void OAIGetBounceCounts_200_response::setTransient(const qint32 &transient) {
    m_transient = transient;
    m_transient_isSet = true;
}

bool OAIGetBounceCounts_200_response::is_transient_Set() const{
    return m_transient_isSet;
}

bool OAIGetBounceCounts_200_response::is_transient_Valid() const{
    return m_transient_isValid;
}

bool OAIGetBounceCounts_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_bounce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_api_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_bounce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transient_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBounceCounts_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
