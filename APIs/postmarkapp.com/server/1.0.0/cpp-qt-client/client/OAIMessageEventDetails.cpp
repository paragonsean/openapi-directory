/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageEventDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageEventDetails::OAIMessageEventDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageEventDetails::OAIMessageEventDetails() {
    this->initializeModel();
}

OAIMessageEventDetails::~OAIMessageEventDetails() {}

void OAIMessageEventDetails::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMessageEventDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageEventDetails::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("ReceivedAt")]);
    m_received_at_isSet = !json[QString("ReceivedAt")].isNull() && m_received_at_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("Recipient")]);
    m_recipient_isSet = !json[QString("Recipient")].isNull() && m_recipient_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIMessageEventDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageEventDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_details.isSet()) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("ReceivedAt"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("Recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIMessageEventDetails_Details OAIMessageEventDetails::getDetails() const {
    return m_details;
}
void OAIMessageEventDetails::setDetails(const OAIMessageEventDetails_Details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIMessageEventDetails::is_details_Set() const{
    return m_details_isSet;
}

bool OAIMessageEventDetails::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAIMessageEventDetails::getReceivedAt() const {
    return m_received_at;
}
void OAIMessageEventDetails::setReceivedAt(const QDateTime &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIMessageEventDetails::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIMessageEventDetails::is_received_at_Valid() const{
    return m_received_at_isValid;
}

QString OAIMessageEventDetails::getRecipient() const {
    return m_recipient;
}
void OAIMessageEventDetails::setRecipient(const QString &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIMessageEventDetails::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIMessageEventDetails::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIMessageEventDetails::getType() const {
    return m_type;
}
void OAIMessageEventDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageEventDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageEventDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMessageEventDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageEventDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
