/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateValidationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateValidationError::OAITemplateValidationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateValidationError::OAITemplateValidationError() {
    this->initializeModel();
}

OAITemplateValidationError::~OAITemplateValidationError() {}

void OAITemplateValidationError::initializeModel() {

    m_character_position_isSet = false;
    m_character_position_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAITemplateValidationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateValidationError::fromJsonObject(QJsonObject json) {

    m_character_position_isValid = ::OpenAPI::fromJsonValue(m_character_position, json[QString("CharacterPosition")]);
    m_character_position_isSet = !json[QString("CharacterPosition")].isNull() && m_character_position_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("Line")]);
    m_line_isSet = !json[QString("Line")].isNull() && m_line_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAITemplateValidationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateValidationError::asJsonObject() const {
    QJsonObject obj;
    if (m_character_position_isSet) {
        obj.insert(QString("CharacterPosition"), ::OpenAPI::toJsonValue(m_character_position));
    }
    if (m_line_isSet) {
        obj.insert(QString("Line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAITemplateValidationError::getCharacterPosition() const {
    return m_character_position;
}
void OAITemplateValidationError::setCharacterPosition(const qint32 &character_position) {
    m_character_position = character_position;
    m_character_position_isSet = true;
}

bool OAITemplateValidationError::is_character_position_Set() const{
    return m_character_position_isSet;
}

bool OAITemplateValidationError::is_character_position_Valid() const{
    return m_character_position_isValid;
}

qint32 OAITemplateValidationError::getLine() const {
    return m_line;
}
void OAITemplateValidationError::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAITemplateValidationError::is_line_Set() const{
    return m_line_isSet;
}

bool OAITemplateValidationError::is_line_Valid() const{
    return m_line_isValid;
}

QString OAITemplateValidationError::getMessage() const {
    return m_message;
}
void OAITemplateValidationError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITemplateValidationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAITemplateValidationError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAITemplateValidationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateValidationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
