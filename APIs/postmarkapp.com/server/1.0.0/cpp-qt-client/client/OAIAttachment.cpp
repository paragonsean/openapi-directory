/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("ContentID")]);
    m_content_id_isSet = !json[QString("ContentID")].isNull() && m_content_id_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("ContentID"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAttachment::getContent() const {
    return m_content;
}
void OAIAttachment::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIAttachment::is_content_Set() const{
    return m_content_isSet;
}

bool OAIAttachment::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIAttachment::getContentId() const {
    return m_content_id;
}
void OAIAttachment::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIAttachment::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIAttachment::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIAttachment::getContentType() const {
    return m_content_type;
}
void OAIAttachment::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAttachment::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAttachment::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIAttachment::getName() const {
    return m_name;
}
void OAIAttachment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachment::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
