/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBounceInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBounceInfoResponse::OAIBounceInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBounceInfoResponse::OAIBounceInfoResponse() {
    this->initializeModel();
}

OAIBounceInfoResponse::~OAIBounceInfoResponse() {}

void OAIBounceInfoResponse::initializeModel() {

    m_bounced_at_isSet = false;
    m_bounced_at_isValid = false;

    m_can_activate_isSet = false;
    m_can_activate_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_dump_available_isSet = false;
    m_dump_available_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inactive_isSet = false;
    m_inactive_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_code_isSet = false;
    m_type_code_isValid = false;
}

void OAIBounceInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBounceInfoResponse::fromJsonObject(QJsonObject json) {

    m_bounced_at_isValid = ::OpenAPI::fromJsonValue(m_bounced_at, json[QString("BouncedAt")]);
    m_bounced_at_isSet = !json[QString("BouncedAt")].isNull() && m_bounced_at_isValid;

    m_can_activate_isValid = ::OpenAPI::fromJsonValue(m_can_activate, json[QString("CanActivate")]);
    m_can_activate_isSet = !json[QString("CanActivate")].isNull() && m_can_activate_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_dump_available_isValid = ::OpenAPI::fromJsonValue(m_dump_available, json[QString("DumpAvailable")]);
    m_dump_available_isSet = !json[QString("DumpAvailable")].isNull() && m_dump_available_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_inactive_isValid = ::OpenAPI::fromJsonValue(m_inactive, json[QString("Inactive")]);
    m_inactive_isSet = !json[QString("Inactive")].isNull() && m_inactive_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageID")]);
    m_message_id_isSet = !json[QString("MessageID")].isNull() && m_message_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_code_isValid = ::OpenAPI::fromJsonValue(m_type_code, json[QString("TypeCode")]);
    m_type_code_isSet = !json[QString("TypeCode")].isNull() && m_type_code_isValid;
}

QString OAIBounceInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBounceInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bounced_at_isSet) {
        obj.insert(QString("BouncedAt"), ::OpenAPI::toJsonValue(m_bounced_at));
    }
    if (m_can_activate_isSet) {
        obj.insert(QString("CanActivate"), ::OpenAPI::toJsonValue(m_can_activate));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_dump_available_isSet) {
        obj.insert(QString("DumpAvailable"), ::OpenAPI::toJsonValue(m_dump_available));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inactive_isSet) {
        obj.insert(QString("Inactive"), ::OpenAPI::toJsonValue(m_inactive));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageID"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_code_isSet) {
        obj.insert(QString("TypeCode"), ::OpenAPI::toJsonValue(m_type_code));
    }
    return obj;
}

QDateTime OAIBounceInfoResponse::getBouncedAt() const {
    return m_bounced_at;
}
void OAIBounceInfoResponse::setBouncedAt(const QDateTime &bounced_at) {
    m_bounced_at = bounced_at;
    m_bounced_at_isSet = true;
}

bool OAIBounceInfoResponse::is_bounced_at_Set() const{
    return m_bounced_at_isSet;
}

bool OAIBounceInfoResponse::is_bounced_at_Valid() const{
    return m_bounced_at_isValid;
}

bool OAIBounceInfoResponse::isCanActivate() const {
    return m_can_activate;
}
void OAIBounceInfoResponse::setCanActivate(const bool &can_activate) {
    m_can_activate = can_activate;
    m_can_activate_isSet = true;
}

bool OAIBounceInfoResponse::is_can_activate_Set() const{
    return m_can_activate_isSet;
}

bool OAIBounceInfoResponse::is_can_activate_Valid() const{
    return m_can_activate_isValid;
}

QString OAIBounceInfoResponse::getContent() const {
    return m_content;
}
void OAIBounceInfoResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIBounceInfoResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIBounceInfoResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIBounceInfoResponse::getDescription() const {
    return m_description;
}
void OAIBounceInfoResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBounceInfoResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBounceInfoResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBounceInfoResponse::getDetails() const {
    return m_details;
}
void OAIBounceInfoResponse::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIBounceInfoResponse::is_details_Set() const{
    return m_details_isSet;
}

bool OAIBounceInfoResponse::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIBounceInfoResponse::isDumpAvailable() const {
    return m_dump_available;
}
void OAIBounceInfoResponse::setDumpAvailable(const bool &dump_available) {
    m_dump_available = dump_available;
    m_dump_available_isSet = true;
}

bool OAIBounceInfoResponse::is_dump_available_Set() const{
    return m_dump_available_isSet;
}

bool OAIBounceInfoResponse::is_dump_available_Valid() const{
    return m_dump_available_isValid;
}

QString OAIBounceInfoResponse::getEmail() const {
    return m_email;
}
void OAIBounceInfoResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIBounceInfoResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIBounceInfoResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIBounceInfoResponse::getId() const {
    return m_id;
}
void OAIBounceInfoResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBounceInfoResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBounceInfoResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBounceInfoResponse::isInactive() const {
    return m_inactive;
}
void OAIBounceInfoResponse::setInactive(const bool &inactive) {
    m_inactive = inactive;
    m_inactive_isSet = true;
}

bool OAIBounceInfoResponse::is_inactive_Set() const{
    return m_inactive_isSet;
}

bool OAIBounceInfoResponse::is_inactive_Valid() const{
    return m_inactive_isValid;
}

QString OAIBounceInfoResponse::getMessageId() const {
    return m_message_id;
}
void OAIBounceInfoResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIBounceInfoResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIBounceInfoResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIBounceInfoResponse::getName() const {
    return m_name;
}
void OAIBounceInfoResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBounceInfoResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBounceInfoResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBounceInfoResponse::getSubject() const {
    return m_subject;
}
void OAIBounceInfoResponse::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIBounceInfoResponse::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIBounceInfoResponse::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIBounceInfoResponse::getTag() const {
    return m_tag;
}
void OAIBounceInfoResponse::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIBounceInfoResponse::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIBounceInfoResponse::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIBounceInfoResponse::getType() const {
    return m_type;
}
void OAIBounceInfoResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBounceInfoResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBounceInfoResponse::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIBounceInfoResponse::getTypeCode() const {
    return m_type_code;
}
void OAIBounceInfoResponse::setTypeCode(const qint32 &type_code) {
    m_type_code = type_code;
    m_type_code_isSet = true;
}

bool OAIBounceInfoResponse::is_type_code_Set() const{
    return m_type_code_isSet;
}

bool OAIBounceInfoResponse::is_type_code_Valid() const{
    return m_type_code_isValid;
}

bool OAIBounceInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounced_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_activate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBounceInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
