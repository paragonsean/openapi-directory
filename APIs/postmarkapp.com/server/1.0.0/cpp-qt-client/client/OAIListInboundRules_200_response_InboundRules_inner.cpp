/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInboundRules_200_response_InboundRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInboundRules_200_response_InboundRules_inner::OAIListInboundRules_200_response_InboundRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInboundRules_200_response_InboundRules_inner::OAIListInboundRules_200_response_InboundRules_inner() {
    this->initializeModel();
}

OAIListInboundRules_200_response_InboundRules_inner::~OAIListInboundRules_200_response_InboundRules_inner() {}

void OAIListInboundRules_200_response_InboundRules_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;
}

void OAIListInboundRules_200_response_InboundRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInboundRules_200_response_InboundRules_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("Rule")]);
    m_rule_isSet = !json[QString("Rule")].isNull() && m_rule_isValid;
}

QString OAIListInboundRules_200_response_InboundRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInboundRules_200_response_InboundRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rule_isSet) {
        obj.insert(QString("Rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    return obj;
}

qint32 OAIListInboundRules_200_response_InboundRules_inner::getId() const {
    return m_id;
}
void OAIListInboundRules_200_response_InboundRules_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListInboundRules_200_response_InboundRules_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListInboundRules_200_response_InboundRules_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIListInboundRules_200_response_InboundRules_inner::getRule() const {
    return m_rule;
}
void OAIListInboundRules_200_response_InboundRules_inner::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIListInboundRules_200_response_InboundRules_inner::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIListInboundRules_200_response_InboundRules_inner::is_rule_Valid() const{
    return m_rule_isValid;
}

bool OAIListInboundRules_200_response_InboundRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInboundRules_200_response_InboundRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
