/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOutboundOpenCountsByEmailClient_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOutboundOpenCountsByEmailClient_200_response::OAIGetOutboundOpenCountsByEmailClient_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOutboundOpenCountsByEmailClient_200_response::OAIGetOutboundOpenCountsByEmailClient_200_response() {
    this->initializeModel();
}

OAIGetOutboundOpenCountsByEmailClient_200_response::~OAIGetOutboundOpenCountsByEmailClient_200_response() {}

void OAIGetOutboundOpenCountsByEmailClient_200_response::initializeModel() {

    m_days_isSet = false;
    m_days_isValid = false;

    m_desktop_isSet = false;
    m_desktop_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_unknown_isSet = false;
    m_unknown_isValid = false;

    m_web_mail_isSet = false;
    m_web_mail_isValid = false;
}

void OAIGetOutboundOpenCountsByEmailClient_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOutboundOpenCountsByEmailClient_200_response::fromJsonObject(QJsonObject json) {

    m_days_isValid = ::OpenAPI::fromJsonValue(m_days, json[QString("Days")]);
    m_days_isSet = !json[QString("Days")].isNull() && m_days_isValid;

    m_desktop_isValid = ::OpenAPI::fromJsonValue(m_desktop, json[QString("Desktop")]);
    m_desktop_isSet = !json[QString("Desktop")].isNull() && m_desktop_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("Mobile")]);
    m_mobile_isSet = !json[QString("Mobile")].isNull() && m_mobile_isValid;

    m_unknown_isValid = ::OpenAPI::fromJsonValue(m_unknown, json[QString("Unknown")]);
    m_unknown_isSet = !json[QString("Unknown")].isNull() && m_unknown_isValid;

    m_web_mail_isValid = ::OpenAPI::fromJsonValue(m_web_mail, json[QString("WebMail")]);
    m_web_mail_isSet = !json[QString("WebMail")].isNull() && m_web_mail_isValid;
}

QString OAIGetOutboundOpenCountsByEmailClient_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOutboundOpenCountsByEmailClient_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_days.size() > 0) {
        obj.insert(QString("Days"), ::OpenAPI::toJsonValue(m_days));
    }
    if (m_desktop_isSet) {
        obj.insert(QString("Desktop"), ::OpenAPI::toJsonValue(m_desktop));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("Mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_unknown_isSet) {
        obj.insert(QString("Unknown"), ::OpenAPI::toJsonValue(m_unknown));
    }
    if (m_web_mail_isSet) {
        obj.insert(QString("WebMail"), ::OpenAPI::toJsonValue(m_web_mail));
    }
    return obj;
}

QList<OAIObject> OAIGetOutboundOpenCountsByEmailClient_200_response::getDays() const {
    return m_days;
}
void OAIGetOutboundOpenCountsByEmailClient_200_response::setDays(const QList<OAIObject> &days) {
    m_days = days;
    m_days_isSet = true;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_days_Set() const{
    return m_days_isSet;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_days_Valid() const{
    return m_days_isValid;
}

qint32 OAIGetOutboundOpenCountsByEmailClient_200_response::getDesktop() const {
    return m_desktop;
}
void OAIGetOutboundOpenCountsByEmailClient_200_response::setDesktop(const qint32 &desktop) {
    m_desktop = desktop;
    m_desktop_isSet = true;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_desktop_Set() const{
    return m_desktop_isSet;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_desktop_Valid() const{
    return m_desktop_isValid;
}

qint32 OAIGetOutboundOpenCountsByEmailClient_200_response::getMobile() const {
    return m_mobile;
}
void OAIGetOutboundOpenCountsByEmailClient_200_response::setMobile(const qint32 &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_mobile_Valid() const{
    return m_mobile_isValid;
}

qint32 OAIGetOutboundOpenCountsByEmailClient_200_response::getUnknown() const {
    return m_unknown;
}
void OAIGetOutboundOpenCountsByEmailClient_200_response::setUnknown(const qint32 &unknown) {
    m_unknown = unknown;
    m_unknown_isSet = true;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_unknown_Set() const{
    return m_unknown_isSet;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_unknown_Valid() const{
    return m_unknown_isValid;
}

qint32 OAIGetOutboundOpenCountsByEmailClient_200_response::getWebMail() const {
    return m_web_mail;
}
void OAIGetOutboundOpenCountsByEmailClient_200_response::setWebMail(const qint32 &web_mail) {
    m_web_mail = web_mail;
    m_web_mail_isSet = true;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_web_mail_Set() const{
    return m_web_mail_isSet;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::is_web_mail_Valid() const{
    return m_web_mail_isValid;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desktop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_mail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOutboundOpenCountsByEmailClient_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
