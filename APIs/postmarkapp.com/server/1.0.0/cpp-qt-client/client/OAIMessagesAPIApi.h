/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesAPIApi_H
#define OAI_OAIMessagesAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInboundMessageFullDetailsResponse.h"
#include "OAIInboundSearchResponse.h"
#include "OAIMessageClickSearchResponse.h"
#include "OAIMessageOpenSearchResponse.h"
#include "OAIOutboundMessageDetailsResponse.h"
#include "OAIOutboundMessageDumpResponse.h"
#include "OAIOutboundSearchResponse.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesAPIApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesAPIApi(const int timeOut = 0);
    ~OAIMessagesAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    */
    virtual void bypassRulesForInboundMessage(const QString &x_postmark_server_token, const QString &messageid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    */
    virtual void getClicksForSingleOutboundMessage(const QString &x_postmark_server_token, const QString &messageid, const qint32 &count, const qint32 &offset);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    */
    virtual void getInboundMessageDetails(const QString &x_postmark_server_token, const QString &messageid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    */
    virtual void getOpensForSingleOutboundMessage(const QString &x_postmark_server_token, const QString &messageid, const qint32 &count, const qint32 &offset);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    */
    virtual void getOutboundMessageDetails(const QString &x_postmark_server_token, const QString &messageid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    */
    virtual void getOutboundMessageDump(const QString &x_postmark_server_token, const QString &messageid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  messageid QString [required]
    */
    virtual void retryInboundMessageProcessing(const QString &x_postmark_server_token, const QString &messageid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  recipient QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  client_name QString [optional]
    * @param[in]  client_company QString [optional]
    * @param[in]  client_family QString [optional]
    * @param[in]  os_name QString [optional]
    * @param[in]  os_family QString [optional]
    * @param[in]  os_company QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  city QString [optional]
    */
    virtual void searchClicksForOutboundMessages(const QString &x_postmark_server_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &recipient = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  recipient QString [optional]
    * @param[in]  fromemail QString [optional]
    * @param[in]  subject QString [optional]
    * @param[in]  mailboxhash QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  todate QDate [optional]
    * @param[in]  fromdate QDate [optional]
    */
    virtual void searchInboundMessages(const QString &x_postmark_server_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &recipient = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fromemail = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mailboxhash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  recipient QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  client_name QString [optional]
    * @param[in]  client_company QString [optional]
    * @param[in]  client_family QString [optional]
    * @param[in]  os_name QString [optional]
    * @param[in]  os_family QString [optional]
    * @param[in]  os_company QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  city QString [optional]
    */
    virtual void searchOpensForOutboundMessages(const QString &x_postmark_server_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &recipient = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  recipient QString [optional]
    * @param[in]  fromemail QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  todate QDate [optional]
    * @param[in]  fromdate QDate [optional]
    */
    virtual void searchOutboundMessages(const QString &x_postmark_server_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &recipient = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fromemail = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bypassRulesForInboundMessageCallback(OAIHttpRequestWorker *worker);
    void getClicksForSingleOutboundMessageCallback(OAIHttpRequestWorker *worker);
    void getInboundMessageDetailsCallback(OAIHttpRequestWorker *worker);
    void getOpensForSingleOutboundMessageCallback(OAIHttpRequestWorker *worker);
    void getOutboundMessageDetailsCallback(OAIHttpRequestWorker *worker);
    void getOutboundMessageDumpCallback(OAIHttpRequestWorker *worker);
    void retryInboundMessageProcessingCallback(OAIHttpRequestWorker *worker);
    void searchClicksForOutboundMessagesCallback(OAIHttpRequestWorker *worker);
    void searchInboundMessagesCallback(OAIHttpRequestWorker *worker);
    void searchOpensForOutboundMessagesCallback(OAIHttpRequestWorker *worker);
    void searchOutboundMessagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bypassRulesForInboundMessageSignal(OAIStandardPostmarkResponse summary);
    void getClicksForSingleOutboundMessageSignal(OAIMessageClickSearchResponse summary);
    void getInboundMessageDetailsSignal(OAIInboundMessageFullDetailsResponse summary);
    void getOpensForSingleOutboundMessageSignal(OAIMessageOpenSearchResponse summary);
    void getOutboundMessageDetailsSignal(OAIOutboundMessageDetailsResponse summary);
    void getOutboundMessageDumpSignal(OAIOutboundMessageDumpResponse summary);
    void retryInboundMessageProcessingSignal(OAIStandardPostmarkResponse summary);
    void searchClicksForOutboundMessagesSignal(OAIMessageClickSearchResponse summary);
    void searchInboundMessagesSignal(OAIInboundSearchResponse summary);
    void searchOpensForOutboundMessagesSignal(OAIMessageOpenSearchResponse summary);
    void searchOutboundMessagesSignal(OAIOutboundSearchResponse summary);


    void bypassRulesForInboundMessageSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);
    void getClicksForSingleOutboundMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageClickSearchResponse summary);
    void getInboundMessageDetailsSignalFull(OAIHttpRequestWorker *worker, OAIInboundMessageFullDetailsResponse summary);
    void getOpensForSingleOutboundMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageOpenSearchResponse summary);
    void getOutboundMessageDetailsSignalFull(OAIHttpRequestWorker *worker, OAIOutboundMessageDetailsResponse summary);
    void getOutboundMessageDumpSignalFull(OAIHttpRequestWorker *worker, OAIOutboundMessageDumpResponse summary);
    void retryInboundMessageProcessingSignalFull(OAIHttpRequestWorker *worker, OAIStandardPostmarkResponse summary);
    void searchClicksForOutboundMessagesSignalFull(OAIHttpRequestWorker *worker, OAIMessageClickSearchResponse summary);
    void searchInboundMessagesSignalFull(OAIHttpRequestWorker *worker, OAIInboundSearchResponse summary);
    void searchOpensForOutboundMessagesSignalFull(OAIHttpRequestWorker *worker, OAIMessageOpenSearchResponse summary);
    void searchOutboundMessagesSignalFull(OAIHttpRequestWorker *worker, OAIOutboundSearchResponse summary);

    Q_DECL_DEPRECATED_X("Use bypassRulesForInboundMessageSignalError() instead")
    void bypassRulesForInboundMessageSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bypassRulesForInboundMessageSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClicksForSingleOutboundMessageSignalError() instead")
    void getClicksForSingleOutboundMessageSignalE(OAIMessageClickSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClicksForSingleOutboundMessageSignalError(OAIMessageClickSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInboundMessageDetailsSignalError() instead")
    void getInboundMessageDetailsSignalE(OAIInboundMessageFullDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInboundMessageDetailsSignalError(OAIInboundMessageFullDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpensForSingleOutboundMessageSignalError() instead")
    void getOpensForSingleOutboundMessageSignalE(OAIMessageOpenSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpensForSingleOutboundMessageSignalError(OAIMessageOpenSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundMessageDetailsSignalError() instead")
    void getOutboundMessageDetailsSignalE(OAIOutboundMessageDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundMessageDetailsSignalError(OAIOutboundMessageDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundMessageDumpSignalError() instead")
    void getOutboundMessageDumpSignalE(OAIOutboundMessageDumpResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundMessageDumpSignalError(OAIOutboundMessageDumpResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retryInboundMessageProcessingSignalError() instead")
    void retryInboundMessageProcessingSignalE(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retryInboundMessageProcessingSignalError(OAIStandardPostmarkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClicksForOutboundMessagesSignalError() instead")
    void searchClicksForOutboundMessagesSignalE(OAIMessageClickSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchClicksForOutboundMessagesSignalError(OAIMessageClickSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchInboundMessagesSignalError() instead")
    void searchInboundMessagesSignalE(OAIInboundSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchInboundMessagesSignalError(OAIInboundSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOpensForOutboundMessagesSignalError() instead")
    void searchOpensForOutboundMessagesSignalE(OAIMessageOpenSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOpensForOutboundMessagesSignalError(OAIMessageOpenSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOutboundMessagesSignalError() instead")
    void searchOutboundMessagesSignalE(OAIOutboundSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOutboundMessagesSignalError(OAIOutboundSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bypassRulesForInboundMessageSignalErrorFull() instead")
    void bypassRulesForInboundMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bypassRulesForInboundMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClicksForSingleOutboundMessageSignalErrorFull() instead")
    void getClicksForSingleOutboundMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClicksForSingleOutboundMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInboundMessageDetailsSignalErrorFull() instead")
    void getInboundMessageDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInboundMessageDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpensForSingleOutboundMessageSignalErrorFull() instead")
    void getOpensForSingleOutboundMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpensForSingleOutboundMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundMessageDetailsSignalErrorFull() instead")
    void getOutboundMessageDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundMessageDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundMessageDumpSignalErrorFull() instead")
    void getOutboundMessageDumpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundMessageDumpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retryInboundMessageProcessingSignalErrorFull() instead")
    void retryInboundMessageProcessingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retryInboundMessageProcessingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClicksForOutboundMessagesSignalErrorFull() instead")
    void searchClicksForOutboundMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchClicksForOutboundMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchInboundMessagesSignalErrorFull() instead")
    void searchInboundMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchInboundMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOpensForOutboundMessagesSignalErrorFull() instead")
    void searchOpensForOutboundMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOpensForOutboundMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchOutboundMessagesSignalErrorFull() instead")
    void searchOutboundMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchOutboundMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
