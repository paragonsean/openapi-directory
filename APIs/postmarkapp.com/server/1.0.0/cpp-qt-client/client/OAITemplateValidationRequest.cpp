/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateValidationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateValidationRequest::OAITemplateValidationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateValidationRequest::OAITemplateValidationRequest() {
    this->initializeModel();
}

OAITemplateValidationRequest::~OAITemplateValidationRequest() {}

void OAITemplateValidationRequest::initializeModel() {

    m_html_body_isSet = false;
    m_html_body_isValid = false;

    m_inline_css_for_html_test_render_isSet = false;
    m_inline_css_for_html_test_render_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_test_render_model_isSet = false;
    m_test_render_model_isValid = false;

    m_text_body_isSet = false;
    m_text_body_isValid = false;
}

void OAITemplateValidationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateValidationRequest::fromJsonObject(QJsonObject json) {

    m_html_body_isValid = ::OpenAPI::fromJsonValue(m_html_body, json[QString("HtmlBody")]);
    m_html_body_isSet = !json[QString("HtmlBody")].isNull() && m_html_body_isValid;

    m_inline_css_for_html_test_render_isValid = ::OpenAPI::fromJsonValue(m_inline_css_for_html_test_render, json[QString("InlineCssForHtmlTestRender")]);
    m_inline_css_for_html_test_render_isSet = !json[QString("InlineCssForHtmlTestRender")].isNull() && m_inline_css_for_html_test_render_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_test_render_model_isValid = ::OpenAPI::fromJsonValue(m_test_render_model, json[QString("TestRenderModel")]);
    m_test_render_model_isSet = !json[QString("TestRenderModel")].isNull() && m_test_render_model_isValid;

    m_text_body_isValid = ::OpenAPI::fromJsonValue(m_text_body, json[QString("TextBody")]);
    m_text_body_isSet = !json[QString("TextBody")].isNull() && m_text_body_isValid;
}

QString OAITemplateValidationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateValidationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_html_body_isSet) {
        obj.insert(QString("HtmlBody"), ::OpenAPI::toJsonValue(m_html_body));
    }
    if (m_inline_css_for_html_test_render_isSet) {
        obj.insert(QString("InlineCssForHtmlTestRender"), ::OpenAPI::toJsonValue(m_inline_css_for_html_test_render));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_test_render_model_isSet) {
        obj.insert(QString("TestRenderModel"), ::OpenAPI::toJsonValue(m_test_render_model));
    }
    if (m_text_body_isSet) {
        obj.insert(QString("TextBody"), ::OpenAPI::toJsonValue(m_text_body));
    }
    return obj;
}

QString OAITemplateValidationRequest::getHtmlBody() const {
    return m_html_body;
}
void OAITemplateValidationRequest::setHtmlBody(const QString &html_body) {
    m_html_body = html_body;
    m_html_body_isSet = true;
}

bool OAITemplateValidationRequest::is_html_body_Set() const{
    return m_html_body_isSet;
}

bool OAITemplateValidationRequest::is_html_body_Valid() const{
    return m_html_body_isValid;
}

bool OAITemplateValidationRequest::isInlineCssForHtmlTestRender() const {
    return m_inline_css_for_html_test_render;
}
void OAITemplateValidationRequest::setInlineCssForHtmlTestRender(const bool &inline_css_for_html_test_render) {
    m_inline_css_for_html_test_render = inline_css_for_html_test_render;
    m_inline_css_for_html_test_render_isSet = true;
}

bool OAITemplateValidationRequest::is_inline_css_for_html_test_render_Set() const{
    return m_inline_css_for_html_test_render_isSet;
}

bool OAITemplateValidationRequest::is_inline_css_for_html_test_render_Valid() const{
    return m_inline_css_for_html_test_render_isValid;
}

QString OAITemplateValidationRequest::getSubject() const {
    return m_subject;
}
void OAITemplateValidationRequest::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITemplateValidationRequest::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITemplateValidationRequest::is_subject_Valid() const{
    return m_subject_isValid;
}

OAIObject OAITemplateValidationRequest::getTestRenderModel() const {
    return m_test_render_model;
}
void OAITemplateValidationRequest::setTestRenderModel(const OAIObject &test_render_model) {
    m_test_render_model = test_render_model;
    m_test_render_model_isSet = true;
}

bool OAITemplateValidationRequest::is_test_render_model_Set() const{
    return m_test_render_model_isSet;
}

bool OAITemplateValidationRequest::is_test_render_model_Valid() const{
    return m_test_render_model_isValid;
}

QString OAITemplateValidationRequest::getTextBody() const {
    return m_text_body;
}
void OAITemplateValidationRequest::setTextBody(const QString &text_body) {
    m_text_body = text_body;
    m_text_body_isSet = true;
}

bool OAITemplateValidationRequest::is_text_body_Set() const{
    return m_text_body_isSet;
}

bool OAITemplateValidationRequest::is_text_body_Valid() const{
    return m_text_body_isValid;
}

bool OAITemplateValidationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_css_for_html_test_render_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_render_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateValidationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
