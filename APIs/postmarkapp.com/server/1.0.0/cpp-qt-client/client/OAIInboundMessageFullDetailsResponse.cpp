/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundMessageFullDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundMessageFullDetailsResponse::OAIInboundMessageFullDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundMessageFullDetailsResponse::OAIInboundMessageFullDetailsResponse() {
    this->initializeModel();
}

OAIInboundMessageFullDetailsResponse::~OAIInboundMessageFullDetailsResponse() {}

void OAIInboundMessageFullDetailsResponse::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_blocked_reason_isSet = false;
    m_blocked_reason_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_cc_full_isSet = false;
    m_cc_full_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_from_full_isSet = false;
    m_from_full_isValid = false;

    m_from_name_isSet = false;
    m_from_name_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_html_body_isSet = false;
    m_html_body_isValid = false;

    m_mailbox_hash_isSet = false;
    m_mailbox_hash_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_original_recipient_isSet = false;
    m_original_recipient_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_text_body_isSet = false;
    m_text_body_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_to_full_isSet = false;
    m_to_full_isValid = false;
}

void OAIInboundMessageFullDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundMessageFullDetailsResponse::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_blocked_reason_isValid = ::OpenAPI::fromJsonValue(m_blocked_reason, json[QString("BlockedReason")]);
    m_blocked_reason_isSet = !json[QString("BlockedReason")].isNull() && m_blocked_reason_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("Cc")]);
    m_cc_isSet = !json[QString("Cc")].isNull() && m_cc_isValid;

    m_cc_full_isValid = ::OpenAPI::fromJsonValue(m_cc_full, json[QString("CcFull")]);
    m_cc_full_isSet = !json[QString("CcFull")].isNull() && m_cc_full_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_from_full_isValid = ::OpenAPI::fromJsonValue(m_from_full, json[QString("FromFull")]);
    m_from_full_isSet = !json[QString("FromFull")].isNull() && m_from_full_isValid;

    m_from_name_isValid = ::OpenAPI::fromJsonValue(m_from_name, json[QString("FromName")]);
    m_from_name_isSet = !json[QString("FromName")].isNull() && m_from_name_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_html_body_isValid = ::OpenAPI::fromJsonValue(m_html_body, json[QString("HtmlBody")]);
    m_html_body_isSet = !json[QString("HtmlBody")].isNull() && m_html_body_isValid;

    m_mailbox_hash_isValid = ::OpenAPI::fromJsonValue(m_mailbox_hash, json[QString("MailboxHash")]);
    m_mailbox_hash_isSet = !json[QString("MailboxHash")].isNull() && m_mailbox_hash_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageID")]);
    m_message_id_isSet = !json[QString("MessageID")].isNull() && m_message_id_isValid;

    m_original_recipient_isValid = ::OpenAPI::fromJsonValue(m_original_recipient, json[QString("OriginalRecipient")]);
    m_original_recipient_isSet = !json[QString("OriginalRecipient")].isNull() && m_original_recipient_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("ReplyTo")]);
    m_reply_to_isSet = !json[QString("ReplyTo")].isNull() && m_reply_to_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_text_body_isValid = ::OpenAPI::fromJsonValue(m_text_body, json[QString("TextBody")]);
    m_text_body_isSet = !json[QString("TextBody")].isNull() && m_text_body_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("To")]);
    m_to_isSet = !json[QString("To")].isNull() && m_to_isValid;

    m_to_full_isValid = ::OpenAPI::fromJsonValue(m_to_full, json[QString("ToFull")]);
    m_to_full_isSet = !json[QString("ToFull")].isNull() && m_to_full_isValid;
}

QString OAIInboundMessageFullDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundMessageFullDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_blocked_reason_isSet) {
        obj.insert(QString("BlockedReason"), ::OpenAPI::toJsonValue(m_blocked_reason));
    }
    if (m_cc_isSet) {
        obj.insert(QString("Cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_cc_full.size() > 0) {
        obj.insert(QString("CcFull"), ::OpenAPI::toJsonValue(m_cc_full));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_from_full.isSet()) {
        obj.insert(QString("FromFull"), ::OpenAPI::toJsonValue(m_from_full));
    }
    if (m_from_name_isSet) {
        obj.insert(QString("FromName"), ::OpenAPI::toJsonValue(m_from_name));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_html_body_isSet) {
        obj.insert(QString("HtmlBody"), ::OpenAPI::toJsonValue(m_html_body));
    }
    if (m_mailbox_hash_isSet) {
        obj.insert(QString("MailboxHash"), ::OpenAPI::toJsonValue(m_mailbox_hash));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageID"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_original_recipient_isSet) {
        obj.insert(QString("OriginalRecipient"), ::OpenAPI::toJsonValue(m_original_recipient));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("ReplyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_text_body_isSet) {
        obj.insert(QString("TextBody"), ::OpenAPI::toJsonValue(m_text_body));
    }
    if (m_to_isSet) {
        obj.insert(QString("To"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_to_full.size() > 0) {
        obj.insert(QString("ToFull"), ::OpenAPI::toJsonValue(m_to_full));
    }
    return obj;
}

QList<OAIAttachment> OAIInboundMessageFullDetailsResponse::getAttachments() const {
    return m_attachments;
}
void OAIInboundMessageFullDetailsResponse::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getBlockedReason() const {
    return m_blocked_reason;
}
void OAIInboundMessageFullDetailsResponse::setBlockedReason(const QString &blocked_reason) {
    m_blocked_reason = blocked_reason;
    m_blocked_reason_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_blocked_reason_Set() const{
    return m_blocked_reason_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_blocked_reason_Valid() const{
    return m_blocked_reason_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getCc() const {
    return m_cc;
}
void OAIInboundMessageFullDetailsResponse::setCc(const QString &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_cc_Valid() const{
    return m_cc_isValid;
}

QList<OAIEmailNameAddressPair> OAIInboundMessageFullDetailsResponse::getCcFull() const {
    return m_cc_full;
}
void OAIInboundMessageFullDetailsResponse::setCcFull(const QList<OAIEmailNameAddressPair> &cc_full) {
    m_cc_full = cc_full;
    m_cc_full_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_cc_full_Set() const{
    return m_cc_full_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_cc_full_Valid() const{
    return m_cc_full_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getDate() const {
    return m_date;
}
void OAIInboundMessageFullDetailsResponse::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getFrom() const {
    return m_from;
}
void OAIInboundMessageFullDetailsResponse::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_from_Set() const{
    return m_from_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_from_Valid() const{
    return m_from_isValid;
}

OAIInboundMessageDetail_FromFull OAIInboundMessageFullDetailsResponse::getFromFull() const {
    return m_from_full;
}
void OAIInboundMessageFullDetailsResponse::setFromFull(const OAIInboundMessageDetail_FromFull &from_full) {
    m_from_full = from_full;
    m_from_full_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_from_full_Set() const{
    return m_from_full_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_from_full_Valid() const{
    return m_from_full_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getFromName() const {
    return m_from_name;
}
void OAIInboundMessageFullDetailsResponse::setFromName(const QString &from_name) {
    m_from_name = from_name;
    m_from_name_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_from_name_Set() const{
    return m_from_name_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_from_name_Valid() const{
    return m_from_name_isValid;
}

QList<OAIMessageHeader> OAIInboundMessageFullDetailsResponse::getHeaders() const {
    return m_headers;
}
void OAIInboundMessageFullDetailsResponse::setHeaders(const QList<OAIMessageHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getHtmlBody() const {
    return m_html_body;
}
void OAIInboundMessageFullDetailsResponse::setHtmlBody(const QString &html_body) {
    m_html_body = html_body;
    m_html_body_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_html_body_Set() const{
    return m_html_body_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_html_body_Valid() const{
    return m_html_body_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getMailboxHash() const {
    return m_mailbox_hash;
}
void OAIInboundMessageFullDetailsResponse::setMailboxHash(const QString &mailbox_hash) {
    m_mailbox_hash = mailbox_hash;
    m_mailbox_hash_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_mailbox_hash_Set() const{
    return m_mailbox_hash_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_mailbox_hash_Valid() const{
    return m_mailbox_hash_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getMessageId() const {
    return m_message_id;
}
void OAIInboundMessageFullDetailsResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getOriginalRecipient() const {
    return m_original_recipient;
}
void OAIInboundMessageFullDetailsResponse::setOriginalRecipient(const QString &original_recipient) {
    m_original_recipient = original_recipient;
    m_original_recipient_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_original_recipient_Set() const{
    return m_original_recipient_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_original_recipient_Valid() const{
    return m_original_recipient_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getReplyTo() const {
    return m_reply_to;
}
void OAIInboundMessageFullDetailsResponse::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getStatus() const {
    return m_status;
}
void OAIInboundMessageFullDetailsResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getSubject() const {
    return m_subject;
}
void OAIInboundMessageFullDetailsResponse::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getTag() const {
    return m_tag;
}
void OAIInboundMessageFullDetailsResponse::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getTextBody() const {
    return m_text_body;
}
void OAIInboundMessageFullDetailsResponse::setTextBody(const QString &text_body) {
    m_text_body = text_body;
    m_text_body_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_text_body_Set() const{
    return m_text_body_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_text_body_Valid() const{
    return m_text_body_isValid;
}

QString OAIInboundMessageFullDetailsResponse::getTo() const {
    return m_to;
}
void OAIInboundMessageFullDetailsResponse::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_to_Set() const{
    return m_to_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_to_Valid() const{
    return m_to_isValid;
}

QList<OAIEmailNameAddressPair> OAIInboundMessageFullDetailsResponse::getToFull() const {
    return m_to_full;
}
void OAIInboundMessageFullDetailsResponse::setToFull(const QList<OAIEmailNameAddressPair> &to_full) {
    m_to_full = to_full;
    m_to_full_isSet = true;
}

bool OAIInboundMessageFullDetailsResponse::is_to_full_Set() const{
    return m_to_full_isSet;
}

bool OAIInboundMessageFullDetailsResponse::is_to_full_Valid() const{
    return m_to_full_isValid;
}

bool OAIInboundMessageFullDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_full.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_full.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailbox_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_full.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundMessageFullDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
