/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendEmailRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendEmailRequest::OAISendEmailRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendEmailRequest::OAISendEmailRequest() {
    this->initializeModel();
}

OAISendEmailRequest::~OAISendEmailRequest() {}

void OAISendEmailRequest::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_html_body_isSet = false;
    m_html_body_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_text_body_isSet = false;
    m_text_body_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_track_links_isSet = false;
    m_track_links_isValid = false;

    m_track_opens_isSet = false;
    m_track_opens_isValid = false;
}

void OAISendEmailRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendEmailRequest::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("Bcc")]);
    m_bcc_isSet = !json[QString("Bcc")].isNull() && m_bcc_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("Cc")]);
    m_cc_isSet = !json[QString("Cc")].isNull() && m_cc_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_html_body_isValid = ::OpenAPI::fromJsonValue(m_html_body, json[QString("HtmlBody")]);
    m_html_body_isSet = !json[QString("HtmlBody")].isNull() && m_html_body_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("ReplyTo")]);
    m_reply_to_isSet = !json[QString("ReplyTo")].isNull() && m_reply_to_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_text_body_isValid = ::OpenAPI::fromJsonValue(m_text_body, json[QString("TextBody")]);
    m_text_body_isSet = !json[QString("TextBody")].isNull() && m_text_body_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("To")]);
    m_to_isSet = !json[QString("To")].isNull() && m_to_isValid;

    m_track_links_isValid = ::OpenAPI::fromJsonValue(m_track_links, json[QString("TrackLinks")]);
    m_track_links_isSet = !json[QString("TrackLinks")].isNull() && m_track_links_isValid;

    m_track_opens_isValid = ::OpenAPI::fromJsonValue(m_track_opens, json[QString("TrackOpens")]);
    m_track_opens_isSet = !json[QString("TrackOpens")].isNull() && m_track_opens_isValid;
}

QString OAISendEmailRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendEmailRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_bcc_isSet) {
        obj.insert(QString("Bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_cc_isSet) {
        obj.insert(QString("Cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_html_body_isSet) {
        obj.insert(QString("HtmlBody"), ::OpenAPI::toJsonValue(m_html_body));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("ReplyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_text_body_isSet) {
        obj.insert(QString("TextBody"), ::OpenAPI::toJsonValue(m_text_body));
    }
    if (m_to_isSet) {
        obj.insert(QString("To"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_track_links_isSet) {
        obj.insert(QString("TrackLinks"), ::OpenAPI::toJsonValue(m_track_links));
    }
    if (m_track_opens_isSet) {
        obj.insert(QString("TrackOpens"), ::OpenAPI::toJsonValue(m_track_opens));
    }
    return obj;
}

QList<OAIAttachment> OAISendEmailRequest::getAttachments() const {
    return m_attachments;
}
void OAISendEmailRequest::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISendEmailRequest::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISendEmailRequest::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAISendEmailRequest::getBcc() const {
    return m_bcc;
}
void OAISendEmailRequest::setBcc(const QString &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAISendEmailRequest::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAISendEmailRequest::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QString OAISendEmailRequest::getCc() const {
    return m_cc;
}
void OAISendEmailRequest::setCc(const QString &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAISendEmailRequest::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAISendEmailRequest::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAISendEmailRequest::getFrom() const {
    return m_from;
}
void OAISendEmailRequest::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAISendEmailRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendEmailRequest::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAIMessageHeader> OAISendEmailRequest::getHeaders() const {
    return m_headers;
}
void OAISendEmailRequest::setHeaders(const QList<OAIMessageHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAISendEmailRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAISendEmailRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAISendEmailRequest::getHtmlBody() const {
    return m_html_body;
}
void OAISendEmailRequest::setHtmlBody(const QString &html_body) {
    m_html_body = html_body;
    m_html_body_isSet = true;
}

bool OAISendEmailRequest::is_html_body_Set() const{
    return m_html_body_isSet;
}

bool OAISendEmailRequest::is_html_body_Valid() const{
    return m_html_body_isValid;
}

QString OAISendEmailRequest::getReplyTo() const {
    return m_reply_to;
}
void OAISendEmailRequest::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAISendEmailRequest::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAISendEmailRequest::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAISendEmailRequest::getSubject() const {
    return m_subject;
}
void OAISendEmailRequest::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISendEmailRequest::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISendEmailRequest::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAISendEmailRequest::getTag() const {
    return m_tag;
}
void OAISendEmailRequest::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAISendEmailRequest::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAISendEmailRequest::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAISendEmailRequest::getTextBody() const {
    return m_text_body;
}
void OAISendEmailRequest::setTextBody(const QString &text_body) {
    m_text_body = text_body;
    m_text_body_isSet = true;
}

bool OAISendEmailRequest::is_text_body_Set() const{
    return m_text_body_isSet;
}

bool OAISendEmailRequest::is_text_body_Valid() const{
    return m_text_body_isValid;
}

QString OAISendEmailRequest::getTo() const {
    return m_to;
}
void OAISendEmailRequest::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAISendEmailRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendEmailRequest::is_to_Valid() const{
    return m_to_isValid;
}

QString OAISendEmailRequest::getTrackLinks() const {
    return m_track_links;
}
void OAISendEmailRequest::setTrackLinks(const QString &track_links) {
    m_track_links = track_links;
    m_track_links_isSet = true;
}

bool OAISendEmailRequest::is_track_links_Set() const{
    return m_track_links_isSet;
}

bool OAISendEmailRequest::is_track_links_Valid() const{
    return m_track_links_isValid;
}

bool OAISendEmailRequest::isTrackOpens() const {
    return m_track_opens;
}
void OAISendEmailRequest::setTrackOpens(const bool &track_opens) {
    m_track_opens = track_opens;
    m_track_opens_isSet = true;
}

bool OAISendEmailRequest::is_track_opens_Set() const{
    return m_track_opens_isSet;
}

bool OAISendEmailRequest::is_track_opens_Valid() const{
    return m_track_opens_isValid;
}

bool OAISendEmailRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_opens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendEmailRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
