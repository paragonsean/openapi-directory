/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedMessageClickEventInformation_Geo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedMessageClickEventInformation_Geo::OAIExtendedMessageClickEventInformation_Geo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedMessageClickEventInformation_Geo::OAIExtendedMessageClickEventInformation_Geo() {
    this->initializeModel();
}

OAIExtendedMessageClickEventInformation_Geo::~OAIExtendedMessageClickEventInformation_Geo() {}

void OAIExtendedMessageClickEventInformation_Geo::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_coords_isSet = false;
    m_coords_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_iso_code_isSet = false;
    m_country_iso_code_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_iso_code_isSet = false;
    m_region_iso_code_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIExtendedMessageClickEventInformation_Geo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedMessageClickEventInformation_Geo::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_coords_isValid = ::OpenAPI::fromJsonValue(m_coords, json[QString("Coords")]);
    m_coords_isSet = !json[QString("Coords")].isNull() && m_coords_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_country_iso_code_isValid = ::OpenAPI::fromJsonValue(m_country_iso_code, json[QString("CountryISOCode")]);
    m_country_iso_code_isSet = !json[QString("CountryISOCode")].isNull() && m_country_iso_code_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("IP")]);
    m_ip_isSet = !json[QString("IP")].isNull() && m_ip_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_region_iso_code_isValid = ::OpenAPI::fromJsonValue(m_region_iso_code, json[QString("RegionISOCode")]);
    m_region_iso_code_isSet = !json[QString("RegionISOCode")].isNull() && m_region_iso_code_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("Zip")]);
    m_zip_isSet = !json[QString("Zip")].isNull() && m_zip_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedMessageClickEventInformation_Geo::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_coords_isSet) {
        obj.insert(QString("Coords"), ::OpenAPI::toJsonValue(m_coords));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_iso_code_isSet) {
        obj.insert(QString("CountryISOCode"), ::OpenAPI::toJsonValue(m_country_iso_code));
    }
    if (m_ip_isSet) {
        obj.insert(QString("IP"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_iso_code_isSet) {
        obj.insert(QString("RegionISOCode"), ::OpenAPI::toJsonValue(m_region_iso_code));
    }
    if (m_zip_isSet) {
        obj.insert(QString("Zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIExtendedMessageClickEventInformation_Geo::getCity() const {
    return m_city;
}
void OAIExtendedMessageClickEventInformation_Geo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getCoords() const {
    return m_coords;
}
void OAIExtendedMessageClickEventInformation_Geo::setCoords(const QString &coords) {
    m_coords = coords;
    m_coords_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_coords_Set() const{
    return m_coords_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_coords_Valid() const{
    return m_coords_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getCountry() const {
    return m_country;
}
void OAIExtendedMessageClickEventInformation_Geo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getCountryIsoCode() const {
    return m_country_iso_code;
}
void OAIExtendedMessageClickEventInformation_Geo::setCountryIsoCode(const QString &country_iso_code) {
    m_country_iso_code = country_iso_code;
    m_country_iso_code_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_country_iso_code_Set() const{
    return m_country_iso_code_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_country_iso_code_Valid() const{
    return m_country_iso_code_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getIp() const {
    return m_ip;
}
void OAIExtendedMessageClickEventInformation_Geo::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getRegion() const {
    return m_region;
}
void OAIExtendedMessageClickEventInformation_Geo::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_region_Set() const{
    return m_region_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getRegionIsoCode() const {
    return m_region_iso_code;
}
void OAIExtendedMessageClickEventInformation_Geo::setRegionIsoCode(const QString &region_iso_code) {
    m_region_iso_code = region_iso_code;
    m_region_iso_code_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_region_iso_code_Set() const{
    return m_region_iso_code_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_region_iso_code_Valid() const{
    return m_region_iso_code_isValid;
}

QString OAIExtendedMessageClickEventInformation_Geo::getZip() const {
    return m_zip;
}
void OAIExtendedMessageClickEventInformation_Geo::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIExtendedMessageClickEventInformation_Geo::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIExtendedMessageClickEventInformation_Geo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedMessageClickEventInformation_Geo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
