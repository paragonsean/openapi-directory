/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutboundOverviewStatsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutboundOverviewStatsResponse::OAIOutboundOverviewStatsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutboundOverviewStatsResponse::OAIOutboundOverviewStatsResponse() {
    this->initializeModel();
}

OAIOutboundOverviewStatsResponse::~OAIOutboundOverviewStatsResponse() {}

void OAIOutboundOverviewStatsResponse::initializeModel() {

    m_bounce_rate_isSet = false;
    m_bounce_rate_isValid = false;

    m_bounced_isSet = false;
    m_bounced_isValid = false;

    m_opens_isSet = false;
    m_opens_isValid = false;

    m_smtpapi_errors_isSet = false;
    m_smtpapi_errors_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_spam_complaints_isSet = false;
    m_spam_complaints_isValid = false;

    m_spam_complaints_rate_isSet = false;
    m_spam_complaints_rate_isValid = false;

    m_total_clicks_isSet = false;
    m_total_clicks_isValid = false;

    m_total_tracked_links_sent_isSet = false;
    m_total_tracked_links_sent_isValid = false;

    m_tracked_isSet = false;
    m_tracked_isValid = false;

    m_unique_links_clicked_isSet = false;
    m_unique_links_clicked_isValid = false;

    m_unique_opens_isSet = false;
    m_unique_opens_isValid = false;

    m_with_client_recorded_isSet = false;
    m_with_client_recorded_isValid = false;

    m_with_link_tracking_isSet = false;
    m_with_link_tracking_isValid = false;

    m_with_open_tracking_isSet = false;
    m_with_open_tracking_isValid = false;

    m_with_platform_recorded_isSet = false;
    m_with_platform_recorded_isValid = false;
}

void OAIOutboundOverviewStatsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutboundOverviewStatsResponse::fromJsonObject(QJsonObject json) {

    m_bounce_rate_isValid = ::OpenAPI::fromJsonValue(m_bounce_rate, json[QString("BounceRate")]);
    m_bounce_rate_isSet = !json[QString("BounceRate")].isNull() && m_bounce_rate_isValid;

    m_bounced_isValid = ::OpenAPI::fromJsonValue(m_bounced, json[QString("Bounced")]);
    m_bounced_isSet = !json[QString("Bounced")].isNull() && m_bounced_isValid;

    m_opens_isValid = ::OpenAPI::fromJsonValue(m_opens, json[QString("Opens")]);
    m_opens_isSet = !json[QString("Opens")].isNull() && m_opens_isValid;

    m_smtpapi_errors_isValid = ::OpenAPI::fromJsonValue(m_smtpapi_errors, json[QString("SMTPAPIErrors")]);
    m_smtpapi_errors_isSet = !json[QString("SMTPAPIErrors")].isNull() && m_smtpapi_errors_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("Sent")]);
    m_sent_isSet = !json[QString("Sent")].isNull() && m_sent_isValid;

    m_spam_complaints_isValid = ::OpenAPI::fromJsonValue(m_spam_complaints, json[QString("SpamComplaints")]);
    m_spam_complaints_isSet = !json[QString("SpamComplaints")].isNull() && m_spam_complaints_isValid;

    m_spam_complaints_rate_isValid = ::OpenAPI::fromJsonValue(m_spam_complaints_rate, json[QString("SpamComplaintsRate")]);
    m_spam_complaints_rate_isSet = !json[QString("SpamComplaintsRate")].isNull() && m_spam_complaints_rate_isValid;

    m_total_clicks_isValid = ::OpenAPI::fromJsonValue(m_total_clicks, json[QString("TotalClicks")]);
    m_total_clicks_isSet = !json[QString("TotalClicks")].isNull() && m_total_clicks_isValid;

    m_total_tracked_links_sent_isValid = ::OpenAPI::fromJsonValue(m_total_tracked_links_sent, json[QString("TotalTrackedLinksSent")]);
    m_total_tracked_links_sent_isSet = !json[QString("TotalTrackedLinksSent")].isNull() && m_total_tracked_links_sent_isValid;

    m_tracked_isValid = ::OpenAPI::fromJsonValue(m_tracked, json[QString("Tracked")]);
    m_tracked_isSet = !json[QString("Tracked")].isNull() && m_tracked_isValid;

    m_unique_links_clicked_isValid = ::OpenAPI::fromJsonValue(m_unique_links_clicked, json[QString("UniqueLinksClicked")]);
    m_unique_links_clicked_isSet = !json[QString("UniqueLinksClicked")].isNull() && m_unique_links_clicked_isValid;

    m_unique_opens_isValid = ::OpenAPI::fromJsonValue(m_unique_opens, json[QString("UniqueOpens")]);
    m_unique_opens_isSet = !json[QString("UniqueOpens")].isNull() && m_unique_opens_isValid;

    m_with_client_recorded_isValid = ::OpenAPI::fromJsonValue(m_with_client_recorded, json[QString("WithClientRecorded")]);
    m_with_client_recorded_isSet = !json[QString("WithClientRecorded")].isNull() && m_with_client_recorded_isValid;

    m_with_link_tracking_isValid = ::OpenAPI::fromJsonValue(m_with_link_tracking, json[QString("WithLinkTracking")]);
    m_with_link_tracking_isSet = !json[QString("WithLinkTracking")].isNull() && m_with_link_tracking_isValid;

    m_with_open_tracking_isValid = ::OpenAPI::fromJsonValue(m_with_open_tracking, json[QString("WithOpenTracking")]);
    m_with_open_tracking_isSet = !json[QString("WithOpenTracking")].isNull() && m_with_open_tracking_isValid;

    m_with_platform_recorded_isValid = ::OpenAPI::fromJsonValue(m_with_platform_recorded, json[QString("WithPlatformRecorded")]);
    m_with_platform_recorded_isSet = !json[QString("WithPlatformRecorded")].isNull() && m_with_platform_recorded_isValid;
}

QString OAIOutboundOverviewStatsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutboundOverviewStatsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bounce_rate_isSet) {
        obj.insert(QString("BounceRate"), ::OpenAPI::toJsonValue(m_bounce_rate));
    }
    if (m_bounced_isSet) {
        obj.insert(QString("Bounced"), ::OpenAPI::toJsonValue(m_bounced));
    }
    if (m_opens_isSet) {
        obj.insert(QString("Opens"), ::OpenAPI::toJsonValue(m_opens));
    }
    if (m_smtpapi_errors_isSet) {
        obj.insert(QString("SMTPAPIErrors"), ::OpenAPI::toJsonValue(m_smtpapi_errors));
    }
    if (m_sent_isSet) {
        obj.insert(QString("Sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_spam_complaints_isSet) {
        obj.insert(QString("SpamComplaints"), ::OpenAPI::toJsonValue(m_spam_complaints));
    }
    if (m_spam_complaints_rate_isSet) {
        obj.insert(QString("SpamComplaintsRate"), ::OpenAPI::toJsonValue(m_spam_complaints_rate));
    }
    if (m_total_clicks_isSet) {
        obj.insert(QString("TotalClicks"), ::OpenAPI::toJsonValue(m_total_clicks));
    }
    if (m_total_tracked_links_sent_isSet) {
        obj.insert(QString("TotalTrackedLinksSent"), ::OpenAPI::toJsonValue(m_total_tracked_links_sent));
    }
    if (m_tracked_isSet) {
        obj.insert(QString("Tracked"), ::OpenAPI::toJsonValue(m_tracked));
    }
    if (m_unique_links_clicked_isSet) {
        obj.insert(QString("UniqueLinksClicked"), ::OpenAPI::toJsonValue(m_unique_links_clicked));
    }
    if (m_unique_opens_isSet) {
        obj.insert(QString("UniqueOpens"), ::OpenAPI::toJsonValue(m_unique_opens));
    }
    if (m_with_client_recorded_isSet) {
        obj.insert(QString("WithClientRecorded"), ::OpenAPI::toJsonValue(m_with_client_recorded));
    }
    if (m_with_link_tracking_isSet) {
        obj.insert(QString("WithLinkTracking"), ::OpenAPI::toJsonValue(m_with_link_tracking));
    }
    if (m_with_open_tracking_isSet) {
        obj.insert(QString("WithOpenTracking"), ::OpenAPI::toJsonValue(m_with_open_tracking));
    }
    if (m_with_platform_recorded_isSet) {
        obj.insert(QString("WithPlatformRecorded"), ::OpenAPI::toJsonValue(m_with_platform_recorded));
    }
    return obj;
}

qint32 OAIOutboundOverviewStatsResponse::getBounceRate() const {
    return m_bounce_rate;
}
void OAIOutboundOverviewStatsResponse::setBounceRate(const qint32 &bounce_rate) {
    m_bounce_rate = bounce_rate;
    m_bounce_rate_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_bounce_rate_Set() const{
    return m_bounce_rate_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_bounce_rate_Valid() const{
    return m_bounce_rate_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getBounced() const {
    return m_bounced;
}
void OAIOutboundOverviewStatsResponse::setBounced(const qint32 &bounced) {
    m_bounced = bounced;
    m_bounced_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_bounced_Set() const{
    return m_bounced_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_bounced_Valid() const{
    return m_bounced_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getOpens() const {
    return m_opens;
}
void OAIOutboundOverviewStatsResponse::setOpens(const qint32 &opens) {
    m_opens = opens;
    m_opens_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_opens_Set() const{
    return m_opens_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_opens_Valid() const{
    return m_opens_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getSmtpapiErrors() const {
    return m_smtpapi_errors;
}
void OAIOutboundOverviewStatsResponse::setSmtpapiErrors(const qint32 &smtpapi_errors) {
    m_smtpapi_errors = smtpapi_errors;
    m_smtpapi_errors_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_smtpapi_errors_Set() const{
    return m_smtpapi_errors_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_smtpapi_errors_Valid() const{
    return m_smtpapi_errors_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getSent() const {
    return m_sent;
}
void OAIOutboundOverviewStatsResponse::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_sent_Valid() const{
    return m_sent_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getSpamComplaints() const {
    return m_spam_complaints;
}
void OAIOutboundOverviewStatsResponse::setSpamComplaints(const qint32 &spam_complaints) {
    m_spam_complaints = spam_complaints;
    m_spam_complaints_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_spam_complaints_Set() const{
    return m_spam_complaints_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_spam_complaints_Valid() const{
    return m_spam_complaints_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getSpamComplaintsRate() const {
    return m_spam_complaints_rate;
}
void OAIOutboundOverviewStatsResponse::setSpamComplaintsRate(const qint32 &spam_complaints_rate) {
    m_spam_complaints_rate = spam_complaints_rate;
    m_spam_complaints_rate_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_spam_complaints_rate_Set() const{
    return m_spam_complaints_rate_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_spam_complaints_rate_Valid() const{
    return m_spam_complaints_rate_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getTotalClicks() const {
    return m_total_clicks;
}
void OAIOutboundOverviewStatsResponse::setTotalClicks(const qint32 &total_clicks) {
    m_total_clicks = total_clicks;
    m_total_clicks_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_total_clicks_Set() const{
    return m_total_clicks_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_total_clicks_Valid() const{
    return m_total_clicks_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getTotalTrackedLinksSent() const {
    return m_total_tracked_links_sent;
}
void OAIOutboundOverviewStatsResponse::setTotalTrackedLinksSent(const qint32 &total_tracked_links_sent) {
    m_total_tracked_links_sent = total_tracked_links_sent;
    m_total_tracked_links_sent_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_total_tracked_links_sent_Set() const{
    return m_total_tracked_links_sent_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_total_tracked_links_sent_Valid() const{
    return m_total_tracked_links_sent_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getTracked() const {
    return m_tracked;
}
void OAIOutboundOverviewStatsResponse::setTracked(const qint32 &tracked) {
    m_tracked = tracked;
    m_tracked_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_tracked_Set() const{
    return m_tracked_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_tracked_Valid() const{
    return m_tracked_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getUniqueLinksClicked() const {
    return m_unique_links_clicked;
}
void OAIOutboundOverviewStatsResponse::setUniqueLinksClicked(const qint32 &unique_links_clicked) {
    m_unique_links_clicked = unique_links_clicked;
    m_unique_links_clicked_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_unique_links_clicked_Set() const{
    return m_unique_links_clicked_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_unique_links_clicked_Valid() const{
    return m_unique_links_clicked_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getUniqueOpens() const {
    return m_unique_opens;
}
void OAIOutboundOverviewStatsResponse::setUniqueOpens(const qint32 &unique_opens) {
    m_unique_opens = unique_opens;
    m_unique_opens_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_unique_opens_Set() const{
    return m_unique_opens_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_unique_opens_Valid() const{
    return m_unique_opens_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getWithClientRecorded() const {
    return m_with_client_recorded;
}
void OAIOutboundOverviewStatsResponse::setWithClientRecorded(const qint32 &with_client_recorded) {
    m_with_client_recorded = with_client_recorded;
    m_with_client_recorded_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_with_client_recorded_Set() const{
    return m_with_client_recorded_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_with_client_recorded_Valid() const{
    return m_with_client_recorded_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getWithLinkTracking() const {
    return m_with_link_tracking;
}
void OAIOutboundOverviewStatsResponse::setWithLinkTracking(const qint32 &with_link_tracking) {
    m_with_link_tracking = with_link_tracking;
    m_with_link_tracking_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_with_link_tracking_Set() const{
    return m_with_link_tracking_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_with_link_tracking_Valid() const{
    return m_with_link_tracking_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getWithOpenTracking() const {
    return m_with_open_tracking;
}
void OAIOutboundOverviewStatsResponse::setWithOpenTracking(const qint32 &with_open_tracking) {
    m_with_open_tracking = with_open_tracking;
    m_with_open_tracking_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_with_open_tracking_Set() const{
    return m_with_open_tracking_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_with_open_tracking_Valid() const{
    return m_with_open_tracking_isValid;
}

qint32 OAIOutboundOverviewStatsResponse::getWithPlatformRecorded() const {
    return m_with_platform_recorded;
}
void OAIOutboundOverviewStatsResponse::setWithPlatformRecorded(const qint32 &with_platform_recorded) {
    m_with_platform_recorded = with_platform_recorded;
    m_with_platform_recorded_isSet = true;
}

bool OAIOutboundOverviewStatsResponse::is_with_platform_recorded_Set() const{
    return m_with_platform_recorded_isSet;
}

bool OAIOutboundOverviewStatsResponse::is_with_platform_recorded_Valid() const{
    return m_with_platform_recorded_isValid;
}

bool OAIOutboundOverviewStatsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounce_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtpapi_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_complaints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_complaints_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tracked_links_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_links_clicked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_opens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_client_recorded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_link_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_open_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_platform_recorded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutboundOverviewStatsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
