/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatsAPIApi_H
#define OAI_OAIStatsAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetBounceCounts_200_response.h"
#include "OAIGetOutboundOpenCountsByEmailClient_200_response.h"
#include "OAIGetOutboundOpenCountsByPlatform_200_response.h"
#include "OAIGetOutboundOpenCounts_200_response.h"
#include "OAIGetSpamComplaints_200_response.h"
#include "OAIGetTrackedEmailCounts_200_response.h"
#include "OAIObject.h"
#include "OAIOutboundOverviewStatsResponse.h"
#include "OAISentCountsResponse.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatsAPIApi : public QObject {
    Q_OBJECT

public:
    OAIStatsAPIApi(const int timeOut = 0);
    ~OAIStatsAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getBounceCounts(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundClickCounts(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundClickCountsByBrowserFamily(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundClickCountsByLocation(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundClickCountsByPlatform(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundOpenCounts(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundOpenCountsByEmailClient(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundOpenCountsByPlatform(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getOutboundOverviewStatistics(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getSentCounts(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getSpamComplaints(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  tag QString [optional]
    * @param[in]  fromdate QDate [optional]
    * @param[in]  todate QDate [optional]
    */
    virtual void getTrackedEmailCounts(const QString &x_postmark_server_token, const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBounceCountsCallback(OAIHttpRequestWorker *worker);
    void getOutboundClickCountsCallback(OAIHttpRequestWorker *worker);
    void getOutboundClickCountsByBrowserFamilyCallback(OAIHttpRequestWorker *worker);
    void getOutboundClickCountsByLocationCallback(OAIHttpRequestWorker *worker);
    void getOutboundClickCountsByPlatformCallback(OAIHttpRequestWorker *worker);
    void getOutboundOpenCountsCallback(OAIHttpRequestWorker *worker);
    void getOutboundOpenCountsByEmailClientCallback(OAIHttpRequestWorker *worker);
    void getOutboundOpenCountsByPlatformCallback(OAIHttpRequestWorker *worker);
    void getOutboundOverviewStatisticsCallback(OAIHttpRequestWorker *worker);
    void getSentCountsCallback(OAIHttpRequestWorker *worker);
    void getSpamComplaintsCallback(OAIHttpRequestWorker *worker);
    void getTrackedEmailCountsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBounceCountsSignal(OAIGetBounceCounts_200_response summary);
    void getOutboundClickCountsSignal(OAIObject summary);
    void getOutboundClickCountsByBrowserFamilySignal(OAIObject summary);
    void getOutboundClickCountsByLocationSignal(OAIObject summary);
    void getOutboundClickCountsByPlatformSignal(OAIObject summary);
    void getOutboundOpenCountsSignal(OAIGetOutboundOpenCounts_200_response summary);
    void getOutboundOpenCountsByEmailClientSignal(OAIGetOutboundOpenCountsByEmailClient_200_response summary);
    void getOutboundOpenCountsByPlatformSignal(OAIGetOutboundOpenCountsByPlatform_200_response summary);
    void getOutboundOverviewStatisticsSignal(OAIOutboundOverviewStatsResponse summary);
    void getSentCountsSignal(OAISentCountsResponse summary);
    void getSpamComplaintsSignal(OAIGetSpamComplaints_200_response summary);
    void getTrackedEmailCountsSignal(OAIGetTrackedEmailCounts_200_response summary);


    void getBounceCountsSignalFull(OAIHttpRequestWorker *worker, OAIGetBounceCounts_200_response summary);
    void getOutboundClickCountsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOutboundClickCountsByBrowserFamilySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOutboundClickCountsByLocationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOutboundClickCountsByPlatformSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOutboundOpenCountsSignalFull(OAIHttpRequestWorker *worker, OAIGetOutboundOpenCounts_200_response summary);
    void getOutboundOpenCountsByEmailClientSignalFull(OAIHttpRequestWorker *worker, OAIGetOutboundOpenCountsByEmailClient_200_response summary);
    void getOutboundOpenCountsByPlatformSignalFull(OAIHttpRequestWorker *worker, OAIGetOutboundOpenCountsByPlatform_200_response summary);
    void getOutboundOverviewStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIOutboundOverviewStatsResponse summary);
    void getSentCountsSignalFull(OAIHttpRequestWorker *worker, OAISentCountsResponse summary);
    void getSpamComplaintsSignalFull(OAIHttpRequestWorker *worker, OAIGetSpamComplaints_200_response summary);
    void getTrackedEmailCountsSignalFull(OAIHttpRequestWorker *worker, OAIGetTrackedEmailCounts_200_response summary);

    Q_DECL_DEPRECATED_X("Use getBounceCountsSignalError() instead")
    void getBounceCountsSignalE(OAIGetBounceCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBounceCountsSignalError(OAIGetBounceCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsSignalError() instead")
    void getOutboundClickCountsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByBrowserFamilySignalError() instead")
    void getOutboundClickCountsByBrowserFamilySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByBrowserFamilySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByLocationSignalError() instead")
    void getOutboundClickCountsByLocationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByLocationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByPlatformSignalError() instead")
    void getOutboundClickCountsByPlatformSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByPlatformSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsSignalError() instead")
    void getOutboundOpenCountsSignalE(OAIGetOutboundOpenCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsSignalError(OAIGetOutboundOpenCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsByEmailClientSignalError() instead")
    void getOutboundOpenCountsByEmailClientSignalE(OAIGetOutboundOpenCountsByEmailClient_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsByEmailClientSignalError(OAIGetOutboundOpenCountsByEmailClient_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsByPlatformSignalError() instead")
    void getOutboundOpenCountsByPlatformSignalE(OAIGetOutboundOpenCountsByPlatform_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsByPlatformSignalError(OAIGetOutboundOpenCountsByPlatform_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOverviewStatisticsSignalError() instead")
    void getOutboundOverviewStatisticsSignalE(OAIOutboundOverviewStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOverviewStatisticsSignalError(OAIOutboundOverviewStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSentCountsSignalError() instead")
    void getSentCountsSignalE(OAISentCountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSentCountsSignalError(OAISentCountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpamComplaintsSignalError() instead")
    void getSpamComplaintsSignalE(OAIGetSpamComplaints_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpamComplaintsSignalError(OAIGetSpamComplaints_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackedEmailCountsSignalError() instead")
    void getTrackedEmailCountsSignalE(OAIGetTrackedEmailCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackedEmailCountsSignalError(OAIGetTrackedEmailCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBounceCountsSignalErrorFull() instead")
    void getBounceCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBounceCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsSignalErrorFull() instead")
    void getOutboundClickCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByBrowserFamilySignalErrorFull() instead")
    void getOutboundClickCountsByBrowserFamilySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByBrowserFamilySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByLocationSignalErrorFull() instead")
    void getOutboundClickCountsByLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundClickCountsByPlatformSignalErrorFull() instead")
    void getOutboundClickCountsByPlatformSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundClickCountsByPlatformSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsSignalErrorFull() instead")
    void getOutboundOpenCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsByEmailClientSignalErrorFull() instead")
    void getOutboundOpenCountsByEmailClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsByEmailClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOpenCountsByPlatformSignalErrorFull() instead")
    void getOutboundOpenCountsByPlatformSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOpenCountsByPlatformSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutboundOverviewStatisticsSignalErrorFull() instead")
    void getOutboundOverviewStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutboundOverviewStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSentCountsSignalErrorFull() instead")
    void getSentCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSentCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpamComplaintsSignalErrorFull() instead")
    void getSpamComplaintsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpamComplaintsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackedEmailCountsSignalErrorFull() instead")
    void getTrackedEmailCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackedEmailCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
