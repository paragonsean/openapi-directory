/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailWithTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailWithTemplateRequest::OAIEmailWithTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailWithTemplateRequest::OAIEmailWithTemplateRequest() {
    this->initializeModel();
}

OAIEmailWithTemplateRequest::~OAIEmailWithTemplateRequest() {}

void OAIEmailWithTemplateRequest::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_inline_css_isSet = false;
    m_inline_css_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_template_alias_isSet = false;
    m_template_alias_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_template_model_isSet = false;
    m_template_model_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_track_links_isSet = false;
    m_track_links_isValid = false;

    m_track_opens_isSet = false;
    m_track_opens_isValid = false;
}

void OAIEmailWithTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailWithTemplateRequest::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("Bcc")]);
    m_bcc_isSet = !json[QString("Bcc")].isNull() && m_bcc_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("Cc")]);
    m_cc_isSet = !json[QString("Cc")].isNull() && m_cc_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_inline_css_isValid = ::OpenAPI::fromJsonValue(m_inline_css, json[QString("InlineCss")]);
    m_inline_css_isSet = !json[QString("InlineCss")].isNull() && m_inline_css_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("ReplyTo")]);
    m_reply_to_isSet = !json[QString("ReplyTo")].isNull() && m_reply_to_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_template_alias_isValid = ::OpenAPI::fromJsonValue(m_template_alias, json[QString("TemplateAlias")]);
    m_template_alias_isSet = !json[QString("TemplateAlias")].isNull() && m_template_alias_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_template_model_isValid = ::OpenAPI::fromJsonValue(m_template_model, json[QString("TemplateModel")]);
    m_template_model_isSet = !json[QString("TemplateModel")].isNull() && m_template_model_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("To")]);
    m_to_isSet = !json[QString("To")].isNull() && m_to_isValid;

    m_track_links_isValid = ::OpenAPI::fromJsonValue(m_track_links, json[QString("TrackLinks")]);
    m_track_links_isSet = !json[QString("TrackLinks")].isNull() && m_track_links_isValid;

    m_track_opens_isValid = ::OpenAPI::fromJsonValue(m_track_opens, json[QString("TrackOpens")]);
    m_track_opens_isSet = !json[QString("TrackOpens")].isNull() && m_track_opens_isValid;
}

QString OAIEmailWithTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailWithTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_bcc_isSet) {
        obj.insert(QString("Bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_cc_isSet) {
        obj.insert(QString("Cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_inline_css_isSet) {
        obj.insert(QString("InlineCss"), ::OpenAPI::toJsonValue(m_inline_css));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("ReplyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_template_alias_isSet) {
        obj.insert(QString("TemplateAlias"), ::OpenAPI::toJsonValue(m_template_alias));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_template_model_isSet) {
        obj.insert(QString("TemplateModel"), ::OpenAPI::toJsonValue(m_template_model));
    }
    if (m_to_isSet) {
        obj.insert(QString("To"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_track_links_isSet) {
        obj.insert(QString("TrackLinks"), ::OpenAPI::toJsonValue(m_track_links));
    }
    if (m_track_opens_isSet) {
        obj.insert(QString("TrackOpens"), ::OpenAPI::toJsonValue(m_track_opens));
    }
    return obj;
}

QList<OAIAttachment> OAIEmailWithTemplateRequest::getAttachments() const {
    return m_attachments;
}
void OAIEmailWithTemplateRequest::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIEmailWithTemplateRequest::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIEmailWithTemplateRequest::getBcc() const {
    return m_bcc;
}
void OAIEmailWithTemplateRequest::setBcc(const QString &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAIEmailWithTemplateRequest::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QString OAIEmailWithTemplateRequest::getCc() const {
    return m_cc;
}
void OAIEmailWithTemplateRequest::setCc(const QString &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIEmailWithTemplateRequest::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAIEmailWithTemplateRequest::getFrom() const {
    return m_from;
}
void OAIEmailWithTemplateRequest::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_from_Set() const{
    return m_from_isSet;
}

bool OAIEmailWithTemplateRequest::is_from_Valid() const{
    return m_from_isValid;
}

QList<OAIMessageHeader> OAIEmailWithTemplateRequest::getHeaders() const {
    return m_headers;
}
void OAIEmailWithTemplateRequest::setHeaders(const QList<OAIMessageHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIEmailWithTemplateRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIEmailWithTemplateRequest::isInlineCss() const {
    return m_inline_css;
}
void OAIEmailWithTemplateRequest::setInlineCss(const bool &inline_css) {
    m_inline_css = inline_css;
    m_inline_css_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_inline_css_Set() const{
    return m_inline_css_isSet;
}

bool OAIEmailWithTemplateRequest::is_inline_css_Valid() const{
    return m_inline_css_isValid;
}

QString OAIEmailWithTemplateRequest::getReplyTo() const {
    return m_reply_to;
}
void OAIEmailWithTemplateRequest::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIEmailWithTemplateRequest::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAIEmailWithTemplateRequest::getTag() const {
    return m_tag;
}
void OAIEmailWithTemplateRequest::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIEmailWithTemplateRequest::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIEmailWithTemplateRequest::getTemplateAlias() const {
    return m_template_alias;
}
void OAIEmailWithTemplateRequest::setTemplateAlias(const QString &template_alias) {
    m_template_alias = template_alias;
    m_template_alias_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_template_alias_Set() const{
    return m_template_alias_isSet;
}

bool OAIEmailWithTemplateRequest::is_template_alias_Valid() const{
    return m_template_alias_isValid;
}

qint32 OAIEmailWithTemplateRequest::getTemplateId() const {
    return m_template_id;
}
void OAIEmailWithTemplateRequest::setTemplateId(const qint32 &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIEmailWithTemplateRequest::is_template_id_Valid() const{
    return m_template_id_isValid;
}

OAIObject OAIEmailWithTemplateRequest::getTemplateModel() const {
    return m_template_model;
}
void OAIEmailWithTemplateRequest::setTemplateModel(const OAIObject &template_model) {
    m_template_model = template_model;
    m_template_model_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_template_model_Set() const{
    return m_template_model_isSet;
}

bool OAIEmailWithTemplateRequest::is_template_model_Valid() const{
    return m_template_model_isValid;
}

QString OAIEmailWithTemplateRequest::getTo() const {
    return m_to;
}
void OAIEmailWithTemplateRequest::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_to_Set() const{
    return m_to_isSet;
}

bool OAIEmailWithTemplateRequest::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIEmailWithTemplateRequest::getTrackLinks() const {
    return m_track_links;
}
void OAIEmailWithTemplateRequest::setTrackLinks(const QString &track_links) {
    m_track_links = track_links;
    m_track_links_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_track_links_Set() const{
    return m_track_links_isSet;
}

bool OAIEmailWithTemplateRequest::is_track_links_Valid() const{
    return m_track_links_isValid;
}

bool OAIEmailWithTemplateRequest::isTrackOpens() const {
    return m_track_opens;
}
void OAIEmailWithTemplateRequest::setTrackOpens(const bool &track_opens) {
    m_track_opens = track_opens;
    m_track_opens_isSet = true;
}

bool OAIEmailWithTemplateRequest::is_track_opens_Set() const{
    return m_track_opens_isSet;
}

bool OAIEmailWithTemplateRequest::is_track_opens_Valid() const{
    return m_track_opens_isValid;
}

bool OAIEmailWithTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_opens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailWithTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_template_alias_isValid && m_template_id_isValid && m_template_model_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
