/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutboundSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutboundSearchResponse::OAIOutboundSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutboundSearchResponse::OAIOutboundSearchResponse() {
    this->initializeModel();
}

OAIOutboundSearchResponse::~OAIOutboundSearchResponse() {}

void OAIOutboundSearchResponse::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIOutboundSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutboundSearchResponse::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("Messages")]);
    m_messages_isSet = !json[QString("Messages")].isNull() && m_messages_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIOutboundSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutboundSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("Messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIOutboundMessageDetail> OAIOutboundSearchResponse::getMessages() const {
    return m_messages;
}
void OAIOutboundSearchResponse::setMessages(const QList<OAIOutboundMessageDetail> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIOutboundSearchResponse::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIOutboundSearchResponse::is_messages_Valid() const{
    return m_messages_isValid;
}

qint32 OAIOutboundSearchResponse::getTotalCount() const {
    return m_total_count;
}
void OAIOutboundSearchResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIOutboundSearchResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIOutboundSearchResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIOutboundSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutboundSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
