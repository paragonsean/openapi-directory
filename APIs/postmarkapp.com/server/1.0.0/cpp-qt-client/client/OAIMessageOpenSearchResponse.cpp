/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageOpenSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageOpenSearchResponse::OAIMessageOpenSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageOpenSearchResponse::OAIMessageOpenSearchResponse() {
    this->initializeModel();
}

OAIMessageOpenSearchResponse::~OAIMessageOpenSearchResponse() {}

void OAIMessageOpenSearchResponse::initializeModel() {

    m_opens_isSet = false;
    m_opens_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIMessageOpenSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageOpenSearchResponse::fromJsonObject(QJsonObject json) {

    m_opens_isValid = ::OpenAPI::fromJsonValue(m_opens, json[QString("Opens")]);
    m_opens_isSet = !json[QString("Opens")].isNull() && m_opens_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIMessageOpenSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageOpenSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_opens.size() > 0) {
        obj.insert(QString("Opens"), ::OpenAPI::toJsonValue(m_opens));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIExtendedMessageOpenEventInformation> OAIMessageOpenSearchResponse::getOpens() const {
    return m_opens;
}
void OAIMessageOpenSearchResponse::setOpens(const QList<OAIExtendedMessageOpenEventInformation> &opens) {
    m_opens = opens;
    m_opens_isSet = true;
}

bool OAIMessageOpenSearchResponse::is_opens_Set() const{
    return m_opens_isSet;
}

bool OAIMessageOpenSearchResponse::is_opens_Valid() const{
    return m_opens_isValid;
}

qint32 OAIMessageOpenSearchResponse::getTotalCount() const {
    return m_total_count;
}
void OAIMessageOpenSearchResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIMessageOpenSearchResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIMessageOpenSearchResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIMessageOpenSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageOpenSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
