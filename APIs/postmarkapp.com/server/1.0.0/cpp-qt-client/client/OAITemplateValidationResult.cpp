/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateValidationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateValidationResult::OAITemplateValidationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateValidationResult::OAITemplateValidationResult() {
    this->initializeModel();
}

OAITemplateValidationResult::~OAITemplateValidationResult() {}

void OAITemplateValidationResult::initializeModel() {

    m_content_is_valid_isSet = false;
    m_content_is_valid_isValid = false;

    m_rendered_content_isSet = false;
    m_rendered_content_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;
}

void OAITemplateValidationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateValidationResult::fromJsonObject(QJsonObject json) {

    m_content_is_valid_isValid = ::OpenAPI::fromJsonValue(m_content_is_valid, json[QString("ContentIsValid")]);
    m_content_is_valid_isSet = !json[QString("ContentIsValid")].isNull() && m_content_is_valid_isValid;

    m_rendered_content_isValid = ::OpenAPI::fromJsonValue(m_rendered_content, json[QString("RenderedContent")]);
    m_rendered_content_isSet = !json[QString("RenderedContent")].isNull() && m_rendered_content_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("ValidationErrors")]);
    m_validation_errors_isSet = !json[QString("ValidationErrors")].isNull() && m_validation_errors_isValid;
}

QString OAITemplateValidationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateValidationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_content_is_valid_isSet) {
        obj.insert(QString("ContentIsValid"), ::OpenAPI::toJsonValue(m_content_is_valid));
    }
    if (m_rendered_content_isSet) {
        obj.insert(QString("RenderedContent"), ::OpenAPI::toJsonValue(m_rendered_content));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("ValidationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    return obj;
}

bool OAITemplateValidationResult::isContentIsValid() const {
    return m_content_is_valid;
}
void OAITemplateValidationResult::setContentIsValid(const bool &content_is_valid) {
    m_content_is_valid = content_is_valid;
    m_content_is_valid_isSet = true;
}

bool OAITemplateValidationResult::is_content_is_valid_Set() const{
    return m_content_is_valid_isSet;
}

bool OAITemplateValidationResult::is_content_is_valid_Valid() const{
    return m_content_is_valid_isValid;
}

QString OAITemplateValidationResult::getRenderedContent() const {
    return m_rendered_content;
}
void OAITemplateValidationResult::setRenderedContent(const QString &rendered_content) {
    m_rendered_content = rendered_content;
    m_rendered_content_isSet = true;
}

bool OAITemplateValidationResult::is_rendered_content_Set() const{
    return m_rendered_content_isSet;
}

bool OAITemplateValidationResult::is_rendered_content_Valid() const{
    return m_rendered_content_isValid;
}

QList<OAITemplateValidationError> OAITemplateValidationResult::getValidationErrors() const {
    return m_validation_errors;
}
void OAITemplateValidationResult::setValidationErrors(const QList<OAITemplateValidationError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAITemplateValidationResult::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAITemplateValidationResult::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

bool OAITemplateValidationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateValidationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
