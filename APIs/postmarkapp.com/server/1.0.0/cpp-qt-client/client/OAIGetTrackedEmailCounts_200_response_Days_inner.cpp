/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTrackedEmailCounts_200_response_Days_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTrackedEmailCounts_200_response_Days_inner::OAIGetTrackedEmailCounts_200_response_Days_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTrackedEmailCounts_200_response_Days_inner::OAIGetTrackedEmailCounts_200_response_Days_inner() {
    this->initializeModel();
}

OAIGetTrackedEmailCounts_200_response_Days_inner::~OAIGetTrackedEmailCounts_200_response_Days_inner() {}

void OAIGetTrackedEmailCounts_200_response_Days_inner::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_tracked_isSet = false;
    m_tracked_isValid = false;
}

void OAIGetTrackedEmailCounts_200_response_Days_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTrackedEmailCounts_200_response_Days_inner::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_tracked_isValid = ::OpenAPI::fromJsonValue(m_tracked, json[QString("Tracked")]);
    m_tracked_isSet = !json[QString("Tracked")].isNull() && m_tracked_isValid;
}

QString OAIGetTrackedEmailCounts_200_response_Days_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTrackedEmailCounts_200_response_Days_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_tracked_isSet) {
        obj.insert(QString("Tracked"), ::OpenAPI::toJsonValue(m_tracked));
    }
    return obj;
}

QString OAIGetTrackedEmailCounts_200_response_Days_inner::getDate() const {
    return m_date;
}
void OAIGetTrackedEmailCounts_200_response_Days_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIGetTrackedEmailCounts_200_response_Days_inner::getTracked() const {
    return m_tracked;
}
void OAIGetTrackedEmailCounts_200_response_Days_inner::setTracked(const qint32 &tracked) {
    m_tracked = tracked;
    m_tracked_isSet = true;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::is_tracked_Set() const{
    return m_tracked_isSet;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::is_tracked_Valid() const{
    return m_tracked_isValid;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTrackedEmailCounts_200_response_Days_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
