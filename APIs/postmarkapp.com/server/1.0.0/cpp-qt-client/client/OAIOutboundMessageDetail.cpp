/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutboundMessageDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutboundMessageDetail::OAIOutboundMessageDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutboundMessageDetail::OAIOutboundMessageDetail() {
    this->initializeModel();
}

OAIOutboundMessageDetail::~OAIOutboundMessageDetail() {}

void OAIOutboundMessageDetail::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_bcc_isSet = false;
    m_bcc_isValid = false;

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_track_links_isSet = false;
    m_track_links_isValid = false;

    m_track_opens_isSet = false;
    m_track_opens_isValid = false;
}

void OAIOutboundMessageDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutboundMessageDetail::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_bcc_isValid = ::OpenAPI::fromJsonValue(m_bcc, json[QString("Bcc")]);
    m_bcc_isSet = !json[QString("Bcc")].isNull() && m_bcc_isValid;

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("Cc")]);
    m_cc_isSet = !json[QString("Cc")].isNull() && m_cc_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageID")]);
    m_message_id_isSet = !json[QString("MessageID")].isNull() && m_message_id_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("ReceivedAt")]);
    m_received_at_isSet = !json[QString("ReceivedAt")].isNull() && m_received_at_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("Recipients")]);
    m_recipients_isSet = !json[QString("Recipients")].isNull() && m_recipients_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("To")]);
    m_to_isSet = !json[QString("To")].isNull() && m_to_isValid;

    m_track_links_isValid = ::OpenAPI::fromJsonValue(m_track_links, json[QString("TrackLinks")]);
    m_track_links_isSet = !json[QString("TrackLinks")].isNull() && m_track_links_isValid;

    m_track_opens_isValid = ::OpenAPI::fromJsonValue(m_track_opens, json[QString("TrackOpens")]);
    m_track_opens_isSet = !json[QString("TrackOpens")].isNull() && m_track_opens_isValid;
}

QString OAIOutboundMessageDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutboundMessageDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_bcc.size() > 0) {
        obj.insert(QString("Bcc"), ::OpenAPI::toJsonValue(m_bcc));
    }
    if (m_cc.size() > 0) {
        obj.insert(QString("Cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageID"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("ReceivedAt"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("Recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("To"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_track_links_isSet) {
        obj.insert(QString("TrackLinks"), ::OpenAPI::toJsonValue(m_track_links));
    }
    if (m_track_opens_isSet) {
        obj.insert(QString("TrackOpens"), ::OpenAPI::toJsonValue(m_track_opens));
    }
    return obj;
}

QList<OAIAttachment> OAIOutboundMessageDetail::getAttachments() const {
    return m_attachments;
}
void OAIOutboundMessageDetail::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIOutboundMessageDetail::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIOutboundMessageDetail::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<OAIEmailNameAddressPair> OAIOutboundMessageDetail::getBcc() const {
    return m_bcc;
}
void OAIOutboundMessageDetail::setBcc(const QList<OAIEmailNameAddressPair> &bcc) {
    m_bcc = bcc;
    m_bcc_isSet = true;
}

bool OAIOutboundMessageDetail::is_bcc_Set() const{
    return m_bcc_isSet;
}

bool OAIOutboundMessageDetail::is_bcc_Valid() const{
    return m_bcc_isValid;
}

QList<OAIEmailNameAddressPair> OAIOutboundMessageDetail::getCc() const {
    return m_cc;
}
void OAIOutboundMessageDetail::setCc(const QList<OAIEmailNameAddressPair> &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIOutboundMessageDetail::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIOutboundMessageDetail::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAIOutboundMessageDetail::getFrom() const {
    return m_from;
}
void OAIOutboundMessageDetail::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIOutboundMessageDetail::is_from_Set() const{
    return m_from_isSet;
}

bool OAIOutboundMessageDetail::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIOutboundMessageDetail::getMessageId() const {
    return m_message_id;
}
void OAIOutboundMessageDetail::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIOutboundMessageDetail::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIOutboundMessageDetail::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QDateTime OAIOutboundMessageDetail::getReceivedAt() const {
    return m_received_at;
}
void OAIOutboundMessageDetail::setReceivedAt(const QDateTime &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIOutboundMessageDetail::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIOutboundMessageDetail::is_received_at_Valid() const{
    return m_received_at_isValid;
}

QList<QString> OAIOutboundMessageDetail::getRecipients() const {
    return m_recipients;
}
void OAIOutboundMessageDetail::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIOutboundMessageDetail::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIOutboundMessageDetail::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIOutboundMessageDetail::getStatus() const {
    return m_status;
}
void OAIOutboundMessageDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOutboundMessageDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOutboundMessageDetail::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOutboundMessageDetail::getSubject() const {
    return m_subject;
}
void OAIOutboundMessageDetail::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIOutboundMessageDetail::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIOutboundMessageDetail::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIOutboundMessageDetail::getTag() const {
    return m_tag;
}
void OAIOutboundMessageDetail::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIOutboundMessageDetail::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIOutboundMessageDetail::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<OAIEmailNameAddressPair> OAIOutboundMessageDetail::getTo() const {
    return m_to;
}
void OAIOutboundMessageDetail::setTo(const QList<OAIEmailNameAddressPair> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIOutboundMessageDetail::is_to_Set() const{
    return m_to_isSet;
}

bool OAIOutboundMessageDetail::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIOutboundMessageDetail::getTrackLinks() const {
    return m_track_links;
}
void OAIOutboundMessageDetail::setTrackLinks(const QString &track_links) {
    m_track_links = track_links;
    m_track_links_isSet = true;
}

bool OAIOutboundMessageDetail::is_track_links_Set() const{
    return m_track_links_isSet;
}

bool OAIOutboundMessageDetail::is_track_links_Valid() const{
    return m_track_links_isValid;
}

bool OAIOutboundMessageDetail::isTrackOpens() const {
    return m_track_opens;
}
void OAIOutboundMessageDetail::setTrackOpens(const bool &track_opens) {
    m_track_opens = track_opens;
    m_track_opens_isSet = true;
}

bool OAIOutboundMessageDetail::is_track_opens_Set() const{
    return m_track_opens_isSet;
}

bool OAIOutboundMessageDetail::is_track_opens_Valid() const{
    return m_track_opens_isValid;
}

bool OAIOutboundMessageDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_opens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutboundMessageDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
