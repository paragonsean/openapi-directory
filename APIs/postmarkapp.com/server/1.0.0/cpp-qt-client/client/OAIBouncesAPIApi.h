/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBouncesAPIApi_H
#define OAI_OAIBouncesAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBounceActivationResponse.h"
#include "OAIBounceDumpResponse.h"
#include "OAIBounceInfoResponse.h"
#include "OAIBounceSearchResponse.h"
#include "OAIDeliveryStatsResponse.h"
#include "OAIStandardPostmarkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBouncesAPIApi : public QObject {
    Q_OBJECT

public:
    OAIBouncesAPIApi(const int timeOut = 0);
    ~OAIBouncesAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  bounceid qint64 [required]
    */
    virtual void activateBounce(const QString &x_postmark_server_token, const qint64 &bounceid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  bounceid qint64 [required]
    */
    virtual void bouncesBounceidDumpGet(const QString &x_postmark_server_token, const qint64 &bounceid);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  type QString [optional]
    * @param[in]  inactive bool [optional]
    * @param[in]  email_filter QString [optional]
    * @param[in]  message_id QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  todate QDate [optional]
    * @param[in]  fromdate QDate [optional]
    */
    virtual void getBounces(const QString &x_postmark_server_token, const qint32 &count, const qint32 &offset, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &inactive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &todate = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &fromdate = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  x_postmark_server_token QString [required]
    */
    virtual void getDeliveryStats(const QString &x_postmark_server_token);

    /**
    * @param[in]  x_postmark_server_token QString [required]
    * @param[in]  bounceid qint64 [required]
    */
    virtual void getSingleBounce(const QString &x_postmark_server_token, const qint64 &bounceid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateBounceCallback(OAIHttpRequestWorker *worker);
    void bouncesBounceidDumpGetCallback(OAIHttpRequestWorker *worker);
    void getBouncesCallback(OAIHttpRequestWorker *worker);
    void getDeliveryStatsCallback(OAIHttpRequestWorker *worker);
    void getSingleBounceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateBounceSignal(OAIBounceActivationResponse summary);
    void bouncesBounceidDumpGetSignal(OAIBounceDumpResponse summary);
    void getBouncesSignal(OAIBounceSearchResponse summary);
    void getDeliveryStatsSignal(OAIDeliveryStatsResponse summary);
    void getSingleBounceSignal(OAIBounceInfoResponse summary);


    void activateBounceSignalFull(OAIHttpRequestWorker *worker, OAIBounceActivationResponse summary);
    void bouncesBounceidDumpGetSignalFull(OAIHttpRequestWorker *worker, OAIBounceDumpResponse summary);
    void getBouncesSignalFull(OAIHttpRequestWorker *worker, OAIBounceSearchResponse summary);
    void getDeliveryStatsSignalFull(OAIHttpRequestWorker *worker, OAIDeliveryStatsResponse summary);
    void getSingleBounceSignalFull(OAIHttpRequestWorker *worker, OAIBounceInfoResponse summary);

    Q_DECL_DEPRECATED_X("Use activateBounceSignalError() instead")
    void activateBounceSignalE(OAIBounceActivationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activateBounceSignalError(OAIBounceActivationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bouncesBounceidDumpGetSignalError() instead")
    void bouncesBounceidDumpGetSignalE(OAIBounceDumpResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bouncesBounceidDumpGetSignalError(OAIBounceDumpResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBouncesSignalError() instead")
    void getBouncesSignalE(OAIBounceSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBouncesSignalError(OAIBounceSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveryStatsSignalError() instead")
    void getDeliveryStatsSignalE(OAIDeliveryStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveryStatsSignalError(OAIDeliveryStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleBounceSignalError() instead")
    void getSingleBounceSignalE(OAIBounceInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleBounceSignalError(OAIBounceInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateBounceSignalErrorFull() instead")
    void activateBounceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateBounceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bouncesBounceidDumpGetSignalErrorFull() instead")
    void bouncesBounceidDumpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bouncesBounceidDumpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBouncesSignalErrorFull() instead")
    void getBouncesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBouncesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveryStatsSignalErrorFull() instead")
    void getDeliveryStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveryStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleBounceSignalErrorFull() instead")
    void getSingleBounceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleBounceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
