/**
 * Postmark API
 * Postmark makes sending and receiving email incredibly easy. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedMessageOpenEventInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedMessageOpenEventInformation::OAIExtendedMessageOpenEventInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedMessageOpenEventInformation::OAIExtendedMessageOpenEventInformation() {
    this->initializeModel();
}

OAIExtendedMessageOpenEventInformation::~OAIExtendedMessageOpenEventInformation() {}

void OAIExtendedMessageOpenEventInformation::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_first_open_isSet = false;
    m_first_open_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIExtendedMessageOpenEventInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedMessageOpenEventInformation::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("Client")]);
    m_client_isSet = !json[QString("Client")].isNull() && m_client_isValid;

    m_first_open_isValid = ::OpenAPI::fromJsonValue(m_first_open, json[QString("FirstOpen")]);
    m_first_open_isSet = !json[QString("FirstOpen")].isNull() && m_first_open_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("Geo")]);
    m_geo_isSet = !json[QString("Geo")].isNull() && m_geo_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageID")]);
    m_message_id_isSet = !json[QString("MessageID")].isNull() && m_message_id_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("OS")]);
    m_os_isSet = !json[QString("OS")].isNull() && m_os_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("ReceivedAt")]);
    m_received_at_isSet = !json[QString("ReceivedAt")].isNull() && m_received_at_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("Recipient")]);
    m_recipient_isSet = !json[QString("Recipient")].isNull() && m_recipient_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("Tag")]);
    m_tag_isSet = !json[QString("Tag")].isNull() && m_tag_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("UserAgent")]);
    m_user_agent_isSet = !json[QString("UserAgent")].isNull() && m_user_agent_isValid;
}

QString OAIExtendedMessageOpenEventInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedMessageOpenEventInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_client.isSet()) {
        obj.insert(QString("Client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_first_open_isSet) {
        obj.insert(QString("FirstOpen"), ::OpenAPI::toJsonValue(m_first_open));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("Geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("MessageID"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_os.isSet()) {
        obj.insert(QString("OS"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_platform_isSet) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("ReceivedAt"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("Recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_tag_isSet) {
        obj.insert(QString("Tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("UserAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

OAIExtendedMessageClickEventInformation_Client OAIExtendedMessageOpenEventInformation::getClient() const {
    return m_client;
}
void OAIExtendedMessageOpenEventInformation::setClient(const OAIExtendedMessageClickEventInformation_Client &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_client_Set() const{
    return m_client_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_client_Valid() const{
    return m_client_isValid;
}

bool OAIExtendedMessageOpenEventInformation::isFirstOpen() const {
    return m_first_open;
}
void OAIExtendedMessageOpenEventInformation::setFirstOpen(const bool &first_open) {
    m_first_open = first_open;
    m_first_open_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_first_open_Set() const{
    return m_first_open_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_first_open_Valid() const{
    return m_first_open_isValid;
}

OAIExtendedMessageClickEventInformation_Geo OAIExtendedMessageOpenEventInformation::getGeo() const {
    return m_geo;
}
void OAIExtendedMessageOpenEventInformation::setGeo(const OAIExtendedMessageClickEventInformation_Geo &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_geo_Valid() const{
    return m_geo_isValid;
}

QString OAIExtendedMessageOpenEventInformation::getMessageId() const {
    return m_message_id;
}
void OAIExtendedMessageOpenEventInformation::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_message_id_Valid() const{
    return m_message_id_isValid;
}

OAIExtendedMessageClickEventInformation_OS OAIExtendedMessageOpenEventInformation::getOs() const {
    return m_os;
}
void OAIExtendedMessageOpenEventInformation::setOs(const OAIExtendedMessageClickEventInformation_OS &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_os_Set() const{
    return m_os_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIExtendedMessageOpenEventInformation::getPlatform() const {
    return m_platform;
}
void OAIExtendedMessageOpenEventInformation::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_platform_Valid() const{
    return m_platform_isValid;
}

QDateTime OAIExtendedMessageOpenEventInformation::getReceivedAt() const {
    return m_received_at;
}
void OAIExtendedMessageOpenEventInformation::setReceivedAt(const QDateTime &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_received_at_Valid() const{
    return m_received_at_isValid;
}

QString OAIExtendedMessageOpenEventInformation::getRecipient() const {
    return m_recipient;
}
void OAIExtendedMessageOpenEventInformation::setRecipient(const QString &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIExtendedMessageOpenEventInformation::getTag() const {
    return m_tag;
}
void OAIExtendedMessageOpenEventInformation::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIExtendedMessageOpenEventInformation::getUserAgent() const {
    return m_user_agent;
}
void OAIExtendedMessageOpenEventInformation::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIExtendedMessageOpenEventInformation::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIExtendedMessageOpenEventInformation::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIExtendedMessageOpenEventInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedMessageOpenEventInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
