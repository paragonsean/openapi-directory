/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.SystemAPIApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SystemAPIApi', function() {
    describe('idDeleteAdapterConfig', function() {
      it('should call idDeleteAdapterConfig successfully', function(done) {
        //uncomment below and update the code to test idDeleteAdapterConfig
        //instance.idDeleteAdapterConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idDeleteK8SConfig', function() {
      it('should call idDeleteK8SConfig successfully', function(done) {
        //uncomment below and update the code to test idDeleteK8SConfig
        //instance.idDeleteK8SConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idGetKubernetesPing', function() {
      it('should call idGetKubernetesPing successfully', function(done) {
        //uncomment below and update the code to test idGetKubernetesPing
        //instance.idGetKubernetesPing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idGetSystemAdapters', function() {
      it('should call idGetSystemAdapters successfully', function(done) {
        //uncomment below and update the code to test idGetSystemAdapters
        //instance.idGetSystemAdapters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idGetSystemVersion', function() {
      it('should call idGetSystemVersion successfully', function(done) {
        //uncomment below and update the code to test idGetSystemVersion
        //instance.idGetSystemVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idMeshSyncGrafana', function() {
      it('should call idMeshSyncGrafana successfully', function(done) {
        //uncomment below and update the code to test idMeshSyncGrafana
        //instance.idMeshSyncGrafana(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idMeshSyncPrometheus', function() {
      it('should call idMeshSyncPrometheus successfully', function(done) {
        //uncomment below and update the code to test idMeshSyncPrometheus
        //instance.idMeshSyncPrometheus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idPostAdapterConfig', function() {
      it('should call idPostAdapterConfig successfully', function(done) {
        //uncomment below and update the code to test idPostAdapterConfig
        //instance.idPostAdapterConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idPostAdapterOperation', function() {
      it('should call idPostAdapterOperation successfully', function(done) {
        //uncomment below and update the code to test idPostAdapterOperation
        //instance.idPostAdapterOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idPostK8SConfig', function() {
      it('should call idPostK8SConfig successfully', function(done) {
        //uncomment below and update the code to test idPostK8SConfig
        //instance.idPostK8SConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idPostK8SContexts', function() {
      it('should call idPostK8SContexts successfully', function(done) {
        //uncomment below and update the code to test idPostK8SContexts
        //instance.idPostK8SContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idSystemSync', function() {
      it('should call idSystemSync successfully', function(done) {
        //uncomment below and update the code to test idSystemSync
        //instance.idSystemSync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
