/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Legend();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Legend', function() {
    it('should create an instance of Legend', function() {
      // uncomment below and update the code to test Legend
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be.a(MesheryApi.Legend);
    });

    it('should have the property alignAsTable (base name: "alignAsTable")', function() {
      // uncomment below and update the code to test the property alignAsTable
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property avg (base name: "avg")', function() {
      // uncomment below and update the code to test the property avg
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property current (base name: "current")', function() {
      // uncomment below and update the code to test the property current
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property hideEmpty (base name: "hideEmpty")', function() {
      // uncomment below and update the code to test the property hideEmpty
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property hideZero (base name: "hideZero")', function() {
      // uncomment below and update the code to test the property hideZero
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property min (base name: "min")', function() {
      // uncomment below and update the code to test the property min
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property rightSide (base name: "rightSide")', function() {
      // uncomment below and update the code to test the property rightSide
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property show (base name: "show")', function() {
      // uncomment below and update the code to test the property show
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property sideWidth (base name: "sideWidth")', function() {
      // uncomment below and update the code to test the property sideWidth
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

    it('should have the property values (base name: "values")', function() {
      // uncomment below and update the code to test the property values
      //var instance = new MesheryApi.Legend();
      //expect(instance).to.be();
    });

  });

}));
