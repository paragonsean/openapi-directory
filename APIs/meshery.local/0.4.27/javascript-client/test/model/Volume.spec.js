/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Volume();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Volume', function() {
    it('should create an instance of Volume', function() {
      // uncomment below and update the code to test Volume
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be.a(MesheryApi.Volume);
    });

    it('should have the property createdAt (base name: "CreatedAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property driver (base name: "Driver")', function() {
      // uncomment below and update the code to test the property driver
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "Labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property mountpoint (base name: "Mountpoint")', function() {
      // uncomment below and update the code to test the property mountpoint
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "Options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "Scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

    it('should have the property usageData (base name: "UsageData")', function() {
      // uncomment below and update the code to test the property usageData
      //var instance = new MesheryApi.Volume();
      //expect(instance).to.be();
    });

  });

}));
