/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Panel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Panel', function() {
    it('should create an instance of Panel', function() {
      // uncomment below and update the code to test Panel
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be.a(MesheryApi.Panel);
    });

    it('should have the property alert (base name: "alert")', function() {
      // uncomment below and update the code to test the property alert
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property aliasColors (base name: "aliasColors")', function() {
      // uncomment below and update the code to test the property aliasColors
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property bars (base name: "bars")', function() {
      // uncomment below and update the code to test the property bars
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property cards (base name: "cards")', function() {
      // uncomment below and update the code to test the property cards
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property collapsed (base name: "collapsed")', function() {
      // uncomment below and update the code to test the property collapsed
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property colorBackground (base name: "colorBackground")', function() {
      // uncomment below and update the code to test the property colorBackground
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property colorValue (base name: "colorValue")', function() {
      // uncomment below and update the code to test the property colorValue
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property colors (base name: "colors")', function() {
      // uncomment below and update the code to test the property colors
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property columns (base name: "columns")', function() {
      // uncomment below and update the code to test the property columns
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property dashLength (base name: "dashLength")', function() {
      // uncomment below and update the code to test the property dashLength
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property dashboardTags (base name: "dashboardTags")', function() {
      // uncomment below and update the code to test the property dashboardTags
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property dashes (base name: "dashes")', function() {
      // uncomment below and update the code to test the property dashes
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property dataFormat (base name: "dataFormat")', function() {
      // uncomment below and update the code to test the property dataFormat
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property datasource (base name: "datasource")', function() {
      // uncomment below and update the code to test the property datasource
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property decimals (base name: "decimals")', function() {
      // uncomment below and update the code to test the property decimals
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property fieldConfig (base name: "fieldConfig")', function() {
      // uncomment below and update the code to test the property fieldConfig
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property fill (base name: "fill")', function() {
      // uncomment below and update the code to test the property fill
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property folderId (base name: "folderId")', function() {
      // uncomment below and update the code to test the property folderId
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "format")', function() {
      // uncomment below and update the code to test the property format
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property gauge (base name: "gauge")', function() {
      // uncomment below and update the code to test the property gauge
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property gridPos (base name: "gridPos")', function() {
      // uncomment below and update the code to test the property gridPos
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property headings (base name: "headings")', function() {
      // uncomment below and update the code to test the property headings
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property hideTimeOverride (base name: "hideTimeOverride")', function() {
      // uncomment below and update the code to test the property hideTimeOverride
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property hideZeroBuckets (base name: "hideZeroBuckets")', function() {
      // uncomment below and update the code to test the property hideZeroBuckets
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property highlightCards (base name: "highlightCards")', function() {
      // uncomment below and update the code to test the property highlightCards
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property isNew (base name: "isNew")', function() {
      // uncomment below and update the code to test the property isNew
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property leftYAxisLabel (base name: "leftYAxisLabel")', function() {
      // uncomment below and update the code to test the property leftYAxisLabel
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property legend (base name: "legend")', function() {
      // uncomment below and update the code to test the property legend
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property lines (base name: "lines")', function() {
      // uncomment below and update the code to test the property lines
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property linewidth (base name: "linewidth")', function() {
      // uncomment below and update the code to test the property linewidth
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property mappingType (base name: "mappingType")', function() {
      // uncomment below and update the code to test the property mappingType
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property mappingTypes (base name: "mappingTypes")', function() {
      // uncomment below and update the code to test the property mappingTypes
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property maxDataPoints (base name: "maxDataPoints")', function() {
      // uncomment below and update the code to test the property maxDataPoints
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property minSpan (base name: "minSpan")', function() {
      // uncomment below and update the code to test the property minSpan
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property nameFilter (base name: "nameFilter")', function() {
      // uncomment below and update the code to test the property nameFilter
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property nullPointMode (base name: "nullPointMode")', function() {
      // uncomment below and update the code to test the property nullPointMode
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property onlyAlertsOnDashboard (base name: "onlyAlertsOnDashboard")', function() {
      // uncomment below and update the code to test the property onlyAlertsOnDashboard
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "pageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property panels (base name: "panels")', function() {
      // uncomment below and update the code to test the property panels
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property percentage (base name: "percentage")', function() {
      // uncomment below and update the code to test the property percentage
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property pointradius (base name: "pointradius")', function() {
      // uncomment below and update the code to test the property pointradius
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property postfix (base name: "postfix")', function() {
      // uncomment below and update the code to test the property postfix
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property postfixFontSize (base name: "postfixFontSize")', function() {
      // uncomment below and update the code to test the property postfixFontSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property prefixFontSize (base name: "prefixFontSize")', function() {
      // uncomment below and update the code to test the property prefixFontSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property rangeMaps (base name: "rangeMaps")', function() {
      // uncomment below and update the code to test the property rangeMaps
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property recent (base name: "recent")', function() {
      // uncomment below and update the code to test the property recent
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property renderer (base name: "renderer")', function() {
      // uncomment below and update the code to test the property renderer
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property repeat (base name: "repeat")', function() {
      // uncomment below and update the code to test the property repeat
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property repeatPanelId (base name: "repeatPanelId")', function() {
      // uncomment below and update the code to test the property repeatPanelId
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property reverseYBuckets (base name: "reverseYBuckets")', function() {
      // uncomment below and update the code to test the property reverseYBuckets
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property rightYAxisLabel (base name: "rightYAxisLabel")', function() {
      // uncomment below and update the code to test the property rightYAxisLabel
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property scopedVars (base name: "scopedVars")', function() {
      // uncomment below and update the code to test the property scopedVars
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property scroll (base name: "scroll")', function() {
      // uncomment below and update the code to test the property scroll
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property search (base name: "search")', function() {
      // uncomment below and update the code to test the property search
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property seriesOverrides (base name: "seriesOverrides")', function() {
      // uncomment below and update the code to test the property seriesOverrides
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property show (base name: "show")', function() {
      // uncomment below and update the code to test the property show
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property showHeader (base name: "showHeader")', function() {
      // uncomment below and update the code to test the property showHeader
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property sort (base name: "sort")', function() {
      // uncomment below and update the code to test the property sort
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sortOrder")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property spaceLength (base name: "spaceLength")', function() {
      // uncomment below and update the code to test the property spaceLength
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property span (base name: "span")', function() {
      // uncomment below and update the code to test the property span
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property sparkline (base name: "sparkline")', function() {
      // uncomment below and update the code to test the property sparkline
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property stack (base name: "stack")', function() {
      // uncomment below and update the code to test the property stack
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property starred (base name: "starred")', function() {
      // uncomment below and update the code to test the property starred
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property stateFilter (base name: "stateFilter")', function() {
      // uncomment below and update the code to test the property stateFilter
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property steppedLine (base name: "steppedLine")', function() {
      // uncomment below and update the code to test the property steppedLine
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property styles (base name: "styles")', function() {
      // uncomment below and update the code to test the property styles
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property targets (base name: "targets")', function() {
      // uncomment below and update the code to test the property targets
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property thresholds (base name: "thresholds")', function() {
      // uncomment below and update the code to test the property thresholds
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property timeFrom (base name: "timeFrom")', function() {
      // uncomment below and update the code to test the property timeFrom
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property timeShift (base name: "timeShift")', function() {
      // uncomment below and update the code to test the property timeShift
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property tooltip (base name: "tooltip")', function() {
      // uncomment below and update the code to test the property tooltip
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property tooltipDecimals (base name: "tooltipDecimals")', function() {
      // uncomment below and update the code to test the property tooltipDecimals
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property transform (base name: "transform")', function() {
      // uncomment below and update the code to test the property transform
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property transparent (base name: "transparent")', function() {
      // uncomment below and update the code to test the property transparent
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property valueFontSize (base name: "valueFontSize")', function() {
      // uncomment below and update the code to test the property valueFontSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property valueMaps (base name: "valueMaps")', function() {
      // uncomment below and update the code to test the property valueMaps
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property valueName (base name: "valueName")', function() {
      // uncomment below and update the code to test the property valueName
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property xAxis (base name: "x-axis")', function() {
      // uncomment below and update the code to test the property xAxis
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property xAxis (base name: "xAxis")', function() {
      // uncomment below and update the code to test the property xAxis
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property xBucketNumber (base name: "xBucketNumber")', function() {
      // uncomment below and update the code to test the property xBucketNumber
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property xBucketSize (base name: "xBucketSize")', function() {
      // uncomment below and update the code to test the property xBucketSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property xaxis (base name: "xaxis")', function() {
      // uncomment below and update the code to test the property xaxis
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yAxis (base name: "y-axis")', function() {
      // uncomment below and update the code to test the property yAxis
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yAxis (base name: "yAxis")', function() {
      // uncomment below and update the code to test the property yAxis
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yBucketBound (base name: "yBucketBound")', function() {
      // uncomment below and update the code to test the property yBucketBound
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yBucketNumber (base name: "yBucketNumber")', function() {
      // uncomment below and update the code to test the property yBucketNumber
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yBucketSize (base name: "yBucketSize")', function() {
      // uncomment below and update the code to test the property yBucketSize
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yFormats (base name: "y_formats")', function() {
      // uncomment below and update the code to test the property yFormats
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

    it('should have the property yaxes (base name: "yaxes")', function() {
      // uncomment below and update the code to test the property yaxes
      //var instance = new MesheryApi.Panel();
      //expect(instance).to.be();
    });

  });

}));
