/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.K8SNode();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('K8SNode', function() {
    it('should create an instance of K8SNode', function() {
      // uncomment below and update the code to test K8SNode
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be.a(MesheryApi.K8SNode);
    });

    it('should have the property allocatableCpu (base name: "allocatable_cpu")', function() {
      // uncomment below and update the code to test the property allocatableCpu
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property allocatableMemory (base name: "allocatable_memory")', function() {
      // uncomment below and update the code to test the property allocatableMemory
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property architecture (base name: "architecture")', function() {
      // uncomment below and update the code to test the property architecture
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property capacityCpu (base name: "capacity_cpu")', function() {
      // uncomment below and update the code to test the property capacityCpu
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property capacityMemory (base name: "capacity_memory")', function() {
      // uncomment below and update the code to test the property capacityMemory
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property containerRuntimeVersion (base name: "container_runtime_version")', function() {
      // uncomment below and update the code to test the property containerRuntimeVersion
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "internal_ip")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property kubeletVersion (base name: "kubelet_version")', function() {
      // uncomment below and update the code to test the property kubeletVersion
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property kubeproxyVersion (base name: "kubeproxy_version")', function() {
      // uncomment below and update the code to test the property kubeproxyVersion
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "operating_system")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

    it('should have the property osImage (base name: "os_image")', function() {
      // uncomment below and update the code to test the property osImage
      //var instance = new MesheryApi.K8SNode();
      //expect(instance).to.be();
    });

  });

}));
