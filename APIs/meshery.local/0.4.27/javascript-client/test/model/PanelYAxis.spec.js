/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.PanelYAxis();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PanelYAxis', function() {
    it('should create an instance of PanelYAxis', function() {
      // uncomment below and update the code to test PanelYAxis
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be.a(MesheryApi.PanelYAxis);
    });

    it('should have the property decimals (base name: "decimals")', function() {
      // uncomment below and update the code to test the property decimals
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "format")', function() {
      // uncomment below and update the code to test the property format
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property logBase (base name: "logBase")', function() {
      // uncomment below and update the code to test the property logBase
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property min (base name: "min")', function() {
      // uncomment below and update the code to test the property min
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property show (base name: "show")', function() {
      // uncomment below and update the code to test the property show
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

    it('should have the property splitFactor (base name: "splitFactor")', function() {
      // uncomment below and update the code to test the property splitFactor
      //var instance = new MesheryApi.PanelYAxis();
      //expect(instance).to.be();
    });

  });

}));
