/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.K8SConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('K8SConfig', function() {
    it('should create an instance of K8SConfig', function() {
      // uncomment below and update the code to test K8SConfig
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be.a(MesheryApi.K8SConfig);
    });

    it('should have the property clusterConfigured (base name: "clusterConfigured")', function() {
      // uncomment below and update the code to test the property clusterConfigured
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property configuredServer (base name: "configuredServer")', function() {
      // uncomment below and update the code to test the property configuredServer
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property contextName (base name: "contextName")', function() {
      // uncomment below and update the code to test the property contextName
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property inClusterConfig (base name: "inClusterConfig")', function() {
      // uncomment below and update the code to test the property inClusterConfig
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property k8sfile (base name: "k8sfile")', function() {
      // uncomment below and update the code to test the property k8sfile
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodes (base name: "nodes")', function() {
      // uncomment below and update the code to test the property nodes
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

    it('should have the property serverVersion (base name: "server_version")', function() {
      // uncomment below and update the code to test the property serverVersion
      //var instance = new MesheryApi.K8SConfig();
      //expect(instance).to.be();
    });

  });

}));
