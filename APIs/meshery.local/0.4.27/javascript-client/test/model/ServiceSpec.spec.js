/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.ServiceSpec();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceSpec', function() {
    it('should create an instance of ServiceSpec', function() {
      // uncomment below and update the code to test ServiceSpec
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be.a(MesheryApi.ServiceSpec);
    });

    it('should have the property clusterIP (base name: "clusterIP")', function() {
      // uncomment below and update the code to test the property clusterIP
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property externalIPs (base name: "externalIPs")', function() {
      // uncomment below and update the code to test the property externalIPs
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property externalName (base name: "externalName")', function() {
      // uncomment below and update the code to test the property externalName
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property externalTrafficPolicy (base name: "externalTrafficPolicy")', function() {
      // uncomment below and update the code to test the property externalTrafficPolicy
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckNodePort (base name: "healthCheckNodePort")', function() {
      // uncomment below and update the code to test the property healthCheckNodePort
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property ipFamily (base name: "ipFamily")', function() {
      // uncomment below and update the code to test the property ipFamily
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerIP (base name: "loadBalancerIP")', function() {
      // uncomment below and update the code to test the property loadBalancerIP
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerSourceRanges (base name: "loadBalancerSourceRanges")', function() {
      // uncomment below and update the code to test the property loadBalancerSourceRanges
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property publishNotReadyAddresses (base name: "publishNotReadyAddresses")', function() {
      // uncomment below and update the code to test the property publishNotReadyAddresses
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property selector (base name: "selector")', function() {
      // uncomment below and update the code to test the property selector
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property sessionAffinity (base name: "sessionAffinity")', function() {
      // uncomment below and update the code to test the property sessionAffinity
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property sessionAffinityConfig (base name: "sessionAffinityConfig")', function() {
      // uncomment below and update the code to test the property sessionAffinityConfig
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property topologyKeys (base name: "topologyKeys")', function() {
      // uncomment below and update the code to test the property topologyKeys
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MesheryApi.ServiceSpec();
      //expect(instance).to.be();
    });

  });

}));
