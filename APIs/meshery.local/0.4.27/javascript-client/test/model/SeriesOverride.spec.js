/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.SeriesOverride();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SeriesOverride', function() {
    it('should create an instance of SeriesOverride', function() {
      // uncomment below and update the code to test SeriesOverride
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be.a(MesheryApi.SeriesOverride);
    });

    it('should have the property alias (base name: "alias")', function() {
      // uncomment below and update the code to test the property alias
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property bars (base name: "bars")', function() {
      // uncomment below and update the code to test the property bars
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property dashes (base name: "dashes")', function() {
      // uncomment below and update the code to test the property dashes
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property fill (base name: "fill")', function() {
      // uncomment below and update the code to test the property fill
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property fillBelowTo (base name: "fillBelowTo")', function() {
      // uncomment below and update the code to test the property fillBelowTo
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property legend (base name: "legend")', function() {
      // uncomment below and update the code to test the property legend
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property lines (base name: "lines")', function() {
      // uncomment below and update the code to test the property lines
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property linewidth (base name: "linewidth")', function() {
      // uncomment below and update the code to test the property linewidth
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property nullPointMode (base name: "nullPointMode")', function() {
      // uncomment below and update the code to test the property nullPointMode
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property stack (base name: "stack")', function() {
      // uncomment below and update the code to test the property stack
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property transform (base name: "transform")', function() {
      // uncomment below and update the code to test the property transform
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property yaxis (base name: "yaxis")', function() {
      // uncomment below and update the code to test the property yaxis
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

    it('should have the property zindex (base name: "zindex")', function() {
      // uncomment below and update the code to test the property zindex
      //var instance = new MesheryApi.SeriesOverride();
      //expect(instance).to.be();
    });

  });

}));
