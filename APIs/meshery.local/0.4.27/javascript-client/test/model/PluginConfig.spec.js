/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.PluginConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PluginConfig', function() {
    it('should create an instance of PluginConfig', function() {
      // uncomment below and update the code to test PluginConfig
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be.a(MesheryApi.PluginConfig);
    });

    it('should have the property args (base name: "Args")', function() {
      // uncomment below and update the code to test the property args
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property dockerVersion (base name: "DockerVersion")', function() {
      // uncomment below and update the code to test the property dockerVersion
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property documentation (base name: "Documentation")', function() {
      // uncomment below and update the code to test the property documentation
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property entrypoint (base name: "Entrypoint")', function() {
      // uncomment below and update the code to test the property entrypoint
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property env (base name: "Env")', function() {
      // uncomment below and update the code to test the property env
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property _interface (base name: "Interface")', function() {
      // uncomment below and update the code to test the property _interface
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property ipcHost (base name: "IpcHost")', function() {
      // uncomment below and update the code to test the property ipcHost
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property linux (base name: "Linux")', function() {
      // uncomment below and update the code to test the property linux
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property mounts (base name: "Mounts")', function() {
      // uncomment below and update the code to test the property mounts
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "Network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property pidHost (base name: "PidHost")', function() {
      // uncomment below and update the code to test the property pidHost
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property propagatedMount (base name: "PropagatedMount")', function() {
      // uncomment below and update the code to test the property propagatedMount
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "User")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property workDir (base name: "WorkDir")', function() {
      // uncomment below and update the code to test the property workDir
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

    it('should have the property rootfs (base name: "rootfs")', function() {
      // uncomment below and update the code to test the property rootfs
      //var instance = new MesheryApi.PluginConfig();
      //expect(instance).to.be();
    });

  });

}));
