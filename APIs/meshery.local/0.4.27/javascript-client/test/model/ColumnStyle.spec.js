/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.ColumnStyle();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ColumnStyle', function() {
    it('should create an instance of ColumnStyle', function() {
      // uncomment below and update the code to test ColumnStyle
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be.a(MesheryApi.ColumnStyle);
    });

    it('should have the property alias (base name: "alias")', function() {
      // uncomment below and update the code to test the property alias
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property colorMode (base name: "colorMode")', function() {
      // uncomment below and update the code to test the property colorMode
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property colors (base name: "colors")', function() {
      // uncomment below and update the code to test the property colors
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property dateFormat (base name: "dateFormat")', function() {
      // uncomment below and update the code to test the property dateFormat
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property decimals (base name: "decimals")', function() {
      // uncomment below and update the code to test the property decimals
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property linkTargetBlank (base name: "linkTargetBlank")', function() {
      // uncomment below and update the code to test the property linkTargetBlank
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property linkTooltip (base name: "linkTooltip")', function() {
      // uncomment below and update the code to test the property linkTooltip
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property linkUrl (base name: "linkUrl")', function() {
      // uncomment below and update the code to test the property linkUrl
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property mappingType (base name: "mappingType")', function() {
      // uncomment below and update the code to test the property mappingType
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property pattern (base name: "pattern")', function() {
      // uncomment below and update the code to test the property pattern
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property thresholds (base name: "thresholds")', function() {
      // uncomment below and update the code to test the property thresholds
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property unit (base name: "unit")', function() {
      // uncomment below and update the code to test the property unit
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

    it('should have the property valueMaps (base name: "valueMaps")', function() {
      // uncomment below and update the code to test the property valueMaps
      //var instance = new MesheryApi.ColumnStyle();
      //expect(instance).to.be();
    });

  });

}));
