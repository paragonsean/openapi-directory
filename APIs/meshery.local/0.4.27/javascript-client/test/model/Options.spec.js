/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Options();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Options', function() {
    it('should create an instance of Options', function() {
      // uncomment below and update the code to test Options
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be.a(MesheryApi.Options);
    });

    it('should have the property colorMode (base name: "colorMode")', function() {
      // uncomment below and update the code to test the property colorMode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property displayMode (base name: "displayMode")', function() {
      // uncomment below and update the code to test the property displayMode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property graphMode (base name: "graphMode")', function() {
      // uncomment below and update the code to test the property graphMode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property justifyMode (base name: "justifyMode")', function() {
      // uncomment below and update the code to test the property justifyMode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property mode (base name: "mode")', function() {
      // uncomment below and update the code to test the property mode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property orientation (base name: "orientation")', function() {
      // uncomment below and update the code to test the property orientation
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property reduceOptions (base name: "reduceOptions")', function() {
      // uncomment below and update the code to test the property reduceOptions
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

    it('should have the property textMode (base name: "textMode")', function() {
      // uncomment below and update the code to test the property textMode
      //var instance = new MesheryApi.Options();
      //expect(instance).to.be();
    });

  });

}));
