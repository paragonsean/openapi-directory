/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Alert();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Alert', function() {
    it('should create an instance of Alert', function() {
      // uncomment below and update the code to test Alert
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be.a(MesheryApi.Alert);
    });

    it('should have the property alertRuleTags (base name: "alertRuleTags")', function() {
      // uncomment below and update the code to test the property alertRuleTags
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property conditions (base name: "conditions")', function() {
      // uncomment below and update the code to test the property conditions
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property executionErrorState (base name: "executionErrorState")', function() {
      // uncomment below and update the code to test the property executionErrorState
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property _for (base name: "for")', function() {
      // uncomment below and update the code to test the property _for
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property frequency (base name: "frequency")', function() {
      // uncomment below and update the code to test the property frequency
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property handler (base name: "handler")', function() {
      // uncomment below and update the code to test the property handler
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property noDataState (base name: "noDataState")', function() {
      // uncomment below and update the code to test the property noDataState
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

    it('should have the property notifications (base name: "notifications")', function() {
      // uncomment below and update the code to test the property notifications
      //var instance = new MesheryApi.Alert();
      //expect(instance).to.be();
    });

  });

}));
