/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MesheryApi);
  }
}(this, function(expect, MesheryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MesheryApi.Version();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Version', function() {
    it('should create an instance of Version', function() {
      // uncomment below and update the code to test Version
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be.a(MesheryApi.Version);
    });

    it('should have the property build (base name: "build")', function() {
      // uncomment below and update the code to test the property build
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be();
    });

    it('should have the property commitsha (base name: "commitsha")', function() {
      // uncomment below and update the code to test the property commitsha
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be();
    });

    it('should have the property latest (base name: "latest")', function() {
      // uncomment below and update the code to test the property latest
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be();
    });

    it('should have the property outdated (base name: "outdated")', function() {
      // uncomment below and update the code to test the property outdated
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be();
    });

    it('should have the property releaseChannel (base name: "release_channel")', function() {
      // uncomment below and update the code to test the property releaseChannel
      //var instance = new MesheryApi.Version();
      //expect(instance).to.be();
    });

  });

}));
