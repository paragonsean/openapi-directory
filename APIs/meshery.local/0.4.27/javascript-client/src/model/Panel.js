/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Alert from './Alert';
import Axis from './Axis';
import Column from './Column';
import ColumnStyle from './ColumnStyle';
import FieldConfig from './FieldConfig';
import Gauge from './Gauge';
import IntString from './IntString';
import Legend from './Legend';
import Link from './Link';
import MapType from './MapType';
import Options from './Options';
import PanelCards from './PanelCards';
import PanelColor from './PanelColor';
import PanelGridPos from './PanelGridPos';
import PanelScopedVarsValue from './PanelScopedVarsValue';
import PanelXAxis from './PanelXAxis';
import PanelYAxis from './PanelYAxis';
import RangeMap from './RangeMap';
import SeriesOverride from './SeriesOverride';
import Sort from './Sort';
import SparkLine from './SparkLine';
import Target from './Target';
import Threshold from './Threshold';
import Tooltip from './Tooltip';
import ValueMap from './ValueMap';

/**
 * The Panel model module.
 * @module model/Panel
 * @version 0.4.27
 */
class Panel {
    /**
     * Constructs a new <code>Panel</code>.
     * @alias module:model/Panel
     */
    constructor() { 
        
        Panel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Panel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Panel} obj Optional instance to populate.
     * @return {module:model/Panel} The populated <code>Panel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Panel();

            if (data.hasOwnProperty('alert')) {
                obj['alert'] = Alert.constructFromObject(data['alert']);
            }
            if (data.hasOwnProperty('aliasColors')) {
                obj['aliasColors'] = ApiClient.convertToType(data['aliasColors'], Object);
            }
            if (data.hasOwnProperty('bars')) {
                obj['bars'] = ApiClient.convertToType(data['bars'], 'Boolean');
            }
            if (data.hasOwnProperty('cards')) {
                obj['cards'] = PanelCards.constructFromObject(data['cards']);
            }
            if (data.hasOwnProperty('collapsed')) {
                obj['collapsed'] = ApiClient.convertToType(data['collapsed'], 'Boolean');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = PanelColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('colorBackground')) {
                obj['colorBackground'] = ApiClient.convertToType(data['colorBackground'], 'Boolean');
            }
            if (data.hasOwnProperty('colorValue')) {
                obj['colorValue'] = ApiClient.convertToType(data['colorValue'], 'Boolean');
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], ['String']);
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [Column]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('dashLength')) {
                obj['dashLength'] = ApiClient.convertToType(data['dashLength'], 'Number');
            }
            if (data.hasOwnProperty('dashboardTags')) {
                obj['dashboardTags'] = ApiClient.convertToType(data['dashboardTags'], ['String']);
            }
            if (data.hasOwnProperty('dashes')) {
                obj['dashes'] = ApiClient.convertToType(data['dashes'], 'Boolean');
            }
            if (data.hasOwnProperty('dataFormat')) {
                obj['dataFormat'] = ApiClient.convertToType(data['dataFormat'], 'String');
            }
            if (data.hasOwnProperty('datasource')) {
                obj['datasource'] = ApiClient.convertToType(data['datasource'], 'String');
            }
            if (data.hasOwnProperty('decimals')) {
                obj['decimals'] = ApiClient.convertToType(data['decimals'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'Boolean');
            }
            if (data.hasOwnProperty('fieldConfig')) {
                obj['fieldConfig'] = FieldConfig.constructFromObject(data['fieldConfig']);
            }
            if (data.hasOwnProperty('fill')) {
                obj['fill'] = ApiClient.convertToType(data['fill'], 'Number');
            }
            if (data.hasOwnProperty('folderId')) {
                obj['folderId'] = ApiClient.convertToType(data['folderId'], 'Number');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('gauge')) {
                obj['gauge'] = Gauge.constructFromObject(data['gauge']);
            }
            if (data.hasOwnProperty('gridPos')) {
                obj['gridPos'] = PanelGridPos.constructFromObject(data['gridPos']);
            }
            if (data.hasOwnProperty('headings')) {
                obj['headings'] = ApiClient.convertToType(data['headings'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], Object);
            }
            if (data.hasOwnProperty('hideTimeOverride')) {
                obj['hideTimeOverride'] = ApiClient.convertToType(data['hideTimeOverride'], 'Boolean');
            }
            if (data.hasOwnProperty('hideZeroBuckets')) {
                obj['hideZeroBuckets'] = ApiClient.convertToType(data['hideZeroBuckets'], 'Boolean');
            }
            if (data.hasOwnProperty('highlightCards')) {
                obj['highlightCards'] = ApiClient.convertToType(data['highlightCards'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isNew')) {
                obj['isNew'] = ApiClient.convertToType(data['isNew'], 'Boolean');
            }
            if (data.hasOwnProperty('leftYAxisLabel')) {
                obj['leftYAxisLabel'] = ApiClient.convertToType(data['leftYAxisLabel'], 'String');
            }
            if (data.hasOwnProperty('legend')) {
                obj['legend'] = Legend.constructFromObject(data['legend']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], 'Boolean');
            }
            if (data.hasOwnProperty('linewidth')) {
                obj['linewidth'] = ApiClient.convertToType(data['linewidth'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
            if (data.hasOwnProperty('mappingType')) {
                obj['mappingType'] = ApiClient.convertToType(data['mappingType'], 'Number');
            }
            if (data.hasOwnProperty('mappingTypes')) {
                obj['mappingTypes'] = ApiClient.convertToType(data['mappingTypes'], [MapType]);
            }
            if (data.hasOwnProperty('maxDataPoints')) {
                obj['maxDataPoints'] = IntString.constructFromObject(data['maxDataPoints']);
            }
            if (data.hasOwnProperty('minSpan')) {
                obj['minSpan'] = ApiClient.convertToType(data['minSpan'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('nameFilter')) {
                obj['nameFilter'] = ApiClient.convertToType(data['nameFilter'], 'String');
            }
            if (data.hasOwnProperty('nullPointMode')) {
                obj['nullPointMode'] = ApiClient.convertToType(data['nullPointMode'], 'String');
            }
            if (data.hasOwnProperty('onlyAlertsOnDashboard')) {
                obj['onlyAlertsOnDashboard'] = ApiClient.convertToType(data['onlyAlertsOnDashboard'], 'Boolean');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = Options.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('panels')) {
                obj['panels'] = ApiClient.convertToType(data['panels'], [Panel]);
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Boolean');
            }
            if (data.hasOwnProperty('pointradius')) {
                obj['pointradius'] = ApiClient.convertToType(data['pointradius'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Boolean');
            }
            if (data.hasOwnProperty('postfix')) {
                obj['postfix'] = ApiClient.convertToType(data['postfix'], 'String');
            }
            if (data.hasOwnProperty('postfixFontSize')) {
                obj['postfixFontSize'] = ApiClient.convertToType(data['postfixFontSize'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('prefixFontSize')) {
                obj['prefixFontSize'] = ApiClient.convertToType(data['prefixFontSize'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('rangeMaps')) {
                obj['rangeMaps'] = ApiClient.convertToType(data['rangeMaps'], [RangeMap]);
            }
            if (data.hasOwnProperty('recent')) {
                obj['recent'] = ApiClient.convertToType(data['recent'], 'Boolean');
            }
            if (data.hasOwnProperty('renderer')) {
                obj['renderer'] = ApiClient.convertToType(data['renderer'], 'String');
            }
            if (data.hasOwnProperty('repeat')) {
                obj['repeat'] = ApiClient.convertToType(data['repeat'], 'String');
            }
            if (data.hasOwnProperty('repeatPanelId')) {
                obj['repeatPanelId'] = ApiClient.convertToType(data['repeatPanelId'], 'Number');
            }
            if (data.hasOwnProperty('reverseYBuckets')) {
                obj['reverseYBuckets'] = ApiClient.convertToType(data['reverseYBuckets'], 'Boolean');
            }
            if (data.hasOwnProperty('rightYAxisLabel')) {
                obj['rightYAxisLabel'] = ApiClient.convertToType(data['rightYAxisLabel'], 'String');
            }
            if (data.hasOwnProperty('scopedVars')) {
                obj['scopedVars'] = ApiClient.convertToType(data['scopedVars'], {'String': PanelScopedVarsValue});
            }
            if (data.hasOwnProperty('scroll')) {
                obj['scroll'] = ApiClient.convertToType(data['scroll'], 'Boolean');
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'Boolean');
            }
            if (data.hasOwnProperty('seriesOverrides')) {
                obj['seriesOverrides'] = ApiClient.convertToType(data['seriesOverrides'], [SeriesOverride]);
            }
            if (data.hasOwnProperty('show')) {
                obj['show'] = ApiClient.convertToType(data['show'], 'String');
            }
            if (data.hasOwnProperty('showHeader')) {
                obj['showHeader'] = ApiClient.convertToType(data['showHeader'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = Sort.constructFromObject(data['sort']);
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'Number');
            }
            if (data.hasOwnProperty('spaceLength')) {
                obj['spaceLength'] = ApiClient.convertToType(data['spaceLength'], 'Number');
            }
            if (data.hasOwnProperty('span')) {
                obj['span'] = ApiClient.convertToType(data['span'], 'Number');
            }
            if (data.hasOwnProperty('sparkline')) {
                obj['sparkline'] = SparkLine.constructFromObject(data['sparkline']);
            }
            if (data.hasOwnProperty('stack')) {
                obj['stack'] = ApiClient.convertToType(data['stack'], 'Boolean');
            }
            if (data.hasOwnProperty('starred')) {
                obj['starred'] = ApiClient.convertToType(data['starred'], 'Boolean');
            }
            if (data.hasOwnProperty('stateFilter')) {
                obj['stateFilter'] = ApiClient.convertToType(data['stateFilter'], ['String']);
            }
            if (data.hasOwnProperty('steppedLine')) {
                obj['steppedLine'] = ApiClient.convertToType(data['steppedLine'], 'Boolean');
            }
            if (data.hasOwnProperty('styles')) {
                obj['styles'] = ApiClient.convertToType(data['styles'], [ColumnStyle]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [Target]);
            }
            if (data.hasOwnProperty('thresholds')) {
                obj['thresholds'] = ApiClient.convertToType(data['thresholds'], [Threshold]);
            }
            if (data.hasOwnProperty('timeFrom')) {
                obj['timeFrom'] = ApiClient.convertToType(data['timeFrom'], 'String');
            }
            if (data.hasOwnProperty('timeShift')) {
                obj['timeShift'] = ApiClient.convertToType(data['timeShift'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tooltip')) {
                obj['tooltip'] = Tooltip.constructFromObject(data['tooltip']);
            }
            if (data.hasOwnProperty('tooltipDecimals')) {
                obj['tooltipDecimals'] = ApiClient.convertToType(data['tooltipDecimals'], 'Number');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = ApiClient.convertToType(data['transform'], 'String');
            }
            if (data.hasOwnProperty('transparent')) {
                obj['transparent'] = ApiClient.convertToType(data['transparent'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valueFontSize')) {
                obj['valueFontSize'] = ApiClient.convertToType(data['valueFontSize'], 'String');
            }
            if (data.hasOwnProperty('valueMaps')) {
                obj['valueMaps'] = ApiClient.convertToType(data['valueMaps'], [ValueMap]);
            }
            if (data.hasOwnProperty('valueName')) {
                obj['valueName'] = ApiClient.convertToType(data['valueName'], 'String');
            }
            if (data.hasOwnProperty('x-axis')) {
                obj['x-axis'] = ApiClient.convertToType(data['x-axis'], 'Boolean');
            }
            if (data.hasOwnProperty('xAxis')) {
                obj['xAxis'] = PanelXAxis.constructFromObject(data['xAxis']);
            }
            if (data.hasOwnProperty('xBucketNumber')) {
                obj['xBucketNumber'] = ApiClient.convertToType(data['xBucketNumber'], 'Number');
            }
            if (data.hasOwnProperty('xBucketSize')) {
                obj['xBucketSize'] = ApiClient.convertToType(data['xBucketSize'], 'String');
            }
            if (data.hasOwnProperty('xaxis')) {
                obj['xaxis'] = Axis.constructFromObject(data['xaxis']);
            }
            if (data.hasOwnProperty('y-axis')) {
                obj['y-axis'] = ApiClient.convertToType(data['y-axis'], 'Boolean');
            }
            if (data.hasOwnProperty('yAxis')) {
                obj['yAxis'] = PanelYAxis.constructFromObject(data['yAxis']);
            }
            if (data.hasOwnProperty('yBucketBound')) {
                obj['yBucketBound'] = ApiClient.convertToType(data['yBucketBound'], 'String');
            }
            if (data.hasOwnProperty('yBucketNumber')) {
                obj['yBucketNumber'] = ApiClient.convertToType(data['yBucketNumber'], 'Number');
            }
            if (data.hasOwnProperty('yBucketSize')) {
                obj['yBucketSize'] = ApiClient.convertToType(data['yBucketSize'], 'Number');
            }
            if (data.hasOwnProperty('y_formats')) {
                obj['y_formats'] = ApiClient.convertToType(data['y_formats'], ['String']);
            }
            if (data.hasOwnProperty('yaxes')) {
                obj['yaxes'] = ApiClient.convertToType(data['yaxes'], [Axis]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Panel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Panel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alert`
        if (data['alert']) { // data not null
          Alert.validateJSON(data['alert']);
        }
        // validate the optional field `cards`
        if (data['cards']) { // data not null
          PanelCards.validateJSON(data['cards']);
        }
        // validate the optional field `color`
        if (data['color']) { // data not null
          PanelColor.validateJSON(data['color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['colors'])) {
            throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
        }
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                Column.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dashboardTags'])) {
            throw new Error("Expected the field `dashboardTags` to be an array in the JSON data but got " + data['dashboardTags']);
        }
        // ensure the json data is a string
        if (data['dataFormat'] && !(typeof data['dataFormat'] === 'string' || data['dataFormat'] instanceof String)) {
            throw new Error("Expected the field `dataFormat` to be a primitive type in the JSON string but got " + data['dataFormat']);
        }
        // ensure the json data is a string
        if (data['datasource'] && !(typeof data['datasource'] === 'string' || data['datasource'] instanceof String)) {
            throw new Error("Expected the field `datasource` to be a primitive type in the JSON string but got " + data['datasource']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fieldConfig`
        if (data['fieldConfig']) { // data not null
          FieldConfig.validateJSON(data['fieldConfig']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `gauge`
        if (data['gauge']) { // data not null
          Gauge.validateJSON(data['gauge']);
        }
        // validate the optional field `gridPos`
        if (data['gridPos']) { // data not null
          PanelGridPos.validateJSON(data['gridPos']);
        }
        // ensure the json data is a string
        if (data['leftYAxisLabel'] && !(typeof data['leftYAxisLabel'] === 'string' || data['leftYAxisLabel'] instanceof String)) {
            throw new Error("Expected the field `leftYAxisLabel` to be a primitive type in the JSON string but got " + data['leftYAxisLabel']);
        }
        // validate the optional field `legend`
        if (data['legend']) { // data not null
          Legend.validateJSON(data['legend']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }
        if (data['mappingTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappingTypes'])) {
                throw new Error("Expected the field `mappingTypes` to be an array in the JSON data but got " + data['mappingTypes']);
            }
            // validate the optional field `mappingTypes` (array)
            for (const item of data['mappingTypes']) {
                MapType.validateJSON(item);
            };
        }
        // validate the optional field `maxDataPoints`
        if (data['maxDataPoints']) { // data not null
          IntString.validateJSON(data['maxDataPoints']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['nameFilter'] && !(typeof data['nameFilter'] === 'string' || data['nameFilter'] instanceof String)) {
            throw new Error("Expected the field `nameFilter` to be a primitive type in the JSON string but got " + data['nameFilter']);
        }
        // ensure the json data is a string
        if (data['nullPointMode'] && !(typeof data['nullPointMode'] === 'string' || data['nullPointMode'] instanceof String)) {
            throw new Error("Expected the field `nullPointMode` to be a primitive type in the JSON string but got " + data['nullPointMode']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          Options.validateJSON(data['options']);
        }
        if (data['panels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['panels'])) {
                throw new Error("Expected the field `panels` to be an array in the JSON data but got " + data['panels']);
            }
            // validate the optional field `panels` (array)
            for (const item of data['panels']) {
                Panel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['postfix'] && !(typeof data['postfix'] === 'string' || data['postfix'] instanceof String)) {
            throw new Error("Expected the field `postfix` to be a primitive type in the JSON string but got " + data['postfix']);
        }
        // ensure the json data is a string
        if (data['postfixFontSize'] && !(typeof data['postfixFontSize'] === 'string' || data['postfixFontSize'] instanceof String)) {
            throw new Error("Expected the field `postfixFontSize` to be a primitive type in the JSON string but got " + data['postfixFontSize']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['prefixFontSize'] && !(typeof data['prefixFontSize'] === 'string' || data['prefixFontSize'] instanceof String)) {
            throw new Error("Expected the field `prefixFontSize` to be a primitive type in the JSON string but got " + data['prefixFontSize']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        if (data['rangeMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rangeMaps'])) {
                throw new Error("Expected the field `rangeMaps` to be an array in the JSON data but got " + data['rangeMaps']);
            }
            // validate the optional field `rangeMaps` (array)
            for (const item of data['rangeMaps']) {
                RangeMap.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['renderer'] && !(typeof data['renderer'] === 'string' || data['renderer'] instanceof String)) {
            throw new Error("Expected the field `renderer` to be a primitive type in the JSON string but got " + data['renderer']);
        }
        // ensure the json data is a string
        if (data['repeat'] && !(typeof data['repeat'] === 'string' || data['repeat'] instanceof String)) {
            throw new Error("Expected the field `repeat` to be a primitive type in the JSON string but got " + data['repeat']);
        }
        // ensure the json data is a string
        if (data['rightYAxisLabel'] && !(typeof data['rightYAxisLabel'] === 'string' || data['rightYAxisLabel'] instanceof String)) {
            throw new Error("Expected the field `rightYAxisLabel` to be a primitive type in the JSON string but got " + data['rightYAxisLabel']);
        }
        if (data['seriesOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seriesOverrides'])) {
                throw new Error("Expected the field `seriesOverrides` to be an array in the JSON data but got " + data['seriesOverrides']);
            }
            // validate the optional field `seriesOverrides` (array)
            for (const item of data['seriesOverrides']) {
                SeriesOverride.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['show'] && !(typeof data['show'] === 'string' || data['show'] instanceof String)) {
            throw new Error("Expected the field `show` to be a primitive type in the JSON string but got " + data['show']);
        }
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          Sort.validateJSON(data['sort']);
        }
        // validate the optional field `sparkline`
        if (data['sparkline']) { // data not null
          SparkLine.validateJSON(data['sparkline']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stateFilter'])) {
            throw new Error("Expected the field `stateFilter` to be an array in the JSON data but got " + data['stateFilter']);
        }
        if (data['styles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['styles'])) {
                throw new Error("Expected the field `styles` to be an array in the JSON data but got " + data['styles']);
            }
            // validate the optional field `styles` (array)
            for (const item of data['styles']) {
                ColumnStyle.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                Target.validateJSON(item);
            };
        }
        if (data['thresholds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thresholds'])) {
                throw new Error("Expected the field `thresholds` to be an array in the JSON data but got " + data['thresholds']);
            }
            // validate the optional field `thresholds` (array)
            for (const item of data['thresholds']) {
                Threshold.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeFrom'] && !(typeof data['timeFrom'] === 'string' || data['timeFrom'] instanceof String)) {
            throw new Error("Expected the field `timeFrom` to be a primitive type in the JSON string but got " + data['timeFrom']);
        }
        // ensure the json data is a string
        if (data['timeShift'] && !(typeof data['timeShift'] === 'string' || data['timeShift'] instanceof String)) {
            throw new Error("Expected the field `timeShift` to be a primitive type in the JSON string but got " + data['timeShift']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `tooltip`
        if (data['tooltip']) { // data not null
          Tooltip.validateJSON(data['tooltip']);
        }
        // ensure the json data is a string
        if (data['transform'] && !(typeof data['transform'] === 'string' || data['transform'] instanceof String)) {
            throw new Error("Expected the field `transform` to be a primitive type in the JSON string but got " + data['transform']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['valueFontSize'] && !(typeof data['valueFontSize'] === 'string' || data['valueFontSize'] instanceof String)) {
            throw new Error("Expected the field `valueFontSize` to be a primitive type in the JSON string but got " + data['valueFontSize']);
        }
        if (data['valueMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueMaps'])) {
                throw new Error("Expected the field `valueMaps` to be an array in the JSON data but got " + data['valueMaps']);
            }
            // validate the optional field `valueMaps` (array)
            for (const item of data['valueMaps']) {
                ValueMap.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueName'] && !(typeof data['valueName'] === 'string' || data['valueName'] instanceof String)) {
            throw new Error("Expected the field `valueName` to be a primitive type in the JSON string but got " + data['valueName']);
        }
        // validate the optional field `xAxis`
        if (data['xAxis']) { // data not null
          PanelXAxis.validateJSON(data['xAxis']);
        }
        // ensure the json data is a string
        if (data['xBucketSize'] && !(typeof data['xBucketSize'] === 'string' || data['xBucketSize'] instanceof String)) {
            throw new Error("Expected the field `xBucketSize` to be a primitive type in the JSON string but got " + data['xBucketSize']);
        }
        // validate the optional field `xaxis`
        if (data['xaxis']) { // data not null
          Axis.validateJSON(data['xaxis']);
        }
        // validate the optional field `yAxis`
        if (data['yAxis']) { // data not null
          PanelYAxis.validateJSON(data['yAxis']);
        }
        // ensure the json data is a string
        if (data['yBucketBound'] && !(typeof data['yBucketBound'] === 'string' || data['yBucketBound'] instanceof String)) {
            throw new Error("Expected the field `yBucketBound` to be a primitive type in the JSON string but got " + data['yBucketBound']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['y_formats'])) {
            throw new Error("Expected the field `y_formats` to be an array in the JSON data but got " + data['y_formats']);
        }
        if (data['yaxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['yaxes'])) {
                throw new Error("Expected the field `yaxes` to be an array in the JSON data but got " + data['yaxes']);
            }
            // validate the optional field `yaxes` (array)
            for (const item of data['yaxes']) {
                Axis.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Alert} alert
 */
Panel.prototype['alert'] = undefined;

/**
 * @member {Object} aliasColors
 */
Panel.prototype['aliasColors'] = undefined;

/**
 * @member {Boolean} bars
 */
Panel.prototype['bars'] = undefined;

/**
 * @member {module:model/PanelCards} cards
 */
Panel.prototype['cards'] = undefined;

/**
 * @member {Boolean} collapsed
 */
Panel.prototype['collapsed'] = undefined;

/**
 * @member {module:model/PanelColor} color
 */
Panel.prototype['color'] = undefined;

/**
 * @member {Boolean} colorBackground
 */
Panel.prototype['colorBackground'] = undefined;

/**
 * @member {Boolean} colorValue
 */
Panel.prototype['colorValue'] = undefined;

/**
 * @member {Array.<String>} colors
 */
Panel.prototype['colors'] = undefined;

/**
 * @member {Array.<module:model/Column>} columns
 */
Panel.prototype['columns'] = undefined;

/**
 * @member {String} content
 */
Panel.prototype['content'] = undefined;

/**
 * @member {Number} dashLength
 */
Panel.prototype['dashLength'] = undefined;

/**
 * @member {Array.<String>} dashboardTags
 */
Panel.prototype['dashboardTags'] = undefined;

/**
 * @member {Boolean} dashes
 */
Panel.prototype['dashes'] = undefined;

/**
 * @member {String} dataFormat
 */
Panel.prototype['dataFormat'] = undefined;

/**
 * @member {String} datasource
 */
Panel.prototype['datasource'] = undefined;

/**
 * @member {Number} decimals
 */
Panel.prototype['decimals'] = undefined;

/**
 * @member {String} description
 */
Panel.prototype['description'] = undefined;

/**
 * @member {Boolean} editable
 */
Panel.prototype['editable'] = undefined;

/**
 * @member {Boolean} error
 */
Panel.prototype['error'] = undefined;

/**
 * @member {module:model/FieldConfig} fieldConfig
 */
Panel.prototype['fieldConfig'] = undefined;

/**
 * @member {Number} fill
 */
Panel.prototype['fill'] = undefined;

/**
 * @member {Number} folderId
 */
Panel.prototype['folderId'] = undefined;

/**
 * @member {String} format
 */
Panel.prototype['format'] = undefined;

/**
 * @member {module:model/Gauge} gauge
 */
Panel.prototype['gauge'] = undefined;

/**
 * @member {module:model/PanelGridPos} gridPos
 */
Panel.prototype['gridPos'] = undefined;

/**
 * @member {Boolean} headings
 */
Panel.prototype['headings'] = undefined;

/**
 * @member {Object} height
 */
Panel.prototype['height'] = undefined;

/**
 * @member {Boolean} hideTimeOverride
 */
Panel.prototype['hideTimeOverride'] = undefined;

/**
 * @member {Boolean} hideZeroBuckets
 */
Panel.prototype['hideZeroBuckets'] = undefined;

/**
 * @member {Boolean} highlightCards
 */
Panel.prototype['highlightCards'] = undefined;

/**
 * @member {Number} id
 */
Panel.prototype['id'] = undefined;

/**
 * @member {Boolean} isNew
 */
Panel.prototype['isNew'] = undefined;

/**
 * @member {String} leftYAxisLabel
 */
Panel.prototype['leftYAxisLabel'] = undefined;

/**
 * @member {module:model/Legend} legend
 */
Panel.prototype['legend'] = undefined;

/**
 * @member {Number} limit
 */
Panel.prototype['limit'] = undefined;

/**
 * @member {Boolean} lines
 */
Panel.prototype['lines'] = undefined;

/**
 * @member {Number} linewidth
 */
Panel.prototype['linewidth'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
Panel.prototype['links'] = undefined;

/**
 * @member {Number} mappingType
 */
Panel.prototype['mappingType'] = undefined;

/**
 * @member {Array.<module:model/MapType>} mappingTypes
 */
Panel.prototype['mappingTypes'] = undefined;

/**
 * @member {module:model/IntString} maxDataPoints
 */
Panel.prototype['maxDataPoints'] = undefined;

/**
 * @member {Number} minSpan
 */
Panel.prototype['minSpan'] = undefined;

/**
 * @member {String} mode
 */
Panel.prototype['mode'] = undefined;

/**
 * @member {String} nameFilter
 */
Panel.prototype['nameFilter'] = undefined;

/**
 * @member {String} nullPointMode
 */
Panel.prototype['nullPointMode'] = undefined;

/**
 * @member {Boolean} onlyAlertsOnDashboard
 */
Panel.prototype['onlyAlertsOnDashboard'] = undefined;

/**
 * @member {module:model/Options} options
 */
Panel.prototype['options'] = undefined;

/**
 * @member {Number} pageSize
 */
Panel.prototype['pageSize'] = undefined;

/**
 * @member {Array.<module:model/Panel>} panels
 */
Panel.prototype['panels'] = undefined;

/**
 * @member {Boolean} percentage
 */
Panel.prototype['percentage'] = undefined;

/**
 * @member {Number} pointradius
 */
Panel.prototype['pointradius'] = undefined;

/**
 * @member {Boolean} points
 */
Panel.prototype['points'] = undefined;

/**
 * @member {String} postfix
 */
Panel.prototype['postfix'] = undefined;

/**
 * @member {String} postfixFontSize
 */
Panel.prototype['postfixFontSize'] = undefined;

/**
 * @member {String} prefix
 */
Panel.prototype['prefix'] = undefined;

/**
 * @member {String} prefixFontSize
 */
Panel.prototype['prefixFontSize'] = undefined;

/**
 * @member {String} query
 */
Panel.prototype['query'] = undefined;

/**
 * @member {Array.<module:model/RangeMap>} rangeMaps
 */
Panel.prototype['rangeMaps'] = undefined;

/**
 * @member {Boolean} recent
 */
Panel.prototype['recent'] = undefined;

/**
 * @member {String} renderer
 */
Panel.prototype['renderer'] = undefined;

/**
 * @member {String} repeat
 */
Panel.prototype['repeat'] = undefined;

/**
 * RepeatIteration *int64   `json:\"repeatIteration,omitempty\"`
 * @member {Number} repeatPanelId
 */
Panel.prototype['repeatPanelId'] = undefined;

/**
 * @member {Boolean} reverseYBuckets
 */
Panel.prototype['reverseYBuckets'] = undefined;

/**
 * @member {String} rightYAxisLabel
 */
Panel.prototype['rightYAxisLabel'] = undefined;

/**
 * @member {Object.<String, module:model/PanelScopedVarsValue>} scopedVars
 */
Panel.prototype['scopedVars'] = undefined;

/**
 * @member {Boolean} scroll
 */
Panel.prototype['scroll'] = undefined;

/**
 * @member {Boolean} search
 */
Panel.prototype['search'] = undefined;

/**
 * @member {Array.<module:model/SeriesOverride>} seriesOverrides
 */
Panel.prototype['seriesOverrides'] = undefined;

/**
 * @member {String} show
 */
Panel.prototype['show'] = undefined;

/**
 * @member {Boolean} showHeader
 */
Panel.prototype['showHeader'] = undefined;

/**
 * @member {module:model/Sort} sort
 */
Panel.prototype['sort'] = undefined;

/**
 * @member {Number} sortOrder
 */
Panel.prototype['sortOrder'] = undefined;

/**
 * @member {Number} spaceLength
 */
Panel.prototype['spaceLength'] = undefined;

/**
 * @member {Number} span
 */
Panel.prototype['span'] = undefined;

/**
 * @member {module:model/SparkLine} sparkline
 */
Panel.prototype['sparkline'] = undefined;

/**
 * @member {Boolean} stack
 */
Panel.prototype['stack'] = undefined;

/**
 * @member {Boolean} starred
 */
Panel.prototype['starred'] = undefined;

/**
 * @member {Array.<String>} stateFilter
 */
Panel.prototype['stateFilter'] = undefined;

/**
 * @member {Boolean} steppedLine
 */
Panel.prototype['steppedLine'] = undefined;

/**
 * @member {Array.<module:model/ColumnStyle>} styles
 */
Panel.prototype['styles'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Panel.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/Target>} targets
 */
Panel.prototype['targets'] = undefined;

/**
 * @member {Array.<module:model/Threshold>} thresholds
 */
Panel.prototype['thresholds'] = undefined;

/**
 * @member {String} timeFrom
 */
Panel.prototype['timeFrom'] = undefined;

/**
 * @member {String} timeShift
 */
Panel.prototype['timeShift'] = undefined;

/**
 * @member {String} title
 */
Panel.prototype['title'] = undefined;

/**
 * @member {module:model/Tooltip} tooltip
 */
Panel.prototype['tooltip'] = undefined;

/**
 * @member {Number} tooltipDecimals
 */
Panel.prototype['tooltipDecimals'] = undefined;

/**
 * @member {String} transform
 */
Panel.prototype['transform'] = undefined;

/**
 * @member {Boolean} transparent
 */
Panel.prototype['transparent'] = undefined;

/**
 * @member {String} type
 */
Panel.prototype['type'] = undefined;

/**
 * @member {String} valueFontSize
 */
Panel.prototype['valueFontSize'] = undefined;

/**
 * @member {Array.<module:model/ValueMap>} valueMaps
 */
Panel.prototype['valueMaps'] = undefined;

/**
 * @member {String} valueName
 */
Panel.prototype['valueName'] = undefined;

/**
 * @member {Boolean} x-axis
 */
Panel.prototype['x-axis'] = undefined;

/**
 * @member {module:model/PanelXAxis} xAxis
 */
Panel.prototype['xAxis'] = undefined;

/**
 * @member {Number} xBucketNumber
 */
Panel.prototype['xBucketNumber'] = undefined;

/**
 * @member {String} xBucketSize
 */
Panel.prototype['xBucketSize'] = undefined;

/**
 * @member {module:model/Axis} xaxis
 */
Panel.prototype['xaxis'] = undefined;

/**
 * @member {Boolean} y-axis
 */
Panel.prototype['y-axis'] = undefined;

/**
 * @member {module:model/PanelYAxis} yAxis
 */
Panel.prototype['yAxis'] = undefined;

/**
 * @member {String} yBucketBound
 */
Panel.prototype['yBucketBound'] = undefined;

/**
 * @member {Number} yBucketNumber
 */
Panel.prototype['yBucketNumber'] = undefined;

/**
 * @member {Number} yBucketSize
 */
Panel.prototype['yBucketSize'] = undefined;

/**
 * @member {Array.<String>} y_formats
 */
Panel.prototype['y_formats'] = undefined;

/**
 * @member {Array.<module:model/Axis>} yaxes
 */
Panel.prototype['yaxes'] = undefined;






export default Panel;

