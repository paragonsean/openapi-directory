/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PluginConfigArgs from './PluginConfigArgs';
import PluginConfigInterface from './PluginConfigInterface';
import PluginConfigLinux from './PluginConfigLinux';
import PluginConfigNetwork from './PluginConfigNetwork';
import PluginConfigRootfs from './PluginConfigRootfs';
import PluginConfigUser from './PluginConfigUser';
import PluginEnv from './PluginEnv';
import PluginMount from './PluginMount';

/**
 * The PluginConfig model module.
 * @module model/PluginConfig
 * @version 0.4.27
 */
class PluginConfig {
    /**
     * Constructs a new <code>PluginConfig</code>.
     * @alias module:model/PluginConfig
     * @param args {module:model/PluginConfigArgs} 
     * @param description {String} description
     * @param documentation {String} documentation
     * @param entrypoint {Array.<String>} entrypoint
     * @param env {Array.<module:model/PluginEnv>} env
     * @param _interface {module:model/PluginConfigInterface} 
     * @param ipcHost {Boolean} ipc host
     * @param linux {module:model/PluginConfigLinux} 
     * @param mounts {Array.<module:model/PluginMount>} mounts
     * @param network {module:model/PluginConfigNetwork} 
     * @param pidHost {Boolean} pid host
     * @param propagatedMount {String} propagated mount
     * @param workDir {String} work dir
     */
    constructor(args, description, documentation, entrypoint, env, _interface, ipcHost, linux, mounts, network, pidHost, propagatedMount, workDir) { 
        
        PluginConfig.initialize(this, args, description, documentation, entrypoint, env, _interface, ipcHost, linux, mounts, network, pidHost, propagatedMount, workDir);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, args, description, documentation, entrypoint, env, _interface, ipcHost, linux, mounts, network, pidHost, propagatedMount, workDir) { 
        obj['Args'] = args;
        obj['Description'] = description;
        obj['Documentation'] = documentation;
        obj['Entrypoint'] = entrypoint;
        obj['Env'] = env;
        obj['Interface'] = _interface;
        obj['IpcHost'] = ipcHost;
        obj['Linux'] = linux;
        obj['Mounts'] = mounts;
        obj['Network'] = network;
        obj['PidHost'] = pidHost;
        obj['PropagatedMount'] = propagatedMount;
        obj['WorkDir'] = workDir;
    }

    /**
     * Constructs a <code>PluginConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PluginConfig} obj Optional instance to populate.
     * @return {module:model/PluginConfig} The populated <code>PluginConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PluginConfig();

            if (data.hasOwnProperty('Args')) {
                obj['Args'] = PluginConfigArgs.constructFromObject(data['Args']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DockerVersion')) {
                obj['DockerVersion'] = ApiClient.convertToType(data['DockerVersion'], 'String');
            }
            if (data.hasOwnProperty('Documentation')) {
                obj['Documentation'] = ApiClient.convertToType(data['Documentation'], 'String');
            }
            if (data.hasOwnProperty('Entrypoint')) {
                obj['Entrypoint'] = ApiClient.convertToType(data['Entrypoint'], ['String']);
            }
            if (data.hasOwnProperty('Env')) {
                obj['Env'] = ApiClient.convertToType(data['Env'], [PluginEnv]);
            }
            if (data.hasOwnProperty('Interface')) {
                obj['Interface'] = PluginConfigInterface.constructFromObject(data['Interface']);
            }
            if (data.hasOwnProperty('IpcHost')) {
                obj['IpcHost'] = ApiClient.convertToType(data['IpcHost'], 'Boolean');
            }
            if (data.hasOwnProperty('Linux')) {
                obj['Linux'] = PluginConfigLinux.constructFromObject(data['Linux']);
            }
            if (data.hasOwnProperty('Mounts')) {
                obj['Mounts'] = ApiClient.convertToType(data['Mounts'], [PluginMount]);
            }
            if (data.hasOwnProperty('Network')) {
                obj['Network'] = PluginConfigNetwork.constructFromObject(data['Network']);
            }
            if (data.hasOwnProperty('PidHost')) {
                obj['PidHost'] = ApiClient.convertToType(data['PidHost'], 'Boolean');
            }
            if (data.hasOwnProperty('PropagatedMount')) {
                obj['PropagatedMount'] = ApiClient.convertToType(data['PropagatedMount'], 'String');
            }
            if (data.hasOwnProperty('User')) {
                obj['User'] = PluginConfigUser.constructFromObject(data['User']);
            }
            if (data.hasOwnProperty('WorkDir')) {
                obj['WorkDir'] = ApiClient.convertToType(data['WorkDir'], 'String');
            }
            if (data.hasOwnProperty('rootfs')) {
                obj['rootfs'] = PluginConfigRootfs.constructFromObject(data['rootfs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PluginConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PluginConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PluginConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Args`
        if (data['Args']) { // data not null
          PluginConfigArgs.validateJSON(data['Args']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['DockerVersion'] && !(typeof data['DockerVersion'] === 'string' || data['DockerVersion'] instanceof String)) {
            throw new Error("Expected the field `DockerVersion` to be a primitive type in the JSON string but got " + data['DockerVersion']);
        }
        // ensure the json data is a string
        if (data['Documentation'] && !(typeof data['Documentation'] === 'string' || data['Documentation'] instanceof String)) {
            throw new Error("Expected the field `Documentation` to be a primitive type in the JSON string but got " + data['Documentation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Entrypoint'])) {
            throw new Error("Expected the field `Entrypoint` to be an array in the JSON data but got " + data['Entrypoint']);
        }
        if (data['Env']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Env'])) {
                throw new Error("Expected the field `Env` to be an array in the JSON data but got " + data['Env']);
            }
            // validate the optional field `Env` (array)
            for (const item of data['Env']) {
                PluginEnv.validateJSON(item);
            };
        }
        // validate the optional field `Interface`
        if (data['Interface']) { // data not null
          PluginConfigInterface.validateJSON(data['Interface']);
        }
        // validate the optional field `Linux`
        if (data['Linux']) { // data not null
          PluginConfigLinux.validateJSON(data['Linux']);
        }
        if (data['Mounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Mounts'])) {
                throw new Error("Expected the field `Mounts` to be an array in the JSON data but got " + data['Mounts']);
            }
            // validate the optional field `Mounts` (array)
            for (const item of data['Mounts']) {
                PluginMount.validateJSON(item);
            };
        }
        // validate the optional field `Network`
        if (data['Network']) { // data not null
          PluginConfigNetwork.validateJSON(data['Network']);
        }
        // ensure the json data is a string
        if (data['PropagatedMount'] && !(typeof data['PropagatedMount'] === 'string' || data['PropagatedMount'] instanceof String)) {
            throw new Error("Expected the field `PropagatedMount` to be a primitive type in the JSON string but got " + data['PropagatedMount']);
        }
        // validate the optional field `User`
        if (data['User']) { // data not null
          PluginConfigUser.validateJSON(data['User']);
        }
        // ensure the json data is a string
        if (data['WorkDir'] && !(typeof data['WorkDir'] === 'string' || data['WorkDir'] instanceof String)) {
            throw new Error("Expected the field `WorkDir` to be a primitive type in the JSON string but got " + data['WorkDir']);
        }
        // validate the optional field `rootfs`
        if (data['rootfs']) { // data not null
          PluginConfigRootfs.validateJSON(data['rootfs']);
        }

        return true;
    }


}

PluginConfig.RequiredProperties = ["Args", "Description", "Documentation", "Entrypoint", "Env", "Interface", "IpcHost", "Linux", "Mounts", "Network", "PidHost", "PropagatedMount", "WorkDir"];

/**
 * @member {module:model/PluginConfigArgs} Args
 */
PluginConfig.prototype['Args'] = undefined;

/**
 * description
 * @member {String} Description
 */
PluginConfig.prototype['Description'] = undefined;

/**
 * Docker Version used to create the plugin
 * @member {String} DockerVersion
 */
PluginConfig.prototype['DockerVersion'] = undefined;

/**
 * documentation
 * @member {String} Documentation
 */
PluginConfig.prototype['Documentation'] = undefined;

/**
 * entrypoint
 * @member {Array.<String>} Entrypoint
 */
PluginConfig.prototype['Entrypoint'] = undefined;

/**
 * env
 * @member {Array.<module:model/PluginEnv>} Env
 */
PluginConfig.prototype['Env'] = undefined;

/**
 * @member {module:model/PluginConfigInterface} Interface
 */
PluginConfig.prototype['Interface'] = undefined;

/**
 * ipc host
 * @member {Boolean} IpcHost
 */
PluginConfig.prototype['IpcHost'] = undefined;

/**
 * @member {module:model/PluginConfigLinux} Linux
 */
PluginConfig.prototype['Linux'] = undefined;

/**
 * mounts
 * @member {Array.<module:model/PluginMount>} Mounts
 */
PluginConfig.prototype['Mounts'] = undefined;

/**
 * @member {module:model/PluginConfigNetwork} Network
 */
PluginConfig.prototype['Network'] = undefined;

/**
 * pid host
 * @member {Boolean} PidHost
 */
PluginConfig.prototype['PidHost'] = undefined;

/**
 * propagated mount
 * @member {String} PropagatedMount
 */
PluginConfig.prototype['PropagatedMount'] = undefined;

/**
 * @member {module:model/PluginConfigUser} User
 */
PluginConfig.prototype['User'] = undefined;

/**
 * work dir
 * @member {String} WorkDir
 */
PluginConfig.prototype['WorkDir'] = undefined;

/**
 * @member {module:model/PluginConfigRootfs} rootfs
 */
PluginConfig.prototype['rootfs'] = undefined;






export default PluginConfig;

