/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedFieldsEntry model module.
 * @module model/ManagedFieldsEntry
 * @version 0.4.27
 */
class ManagedFieldsEntry {
    /**
     * Constructs a new <code>ManagedFieldsEntry</code>.
     * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
     * @alias module:model/ManagedFieldsEntry
     */
    constructor() { 
        
        ManagedFieldsEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedFieldsEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedFieldsEntry} obj Optional instance to populate.
     * @return {module:model/ManagedFieldsEntry} The populated <code>ManagedFieldsEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedFieldsEntry();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('fieldsType')) {
                obj['fieldsType'] = ApiClient.convertToType(data['fieldsType'], 'String');
            }
            if (data.hasOwnProperty('fieldsV1')) {
                obj['fieldsV1'] = ApiClient.convertToType(data['fieldsV1'], Object);
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = ApiClient.convertToType(data['manager'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedFieldsEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedFieldsEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }
        // ensure the json data is a string
        if (data['fieldsType'] && !(typeof data['fieldsType'] === 'string' || data['fieldsType'] instanceof String)) {
            throw new Error("Expected the field `fieldsType` to be a primitive type in the JSON string but got " + data['fieldsType']);
        }
        // ensure the json data is a string
        if (data['manager'] && !(typeof data['manager'] === 'string' || data['manager'] instanceof String)) {
            throw new Error("Expected the field `manager` to be a primitive type in the JSON string but got " + data['manager']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }

        return true;
    }


}



/**
 * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
 * @member {String} apiVersion
 */
ManagedFieldsEntry.prototype['apiVersion'] = undefined;

/**
 * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
 * @member {String} fieldsType
 */
ManagedFieldsEntry.prototype['fieldsType'] = undefined;

/**
 * Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff
 * @member {Object} fieldsV1
 */
ManagedFieldsEntry.prototype['fieldsV1'] = undefined;

/**
 * Manager is an identifier of the workflow managing these fields.
 * @member {String} manager
 */
ManagedFieldsEntry.prototype['manager'] = undefined;

/**
 * @member {String} operation
 */
ManagedFieldsEntry.prototype['operation'] = undefined;

/**
 * +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false
 * @member {Object} time
 */
ManagedFieldsEntry.prototype['time'] = undefined;






export default ManagedFieldsEntry;

