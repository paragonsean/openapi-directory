/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VolumeUsageData from './VolumeUsageData';

/**
 * The Volume model module.
 * @module model/Volume
 * @version 0.4.27
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * Volume volume
     * @alias module:model/Volume
     * @param driver {String} Name of the volume driver used by the volume.
     * @param labels {Object.<String, String>} User-defined key/value metadata.
     * @param mountpoint {String} Mount path of the volume on the host.
     * @param name {String} Name of the volume.
     * @param options {Object.<String, String>} The driver specific options used when creating the volume.
     * @param scope {String} The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
     */
    constructor(driver, labels, mountpoint, name, options, scope) { 
        
        Volume.initialize(this, driver, labels, mountpoint, name, options, scope);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, driver, labels, mountpoint, name, options, scope) { 
        obj['Driver'] = driver;
        obj['Labels'] = labels;
        obj['Mountpoint'] = mountpoint;
        obj['Name'] = name;
        obj['Options'] = options;
        obj['Scope'] = scope;
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'String');
            }
            if (data.hasOwnProperty('Driver')) {
                obj['Driver'] = ApiClient.convertToType(data['Driver'], 'String');
            }
            if (data.hasOwnProperty('Labels')) {
                obj['Labels'] = ApiClient.convertToType(data['Labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Mountpoint')) {
                obj['Mountpoint'] = ApiClient.convertToType(data['Mountpoint'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = ApiClient.convertToType(data['Options'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Scope')) {
                obj['Scope'] = ApiClient.convertToType(data['Scope'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], {'String': Object});
            }
            if (data.hasOwnProperty('UsageData')) {
                obj['UsageData'] = VolumeUsageData.constructFromObject(data['UsageData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Volume.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CreatedAt'] && !(typeof data['CreatedAt'] === 'string' || data['CreatedAt'] instanceof String)) {
            throw new Error("Expected the field `CreatedAt` to be a primitive type in the JSON string but got " + data['CreatedAt']);
        }
        // ensure the json data is a string
        if (data['Driver'] && !(typeof data['Driver'] === 'string' || data['Driver'] instanceof String)) {
            throw new Error("Expected the field `Driver` to be a primitive type in the JSON string but got " + data['Driver']);
        }
        // ensure the json data is a string
        if (data['Mountpoint'] && !(typeof data['Mountpoint'] === 'string' || data['Mountpoint'] instanceof String)) {
            throw new Error("Expected the field `Mountpoint` to be a primitive type in the JSON string but got " + data['Mountpoint']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Scope'] && !(typeof data['Scope'] === 'string' || data['Scope'] instanceof String)) {
            throw new Error("Expected the field `Scope` to be a primitive type in the JSON string but got " + data['Scope']);
        }
        // validate the optional field `UsageData`
        if (data['UsageData']) { // data not null
          VolumeUsageData.validateJSON(data['UsageData']);
        }

        return true;
    }


}

Volume.RequiredProperties = ["Driver", "Labels", "Mountpoint", "Name", "Options", "Scope"];

/**
 * Date/Time the volume was created.
 * @member {String} CreatedAt
 */
Volume.prototype['CreatedAt'] = undefined;

/**
 * Name of the volume driver used by the volume.
 * @member {String} Driver
 */
Volume.prototype['Driver'] = undefined;

/**
 * User-defined key/value metadata.
 * @member {Object.<String, String>} Labels
 */
Volume.prototype['Labels'] = undefined;

/**
 * Mount path of the volume on the host.
 * @member {String} Mountpoint
 */
Volume.prototype['Mountpoint'] = undefined;

/**
 * Name of the volume.
 * @member {String} Name
 */
Volume.prototype['Name'] = undefined;

/**
 * The driver specific options used when creating the volume.
 * @member {Object.<String, String>} Options
 */
Volume.prototype['Options'] = undefined;

/**
 * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
 * @member {String} Scope
 */
Volume.prototype['Scope'] = undefined;

/**
 * Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.
 * @member {Object.<String, Object>} Status
 */
Volume.prototype['Status'] = undefined;

/**
 * @member {module:model/VolumeUsageData} UsageData
 */
Volume.prototype['UsageData'] = undefined;






export default Volume;

