/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntOrString from './IntOrString';

/**
 * The ServicePort model module.
 * @module model/ServicePort
 * @version 0.4.27
 */
class ServicePort {
    /**
     * Constructs a new <code>ServicePort</code>.
     * @alias module:model/ServicePort
     */
    constructor() { 
        
        ServicePort.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServicePort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePort} obj Optional instance to populate.
     * @return {module:model/ServicePort} The populated <code>ServicePort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePort();

            if (data.hasOwnProperty('appProtocol')) {
                obj['appProtocol'] = ApiClient.convertToType(data['appProtocol'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodePort')) {
                obj['nodePort'] = ApiClient.convertToType(data['nodePort'], 'Number');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('targetPort')) {
                obj['targetPort'] = IntOrString.constructFromObject(data['targetPort']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePort</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appProtocol'] && !(typeof data['appProtocol'] === 'string' || data['appProtocol'] instanceof String)) {
            throw new Error("Expected the field `appProtocol` to be a primitive type in the JSON string but got " + data['appProtocol']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // validate the optional field `targetPort`
        if (data['targetPort']) { // data not null
          IntOrString.validateJSON(data['targetPort']);
        }

        return true;
    }


}



/**
 * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. +optional
 * @member {String} appProtocol
 */
ServicePort.prototype['appProtocol'] = undefined;

/**
 * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service. +optional
 * @member {String} name
 */
ServicePort.prototype['name'] = undefined;

/**
 * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport +optional
 * @member {Number} nodePort
 */
ServicePort.prototype['nodePort'] = undefined;

/**
 * The port that will be exposed by this service.
 * @member {Number} port
 */
ServicePort.prototype['port'] = undefined;

/**
 * @member {String} protocol
 */
ServicePort.prototype['protocol'] = undefined;

/**
 * @member {module:model/IntOrString} targetPort
 */
ServicePort.prototype['targetPort'] = undefined;






export default ServicePort;

