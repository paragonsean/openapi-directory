/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeUsageData model module.
 * @module model/VolumeUsageData
 * @version 0.4.27
 */
class VolumeUsageData {
    /**
     * Constructs a new <code>VolumeUsageData</code>.
     * VolumeUsageData Usage details about the volume. This information is used by the &#x60;GET /system/df&#x60; endpoint, and omitted in other endpoints.
     * @alias module:model/VolumeUsageData
     * @param refCount {Number} The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available.
     * @param size {Number} Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")
     */
    constructor(refCount, size) { 
        
        VolumeUsageData.initialize(this, refCount, size);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, refCount, size) { 
        obj['RefCount'] = refCount;
        obj['Size'] = size;
    }

    /**
     * Constructs a <code>VolumeUsageData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeUsageData} obj Optional instance to populate.
     * @return {module:model/VolumeUsageData} The populated <code>VolumeUsageData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeUsageData();

            if (data.hasOwnProperty('RefCount')) {
                obj['RefCount'] = ApiClient.convertToType(data['RefCount'], 'Number');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeUsageData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeUsageData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VolumeUsageData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

VolumeUsageData.RequiredProperties = ["RefCount", "Size"];

/**
 * The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available.
 * @member {Number} RefCount
 */
VolumeUsageData.prototype['RefCount'] = undefined;

/**
 * Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")
 * @member {Number} Size
 */
VolumeUsageData.prototype['Size'] = undefined;






export default VolumeUsageData;

