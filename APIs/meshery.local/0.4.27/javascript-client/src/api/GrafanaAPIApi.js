/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Grafana from '../model/Grafana';
import GrafanaBoard from '../model/GrafanaBoard';
import GrafanaConfigParams from '../model/GrafanaConfigParams';
import Service from '../model/Service';

/**
* GrafanaAPI service.
* @module api/GrafanaAPIApi
* @version 0.4.27
*/
export default class GrafanaAPIApi {

    /**
    * Constructs a new GrafanaAPIApi. 
    * @alias module:api/GrafanaAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeleteGrafanaConfig operation.
     * @callback module:api/GrafanaAPIApi~idDeleteGrafanaConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle DELETE request for Grafana configuration
     * Used for Delete Grafana configuration
     * @param {module:api/GrafanaAPIApi~idDeleteGrafanaConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeleteGrafanaConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetGrafana operation.
     * @callback module:api/GrafanaAPIApi~idGetGrafanaCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [Service]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Grafana
     * Fetches and returns Grafana
     * @param {module:api/GrafanaAPIApi~idGetGrafanaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [Service]}>}
     */
    idGetGrafana(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': [Service]};
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/scan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetGrafanaBoards operation.
     * @callback module:api/GrafanaAPIApi~idGetGrafanaBoardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GrafanaBoard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Grafana boards
     * Used for fetching Grafana boards and panels
     * @param {Object} opts Optional parameters
     * @param {String} [dashboardSearch] 
     * @param {module:api/GrafanaAPIApi~idGetGrafanaBoardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GrafanaBoard>}
     */
    idGetGrafanaBoards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'dashboardSearch': opts['dashboardSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GrafanaBoard];
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetGrafanaConfig operation.
     * @callback module:api/GrafanaAPIApi~idGetGrafanaConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Grafana} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Grafana configuration
     * Used for fetching Grafana configuration
     * @param {module:api/GrafanaAPIApi~idGetGrafanaConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Grafana}
     */
    idGetGrafanaConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Grafana;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetGrafanaPing operation.
     * @callback module:api/GrafanaAPIApi~idGetGrafanaPingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Grafana ping
     * Used to initiate a Grafana ping
     * @param {module:api/GrafanaAPIApi~idGetGrafanaPingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetGrafanaPing(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetGrafanaQuery operation.
     * @callback module:api/GrafanaAPIApi~idGetGrafanaQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Grafana queries
     * Used for handling Grafana queries
     * @param {module:api/GrafanaAPIApi~idGetGrafanaQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetGrafanaQuery(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostGrafanaBoards operation.
     * @callback module:api/GrafanaAPIApi~idPostGrafanaBoardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for Grafana boards
     * Used for persist Grafana boards and panel selections
     * @param {module:api/GrafanaAPIApi~idPostGrafanaBoardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostGrafanaBoards(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/boards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostGrafanaConfig operation.
     * @callback module:api/GrafanaAPIApi~idPostGrafanaConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for Grafana configuration
     * Used for persisting Grafana configuration
     * @param {module:model/GrafanaConfigParams} grafanaConfigParams 
     * @param {module:api/GrafanaAPIApi~idPostGrafanaConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostGrafanaConfig(grafanaConfigParams, callback) {
      let postBody = grafanaConfigParams;
      // verify the required parameter 'grafanaConfigParams' is set
      if (grafanaConfigParams === undefined || grafanaConfigParams === null) {
        throw new Error("Missing the required parameter 'grafanaConfigParams' when calling idPostGrafanaConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/grafana/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
