/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GrafanaBoard from '../model/GrafanaBoard';
import Prometheus from '../model/Prometheus';
import SelectedGrafanaConfig from '../model/SelectedGrafanaConfig';

/**
* PrometheusAPI service.
* @module api/PrometheusAPIApi
* @version 0.4.27
*/
export default class PrometheusAPIApi {

    /**
    * Constructs a new PrometheusAPIApi. 
    * @alias module:api/PrometheusAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeletePrometheusConfig operation.
     * @callback module:api/PrometheusAPIApi~idDeletePrometheusConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle DELETE for Prometheus configuration
     * Used for deleting Prometheus configuration
     * @param {module:api/PrometheusAPIApi~idDeletePrometheusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeletePrometheusConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPrometheusConfig operation.
     * @callback module:api/PrometheusAPIApi~idGetPrometheusConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prometheus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET for Prometheus configuration
     * Used for fetching Prometheus configuration
     * @param {module:api/PrometheusAPIApi~idGetPrometheusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prometheus}
     */
    idGetPrometheusConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prometheus;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPrometheusPing operation.
     * @callback module:api/PrometheusAPIApi~idGetPrometheusPingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Prometheus Ping
     * Used to ping prometheus
     * @param {module:api/PrometheusAPIApi~idGetPrometheusPingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetPrometheusPing(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPrometheusQuery operation.
     * @callback module:api/PrometheusAPIApi~idGetPrometheusQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Prometheus Query
     * Used to prometheus queries
     * @param {module:api/PrometheusAPIApi~idGetPrometheusQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetPrometheusQuery(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPrometheusStaticBoard operation.
     * @callback module:api/PrometheusAPIApi~idGetPrometheusStaticBoardCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: GrafanaBoard}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for Prometheus static board
     * Used to fetch the static board
     * @param {module:api/PrometheusAPIApi~idGetPrometheusStaticBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: GrafanaBoard}>}
     */
    idGetPrometheusStaticBoard(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': GrafanaBoard};
      return this.apiClient.callApi(
        '/api/telemetry/metrics/static-board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostPrometheusBoard operation.
     * @callback module:api/PrometheusAPIApi~idPostPrometheusBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for Prometheus board
     * Used to persist selected board and panels
     * @param {Array.<module:model/SelectedGrafanaConfig>} selectedGrafanaConfig 
     * @param {module:api/PrometheusAPIApi~idPostPrometheusBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostPrometheusBoard(selectedGrafanaConfig, callback) {
      let postBody = selectedGrafanaConfig;
      // verify the required parameter 'selectedGrafanaConfig' is set
      if (selectedGrafanaConfig === undefined || selectedGrafanaConfig === null) {
        throw new Error("Missing the required parameter 'selectedGrafanaConfig' when calling idPostPrometheusBoard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/boards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostPrometheusBoardImport operation.
     * @callback module:api/PrometheusAPIApi~idPostPrometheusBoardImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrafanaBoard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for Prometheus board import
     * Used for importing Grafana board for Prometheus
     * @param {module:api/PrometheusAPIApi~idPostPrometheusBoardImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrafanaBoard}
     */
    idPostPrometheusBoardImport(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GrafanaBoard;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/board_import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostPrometheusConfig operation.
     * @callback module:api/PrometheusAPIApi~idPostPrometheusConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST for Prometheus configuration
     * Used for persisting Prometheus configuration
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/PrometheusAPIApi~idPostPrometheusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostPrometheusConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/telemetry/metrics/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
