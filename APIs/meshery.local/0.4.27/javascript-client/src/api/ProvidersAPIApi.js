/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProviderProperties from '../model/ProviderProperties';

/**
* ProvidersAPI service.
* @module api/ProvidersAPIApi
* @version 0.4.27
*/
export default class ProvidersAPIApi {

    /**
    * Constructs a new ProvidersAPIApi. 
    * @alias module:api/ProvidersAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idChoiceProvider operation.
     * @callback module:api/ProvidersAPIApi~idChoiceProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for the choice of provider
     * Update the choice of provider in system
     * @param {Object} opts Optional parameters
     * @param {String} [provider] 
     * @param {module:api/ProvidersAPIApi~idChoiceProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idChoiceProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'provider': opts['provider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetProviderCapabilities operation.
     * @callback module:api/ProvidersAPIApi~idGetProviderCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET requests for Provider
     * Returns the capabilities.json for the provider
     * @param {module:api/ProvidersAPIApi~idGetProviderCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetProviderCapabilities(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/provider/capabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetProvidersList operation.
     * @callback module:api/ProvidersAPIApi~idGetProvidersListCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: ProviderProperties}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for list of providers
     * Returns the available list of providers
     * @param {module:api/ProvidersAPIApi~idGetProvidersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: ProviderProperties}>}
     */
    idGetProvidersList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ProviderProperties};
      return this.apiClient.callApi(
        '/api/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idProvider operation.
     * @callback module:api/ProvidersAPIApi~idProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request to provider UI
     * Servers providers UI
     * @param {module:api/ProvidersAPIApi~idProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idProvider(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/provider', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idReactComponents operation.
     * @callback module:api/ProvidersAPIApi~idReactComponentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for React Components
     * handles the requests to serve react components from the provider package
     * @param {module:api/ProvidersAPIApi~idReactComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idReactComponents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/provider/extension', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
