/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PerformanceProfile from '../model/PerformanceProfile';
import PerformanceProfileParameters from '../model/PerformanceProfileParameters';
import PerformanceProfilesAPIResponse from '../model/PerformanceProfilesAPIResponse';
import PerformanceResultsAPIResponse from '../model/PerformanceResultsAPIResponse';

/**
* PerformanceAPI service.
* @module api/PerformanceAPIApi
* @version 0.4.27
*/
export default class PerformanceAPIApi {

    /**
    * Constructs a new PerformanceAPIApi. 
    * @alias module:api/PerformanceAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeletePerformanceProfile operation.
     * @callback module:api/PerformanceAPIApi~idDeletePerformanceProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Delete requests for performance profiles
     * Deletes a performance profile with the given id
     * @param {String} id id for a specific
     * @param {module:api/PerformanceAPIApi~idDeletePerformanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeletePerformanceProfile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idDeletePerformanceProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/performance/profiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGETProfileResults operation.
     * @callback module:api/PerformanceAPIApi~idGETProfileResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResultsAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for results of a profile
     * Fetchs pages of results from Remote Provider for the given id
     * @param {String} id id for a specific
     * @param {module:api/PerformanceAPIApi~idGETProfileResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResultsAPIResponse}
     */
    idGETProfileResults(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idGETProfileResults");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerformanceResultsAPIResponse;
      return this.apiClient.callApi(
        '/api/user/performance/profiles/{id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetAllPerformanceResults operation.
     * @callback module:api/PerformanceAPIApi~idGetAllPerformanceResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResultsAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handles GET requests for performance results
     * Returns pages of all the performance results from Remote Provider
     * @param {module:api/PerformanceAPIApi~idGetAllPerformanceResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResultsAPIResponse}
     */
    idGetAllPerformanceResults(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerformanceResultsAPIResponse;
      return this.apiClient.callApi(
        '/api/user/performance/profiles/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPerformanceProfiles operation.
     * @callback module:api/PerformanceAPIApi~idGetPerformanceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceProfilesAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET requests for performance profiles
     * Returns the list of all the performance profiles saved by the current user
     * @param {module:api/PerformanceAPIApi~idGetPerformanceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceProfilesAPIResponse}
     */
    idGetPerformanceProfiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerformanceProfilesAPIResponse;
      return this.apiClient.callApi(
        '/api/user/performance/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetSinglePerformanceProfile operation.
     * @callback module:api/PerformanceAPIApi~idGetSinglePerformanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET requests for performance results of a profile
     * Returns single performance profile with the given id
     * @param {String} id id for a specific
     * @param {module:api/PerformanceAPIApi~idGetSinglePerformanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceProfile}
     */
    idGetSinglePerformanceProfile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idGetSinglePerformanceProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerformanceProfile;
      return this.apiClient.callApi(
        '/api/user/performance/profiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idRunPerformanceTest operation.
     * @callback module:api/PerformanceAPIApi~idRunPerformanceTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request to run a performance test
     * Runs the load test with the given parameters
     * @param {String} id Automatically added
     * @param {module:api/PerformanceAPIApi~idRunPerformanceTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idRunPerformanceTest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idRunPerformanceTest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/performance/profiles/{id}/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idSavePerformanceProfile operation.
     * @callback module:api/PerformanceAPIApi~idSavePerformanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST requests for saving performance profile
     * Save performance profile using the current provider's persistence mechanism
     * @param {Object} opts Optional parameters
     * @param {module:model/PerformanceProfileParameters} [performanceProfileParameters] 
     * @param {module:api/PerformanceAPIApi~idSavePerformanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceProfile}
     */
    idSavePerformanceProfile(opts, callback) {
      opts = opts || {};
      let postBody = opts['performanceProfileParameters'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PerformanceProfile;
      return this.apiClient.callApi(
        '/api/user/performance/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
