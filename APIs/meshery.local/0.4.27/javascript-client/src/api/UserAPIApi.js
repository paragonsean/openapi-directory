/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PerformanceTestConfig from '../model/PerformanceTestConfig';
import Preference from '../model/Preference';

/**
* UserAPI service.
* @module api/UserAPIApi
* @version 0.4.27
*/
export default class UserAPIApi {

    /**
    * Constructs a new UserAPIApi. 
    * @alias module:api/UserAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeleteLoadPreferences operation.
     * @callback module:api/UserAPIApi~idDeleteLoadPreferencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle DELETE request for load test preferences
     * Used for deleting load test preferences
     * @param {Object} opts Optional parameters
     * @param {String} [uuid] 
     * @param {module:api/UserAPIApi~idDeleteLoadPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeleteLoadPreferences(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uuid': opts['uuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/prefs/perf', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetLoadPreferences operation.
     * @callback module:api/UserAPIApi~idGetLoadPreferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceTestConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for load test preferences
     * Used for fetching load test preferences
     * @param {Object} opts Optional parameters
     * @param {String} [uuid] 
     * @param {module:api/UserAPIApi~idGetLoadPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceTestConfig}
     */
    idGetLoadPreferences(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uuid': opts['uuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PerformanceTestConfig;
      return this.apiClient.callApi(
        '/api/user/prefs/perf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetTokenProvider operation.
     * @callback module:api/UserAPIApi~idGetTokenProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for tokens
     * Returns token from the actual provider in a file resposese: 200:
     * @param {module:api/UserAPIApi~idGetTokenProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetTokenProvider(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetUserLogin operation.
     * @callback module:api/UserAPIApi~idGetUserLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handlers GET request for User login
     * Redirects user for auth or issues session
     * @param {module:api/UserAPIApi~idGetUserLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetUserLogin(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetUserLogout operation.
     * @callback module:api/UserAPIApi~idGetUserLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handlers GET request for User logout
     * Redirects user for auth or issues session
     * @param {module:api/UserAPIApi~idGetUserLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGetUserLogout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetUserTestPrefs operation.
     * @callback module:api/UserAPIApi~idGetUserTestPrefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Preference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET for User Load Test Preferences
     * Returns User Load Test Preferences
     * @param {module:api/UserAPIApi~idGetUserTestPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Preference}
     */
    idGetUserTestPrefs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Preference;
      return this.apiClient.callApi(
        '/api/user/prefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostLoadPreferences operation.
     * @callback module:api/UserAPIApi~idPostLoadPreferencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for load test preferences
     * Used for persisting load test preferences
     * @param {Object} opts Optional parameters
     * @param {module:model/PerformanceTestConfig} [performanceTestConfig] 
     * @param {module:api/UserAPIApi~idPostLoadPreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostLoadPreferences(opts, callback) {
      opts = opts || {};
      let postBody = opts['performanceTestConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/prefs/perf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostTokenProvider operation.
     * @callback module:api/UserAPIApi~idPostTokenProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for tokens
     * Receives token from the actual provider resposese: 200:
     * @param {module:api/UserAPIApi~idPostTokenProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostTokenProvider(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostUserTestPrefs operation.
     * @callback module:api/UserAPIApi~idPostUserTestPrefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Preference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET for User Load Test Preferences
     * Updates User Load Test Preferences
     * @param {module:api/UserAPIApi~idPostUserTestPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Preference}
     */
    idPostUserTestPrefs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Preference;
      return this.apiClient.callApi(
        '/api/user/prefs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
