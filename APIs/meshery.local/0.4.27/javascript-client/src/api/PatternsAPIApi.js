/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MesheryPattern from '../model/MesheryPattern';
import PatternsAPIResponse from '../model/PatternsAPIResponse';

/**
* PatternsAPI service.
* @module api/PatternsAPIApi
* @version 0.4.27
*/
export default class PatternsAPIApi {

    /**
    * Constructs a new PatternsAPIApi. 
    * @alias module:api/PatternsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeleteDeployPattern operation.
     * @callback module:api/PatternsAPIApi~idDeleteDeployPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle DELETE request for Pattern Deploy
     * Delete a deployed pattern with the request
     * @param {module:api/PatternsAPIApi~idDeleteDeployPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeleteDeployPattern(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pattern/deploy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idDeleteMesheryPattern operation.
     * @callback module:api/PatternsAPIApi~idDeleteMesheryPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Delete for a Meshery Pattern
     * Deletes a meshery pattern with ID: id
     * @param {String} id id for a specific
     * @param {module:api/PatternsAPIApi~idDeleteMesheryPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeleteMesheryPattern(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idDeleteMesheryPattern");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pattern/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGETOAMMesheryPattern operation.
     * @callback module:api/PatternsAPIApi~idGETOAMMesheryPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handles the get requests for the OAM objects
     * Getting list of workloads/traits/scopes  {type} being of either trait, scope, workload; registration of adapter capabilities.
     * @param {String} type Automatically added
     * @param {module:api/PatternsAPIApi~idGETOAMMesheryPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idGETOAMMesheryPattern(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling idGETOAMMesheryPattern");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/oam/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetMesheryPattern operation.
     * @callback module:api/PatternsAPIApi~idGetMesheryPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MesheryPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET for a Meshery Pattern
     * Fetches the pattern with the given id
     * @param {String} id id for a specific
     * @param {module:api/PatternsAPIApi~idGetMesheryPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MesheryPattern}
     */
    idGetMesheryPattern(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idGetMesheryPattern");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MesheryPattern;
      return this.apiClient.callApi(
        '/api/pattern/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetPatternFiles operation.
     * @callback module:api/PatternsAPIApi~idGetPatternFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatternsAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for patterns
     * Returns the list of all the patterns saved by the current user This will return all the patterns with their details
     * @param {module:api/PatternsAPIApi~idGetPatternFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatternsAPIResponse}
     */
    idGetPatternFiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PatternsAPIResponse;
      return this.apiClient.callApi(
        '/api/pattern', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPOSTOAMMesheryPattern operation.
     * @callback module:api/PatternsAPIApi~idPOSTOAMMesheryPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handles registering OMA objects
     * Adding a workload/trait/scope  {type} being of either trait, scope, workload; registration of adapter capabilities.
     * @param {String} type Automatically added
     * @param {module:api/PatternsAPIApi~idPOSTOAMMesheryPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPOSTOAMMesheryPattern(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling idPOSTOAMMesheryPattern");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/oam/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostDeployPattern operation.
     * @callback module:api/PatternsAPIApi~idPostDeployPatternCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST request for Pattern Deploy
     * Deploy an attached pattern with the request
     * @param {Object} opts Optional parameters
     * @param {File} [uploadYamlYmlFile] 
     * @param {module:api/PatternsAPIApi~idPostDeployPatternCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idPostDeployPattern(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Upload Yaml/Yml File': opts['uploadYamlYmlFile']
      };

      let authNames = ['token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pattern/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostPatternFile operation.
     * @callback module:api/PatternsAPIApi~idPostPatternFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MesheryPattern} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST requests for patterns
     * Edit/update a meshery pattern
     * @param {module:api/PatternsAPIApi~idPostPatternFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MesheryPattern}
     */
    idPostPatternFile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MesheryPattern;
      return this.apiClient.callApi(
        '/api/pattern', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
