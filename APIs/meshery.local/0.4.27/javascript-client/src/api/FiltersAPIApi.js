/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FiltersAPIResponse from '../model/FiltersAPIResponse';
import MesheryFilter from '../model/MesheryFilter';

/**
* FiltersAPI service.
* @module api/FiltersAPIApi
* @version 0.4.27
*/
export default class FiltersAPIApi {

    /**
    * Constructs a new FiltersAPIApi. 
    * @alias module:api/FiltersAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the idDeleteMesheryFilter operation.
     * @callback module:api/FiltersAPIApi~idDeleteMesheryFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle Delete for a Meshery Filter
     * Deletes a meshery filter with ID: id
     * @param {String} id id for a specific
     * @param {module:api/FiltersAPIApi~idDeleteMesheryFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idDeleteMesheryFilter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idDeleteMesheryFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/filter/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetFilterFile operation.
     * @callback module:api/FiltersAPIApi~idGetFilterFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for all filters
     * Returns all the Meshery Filters saved by the current user
     * @param {module:api/FiltersAPIApi~idGetFilterFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersAPIResponse}
     */
    idGetFilterFile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FiltersAPIResponse;
      return this.apiClient.callApi(
        '/api/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetFilterFiles operation.
     * @callback module:api/FiltersAPIApi~idGetFilterFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MesheryFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for filter file with given id
     * Returns the Meshery Filter file saved by the current user with the given id
     * @param {String} id Automatically added
     * @param {module:api/FiltersAPIApi~idGetFilterFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MesheryFilter}
     */
    idGetFilterFiles(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idGetFilterFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MesheryFilter;
      return this.apiClient.callApi(
        '/api/filter/file/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idGetMesheryFilter operation.
     * @callback module:api/FiltersAPIApi~idGetMesheryFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MesheryFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle GET request for a Meshery Filter
     * Fetches the Meshery Filter with the given id
     * @param {String} id id for a specific
     * @param {module:api/FiltersAPIApi~idGetMesheryFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MesheryFilter}
     */
    idGetMesheryFilter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling idGetMesheryFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MesheryFilter;
      return this.apiClient.callApi(
        '/api/filter/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idPostFilterFile operation.
     * @callback module:api/FiltersAPIApi~idPostFilterFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MesheryFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle POST requests for Meshery Filters
     * Used to save/update a Meshery Filter
     * @param {module:api/FiltersAPIApi~idPostFilterFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MesheryFilter}
     */
    idPostFilterFile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MesheryFilter;
      return this.apiClient.callApi(
        '/api/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
