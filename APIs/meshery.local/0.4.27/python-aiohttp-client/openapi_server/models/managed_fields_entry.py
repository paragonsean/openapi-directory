# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedFieldsEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, fields_type: str=None, fields_v1: object=None, manager: str=None, operation: str=None, time: object=None):
        """ManagedFieldsEntry - a model defined in OpenAPI

        :param api_version: The api_version of this ManagedFieldsEntry.
        :param fields_type: The fields_type of this ManagedFieldsEntry.
        :param fields_v1: The fields_v1 of this ManagedFieldsEntry.
        :param manager: The manager of this ManagedFieldsEntry.
        :param operation: The operation of this ManagedFieldsEntry.
        :param time: The time of this ManagedFieldsEntry.
        """
        self.openapi_types = {
            'api_version': str,
            'fields_type': str,
            'fields_v1': object,
            'manager': str,
            'operation': str,
            'time': object
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'fields_type': 'fieldsType',
            'fields_v1': 'fieldsV1',
            'manager': 'manager',
            'operation': 'operation',
            'time': 'time'
        }

        self._api_version = api_version
        self._fields_type = fields_type
        self._fields_v1 = fields_v1
        self._manager = manager
        self._operation = operation
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedFieldsEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedFieldsEntry of this ManagedFieldsEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this ManagedFieldsEntry.

        APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.

        :return: The api_version of this ManagedFieldsEntry.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ManagedFieldsEntry.

        APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.

        :param api_version: The api_version of this ManagedFieldsEntry.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def fields_type(self):
        """Gets the fields_type of this ManagedFieldsEntry.

        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"

        :return: The fields_type of this ManagedFieldsEntry.
        :rtype: str
        """
        return self._fields_type

    @fields_type.setter
    def fields_type(self, fields_type):
        """Sets the fields_type of this ManagedFieldsEntry.

        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"

        :param fields_type: The fields_type of this ManagedFieldsEntry.
        :type fields_type: str
        """

        self._fields_type = fields_type

    @property
    def fields_v1(self):
        """Gets the fields_v1 of this ManagedFieldsEntry.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff

        :return: The fields_v1 of this ManagedFieldsEntry.
        :rtype: object
        """
        return self._fields_v1

    @fields_v1.setter
    def fields_v1(self, fields_v1):
        """Sets the fields_v1 of this ManagedFieldsEntry.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff

        :param fields_v1: The fields_v1 of this ManagedFieldsEntry.
        :type fields_v1: object
        """

        self._fields_v1 = fields_v1

    @property
    def manager(self):
        """Gets the manager of this ManagedFieldsEntry.

        Manager is an identifier of the workflow managing these fields.

        :return: The manager of this ManagedFieldsEntry.
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this ManagedFieldsEntry.

        Manager is an identifier of the workflow managing these fields.

        :param manager: The manager of this ManagedFieldsEntry.
        :type manager: str
        """

        self._manager = manager

    @property
    def operation(self):
        """Gets the operation of this ManagedFieldsEntry.


        :return: The operation of this ManagedFieldsEntry.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ManagedFieldsEntry.


        :param operation: The operation of this ManagedFieldsEntry.
        :type operation: str
        """

        self._operation = operation

    @property
    def time(self):
        """Gets the time of this ManagedFieldsEntry.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The time of this ManagedFieldsEntry.
        :rtype: object
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ManagedFieldsEntry.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param time: The time of this ManagedFieldsEntry.
        :type time: object
        """

        self._time = time
