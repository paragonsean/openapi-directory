# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Legend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, align_as_table: bool=None, avg: bool=None, current: bool=None, hide_empty: bool=None, hide_zero: bool=None, max: bool=None, min: bool=None, right_side: bool=None, show: bool=None, side_width: int=None, total: bool=None, values: bool=None):
        """Legend - a model defined in OpenAPI

        :param align_as_table: The align_as_table of this Legend.
        :param avg: The avg of this Legend.
        :param current: The current of this Legend.
        :param hide_empty: The hide_empty of this Legend.
        :param hide_zero: The hide_zero of this Legend.
        :param max: The max of this Legend.
        :param min: The min of this Legend.
        :param right_side: The right_side of this Legend.
        :param show: The show of this Legend.
        :param side_width: The side_width of this Legend.
        :param total: The total of this Legend.
        :param values: The values of this Legend.
        """
        self.openapi_types = {
            'align_as_table': bool,
            'avg': bool,
            'current': bool,
            'hide_empty': bool,
            'hide_zero': bool,
            'max': bool,
            'min': bool,
            'right_side': bool,
            'show': bool,
            'side_width': int,
            'total': bool,
            'values': bool
        }

        self.attribute_map = {
            'align_as_table': 'alignAsTable',
            'avg': 'avg',
            'current': 'current',
            'hide_empty': 'hideEmpty',
            'hide_zero': 'hideZero',
            'max': 'max',
            'min': 'min',
            'right_side': 'rightSide',
            'show': 'show',
            'side_width': 'sideWidth',
            'total': 'total',
            'values': 'values'
        }

        self._align_as_table = align_as_table
        self._avg = avg
        self._current = current
        self._hide_empty = hide_empty
        self._hide_zero = hide_zero
        self._max = max
        self._min = min
        self._right_side = right_side
        self._show = show
        self._side_width = side_width
        self._total = total
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Legend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Legend of this Legend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def align_as_table(self):
        """Gets the align_as_table of this Legend.


        :return: The align_as_table of this Legend.
        :rtype: bool
        """
        return self._align_as_table

    @align_as_table.setter
    def align_as_table(self, align_as_table):
        """Sets the align_as_table of this Legend.


        :param align_as_table: The align_as_table of this Legend.
        :type align_as_table: bool
        """

        self._align_as_table = align_as_table

    @property
    def avg(self):
        """Gets the avg of this Legend.


        :return: The avg of this Legend.
        :rtype: bool
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this Legend.


        :param avg: The avg of this Legend.
        :type avg: bool
        """

        self._avg = avg

    @property
    def current(self):
        """Gets the current of this Legend.


        :return: The current of this Legend.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Legend.


        :param current: The current of this Legend.
        :type current: bool
        """

        self._current = current

    @property
    def hide_empty(self):
        """Gets the hide_empty of this Legend.


        :return: The hide_empty of this Legend.
        :rtype: bool
        """
        return self._hide_empty

    @hide_empty.setter
    def hide_empty(self, hide_empty):
        """Sets the hide_empty of this Legend.


        :param hide_empty: The hide_empty of this Legend.
        :type hide_empty: bool
        """

        self._hide_empty = hide_empty

    @property
    def hide_zero(self):
        """Gets the hide_zero of this Legend.


        :return: The hide_zero of this Legend.
        :rtype: bool
        """
        return self._hide_zero

    @hide_zero.setter
    def hide_zero(self, hide_zero):
        """Sets the hide_zero of this Legend.


        :param hide_zero: The hide_zero of this Legend.
        :type hide_zero: bool
        """

        self._hide_zero = hide_zero

    @property
    def max(self):
        """Gets the max of this Legend.


        :return: The max of this Legend.
        :rtype: bool
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Legend.


        :param max: The max of this Legend.
        :type max: bool
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this Legend.


        :return: The min of this Legend.
        :rtype: bool
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this Legend.


        :param min: The min of this Legend.
        :type min: bool
        """

        self._min = min

    @property
    def right_side(self):
        """Gets the right_side of this Legend.


        :return: The right_side of this Legend.
        :rtype: bool
        """
        return self._right_side

    @right_side.setter
    def right_side(self, right_side):
        """Sets the right_side of this Legend.


        :param right_side: The right_side of this Legend.
        :type right_side: bool
        """

        self._right_side = right_side

    @property
    def show(self):
        """Gets the show of this Legend.


        :return: The show of this Legend.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this Legend.


        :param show: The show of this Legend.
        :type show: bool
        """

        self._show = show

    @property
    def side_width(self):
        """Gets the side_width of this Legend.


        :return: The side_width of this Legend.
        :rtype: int
        """
        return self._side_width

    @side_width.setter
    def side_width(self, side_width):
        """Sets the side_width of this Legend.


        :param side_width: The side_width of this Legend.
        :type side_width: int
        """

        self._side_width = side_width

    @property
    def total(self):
        """Gets the total of this Legend.


        :return: The total of this Legend.
        :rtype: bool
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Legend.


        :param total: The total of this Legend.
        :type total: bool
        """

        self._total = total

    @property
    def values(self):
        """Gets the values of this Legend.


        :return: The values of this Legend.
        :rtype: bool
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Legend.


        :param values: The values of this Legend.
        :type values: bool
        """

        self._values = values
