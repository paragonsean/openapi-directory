# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runner_results_duration_histogram import RunnerResultsDurationHistogram
from openapi_server import util


class RunnerResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_duration: int=None, actual_qps: float=None, duration_histogram: RunnerResultsDurationHistogram=None, start_time: datetime=None, url: str=None, load_generator: str=None):
        """RunnerResults - a model defined in OpenAPI

        :param actual_duration: The actual_duration of this RunnerResults.
        :param actual_qps: The actual_qps of this RunnerResults.
        :param duration_histogram: The duration_histogram of this RunnerResults.
        :param start_time: The start_time of this RunnerResults.
        :param url: The url of this RunnerResults.
        :param load_generator: The load_generator of this RunnerResults.
        """
        self.openapi_types = {
            'actual_duration': int,
            'actual_qps': float,
            'duration_histogram': RunnerResultsDurationHistogram,
            'start_time': datetime,
            'url': str,
            'load_generator': str
        }

        self.attribute_map = {
            'actual_duration': 'ActualDuration',
            'actual_qps': 'ActualQPS',
            'duration_histogram': 'DurationHistogram',
            'start_time': 'StartTime',
            'url': 'URL',
            'load_generator': 'load-generator'
        }

        self._actual_duration = actual_duration
        self._actual_qps = actual_qps
        self._duration_histogram = duration_histogram
        self._start_time = start_time
        self._url = url
        self._load_generator = load_generator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunnerResults of this RunnerResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_duration(self):
        """Gets the actual_duration of this RunnerResults.


        :return: The actual_duration of this RunnerResults.
        :rtype: int
        """
        return self._actual_duration

    @actual_duration.setter
    def actual_duration(self, actual_duration):
        """Sets the actual_duration of this RunnerResults.


        :param actual_duration: The actual_duration of this RunnerResults.
        :type actual_duration: int
        """

        self._actual_duration = actual_duration

    @property
    def actual_qps(self):
        """Gets the actual_qps of this RunnerResults.


        :return: The actual_qps of this RunnerResults.
        :rtype: float
        """
        return self._actual_qps

    @actual_qps.setter
    def actual_qps(self, actual_qps):
        """Sets the actual_qps of this RunnerResults.


        :param actual_qps: The actual_qps of this RunnerResults.
        :type actual_qps: float
        """

        self._actual_qps = actual_qps

    @property
    def duration_histogram(self):
        """Gets the duration_histogram of this RunnerResults.


        :return: The duration_histogram of this RunnerResults.
        :rtype: RunnerResultsDurationHistogram
        """
        return self._duration_histogram

    @duration_histogram.setter
    def duration_histogram(self, duration_histogram):
        """Sets the duration_histogram of this RunnerResults.


        :param duration_histogram: The duration_histogram of this RunnerResults.
        :type duration_histogram: RunnerResultsDurationHistogram
        """

        self._duration_histogram = duration_histogram

    @property
    def start_time(self):
        """Gets the start_time of this RunnerResults.


        :return: The start_time of this RunnerResults.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunnerResults.


        :param start_time: The start_time of this RunnerResults.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def url(self):
        """Gets the url of this RunnerResults.


        :return: The url of this RunnerResults.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RunnerResults.


        :param url: The url of this RunnerResults.
        :type url: str
        """

        self._url = url

    @property
    def load_generator(self):
        """Gets the load_generator of this RunnerResults.


        :return: The load_generator of this RunnerResults.
        :rtype: str
        """
        return self._load_generator

    @load_generator.setter
    def load_generator(self, load_generator):
        """Sets the load_generator of this RunnerResults.


        :param load_generator: The load_generator of this RunnerResults.
        :type load_generator: str
        """

        self._load_generator = load_generator
