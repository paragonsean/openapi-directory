# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticateOKBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_token: str=None, status: str=None):
        """AuthenticateOKBody - a model defined in OpenAPI

        :param identity_token: The identity_token of this AuthenticateOKBody.
        :param status: The status of this AuthenticateOKBody.
        """
        self.openapi_types = {
            'identity_token': str,
            'status': str
        }

        self.attribute_map = {
            'identity_token': 'IdentityToken',
            'status': 'Status'
        }

        self._identity_token = identity_token
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticateOKBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticateOKBody of this AuthenticateOKBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_token(self):
        """Gets the identity_token of this AuthenticateOKBody.

        An opaque token used to authenticate a user after a successful login

        :return: The identity_token of this AuthenticateOKBody.
        :rtype: str
        """
        return self._identity_token

    @identity_token.setter
    def identity_token(self, identity_token):
        """Sets the identity_token of this AuthenticateOKBody.

        An opaque token used to authenticate a user after a successful login

        :param identity_token: The identity_token of this AuthenticateOKBody.
        :type identity_token: str
        """
        if identity_token is None:
            raise ValueError("Invalid value for `identity_token`, must not be `None`")

        self._identity_token = identity_token

    @property
    def status(self):
        """Gets the status of this AuthenticateOKBody.

        The status of the authentication

        :return: The status of this AuthenticateOKBody.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthenticateOKBody.

        The status of the authentication

        :param status: The status of this AuthenticateOKBody.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
