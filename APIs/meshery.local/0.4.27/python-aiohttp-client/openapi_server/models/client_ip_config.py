# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientIPConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timeout_seconds: int=None):
        """ClientIPConfig - a model defined in OpenAPI

        :param timeout_seconds: The timeout_seconds of this ClientIPConfig.
        """
        self.openapi_types = {
            'timeout_seconds': int
        }

        self.attribute_map = {
            'timeout_seconds': 'timeoutSeconds'
        }

        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientIPConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientIPConfig of this ClientIPConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this ClientIPConfig.

        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours). +optional

        :return: The timeout_seconds of this ClientIPConfig.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this ClientIPConfig.

        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours). +optional

        :param timeout_seconds: The timeout_seconds of this ClientIPConfig.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
