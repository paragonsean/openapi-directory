# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.k8_s_node import K8SNode
from openapi_server import util


class K8SConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_configured: bool=None, config: List[int]=None, configured_server: str=None, context_name: str=None, in_cluster_config: bool=None, k8sfile: str=None, nodes: List[K8SNode]=None, server_version: str=None):
        """K8SConfig - a model defined in OpenAPI

        :param cluster_configured: The cluster_configured of this K8SConfig.
        :param config: The config of this K8SConfig.
        :param configured_server: The configured_server of this K8SConfig.
        :param context_name: The context_name of this K8SConfig.
        :param in_cluster_config: The in_cluster_config of this K8SConfig.
        :param k8sfile: The k8sfile of this K8SConfig.
        :param nodes: The nodes of this K8SConfig.
        :param server_version: The server_version of this K8SConfig.
        """
        self.openapi_types = {
            'cluster_configured': bool,
            'config': List[int],
            'configured_server': str,
            'context_name': str,
            'in_cluster_config': bool,
            'k8sfile': str,
            'nodes': List[K8SNode],
            'server_version': str
        }

        self.attribute_map = {
            'cluster_configured': 'clusterConfigured',
            'config': 'config',
            'configured_server': 'configuredServer',
            'context_name': 'contextName',
            'in_cluster_config': 'inClusterConfig',
            'k8sfile': 'k8sfile',
            'nodes': 'nodes',
            'server_version': 'server_version'
        }

        self._cluster_configured = cluster_configured
        self._config = config
        self._configured_server = configured_server
        self._context_name = context_name
        self._in_cluster_config = in_cluster_config
        self._k8sfile = k8sfile
        self._nodes = nodes
        self._server_version = server_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'K8SConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The K8SConfig of this K8SConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_configured(self):
        """Gets the cluster_configured of this K8SConfig.


        :return: The cluster_configured of this K8SConfig.
        :rtype: bool
        """
        return self._cluster_configured

    @cluster_configured.setter
    def cluster_configured(self, cluster_configured):
        """Sets the cluster_configured of this K8SConfig.


        :param cluster_configured: The cluster_configured of this K8SConfig.
        :type cluster_configured: bool
        """

        self._cluster_configured = cluster_configured

    @property
    def config(self):
        """Gets the config of this K8SConfig.


        :return: The config of this K8SConfig.
        :rtype: List[int]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this K8SConfig.


        :param config: The config of this K8SConfig.
        :type config: List[int]
        """

        self._config = config

    @property
    def configured_server(self):
        """Gets the configured_server of this K8SConfig.


        :return: The configured_server of this K8SConfig.
        :rtype: str
        """
        return self._configured_server

    @configured_server.setter
    def configured_server(self, configured_server):
        """Sets the configured_server of this K8SConfig.


        :param configured_server: The configured_server of this K8SConfig.
        :type configured_server: str
        """

        self._configured_server = configured_server

    @property
    def context_name(self):
        """Gets the context_name of this K8SConfig.


        :return: The context_name of this K8SConfig.
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this K8SConfig.


        :param context_name: The context_name of this K8SConfig.
        :type context_name: str
        """

        self._context_name = context_name

    @property
    def in_cluster_config(self):
        """Gets the in_cluster_config of this K8SConfig.


        :return: The in_cluster_config of this K8SConfig.
        :rtype: bool
        """
        return self._in_cluster_config

    @in_cluster_config.setter
    def in_cluster_config(self, in_cluster_config):
        """Sets the in_cluster_config of this K8SConfig.


        :param in_cluster_config: The in_cluster_config of this K8SConfig.
        :type in_cluster_config: bool
        """

        self._in_cluster_config = in_cluster_config

    @property
    def k8sfile(self):
        """Gets the k8sfile of this K8SConfig.


        :return: The k8sfile of this K8SConfig.
        :rtype: str
        """
        return self._k8sfile

    @k8sfile.setter
    def k8sfile(self, k8sfile):
        """Sets the k8sfile of this K8SConfig.


        :param k8sfile: The k8sfile of this K8SConfig.
        :type k8sfile: str
        """

        self._k8sfile = k8sfile

    @property
    def nodes(self):
        """Gets the nodes of this K8SConfig.


        :return: The nodes of this K8SConfig.
        :rtype: List[K8SNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this K8SConfig.


        :param nodes: The nodes of this K8SConfig.
        :type nodes: List[K8SNode]
        """

        self._nodes = nodes

    @property
    def server_version(self):
        """Gets the server_version of this K8SConfig.


        :return: The server_version of this K8SConfig.
        :rtype: str
        """
        return self._server_version

    @server_version.setter
    def server_version(self, server_version):
        """Sets the server_version of this K8SConfig.


        :param server_version: The server_version of this K8SConfig.
        :type server_version: str
        """

        self._server_version = server_version
