# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeCreateBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, driver: str=None, driver_opts: Dict[str, str]=None, labels: Dict[str, str]=None, name: str=None):
        """VolumeCreateBody - a model defined in OpenAPI

        :param driver: The driver of this VolumeCreateBody.
        :param driver_opts: The driver_opts of this VolumeCreateBody.
        :param labels: The labels of this VolumeCreateBody.
        :param name: The name of this VolumeCreateBody.
        """
        self.openapi_types = {
            'driver': str,
            'driver_opts': Dict[str, str],
            'labels': Dict[str, str],
            'name': str
        }

        self.attribute_map = {
            'driver': 'Driver',
            'driver_opts': 'DriverOpts',
            'labels': 'Labels',
            'name': 'Name'
        }

        self._driver = driver
        self._driver_opts = driver_opts
        self._labels = labels
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeCreateBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeCreateBody of this VolumeCreateBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self):
        """Gets the driver of this VolumeCreateBody.

        Name of the volume driver to use.

        :return: The driver of this VolumeCreateBody.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this VolumeCreateBody.

        Name of the volume driver to use.

        :param driver: The driver of this VolumeCreateBody.
        :type driver: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")

        self._driver = driver

    @property
    def driver_opts(self):
        """Gets the driver_opts of this VolumeCreateBody.

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.

        :return: The driver_opts of this VolumeCreateBody.
        :rtype: Dict[str, str]
        """
        return self._driver_opts

    @driver_opts.setter
    def driver_opts(self, driver_opts):
        """Sets the driver_opts of this VolumeCreateBody.

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.

        :param driver_opts: The driver_opts of this VolumeCreateBody.
        :type driver_opts: Dict[str, str]
        """
        if driver_opts is None:
            raise ValueError("Invalid value for `driver_opts`, must not be `None`")

        self._driver_opts = driver_opts

    @property
    def labels(self):
        """Gets the labels of this VolumeCreateBody.

        User-defined key/value metadata.

        :return: The labels of this VolumeCreateBody.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VolumeCreateBody.

        User-defined key/value metadata.

        :param labels: The labels of this VolumeCreateBody.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this VolumeCreateBody.

        The new volume's name. If not specified, Docker generates a name.

        :return: The name of this VolumeCreateBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeCreateBody.

        The new volume's name. If not specified, Docker generates a name.

        :param name: The name of this VolumeCreateBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
