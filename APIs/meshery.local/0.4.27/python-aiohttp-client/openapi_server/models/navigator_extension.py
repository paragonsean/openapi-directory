# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.href import Href
from openapi_server import util


class NavigatorExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[NavigatorExtension]=None, component: str=None, href: Href=None, icon: str=None, link: bool=None, show: bool=None, title: str=None):
        """NavigatorExtension - a model defined in OpenAPI

        :param children: The children of this NavigatorExtension.
        :param component: The component of this NavigatorExtension.
        :param href: The href of this NavigatorExtension.
        :param icon: The icon of this NavigatorExtension.
        :param link: The link of this NavigatorExtension.
        :param show: The show of this NavigatorExtension.
        :param title: The title of this NavigatorExtension.
        """
        self.openapi_types = {
            'children': List[NavigatorExtension],
            'component': str,
            'href': Href,
            'icon': str,
            'link': bool,
            'show': bool,
            'title': str
        }

        self.attribute_map = {
            'children': 'children',
            'component': 'component',
            'href': 'href',
            'icon': 'icon',
            'link': 'link',
            'show': 'show',
            'title': 'title'
        }

        self._children = children
        self._component = component
        self._href = href
        self._icon = icon
        self._link = link
        self._show = show
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NavigatorExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NavigatorExtension of this NavigatorExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this NavigatorExtension.

        NavigatorExtensions is a collection of NavigatorExtension

        :return: The children of this NavigatorExtension.
        :rtype: List[NavigatorExtension]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this NavigatorExtension.

        NavigatorExtensions is a collection of NavigatorExtension

        :param children: The children of this NavigatorExtension.
        :type children: List[NavigatorExtension]
        """

        self._children = children

    @property
    def component(self):
        """Gets the component of this NavigatorExtension.


        :return: The component of this NavigatorExtension.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this NavigatorExtension.


        :param component: The component of this NavigatorExtension.
        :type component: str
        """

        self._component = component

    @property
    def href(self):
        """Gets the href of this NavigatorExtension.


        :return: The href of this NavigatorExtension.
        :rtype: Href
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NavigatorExtension.


        :param href: The href of this NavigatorExtension.
        :type href: Href
        """

        self._href = href

    @property
    def icon(self):
        """Gets the icon of this NavigatorExtension.


        :return: The icon of this NavigatorExtension.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this NavigatorExtension.


        :param icon: The icon of this NavigatorExtension.
        :type icon: str
        """

        self._icon = icon

    @property
    def link(self):
        """Gets the link of this NavigatorExtension.


        :return: The link of this NavigatorExtension.
        :rtype: bool
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this NavigatorExtension.


        :param link: The link of this NavigatorExtension.
        :type link: bool
        """

        self._link = link

    @property
    def show(self):
        """Gets the show of this NavigatorExtension.


        :return: The show of this NavigatorExtension.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this NavigatorExtension.


        :param show: The show of this NavigatorExtension.
        :type show: bool
        """

        self._show = show

    @property
    def title(self):
        """Gets the title of this NavigatorExtension.


        :return: The title of this NavigatorExtension.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NavigatorExtension.


        :param title: The title of this NavigatorExtension.
        :type title: str
        """

        self._title = title
