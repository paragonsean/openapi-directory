# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_config_args import PluginConfigArgs
from openapi_server.models.plugin_config_interface import PluginConfigInterface
from openapi_server.models.plugin_config_linux import PluginConfigLinux
from openapi_server.models.plugin_config_network import PluginConfigNetwork
from openapi_server.models.plugin_config_rootfs import PluginConfigRootfs
from openapi_server.models.plugin_config_user import PluginConfigUser
from openapi_server.models.plugin_env import PluginEnv
from openapi_server.models.plugin_mount import PluginMount
from openapi_server import util


class PluginConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: PluginConfigArgs=None, description: str=None, docker_version: str=None, documentation: str=None, entrypoint: List[str]=None, env: List[PluginEnv]=None, interface: PluginConfigInterface=None, ipc_host: bool=None, linux: PluginConfigLinux=None, mounts: List[PluginMount]=None, network: PluginConfigNetwork=None, pid_host: bool=None, propagated_mount: str=None, user: PluginConfigUser=None, work_dir: str=None, rootfs: PluginConfigRootfs=None):
        """PluginConfig - a model defined in OpenAPI

        :param args: The args of this PluginConfig.
        :param description: The description of this PluginConfig.
        :param docker_version: The docker_version of this PluginConfig.
        :param documentation: The documentation of this PluginConfig.
        :param entrypoint: The entrypoint of this PluginConfig.
        :param env: The env of this PluginConfig.
        :param interface: The interface of this PluginConfig.
        :param ipc_host: The ipc_host of this PluginConfig.
        :param linux: The linux of this PluginConfig.
        :param mounts: The mounts of this PluginConfig.
        :param network: The network of this PluginConfig.
        :param pid_host: The pid_host of this PluginConfig.
        :param propagated_mount: The propagated_mount of this PluginConfig.
        :param user: The user of this PluginConfig.
        :param work_dir: The work_dir of this PluginConfig.
        :param rootfs: The rootfs of this PluginConfig.
        """
        self.openapi_types = {
            'args': PluginConfigArgs,
            'description': str,
            'docker_version': str,
            'documentation': str,
            'entrypoint': List[str],
            'env': List[PluginEnv],
            'interface': PluginConfigInterface,
            'ipc_host': bool,
            'linux': PluginConfigLinux,
            'mounts': List[PluginMount],
            'network': PluginConfigNetwork,
            'pid_host': bool,
            'propagated_mount': str,
            'user': PluginConfigUser,
            'work_dir': str,
            'rootfs': PluginConfigRootfs
        }

        self.attribute_map = {
            'args': 'Args',
            'description': 'Description',
            'docker_version': 'DockerVersion',
            'documentation': 'Documentation',
            'entrypoint': 'Entrypoint',
            'env': 'Env',
            'interface': 'Interface',
            'ipc_host': 'IpcHost',
            'linux': 'Linux',
            'mounts': 'Mounts',
            'network': 'Network',
            'pid_host': 'PidHost',
            'propagated_mount': 'PropagatedMount',
            'user': 'User',
            'work_dir': 'WorkDir',
            'rootfs': 'rootfs'
        }

        self._args = args
        self._description = description
        self._docker_version = docker_version
        self._documentation = documentation
        self._entrypoint = entrypoint
        self._env = env
        self._interface = interface
        self._ipc_host = ipc_host
        self._linux = linux
        self._mounts = mounts
        self._network = network
        self._pid_host = pid_host
        self._propagated_mount = propagated_mount
        self._user = user
        self._work_dir = work_dir
        self._rootfs = rootfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginConfig of this PluginConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this PluginConfig.


        :return: The args of this PluginConfig.
        :rtype: PluginConfigArgs
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this PluginConfig.


        :param args: The args of this PluginConfig.
        :type args: PluginConfigArgs
        """
        if args is None:
            raise ValueError("Invalid value for `args`, must not be `None`")

        self._args = args

    @property
    def description(self):
        """Gets the description of this PluginConfig.

        description

        :return: The description of this PluginConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginConfig.

        description

        :param description: The description of this PluginConfig.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def docker_version(self):
        """Gets the docker_version of this PluginConfig.

        Docker Version used to create the plugin

        :return: The docker_version of this PluginConfig.
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this PluginConfig.

        Docker Version used to create the plugin

        :param docker_version: The docker_version of this PluginConfig.
        :type docker_version: str
        """

        self._docker_version = docker_version

    @property
    def documentation(self):
        """Gets the documentation of this PluginConfig.

        documentation

        :return: The documentation of this PluginConfig.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this PluginConfig.

        documentation

        :param documentation: The documentation of this PluginConfig.
        :type documentation: str
        """
        if documentation is None:
            raise ValueError("Invalid value for `documentation`, must not be `None`")

        self._documentation = documentation

    @property
    def entrypoint(self):
        """Gets the entrypoint of this PluginConfig.

        entrypoint

        :return: The entrypoint of this PluginConfig.
        :rtype: List[str]
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this PluginConfig.

        entrypoint

        :param entrypoint: The entrypoint of this PluginConfig.
        :type entrypoint: List[str]
        """
        if entrypoint is None:
            raise ValueError("Invalid value for `entrypoint`, must not be `None`")

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this PluginConfig.

        env

        :return: The env of this PluginConfig.
        :rtype: List[PluginEnv]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this PluginConfig.

        env

        :param env: The env of this PluginConfig.
        :type env: List[PluginEnv]
        """
        if env is None:
            raise ValueError("Invalid value for `env`, must not be `None`")

        self._env = env

    @property
    def interface(self):
        """Gets the interface of this PluginConfig.


        :return: The interface of this PluginConfig.
        :rtype: PluginConfigInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this PluginConfig.


        :param interface: The interface of this PluginConfig.
        :type interface: PluginConfigInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")

        self._interface = interface

    @property
    def ipc_host(self):
        """Gets the ipc_host of this PluginConfig.

        ipc host

        :return: The ipc_host of this PluginConfig.
        :rtype: bool
        """
        return self._ipc_host

    @ipc_host.setter
    def ipc_host(self, ipc_host):
        """Sets the ipc_host of this PluginConfig.

        ipc host

        :param ipc_host: The ipc_host of this PluginConfig.
        :type ipc_host: bool
        """
        if ipc_host is None:
            raise ValueError("Invalid value for `ipc_host`, must not be `None`")

        self._ipc_host = ipc_host

    @property
    def linux(self):
        """Gets the linux of this PluginConfig.


        :return: The linux of this PluginConfig.
        :rtype: PluginConfigLinux
        """
        return self._linux

    @linux.setter
    def linux(self, linux):
        """Sets the linux of this PluginConfig.


        :param linux: The linux of this PluginConfig.
        :type linux: PluginConfigLinux
        """
        if linux is None:
            raise ValueError("Invalid value for `linux`, must not be `None`")

        self._linux = linux

    @property
    def mounts(self):
        """Gets the mounts of this PluginConfig.

        mounts

        :return: The mounts of this PluginConfig.
        :rtype: List[PluginMount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this PluginConfig.

        mounts

        :param mounts: The mounts of this PluginConfig.
        :type mounts: List[PluginMount]
        """
        if mounts is None:
            raise ValueError("Invalid value for `mounts`, must not be `None`")

        self._mounts = mounts

    @property
    def network(self):
        """Gets the network of this PluginConfig.


        :return: The network of this PluginConfig.
        :rtype: PluginConfigNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PluginConfig.


        :param network: The network of this PluginConfig.
        :type network: PluginConfigNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def pid_host(self):
        """Gets the pid_host of this PluginConfig.

        pid host

        :return: The pid_host of this PluginConfig.
        :rtype: bool
        """
        return self._pid_host

    @pid_host.setter
    def pid_host(self, pid_host):
        """Sets the pid_host of this PluginConfig.

        pid host

        :param pid_host: The pid_host of this PluginConfig.
        :type pid_host: bool
        """
        if pid_host is None:
            raise ValueError("Invalid value for `pid_host`, must not be `None`")

        self._pid_host = pid_host

    @property
    def propagated_mount(self):
        """Gets the propagated_mount of this PluginConfig.

        propagated mount

        :return: The propagated_mount of this PluginConfig.
        :rtype: str
        """
        return self._propagated_mount

    @propagated_mount.setter
    def propagated_mount(self, propagated_mount):
        """Sets the propagated_mount of this PluginConfig.

        propagated mount

        :param propagated_mount: The propagated_mount of this PluginConfig.
        :type propagated_mount: str
        """
        if propagated_mount is None:
            raise ValueError("Invalid value for `propagated_mount`, must not be `None`")

        self._propagated_mount = propagated_mount

    @property
    def user(self):
        """Gets the user of this PluginConfig.


        :return: The user of this PluginConfig.
        :rtype: PluginConfigUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PluginConfig.


        :param user: The user of this PluginConfig.
        :type user: PluginConfigUser
        """

        self._user = user

    @property
    def work_dir(self):
        """Gets the work_dir of this PluginConfig.

        work dir

        :return: The work_dir of this PluginConfig.
        :rtype: str
        """
        return self._work_dir

    @work_dir.setter
    def work_dir(self, work_dir):
        """Sets the work_dir of this PluginConfig.

        work dir

        :param work_dir: The work_dir of this PluginConfig.
        :type work_dir: str
        """
        if work_dir is None:
            raise ValueError("Invalid value for `work_dir`, must not be `None`")

        self._work_dir = work_dir

    @property
    def rootfs(self):
        """Gets the rootfs of this PluginConfig.


        :return: The rootfs of this PluginConfig.
        :rtype: PluginConfigRootfs
        """
        return self._rootfs

    @rootfs.setter
    def rootfs(self, rootfs):
        """Sets the rootfs of this PluginConfig.


        :param rootfs: The rootfs of this PluginConfig.
        :type rootfs: PluginConfigRootfs
        """

        self._rootfs = rootfs
