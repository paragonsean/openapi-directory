# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_fields_entry import ManagedFieldsEntry
from openapi_server.models.owner_reference import OwnerReference
from openapi_server.models.service_spec import ServiceSpec
from openapi_server.models.service_status import ServiceStatus
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, api_version: str=None, cluster_name: str=None, creation_timestamp: object=None, deletion_grace_period_seconds: int=None, deletion_timestamp: object=None, finalizers: List[str]=None, generate_name: str=None, generation: int=None, kind: str=None, labels: Dict[str, str]=None, managed_fields: List[ManagedFieldsEntry]=None, name: str=None, namespace: str=None, owner_references: List[OwnerReference]=None, resource_version: str=None, self_link: str=None, spec: ServiceSpec=None, status: ServiceStatus=None, uid: str=None):
        """Service - a model defined in OpenAPI

        :param annotations: The annotations of this Service.
        :param api_version: The api_version of this Service.
        :param cluster_name: The cluster_name of this Service.
        :param creation_timestamp: The creation_timestamp of this Service.
        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this Service.
        :param deletion_timestamp: The deletion_timestamp of this Service.
        :param finalizers: The finalizers of this Service.
        :param generate_name: The generate_name of this Service.
        :param generation: The generation of this Service.
        :param kind: The kind of this Service.
        :param labels: The labels of this Service.
        :param managed_fields: The managed_fields of this Service.
        :param name: The name of this Service.
        :param namespace: The namespace of this Service.
        :param owner_references: The owner_references of this Service.
        :param resource_version: The resource_version of this Service.
        :param self_link: The self_link of this Service.
        :param spec: The spec of this Service.
        :param status: The status of this Service.
        :param uid: The uid of this Service.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'api_version': str,
            'cluster_name': str,
            'creation_timestamp': object,
            'deletion_grace_period_seconds': int,
            'deletion_timestamp': object,
            'finalizers': List[str],
            'generate_name': str,
            'generation': int,
            'kind': str,
            'labels': Dict[str, str],
            'managed_fields': List[ManagedFieldsEntry],
            'name': str,
            'namespace': str,
            'owner_references': List[OwnerReference],
            'resource_version': str,
            'self_link': str,
            'spec': ServiceSpec,
            'status': ServiceStatus,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'api_version': 'apiVersion',
            'cluster_name': 'clusterName',
            'creation_timestamp': 'creationTimestamp',
            'deletion_grace_period_seconds': 'deletionGracePeriodSeconds',
            'deletion_timestamp': 'deletionTimestamp',
            'finalizers': 'finalizers',
            'generate_name': 'generateName',
            'generation': 'generation',
            'kind': 'kind',
            'labels': 'labels',
            'managed_fields': 'managedFields',
            'name': 'name',
            'namespace': 'namespace',
            'owner_references': 'ownerReferences',
            'resource_version': 'resourceVersion',
            'self_link': 'selfLink',
            'spec': 'spec',
            'status': 'status',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._api_version = api_version
        self._cluster_name = cluster_name
        self._creation_timestamp = creation_timestamp
        self._deletion_grace_period_seconds = deletion_grace_period_seconds
        self._deletion_timestamp = deletion_timestamp
        self._finalizers = finalizers
        self._generate_name = generate_name
        self._generation = generation
        self._kind = kind
        self._labels = labels
        self._managed_fields = managed_fields
        self._name = name
        self._namespace = namespace
        self._owner_references = owner_references
        self._resource_version = resource_version
        self._self_link = self_link
        self._spec = spec
        self._status = status
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Service.

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations +optional

        :return: The annotations of this Service.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Service.

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations +optional

        :param annotations: The annotations of this Service.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def api_version(self):
        """Gets the api_version of this Service.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional

        :return: The api_version of this Service.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Service.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional

        :param api_version: The api_version of this Service.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Service.

        The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request. +optional

        :return: The cluster_name of this Service.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Service.

        The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request. +optional

        :param cluster_name: The cluster_name of this Service.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Service.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The creation_timestamp of this Service.
        :rtype: object
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Service.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param creation_timestamp: The creation_timestamp of this Service.
        :type creation_timestamp: object
        """

        self._creation_timestamp = creation_timestamp

    @property
    def deletion_grace_period_seconds(self):
        """Gets the deletion_grace_period_seconds of this Service.

        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. +optional

        :return: The deletion_grace_period_seconds of this Service.
        :rtype: int
        """
        return self._deletion_grace_period_seconds

    @deletion_grace_period_seconds.setter
    def deletion_grace_period_seconds(self, deletion_grace_period_seconds):
        """Sets the deletion_grace_period_seconds of this Service.

        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. +optional

        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this Service.
        :type deletion_grace_period_seconds: int
        """

        self._deletion_grace_period_seconds = deletion_grace_period_seconds

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this Service.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The deletion_timestamp of this Service.
        :rtype: object
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this Service.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param deletion_timestamp: The deletion_timestamp of this Service.
        :type deletion_timestamp: object
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def finalizers(self):
        """Gets the finalizers of this Service.

        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. +optional +patchStrategy=merge

        :return: The finalizers of this Service.
        :rtype: List[str]
        """
        return self._finalizers

    @finalizers.setter
    def finalizers(self, finalizers):
        """Sets the finalizers of this Service.

        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. +optional +patchStrategy=merge

        :param finalizers: The finalizers of this Service.
        :type finalizers: List[str]
        """

        self._finalizers = finalizers

    @property
    def generate_name(self):
        """Gets the generate_name of this Service.

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional

        :return: The generate_name of this Service.
        :rtype: str
        """
        return self._generate_name

    @generate_name.setter
    def generate_name(self, generate_name):
        """Sets the generate_name of this Service.

        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional

        :param generate_name: The generate_name of this Service.
        :type generate_name: str
        """

        self._generate_name = generate_name

    @property
    def generation(self):
        """Gets the generation of this Service.

        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. +optional

        :return: The generation of this Service.
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Service.

        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. +optional

        :param generation: The generation of this Service.
        :type generation: int
        """

        self._generation = generation

    @property
    def kind(self):
        """Gets the kind of this Service.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional

        :return: The kind of this Service.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Service.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional

        :param kind: The kind of this Service.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Service.

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels +optional

        :return: The labels of this Service.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Service.

        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels +optional

        :param labels: The labels of this Service.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def managed_fields(self):
        """Gets the managed_fields of this Service.

        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  +optional

        :return: The managed_fields of this Service.
        :rtype: List[ManagedFieldsEntry]
        """
        return self._managed_fields

    @managed_fields.setter
    def managed_fields(self, managed_fields):
        """Sets the managed_fields of this Service.

        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  +optional

        :param managed_fields: The managed_fields of this Service.
        :type managed_fields: List[ManagedFieldsEntry]
        """

        self._managed_fields = managed_fields

    @property
    def name(self):
        """Gets the name of this Service.

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Service.

        Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional

        :return: The namespace of this Service.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Service.

        Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional

        :param namespace: The namespace of this Service.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def owner_references(self):
        """Gets the owner_references of this Service.

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. +optional +patchMergeKey=uid +patchStrategy=merge

        :return: The owner_references of this Service.
        :rtype: List[OwnerReference]
        """
        return self._owner_references

    @owner_references.setter
    def owner_references(self, owner_references):
        """Sets the owner_references of this Service.

        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. +optional +patchMergeKey=uid +patchStrategy=merge

        :param owner_references: The owner_references of this Service.
        :type owner_references: List[OwnerReference]
        """

        self._owner_references = owner_references

    @property
    def resource_version(self):
        """Gets the resource_version of this Service.

        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional

        :return: The resource_version of this Service.
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this Service.

        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional

        :param resource_version: The resource_version of this Service.
        :type resource_version: str
        """

        self._resource_version = resource_version

    @property
    def self_link(self):
        """Gets the self_link of this Service.

        SelfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. +optional

        :return: The self_link of this Service.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Service.

        SelfLink is a URL representing this object. Populated by the system. Read-only.  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. +optional

        :param self_link: The self_link of this Service.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def spec(self):
        """Gets the spec of this Service.


        :return: The spec of this Service.
        :rtype: ServiceSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Service.


        :param spec: The spec of this Service.
        :type spec: ServiceSpec
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this Service.


        :return: The status of this Service.
        :rtype: ServiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Service.


        :param status: The status of this Service.
        :type status: ServiceStatus
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this Service.

        UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.

        :return: The uid of this Service.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Service.

        UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.

        :param uid: The uid of this Service.
        :type uid: str
        """

        self._uid = uid
