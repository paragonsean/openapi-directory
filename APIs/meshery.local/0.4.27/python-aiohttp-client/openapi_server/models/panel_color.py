# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PanelColor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_color: str=None, color_scale: str=None, color_scheme: str=None, exponent: float=None, max: float=None, min: float=None, mode: str=None):
        """PanelColor - a model defined in OpenAPI

        :param card_color: The card_color of this PanelColor.
        :param color_scale: The color_scale of this PanelColor.
        :param color_scheme: The color_scheme of this PanelColor.
        :param exponent: The exponent of this PanelColor.
        :param max: The max of this PanelColor.
        :param min: The min of this PanelColor.
        :param mode: The mode of this PanelColor.
        """
        self.openapi_types = {
            'card_color': str,
            'color_scale': str,
            'color_scheme': str,
            'exponent': float,
            'max': float,
            'min': float,
            'mode': str
        }

        self.attribute_map = {
            'card_color': 'cardColor',
            'color_scale': 'colorScale',
            'color_scheme': 'colorScheme',
            'exponent': 'exponent',
            'max': 'max',
            'min': 'min',
            'mode': 'mode'
        }

        self._card_color = card_color
        self._color_scale = color_scale
        self._color_scheme = color_scheme
        self._exponent = exponent
        self._max = max
        self._min = min
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PanelColor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Panel_color of this PanelColor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_color(self):
        """Gets the card_color of this PanelColor.


        :return: The card_color of this PanelColor.
        :rtype: str
        """
        return self._card_color

    @card_color.setter
    def card_color(self, card_color):
        """Sets the card_color of this PanelColor.


        :param card_color: The card_color of this PanelColor.
        :type card_color: str
        """

        self._card_color = card_color

    @property
    def color_scale(self):
        """Gets the color_scale of this PanelColor.


        :return: The color_scale of this PanelColor.
        :rtype: str
        """
        return self._color_scale

    @color_scale.setter
    def color_scale(self, color_scale):
        """Sets the color_scale of this PanelColor.


        :param color_scale: The color_scale of this PanelColor.
        :type color_scale: str
        """

        self._color_scale = color_scale

    @property
    def color_scheme(self):
        """Gets the color_scheme of this PanelColor.


        :return: The color_scheme of this PanelColor.
        :rtype: str
        """
        return self._color_scheme

    @color_scheme.setter
    def color_scheme(self, color_scheme):
        """Sets the color_scheme of this PanelColor.


        :param color_scheme: The color_scheme of this PanelColor.
        :type color_scheme: str
        """

        self._color_scheme = color_scheme

    @property
    def exponent(self):
        """Gets the exponent of this PanelColor.


        :return: The exponent of this PanelColor.
        :rtype: float
        """
        return self._exponent

    @exponent.setter
    def exponent(self, exponent):
        """Sets the exponent of this PanelColor.


        :param exponent: The exponent of this PanelColor.
        :type exponent: float
        """

        self._exponent = exponent

    @property
    def max(self):
        """Gets the max of this PanelColor.


        :return: The max of this PanelColor.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this PanelColor.


        :param max: The max of this PanelColor.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this PanelColor.


        :return: The min of this PanelColor.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this PanelColor.


        :param min: The min of this PanelColor.
        :type min: float
        """

        self._min = min

    @property
    def mode(self):
        """Gets the mode of this PanelColor.


        :return: The mode of this PanelColor.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PanelColor.


        :param mode: The mode of this PanelColor.
        :type mode: str
        """

        self._mode = mode
