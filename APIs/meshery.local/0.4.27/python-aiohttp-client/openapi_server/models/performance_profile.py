# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformanceProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_request: int=None, content_type: str=None, created_at: object=None, duration: str=None, endpoints: List[str]=None, id: List[int]=None, last_run: object=None, load_generators: List[str]=None, name: str=None, qps: int=None, request_body: str=None, request_cookies: str=None, request_headers: str=None, schedule: List[int]=None, service_mesh: str=None, total_results: int=None, updated_at: object=None):
        """PerformanceProfile - a model defined in OpenAPI

        :param concurrent_request: The concurrent_request of this PerformanceProfile.
        :param content_type: The content_type of this PerformanceProfile.
        :param created_at: The created_at of this PerformanceProfile.
        :param duration: The duration of this PerformanceProfile.
        :param endpoints: The endpoints of this PerformanceProfile.
        :param id: The id of this PerformanceProfile.
        :param last_run: The last_run of this PerformanceProfile.
        :param load_generators: The load_generators of this PerformanceProfile.
        :param name: The name of this PerformanceProfile.
        :param qps: The qps of this PerformanceProfile.
        :param request_body: The request_body of this PerformanceProfile.
        :param request_cookies: The request_cookies of this PerformanceProfile.
        :param request_headers: The request_headers of this PerformanceProfile.
        :param schedule: The schedule of this PerformanceProfile.
        :param service_mesh: The service_mesh of this PerformanceProfile.
        :param total_results: The total_results of this PerformanceProfile.
        :param updated_at: The updated_at of this PerformanceProfile.
        """
        self.openapi_types = {
            'concurrent_request': int,
            'content_type': str,
            'created_at': object,
            'duration': str,
            'endpoints': List[str],
            'id': List[int],
            'last_run': object,
            'load_generators': List[str],
            'name': str,
            'qps': int,
            'request_body': str,
            'request_cookies': str,
            'request_headers': str,
            'schedule': List[int],
            'service_mesh': str,
            'total_results': int,
            'updated_at': object
        }

        self.attribute_map = {
            'concurrent_request': 'concurrent_request',
            'content_type': 'content_type',
            'created_at': 'created_at',
            'duration': 'duration',
            'endpoints': 'endpoints',
            'id': 'id',
            'last_run': 'last_run',
            'load_generators': 'load_generators',
            'name': 'name',
            'qps': 'qps',
            'request_body': 'request_body',
            'request_cookies': 'request_cookies',
            'request_headers': 'request_headers',
            'schedule': 'schedule',
            'service_mesh': 'service_mesh',
            'total_results': 'total_results',
            'updated_at': 'updated_at'
        }

        self._concurrent_request = concurrent_request
        self._content_type = content_type
        self._created_at = created_at
        self._duration = duration
        self._endpoints = endpoints
        self._id = id
        self._last_run = last_run
        self._load_generators = load_generators
        self._name = name
        self._qps = qps
        self._request_body = request_body
        self._request_cookies = request_cookies
        self._request_headers = request_headers
        self._schedule = schedule
        self._service_mesh = service_mesh
        self._total_results = total_results
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceProfile of this PerformanceProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_request(self):
        """Gets the concurrent_request of this PerformanceProfile.


        :return: The concurrent_request of this PerformanceProfile.
        :rtype: int
        """
        return self._concurrent_request

    @concurrent_request.setter
    def concurrent_request(self, concurrent_request):
        """Sets the concurrent_request of this PerformanceProfile.


        :param concurrent_request: The concurrent_request of this PerformanceProfile.
        :type concurrent_request: int
        """

        self._concurrent_request = concurrent_request

    @property
    def content_type(self):
        """Gets the content_type of this PerformanceProfile.


        :return: The content_type of this PerformanceProfile.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PerformanceProfile.


        :param content_type: The content_type of this PerformanceProfile.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The created_at of this PerformanceProfile.
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param created_at: The created_at of this PerformanceProfile.
        :type created_at: object
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this PerformanceProfile.


        :return: The duration of this PerformanceProfile.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PerformanceProfile.


        :param duration: The duration of this PerformanceProfile.
        :type duration: str
        """

        self._duration = duration

    @property
    def endpoints(self):
        """Gets the endpoints of this PerformanceProfile.


        :return: The endpoints of this PerformanceProfile.
        :rtype: List[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this PerformanceProfile.


        :param endpoints: The endpoints of this PerformanceProfile.
        :type endpoints: List[str]
        """

        self._endpoints = endpoints

    @property
    def id(self):
        """Gets the id of this PerformanceProfile.


        :return: The id of this PerformanceProfile.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PerformanceProfile.


        :param id: The id of this PerformanceProfile.
        :type id: List[int]
        """

        self._id = id

    @property
    def last_run(self):
        """Gets the last_run of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The last_run of this PerformanceProfile.
        :rtype: object
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param last_run: The last_run of this PerformanceProfile.
        :type last_run: object
        """

        self._last_run = last_run

    @property
    def load_generators(self):
        """Gets the load_generators of this PerformanceProfile.


        :return: The load_generators of this PerformanceProfile.
        :rtype: List[str]
        """
        return self._load_generators

    @load_generators.setter
    def load_generators(self, load_generators):
        """Sets the load_generators of this PerformanceProfile.


        :param load_generators: The load_generators of this PerformanceProfile.
        :type load_generators: List[str]
        """

        self._load_generators = load_generators

    @property
    def name(self):
        """Gets the name of this PerformanceProfile.


        :return: The name of this PerformanceProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PerformanceProfile.


        :param name: The name of this PerformanceProfile.
        :type name: str
        """

        self._name = name

    @property
    def qps(self):
        """Gets the qps of this PerformanceProfile.


        :return: The qps of this PerformanceProfile.
        :rtype: int
        """
        return self._qps

    @qps.setter
    def qps(self, qps):
        """Sets the qps of this PerformanceProfile.


        :param qps: The qps of this PerformanceProfile.
        :type qps: int
        """

        self._qps = qps

    @property
    def request_body(self):
        """Gets the request_body of this PerformanceProfile.


        :return: The request_body of this PerformanceProfile.
        :rtype: str
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this PerformanceProfile.


        :param request_body: The request_body of this PerformanceProfile.
        :type request_body: str
        """

        self._request_body = request_body

    @property
    def request_cookies(self):
        """Gets the request_cookies of this PerformanceProfile.


        :return: The request_cookies of this PerformanceProfile.
        :rtype: str
        """
        return self._request_cookies

    @request_cookies.setter
    def request_cookies(self, request_cookies):
        """Sets the request_cookies of this PerformanceProfile.


        :param request_cookies: The request_cookies of this PerformanceProfile.
        :type request_cookies: str
        """

        self._request_cookies = request_cookies

    @property
    def request_headers(self):
        """Gets the request_headers of this PerformanceProfile.


        :return: The request_headers of this PerformanceProfile.
        :rtype: str
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this PerformanceProfile.


        :param request_headers: The request_headers of this PerformanceProfile.
        :type request_headers: str
        """

        self._request_headers = request_headers

    @property
    def schedule(self):
        """Gets the schedule of this PerformanceProfile.


        :return: The schedule of this PerformanceProfile.
        :rtype: List[int]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PerformanceProfile.


        :param schedule: The schedule of this PerformanceProfile.
        :type schedule: List[int]
        """

        self._schedule = schedule

    @property
    def service_mesh(self):
        """Gets the service_mesh of this PerformanceProfile.


        :return: The service_mesh of this PerformanceProfile.
        :rtype: str
        """
        return self._service_mesh

    @service_mesh.setter
    def service_mesh(self, service_mesh):
        """Sets the service_mesh of this PerformanceProfile.


        :param service_mesh: The service_mesh of this PerformanceProfile.
        :type service_mesh: str
        """

        self._service_mesh = service_mesh

    @property
    def total_results(self):
        """Gets the total_results of this PerformanceProfile.


        :return: The total_results of this PerformanceProfile.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this PerformanceProfile.


        :param total_results: The total_results of this PerformanceProfile.
        :type total_results: int
        """

        self._total_results = total_results

    @property
    def updated_at(self):
        """Gets the updated_at of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :return: The updated_at of this PerformanceProfile.
        :rtype: object
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PerformanceProfile.

        +protobuf.options.marshal=false +protobuf.as=Timestamp +protobuf.options.(gogoproto.goproto_stringer)=false

        :param updated_at: The updated_at of this PerformanceProfile.
        :type updated_at: object
        """

        self._updated_at = updated_at
