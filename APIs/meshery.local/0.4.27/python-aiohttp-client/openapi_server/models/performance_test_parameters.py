# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformanceTestParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, c: int=None, dur: str=None, load_generator: str=None, mesh: str=None, name: str=None, qps: int=None, t: int=None, url: str=None, uuid: str=None):
        """PerformanceTestParameters - a model defined in OpenAPI

        :param c: The c of this PerformanceTestParameters.
        :param dur: The dur of this PerformanceTestParameters.
        :param load_generator: The load_generator of this PerformanceTestParameters.
        :param mesh: The mesh of this PerformanceTestParameters.
        :param name: The name of this PerformanceTestParameters.
        :param qps: The qps of this PerformanceTestParameters.
        :param t: The t of this PerformanceTestParameters.
        :param url: The url of this PerformanceTestParameters.
        :param uuid: The uuid of this PerformanceTestParameters.
        """
        self.openapi_types = {
            'c': int,
            'dur': str,
            'load_generator': str,
            'mesh': str,
            'name': str,
            'qps': int,
            't': int,
            'url': str,
            'uuid': str
        }

        self.attribute_map = {
            'c': 'c',
            'dur': 'dur',
            'load_generator': 'loadGenerator',
            'mesh': 'mesh',
            'name': 'name',
            'qps': 'qps',
            't': 't',
            'url': 'url',
            'uuid': 'uuid'
        }

        self._c = c
        self._dur = dur
        self._load_generator = load_generator
        self._mesh = mesh
        self._name = name
        self._qps = qps
        self._t = t
        self._url = url
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceTestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceTestParameters of this PerformanceTestParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def c(self):
        """Gets the c of this PerformanceTestParameters.

        concurrent request in number

        :return: The c of this PerformanceTestParameters.
        :rtype: int
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this PerformanceTestParameters.

        concurrent request in number

        :param c: The c of this PerformanceTestParameters.
        :type c: int
        """

        self._c = c

    @property
    def dur(self):
        """Gets the dur of this PerformanceTestParameters.

        duration e.g. s for second

        :return: The dur of this PerformanceTestParameters.
        :rtype: str
        """
        return self._dur

    @dur.setter
    def dur(self, dur):
        """Sets the dur of this PerformanceTestParameters.

        duration e.g. s for second

        :param dur: The dur of this PerformanceTestParameters.
        :type dur: str
        """

        self._dur = dur

    @property
    def load_generator(self):
        """Gets the load_generator of this PerformanceTestParameters.

        load generator for performance test

        :return: The load_generator of this PerformanceTestParameters.
        :rtype: str
        """
        return self._load_generator

    @load_generator.setter
    def load_generator(self, load_generator):
        """Sets the load_generator of this PerformanceTestParameters.

        load generator for performance test

        :param load_generator: The load_generator of this PerformanceTestParameters.
        :type load_generator: str
        """

        self._load_generator = load_generator

    @property
    def mesh(self):
        """Gets the mesh of this PerformanceTestParameters.

        service mesh for performance test

        :return: The mesh of this PerformanceTestParameters.
        :rtype: str
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this PerformanceTestParameters.

        service mesh for performance test

        :param mesh: The mesh of this PerformanceTestParameters.
        :type mesh: str
        """

        self._mesh = mesh

    @property
    def name(self):
        """Gets the name of this PerformanceTestParameters.

        name of performance test

        :return: The name of this PerformanceTestParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PerformanceTestParameters.

        name of performance test

        :param name: The name of this PerformanceTestParameters.
        :type name: str
        """

        self._name = name

    @property
    def qps(self):
        """Gets the qps of this PerformanceTestParameters.

        qps in number

        :return: The qps of this PerformanceTestParameters.
        :rtype: int
        """
        return self._qps

    @qps.setter
    def qps(self, qps):
        """Sets the qps of this PerformanceTestParameters.

        qps in number

        :param qps: The qps of this PerformanceTestParameters.
        :type qps: int
        """

        self._qps = qps

    @property
    def t(self):
        """Gets the t of this PerformanceTestParameters.

        time in integer e.g. 30

        :return: The t of this PerformanceTestParameters.
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this PerformanceTestParameters.

        time in integer e.g. 30

        :param t: The t of this PerformanceTestParameters.
        :type t: int
        """

        self._t = t

    @property
    def url(self):
        """Gets the url of this PerformanceTestParameters.

        url for test

        :return: The url of this PerformanceTestParameters.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PerformanceTestParameters.

        url for test

        :param url: The url of this PerformanceTestParameters.
        :type url: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this PerformanceTestParameters.

        test-id of pre-existing test

        :return: The uuid of this PerformanceTestParameters.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PerformanceTestParameters.

        test-id of pre-existing test

        :param uuid: The uuid of this PerformanceTestParameters.
        :type uuid: str
        """

        self._uuid = uuid
