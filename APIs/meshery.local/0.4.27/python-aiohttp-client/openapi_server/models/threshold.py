# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Threshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_mode: str=None, fill: bool=None, fill_color: str=None, line: bool=None, line_color: str=None, op: str=None, value: float=None, yaxis: str=None):
        """Threshold - a model defined in OpenAPI

        :param color_mode: The color_mode of this Threshold.
        :param fill: The fill of this Threshold.
        :param fill_color: The fill_color of this Threshold.
        :param line: The line of this Threshold.
        :param line_color: The line_color of this Threshold.
        :param op: The op of this Threshold.
        :param value: The value of this Threshold.
        :param yaxis: The yaxis of this Threshold.
        """
        self.openapi_types = {
            'color_mode': str,
            'fill': bool,
            'fill_color': str,
            'line': bool,
            'line_color': str,
            'op': str,
            'value': float,
            'yaxis': str
        }

        self.attribute_map = {
            'color_mode': 'colorMode',
            'fill': 'fill',
            'fill_color': 'fillColor',
            'line': 'line',
            'line_color': 'lineColor',
            'op': 'op',
            'value': 'value',
            'yaxis': 'yaxis'
        }

        self._color_mode = color_mode
        self._fill = fill
        self._fill_color = fill_color
        self._line = line
        self._line_color = line_color
        self._op = op
        self._value = value
        self._yaxis = yaxis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Threshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Threshold of this Threshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_mode(self):
        """Gets the color_mode of this Threshold.

        critical, warning, ok, custom

        :return: The color_mode of this Threshold.
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this Threshold.

        critical, warning, ok, custom

        :param color_mode: The color_mode of this Threshold.
        :type color_mode: str
        """

        self._color_mode = color_mode

    @property
    def fill(self):
        """Gets the fill of this Threshold.


        :return: The fill of this Threshold.
        :rtype: bool
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this Threshold.


        :param fill: The fill of this Threshold.
        :type fill: bool
        """

        self._fill = fill

    @property
    def fill_color(self):
        """Gets the fill_color of this Threshold.

        hexadecimal color (e.g. #629e51, only when ColorMode is \"custom\")

        :return: The fill_color of this Threshold.
        :rtype: str
        """
        return self._fill_color

    @fill_color.setter
    def fill_color(self, fill_color):
        """Sets the fill_color of this Threshold.

        hexadecimal color (e.g. #629e51, only when ColorMode is \"custom\")

        :param fill_color: The fill_color of this Threshold.
        :type fill_color: str
        """

        self._fill_color = fill_color

    @property
    def line(self):
        """Gets the line of this Threshold.


        :return: The line of this Threshold.
        :rtype: bool
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this Threshold.


        :param line: The line of this Threshold.
        :type line: bool
        """

        self._line = line

    @property
    def line_color(self):
        """Gets the line_color of this Threshold.

        hexadecimal color (e.g. #629e51, only when ColorMode is \"custom\")

        :return: The line_color of this Threshold.
        :rtype: str
        """
        return self._line_color

    @line_color.setter
    def line_color(self, line_color):
        """Sets the line_color of this Threshold.

        hexadecimal color (e.g. #629e51, only when ColorMode is \"custom\")

        :param line_color: The line_color of this Threshold.
        :type line_color: str
        """

        self._line_color = line_color

    @property
    def op(self):
        """Gets the op of this Threshold.

        gt or lt

        :return: The op of this Threshold.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this Threshold.

        gt or lt

        :param op: The op of this Threshold.
        :type op: str
        """

        self._op = op

    @property
    def value(self):
        """Gets the value of this Threshold.

        the alert threshold value, we do not omitempty, since 0 is a valid threshold

        :return: The value of this Threshold.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Threshold.

        the alert threshold value, we do not omitempty, since 0 is a valid threshold

        :param value: The value of this Threshold.
        :type value: float
        """

        self._value = value

    @property
    def yaxis(self):
        """Gets the yaxis of this Threshold.

        left or right

        :return: The yaxis of this Threshold.
        :rtype: str
        """
        return self._yaxis

    @yaxis.setter
    def yaxis(self, yaxis):
        """Sets the yaxis of this Threshold.

        left or right

        :param yaxis: The yaxis of this Threshold.
        :type yaxis: str
        """

        self._yaxis = yaxis
