# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_dropdown: bool=None, dash_uri: str=None, dashboard: str=None, icon: str=None, include_vars: bool=None, keep_time: bool=None, params: str=None, tags: List[str]=None, target_blank: bool=None, title: str=None, tooltip: str=None, type: str=None, url: str=None):
        """Link - a model defined in OpenAPI

        :param as_dropdown: The as_dropdown of this Link.
        :param dash_uri: The dash_uri of this Link.
        :param dashboard: The dashboard of this Link.
        :param icon: The icon of this Link.
        :param include_vars: The include_vars of this Link.
        :param keep_time: The keep_time of this Link.
        :param params: The params of this Link.
        :param tags: The tags of this Link.
        :param target_blank: The target_blank of this Link.
        :param title: The title of this Link.
        :param tooltip: The tooltip of this Link.
        :param type: The type of this Link.
        :param url: The url of this Link.
        """
        self.openapi_types = {
            'as_dropdown': bool,
            'dash_uri': str,
            'dashboard': str,
            'icon': str,
            'include_vars': bool,
            'keep_time': bool,
            'params': str,
            'tags': List[str],
            'target_blank': bool,
            'title': str,
            'tooltip': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'as_dropdown': 'asDropdown',
            'dash_uri': 'dashUri',
            'dashboard': 'dashboard',
            'icon': 'icon',
            'include_vars': 'includeVars',
            'keep_time': 'keepTime',
            'params': 'params',
            'tags': 'tags',
            'target_blank': 'targetBlank',
            'title': 'title',
            'tooltip': 'tooltip',
            'type': 'type',
            'url': 'url'
        }

        self._as_dropdown = as_dropdown
        self._dash_uri = dash_uri
        self._dashboard = dashboard
        self._icon = icon
        self._include_vars = include_vars
        self._keep_time = keep_time
        self._params = params
        self._tags = tags
        self._target_blank = target_blank
        self._title = title
        self._tooltip = tooltip
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_dropdown(self):
        """Gets the as_dropdown of this Link.


        :return: The as_dropdown of this Link.
        :rtype: bool
        """
        return self._as_dropdown

    @as_dropdown.setter
    def as_dropdown(self, as_dropdown):
        """Sets the as_dropdown of this Link.


        :param as_dropdown: The as_dropdown of this Link.
        :type as_dropdown: bool
        """

        self._as_dropdown = as_dropdown

    @property
    def dash_uri(self):
        """Gets the dash_uri of this Link.


        :return: The dash_uri of this Link.
        :rtype: str
        """
        return self._dash_uri

    @dash_uri.setter
    def dash_uri(self, dash_uri):
        """Sets the dash_uri of this Link.


        :param dash_uri: The dash_uri of this Link.
        :type dash_uri: str
        """

        self._dash_uri = dash_uri

    @property
    def dashboard(self):
        """Gets the dashboard of this Link.


        :return: The dashboard of this Link.
        :rtype: str
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this Link.


        :param dashboard: The dashboard of this Link.
        :type dashboard: str
        """

        self._dashboard = dashboard

    @property
    def icon(self):
        """Gets the icon of this Link.


        :return: The icon of this Link.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Link.


        :param icon: The icon of this Link.
        :type icon: str
        """

        self._icon = icon

    @property
    def include_vars(self):
        """Gets the include_vars of this Link.


        :return: The include_vars of this Link.
        :rtype: bool
        """
        return self._include_vars

    @include_vars.setter
    def include_vars(self, include_vars):
        """Sets the include_vars of this Link.


        :param include_vars: The include_vars of this Link.
        :type include_vars: bool
        """

        self._include_vars = include_vars

    @property
    def keep_time(self):
        """Gets the keep_time of this Link.


        :return: The keep_time of this Link.
        :rtype: bool
        """
        return self._keep_time

    @keep_time.setter
    def keep_time(self, keep_time):
        """Sets the keep_time of this Link.


        :param keep_time: The keep_time of this Link.
        :type keep_time: bool
        """

        self._keep_time = keep_time

    @property
    def params(self):
        """Gets the params of this Link.


        :return: The params of this Link.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Link.


        :param params: The params of this Link.
        :type params: str
        """

        self._params = params

    @property
    def tags(self):
        """Gets the tags of this Link.


        :return: The tags of this Link.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Link.


        :param tags: The tags of this Link.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def target_blank(self):
        """Gets the target_blank of this Link.


        :return: The target_blank of this Link.
        :rtype: bool
        """
        return self._target_blank

    @target_blank.setter
    def target_blank(self, target_blank):
        """Sets the target_blank of this Link.


        :param target_blank: The target_blank of this Link.
        :type target_blank: bool
        """

        self._target_blank = target_blank

    @property
    def title(self):
        """Gets the title of this Link.


        :return: The title of this Link.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.


        :param title: The title of this Link.
        :type title: str
        """

        self._title = title

    @property
    def tooltip(self):
        """Gets the tooltip of this Link.


        :return: The tooltip of this Link.
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this Link.


        :param tooltip: The tooltip of this Link.
        :type tooltip: str
        """

        self._tooltip = tooltip

    @property
    def type(self):
        """Gets the type of this Link.


        :return: The type of this Link.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.


        :param type: The type of this Link.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Link.


        :return: The url of this Link.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Link.


        :param url: The url of this Link.
        :type url: str
        """

        self._url = url
