# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meshery_application import MesheryApplication
from openapi_server import util


class ApplicationsAPIResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applications: List[MesheryApplication]=None, page: int=None, page_size: int=None, total_count: int=None):
        """ApplicationsAPIResponse - a model defined in OpenAPI

        :param applications: The applications of this ApplicationsAPIResponse.
        :param page: The page of this ApplicationsAPIResponse.
        :param page_size: The page_size of this ApplicationsAPIResponse.
        :param total_count: The total_count of this ApplicationsAPIResponse.
        """
        self.openapi_types = {
            'applications': List[MesheryApplication],
            'page': int,
            'page_size': int,
            'total_count': int
        }

        self.attribute_map = {
            'applications': 'applications',
            'page': 'page',
            'page_size': 'page_size',
            'total_count': 'total_count'
        }

        self._applications = applications
        self._page = page
        self._page_size = page_size
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationsAPIResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationsAPIResponse of this ApplicationsAPIResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applications(self):
        """Gets the applications of this ApplicationsAPIResponse.


        :return: The applications of this ApplicationsAPIResponse.
        :rtype: List[MesheryApplication]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this ApplicationsAPIResponse.


        :param applications: The applications of this ApplicationsAPIResponse.
        :type applications: List[MesheryApplication]
        """

        self._applications = applications

    @property
    def page(self):
        """Gets the page of this ApplicationsAPIResponse.


        :return: The page of this ApplicationsAPIResponse.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ApplicationsAPIResponse.


        :param page: The page of this ApplicationsAPIResponse.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this ApplicationsAPIResponse.


        :return: The page_size of this ApplicationsAPIResponse.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ApplicationsAPIResponse.


        :param page_size: The page_size of this ApplicationsAPIResponse.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def total_count(self):
        """Gets the total_count of this ApplicationsAPIResponse.


        :return: The total_count of this ApplicationsAPIResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ApplicationsAPIResponse.


        :param total_count: The total_count of this ApplicationsAPIResponse.
        :type total_count: int
        """

        self._total_count = total_count
