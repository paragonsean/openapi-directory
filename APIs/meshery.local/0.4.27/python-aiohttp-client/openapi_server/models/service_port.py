# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.int_or_string import IntOrString
from openapi_server import util


class ServicePort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_protocol: str=None, name: str=None, node_port: int=None, port: int=None, protocol: str=None, target_port: IntOrString=None):
        """ServicePort - a model defined in OpenAPI

        :param app_protocol: The app_protocol of this ServicePort.
        :param name: The name of this ServicePort.
        :param node_port: The node_port of this ServicePort.
        :param port: The port of this ServicePort.
        :param protocol: The protocol of this ServicePort.
        :param target_port: The target_port of this ServicePort.
        """
        self.openapi_types = {
            'app_protocol': str,
            'name': str,
            'node_port': int,
            'port': int,
            'protocol': str,
            'target_port': IntOrString
        }

        self.attribute_map = {
            'app_protocol': 'appProtocol',
            'name': 'name',
            'node_port': 'nodePort',
            'port': 'port',
            'protocol': 'protocol',
            'target_port': 'targetPort'
        }

        self._app_protocol = app_protocol
        self._name = name
        self._node_port = node_port
        self._port = port
        self._protocol = protocol
        self._target_port = target_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePort of this ServicePort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_protocol(self):
        """Gets the app_protocol of this ServicePort.

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. +optional

        :return: The app_protocol of this ServicePort.
        :rtype: str
        """
        return self._app_protocol

    @app_protocol.setter
    def app_protocol(self, app_protocol):
        """Sets the app_protocol of this ServicePort.

        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. +optional

        :param app_protocol: The app_protocol of this ServicePort.
        :type app_protocol: str
        """

        self._app_protocol = app_protocol

    @property
    def name(self):
        """Gets the name of this ServicePort.

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service. +optional

        :return: The name of this ServicePort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicePort.

        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service. +optional

        :param name: The name of this ServicePort.
        :type name: str
        """

        self._name = name

    @property
    def node_port(self):
        """Gets the node_port of this ServicePort.

        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport +optional

        :return: The node_port of this ServicePort.
        :rtype: int
        """
        return self._node_port

    @node_port.setter
    def node_port(self, node_port):
        """Sets the node_port of this ServicePort.

        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport +optional

        :param node_port: The node_port of this ServicePort.
        :type node_port: int
        """

        self._node_port = node_port

    @property
    def port(self):
        """Gets the port of this ServicePort.

        The port that will be exposed by this service.

        :return: The port of this ServicePort.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServicePort.

        The port that will be exposed by this service.

        :param port: The port of this ServicePort.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ServicePort.


        :return: The protocol of this ServicePort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ServicePort.


        :param protocol: The protocol of this ServicePort.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def target_port(self):
        """Gets the target_port of this ServicePort.


        :return: The target_port of this ServicePort.
        :rtype: IntOrString
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port):
        """Sets the target_port of this ServicePort.


        :param target_port: The target_port of this ServicePort.
        :type target_port: IntOrString
        """

        self._target_port = target_port
