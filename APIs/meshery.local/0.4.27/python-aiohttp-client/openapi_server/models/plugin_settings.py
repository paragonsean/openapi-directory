# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_device import PluginDevice
from openapi_server.models.plugin_mount import PluginMount
from openapi_server import util


class PluginSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, devices: List[PluginDevice]=None, env: List[str]=None, mounts: List[PluginMount]=None):
        """PluginSettings - a model defined in OpenAPI

        :param args: The args of this PluginSettings.
        :param devices: The devices of this PluginSettings.
        :param env: The env of this PluginSettings.
        :param mounts: The mounts of this PluginSettings.
        """
        self.openapi_types = {
            'args': List[str],
            'devices': List[PluginDevice],
            'env': List[str],
            'mounts': List[PluginMount]
        }

        self.attribute_map = {
            'args': 'Args',
            'devices': 'Devices',
            'env': 'Env',
            'mounts': 'Mounts'
        }

        self._args = args
        self._devices = devices
        self._env = env
        self._mounts = mounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginSettings of this PluginSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this PluginSettings.

        args

        :return: The args of this PluginSettings.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this PluginSettings.

        args

        :param args: The args of this PluginSettings.
        :type args: List[str]
        """
        if args is None:
            raise ValueError("Invalid value for `args`, must not be `None`")

        self._args = args

    @property
    def devices(self):
        """Gets the devices of this PluginSettings.

        devices

        :return: The devices of this PluginSettings.
        :rtype: List[PluginDevice]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PluginSettings.

        devices

        :param devices: The devices of this PluginSettings.
        :type devices: List[PluginDevice]
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")

        self._devices = devices

    @property
    def env(self):
        """Gets the env of this PluginSettings.

        env

        :return: The env of this PluginSettings.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this PluginSettings.

        env

        :param env: The env of this PluginSettings.
        :type env: List[str]
        """
        if env is None:
            raise ValueError("Invalid value for `env`, must not be `None`")

        self._env = env

    @property
    def mounts(self):
        """Gets the mounts of this PluginSettings.

        mounts

        :return: The mounts of this PluginSettings.
        :rtype: List[PluginMount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this PluginSettings.

        mounts

        :param mounts: The mounts of this PluginSettings.
        :type mounts: List[PluginMount]
        """
        if mounts is None:
            raise ValueError("Invalid value for `mounts`, must not be `None`")

        self._mounts = mounts
