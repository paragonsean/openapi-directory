# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MesheryPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: List[int]=None, location: Dict[str, object]=None, name: str=None, pattern_file: str=None, updated_at: datetime=None, user_id: str=None):
        """MesheryPattern - a model defined in OpenAPI

        :param created_at: The created_at of this MesheryPattern.
        :param id: The id of this MesheryPattern.
        :param location: The location of this MesheryPattern.
        :param name: The name of this MesheryPattern.
        :param pattern_file: The pattern_file of this MesheryPattern.
        :param updated_at: The updated_at of this MesheryPattern.
        :param user_id: The user_id of this MesheryPattern.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': List[int],
            'location': Dict[str, object],
            'name': str,
            'pattern_file': str,
            'updated_at': datetime,
            'user_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'pattern_file': 'pattern_file',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._id = id
        self._location = location
        self._name = name
        self._pattern_file = pattern_file
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MesheryPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MesheryPattern of this MesheryPattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this MesheryPattern.


        :return: The created_at of this MesheryPattern.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MesheryPattern.


        :param created_at: The created_at of this MesheryPattern.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this MesheryPattern.


        :return: The id of this MesheryPattern.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MesheryPattern.


        :param id: The id of this MesheryPattern.
        :type id: List[int]
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this MesheryPattern.

        It implements native SQL driver interfaces and hence can be used for SQL json or jsonb types as a drop in replacement of golang native maps

        :return: The location of this MesheryPattern.
        :rtype: Dict[str, object]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MesheryPattern.

        It implements native SQL driver interfaces and hence can be used for SQL json or jsonb types as a drop in replacement of golang native maps

        :param location: The location of this MesheryPattern.
        :type location: Dict[str, object]
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this MesheryPattern.


        :return: The name of this MesheryPattern.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MesheryPattern.


        :param name: The name of this MesheryPattern.
        :type name: str
        """

        self._name = name

    @property
    def pattern_file(self):
        """Gets the pattern_file of this MesheryPattern.


        :return: The pattern_file of this MesheryPattern.
        :rtype: str
        """
        return self._pattern_file

    @pattern_file.setter
    def pattern_file(self, pattern_file):
        """Sets the pattern_file of this MesheryPattern.


        :param pattern_file: The pattern_file of this MesheryPattern.
        :type pattern_file: str
        """

        self._pattern_file = pattern_file

    @property
    def updated_at(self):
        """Gets the updated_at of this MesheryPattern.


        :return: The updated_at of this MesheryPattern.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MesheryPattern.


        :param updated_at: The updated_at of this MesheryPattern.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this MesheryPattern.

        Meshery doesn't have the user id fields but the remote provider is allowed to provide one

        :return: The user_id of this MesheryPattern.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MesheryPattern.

        Meshery doesn't have the user id fields but the remote provider is allowed to provide one

        :param user_id: The user_id of this MesheryPattern.
        :type user_id: str
        """

        self._user_id = user_id
