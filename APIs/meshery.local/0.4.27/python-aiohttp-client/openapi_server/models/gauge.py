# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Gauge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_value: float=None, min_value: float=None, show: bool=None, threshold_labels: bool=None, threshold_markers: bool=None):
        """Gauge - a model defined in OpenAPI

        :param max_value: The max_value of this Gauge.
        :param min_value: The min_value of this Gauge.
        :param show: The show of this Gauge.
        :param threshold_labels: The threshold_labels of this Gauge.
        :param threshold_markers: The threshold_markers of this Gauge.
        """
        self.openapi_types = {
            'max_value': float,
            'min_value': float,
            'show': bool,
            'threshold_labels': bool,
            'threshold_markers': bool
        }

        self.attribute_map = {
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'show': 'show',
            'threshold_labels': 'thresholdLabels',
            'threshold_markers': 'thresholdMarkers'
        }

        self._max_value = max_value
        self._min_value = min_value
        self._show = show
        self._threshold_labels = threshold_labels
        self._threshold_markers = threshold_markers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gauge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gauge of this Gauge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_value(self):
        """Gets the max_value of this Gauge.


        :return: The max_value of this Gauge.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this Gauge.


        :param max_value: The max_value of this Gauge.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this Gauge.


        :return: The min_value of this Gauge.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this Gauge.


        :param min_value: The min_value of this Gauge.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def show(self):
        """Gets the show of this Gauge.


        :return: The show of this Gauge.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this Gauge.


        :param show: The show of this Gauge.
        :type show: bool
        """

        self._show = show

    @property
    def threshold_labels(self):
        """Gets the threshold_labels of this Gauge.


        :return: The threshold_labels of this Gauge.
        :rtype: bool
        """
        return self._threshold_labels

    @threshold_labels.setter
    def threshold_labels(self, threshold_labels):
        """Sets the threshold_labels of this Gauge.


        :param threshold_labels: The threshold_labels of this Gauge.
        :type threshold_labels: bool
        """

        self._threshold_labels = threshold_labels

    @property
    def threshold_markers(self):
        """Gets the threshold_markers of this Gauge.


        :return: The threshold_markers of this Gauge.
        :rtype: bool
        """
        return self._threshold_markers

    @threshold_markers.setter
    def threshold_markers(self, threshold_markers):
        """Sets the threshold_markers of this Gauge.


        :param threshold_markers: The threshold_markers of this Gauge.
        :type threshold_markers: bool
        """

        self._threshold_markers = threshold_markers
