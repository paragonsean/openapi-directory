# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_device import PluginDevice
from openapi_server import util


class PluginConfigLinux(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_all_devices: bool=None, capabilities: List[str]=None, devices: List[PluginDevice]=None):
        """PluginConfigLinux - a model defined in OpenAPI

        :param allow_all_devices: The allow_all_devices of this PluginConfigLinux.
        :param capabilities: The capabilities of this PluginConfigLinux.
        :param devices: The devices of this PluginConfigLinux.
        """
        self.openapi_types = {
            'allow_all_devices': bool,
            'capabilities': List[str],
            'devices': List[PluginDevice]
        }

        self.attribute_map = {
            'allow_all_devices': 'AllowAllDevices',
            'capabilities': 'Capabilities',
            'devices': 'Devices'
        }

        self._allow_all_devices = allow_all_devices
        self._capabilities = capabilities
        self._devices = devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginConfigLinux':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginConfigLinux of this PluginConfigLinux.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_all_devices(self):
        """Gets the allow_all_devices of this PluginConfigLinux.

        allow all devices

        :return: The allow_all_devices of this PluginConfigLinux.
        :rtype: bool
        """
        return self._allow_all_devices

    @allow_all_devices.setter
    def allow_all_devices(self, allow_all_devices):
        """Sets the allow_all_devices of this PluginConfigLinux.

        allow all devices

        :param allow_all_devices: The allow_all_devices of this PluginConfigLinux.
        :type allow_all_devices: bool
        """
        if allow_all_devices is None:
            raise ValueError("Invalid value for `allow_all_devices`, must not be `None`")

        self._allow_all_devices = allow_all_devices

    @property
    def capabilities(self):
        """Gets the capabilities of this PluginConfigLinux.

        capabilities

        :return: The capabilities of this PluginConfigLinux.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this PluginConfigLinux.

        capabilities

        :param capabilities: The capabilities of this PluginConfigLinux.
        :type capabilities: List[str]
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")

        self._capabilities = capabilities

    @property
    def devices(self):
        """Gets the devices of this PluginConfigLinux.

        devices

        :return: The devices of this PluginConfigLinux.
        :rtype: List[PluginDevice]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PluginConfigLinux.

        devices

        :param devices: The devices of this PluginConfigLinux.
        :type devices: List[PluginDevice]
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")

        self._devices = devices
