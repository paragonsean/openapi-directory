# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerIngress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, ip: str=None):
        """LoadBalancerIngress - a model defined in OpenAPI

        :param hostname: The hostname of this LoadBalancerIngress.
        :param ip: The ip of this LoadBalancerIngress.
        """
        self.openapi_types = {
            'hostname': str,
            'ip': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'ip': 'ip'
        }

        self._hostname = hostname
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerIngress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerIngress of this LoadBalancerIngress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this LoadBalancerIngress.

        Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers) +optional

        :return: The hostname of this LoadBalancerIngress.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this LoadBalancerIngress.

        Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers) +optional

        :param hostname: The hostname of this LoadBalancerIngress.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this LoadBalancerIngress.

        IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers) +optional

        :return: The ip of this LoadBalancerIngress.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this LoadBalancerIngress.

        IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers) +optional

        :param ip: The ip of this LoadBalancerIngress.
        :type ip: str
        """

        self._ip = ip
