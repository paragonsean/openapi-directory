# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert import Alert
from openapi_server.models.axis import Axis
from openapi_server.models.column import Column
from openapi_server.models.column_style import ColumnStyle
from openapi_server.models.field_config import FieldConfig
from openapi_server.models.gauge import Gauge
from openapi_server.models.int_string import IntString
from openapi_server.models.legend import Legend
from openapi_server.models.link import Link
from openapi_server.models.map_type import MapType
from openapi_server.models.options import Options
from openapi_server.models.panel_cards import PanelCards
from openapi_server.models.panel_color import PanelColor
from openapi_server.models.panel_grid_pos import PanelGridPos
from openapi_server.models.panel_scoped_vars_value import PanelScopedVarsValue
from openapi_server.models.panel_x_axis import PanelXAxis
from openapi_server.models.panel_y_axis import PanelYAxis
from openapi_server.models.range_map import RangeMap
from openapi_server.models.series_override import SeriesOverride
from openapi_server.models.sort import Sort
from openapi_server.models.spark_line import SparkLine
from openapi_server.models.target import Target
from openapi_server.models.threshold import Threshold
from openapi_server.models.tooltip import Tooltip
from openapi_server.models.value_map import ValueMap
from openapi_server import util


class Panel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert: Alert=None, alias_colors: object=None, bars: bool=None, cards: PanelCards=None, collapsed: bool=None, color: PanelColor=None, color_background: bool=None, color_value: bool=None, colors: List[str]=None, columns: List[Column]=None, content: str=None, dash_length: int=None, dashboard_tags: List[str]=None, dashes: bool=None, data_format: str=None, datasource: str=None, decimals: int=None, description: str=None, editable: bool=None, error: bool=None, field_config: FieldConfig=None, fill: int=None, folder_id: int=None, format: str=None, gauge: Gauge=None, grid_pos: PanelGridPos=None, headings: bool=None, height: object=None, hide_time_override: bool=None, hide_zero_buckets: bool=None, highlight_cards: bool=None, id: int=None, is_new: bool=None, left_y_axis_label: str=None, legend: Legend=None, limit: int=None, lines: bool=None, linewidth: int=None, links: List[Link]=None, mapping_type: int=None, mapping_types: List[MapType]=None, max_data_points: IntString=None, min_span: float=None, mode: str=None, name_filter: str=None, null_point_mode: str=None, only_alerts_on_dashboard: bool=None, options: Options=None, page_size: int=None, panels: List[Panel]=None, percentage: bool=None, pointradius: float=None, points: bool=None, postfix: str=None, postfix_font_size: str=None, prefix: str=None, prefix_font_size: str=None, query: str=None, range_maps: List[RangeMap]=None, recent: bool=None, renderer: str=None, repeat: str=None, repeat_panel_id: int=None, reverse_y_buckets: bool=None, right_y_axis_label: str=None, scoped_vars: Dict[str, PanelScopedVarsValue]=None, scroll: bool=None, search: bool=None, series_overrides: List[SeriesOverride]=None, show: str=None, show_header: bool=None, sort: Sort=None, sort_order: int=None, space_length: int=None, span: float=None, sparkline: SparkLine=None, stack: bool=None, starred: bool=None, state_filter: List[str]=None, stepped_line: bool=None, styles: List[ColumnStyle]=None, tags: List[str]=None, targets: List[Target]=None, thresholds: List[Threshold]=None, time_from: str=None, time_shift: str=None, title: str=None, tooltip: Tooltip=None, tooltip_decimals: int=None, transform: str=None, transparent: bool=None, type: str=None, value_font_size: str=None, value_maps: List[ValueMap]=None, value_name: str=None, x_axis: bool=None, x_axis: PanelXAxis=None, x_bucket_number: float=None, x_bucket_size: str=None, xaxis: Axis=None, y_axis: bool=None, y_axis: PanelYAxis=None, y_bucket_bound: str=None, y_bucket_number: float=None, y_bucket_size: float=None, y_formats: List[str]=None, yaxes: List[Axis]=None):
        """Panel - a model defined in OpenAPI

        :param alert: The alert of this Panel.
        :param alias_colors: The alias_colors of this Panel.
        :param bars: The bars of this Panel.
        :param cards: The cards of this Panel.
        :param collapsed: The collapsed of this Panel.
        :param color: The color of this Panel.
        :param color_background: The color_background of this Panel.
        :param color_value: The color_value of this Panel.
        :param colors: The colors of this Panel.
        :param columns: The columns of this Panel.
        :param content: The content of this Panel.
        :param dash_length: The dash_length of this Panel.
        :param dashboard_tags: The dashboard_tags of this Panel.
        :param dashes: The dashes of this Panel.
        :param data_format: The data_format of this Panel.
        :param datasource: The datasource of this Panel.
        :param decimals: The decimals of this Panel.
        :param description: The description of this Panel.
        :param editable: The editable of this Panel.
        :param error: The error of this Panel.
        :param field_config: The field_config of this Panel.
        :param fill: The fill of this Panel.
        :param folder_id: The folder_id of this Panel.
        :param format: The format of this Panel.
        :param gauge: The gauge of this Panel.
        :param grid_pos: The grid_pos of this Panel.
        :param headings: The headings of this Panel.
        :param height: The height of this Panel.
        :param hide_time_override: The hide_time_override of this Panel.
        :param hide_zero_buckets: The hide_zero_buckets of this Panel.
        :param highlight_cards: The highlight_cards of this Panel.
        :param id: The id of this Panel.
        :param is_new: The is_new of this Panel.
        :param left_y_axis_label: The left_y_axis_label of this Panel.
        :param legend: The legend of this Panel.
        :param limit: The limit of this Panel.
        :param lines: The lines of this Panel.
        :param linewidth: The linewidth of this Panel.
        :param links: The links of this Panel.
        :param mapping_type: The mapping_type of this Panel.
        :param mapping_types: The mapping_types of this Panel.
        :param max_data_points: The max_data_points of this Panel.
        :param min_span: The min_span of this Panel.
        :param mode: The mode of this Panel.
        :param name_filter: The name_filter of this Panel.
        :param null_point_mode: The null_point_mode of this Panel.
        :param only_alerts_on_dashboard: The only_alerts_on_dashboard of this Panel.
        :param options: The options of this Panel.
        :param page_size: The page_size of this Panel.
        :param panels: The panels of this Panel.
        :param percentage: The percentage of this Panel.
        :param pointradius: The pointradius of this Panel.
        :param points: The points of this Panel.
        :param postfix: The postfix of this Panel.
        :param postfix_font_size: The postfix_font_size of this Panel.
        :param prefix: The prefix of this Panel.
        :param prefix_font_size: The prefix_font_size of this Panel.
        :param query: The query of this Panel.
        :param range_maps: The range_maps of this Panel.
        :param recent: The recent of this Panel.
        :param renderer: The renderer of this Panel.
        :param repeat: The repeat of this Panel.
        :param repeat_panel_id: The repeat_panel_id of this Panel.
        :param reverse_y_buckets: The reverse_y_buckets of this Panel.
        :param right_y_axis_label: The right_y_axis_label of this Panel.
        :param scoped_vars: The scoped_vars of this Panel.
        :param scroll: The scroll of this Panel.
        :param search: The search of this Panel.
        :param series_overrides: The series_overrides of this Panel.
        :param show: The show of this Panel.
        :param show_header: The show_header of this Panel.
        :param sort: The sort of this Panel.
        :param sort_order: The sort_order of this Panel.
        :param space_length: The space_length of this Panel.
        :param span: The span of this Panel.
        :param sparkline: The sparkline of this Panel.
        :param stack: The stack of this Panel.
        :param starred: The starred of this Panel.
        :param state_filter: The state_filter of this Panel.
        :param stepped_line: The stepped_line of this Panel.
        :param styles: The styles of this Panel.
        :param tags: The tags of this Panel.
        :param targets: The targets of this Panel.
        :param thresholds: The thresholds of this Panel.
        :param time_from: The time_from of this Panel.
        :param time_shift: The time_shift of this Panel.
        :param title: The title of this Panel.
        :param tooltip: The tooltip of this Panel.
        :param tooltip_decimals: The tooltip_decimals of this Panel.
        :param transform: The transform of this Panel.
        :param transparent: The transparent of this Panel.
        :param type: The type of this Panel.
        :param value_font_size: The value_font_size of this Panel.
        :param value_maps: The value_maps of this Panel.
        :param value_name: The value_name of this Panel.
        :param x_axis: The x_axis of this Panel.
        :param x_axis: The x_axis of this Panel.
        :param x_bucket_number: The x_bucket_number of this Panel.
        :param x_bucket_size: The x_bucket_size of this Panel.
        :param xaxis: The xaxis of this Panel.
        :param y_axis: The y_axis of this Panel.
        :param y_axis: The y_axis of this Panel.
        :param y_bucket_bound: The y_bucket_bound of this Panel.
        :param y_bucket_number: The y_bucket_number of this Panel.
        :param y_bucket_size: The y_bucket_size of this Panel.
        :param y_formats: The y_formats of this Panel.
        :param yaxes: The yaxes of this Panel.
        """
        self.openapi_types = {
            'alert': Alert,
            'alias_colors': object,
            'bars': bool,
            'cards': PanelCards,
            'collapsed': bool,
            'color': PanelColor,
            'color_background': bool,
            'color_value': bool,
            'colors': List[str],
            'columns': List[Column],
            'content': str,
            'dash_length': int,
            'dashboard_tags': List[str],
            'dashes': bool,
            'data_format': str,
            'datasource': str,
            'decimals': int,
            'description': str,
            'editable': bool,
            'error': bool,
            'field_config': FieldConfig,
            'fill': int,
            'folder_id': int,
            'format': str,
            'gauge': Gauge,
            'grid_pos': PanelGridPos,
            'headings': bool,
            'height': object,
            'hide_time_override': bool,
            'hide_zero_buckets': bool,
            'highlight_cards': bool,
            'id': int,
            'is_new': bool,
            'left_y_axis_label': str,
            'legend': Legend,
            'limit': int,
            'lines': bool,
            'linewidth': int,
            'links': List[Link],
            'mapping_type': int,
            'mapping_types': List[MapType],
            'max_data_points': IntString,
            'min_span': float,
            'mode': str,
            'name_filter': str,
            'null_point_mode': str,
            'only_alerts_on_dashboard': bool,
            'options': Options,
            'page_size': int,
            'panels': List[Panel],
            'percentage': bool,
            'pointradius': float,
            'points': bool,
            'postfix': str,
            'postfix_font_size': str,
            'prefix': str,
            'prefix_font_size': str,
            'query': str,
            'range_maps': List[RangeMap],
            'recent': bool,
            'renderer': str,
            'repeat': str,
            'repeat_panel_id': int,
            'reverse_y_buckets': bool,
            'right_y_axis_label': str,
            'scoped_vars': Dict[str, PanelScopedVarsValue],
            'scroll': bool,
            'search': bool,
            'series_overrides': List[SeriesOverride],
            'show': str,
            'show_header': bool,
            'sort': Sort,
            'sort_order': int,
            'space_length': int,
            'span': float,
            'sparkline': SparkLine,
            'stack': bool,
            'starred': bool,
            'state_filter': List[str],
            'stepped_line': bool,
            'styles': List[ColumnStyle],
            'tags': List[str],
            'targets': List[Target],
            'thresholds': List[Threshold],
            'time_from': str,
            'time_shift': str,
            'title': str,
            'tooltip': Tooltip,
            'tooltip_decimals': int,
            'transform': str,
            'transparent': bool,
            'type': str,
            'value_font_size': str,
            'value_maps': List[ValueMap],
            'value_name': str,
            'x_axis': bool,
            'x_axis': PanelXAxis,
            'x_bucket_number': float,
            'x_bucket_size': str,
            'xaxis': Axis,
            'y_axis': bool,
            'y_axis': PanelYAxis,
            'y_bucket_bound': str,
            'y_bucket_number': float,
            'y_bucket_size': float,
            'y_formats': List[str],
            'yaxes': List[Axis]
        }

        self.attribute_map = {
            'alert': 'alert',
            'alias_colors': 'aliasColors',
            'bars': 'bars',
            'cards': 'cards',
            'collapsed': 'collapsed',
            'color': 'color',
            'color_background': 'colorBackground',
            'color_value': 'colorValue',
            'colors': 'colors',
            'columns': 'columns',
            'content': 'content',
            'dash_length': 'dashLength',
            'dashboard_tags': 'dashboardTags',
            'dashes': 'dashes',
            'data_format': 'dataFormat',
            'datasource': 'datasource',
            'decimals': 'decimals',
            'description': 'description',
            'editable': 'editable',
            'error': 'error',
            'field_config': 'fieldConfig',
            'fill': 'fill',
            'folder_id': 'folderId',
            'format': 'format',
            'gauge': 'gauge',
            'grid_pos': 'gridPos',
            'headings': 'headings',
            'height': 'height',
            'hide_time_override': 'hideTimeOverride',
            'hide_zero_buckets': 'hideZeroBuckets',
            'highlight_cards': 'highlightCards',
            'id': 'id',
            'is_new': 'isNew',
            'left_y_axis_label': 'leftYAxisLabel',
            'legend': 'legend',
            'limit': 'limit',
            'lines': 'lines',
            'linewidth': 'linewidth',
            'links': 'links',
            'mapping_type': 'mappingType',
            'mapping_types': 'mappingTypes',
            'max_data_points': 'maxDataPoints',
            'min_span': 'minSpan',
            'mode': 'mode',
            'name_filter': 'nameFilter',
            'null_point_mode': 'nullPointMode',
            'only_alerts_on_dashboard': 'onlyAlertsOnDashboard',
            'options': 'options',
            'page_size': 'pageSize',
            'panels': 'panels',
            'percentage': 'percentage',
            'pointradius': 'pointradius',
            'points': 'points',
            'postfix': 'postfix',
            'postfix_font_size': 'postfixFontSize',
            'prefix': 'prefix',
            'prefix_font_size': 'prefixFontSize',
            'query': 'query',
            'range_maps': 'rangeMaps',
            'recent': 'recent',
            'renderer': 'renderer',
            'repeat': 'repeat',
            'repeat_panel_id': 'repeatPanelId',
            'reverse_y_buckets': 'reverseYBuckets',
            'right_y_axis_label': 'rightYAxisLabel',
            'scoped_vars': 'scopedVars',
            'scroll': 'scroll',
            'search': 'search',
            'series_overrides': 'seriesOverrides',
            'show': 'show',
            'show_header': 'showHeader',
            'sort': 'sort',
            'sort_order': 'sortOrder',
            'space_length': 'spaceLength',
            'span': 'span',
            'sparkline': 'sparkline',
            'stack': 'stack',
            'starred': 'starred',
            'state_filter': 'stateFilter',
            'stepped_line': 'steppedLine',
            'styles': 'styles',
            'tags': 'tags',
            'targets': 'targets',
            'thresholds': 'thresholds',
            'time_from': 'timeFrom',
            'time_shift': 'timeShift',
            'title': 'title',
            'tooltip': 'tooltip',
            'tooltip_decimals': 'tooltipDecimals',
            'transform': 'transform',
            'transparent': 'transparent',
            'type': 'type',
            'value_font_size': 'valueFontSize',
            'value_maps': 'valueMaps',
            'value_name': 'valueName',
            'x_axis': 'x-axis',
            'x_axis': 'xAxis',
            'x_bucket_number': 'xBucketNumber',
            'x_bucket_size': 'xBucketSize',
            'xaxis': 'xaxis',
            'y_axis': 'y-axis',
            'y_axis': 'yAxis',
            'y_bucket_bound': 'yBucketBound',
            'y_bucket_number': 'yBucketNumber',
            'y_bucket_size': 'yBucketSize',
            'y_formats': 'y_formats',
            'yaxes': 'yaxes'
        }

        self._alert = alert
        self._alias_colors = alias_colors
        self._bars = bars
        self._cards = cards
        self._collapsed = collapsed
        self._color = color
        self._color_background = color_background
        self._color_value = color_value
        self._colors = colors
        self._columns = columns
        self._content = content
        self._dash_length = dash_length
        self._dashboard_tags = dashboard_tags
        self._dashes = dashes
        self._data_format = data_format
        self._datasource = datasource
        self._decimals = decimals
        self._description = description
        self._editable = editable
        self._error = error
        self._field_config = field_config
        self._fill = fill
        self._folder_id = folder_id
        self._format = format
        self._gauge = gauge
        self._grid_pos = grid_pos
        self._headings = headings
        self._height = height
        self._hide_time_override = hide_time_override
        self._hide_zero_buckets = hide_zero_buckets
        self._highlight_cards = highlight_cards
        self._id = id
        self._is_new = is_new
        self._left_y_axis_label = left_y_axis_label
        self._legend = legend
        self._limit = limit
        self._lines = lines
        self._linewidth = linewidth
        self._links = links
        self._mapping_type = mapping_type
        self._mapping_types = mapping_types
        self._max_data_points = max_data_points
        self._min_span = min_span
        self._mode = mode
        self._name_filter = name_filter
        self._null_point_mode = null_point_mode
        self._only_alerts_on_dashboard = only_alerts_on_dashboard
        self._options = options
        self._page_size = page_size
        self._panels = panels
        self._percentage = percentage
        self._pointradius = pointradius
        self._points = points
        self._postfix = postfix
        self._postfix_font_size = postfix_font_size
        self._prefix = prefix
        self._prefix_font_size = prefix_font_size
        self._query = query
        self._range_maps = range_maps
        self._recent = recent
        self._renderer = renderer
        self._repeat = repeat
        self._repeat_panel_id = repeat_panel_id
        self._reverse_y_buckets = reverse_y_buckets
        self._right_y_axis_label = right_y_axis_label
        self._scoped_vars = scoped_vars
        self._scroll = scroll
        self._search = search
        self._series_overrides = series_overrides
        self._show = show
        self._show_header = show_header
        self._sort = sort
        self._sort_order = sort_order
        self._space_length = space_length
        self._span = span
        self._sparkline = sparkline
        self._stack = stack
        self._starred = starred
        self._state_filter = state_filter
        self._stepped_line = stepped_line
        self._styles = styles
        self._tags = tags
        self._targets = targets
        self._thresholds = thresholds
        self._time_from = time_from
        self._time_shift = time_shift
        self._title = title
        self._tooltip = tooltip
        self._tooltip_decimals = tooltip_decimals
        self._transform = transform
        self._transparent = transparent
        self._type = type
        self._value_font_size = value_font_size
        self._value_maps = value_maps
        self._value_name = value_name
        self._x_axis = x_axis
        self._x_axis = x_axis
        self._x_bucket_number = x_bucket_number
        self._x_bucket_size = x_bucket_size
        self._xaxis = xaxis
        self._y_axis = y_axis
        self._y_axis = y_axis
        self._y_bucket_bound = y_bucket_bound
        self._y_bucket_number = y_bucket_number
        self._y_bucket_size = y_bucket_size
        self._y_formats = y_formats
        self._yaxes = yaxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Panel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Panel of this Panel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert(self):
        """Gets the alert of this Panel.


        :return: The alert of this Panel.
        :rtype: Alert
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this Panel.


        :param alert: The alert of this Panel.
        :type alert: Alert
        """

        self._alert = alert

    @property
    def alias_colors(self):
        """Gets the alias_colors of this Panel.


        :return: The alias_colors of this Panel.
        :rtype: object
        """
        return self._alias_colors

    @alias_colors.setter
    def alias_colors(self, alias_colors):
        """Sets the alias_colors of this Panel.


        :param alias_colors: The alias_colors of this Panel.
        :type alias_colors: object
        """

        self._alias_colors = alias_colors

    @property
    def bars(self):
        """Gets the bars of this Panel.


        :return: The bars of this Panel.
        :rtype: bool
        """
        return self._bars

    @bars.setter
    def bars(self, bars):
        """Sets the bars of this Panel.


        :param bars: The bars of this Panel.
        :type bars: bool
        """

        self._bars = bars

    @property
    def cards(self):
        """Gets the cards of this Panel.


        :return: The cards of this Panel.
        :rtype: PanelCards
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this Panel.


        :param cards: The cards of this Panel.
        :type cards: PanelCards
        """

        self._cards = cards

    @property
    def collapsed(self):
        """Gets the collapsed of this Panel.


        :return: The collapsed of this Panel.
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this Panel.


        :param collapsed: The collapsed of this Panel.
        :type collapsed: bool
        """

        self._collapsed = collapsed

    @property
    def color(self):
        """Gets the color of this Panel.


        :return: The color of this Panel.
        :rtype: PanelColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Panel.


        :param color: The color of this Panel.
        :type color: PanelColor
        """

        self._color = color

    @property
    def color_background(self):
        """Gets the color_background of this Panel.


        :return: The color_background of this Panel.
        :rtype: bool
        """
        return self._color_background

    @color_background.setter
    def color_background(self, color_background):
        """Sets the color_background of this Panel.


        :param color_background: The color_background of this Panel.
        :type color_background: bool
        """

        self._color_background = color_background

    @property
    def color_value(self):
        """Gets the color_value of this Panel.


        :return: The color_value of this Panel.
        :rtype: bool
        """
        return self._color_value

    @color_value.setter
    def color_value(self, color_value):
        """Sets the color_value of this Panel.


        :param color_value: The color_value of this Panel.
        :type color_value: bool
        """

        self._color_value = color_value

    @property
    def colors(self):
        """Gets the colors of this Panel.


        :return: The colors of this Panel.
        :rtype: List[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Panel.


        :param colors: The colors of this Panel.
        :type colors: List[str]
        """

        self._colors = colors

    @property
    def columns(self):
        """Gets the columns of this Panel.


        :return: The columns of this Panel.
        :rtype: List[Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Panel.


        :param columns: The columns of this Panel.
        :type columns: List[Column]
        """

        self._columns = columns

    @property
    def content(self):
        """Gets the content of this Panel.


        :return: The content of this Panel.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Panel.


        :param content: The content of this Panel.
        :type content: str
        """

        self._content = content

    @property
    def dash_length(self):
        """Gets the dash_length of this Panel.


        :return: The dash_length of this Panel.
        :rtype: int
        """
        return self._dash_length

    @dash_length.setter
    def dash_length(self, dash_length):
        """Sets the dash_length of this Panel.


        :param dash_length: The dash_length of this Panel.
        :type dash_length: int
        """

        self._dash_length = dash_length

    @property
    def dashboard_tags(self):
        """Gets the dashboard_tags of this Panel.


        :return: The dashboard_tags of this Panel.
        :rtype: List[str]
        """
        return self._dashboard_tags

    @dashboard_tags.setter
    def dashboard_tags(self, dashboard_tags):
        """Sets the dashboard_tags of this Panel.


        :param dashboard_tags: The dashboard_tags of this Panel.
        :type dashboard_tags: List[str]
        """

        self._dashboard_tags = dashboard_tags

    @property
    def dashes(self):
        """Gets the dashes of this Panel.


        :return: The dashes of this Panel.
        :rtype: bool
        """
        return self._dashes

    @dashes.setter
    def dashes(self, dashes):
        """Sets the dashes of this Panel.


        :param dashes: The dashes of this Panel.
        :type dashes: bool
        """

        self._dashes = dashes

    @property
    def data_format(self):
        """Gets the data_format of this Panel.


        :return: The data_format of this Panel.
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this Panel.


        :param data_format: The data_format of this Panel.
        :type data_format: str
        """

        self._data_format = data_format

    @property
    def datasource(self):
        """Gets the datasource of this Panel.


        :return: The datasource of this Panel.
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this Panel.


        :param datasource: The datasource of this Panel.
        :type datasource: str
        """

        self._datasource = datasource

    @property
    def decimals(self):
        """Gets the decimals of this Panel.


        :return: The decimals of this Panel.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this Panel.


        :param decimals: The decimals of this Panel.
        :type decimals: int
        """

        self._decimals = decimals

    @property
    def description(self):
        """Gets the description of this Panel.


        :return: The description of this Panel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Panel.


        :param description: The description of this Panel.
        :type description: str
        """

        self._description = description

    @property
    def editable(self):
        """Gets the editable of this Panel.


        :return: The editable of this Panel.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Panel.


        :param editable: The editable of this Panel.
        :type editable: bool
        """

        self._editable = editable

    @property
    def error(self):
        """Gets the error of this Panel.


        :return: The error of this Panel.
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Panel.


        :param error: The error of this Panel.
        :type error: bool
        """

        self._error = error

    @property
    def field_config(self):
        """Gets the field_config of this Panel.


        :return: The field_config of this Panel.
        :rtype: FieldConfig
        """
        return self._field_config

    @field_config.setter
    def field_config(self, field_config):
        """Sets the field_config of this Panel.


        :param field_config: The field_config of this Panel.
        :type field_config: FieldConfig
        """

        self._field_config = field_config

    @property
    def fill(self):
        """Gets the fill of this Panel.


        :return: The fill of this Panel.
        :rtype: int
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this Panel.


        :param fill: The fill of this Panel.
        :type fill: int
        """

        self._fill = fill

    @property
    def folder_id(self):
        """Gets the folder_id of this Panel.


        :return: The folder_id of this Panel.
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Panel.


        :param folder_id: The folder_id of this Panel.
        :type folder_id: int
        """

        self._folder_id = folder_id

    @property
    def format(self):
        """Gets the format of this Panel.


        :return: The format of this Panel.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Panel.


        :param format: The format of this Panel.
        :type format: str
        """

        self._format = format

    @property
    def gauge(self):
        """Gets the gauge of this Panel.


        :return: The gauge of this Panel.
        :rtype: Gauge
        """
        return self._gauge

    @gauge.setter
    def gauge(self, gauge):
        """Sets the gauge of this Panel.


        :param gauge: The gauge of this Panel.
        :type gauge: Gauge
        """

        self._gauge = gauge

    @property
    def grid_pos(self):
        """Gets the grid_pos of this Panel.


        :return: The grid_pos of this Panel.
        :rtype: PanelGridPos
        """
        return self._grid_pos

    @grid_pos.setter
    def grid_pos(self, grid_pos):
        """Sets the grid_pos of this Panel.


        :param grid_pos: The grid_pos of this Panel.
        :type grid_pos: PanelGridPos
        """

        self._grid_pos = grid_pos

    @property
    def headings(self):
        """Gets the headings of this Panel.


        :return: The headings of this Panel.
        :rtype: bool
        """
        return self._headings

    @headings.setter
    def headings(self, headings):
        """Sets the headings of this Panel.


        :param headings: The headings of this Panel.
        :type headings: bool
        """

        self._headings = headings

    @property
    def height(self):
        """Gets the height of this Panel.


        :return: The height of this Panel.
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Panel.


        :param height: The height of this Panel.
        :type height: object
        """

        self._height = height

    @property
    def hide_time_override(self):
        """Gets the hide_time_override of this Panel.


        :return: The hide_time_override of this Panel.
        :rtype: bool
        """
        return self._hide_time_override

    @hide_time_override.setter
    def hide_time_override(self, hide_time_override):
        """Sets the hide_time_override of this Panel.


        :param hide_time_override: The hide_time_override of this Panel.
        :type hide_time_override: bool
        """

        self._hide_time_override = hide_time_override

    @property
    def hide_zero_buckets(self):
        """Gets the hide_zero_buckets of this Panel.


        :return: The hide_zero_buckets of this Panel.
        :rtype: bool
        """
        return self._hide_zero_buckets

    @hide_zero_buckets.setter
    def hide_zero_buckets(self, hide_zero_buckets):
        """Sets the hide_zero_buckets of this Panel.


        :param hide_zero_buckets: The hide_zero_buckets of this Panel.
        :type hide_zero_buckets: bool
        """

        self._hide_zero_buckets = hide_zero_buckets

    @property
    def highlight_cards(self):
        """Gets the highlight_cards of this Panel.


        :return: The highlight_cards of this Panel.
        :rtype: bool
        """
        return self._highlight_cards

    @highlight_cards.setter
    def highlight_cards(self, highlight_cards):
        """Sets the highlight_cards of this Panel.


        :param highlight_cards: The highlight_cards of this Panel.
        :type highlight_cards: bool
        """

        self._highlight_cards = highlight_cards

    @property
    def id(self):
        """Gets the id of this Panel.


        :return: The id of this Panel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Panel.


        :param id: The id of this Panel.
        :type id: int
        """

        self._id = id

    @property
    def is_new(self):
        """Gets the is_new of this Panel.


        :return: The is_new of this Panel.
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this Panel.


        :param is_new: The is_new of this Panel.
        :type is_new: bool
        """

        self._is_new = is_new

    @property
    def left_y_axis_label(self):
        """Gets the left_y_axis_label of this Panel.


        :return: The left_y_axis_label of this Panel.
        :rtype: str
        """
        return self._left_y_axis_label

    @left_y_axis_label.setter
    def left_y_axis_label(self, left_y_axis_label):
        """Sets the left_y_axis_label of this Panel.


        :param left_y_axis_label: The left_y_axis_label of this Panel.
        :type left_y_axis_label: str
        """

        self._left_y_axis_label = left_y_axis_label

    @property
    def legend(self):
        """Gets the legend of this Panel.


        :return: The legend of this Panel.
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this Panel.


        :param legend: The legend of this Panel.
        :type legend: Legend
        """

        self._legend = legend

    @property
    def limit(self):
        """Gets the limit of this Panel.


        :return: The limit of this Panel.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Panel.


        :param limit: The limit of this Panel.
        :type limit: int
        """

        self._limit = limit

    @property
    def lines(self):
        """Gets the lines of this Panel.


        :return: The lines of this Panel.
        :rtype: bool
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this Panel.


        :param lines: The lines of this Panel.
        :type lines: bool
        """

        self._lines = lines

    @property
    def linewidth(self):
        """Gets the linewidth of this Panel.


        :return: The linewidth of this Panel.
        :rtype: int
        """
        return self._linewidth

    @linewidth.setter
    def linewidth(self, linewidth):
        """Sets the linewidth of this Panel.


        :param linewidth: The linewidth of this Panel.
        :type linewidth: int
        """

        self._linewidth = linewidth

    @property
    def links(self):
        """Gets the links of this Panel.


        :return: The links of this Panel.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Panel.


        :param links: The links of this Panel.
        :type links: List[Link]
        """

        self._links = links

    @property
    def mapping_type(self):
        """Gets the mapping_type of this Panel.


        :return: The mapping_type of this Panel.
        :rtype: int
        """
        return self._mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):
        """Sets the mapping_type of this Panel.


        :param mapping_type: The mapping_type of this Panel.
        :type mapping_type: int
        """

        self._mapping_type = mapping_type

    @property
    def mapping_types(self):
        """Gets the mapping_types of this Panel.


        :return: The mapping_types of this Panel.
        :rtype: List[MapType]
        """
        return self._mapping_types

    @mapping_types.setter
    def mapping_types(self, mapping_types):
        """Sets the mapping_types of this Panel.


        :param mapping_types: The mapping_types of this Panel.
        :type mapping_types: List[MapType]
        """

        self._mapping_types = mapping_types

    @property
    def max_data_points(self):
        """Gets the max_data_points of this Panel.


        :return: The max_data_points of this Panel.
        :rtype: IntString
        """
        return self._max_data_points

    @max_data_points.setter
    def max_data_points(self, max_data_points):
        """Sets the max_data_points of this Panel.


        :param max_data_points: The max_data_points of this Panel.
        :type max_data_points: IntString
        """

        self._max_data_points = max_data_points

    @property
    def min_span(self):
        """Gets the min_span of this Panel.


        :return: The min_span of this Panel.
        :rtype: float
        """
        return self._min_span

    @min_span.setter
    def min_span(self, min_span):
        """Sets the min_span of this Panel.


        :param min_span: The min_span of this Panel.
        :type min_span: float
        """

        self._min_span = min_span

    @property
    def mode(self):
        """Gets the mode of this Panel.


        :return: The mode of this Panel.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Panel.


        :param mode: The mode of this Panel.
        :type mode: str
        """

        self._mode = mode

    @property
    def name_filter(self):
        """Gets the name_filter of this Panel.


        :return: The name_filter of this Panel.
        :rtype: str
        """
        return self._name_filter

    @name_filter.setter
    def name_filter(self, name_filter):
        """Sets the name_filter of this Panel.


        :param name_filter: The name_filter of this Panel.
        :type name_filter: str
        """

        self._name_filter = name_filter

    @property
    def null_point_mode(self):
        """Gets the null_point_mode of this Panel.


        :return: The null_point_mode of this Panel.
        :rtype: str
        """
        return self._null_point_mode

    @null_point_mode.setter
    def null_point_mode(self, null_point_mode):
        """Sets the null_point_mode of this Panel.


        :param null_point_mode: The null_point_mode of this Panel.
        :type null_point_mode: str
        """

        self._null_point_mode = null_point_mode

    @property
    def only_alerts_on_dashboard(self):
        """Gets the only_alerts_on_dashboard of this Panel.


        :return: The only_alerts_on_dashboard of this Panel.
        :rtype: bool
        """
        return self._only_alerts_on_dashboard

    @only_alerts_on_dashboard.setter
    def only_alerts_on_dashboard(self, only_alerts_on_dashboard):
        """Sets the only_alerts_on_dashboard of this Panel.


        :param only_alerts_on_dashboard: The only_alerts_on_dashboard of this Panel.
        :type only_alerts_on_dashboard: bool
        """

        self._only_alerts_on_dashboard = only_alerts_on_dashboard

    @property
    def options(self):
        """Gets the options of this Panel.


        :return: The options of this Panel.
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Panel.


        :param options: The options of this Panel.
        :type options: Options
        """

        self._options = options

    @property
    def page_size(self):
        """Gets the page_size of this Panel.


        :return: The page_size of this Panel.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Panel.


        :param page_size: The page_size of this Panel.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def panels(self):
        """Gets the panels of this Panel.


        :return: The panels of this Panel.
        :rtype: List[Panel]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this Panel.


        :param panels: The panels of this Panel.
        :type panels: List[Panel]
        """

        self._panels = panels

    @property
    def percentage(self):
        """Gets the percentage of this Panel.


        :return: The percentage of this Panel.
        :rtype: bool
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Panel.


        :param percentage: The percentage of this Panel.
        :type percentage: bool
        """

        self._percentage = percentage

    @property
    def pointradius(self):
        """Gets the pointradius of this Panel.


        :return: The pointradius of this Panel.
        :rtype: float
        """
        return self._pointradius

    @pointradius.setter
    def pointradius(self, pointradius):
        """Sets the pointradius of this Panel.


        :param pointradius: The pointradius of this Panel.
        :type pointradius: float
        """

        self._pointradius = pointradius

    @property
    def points(self):
        """Gets the points of this Panel.


        :return: The points of this Panel.
        :rtype: bool
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Panel.


        :param points: The points of this Panel.
        :type points: bool
        """

        self._points = points

    @property
    def postfix(self):
        """Gets the postfix of this Panel.


        :return: The postfix of this Panel.
        :rtype: str
        """
        return self._postfix

    @postfix.setter
    def postfix(self, postfix):
        """Sets the postfix of this Panel.


        :param postfix: The postfix of this Panel.
        :type postfix: str
        """

        self._postfix = postfix

    @property
    def postfix_font_size(self):
        """Gets the postfix_font_size of this Panel.


        :return: The postfix_font_size of this Panel.
        :rtype: str
        """
        return self._postfix_font_size

    @postfix_font_size.setter
    def postfix_font_size(self, postfix_font_size):
        """Sets the postfix_font_size of this Panel.


        :param postfix_font_size: The postfix_font_size of this Panel.
        :type postfix_font_size: str
        """

        self._postfix_font_size = postfix_font_size

    @property
    def prefix(self):
        """Gets the prefix of this Panel.


        :return: The prefix of this Panel.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Panel.


        :param prefix: The prefix of this Panel.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def prefix_font_size(self):
        """Gets the prefix_font_size of this Panel.


        :return: The prefix_font_size of this Panel.
        :rtype: str
        """
        return self._prefix_font_size

    @prefix_font_size.setter
    def prefix_font_size(self, prefix_font_size):
        """Sets the prefix_font_size of this Panel.


        :param prefix_font_size: The prefix_font_size of this Panel.
        :type prefix_font_size: str
        """

        self._prefix_font_size = prefix_font_size

    @property
    def query(self):
        """Gets the query of this Panel.


        :return: The query of this Panel.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Panel.


        :param query: The query of this Panel.
        :type query: str
        """

        self._query = query

    @property
    def range_maps(self):
        """Gets the range_maps of this Panel.


        :return: The range_maps of this Panel.
        :rtype: List[RangeMap]
        """
        return self._range_maps

    @range_maps.setter
    def range_maps(self, range_maps):
        """Sets the range_maps of this Panel.


        :param range_maps: The range_maps of this Panel.
        :type range_maps: List[RangeMap]
        """

        self._range_maps = range_maps

    @property
    def recent(self):
        """Gets the recent of this Panel.


        :return: The recent of this Panel.
        :rtype: bool
        """
        return self._recent

    @recent.setter
    def recent(self, recent):
        """Sets the recent of this Panel.


        :param recent: The recent of this Panel.
        :type recent: bool
        """

        self._recent = recent

    @property
    def renderer(self):
        """Gets the renderer of this Panel.


        :return: The renderer of this Panel.
        :rtype: str
        """
        return self._renderer

    @renderer.setter
    def renderer(self, renderer):
        """Sets the renderer of this Panel.


        :param renderer: The renderer of this Panel.
        :type renderer: str
        """

        self._renderer = renderer

    @property
    def repeat(self):
        """Gets the repeat of this Panel.


        :return: The repeat of this Panel.
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this Panel.


        :param repeat: The repeat of this Panel.
        :type repeat: str
        """

        self._repeat = repeat

    @property
    def repeat_panel_id(self):
        """Gets the repeat_panel_id of this Panel.

        RepeatIteration *int64   `json:\"repeatIteration,omitempty\"`

        :return: The repeat_panel_id of this Panel.
        :rtype: int
        """
        return self._repeat_panel_id

    @repeat_panel_id.setter
    def repeat_panel_id(self, repeat_panel_id):
        """Sets the repeat_panel_id of this Panel.

        RepeatIteration *int64   `json:\"repeatIteration,omitempty\"`

        :param repeat_panel_id: The repeat_panel_id of this Panel.
        :type repeat_panel_id: int
        """

        self._repeat_panel_id = repeat_panel_id

    @property
    def reverse_y_buckets(self):
        """Gets the reverse_y_buckets of this Panel.


        :return: The reverse_y_buckets of this Panel.
        :rtype: bool
        """
        return self._reverse_y_buckets

    @reverse_y_buckets.setter
    def reverse_y_buckets(self, reverse_y_buckets):
        """Sets the reverse_y_buckets of this Panel.


        :param reverse_y_buckets: The reverse_y_buckets of this Panel.
        :type reverse_y_buckets: bool
        """

        self._reverse_y_buckets = reverse_y_buckets

    @property
    def right_y_axis_label(self):
        """Gets the right_y_axis_label of this Panel.


        :return: The right_y_axis_label of this Panel.
        :rtype: str
        """
        return self._right_y_axis_label

    @right_y_axis_label.setter
    def right_y_axis_label(self, right_y_axis_label):
        """Sets the right_y_axis_label of this Panel.


        :param right_y_axis_label: The right_y_axis_label of this Panel.
        :type right_y_axis_label: str
        """

        self._right_y_axis_label = right_y_axis_label

    @property
    def scoped_vars(self):
        """Gets the scoped_vars of this Panel.


        :return: The scoped_vars of this Panel.
        :rtype: Dict[str, PanelScopedVarsValue]
        """
        return self._scoped_vars

    @scoped_vars.setter
    def scoped_vars(self, scoped_vars):
        """Sets the scoped_vars of this Panel.


        :param scoped_vars: The scoped_vars of this Panel.
        :type scoped_vars: Dict[str, PanelScopedVarsValue]
        """

        self._scoped_vars = scoped_vars

    @property
    def scroll(self):
        """Gets the scroll of this Panel.


        :return: The scroll of this Panel.
        :rtype: bool
        """
        return self._scroll

    @scroll.setter
    def scroll(self, scroll):
        """Sets the scroll of this Panel.


        :param scroll: The scroll of this Panel.
        :type scroll: bool
        """

        self._scroll = scroll

    @property
    def search(self):
        """Gets the search of this Panel.


        :return: The search of this Panel.
        :rtype: bool
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this Panel.


        :param search: The search of this Panel.
        :type search: bool
        """

        self._search = search

    @property
    def series_overrides(self):
        """Gets the series_overrides of this Panel.


        :return: The series_overrides of this Panel.
        :rtype: List[SeriesOverride]
        """
        return self._series_overrides

    @series_overrides.setter
    def series_overrides(self, series_overrides):
        """Sets the series_overrides of this Panel.


        :param series_overrides: The series_overrides of this Panel.
        :type series_overrides: List[SeriesOverride]
        """

        self._series_overrides = series_overrides

    @property
    def show(self):
        """Gets the show of this Panel.


        :return: The show of this Panel.
        :rtype: str
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this Panel.


        :param show: The show of this Panel.
        :type show: str
        """

        self._show = show

    @property
    def show_header(self):
        """Gets the show_header of this Panel.


        :return: The show_header of this Panel.
        :rtype: bool
        """
        return self._show_header

    @show_header.setter
    def show_header(self, show_header):
        """Sets the show_header of this Panel.


        :param show_header: The show_header of this Panel.
        :type show_header: bool
        """

        self._show_header = show_header

    @property
    def sort(self):
        """Gets the sort of this Panel.


        :return: The sort of this Panel.
        :rtype: Sort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Panel.


        :param sort: The sort of this Panel.
        :type sort: Sort
        """

        self._sort = sort

    @property
    def sort_order(self):
        """Gets the sort_order of this Panel.


        :return: The sort_order of this Panel.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Panel.


        :param sort_order: The sort_order of this Panel.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def space_length(self):
        """Gets the space_length of this Panel.


        :return: The space_length of this Panel.
        :rtype: int
        """
        return self._space_length

    @space_length.setter
    def space_length(self, space_length):
        """Sets the space_length of this Panel.


        :param space_length: The space_length of this Panel.
        :type space_length: int
        """

        self._space_length = space_length

    @property
    def span(self):
        """Gets the span of this Panel.


        :return: The span of this Panel.
        :rtype: float
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this Panel.


        :param span: The span of this Panel.
        :type span: float
        """

        self._span = span

    @property
    def sparkline(self):
        """Gets the sparkline of this Panel.


        :return: The sparkline of this Panel.
        :rtype: SparkLine
        """
        return self._sparkline

    @sparkline.setter
    def sparkline(self, sparkline):
        """Sets the sparkline of this Panel.


        :param sparkline: The sparkline of this Panel.
        :type sparkline: SparkLine
        """

        self._sparkline = sparkline

    @property
    def stack(self):
        """Gets the stack of this Panel.


        :return: The stack of this Panel.
        :rtype: bool
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this Panel.


        :param stack: The stack of this Panel.
        :type stack: bool
        """

        self._stack = stack

    @property
    def starred(self):
        """Gets the starred of this Panel.


        :return: The starred of this Panel.
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this Panel.


        :param starred: The starred of this Panel.
        :type starred: bool
        """

        self._starred = starred

    @property
    def state_filter(self):
        """Gets the state_filter of this Panel.


        :return: The state_filter of this Panel.
        :rtype: List[str]
        """
        return self._state_filter

    @state_filter.setter
    def state_filter(self, state_filter):
        """Sets the state_filter of this Panel.


        :param state_filter: The state_filter of this Panel.
        :type state_filter: List[str]
        """

        self._state_filter = state_filter

    @property
    def stepped_line(self):
        """Gets the stepped_line of this Panel.


        :return: The stepped_line of this Panel.
        :rtype: bool
        """
        return self._stepped_line

    @stepped_line.setter
    def stepped_line(self, stepped_line):
        """Sets the stepped_line of this Panel.


        :param stepped_line: The stepped_line of this Panel.
        :type stepped_line: bool
        """

        self._stepped_line = stepped_line

    @property
    def styles(self):
        """Gets the styles of this Panel.


        :return: The styles of this Panel.
        :rtype: List[ColumnStyle]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this Panel.


        :param styles: The styles of this Panel.
        :type styles: List[ColumnStyle]
        """

        self._styles = styles

    @property
    def tags(self):
        """Gets the tags of this Panel.


        :return: The tags of this Panel.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Panel.


        :param tags: The tags of this Panel.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def targets(self):
        """Gets the targets of this Panel.


        :return: The targets of this Panel.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Panel.


        :param targets: The targets of this Panel.
        :type targets: List[Target]
        """

        self._targets = targets

    @property
    def thresholds(self):
        """Gets the thresholds of this Panel.


        :return: The thresholds of this Panel.
        :rtype: List[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this Panel.


        :param thresholds: The thresholds of this Panel.
        :type thresholds: List[Threshold]
        """

        self._thresholds = thresholds

    @property
    def time_from(self):
        """Gets the time_from of this Panel.


        :return: The time_from of this Panel.
        :rtype: str
        """
        return self._time_from

    @time_from.setter
    def time_from(self, time_from):
        """Sets the time_from of this Panel.


        :param time_from: The time_from of this Panel.
        :type time_from: str
        """

        self._time_from = time_from

    @property
    def time_shift(self):
        """Gets the time_shift of this Panel.


        :return: The time_shift of this Panel.
        :rtype: str
        """
        return self._time_shift

    @time_shift.setter
    def time_shift(self, time_shift):
        """Sets the time_shift of this Panel.


        :param time_shift: The time_shift of this Panel.
        :type time_shift: str
        """

        self._time_shift = time_shift

    @property
    def title(self):
        """Gets the title of this Panel.


        :return: The title of this Panel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Panel.


        :param title: The title of this Panel.
        :type title: str
        """

        self._title = title

    @property
    def tooltip(self):
        """Gets the tooltip of this Panel.


        :return: The tooltip of this Panel.
        :rtype: Tooltip
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this Panel.


        :param tooltip: The tooltip of this Panel.
        :type tooltip: Tooltip
        """

        self._tooltip = tooltip

    @property
    def tooltip_decimals(self):
        """Gets the tooltip_decimals of this Panel.


        :return: The tooltip_decimals of this Panel.
        :rtype: int
        """
        return self._tooltip_decimals

    @tooltip_decimals.setter
    def tooltip_decimals(self, tooltip_decimals):
        """Sets the tooltip_decimals of this Panel.


        :param tooltip_decimals: The tooltip_decimals of this Panel.
        :type tooltip_decimals: int
        """

        self._tooltip_decimals = tooltip_decimals

    @property
    def transform(self):
        """Gets the transform of this Panel.


        :return: The transform of this Panel.
        :rtype: str
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this Panel.


        :param transform: The transform of this Panel.
        :type transform: str
        """

        self._transform = transform

    @property
    def transparent(self):
        """Gets the transparent of this Panel.


        :return: The transparent of this Panel.
        :rtype: bool
        """
        return self._transparent

    @transparent.setter
    def transparent(self, transparent):
        """Sets the transparent of this Panel.


        :param transparent: The transparent of this Panel.
        :type transparent: bool
        """

        self._transparent = transparent

    @property
    def type(self):
        """Gets the type of this Panel.


        :return: The type of this Panel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Panel.


        :param type: The type of this Panel.
        :type type: str
        """

        self._type = type

    @property
    def value_font_size(self):
        """Gets the value_font_size of this Panel.


        :return: The value_font_size of this Panel.
        :rtype: str
        """
        return self._value_font_size

    @value_font_size.setter
    def value_font_size(self, value_font_size):
        """Sets the value_font_size of this Panel.


        :param value_font_size: The value_font_size of this Panel.
        :type value_font_size: str
        """

        self._value_font_size = value_font_size

    @property
    def value_maps(self):
        """Gets the value_maps of this Panel.


        :return: The value_maps of this Panel.
        :rtype: List[ValueMap]
        """
        return self._value_maps

    @value_maps.setter
    def value_maps(self, value_maps):
        """Sets the value_maps of this Panel.


        :param value_maps: The value_maps of this Panel.
        :type value_maps: List[ValueMap]
        """

        self._value_maps = value_maps

    @property
    def value_name(self):
        """Gets the value_name of this Panel.


        :return: The value_name of this Panel.
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this Panel.


        :param value_name: The value_name of this Panel.
        :type value_name: str
        """

        self._value_name = value_name

    @property
    def x_axis(self):
        """Gets the x_axis of this Panel.


        :return: The x_axis of this Panel.
        :rtype: bool
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """Sets the x_axis of this Panel.


        :param x_axis: The x_axis of this Panel.
        :type x_axis: bool
        """

        self._x_axis = x_axis

    @property
    def x_axis(self):
        """Gets the x_axis of this Panel.


        :return: The x_axis of this Panel.
        :rtype: PanelXAxis
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """Sets the x_axis of this Panel.


        :param x_axis: The x_axis of this Panel.
        :type x_axis: PanelXAxis
        """

        self._x_axis = x_axis

    @property
    def x_bucket_number(self):
        """Gets the x_bucket_number of this Panel.


        :return: The x_bucket_number of this Panel.
        :rtype: float
        """
        return self._x_bucket_number

    @x_bucket_number.setter
    def x_bucket_number(self, x_bucket_number):
        """Sets the x_bucket_number of this Panel.


        :param x_bucket_number: The x_bucket_number of this Panel.
        :type x_bucket_number: float
        """

        self._x_bucket_number = x_bucket_number

    @property
    def x_bucket_size(self):
        """Gets the x_bucket_size of this Panel.


        :return: The x_bucket_size of this Panel.
        :rtype: str
        """
        return self._x_bucket_size

    @x_bucket_size.setter
    def x_bucket_size(self, x_bucket_size):
        """Sets the x_bucket_size of this Panel.


        :param x_bucket_size: The x_bucket_size of this Panel.
        :type x_bucket_size: str
        """

        self._x_bucket_size = x_bucket_size

    @property
    def xaxis(self):
        """Gets the xaxis of this Panel.


        :return: The xaxis of this Panel.
        :rtype: Axis
        """
        return self._xaxis

    @xaxis.setter
    def xaxis(self, xaxis):
        """Sets the xaxis of this Panel.


        :param xaxis: The xaxis of this Panel.
        :type xaxis: Axis
        """

        self._xaxis = xaxis

    @property
    def y_axis(self):
        """Gets the y_axis of this Panel.


        :return: The y_axis of this Panel.
        :rtype: bool
        """
        return self._y_axis

    @y_axis.setter
    def y_axis(self, y_axis):
        """Sets the y_axis of this Panel.


        :param y_axis: The y_axis of this Panel.
        :type y_axis: bool
        """

        self._y_axis = y_axis

    @property
    def y_axis(self):
        """Gets the y_axis of this Panel.


        :return: The y_axis of this Panel.
        :rtype: PanelYAxis
        """
        return self._y_axis

    @y_axis.setter
    def y_axis(self, y_axis):
        """Sets the y_axis of this Panel.


        :param y_axis: The y_axis of this Panel.
        :type y_axis: PanelYAxis
        """

        self._y_axis = y_axis

    @property
    def y_bucket_bound(self):
        """Gets the y_bucket_bound of this Panel.


        :return: The y_bucket_bound of this Panel.
        :rtype: str
        """
        return self._y_bucket_bound

    @y_bucket_bound.setter
    def y_bucket_bound(self, y_bucket_bound):
        """Sets the y_bucket_bound of this Panel.


        :param y_bucket_bound: The y_bucket_bound of this Panel.
        :type y_bucket_bound: str
        """

        self._y_bucket_bound = y_bucket_bound

    @property
    def y_bucket_number(self):
        """Gets the y_bucket_number of this Panel.


        :return: The y_bucket_number of this Panel.
        :rtype: float
        """
        return self._y_bucket_number

    @y_bucket_number.setter
    def y_bucket_number(self, y_bucket_number):
        """Sets the y_bucket_number of this Panel.


        :param y_bucket_number: The y_bucket_number of this Panel.
        :type y_bucket_number: float
        """

        self._y_bucket_number = y_bucket_number

    @property
    def y_bucket_size(self):
        """Gets the y_bucket_size of this Panel.


        :return: The y_bucket_size of this Panel.
        :rtype: float
        """
        return self._y_bucket_size

    @y_bucket_size.setter
    def y_bucket_size(self, y_bucket_size):
        """Sets the y_bucket_size of this Panel.


        :param y_bucket_size: The y_bucket_size of this Panel.
        :type y_bucket_size: float
        """

        self._y_bucket_size = y_bucket_size

    @property
    def y_formats(self):
        """Gets the y_formats of this Panel.


        :return: The y_formats of this Panel.
        :rtype: List[str]
        """
        return self._y_formats

    @y_formats.setter
    def y_formats(self, y_formats):
        """Sets the y_formats of this Panel.


        :param y_formats: The y_formats of this Panel.
        :type y_formats: List[str]
        """

        self._y_formats = y_formats

    @property
    def yaxes(self):
        """Gets the yaxes of this Panel.


        :return: The yaxes of this Panel.
        :rtype: List[Axis]
        """
        return self._yaxes

    @yaxes.setter
    def yaxes(self, yaxes):
        """Sets the yaxes of this Panel.


        :param yaxes: The yaxes of this Panel.
        :type yaxes: List[Axis]
        """

        self._yaxes = yaxes
