# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: int=None, created: int=None, id: str=None, labels: Dict[str, str]=None, parent_id: str=None, repo_digests: List[str]=None, repo_tags: List[str]=None, shared_size: int=None, size: int=None, virtual_size: int=None):
        """ImageSummary - a model defined in OpenAPI

        :param containers: The containers of this ImageSummary.
        :param created: The created of this ImageSummary.
        :param id: The id of this ImageSummary.
        :param labels: The labels of this ImageSummary.
        :param parent_id: The parent_id of this ImageSummary.
        :param repo_digests: The repo_digests of this ImageSummary.
        :param repo_tags: The repo_tags of this ImageSummary.
        :param shared_size: The shared_size of this ImageSummary.
        :param size: The size of this ImageSummary.
        :param virtual_size: The virtual_size of this ImageSummary.
        """
        self.openapi_types = {
            'containers': int,
            'created': int,
            'id': str,
            'labels': Dict[str, str],
            'parent_id': str,
            'repo_digests': List[str],
            'repo_tags': List[str],
            'shared_size': int,
            'size': int,
            'virtual_size': int
        }

        self.attribute_map = {
            'containers': 'Containers',
            'created': 'Created',
            'id': 'Id',
            'labels': 'Labels',
            'parent_id': 'ParentId',
            'repo_digests': 'RepoDigests',
            'repo_tags': 'RepoTags',
            'shared_size': 'SharedSize',
            'size': 'Size',
            'virtual_size': 'VirtualSize'
        }

        self._containers = containers
        self._created = created
        self._id = id
        self._labels = labels
        self._parent_id = parent_id
        self._repo_digests = repo_digests
        self._repo_tags = repo_tags
        self._shared_size = shared_size
        self._size = size
        self._virtual_size = virtual_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSummary of this ImageSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this ImageSummary.

        containers

        :return: The containers of this ImageSummary.
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ImageSummary.

        containers

        :param containers: The containers of this ImageSummary.
        :type containers: int
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")

        self._containers = containers

    @property
    def created(self):
        """Gets the created of this ImageSummary.

        created

        :return: The created of this ImageSummary.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageSummary.

        created

        :param created: The created of this ImageSummary.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this ImageSummary.

        Id

        :return: The id of this ImageSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageSummary.

        Id

        :param id: The id of this ImageSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ImageSummary.

        labels

        :return: The labels of this ImageSummary.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImageSummary.

        labels

        :param labels: The labels of this ImageSummary.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def parent_id(self):
        """Gets the parent_id of this ImageSummary.

        parent Id

        :return: The parent_id of this ImageSummary.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ImageSummary.

        parent Id

        :param parent_id: The parent_id of this ImageSummary.
        :type parent_id: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def repo_digests(self):
        """Gets the repo_digests of this ImageSummary.

        repo digests

        :return: The repo_digests of this ImageSummary.
        :rtype: List[str]
        """
        return self._repo_digests

    @repo_digests.setter
    def repo_digests(self, repo_digests):
        """Sets the repo_digests of this ImageSummary.

        repo digests

        :param repo_digests: The repo_digests of this ImageSummary.
        :type repo_digests: List[str]
        """
        if repo_digests is None:
            raise ValueError("Invalid value for `repo_digests`, must not be `None`")

        self._repo_digests = repo_digests

    @property
    def repo_tags(self):
        """Gets the repo_tags of this ImageSummary.

        repo tags

        :return: The repo_tags of this ImageSummary.
        :rtype: List[str]
        """
        return self._repo_tags

    @repo_tags.setter
    def repo_tags(self, repo_tags):
        """Sets the repo_tags of this ImageSummary.

        repo tags

        :param repo_tags: The repo_tags of this ImageSummary.
        :type repo_tags: List[str]
        """
        if repo_tags is None:
            raise ValueError("Invalid value for `repo_tags`, must not be `None`")

        self._repo_tags = repo_tags

    @property
    def shared_size(self):
        """Gets the shared_size of this ImageSummary.

        shared size

        :return: The shared_size of this ImageSummary.
        :rtype: int
        """
        return self._shared_size

    @shared_size.setter
    def shared_size(self, shared_size):
        """Sets the shared_size of this ImageSummary.

        shared size

        :param shared_size: The shared_size of this ImageSummary.
        :type shared_size: int
        """
        if shared_size is None:
            raise ValueError("Invalid value for `shared_size`, must not be `None`")

        self._shared_size = shared_size

    @property
    def size(self):
        """Gets the size of this ImageSummary.

        size

        :return: The size of this ImageSummary.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageSummary.

        size

        :param size: The size of this ImageSummary.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def virtual_size(self):
        """Gets the virtual_size of this ImageSummary.

        virtual size

        :return: The virtual_size of this ImageSummary.
        :rtype: int
        """
        return self._virtual_size

    @virtual_size.setter
    def virtual_size(self, virtual_size):
        """Sets the virtual_size of this ImageSummary.

        virtual size

        :param virtual_size: The virtual_size of this ImageSummary.
        :type virtual_size: int
        """
        if virtual_size is None:
            raise ValueError("Invalid value for `virtual_size`, must not be `None`")

        self._virtual_size = virtual_size
