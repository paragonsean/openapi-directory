# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_condition import AlertCondition
from openapi_server.models.alert_notification import AlertNotification
from openapi_server import util


class Alert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_rule_tags: Dict[str, str]=None, conditions: List[AlertCondition]=None, execution_error_state: str=None, _for: str=None, frequency: str=None, handler: int=None, message: str=None, name: str=None, no_data_state: str=None, notifications: List[AlertNotification]=None):
        """Alert - a model defined in OpenAPI

        :param alert_rule_tags: The alert_rule_tags of this Alert.
        :param conditions: The conditions of this Alert.
        :param execution_error_state: The execution_error_state of this Alert.
        :param _for: The _for of this Alert.
        :param frequency: The frequency of this Alert.
        :param handler: The handler of this Alert.
        :param message: The message of this Alert.
        :param name: The name of this Alert.
        :param no_data_state: The no_data_state of this Alert.
        :param notifications: The notifications of this Alert.
        """
        self.openapi_types = {
            'alert_rule_tags': Dict[str, str],
            'conditions': List[AlertCondition],
            'execution_error_state': str,
            '_for': str,
            'frequency': str,
            'handler': int,
            'message': str,
            'name': str,
            'no_data_state': str,
            'notifications': List[AlertNotification]
        }

        self.attribute_map = {
            'alert_rule_tags': 'alertRuleTags',
            'conditions': 'conditions',
            'execution_error_state': 'executionErrorState',
            '_for': 'for',
            'frequency': 'frequency',
            'handler': 'handler',
            'message': 'message',
            'name': 'name',
            'no_data_state': 'noDataState',
            'notifications': 'notifications'
        }

        self._alert_rule_tags = alert_rule_tags
        self._conditions = conditions
        self._execution_error_state = execution_error_state
        self.__for = _for
        self._frequency = frequency
        self._handler = handler
        self._message = message
        self._name = name
        self._no_data_state = no_data_state
        self._notifications = notifications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Alert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Alert of this Alert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_rule_tags(self):
        """Gets the alert_rule_tags of this Alert.


        :return: The alert_rule_tags of this Alert.
        :rtype: Dict[str, str]
        """
        return self._alert_rule_tags

    @alert_rule_tags.setter
    def alert_rule_tags(self, alert_rule_tags):
        """Sets the alert_rule_tags of this Alert.


        :param alert_rule_tags: The alert_rule_tags of this Alert.
        :type alert_rule_tags: Dict[str, str]
        """

        self._alert_rule_tags = alert_rule_tags

    @property
    def conditions(self):
        """Gets the conditions of this Alert.


        :return: The conditions of this Alert.
        :rtype: List[AlertCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Alert.


        :param conditions: The conditions of this Alert.
        :type conditions: List[AlertCondition]
        """

        self._conditions = conditions

    @property
    def execution_error_state(self):
        """Gets the execution_error_state of this Alert.


        :return: The execution_error_state of this Alert.
        :rtype: str
        """
        return self._execution_error_state

    @execution_error_state.setter
    def execution_error_state(self, execution_error_state):
        """Sets the execution_error_state of this Alert.


        :param execution_error_state: The execution_error_state of this Alert.
        :type execution_error_state: str
        """

        self._execution_error_state = execution_error_state

    @property
    def _for(self):
        """Gets the _for of this Alert.


        :return: The _for of this Alert.
        :rtype: str
        """
        return self.__for

    @_for.setter
    def _for(self, _for):
        """Sets the _for of this Alert.


        :param _for: The _for of this Alert.
        :type _for: str
        """

        self.__for = _for

    @property
    def frequency(self):
        """Gets the frequency of this Alert.


        :return: The frequency of this Alert.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Alert.


        :param frequency: The frequency of this Alert.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def handler(self):
        """Gets the handler of this Alert.


        :return: The handler of this Alert.
        :rtype: int
        """
        return self._handler

    @handler.setter
    def handler(self, handler):
        """Sets the handler of this Alert.


        :param handler: The handler of this Alert.
        :type handler: int
        """

        self._handler = handler

    @property
    def message(self):
        """Gets the message of this Alert.


        :return: The message of this Alert.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Alert.


        :param message: The message of this Alert.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Alert.


        :return: The name of this Alert.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Alert.


        :param name: The name of this Alert.
        :type name: str
        """

        self._name = name

    @property
    def no_data_state(self):
        """Gets the no_data_state of this Alert.


        :return: The no_data_state of this Alert.
        :rtype: str
        """
        return self._no_data_state

    @no_data_state.setter
    def no_data_state(self, no_data_state):
        """Sets the no_data_state of this Alert.


        :param no_data_state: The no_data_state of this Alert.
        :type no_data_state: str
        """

        self._no_data_state = no_data_state

    @property
    def notifications(self):
        """Gets the notifications of this Alert.


        :return: The notifications of this Alert.
        :rtype: List[AlertNotification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Alert.


        :param notifications: The notifications of this Alert.
        :type notifications: List[AlertNotification]
        """

        self._notifications = notifications
