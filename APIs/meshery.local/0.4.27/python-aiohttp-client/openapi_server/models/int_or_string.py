# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntOrString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, int_val: int=None, str_val: str=None, type: int=None):
        """IntOrString - a model defined in OpenAPI

        :param int_val: The int_val of this IntOrString.
        :param str_val: The str_val of this IntOrString.
        :param type: The type of this IntOrString.
        """
        self.openapi_types = {
            'int_val': int,
            'str_val': str,
            'type': int
        }

        self.attribute_map = {
            'int_val': 'IntVal',
            'str_val': 'StrVal',
            'type': 'Type'
        }

        self._int_val = int_val
        self._str_val = str_val
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntOrString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntOrString of this IntOrString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def int_val(self):
        """Gets the int_val of this IntOrString.


        :return: The int_val of this IntOrString.
        :rtype: int
        """
        return self._int_val

    @int_val.setter
    def int_val(self, int_val):
        """Sets the int_val of this IntOrString.


        :param int_val: The int_val of this IntOrString.
        :type int_val: int
        """

        self._int_val = int_val

    @property
    def str_val(self):
        """Gets the str_val of this IntOrString.


        :return: The str_val of this IntOrString.
        :rtype: str
        """
        return self._str_val

    @str_val.setter
    def str_val(self, str_val):
        """Sets the str_val of this IntOrString.


        :param str_val: The str_val of this IntOrString.
        :type str_val: str
        """

        self._str_val = str_val

    @property
    def type(self):
        """Gets the type of this IntOrString.


        :return: The type of this IntOrString.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntOrString.


        :param type: The type of this IntOrString.
        :type type: int
        """

        self._type = type
