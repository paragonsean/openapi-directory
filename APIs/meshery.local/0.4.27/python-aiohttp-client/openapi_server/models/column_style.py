# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_map import ValueMap
from openapi_server import util


class ColumnStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, color_mode: str=None, colors: List[str]=None, date_format: str=None, decimals: int=None, link: bool=None, link_target_blank: bool=None, link_tooltip: str=None, link_url: str=None, mapping_type: int=None, pattern: str=None, thresholds: List[str]=None, type: str=None, unit: str=None, value_maps: List[ValueMap]=None):
        """ColumnStyle - a model defined in OpenAPI

        :param alias: The alias of this ColumnStyle.
        :param color_mode: The color_mode of this ColumnStyle.
        :param colors: The colors of this ColumnStyle.
        :param date_format: The date_format of this ColumnStyle.
        :param decimals: The decimals of this ColumnStyle.
        :param link: The link of this ColumnStyle.
        :param link_target_blank: The link_target_blank of this ColumnStyle.
        :param link_tooltip: The link_tooltip of this ColumnStyle.
        :param link_url: The link_url of this ColumnStyle.
        :param mapping_type: The mapping_type of this ColumnStyle.
        :param pattern: The pattern of this ColumnStyle.
        :param thresholds: The thresholds of this ColumnStyle.
        :param type: The type of this ColumnStyle.
        :param unit: The unit of this ColumnStyle.
        :param value_maps: The value_maps of this ColumnStyle.
        """
        self.openapi_types = {
            'alias': str,
            'color_mode': str,
            'colors': List[str],
            'date_format': str,
            'decimals': int,
            'link': bool,
            'link_target_blank': bool,
            'link_tooltip': str,
            'link_url': str,
            'mapping_type': int,
            'pattern': str,
            'thresholds': List[str],
            'type': str,
            'unit': str,
            'value_maps': List[ValueMap]
        }

        self.attribute_map = {
            'alias': 'alias',
            'color_mode': 'colorMode',
            'colors': 'colors',
            'date_format': 'dateFormat',
            'decimals': 'decimals',
            'link': 'link',
            'link_target_blank': 'linkTargetBlank',
            'link_tooltip': 'linkTooltip',
            'link_url': 'linkUrl',
            'mapping_type': 'mappingType',
            'pattern': 'pattern',
            'thresholds': 'thresholds',
            'type': 'type',
            'unit': 'unit',
            'value_maps': 'valueMaps'
        }

        self._alias = alias
        self._color_mode = color_mode
        self._colors = colors
        self._date_format = date_format
        self._decimals = decimals
        self._link = link
        self._link_target_blank = link_target_blank
        self._link_tooltip = link_tooltip
        self._link_url = link_url
        self._mapping_type = mapping_type
        self._pattern = pattern
        self._thresholds = thresholds
        self._type = type
        self._unit = unit
        self._value_maps = value_maps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnStyle of this ColumnStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this ColumnStyle.


        :return: The alias of this ColumnStyle.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ColumnStyle.


        :param alias: The alias of this ColumnStyle.
        :type alias: str
        """

        self._alias = alias

    @property
    def color_mode(self):
        """Gets the color_mode of this ColumnStyle.


        :return: The color_mode of this ColumnStyle.
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this ColumnStyle.


        :param color_mode: The color_mode of this ColumnStyle.
        :type color_mode: str
        """

        self._color_mode = color_mode

    @property
    def colors(self):
        """Gets the colors of this ColumnStyle.


        :return: The colors of this ColumnStyle.
        :rtype: List[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ColumnStyle.


        :param colors: The colors of this ColumnStyle.
        :type colors: List[str]
        """

        self._colors = colors

    @property
    def date_format(self):
        """Gets the date_format of this ColumnStyle.


        :return: The date_format of this ColumnStyle.
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this ColumnStyle.


        :param date_format: The date_format of this ColumnStyle.
        :type date_format: str
        """

        self._date_format = date_format

    @property
    def decimals(self):
        """Gets the decimals of this ColumnStyle.


        :return: The decimals of this ColumnStyle.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this ColumnStyle.


        :param decimals: The decimals of this ColumnStyle.
        :type decimals: int
        """

        self._decimals = decimals

    @property
    def link(self):
        """Gets the link of this ColumnStyle.


        :return: The link of this ColumnStyle.
        :rtype: bool
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ColumnStyle.


        :param link: The link of this ColumnStyle.
        :type link: bool
        """

        self._link = link

    @property
    def link_target_blank(self):
        """Gets the link_target_blank of this ColumnStyle.


        :return: The link_target_blank of this ColumnStyle.
        :rtype: bool
        """
        return self._link_target_blank

    @link_target_blank.setter
    def link_target_blank(self, link_target_blank):
        """Sets the link_target_blank of this ColumnStyle.


        :param link_target_blank: The link_target_blank of this ColumnStyle.
        :type link_target_blank: bool
        """

        self._link_target_blank = link_target_blank

    @property
    def link_tooltip(self):
        """Gets the link_tooltip of this ColumnStyle.


        :return: The link_tooltip of this ColumnStyle.
        :rtype: str
        """
        return self._link_tooltip

    @link_tooltip.setter
    def link_tooltip(self, link_tooltip):
        """Sets the link_tooltip of this ColumnStyle.


        :param link_tooltip: The link_tooltip of this ColumnStyle.
        :type link_tooltip: str
        """

        self._link_tooltip = link_tooltip

    @property
    def link_url(self):
        """Gets the link_url of this ColumnStyle.


        :return: The link_url of this ColumnStyle.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this ColumnStyle.


        :param link_url: The link_url of this ColumnStyle.
        :type link_url: str
        """

        self._link_url = link_url

    @property
    def mapping_type(self):
        """Gets the mapping_type of this ColumnStyle.


        :return: The mapping_type of this ColumnStyle.
        :rtype: int
        """
        return self._mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):
        """Sets the mapping_type of this ColumnStyle.


        :param mapping_type: The mapping_type of this ColumnStyle.
        :type mapping_type: int
        """

        self._mapping_type = mapping_type

    @property
    def pattern(self):
        """Gets the pattern of this ColumnStyle.


        :return: The pattern of this ColumnStyle.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ColumnStyle.


        :param pattern: The pattern of this ColumnStyle.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def thresholds(self):
        """Gets the thresholds of this ColumnStyle.


        :return: The thresholds of this ColumnStyle.
        :rtype: List[str]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this ColumnStyle.


        :param thresholds: The thresholds of this ColumnStyle.
        :type thresholds: List[str]
        """

        self._thresholds = thresholds

    @property
    def type(self):
        """Gets the type of this ColumnStyle.


        :return: The type of this ColumnStyle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ColumnStyle.


        :param type: The type of this ColumnStyle.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this ColumnStyle.


        :return: The unit of this ColumnStyle.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ColumnStyle.


        :param unit: The unit of this ColumnStyle.
        :type unit: str
        """

        self._unit = unit

    @property
    def value_maps(self):
        """Gets the value_maps of this ColumnStyle.


        :return: The value_maps of this ColumnStyle.
        :rtype: List[ValueMap]
        """
        return self._value_maps

    @value_maps.setter
    def value_maps(self, value_maps):
        """Sets the value_maps of this ColumnStyle.


        :param value_maps: The value_maps of this ColumnStyle.
        :type value_maps: List[ValueMap]
        """

        self._value_maps = value_maps
