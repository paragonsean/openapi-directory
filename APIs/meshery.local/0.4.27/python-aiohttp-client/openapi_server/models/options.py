# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.options_reduce_options import OptionsReduceOptions
from openapi_server import util


class Options(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_mode: str=None, content: str=None, display_mode: str=None, graph_mode: str=None, justify_mode: str=None, mode: str=None, orientation: str=None, reduce_options: OptionsReduceOptions=None, text_mode: str=None):
        """Options - a model defined in OpenAPI

        :param color_mode: The color_mode of this Options.
        :param content: The content of this Options.
        :param display_mode: The display_mode of this Options.
        :param graph_mode: The graph_mode of this Options.
        :param justify_mode: The justify_mode of this Options.
        :param mode: The mode of this Options.
        :param orientation: The orientation of this Options.
        :param reduce_options: The reduce_options of this Options.
        :param text_mode: The text_mode of this Options.
        """
        self.openapi_types = {
            'color_mode': str,
            'content': str,
            'display_mode': str,
            'graph_mode': str,
            'justify_mode': str,
            'mode': str,
            'orientation': str,
            'reduce_options': OptionsReduceOptions,
            'text_mode': str
        }

        self.attribute_map = {
            'color_mode': 'colorMode',
            'content': 'content',
            'display_mode': 'displayMode',
            'graph_mode': 'graphMode',
            'justify_mode': 'justifyMode',
            'mode': 'mode',
            'orientation': 'orientation',
            'reduce_options': 'reduceOptions',
            'text_mode': 'textMode'
        }

        self._color_mode = color_mode
        self._content = content
        self._display_mode = display_mode
        self._graph_mode = graph_mode
        self._justify_mode = justify_mode
        self._mode = mode
        self._orientation = orientation
        self._reduce_options = reduce_options
        self._text_mode = text_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Options':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Options of this Options.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_mode(self):
        """Gets the color_mode of this Options.


        :return: The color_mode of this Options.
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this Options.


        :param color_mode: The color_mode of this Options.
        :type color_mode: str
        """

        self._color_mode = color_mode

    @property
    def content(self):
        """Gets the content of this Options.


        :return: The content of this Options.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Options.


        :param content: The content of this Options.
        :type content: str
        """

        self._content = content

    @property
    def display_mode(self):
        """Gets the display_mode of this Options.


        :return: The display_mode of this Options.
        :rtype: str
        """
        return self._display_mode

    @display_mode.setter
    def display_mode(self, display_mode):
        """Sets the display_mode of this Options.


        :param display_mode: The display_mode of this Options.
        :type display_mode: str
        """

        self._display_mode = display_mode

    @property
    def graph_mode(self):
        """Gets the graph_mode of this Options.


        :return: The graph_mode of this Options.
        :rtype: str
        """
        return self._graph_mode

    @graph_mode.setter
    def graph_mode(self, graph_mode):
        """Sets the graph_mode of this Options.


        :param graph_mode: The graph_mode of this Options.
        :type graph_mode: str
        """

        self._graph_mode = graph_mode

    @property
    def justify_mode(self):
        """Gets the justify_mode of this Options.


        :return: The justify_mode of this Options.
        :rtype: str
        """
        return self._justify_mode

    @justify_mode.setter
    def justify_mode(self, justify_mode):
        """Sets the justify_mode of this Options.


        :param justify_mode: The justify_mode of this Options.
        :type justify_mode: str
        """

        self._justify_mode = justify_mode

    @property
    def mode(self):
        """Gets the mode of this Options.


        :return: The mode of this Options.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Options.


        :param mode: The mode of this Options.
        :type mode: str
        """

        self._mode = mode

    @property
    def orientation(self):
        """Gets the orientation of this Options.


        :return: The orientation of this Options.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this Options.


        :param orientation: The orientation of this Options.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def reduce_options(self):
        """Gets the reduce_options of this Options.


        :return: The reduce_options of this Options.
        :rtype: OptionsReduceOptions
        """
        return self._reduce_options

    @reduce_options.setter
    def reduce_options(self, reduce_options):
        """Sets the reduce_options of this Options.


        :param reduce_options: The reduce_options of this Options.
        :type reduce_options: OptionsReduceOptions
        """

        self._reduce_options = reduce_options

    @property
    def text_mode(self):
        """Gets the text_mode of this Options.


        :return: The text_mode of this Options.
        :rtype: str
        """
        return self._text_mode

    @text_mode.setter
    def text_mode(self, text_mode):
        """Sets the text_mode of this Options.


        :param text_mode: The text_mode of this Options.
        :type text_mode: str
        """

        self._text_mode = text_mode
