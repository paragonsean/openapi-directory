# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_port import ServicePort
from openapi_server.models.session_affinity_config import SessionAffinityConfig
from openapi_server import util


class ServiceSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_ip: str=None, external_ips: List[str]=None, external_name: str=None, external_traffic_policy: str=None, health_check_node_port: int=None, ip_family: str=None, load_balancer_ip: str=None, load_balancer_source_ranges: List[str]=None, ports: List[ServicePort]=None, publish_not_ready_addresses: bool=None, selector: Dict[str, str]=None, session_affinity: str=None, session_affinity_config: SessionAffinityConfig=None, topology_keys: List[str]=None, type: str=None):
        """ServiceSpec - a model defined in OpenAPI

        :param cluster_ip: The cluster_ip of this ServiceSpec.
        :param external_ips: The external_ips of this ServiceSpec.
        :param external_name: The external_name of this ServiceSpec.
        :param external_traffic_policy: The external_traffic_policy of this ServiceSpec.
        :param health_check_node_port: The health_check_node_port of this ServiceSpec.
        :param ip_family: The ip_family of this ServiceSpec.
        :param load_balancer_ip: The load_balancer_ip of this ServiceSpec.
        :param load_balancer_source_ranges: The load_balancer_source_ranges of this ServiceSpec.
        :param ports: The ports of this ServiceSpec.
        :param publish_not_ready_addresses: The publish_not_ready_addresses of this ServiceSpec.
        :param selector: The selector of this ServiceSpec.
        :param session_affinity: The session_affinity of this ServiceSpec.
        :param session_affinity_config: The session_affinity_config of this ServiceSpec.
        :param topology_keys: The topology_keys of this ServiceSpec.
        :param type: The type of this ServiceSpec.
        """
        self.openapi_types = {
            'cluster_ip': str,
            'external_ips': List[str],
            'external_name': str,
            'external_traffic_policy': str,
            'health_check_node_port': int,
            'ip_family': str,
            'load_balancer_ip': str,
            'load_balancer_source_ranges': List[str],
            'ports': List[ServicePort],
            'publish_not_ready_addresses': bool,
            'selector': Dict[str, str],
            'session_affinity': str,
            'session_affinity_config': SessionAffinityConfig,
            'topology_keys': List[str],
            'type': str
        }

        self.attribute_map = {
            'cluster_ip': 'clusterIP',
            'external_ips': 'externalIPs',
            'external_name': 'externalName',
            'external_traffic_policy': 'externalTrafficPolicy',
            'health_check_node_port': 'healthCheckNodePort',
            'ip_family': 'ipFamily',
            'load_balancer_ip': 'loadBalancerIP',
            'load_balancer_source_ranges': 'loadBalancerSourceRanges',
            'ports': 'ports',
            'publish_not_ready_addresses': 'publishNotReadyAddresses',
            'selector': 'selector',
            'session_affinity': 'sessionAffinity',
            'session_affinity_config': 'sessionAffinityConfig',
            'topology_keys': 'topologyKeys',
            'type': 'type'
        }

        self._cluster_ip = cluster_ip
        self._external_ips = external_ips
        self._external_name = external_name
        self._external_traffic_policy = external_traffic_policy
        self._health_check_node_port = health_check_node_port
        self._ip_family = ip_family
        self._load_balancer_ip = load_balancer_ip
        self._load_balancer_source_ranges = load_balancer_source_ranges
        self._ports = ports
        self._publish_not_ready_addresses = publish_not_ready_addresses
        self._selector = selector
        self._session_affinity = session_affinity
        self._session_affinity_config = session_affinity_config
        self._topology_keys = topology_keys
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceSpec of this ServiceSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this ServiceSpec.

        clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies +optional

        :return: The cluster_ip of this ServiceSpec.
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this ServiceSpec.

        clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies +optional

        :param cluster_ip: The cluster_ip of this ServiceSpec.
        :type cluster_ip: str
        """

        self._cluster_ip = cluster_ip

    @property
    def external_ips(self):
        """Gets the external_ips of this ServiceSpec.

        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system. +optional

        :return: The external_ips of this ServiceSpec.
        :rtype: List[str]
        """
        return self._external_ips

    @external_ips.setter
    def external_ips(self, external_ips):
        """Sets the external_ips of this ServiceSpec.

        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system. +optional

        :param external_ips: The external_ips of this ServiceSpec.
        :type external_ips: List[str]
        """

        self._external_ips = external_ips

    @property
    def external_name(self):
        """Gets the external_name of this ServiceSpec.

        externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName. +optional

        :return: The external_name of this ServiceSpec.
        :rtype: str
        """
        return self._external_name

    @external_name.setter
    def external_name(self, external_name):
        """Sets the external_name of this ServiceSpec.

        externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName. +optional

        :param external_name: The external_name of this ServiceSpec.
        :type external_name: str
        """

        self._external_name = external_name

    @property
    def external_traffic_policy(self):
        """Gets the external_traffic_policy of this ServiceSpec.

        Service External Traffic Policy Type string

        :return: The external_traffic_policy of this ServiceSpec.
        :rtype: str
        """
        return self._external_traffic_policy

    @external_traffic_policy.setter
    def external_traffic_policy(self, external_traffic_policy):
        """Sets the external_traffic_policy of this ServiceSpec.

        Service External Traffic Policy Type string

        :param external_traffic_policy: The external_traffic_policy of this ServiceSpec.
        :type external_traffic_policy: str
        """

        self._external_traffic_policy = external_traffic_policy

    @property
    def health_check_node_port(self):
        """Gets the health_check_node_port of this ServiceSpec.

        healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local. +optional

        :return: The health_check_node_port of this ServiceSpec.
        :rtype: int
        """
        return self._health_check_node_port

    @health_check_node_port.setter
    def health_check_node_port(self, health_check_node_port):
        """Sets the health_check_node_port of this ServiceSpec.

        healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local. +optional

        :param health_check_node_port: The health_check_node_port of this ServiceSpec.
        :type health_check_node_port: int
        """

        self._health_check_node_port = health_check_node_port

    @property
    def ip_family(self):
        """Gets the ip_family of this ServiceSpec.

        IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (i.e. service.Spec.IPFamily)

        :return: The ip_family of this ServiceSpec.
        :rtype: str
        """
        return self._ip_family

    @ip_family.setter
    def ip_family(self, ip_family):
        """Sets the ip_family of this ServiceSpec.

        IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (i.e. service.Spec.IPFamily)

        :param ip_family: The ip_family of this ServiceSpec.
        :type ip_family: str
        """

        self._ip_family = ip_family

    @property
    def load_balancer_ip(self):
        """Gets the load_balancer_ip of this ServiceSpec.

        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. +optional

        :return: The load_balancer_ip of this ServiceSpec.
        :rtype: str
        """
        return self._load_balancer_ip

    @load_balancer_ip.setter
    def load_balancer_ip(self, load_balancer_ip):
        """Sets the load_balancer_ip of this ServiceSpec.

        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. +optional

        :param load_balancer_ip: The load_balancer_ip of this ServiceSpec.
        :type load_balancer_ip: str
        """

        self._load_balancer_ip = load_balancer_ip

    @property
    def load_balancer_source_ranges(self):
        """Gets the load_balancer_source_ranges of this ServiceSpec.

        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/ +optional

        :return: The load_balancer_source_ranges of this ServiceSpec.
        :rtype: List[str]
        """
        return self._load_balancer_source_ranges

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, load_balancer_source_ranges):
        """Sets the load_balancer_source_ranges of this ServiceSpec.

        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/ +optional

        :param load_balancer_source_ranges: The load_balancer_source_ranges of this ServiceSpec.
        :type load_balancer_source_ranges: List[str]
        """

        self._load_balancer_source_ranges = load_balancer_source_ranges

    @property
    def ports(self):
        """Gets the ports of this ServiceSpec.

        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies +patchMergeKey=port +patchStrategy=merge +listType=map +listMapKey=port +listMapKey=protocol

        :return: The ports of this ServiceSpec.
        :rtype: List[ServicePort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ServiceSpec.

        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies +patchMergeKey=port +patchStrategy=merge +listType=map +listMapKey=port +listMapKey=protocol

        :param ports: The ports of this ServiceSpec.
        :type ports: List[ServicePort]
        """

        self._ports = ports

    @property
    def publish_not_ready_addresses(self):
        """Gets the publish_not_ready_addresses of this ServiceSpec.

        publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. +optional

        :return: The publish_not_ready_addresses of this ServiceSpec.
        :rtype: bool
        """
        return self._publish_not_ready_addresses

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, publish_not_ready_addresses):
        """Sets the publish_not_ready_addresses of this ServiceSpec.

        publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. +optional

        :param publish_not_ready_addresses: The publish_not_ready_addresses of this ServiceSpec.
        :type publish_not_ready_addresses: bool
        """

        self._publish_not_ready_addresses = publish_not_ready_addresses

    @property
    def selector(self):
        """Gets the selector of this ServiceSpec.

        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/ +optional

        :return: The selector of this ServiceSpec.
        :rtype: Dict[str, str]
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ServiceSpec.

        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/ +optional

        :param selector: The selector of this ServiceSpec.
        :type selector: Dict[str, str]
        """

        self._selector = selector

    @property
    def session_affinity(self):
        """Gets the session_affinity of this ServiceSpec.

        Session Affinity Type string

        :return: The session_affinity of this ServiceSpec.
        :rtype: str
        """
        return self._session_affinity

    @session_affinity.setter
    def session_affinity(self, session_affinity):
        """Sets the session_affinity of this ServiceSpec.

        Session Affinity Type string

        :param session_affinity: The session_affinity of this ServiceSpec.
        :type session_affinity: str
        """

        self._session_affinity = session_affinity

    @property
    def session_affinity_config(self):
        """Gets the session_affinity_config of this ServiceSpec.


        :return: The session_affinity_config of this ServiceSpec.
        :rtype: SessionAffinityConfig
        """
        return self._session_affinity_config

    @session_affinity_config.setter
    def session_affinity_config(self, session_affinity_config):
        """Sets the session_affinity_config of this ServiceSpec.


        :param session_affinity_config: The session_affinity_config of this ServiceSpec.
        :type session_affinity_config: SessionAffinityConfig
        """

        self._session_affinity_config = session_affinity_config

    @property
    def topology_keys(self):
        """Gets the topology_keys of this ServiceSpec.

        topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. +optional

        :return: The topology_keys of this ServiceSpec.
        :rtype: List[str]
        """
        return self._topology_keys

    @topology_keys.setter
    def topology_keys(self, topology_keys):
        """Sets the topology_keys of this ServiceSpec.

        topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. +optional

        :param topology_keys: The topology_keys of this ServiceSpec.
        :type topology_keys: List[str]
        """

        self._topology_keys = topology_keys

    @property
    def type(self):
        """Gets the type of this ServiceSpec.

        Service Type string describes ingress methods for a service

        :return: The type of this ServiceSpec.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceSpec.

        Service Type string describes ingress methods for a service

        :param type: The type of this ServiceSpec.
        :type type: str
        """

        self._type = type
