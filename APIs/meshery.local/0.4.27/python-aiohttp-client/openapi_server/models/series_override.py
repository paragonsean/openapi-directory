# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bool_string import BoolString
from openapi_server import util


class SeriesOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, bars: bool=None, color: str=None, dashes: bool=None, fill: int=None, fill_below_to: str=None, legend: bool=None, lines: bool=None, linewidth: int=None, null_point_mode: str=None, stack: BoolString=None, transform: str=None, yaxis: int=None, zindex: int=None):
        """SeriesOverride - a model defined in OpenAPI

        :param alias: The alias of this SeriesOverride.
        :param bars: The bars of this SeriesOverride.
        :param color: The color of this SeriesOverride.
        :param dashes: The dashes of this SeriesOverride.
        :param fill: The fill of this SeriesOverride.
        :param fill_below_to: The fill_below_to of this SeriesOverride.
        :param legend: The legend of this SeriesOverride.
        :param lines: The lines of this SeriesOverride.
        :param linewidth: The linewidth of this SeriesOverride.
        :param null_point_mode: The null_point_mode of this SeriesOverride.
        :param stack: The stack of this SeriesOverride.
        :param transform: The transform of this SeriesOverride.
        :param yaxis: The yaxis of this SeriesOverride.
        :param zindex: The zindex of this SeriesOverride.
        """
        self.openapi_types = {
            'alias': str,
            'bars': bool,
            'color': str,
            'dashes': bool,
            'fill': int,
            'fill_below_to': str,
            'legend': bool,
            'lines': bool,
            'linewidth': int,
            'null_point_mode': str,
            'stack': BoolString,
            'transform': str,
            'yaxis': int,
            'zindex': int
        }

        self.attribute_map = {
            'alias': 'alias',
            'bars': 'bars',
            'color': 'color',
            'dashes': 'dashes',
            'fill': 'fill',
            'fill_below_to': 'fillBelowTo',
            'legend': 'legend',
            'lines': 'lines',
            'linewidth': 'linewidth',
            'null_point_mode': 'nullPointMode',
            'stack': 'stack',
            'transform': 'transform',
            'yaxis': 'yaxis',
            'zindex': 'zindex'
        }

        self._alias = alias
        self._bars = bars
        self._color = color
        self._dashes = dashes
        self._fill = fill
        self._fill_below_to = fill_below_to
        self._legend = legend
        self._lines = lines
        self._linewidth = linewidth
        self._null_point_mode = null_point_mode
        self._stack = stack
        self._transform = transform
        self._yaxis = yaxis
        self._zindex = zindex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeriesOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeriesOverride of this SeriesOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this SeriesOverride.


        :return: The alias of this SeriesOverride.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this SeriesOverride.


        :param alias: The alias of this SeriesOverride.
        :type alias: str
        """

        self._alias = alias

    @property
    def bars(self):
        """Gets the bars of this SeriesOverride.


        :return: The bars of this SeriesOverride.
        :rtype: bool
        """
        return self._bars

    @bars.setter
    def bars(self, bars):
        """Sets the bars of this SeriesOverride.


        :param bars: The bars of this SeriesOverride.
        :type bars: bool
        """

        self._bars = bars

    @property
    def color(self):
        """Gets the color of this SeriesOverride.


        :return: The color of this SeriesOverride.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SeriesOverride.


        :param color: The color of this SeriesOverride.
        :type color: str
        """

        self._color = color

    @property
    def dashes(self):
        """Gets the dashes of this SeriesOverride.


        :return: The dashes of this SeriesOverride.
        :rtype: bool
        """
        return self._dashes

    @dashes.setter
    def dashes(self, dashes):
        """Sets the dashes of this SeriesOverride.


        :param dashes: The dashes of this SeriesOverride.
        :type dashes: bool
        """

        self._dashes = dashes

    @property
    def fill(self):
        """Gets the fill of this SeriesOverride.


        :return: The fill of this SeriesOverride.
        :rtype: int
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this SeriesOverride.


        :param fill: The fill of this SeriesOverride.
        :type fill: int
        """

        self._fill = fill

    @property
    def fill_below_to(self):
        """Gets the fill_below_to of this SeriesOverride.


        :return: The fill_below_to of this SeriesOverride.
        :rtype: str
        """
        return self._fill_below_to

    @fill_below_to.setter
    def fill_below_to(self, fill_below_to):
        """Sets the fill_below_to of this SeriesOverride.


        :param fill_below_to: The fill_below_to of this SeriesOverride.
        :type fill_below_to: str
        """

        self._fill_below_to = fill_below_to

    @property
    def legend(self):
        """Gets the legend of this SeriesOverride.


        :return: The legend of this SeriesOverride.
        :rtype: bool
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this SeriesOverride.


        :param legend: The legend of this SeriesOverride.
        :type legend: bool
        """

        self._legend = legend

    @property
    def lines(self):
        """Gets the lines of this SeriesOverride.


        :return: The lines of this SeriesOverride.
        :rtype: bool
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this SeriesOverride.


        :param lines: The lines of this SeriesOverride.
        :type lines: bool
        """

        self._lines = lines

    @property
    def linewidth(self):
        """Gets the linewidth of this SeriesOverride.


        :return: The linewidth of this SeriesOverride.
        :rtype: int
        """
        return self._linewidth

    @linewidth.setter
    def linewidth(self, linewidth):
        """Sets the linewidth of this SeriesOverride.


        :param linewidth: The linewidth of this SeriesOverride.
        :type linewidth: int
        """

        self._linewidth = linewidth

    @property
    def null_point_mode(self):
        """Gets the null_point_mode of this SeriesOverride.


        :return: The null_point_mode of this SeriesOverride.
        :rtype: str
        """
        return self._null_point_mode

    @null_point_mode.setter
    def null_point_mode(self, null_point_mode):
        """Sets the null_point_mode of this SeriesOverride.


        :param null_point_mode: The null_point_mode of this SeriesOverride.
        :type null_point_mode: str
        """

        self._null_point_mode = null_point_mode

    @property
    def stack(self):
        """Gets the stack of this SeriesOverride.


        :return: The stack of this SeriesOverride.
        :rtype: BoolString
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this SeriesOverride.


        :param stack: The stack of this SeriesOverride.
        :type stack: BoolString
        """

        self._stack = stack

    @property
    def transform(self):
        """Gets the transform of this SeriesOverride.


        :return: The transform of this SeriesOverride.
        :rtype: str
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this SeriesOverride.


        :param transform: The transform of this SeriesOverride.
        :type transform: str
        """

        self._transform = transform

    @property
    def yaxis(self):
        """Gets the yaxis of this SeriesOverride.


        :return: The yaxis of this SeriesOverride.
        :rtype: int
        """
        return self._yaxis

    @yaxis.setter
    def yaxis(self, yaxis):
        """Sets the yaxis of this SeriesOverride.


        :param yaxis: The yaxis of this SeriesOverride.
        :type yaxis: int
        """

        self._yaxis = yaxis

    @property
    def zindex(self):
        """Gets the zindex of this SeriesOverride.


        :return: The zindex of this SeriesOverride.
        :rtype: int
        """
        return self._zindex

    @zindex.setter
    def zindex(self, zindex):
        """Sets the zindex of this SeriesOverride.


        :param zindex: The zindex of this SeriesOverride.
        :type zindex: int
        """

        self._zindex = zindex
