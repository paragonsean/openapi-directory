# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_evaluator import AlertEvaluator
from openapi_server.models.alert_operator import AlertOperator
from openapi_server.models.alert_query import AlertQuery
from openapi_server.models.alert_reducer import AlertReducer
from openapi_server import util


class AlertCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluator: AlertEvaluator=None, operator: AlertOperator=None, query: AlertQuery=None, reducer: AlertReducer=None, type: str=None):
        """AlertCondition - a model defined in OpenAPI

        :param evaluator: The evaluator of this AlertCondition.
        :param operator: The operator of this AlertCondition.
        :param query: The query of this AlertCondition.
        :param reducer: The reducer of this AlertCondition.
        :param type: The type of this AlertCondition.
        """
        self.openapi_types = {
            'evaluator': AlertEvaluator,
            'operator': AlertOperator,
            'query': AlertQuery,
            'reducer': AlertReducer,
            'type': str
        }

        self.attribute_map = {
            'evaluator': 'evaluator',
            'operator': 'operator',
            'query': 'query',
            'reducer': 'reducer',
            'type': 'type'
        }

        self._evaluator = evaluator
        self._operator = operator
        self._query = query
        self._reducer = reducer
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertCondition of this AlertCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluator(self):
        """Gets the evaluator of this AlertCondition.


        :return: The evaluator of this AlertCondition.
        :rtype: AlertEvaluator
        """
        return self._evaluator

    @evaluator.setter
    def evaluator(self, evaluator):
        """Sets the evaluator of this AlertCondition.


        :param evaluator: The evaluator of this AlertCondition.
        :type evaluator: AlertEvaluator
        """

        self._evaluator = evaluator

    @property
    def operator(self):
        """Gets the operator of this AlertCondition.


        :return: The operator of this AlertCondition.
        :rtype: AlertOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AlertCondition.


        :param operator: The operator of this AlertCondition.
        :type operator: AlertOperator
        """

        self._operator = operator

    @property
    def query(self):
        """Gets the query of this AlertCondition.


        :return: The query of this AlertCondition.
        :rtype: AlertQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AlertCondition.


        :param query: The query of this AlertCondition.
        :type query: AlertQuery
        """

        self._query = query

    @property
    def reducer(self):
        """Gets the reducer of this AlertCondition.


        :return: The reducer of this AlertCondition.
        :rtype: AlertReducer
        """
        return self._reducer

    @reducer.setter
    def reducer(self, reducer):
        """Sets the reducer of this AlertCondition.


        :param reducer: The reducer of this AlertCondition.
        :type reducer: AlertReducer
        """

        self._reducer = reducer

    @property
    def type(self):
        """Gets the type of this AlertCondition.


        :return: The type of this AlertCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertCondition.


        :param type: The type of this AlertCondition.
        :type type: str
        """

        self._type = type
