# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerTopOKBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, processes: List[List[str]]=None, titles: List[str]=None):
        """ContainerTopOKBody - a model defined in OpenAPI

        :param processes: The processes of this ContainerTopOKBody.
        :param titles: The titles of this ContainerTopOKBody.
        """
        self.openapi_types = {
            'processes': List[List[str]],
            'titles': List[str]
        }

        self.attribute_map = {
            'processes': 'Processes',
            'titles': 'Titles'
        }

        self._processes = processes
        self._titles = titles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerTopOKBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerTopOKBody of this ContainerTopOKBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def processes(self):
        """Gets the processes of this ContainerTopOKBody.

        Each process running in the container, where each is process is an array of values corresponding to the titles

        :return: The processes of this ContainerTopOKBody.
        :rtype: List[List[str]]
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this ContainerTopOKBody.

        Each process running in the container, where each is process is an array of values corresponding to the titles

        :param processes: The processes of this ContainerTopOKBody.
        :type processes: List[List[str]]
        """
        if processes is None:
            raise ValueError("Invalid value for `processes`, must not be `None`")

        self._processes = processes

    @property
    def titles(self):
        """Gets the titles of this ContainerTopOKBody.

        The ps column titles

        :return: The titles of this ContainerTopOKBody.
        :rtype: List[str]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this ContainerTopOKBody.

        The ps column titles

        :param titles: The titles of this ContainerTopOKBody.
        :type titles: List[str]
        """
        if titles is None:
            raise ValueError("Invalid value for `titles`, must not be `None`")

        self._titles = titles
