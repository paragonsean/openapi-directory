# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tooltip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ms_resolution: bool=None, shared: bool=None, sort: int=None, value_type: str=None):
        """Tooltip - a model defined in OpenAPI

        :param ms_resolution: The ms_resolution of this Tooltip.
        :param shared: The shared of this Tooltip.
        :param sort: The sort of this Tooltip.
        :param value_type: The value_type of this Tooltip.
        """
        self.openapi_types = {
            'ms_resolution': bool,
            'shared': bool,
            'sort': int,
            'value_type': str
        }

        self.attribute_map = {
            'ms_resolution': 'msResolution',
            'shared': 'shared',
            'sort': 'sort',
            'value_type': 'value_type'
        }

        self._ms_resolution = ms_resolution
        self._shared = shared
        self._sort = sort
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tooltip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tooltip of this Tooltip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ms_resolution(self):
        """Gets the ms_resolution of this Tooltip.


        :return: The ms_resolution of this Tooltip.
        :rtype: bool
        """
        return self._ms_resolution

    @ms_resolution.setter
    def ms_resolution(self, ms_resolution):
        """Sets the ms_resolution of this Tooltip.


        :param ms_resolution: The ms_resolution of this Tooltip.
        :type ms_resolution: bool
        """

        self._ms_resolution = ms_resolution

    @property
    def shared(self):
        """Gets the shared of this Tooltip.


        :return: The shared of this Tooltip.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Tooltip.


        :param shared: The shared of this Tooltip.
        :type shared: bool
        """

        self._shared = shared

    @property
    def sort(self):
        """Gets the sort of this Tooltip.


        :return: The sort of this Tooltip.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Tooltip.


        :param sort: The sort of this Tooltip.
        :type sort: int
        """

        self._sort = sort

    @property
    def value_type(self):
        """Gets the value_type of this Tooltip.


        :return: The value_type of this Tooltip.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Tooltip.


        :param value_type: The value_type of this Tooltip.
        :type value_type: str
        """

        self._value_type = value_type
