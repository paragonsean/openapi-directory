# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformanceProfileParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_request: int=None, duration: str=None, endpoints: List[str]=None, load_generators: List[str]=None, name: str=None, qps: int=None, service_mesh: str=None):
        """PerformanceProfileParameters - a model defined in OpenAPI

        :param concurrent_request: The concurrent_request of this PerformanceProfileParameters.
        :param duration: The duration of this PerformanceProfileParameters.
        :param endpoints: The endpoints of this PerformanceProfileParameters.
        :param load_generators: The load_generators of this PerformanceProfileParameters.
        :param name: The name of this PerformanceProfileParameters.
        :param qps: The qps of this PerformanceProfileParameters.
        :param service_mesh: The service_mesh of this PerformanceProfileParameters.
        """
        self.openapi_types = {
            'concurrent_request': int,
            'duration': str,
            'endpoints': List[str],
            'load_generators': List[str],
            'name': str,
            'qps': int,
            'service_mesh': str
        }

        self.attribute_map = {
            'concurrent_request': 'concurrent_request',
            'duration': 'duration',
            'endpoints': 'endpoints',
            'load_generators': 'load_generators',
            'name': 'name',
            'qps': 'qps',
            'service_mesh': 'service_mesh'
        }

        self._concurrent_request = concurrent_request
        self._duration = duration
        self._endpoints = endpoints
        self._load_generators = load_generators
        self._name = name
        self._qps = qps
        self._service_mesh = service_mesh

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceProfileParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceProfileParameters of this PerformanceProfileParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_request(self):
        """Gets the concurrent_request of this PerformanceProfileParameters.

        number of concurrent requests

        :return: The concurrent_request of this PerformanceProfileParameters.
        :rtype: int
        """
        return self._concurrent_request

    @concurrent_request.setter
    def concurrent_request(self, concurrent_request):
        """Sets the concurrent_request of this PerformanceProfileParameters.

        number of concurrent requests

        :param concurrent_request: The concurrent_request of this PerformanceProfileParameters.
        :type concurrent_request: int
        """

        self._concurrent_request = concurrent_request

    @property
    def duration(self):
        """Gets the duration of this PerformanceProfileParameters.

        duration of tests e.g. 30s

        :return: The duration of this PerformanceProfileParameters.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PerformanceProfileParameters.

        duration of tests e.g. 30s

        :param duration: The duration of this PerformanceProfileParameters.
        :type duration: str
        """

        self._duration = duration

    @property
    def endpoints(self):
        """Gets the endpoints of this PerformanceProfileParameters.

        array of urls of performance results

        :return: The endpoints of this PerformanceProfileParameters.
        :rtype: List[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this PerformanceProfileParameters.

        array of urls of performance results

        :param endpoints: The endpoints of this PerformanceProfileParameters.
        :type endpoints: List[str]
        """

        self._endpoints = endpoints

    @property
    def load_generators(self):
        """Gets the load_generators of this PerformanceProfileParameters.

        array of load generators

        :return: The load_generators of this PerformanceProfileParameters.
        :rtype: List[str]
        """
        return self._load_generators

    @load_generators.setter
    def load_generators(self, load_generators):
        """Sets the load_generators of this PerformanceProfileParameters.

        array of load generators

        :param load_generators: The load_generators of this PerformanceProfileParameters.
        :type load_generators: List[str]
        """

        self._load_generators = load_generators

    @property
    def name(self):
        """Gets the name of this PerformanceProfileParameters.

        name of performance profile

        :return: The name of this PerformanceProfileParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PerformanceProfileParameters.

        name of performance profile

        :param name: The name of this PerformanceProfileParameters.
        :type name: str
        """

        self._name = name

    @property
    def qps(self):
        """Gets the qps of this PerformanceProfileParameters.

        qps in integer

        :return: The qps of this PerformanceProfileParameters.
        :rtype: int
        """
        return self._qps

    @qps.setter
    def qps(self, qps):
        """Sets the qps of this PerformanceProfileParameters.

        qps in integer

        :param qps: The qps of this PerformanceProfileParameters.
        :type qps: int
        """

        self._qps = qps

    @property
    def service_mesh(self):
        """Gets the service_mesh of this PerformanceProfileParameters.

        service mesh for performance tests

        :return: The service_mesh of this PerformanceProfileParameters.
        :rtype: str
        """
        return self._service_mesh

    @service_mesh.setter
    def service_mesh(self, service_mesh):
        """Sets the service_mesh of this PerformanceProfileParameters.

        service mesh for performance tests

        :param service_mesh: The service_mesh of this PerformanceProfileParameters.
        :type service_mesh: str
        """

        self._service_mesh = service_mesh
