# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_interface_type import PluginInterfaceType
from openapi_server import util


class PluginConfigInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol_scheme: str=None, socket: str=None, types: List[PluginInterfaceType]=None):
        """PluginConfigInterface - a model defined in OpenAPI

        :param protocol_scheme: The protocol_scheme of this PluginConfigInterface.
        :param socket: The socket of this PluginConfigInterface.
        :param types: The types of this PluginConfigInterface.
        """
        self.openapi_types = {
            'protocol_scheme': str,
            'socket': str,
            'types': List[PluginInterfaceType]
        }

        self.attribute_map = {
            'protocol_scheme': 'ProtocolScheme',
            'socket': 'Socket',
            'types': 'Types'
        }

        self._protocol_scheme = protocol_scheme
        self._socket = socket
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginConfigInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginConfigInterface of this PluginConfigInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol_scheme(self):
        """Gets the protocol_scheme of this PluginConfigInterface.

        Protocol to use for clients connecting to the plugin.

        :return: The protocol_scheme of this PluginConfigInterface.
        :rtype: str
        """
        return self._protocol_scheme

    @protocol_scheme.setter
    def protocol_scheme(self, protocol_scheme):
        """Sets the protocol_scheme of this PluginConfigInterface.

        Protocol to use for clients connecting to the plugin.

        :param protocol_scheme: The protocol_scheme of this PluginConfigInterface.
        :type protocol_scheme: str
        """

        self._protocol_scheme = protocol_scheme

    @property
    def socket(self):
        """Gets the socket of this PluginConfigInterface.

        socket

        :return: The socket of this PluginConfigInterface.
        :rtype: str
        """
        return self._socket

    @socket.setter
    def socket(self, socket):
        """Sets the socket of this PluginConfigInterface.

        socket

        :param socket: The socket of this PluginConfigInterface.
        :type socket: str
        """
        if socket is None:
            raise ValueError("Invalid value for `socket`, must not be `None`")

        self._socket = socket

    @property
    def types(self):
        """Gets the types of this PluginConfigInterface.

        types

        :return: The types of this PluginConfigInterface.
        :rtype: List[PluginInterfaceType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this PluginConfigInterface.

        types

        :param types: The types of this PluginConfigInterface.
        :type types: List[PluginInterfaceType]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
