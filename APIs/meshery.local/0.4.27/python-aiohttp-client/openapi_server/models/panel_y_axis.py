# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PanelYAxis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decimals: int=None, format: str=None, log_base: int=None, max: str=None, min: str=None, show: bool=None, split_factor: float=None):
        """PanelYAxis - a model defined in OpenAPI

        :param decimals: The decimals of this PanelYAxis.
        :param format: The format of this PanelYAxis.
        :param log_base: The log_base of this PanelYAxis.
        :param max: The max of this PanelYAxis.
        :param min: The min of this PanelYAxis.
        :param show: The show of this PanelYAxis.
        :param split_factor: The split_factor of this PanelYAxis.
        """
        self.openapi_types = {
            'decimals': int,
            'format': str,
            'log_base': int,
            'max': str,
            'min': str,
            'show': bool,
            'split_factor': float
        }

        self.attribute_map = {
            'decimals': 'decimals',
            'format': 'format',
            'log_base': 'logBase',
            'max': 'max',
            'min': 'min',
            'show': 'show',
            'split_factor': 'splitFactor'
        }

        self._decimals = decimals
        self._format = format
        self._log_base = log_base
        self._max = max
        self._min = min
        self._show = show
        self._split_factor = split_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PanelYAxis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Panel_yAxis of this PanelYAxis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decimals(self):
        """Gets the decimals of this PanelYAxis.


        :return: The decimals of this PanelYAxis.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this PanelYAxis.


        :param decimals: The decimals of this PanelYAxis.
        :type decimals: int
        """

        self._decimals = decimals

    @property
    def format(self):
        """Gets the format of this PanelYAxis.


        :return: The format of this PanelYAxis.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PanelYAxis.


        :param format: The format of this PanelYAxis.
        :type format: str
        """

        self._format = format

    @property
    def log_base(self):
        """Gets the log_base of this PanelYAxis.


        :return: The log_base of this PanelYAxis.
        :rtype: int
        """
        return self._log_base

    @log_base.setter
    def log_base(self, log_base):
        """Sets the log_base of this PanelYAxis.


        :param log_base: The log_base of this PanelYAxis.
        :type log_base: int
        """

        self._log_base = log_base

    @property
    def max(self):
        """Gets the max of this PanelYAxis.


        :return: The max of this PanelYAxis.
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this PanelYAxis.


        :param max: The max of this PanelYAxis.
        :type max: str
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this PanelYAxis.


        :return: The min of this PanelYAxis.
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this PanelYAxis.


        :param min: The min of this PanelYAxis.
        :type min: str
        """

        self._min = min

    @property
    def show(self):
        """Gets the show of this PanelYAxis.


        :return: The show of this PanelYAxis.
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this PanelYAxis.


        :param show: The show of this PanelYAxis.
        :type show: bool
        """

        self._show = show

    @property
    def split_factor(self):
        """Gets the split_factor of this PanelYAxis.


        :return: The split_factor of this PanelYAxis.
        :rtype: float
        """
        return self._split_factor

    @split_factor.setter
    def split_factor(self, split_factor):
        """Sets the split_factor of this PanelYAxis.


        :param split_factor: The split_factor of this PanelYAxis.
        :type split_factor: float
        """

        self._split_factor = split_factor
