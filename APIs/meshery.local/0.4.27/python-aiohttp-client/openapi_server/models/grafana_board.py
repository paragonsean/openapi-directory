# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grafana_template_vars import GrafanaTemplateVars
from openapi_server.models.panel import Panel
from openapi_server import util


class GrafanaBoard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, org_id: int=None, panels: List[Panel]=None, slug: str=None, template_vars: List[GrafanaTemplateVars]=None, title: str=None, uid: str=None, uri: str=None):
        """GrafanaBoard - a model defined in OpenAPI

        :param org_id: The org_id of this GrafanaBoard.
        :param panels: The panels of this GrafanaBoard.
        :param slug: The slug of this GrafanaBoard.
        :param template_vars: The template_vars of this GrafanaBoard.
        :param title: The title of this GrafanaBoard.
        :param uid: The uid of this GrafanaBoard.
        :param uri: The uri of this GrafanaBoard.
        """
        self.openapi_types = {
            'org_id': int,
            'panels': List[Panel],
            'slug': str,
            'template_vars': List[GrafanaTemplateVars],
            'title': str,
            'uid': str,
            'uri': str
        }

        self.attribute_map = {
            'org_id': 'org_id',
            'panels': 'panels',
            'slug': 'slug',
            'template_vars': 'template_vars',
            'title': 'title',
            'uid': 'uid',
            'uri': 'uri'
        }

        self._org_id = org_id
        self._panels = panels
        self._slug = slug
        self._template_vars = template_vars
        self._title = title
        self._uid = uid
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrafanaBoard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrafanaBoard of this GrafanaBoard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_id(self):
        """Gets the org_id of this GrafanaBoard.


        :return: The org_id of this GrafanaBoard.
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this GrafanaBoard.


        :param org_id: The org_id of this GrafanaBoard.
        :type org_id: int
        """

        self._org_id = org_id

    @property
    def panels(self):
        """Gets the panels of this GrafanaBoard.


        :return: The panels of this GrafanaBoard.
        :rtype: List[Panel]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this GrafanaBoard.


        :param panels: The panels of this GrafanaBoard.
        :type panels: List[Panel]
        """

        self._panels = panels

    @property
    def slug(self):
        """Gets the slug of this GrafanaBoard.


        :return: The slug of this GrafanaBoard.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GrafanaBoard.


        :param slug: The slug of this GrafanaBoard.
        :type slug: str
        """

        self._slug = slug

    @property
    def template_vars(self):
        """Gets the template_vars of this GrafanaBoard.


        :return: The template_vars of this GrafanaBoard.
        :rtype: List[GrafanaTemplateVars]
        """
        return self._template_vars

    @template_vars.setter
    def template_vars(self, template_vars):
        """Sets the template_vars of this GrafanaBoard.


        :param template_vars: The template_vars of this GrafanaBoard.
        :type template_vars: List[GrafanaTemplateVars]
        """

        self._template_vars = template_vars

    @property
    def title(self):
        """Gets the title of this GrafanaBoard.


        :return: The title of this GrafanaBoard.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GrafanaBoard.


        :param title: The title of this GrafanaBoard.
        :type title: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this GrafanaBoard.


        :return: The uid of this GrafanaBoard.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GrafanaBoard.


        :param uid: The uid of this GrafanaBoard.
        :type uid: str
        """

        self._uid = uid

    @property
    def uri(self):
        """Gets the uri of this GrafanaBoard.


        :return: The uri of this GrafanaBoard.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GrafanaBoard.


        :param uri: The uri of this GrafanaBoard.
        :type uri: str
        """

        self._uri = uri
