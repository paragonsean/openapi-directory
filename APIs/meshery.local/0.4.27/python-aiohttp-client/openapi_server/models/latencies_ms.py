# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatenciesMs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, max: float=None, min: float=None, p50: float=None, p90: float=None, p99: float=None):
        """LatenciesMs - a model defined in OpenAPI

        :param average: The average of this LatenciesMs.
        :param max: The max of this LatenciesMs.
        :param min: The min of this LatenciesMs.
        :param p50: The p50 of this LatenciesMs.
        :param p90: The p90 of this LatenciesMs.
        :param p99: The p99 of this LatenciesMs.
        """
        self.openapi_types = {
            'average': float,
            'max': float,
            'min': float,
            'p50': float,
            'p90': float,
            'p99': float
        }

        self.attribute_map = {
            'average': 'Average',
            'max': 'Max',
            'min': 'Min',
            'p50': 'P50',
            'p90': 'P90',
            'p99': 'P99'
        }

        self._average = average
        self._max = max
        self._min = min
        self._p50 = p50
        self._p90 = p90
        self._p99 = p99

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatenciesMs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatenciesMs of this LatenciesMs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this LatenciesMs.


        :return: The average of this LatenciesMs.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this LatenciesMs.


        :param average: The average of this LatenciesMs.
        :type average: float
        """

        self._average = average

    @property
    def max(self):
        """Gets the max of this LatenciesMs.


        :return: The max of this LatenciesMs.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this LatenciesMs.


        :param max: The max of this LatenciesMs.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this LatenciesMs.


        :return: The min of this LatenciesMs.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this LatenciesMs.


        :param min: The min of this LatenciesMs.
        :type min: float
        """

        self._min = min

    @property
    def p50(self):
        """Gets the p50 of this LatenciesMs.


        :return: The p50 of this LatenciesMs.
        :rtype: float
        """
        return self._p50

    @p50.setter
    def p50(self, p50):
        """Sets the p50 of this LatenciesMs.


        :param p50: The p50 of this LatenciesMs.
        :type p50: float
        """

        self._p50 = p50

    @property
    def p90(self):
        """Gets the p90 of this LatenciesMs.


        :return: The p90 of this LatenciesMs.
        :rtype: float
        """
        return self._p90

    @p90.setter
    def p90(self, p90):
        """Sets the p90 of this LatenciesMs.


        :param p90: The p90 of this LatenciesMs.
        :type p90: float
        """

        self._p90 = p90

    @property
    def p99(self):
        """Gets the p99 of this LatenciesMs.


        :return: The p99 of this LatenciesMs.
        :rtype: float
        """
        return self._p99

    @p99.setter
    def p99(self, p99):
        """Sets the p99 of this LatenciesMs.


        :param p99: The p99 of this LatenciesMs.
        :type p99: float
        """

        self._p99 = p99
