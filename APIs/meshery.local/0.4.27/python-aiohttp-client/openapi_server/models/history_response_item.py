# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoryResponseItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, created: int=None, created_by: str=None, id: str=None, size: int=None, tags: List[str]=None):
        """HistoryResponseItem - a model defined in OpenAPI

        :param comment: The comment of this HistoryResponseItem.
        :param created: The created of this HistoryResponseItem.
        :param created_by: The created_by of this HistoryResponseItem.
        :param id: The id of this HistoryResponseItem.
        :param size: The size of this HistoryResponseItem.
        :param tags: The tags of this HistoryResponseItem.
        """
        self.openapi_types = {
            'comment': str,
            'created': int,
            'created_by': str,
            'id': str,
            'size': int,
            'tags': List[str]
        }

        self.attribute_map = {
            'comment': 'Comment',
            'created': 'Created',
            'created_by': 'CreatedBy',
            'id': 'Id',
            'size': 'Size',
            'tags': 'Tags'
        }

        self._comment = comment
        self._created = created
        self._created_by = created_by
        self._id = id
        self._size = size
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryResponseItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryResponseItem of this HistoryResponseItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this HistoryResponseItem.

        comment

        :return: The comment of this HistoryResponseItem.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HistoryResponseItem.

        comment

        :param comment: The comment of this HistoryResponseItem.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this HistoryResponseItem.

        created

        :return: The created of this HistoryResponseItem.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HistoryResponseItem.

        created

        :param created: The created of this HistoryResponseItem.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this HistoryResponseItem.

        created by

        :return: The created_by of this HistoryResponseItem.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this HistoryResponseItem.

        created by

        :param created_by: The created_by of this HistoryResponseItem.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this HistoryResponseItem.

        Id

        :return: The id of this HistoryResponseItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryResponseItem.

        Id

        :param id: The id of this HistoryResponseItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def size(self):
        """Gets the size of this HistoryResponseItem.

        size

        :return: The size of this HistoryResponseItem.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HistoryResponseItem.

        size

        :param size: The size of this HistoryResponseItem.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def tags(self):
        """Gets the tags of this HistoryResponseItem.

        tags

        :return: The tags of this HistoryResponseItem.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this HistoryResponseItem.

        tags

        :param tags: The tags of this HistoryResponseItem.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
