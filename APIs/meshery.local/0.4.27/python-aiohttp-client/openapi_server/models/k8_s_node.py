# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class K8SNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocatable_cpu: str=None, allocatable_memory: str=None, architecture: str=None, capacity_cpu: str=None, capacity_memory: str=None, container_runtime_version: str=None, hostname: str=None, internal_ip: str=None, kubelet_version: str=None, kubeproxy_version: str=None, operating_system: str=None, os_image: str=None):
        """K8SNode - a model defined in OpenAPI

        :param allocatable_cpu: The allocatable_cpu of this K8SNode.
        :param allocatable_memory: The allocatable_memory of this K8SNode.
        :param architecture: The architecture of this K8SNode.
        :param capacity_cpu: The capacity_cpu of this K8SNode.
        :param capacity_memory: The capacity_memory of this K8SNode.
        :param container_runtime_version: The container_runtime_version of this K8SNode.
        :param hostname: The hostname of this K8SNode.
        :param internal_ip: The internal_ip of this K8SNode.
        :param kubelet_version: The kubelet_version of this K8SNode.
        :param kubeproxy_version: The kubeproxy_version of this K8SNode.
        :param operating_system: The operating_system of this K8SNode.
        :param os_image: The os_image of this K8SNode.
        """
        self.openapi_types = {
            'allocatable_cpu': str,
            'allocatable_memory': str,
            'architecture': str,
            'capacity_cpu': str,
            'capacity_memory': str,
            'container_runtime_version': str,
            'hostname': str,
            'internal_ip': str,
            'kubelet_version': str,
            'kubeproxy_version': str,
            'operating_system': str,
            'os_image': str
        }

        self.attribute_map = {
            'allocatable_cpu': 'allocatable_cpu',
            'allocatable_memory': 'allocatable_memory',
            'architecture': 'architecture',
            'capacity_cpu': 'capacity_cpu',
            'capacity_memory': 'capacity_memory',
            'container_runtime_version': 'container_runtime_version',
            'hostname': 'hostname',
            'internal_ip': 'internal_ip',
            'kubelet_version': 'kubelet_version',
            'kubeproxy_version': 'kubeproxy_version',
            'operating_system': 'operating_system',
            'os_image': 'os_image'
        }

        self._allocatable_cpu = allocatable_cpu
        self._allocatable_memory = allocatable_memory
        self._architecture = architecture
        self._capacity_cpu = capacity_cpu
        self._capacity_memory = capacity_memory
        self._container_runtime_version = container_runtime_version
        self._hostname = hostname
        self._internal_ip = internal_ip
        self._kubelet_version = kubelet_version
        self._kubeproxy_version = kubeproxy_version
        self._operating_system = operating_system
        self._os_image = os_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'K8SNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The K8SNode of this K8SNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocatable_cpu(self):
        """Gets the allocatable_cpu of this K8SNode.


        :return: The allocatable_cpu of this K8SNode.
        :rtype: str
        """
        return self._allocatable_cpu

    @allocatable_cpu.setter
    def allocatable_cpu(self, allocatable_cpu):
        """Sets the allocatable_cpu of this K8SNode.


        :param allocatable_cpu: The allocatable_cpu of this K8SNode.
        :type allocatable_cpu: str
        """

        self._allocatable_cpu = allocatable_cpu

    @property
    def allocatable_memory(self):
        """Gets the allocatable_memory of this K8SNode.


        :return: The allocatable_memory of this K8SNode.
        :rtype: str
        """
        return self._allocatable_memory

    @allocatable_memory.setter
    def allocatable_memory(self, allocatable_memory):
        """Sets the allocatable_memory of this K8SNode.


        :param allocatable_memory: The allocatable_memory of this K8SNode.
        :type allocatable_memory: str
        """

        self._allocatable_memory = allocatable_memory

    @property
    def architecture(self):
        """Gets the architecture of this K8SNode.


        :return: The architecture of this K8SNode.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this K8SNode.


        :param architecture: The architecture of this K8SNode.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def capacity_cpu(self):
        """Gets the capacity_cpu of this K8SNode.


        :return: The capacity_cpu of this K8SNode.
        :rtype: str
        """
        return self._capacity_cpu

    @capacity_cpu.setter
    def capacity_cpu(self, capacity_cpu):
        """Sets the capacity_cpu of this K8SNode.


        :param capacity_cpu: The capacity_cpu of this K8SNode.
        :type capacity_cpu: str
        """

        self._capacity_cpu = capacity_cpu

    @property
    def capacity_memory(self):
        """Gets the capacity_memory of this K8SNode.


        :return: The capacity_memory of this K8SNode.
        :rtype: str
        """
        return self._capacity_memory

    @capacity_memory.setter
    def capacity_memory(self, capacity_memory):
        """Sets the capacity_memory of this K8SNode.


        :param capacity_memory: The capacity_memory of this K8SNode.
        :type capacity_memory: str
        """

        self._capacity_memory = capacity_memory

    @property
    def container_runtime_version(self):
        """Gets the container_runtime_version of this K8SNode.


        :return: The container_runtime_version of this K8SNode.
        :rtype: str
        """
        return self._container_runtime_version

    @container_runtime_version.setter
    def container_runtime_version(self, container_runtime_version):
        """Sets the container_runtime_version of this K8SNode.


        :param container_runtime_version: The container_runtime_version of this K8SNode.
        :type container_runtime_version: str
        """

        self._container_runtime_version = container_runtime_version

    @property
    def hostname(self):
        """Gets the hostname of this K8SNode.


        :return: The hostname of this K8SNode.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this K8SNode.


        :param hostname: The hostname of this K8SNode.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def internal_ip(self):
        """Gets the internal_ip of this K8SNode.


        :return: The internal_ip of this K8SNode.
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this K8SNode.


        :param internal_ip: The internal_ip of this K8SNode.
        :type internal_ip: str
        """

        self._internal_ip = internal_ip

    @property
    def kubelet_version(self):
        """Gets the kubelet_version of this K8SNode.


        :return: The kubelet_version of this K8SNode.
        :rtype: str
        """
        return self._kubelet_version

    @kubelet_version.setter
    def kubelet_version(self, kubelet_version):
        """Sets the kubelet_version of this K8SNode.


        :param kubelet_version: The kubelet_version of this K8SNode.
        :type kubelet_version: str
        """

        self._kubelet_version = kubelet_version

    @property
    def kubeproxy_version(self):
        """Gets the kubeproxy_version of this K8SNode.


        :return: The kubeproxy_version of this K8SNode.
        :rtype: str
        """
        return self._kubeproxy_version

    @kubeproxy_version.setter
    def kubeproxy_version(self, kubeproxy_version):
        """Sets the kubeproxy_version of this K8SNode.


        :param kubeproxy_version: The kubeproxy_version of this K8SNode.
        :type kubeproxy_version: str
        """

        self._kubeproxy_version = kubeproxy_version

    @property
    def operating_system(self):
        """Gets the operating_system of this K8SNode.


        :return: The operating_system of this K8SNode.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this K8SNode.


        :param operating_system: The operating_system of this K8SNode.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def os_image(self):
        """Gets the os_image of this K8SNode.


        :return: The os_image of this K8SNode.
        :rtype: str
        """
        return self._os_image

    @os_image.setter
    def os_image(self, os_image):
        """Sets the os_image of this K8SNode.


        :param os_image: The os_image of this K8SNode.
        :type os_image: str
        """

        self._os_image = os_image
