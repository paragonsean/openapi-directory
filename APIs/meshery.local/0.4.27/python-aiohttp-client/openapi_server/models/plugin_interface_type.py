# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PluginInterfaceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capability: str=None, prefix: str=None, version: str=None):
        """PluginInterfaceType - a model defined in OpenAPI

        :param capability: The capability of this PluginInterfaceType.
        :param prefix: The prefix of this PluginInterfaceType.
        :param version: The version of this PluginInterfaceType.
        """
        self.openapi_types = {
            'capability': str,
            'prefix': str,
            'version': str
        }

        self.attribute_map = {
            'capability': 'Capability',
            'prefix': 'Prefix',
            'version': 'Version'
        }

        self._capability = capability
        self._prefix = prefix
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginInterfaceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginInterfaceType of this PluginInterfaceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capability(self):
        """Gets the capability of this PluginInterfaceType.

        capability

        :return: The capability of this PluginInterfaceType.
        :rtype: str
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this PluginInterfaceType.

        capability

        :param capability: The capability of this PluginInterfaceType.
        :type capability: str
        """
        if capability is None:
            raise ValueError("Invalid value for `capability`, must not be `None`")

        self._capability = capability

    @property
    def prefix(self):
        """Gets the prefix of this PluginInterfaceType.

        prefix

        :return: The prefix of this PluginInterfaceType.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PluginInterfaceType.

        prefix

        :param prefix: The prefix of this PluginInterfaceType.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def version(self):
        """Gets the version of this PluginInterfaceType.

        version

        :return: The version of this PluginInterfaceType.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PluginInterfaceType.

        version

        :param version: The version of this PluginInterfaceType.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
