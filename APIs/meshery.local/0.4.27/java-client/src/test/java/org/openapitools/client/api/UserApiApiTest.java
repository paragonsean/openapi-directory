/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PerformanceTestConfig;
import org.openapitools.client.model.Preference;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApiApi
 */
@Disabled
public class UserApiApiTest {

    private final UserApiApi api = new UserApiApi();

    /**
     * Handle DELETE request for load test preferences
     *
     * Used for deleting load test preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteLoadPreferencesTest() throws ApiException {
        UUID uuid = null;
        api.idDeleteLoadPreferences(uuid);
        // TODO: test validations
    }

    /**
     * Handle GET request for load test preferences
     *
     * Used for fetching load test preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetLoadPreferencesTest() throws ApiException {
        UUID uuid = null;
        PerformanceTestConfig response = api.idGetLoadPreferences(uuid);
        // TODO: test validations
    }

    /**
     * Handle GET request for tokens
     *
     * Returns token from the actual provider in a file resposese: 200:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetTokenProviderTest() throws ApiException {
        api.idGetTokenProvider();
        // TODO: test validations
    }

    /**
     * Handlers GET request for User login
     *
     * Redirects user for auth or issues session
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetUserLoginTest() throws ApiException {
        api.idGetUserLogin();
        // TODO: test validations
    }

    /**
     * Handlers GET request for User logout
     *
     * Redirects user for auth or issues session
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetUserLogoutTest() throws ApiException {
        api.idGetUserLogout();
        // TODO: test validations
    }

    /**
     * Handle GET for User Load Test Preferences
     *
     * Returns User Load Test Preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetUserTestPrefsTest() throws ApiException {
        Preference response = api.idGetUserTestPrefs();
        // TODO: test validations
    }

    /**
     * Handle POST request for load test preferences
     *
     * Used for persisting load test preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostLoadPreferencesTest() throws ApiException {
        PerformanceTestConfig performanceTestConfig = null;
        api.idPostLoadPreferences(performanceTestConfig);
        // TODO: test validations
    }

    /**
     * Handle POST request for tokens
     *
     * Receives token from the actual provider resposese: 200:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostTokenProviderTest() throws ApiException {
        api.idPostTokenProvider();
        // TODO: test validations
    }

    /**
     * Handle GET for User Load Test Preferences
     *
     * Updates User Load Test Preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostUserTestPrefsTest() throws ApiException {
        Preference response = api.idPostUserTestPrefs();
        // TODO: test validations
    }

}
