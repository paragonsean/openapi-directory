/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Grafana;
import org.openapitools.client.model.GrafanaBoard;
import org.openapitools.client.model.GrafanaConfigParams;
import org.openapitools.client.model.Service;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GrafanaApiApi
 */
@Disabled
public class GrafanaApiApiTest {

    private final GrafanaApiApi api = new GrafanaApiApi();

    /**
     * Handle DELETE request for Grafana configuration
     *
     * Used for Delete Grafana configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteGrafanaConfigTest() throws ApiException {
        api.idDeleteGrafanaConfig();
        // TODO: test validations
    }

    /**
     * Handle GET request for Grafana
     *
     * Fetches and returns Grafana
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetGrafanaTest() throws ApiException {
        Map<String, List<Service>> response = api.idGetGrafana();
        // TODO: test validations
    }

    /**
     * Handle GET request for Grafana boards
     *
     * Used for fetching Grafana boards and panels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetGrafanaBoardsTest() throws ApiException {
        String dashboardSearch = null;
        List<GrafanaBoard> response = api.idGetGrafanaBoards(dashboardSearch);
        // TODO: test validations
    }

    /**
     * Handle GET request for Grafana configuration
     *
     * Used for fetching Grafana configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetGrafanaConfigTest() throws ApiException {
        Grafana response = api.idGetGrafanaConfig();
        // TODO: test validations
    }

    /**
     * Handle GET request for Grafana ping
     *
     * Used to initiate a Grafana ping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetGrafanaPingTest() throws ApiException {
        api.idGetGrafanaPing();
        // TODO: test validations
    }

    /**
     * Handle GET request for Grafana queries
     *
     * Used for handling Grafana queries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetGrafanaQueryTest() throws ApiException {
        api.idGetGrafanaQuery();
        // TODO: test validations
    }

    /**
     * Handle POST request for Grafana boards
     *
     * Used for persist Grafana boards and panel selections
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostGrafanaBoardsTest() throws ApiException {
        api.idPostGrafanaBoards();
        // TODO: test validations
    }

    /**
     * Handle POST request for Grafana configuration
     *
     * Used for persisting Grafana configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostGrafanaConfigTest() throws ApiException {
        GrafanaConfigParams grafanaConfigParams = null;
        api.idPostGrafanaConfig(grafanaConfigParams);
        // TODO: test validations
    }

}
