/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GrafanaBoard;
import org.openapitools.client.model.Prometheus;
import org.openapitools.client.model.SelectedGrafanaConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrometheusApiApi
 */
@Disabled
public class PrometheusApiApiTest {

    private final PrometheusApiApi api = new PrometheusApiApi();

    /**
     * Handle DELETE for Prometheus configuration
     *
     * Used for deleting Prometheus configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeletePrometheusConfigTest() throws ApiException {
        api.idDeletePrometheusConfig();
        // TODO: test validations
    }

    /**
     * Handle GET for Prometheus configuration
     *
     * Used for fetching Prometheus configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetPrometheusConfigTest() throws ApiException {
        Prometheus response = api.idGetPrometheusConfig();
        // TODO: test validations
    }

    /**
     * Handle GET request for Prometheus Ping
     *
     * Used to ping prometheus
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetPrometheusPingTest() throws ApiException {
        api.idGetPrometheusPing();
        // TODO: test validations
    }

    /**
     * Handle GET request for Prometheus Query
     *
     * Used to prometheus queries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetPrometheusQueryTest() throws ApiException {
        api.idGetPrometheusQuery();
        // TODO: test validations
    }

    /**
     * Handle GET request for Prometheus static board
     *
     * Used to fetch the static board
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetPrometheusStaticBoardTest() throws ApiException {
        Map<String, GrafanaBoard> response = api.idGetPrometheusStaticBoard();
        // TODO: test validations
    }

    /**
     * Handle POST request for Prometheus board
     *
     * Used to persist selected board and panels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostPrometheusBoardTest() throws ApiException {
        List<SelectedGrafanaConfig> selectedGrafanaConfig = null;
        api.idPostPrometheusBoard(selectedGrafanaConfig);
        // TODO: test validations
    }

    /**
     * Handle POST request for Prometheus board import
     *
     * Used for importing Grafana board for Prometheus
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostPrometheusBoardImportTest() throws ApiException {
        GrafanaBoard response = api.idPostPrometheusBoardImport();
        // TODO: test validations
    }

    /**
     * Handle POST for Prometheus configuration
     *
     * Used for persisting Prometheus configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostPrometheusConfigTest() throws ApiException {
        String body = null;
        api.idPostPrometheusConfig(body);
        // TODO: test validations
    }

}
