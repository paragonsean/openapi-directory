/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProviderProperties;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProvidersApiApi
 */
@Disabled
public class ProvidersApiApiTest {

    private final ProvidersApiApi api = new ProvidersApiApi();

    /**
     * Handle GET request for the choice of provider
     *
     * Update the choice of provider in system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idChoiceProviderTest() throws ApiException {
        String provider = null;
        api.idChoiceProvider(provider);
        // TODO: test validations
    }

    /**
     * Handle GET requests for Provider
     *
     * Returns the capabilities.json for the provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetProviderCapabilitiesTest() throws ApiException {
        api.idGetProviderCapabilities();
        // TODO: test validations
    }

    /**
     * Handle GET request for list of providers
     *
     * Returns the available list of providers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetProvidersListTest() throws ApiException {
        Map<String, ProviderProperties> response = api.idGetProvidersList();
        // TODO: test validations
    }

    /**
     * Handle GET request to provider UI
     *
     * Servers providers UI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idProviderTest() throws ApiException {
        api.idProvider();
        // TODO: test validations
    }

    /**
     * Handle GET request for React Components
     *
     * handles the requests to serve react components from the provider package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idReactComponentsTest() throws ApiException {
        api.idReactComponents();
        // TODO: test validations
    }

}
