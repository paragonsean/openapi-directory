/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.MesheryPattern;
import org.openapitools.client.model.PatternsAPIResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PatternsApiApi
 */
@Disabled
public class PatternsApiApiTest {

    private final PatternsApiApi api = new PatternsApiApi();

    /**
     * Handle DELETE request for Pattern Deploy
     *
     * Delete a deployed pattern with the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteDeployPatternTest() throws ApiException {
        api.idDeleteDeployPattern();
        // TODO: test validations
    }

    /**
     * Handle Delete for a Meshery Pattern
     *
     * Deletes a meshery pattern with ID: id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteMesheryPatternTest() throws ApiException {
        UUID id = null;
        api.idDeleteMesheryPattern(id);
        // TODO: test validations
    }

    /**
     * Handles the get requests for the OAM objects
     *
     * Getting list of workloads/traits/scopes  {type} being of either trait, scope, workload; registration of adapter capabilities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGETOAMMesheryPatternTest() throws ApiException {
        String type = null;
        api.idGETOAMMesheryPattern(type);
        // TODO: test validations
    }

    /**
     * Handle GET for a Meshery Pattern
     *
     * Fetches the pattern with the given id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetMesheryPatternTest() throws ApiException {
        UUID id = null;
        MesheryPattern response = api.idGetMesheryPattern(id);
        // TODO: test validations
    }

    /**
     * Handle GET request for patterns
     *
     * Returns the list of all the patterns saved by the current user This will return all the patterns with their details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetPatternFilesTest() throws ApiException {
        PatternsAPIResponse response = api.idGetPatternFiles();
        // TODO: test validations
    }

    /**
     * Handles registering OMA objects
     *
     * Adding a workload/trait/scope  {type} being of either trait, scope, workload; registration of adapter capabilities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPOSTOAMMesheryPatternTest() throws ApiException {
        String type = null;
        api.idPOSTOAMMesheryPattern(type);
        // TODO: test validations
    }

    /**
     * Handle POST request for Pattern Deploy
     *
     * Deploy an attached pattern with the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostDeployPatternTest() throws ApiException {
        File uploadYamlYmlFile = null;
        api.idPostDeployPattern(uploadYamlYmlFile);
        // TODO: test validations
    }

    /**
     * Handle POST requests for patterns
     *
     * Edit/update a meshery pattern
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostPatternFileTest() throws ApiException {
        MesheryPattern response = api.idPostPatternFile();
        // TODO: test validations
    }

}
