/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.Axis;
import org.openapitools.client.model.Column;
import org.openapitools.client.model.ColumnStyle;
import org.openapitools.client.model.FieldConfig;
import org.openapitools.client.model.Gauge;
import org.openapitools.client.model.IntString;
import org.openapitools.client.model.Legend;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.MapType;
import org.openapitools.client.model.Options;
import org.openapitools.client.model.PanelCards;
import org.openapitools.client.model.PanelColor;
import org.openapitools.client.model.PanelGridPos;
import org.openapitools.client.model.PanelScopedVarsValue;
import org.openapitools.client.model.PanelXAxis;
import org.openapitools.client.model.PanelYAxis;
import org.openapitools.client.model.RangeMap;
import org.openapitools.client.model.SeriesOverride;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SparkLine;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.Threshold;
import org.openapitools.client.model.Tooltip;
import org.openapitools.client.model.ValueMap;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Panel
 */
public class PanelTest {
    private final Panel model = new Panel();

    /**
     * Model tests for Panel
     */
    @Test
    public void testPanel() {
        // TODO: test Panel
    }

    /**
     * Test the property 'alert'
     */
    @Test
    public void alertTest() {
        // TODO: test alert
    }

    /**
     * Test the property 'aliasColors'
     */
    @Test
    public void aliasColorsTest() {
        // TODO: test aliasColors
    }

    /**
     * Test the property 'bars'
     */
    @Test
    public void barsTest() {
        // TODO: test bars
    }

    /**
     * Test the property 'cards'
     */
    @Test
    public void cardsTest() {
        // TODO: test cards
    }

    /**
     * Test the property 'collapsed'
     */
    @Test
    public void collapsedTest() {
        // TODO: test collapsed
    }

    /**
     * Test the property 'color'
     */
    @Test
    public void colorTest() {
        // TODO: test color
    }

    /**
     * Test the property 'colorBackground'
     */
    @Test
    public void colorBackgroundTest() {
        // TODO: test colorBackground
    }

    /**
     * Test the property 'colorValue'
     */
    @Test
    public void colorValueTest() {
        // TODO: test colorValue
    }

    /**
     * Test the property 'colors'
     */
    @Test
    public void colorsTest() {
        // TODO: test colors
    }

    /**
     * Test the property 'columns'
     */
    @Test
    public void columnsTest() {
        // TODO: test columns
    }

    /**
     * Test the property 'content'
     */
    @Test
    public void contentTest() {
        // TODO: test content
    }

    /**
     * Test the property 'dashLength'
     */
    @Test
    public void dashLengthTest() {
        // TODO: test dashLength
    }

    /**
     * Test the property 'dashboardTags'
     */
    @Test
    public void dashboardTagsTest() {
        // TODO: test dashboardTags
    }

    /**
     * Test the property 'dashes'
     */
    @Test
    public void dashesTest() {
        // TODO: test dashes
    }

    /**
     * Test the property 'dataFormat'
     */
    @Test
    public void dataFormatTest() {
        // TODO: test dataFormat
    }

    /**
     * Test the property 'datasource'
     */
    @Test
    public void datasourceTest() {
        // TODO: test datasource
    }

    /**
     * Test the property 'decimals'
     */
    @Test
    public void decimalsTest() {
        // TODO: test decimals
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'editable'
     */
    @Test
    public void editableTest() {
        // TODO: test editable
    }

    /**
     * Test the property 'error'
     */
    @Test
    public void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'fieldConfig'
     */
    @Test
    public void fieldConfigTest() {
        // TODO: test fieldConfig
    }

    /**
     * Test the property 'fill'
     */
    @Test
    public void fillTest() {
        // TODO: test fill
    }

    /**
     * Test the property 'folderId'
     */
    @Test
    public void folderIdTest() {
        // TODO: test folderId
    }

    /**
     * Test the property 'format'
     */
    @Test
    public void formatTest() {
        // TODO: test format
    }

    /**
     * Test the property 'gauge'
     */
    @Test
    public void gaugeTest() {
        // TODO: test gauge
    }

    /**
     * Test the property 'gridPos'
     */
    @Test
    public void gridPosTest() {
        // TODO: test gridPos
    }

    /**
     * Test the property 'headings'
     */
    @Test
    public void headingsTest() {
        // TODO: test headings
    }

    /**
     * Test the property 'height'
     */
    @Test
    public void heightTest() {
        // TODO: test height
    }

    /**
     * Test the property 'hideTimeOverride'
     */
    @Test
    public void hideTimeOverrideTest() {
        // TODO: test hideTimeOverride
    }

    /**
     * Test the property 'hideZeroBuckets'
     */
    @Test
    public void hideZeroBucketsTest() {
        // TODO: test hideZeroBuckets
    }

    /**
     * Test the property 'highlightCards'
     */
    @Test
    public void highlightCardsTest() {
        // TODO: test highlightCards
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isNew'
     */
    @Test
    public void isNewTest() {
        // TODO: test isNew
    }

    /**
     * Test the property 'leftYAxisLabel'
     */
    @Test
    public void leftYAxisLabelTest() {
        // TODO: test leftYAxisLabel
    }

    /**
     * Test the property 'legend'
     */
    @Test
    public void legendTest() {
        // TODO: test legend
    }

    /**
     * Test the property 'limit'
     */
    @Test
    public void limitTest() {
        // TODO: test limit
    }

    /**
     * Test the property 'lines'
     */
    @Test
    public void linesTest() {
        // TODO: test lines
    }

    /**
     * Test the property 'linewidth'
     */
    @Test
    public void linewidthTest() {
        // TODO: test linewidth
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'mappingType'
     */
    @Test
    public void mappingTypeTest() {
        // TODO: test mappingType
    }

    /**
     * Test the property 'mappingTypes'
     */
    @Test
    public void mappingTypesTest() {
        // TODO: test mappingTypes
    }

    /**
     * Test the property 'maxDataPoints'
     */
    @Test
    public void maxDataPointsTest() {
        // TODO: test maxDataPoints
    }

    /**
     * Test the property 'minSpan'
     */
    @Test
    public void minSpanTest() {
        // TODO: test minSpan
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        // TODO: test mode
    }

    /**
     * Test the property 'nameFilter'
     */
    @Test
    public void nameFilterTest() {
        // TODO: test nameFilter
    }

    /**
     * Test the property 'nullPointMode'
     */
    @Test
    public void nullPointModeTest() {
        // TODO: test nullPointMode
    }

    /**
     * Test the property 'onlyAlertsOnDashboard'
     */
    @Test
    public void onlyAlertsOnDashboardTest() {
        // TODO: test onlyAlertsOnDashboard
    }

    /**
     * Test the property 'options'
     */
    @Test
    public void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'pageSize'
     */
    @Test
    public void pageSizeTest() {
        // TODO: test pageSize
    }

    /**
     * Test the property 'panels'
     */
    @Test
    public void panelsTest() {
        // TODO: test panels
    }

    /**
     * Test the property 'percentage'
     */
    @Test
    public void percentageTest() {
        // TODO: test percentage
    }

    /**
     * Test the property 'pointradius'
     */
    @Test
    public void pointradiusTest() {
        // TODO: test pointradius
    }

    /**
     * Test the property 'points'
     */
    @Test
    public void pointsTest() {
        // TODO: test points
    }

    /**
     * Test the property 'postfix'
     */
    @Test
    public void postfixTest() {
        // TODO: test postfix
    }

    /**
     * Test the property 'postfixFontSize'
     */
    @Test
    public void postfixFontSizeTest() {
        // TODO: test postfixFontSize
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'prefixFontSize'
     */
    @Test
    public void prefixFontSizeTest() {
        // TODO: test prefixFontSize
    }

    /**
     * Test the property 'query'
     */
    @Test
    public void queryTest() {
        // TODO: test query
    }

    /**
     * Test the property 'rangeMaps'
     */
    @Test
    public void rangeMapsTest() {
        // TODO: test rangeMaps
    }

    /**
     * Test the property 'recent'
     */
    @Test
    public void recentTest() {
        // TODO: test recent
    }

    /**
     * Test the property 'renderer'
     */
    @Test
    public void rendererTest() {
        // TODO: test renderer
    }

    /**
     * Test the property 'repeat'
     */
    @Test
    public void repeatTest() {
        // TODO: test repeat
    }

    /**
     * Test the property 'repeatPanelId'
     */
    @Test
    public void repeatPanelIdTest() {
        // TODO: test repeatPanelId
    }

    /**
     * Test the property 'reverseYBuckets'
     */
    @Test
    public void reverseYBucketsTest() {
        // TODO: test reverseYBuckets
    }

    /**
     * Test the property 'rightYAxisLabel'
     */
    @Test
    public void rightYAxisLabelTest() {
        // TODO: test rightYAxisLabel
    }

    /**
     * Test the property 'scopedVars'
     */
    @Test
    public void scopedVarsTest() {
        // TODO: test scopedVars
    }

    /**
     * Test the property 'scroll'
     */
    @Test
    public void scrollTest() {
        // TODO: test scroll
    }

    /**
     * Test the property 'search'
     */
    @Test
    public void searchTest() {
        // TODO: test search
    }

    /**
     * Test the property 'seriesOverrides'
     */
    @Test
    public void seriesOverridesTest() {
        // TODO: test seriesOverrides
    }

    /**
     * Test the property 'show'
     */
    @Test
    public void showTest() {
        // TODO: test show
    }

    /**
     * Test the property 'showHeader'
     */
    @Test
    public void showHeaderTest() {
        // TODO: test showHeader
    }

    /**
     * Test the property 'sort'
     */
    @Test
    public void sortTest() {
        // TODO: test sort
    }

    /**
     * Test the property 'sortOrder'
     */
    @Test
    public void sortOrderTest() {
        // TODO: test sortOrder
    }

    /**
     * Test the property 'spaceLength'
     */
    @Test
    public void spaceLengthTest() {
        // TODO: test spaceLength
    }

    /**
     * Test the property 'span'
     */
    @Test
    public void spanTest() {
        // TODO: test span
    }

    /**
     * Test the property 'sparkline'
     */
    @Test
    public void sparklineTest() {
        // TODO: test sparkline
    }

    /**
     * Test the property 'stack'
     */
    @Test
    public void stackTest() {
        // TODO: test stack
    }

    /**
     * Test the property 'starred'
     */
    @Test
    public void starredTest() {
        // TODO: test starred
    }

    /**
     * Test the property 'stateFilter'
     */
    @Test
    public void stateFilterTest() {
        // TODO: test stateFilter
    }

    /**
     * Test the property 'steppedLine'
     */
    @Test
    public void steppedLineTest() {
        // TODO: test steppedLine
    }

    /**
     * Test the property 'styles'
     */
    @Test
    public void stylesTest() {
        // TODO: test styles
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'targets'
     */
    @Test
    public void targetsTest() {
        // TODO: test targets
    }

    /**
     * Test the property 'thresholds'
     */
    @Test
    public void thresholdsTest() {
        // TODO: test thresholds
    }

    /**
     * Test the property 'timeFrom'
     */
    @Test
    public void timeFromTest() {
        // TODO: test timeFrom
    }

    /**
     * Test the property 'timeShift'
     */
    @Test
    public void timeShiftTest() {
        // TODO: test timeShift
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'tooltip'
     */
    @Test
    public void tooltipTest() {
        // TODO: test tooltip
    }

    /**
     * Test the property 'tooltipDecimals'
     */
    @Test
    public void tooltipDecimalsTest() {
        // TODO: test tooltipDecimals
    }

    /**
     * Test the property 'transform'
     */
    @Test
    public void transformTest() {
        // TODO: test transform
    }

    /**
     * Test the property 'transparent'
     */
    @Test
    public void transparentTest() {
        // TODO: test transparent
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'valueFontSize'
     */
    @Test
    public void valueFontSizeTest() {
        // TODO: test valueFontSize
    }

    /**
     * Test the property 'valueMaps'
     */
    @Test
    public void valueMapsTest() {
        // TODO: test valueMaps
    }

    /**
     * Test the property 'valueName'
     */
    @Test
    public void valueNameTest() {
        // TODO: test valueName
    }

    /**
     * Test the property 'xAxis'
     */
    @Test
    public void xAxisTest() {
        // TODO: test xAxis
    }

    /**
     * Test the property 'xAxis'
     */
    @Test
    public void xAxisTest() {
        // TODO: test xAxis
    }

    /**
     * Test the property 'xBucketNumber'
     */
    @Test
    public void xBucketNumberTest() {
        // TODO: test xBucketNumber
    }

    /**
     * Test the property 'xBucketSize'
     */
    @Test
    public void xBucketSizeTest() {
        // TODO: test xBucketSize
    }

    /**
     * Test the property 'xaxis'
     */
    @Test
    public void xaxisTest() {
        // TODO: test xaxis
    }

    /**
     * Test the property 'yAxis'
     */
    @Test
    public void yAxisTest() {
        // TODO: test yAxis
    }

    /**
     * Test the property 'yAxis'
     */
    @Test
    public void yAxisTest() {
        // TODO: test yAxis
    }

    /**
     * Test the property 'yBucketBound'
     */
    @Test
    public void yBucketBoundTest() {
        // TODO: test yBucketBound
    }

    /**
     * Test the property 'yBucketNumber'
     */
    @Test
    public void yBucketNumberTest() {
        // TODO: test yBucketNumber
    }

    /**
     * Test the property 'yBucketSize'
     */
    @Test
    public void yBucketSizeTest() {
        // TODO: test yBucketSize
    }

    /**
     * Test the property 'yFormats'
     */
    @Test
    public void yFormatsTest() {
        // TODO: test yFormats
    }

    /**
     * Test the property 'yaxes'
     */
    @Test
    public void yaxesTest() {
        // TODO: test yaxes
    }

}
