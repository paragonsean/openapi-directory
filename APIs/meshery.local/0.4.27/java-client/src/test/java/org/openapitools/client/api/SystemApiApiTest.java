/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Adapter;
import org.openapitools.client.model.K8SConfig;
import org.openapitools.client.model.K8SContext;
import org.openapitools.client.model.Preference;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.Version;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemApiApi
 */
@Disabled
public class SystemApiApiTest {

    private final SystemApiApi api = new SystemApiApi();

    /**
     * Handle DELETE requests to delete adapter config
     *
     * Used to delete adapter configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteAdapterConfigTest() throws ApiException {
        String adapter = null;
        api.idDeleteAdapterConfig(adapter);
        // TODO: test validations
    }

    /**
     * Handle DELETE request for Kubernetes Config
     *
     * Used to delete kubernetes config to System
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idDeleteK8SConfigTest() throws ApiException {
        api.idDeleteK8SConfig();
        // TODO: test validations
    }

    /**
     * Handle GET request for Kubernetes ping
     *
     * Fetches server version to simulate ping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetKubernetesPingTest() throws ApiException {
        api.idGetKubernetesPing();
        // TODO: test validations
    }

    /**
     * Handle GET request for adapters
     *
     * Fetches and returns all the adapters and ping adapters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetSystemAdaptersTest() throws ApiException {
        String adapter = null;
        List<Adapter> response = api.idGetSystemAdapters(adapter);
        // TODO: test validations
    }

    /**
     * Handle GET request for system/server version
     *
     * Returns the running Meshery version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetSystemVersionTest() throws ApiException {
        Version response = api.idGetSystemVersion();
        // TODO: test validations
    }

    /**
     * Handle GET request for mesh-sync grafana
     *
     * Fetches Prometheus and Grafana
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idMeshSyncGrafanaTest() throws ApiException {
        Map<String, List<Service>> response = api.idMeshSyncGrafana();
        // TODO: test validations
    }

    /**
     * Handle GET request for fetching prometheus
     *
     * Fetches Prometheus
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idMeshSyncPrometheusTest() throws ApiException {
        Map<String, List<Service>> response = api.idMeshSyncPrometheus();
        // TODO: test validations
    }

    /**
     * Handle POST requests to persist adapter config
     *
     * Used to persist adapter config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostAdapterConfigTest() throws ApiException {
        String body = null;
        List<Adapter> response = api.idPostAdapterConfig(body);
        // TODO: test validations
    }

    /**
     * Handle POST requests for Adapter Operations
     *
     * Used to send operations to the adapters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostAdapterOperationTest() throws ApiException {
        String adapter = null;
        String query = null;
        String customBody = null;
        String namespace = null;
        String deleteOp = null;
        api.idPostAdapterOperation(adapter, query, customBody, namespace, deleteOp);
        // TODO: test validations
    }

    /**
     * Handle POST request for Kubernetes Config
     *
     * Used to add kubernetes config to System
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostK8SConfigTest() throws ApiException {
        K8SConfig response = api.idPostK8SConfig();
        // TODO: test validations
    }

    /**
     * Handle POST requests for Kubernetes Context list
     *
     * Returns the context list for a given k8s config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idPostK8SContextsTest() throws ApiException {
        List<K8SContext> response = api.idPostK8SContexts();
        // TODO: test validations
    }

    /**
     * Handle GET request for config sync
     *
     * Used to send session data to the UI for initial sync
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idSystemSyncTest() throws ApiException {
        Preference response = api.idSystemSync();
        // TODO: test validations
    }

}
