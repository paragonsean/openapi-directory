/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RunnerResultsDurationHistogramPercentilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunnerResultsDurationHistogram
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunnerResultsDurationHistogram {
  public static final String SERIALIZED_NAME_AVG = "Avg";
  @SerializedName(SERIALIZED_NAME_AVG)
  private Double avg;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_PERCENTILES = "Percentiles";
  @SerializedName(SERIALIZED_NAME_PERCENTILES)
  private List<RunnerResultsDurationHistogramPercentilesInner> percentiles = new ArrayList<>();

  public RunnerResultsDurationHistogram() {
  }

  public RunnerResultsDurationHistogram avg(Double avg) {
    this.avg = avg;
    return this;
  }

  /**
   * Get avg
   * @return avg
   */
  @javax.annotation.Nullable
  public Double getAvg() {
    return avg;
  }

  public void setAvg(Double avg) {
    this.avg = avg;
  }


  public RunnerResultsDurationHistogram max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public RunnerResultsDurationHistogram min(Double min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }


  public RunnerResultsDurationHistogram percentiles(List<RunnerResultsDurationHistogramPercentilesInner> percentiles) {
    this.percentiles = percentiles;
    return this;
  }

  public RunnerResultsDurationHistogram addPercentilesItem(RunnerResultsDurationHistogramPercentilesInner percentilesItem) {
    if (this.percentiles == null) {
      this.percentiles = new ArrayList<>();
    }
    this.percentiles.add(percentilesItem);
    return this;
  }

  /**
   * Get percentiles
   * @return percentiles
   */
  @javax.annotation.Nullable
  public List<RunnerResultsDurationHistogramPercentilesInner> getPercentiles() {
    return percentiles;
  }

  public void setPercentiles(List<RunnerResultsDurationHistogramPercentilesInner> percentiles) {
    this.percentiles = percentiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnerResultsDurationHistogram runnerResultsDurationHistogram = (RunnerResultsDurationHistogram) o;
    return Objects.equals(this.avg, runnerResultsDurationHistogram.avg) &&
        Objects.equals(this.max, runnerResultsDurationHistogram.max) &&
        Objects.equals(this.min, runnerResultsDurationHistogram.min) &&
        Objects.equals(this.percentiles, runnerResultsDurationHistogram.percentiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avg, max, min, percentiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnerResultsDurationHistogram {\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    percentiles: ").append(toIndentedString(percentiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Avg");
    openapiFields.add("Max");
    openapiFields.add("Min");
    openapiFields.add("Percentiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunnerResultsDurationHistogram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunnerResultsDurationHistogram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunnerResultsDurationHistogram is not found in the empty JSON string", RunnerResultsDurationHistogram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunnerResultsDurationHistogram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunnerResultsDurationHistogram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Percentiles") != null && !jsonObj.get("Percentiles").isJsonNull()) {
        JsonArray jsonArraypercentiles = jsonObj.getAsJsonArray("Percentiles");
        if (jsonArraypercentiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Percentiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Percentiles` to be an array in the JSON string but got `%s`", jsonObj.get("Percentiles").toString()));
          }

          // validate the optional field `Percentiles` (array)
          for (int i = 0; i < jsonArraypercentiles.size(); i++) {
            RunnerResultsDurationHistogramPercentilesInner.validateJsonElement(jsonArraypercentiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunnerResultsDurationHistogram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunnerResultsDurationHistogram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunnerResultsDurationHistogram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunnerResultsDurationHistogram.class));

       return (TypeAdapter<T>) new TypeAdapter<RunnerResultsDurationHistogram>() {
           @Override
           public void write(JsonWriter out, RunnerResultsDurationHistogram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunnerResultsDurationHistogram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunnerResultsDurationHistogram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunnerResultsDurationHistogram
   * @throws IOException if the JSON string is invalid with respect to RunnerResultsDurationHistogram
   */
  public static RunnerResultsDurationHistogram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunnerResultsDurationHistogram.class);
  }

  /**
   * Convert an instance of RunnerResultsDurationHistogram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

