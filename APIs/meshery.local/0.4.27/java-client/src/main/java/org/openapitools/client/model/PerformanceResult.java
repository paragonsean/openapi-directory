/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RunnerResults;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceResult represents the result of a performance test
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceResult {
  public static final String SERIALIZED_NAME_MESH = "mesh";
  @SerializedName(SERIALIZED_NAME_MESH)
  private String mesh;

  public static final String SERIALIZED_NAME_MESHERY_ID = "meshery_id";
  @SerializedName(SERIALIZED_NAME_MESHERY_ID)
  private List<Integer> mesheryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERFORMANCE_PROFILE = "performance_profile";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_PROFILE)
  private List<Integer> performanceProfile = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNNER_RESULTS = "runner_results";
  @SerializedName(SERIALIZED_NAME_RUNNER_RESULTS)
  private RunnerResults runnerResults;

  public static final String SERIALIZED_NAME_SERVER_BOARD_CONFIG = "server_board_config";
  @SerializedName(SERIALIZED_NAME_SERVER_BOARD_CONFIG)
  private Object serverBoardConfig;

  public static final String SERIALIZED_NAME_SERVER_METRICS = "server_metrics";
  @SerializedName(SERIALIZED_NAME_SERVER_METRICS)
  private Object serverMetrics;

  public static final String SERIALIZED_NAME_TEST_START_TIME = "test_start_time";
  @SerializedName(SERIALIZED_NAME_TEST_START_TIME)
  private OffsetDateTime testStartTime;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private List<Integer> userId = new ArrayList<>();

  public PerformanceResult() {
  }

  public PerformanceResult mesh(String mesh) {
    this.mesh = mesh;
    return this;
  }

  /**
   * Get mesh
   * @return mesh
   */
  @javax.annotation.Nullable
  public String getMesh() {
    return mesh;
  }

  public void setMesh(String mesh) {
    this.mesh = mesh;
  }


  public PerformanceResult mesheryId(List<Integer> mesheryId) {
    this.mesheryId = mesheryId;
    return this;
  }

  public PerformanceResult addMesheryIdItem(Integer mesheryIdItem) {
    if (this.mesheryId == null) {
      this.mesheryId = new ArrayList<>();
    }
    this.mesheryId.add(mesheryIdItem);
    return this;
  }

  /**
   * Get mesheryId
   * @return mesheryId
   */
  @javax.annotation.Nullable
  public List<Integer> getMesheryId() {
    return mesheryId;
  }

  public void setMesheryId(List<Integer> mesheryId) {
    this.mesheryId = mesheryId;
  }


  public PerformanceResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PerformanceResult performanceProfile(List<Integer> performanceProfile) {
    this.performanceProfile = performanceProfile;
    return this;
  }

  public PerformanceResult addPerformanceProfileItem(Integer performanceProfileItem) {
    if (this.performanceProfile == null) {
      this.performanceProfile = new ArrayList<>();
    }
    this.performanceProfile.add(performanceProfileItem);
    return this;
  }

  /**
   * Get performanceProfile
   * @return performanceProfile
   */
  @javax.annotation.Nullable
  public List<Integer> getPerformanceProfile() {
    return performanceProfile;
  }

  public void setPerformanceProfile(List<Integer> performanceProfile) {
    this.performanceProfile = performanceProfile;
  }


  public PerformanceResult runnerResults(RunnerResults runnerResults) {
    this.runnerResults = runnerResults;
    return this;
  }

  /**
   * Get runnerResults
   * @return runnerResults
   */
  @javax.annotation.Nullable
  public RunnerResults getRunnerResults() {
    return runnerResults;
  }

  public void setRunnerResults(RunnerResults runnerResults) {
    this.runnerResults = runnerResults;
  }


  public PerformanceResult serverBoardConfig(Object serverBoardConfig) {
    this.serverBoardConfig = serverBoardConfig;
    return this;
  }

  /**
   * Get serverBoardConfig
   * @return serverBoardConfig
   */
  @javax.annotation.Nullable
  public Object getServerBoardConfig() {
    return serverBoardConfig;
  }

  public void setServerBoardConfig(Object serverBoardConfig) {
    this.serverBoardConfig = serverBoardConfig;
  }


  public PerformanceResult serverMetrics(Object serverMetrics) {
    this.serverMetrics = serverMetrics;
    return this;
  }

  /**
   * Get serverMetrics
   * @return serverMetrics
   */
  @javax.annotation.Nullable
  public Object getServerMetrics() {
    return serverMetrics;
  }

  public void setServerMetrics(Object serverMetrics) {
    this.serverMetrics = serverMetrics;
  }


  public PerformanceResult testStartTime(OffsetDateTime testStartTime) {
    this.testStartTime = testStartTime;
    return this;
  }

  /**
   * Get testStartTime
   * @return testStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTestStartTime() {
    return testStartTime;
  }

  public void setTestStartTime(OffsetDateTime testStartTime) {
    this.testStartTime = testStartTime;
  }


  public PerformanceResult userId(List<Integer> userId) {
    this.userId = userId;
    return this;
  }

  public PerformanceResult addUserIdItem(Integer userIdItem) {
    if (this.userId == null) {
      this.userId = new ArrayList<>();
    }
    this.userId.add(userIdItem);
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public List<Integer> getUserId() {
    return userId;
  }

  public void setUserId(List<Integer> userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceResult performanceResult = (PerformanceResult) o;
    return Objects.equals(this.mesh, performanceResult.mesh) &&
        Objects.equals(this.mesheryId, performanceResult.mesheryId) &&
        Objects.equals(this.name, performanceResult.name) &&
        Objects.equals(this.performanceProfile, performanceResult.performanceProfile) &&
        Objects.equals(this.runnerResults, performanceResult.runnerResults) &&
        Objects.equals(this.serverBoardConfig, performanceResult.serverBoardConfig) &&
        Objects.equals(this.serverMetrics, performanceResult.serverMetrics) &&
        Objects.equals(this.testStartTime, performanceResult.testStartTime) &&
        Objects.equals(this.userId, performanceResult.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mesh, mesheryId, name, performanceProfile, runnerResults, serverBoardConfig, serverMetrics, testStartTime, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceResult {\n");
    sb.append("    mesh: ").append(toIndentedString(mesh)).append("\n");
    sb.append("    mesheryId: ").append(toIndentedString(mesheryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    performanceProfile: ").append(toIndentedString(performanceProfile)).append("\n");
    sb.append("    runnerResults: ").append(toIndentedString(runnerResults)).append("\n");
    sb.append("    serverBoardConfig: ").append(toIndentedString(serverBoardConfig)).append("\n");
    sb.append("    serverMetrics: ").append(toIndentedString(serverMetrics)).append("\n");
    sb.append("    testStartTime: ").append(toIndentedString(testStartTime)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mesh");
    openapiFields.add("meshery_id");
    openapiFields.add("name");
    openapiFields.add("performance_profile");
    openapiFields.add("runner_results");
    openapiFields.add("server_board_config");
    openapiFields.add("server_metrics");
    openapiFields.add("test_start_time");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceResult is not found in the empty JSON string", PerformanceResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mesh") != null && !jsonObj.get("mesh").isJsonNull()) && !jsonObj.get("mesh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mesh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mesh").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meshery_id") != null && !jsonObj.get("meshery_id").isJsonNull() && !jsonObj.get("meshery_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meshery_id` to be an array in the JSON string but got `%s`", jsonObj.get("meshery_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("performance_profile") != null && !jsonObj.get("performance_profile").isJsonNull() && !jsonObj.get("performance_profile").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `performance_profile` to be an array in the JSON string but got `%s`", jsonObj.get("performance_profile").toString()));
      }
      // validate the optional field `runner_results`
      if (jsonObj.get("runner_results") != null && !jsonObj.get("runner_results").isJsonNull()) {
        RunnerResults.validateJsonElement(jsonObj.get("runner_results"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull() && !jsonObj.get("user_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be an array in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceResult>() {
           @Override
           public void write(JsonWriter out, PerformanceResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceResult
   * @throws IOException if the JSON string is invalid with respect to PerformanceResult
   */
  public static PerformanceResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceResult.class);
  }

  /**
   * Convert an instance of PerformanceResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

