/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.Extensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProviderProperties represents the structure of properties that a provider has
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderProperties {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<Capability> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private Extensions extensions;

  public static final String SERIALIZED_NAME_PACKAGE_URL = "package_url";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URL)
  private String packageUrl;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "package_version";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public static final String SERIALIZED_NAME_PROVIDER_DESCRIPTION = "provider_description";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DESCRIPTION)
  private List<String> providerDescription = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "provider_name";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private String providerType;

  public static final String SERIALIZED_NAME_PROVIDER_URL = "provider_url";
  @SerializedName(SERIALIZED_NAME_PROVIDER_URL)
  private String providerUrl;

  public ProviderProperties() {
  }

  public ProviderProperties capabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public ProviderProperties addCapabilitiesItem(Capability capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * Capabilities is the collection of capability
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<Capability> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
  }


  public ProviderProperties extensions(Extensions extensions) {
    this.extensions = extensions;
    return this;
  }

  /**
   * Get extensions
   * @return extensions
   */
  @javax.annotation.Nullable
  public Extensions getExtensions() {
    return extensions;
  }

  public void setExtensions(Extensions extensions) {
    this.extensions = extensions;
  }


  public ProviderProperties packageUrl(String packageUrl) {
    this.packageUrl = packageUrl;
    return this;
  }

  /**
   * Get packageUrl
   * @return packageUrl
   */
  @javax.annotation.Nullable
  public String getPackageUrl() {
    return packageUrl;
  }

  public void setPackageUrl(String packageUrl) {
    this.packageUrl = packageUrl;
  }


  public ProviderProperties packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * Get packageVersion
   * @return packageVersion
   */
  @javax.annotation.Nullable
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }


  public ProviderProperties providerDescription(List<String> providerDescription) {
    this.providerDescription = providerDescription;
    return this;
  }

  public ProviderProperties addProviderDescriptionItem(String providerDescriptionItem) {
    if (this.providerDescription == null) {
      this.providerDescription = new ArrayList<>();
    }
    this.providerDescription.add(providerDescriptionItem);
    return this;
  }

  /**
   * Get providerDescription
   * @return providerDescription
   */
  @javax.annotation.Nullable
  public List<String> getProviderDescription() {
    return providerDescription;
  }

  public void setProviderDescription(List<String> providerDescription) {
    this.providerDescription = providerDescription;
  }


  public ProviderProperties providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Get providerName
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public ProviderProperties providerType(String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * ProviderType - for representing provider types
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(String providerType) {
    this.providerType = providerType;
  }


  public ProviderProperties providerUrl(String providerUrl) {
    this.providerUrl = providerUrl;
    return this;
  }

  /**
   * Get providerUrl
   * @return providerUrl
   */
  @javax.annotation.Nullable
  public String getProviderUrl() {
    return providerUrl;
  }

  public void setProviderUrl(String providerUrl) {
    this.providerUrl = providerUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderProperties providerProperties = (ProviderProperties) o;
    return Objects.equals(this.capabilities, providerProperties.capabilities) &&
        Objects.equals(this.extensions, providerProperties.extensions) &&
        Objects.equals(this.packageUrl, providerProperties.packageUrl) &&
        Objects.equals(this.packageVersion, providerProperties.packageVersion) &&
        Objects.equals(this.providerDescription, providerProperties.providerDescription) &&
        Objects.equals(this.providerName, providerProperties.providerName) &&
        Objects.equals(this.providerType, providerProperties.providerType) &&
        Objects.equals(this.providerUrl, providerProperties.providerUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, extensions, packageUrl, packageVersion, providerDescription, providerName, providerType, providerUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderProperties {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    packageUrl: ").append(toIndentedString(packageUrl)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    providerDescription: ").append(toIndentedString(providerDescription)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    providerUrl: ").append(toIndentedString(providerUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("extensions");
    openapiFields.add("package_url");
    openapiFields.add("package_version");
    openapiFields.add("provider_description");
    openapiFields.add("provider_name");
    openapiFields.add("provider_type");
    openapiFields.add("provider_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderProperties is not found in the empty JSON string", ProviderProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        JsonArray jsonArraycapabilities = jsonObj.getAsJsonArray("capabilities");
        if (jsonArraycapabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
          }

          // validate the optional field `capabilities` (array)
          for (int i = 0; i < jsonArraycapabilities.size(); i++) {
            Capability.validateJsonElement(jsonArraycapabilities.get(i));
          };
        }
      }
      // validate the optional field `extensions`
      if (jsonObj.get("extensions") != null && !jsonObj.get("extensions").isJsonNull()) {
        Extensions.validateJsonElement(jsonObj.get("extensions"));
      }
      if ((jsonObj.get("package_url") != null && !jsonObj.get("package_url").isJsonNull()) && !jsonObj.get("package_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_url").toString()));
      }
      if ((jsonObj.get("package_version") != null && !jsonObj.get("package_version").isJsonNull()) && !jsonObj.get("package_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("provider_description") != null && !jsonObj.get("provider_description").isJsonNull() && !jsonObj.get("provider_description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_description` to be an array in the JSON string but got `%s`", jsonObj.get("provider_description").toString()));
      }
      if ((jsonObj.get("provider_name") != null && !jsonObj.get("provider_name").isJsonNull()) && !jsonObj.get("provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_name").toString()));
      }
      if ((jsonObj.get("provider_type") != null && !jsonObj.get("provider_type").isJsonNull()) && !jsonObj.get("provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_type").toString()));
      }
      if ((jsonObj.get("provider_url") != null && !jsonObj.get("provider_url").isJsonNull()) && !jsonObj.get("provider_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderProperties>() {
           @Override
           public void write(JsonWriter out, ProviderProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderProperties
   * @throws IOException if the JSON string is invalid with respect to ProviderProperties
   */
  public static ProviderProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderProperties.class);
  }

  /**
   * Convert an instance of ProviderProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

