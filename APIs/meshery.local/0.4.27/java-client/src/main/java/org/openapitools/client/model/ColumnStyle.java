/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ValueMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * for a table
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnStyle {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_COLOR_MODE = "colorMode";
  @SerializedName(SERIALIZED_NAME_COLOR_MODE)
  private String colorMode;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private Integer decimals;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private Boolean link;

  public static final String SERIALIZED_NAME_LINK_TARGET_BLANK = "linkTargetBlank";
  @SerializedName(SERIALIZED_NAME_LINK_TARGET_BLANK)
  private Boolean linkTargetBlank;

  public static final String SERIALIZED_NAME_LINK_TOOLTIP = "linkTooltip";
  @SerializedName(SERIALIZED_NAME_LINK_TOOLTIP)
  private String linkTooltip;

  public static final String SERIALIZED_NAME_LINK_URL = "linkUrl";
  @SerializedName(SERIALIZED_NAME_LINK_URL)
  private String linkUrl;

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "mappingType";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private Long mappingType;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  private List<String> thresholds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_VALUE_MAPS = "valueMaps";
  @SerializedName(SERIALIZED_NAME_VALUE_MAPS)
  private List<ValueMap> valueMaps = new ArrayList<>();

  public ColumnStyle() {
  }

  public ColumnStyle alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public ColumnStyle colorMode(String colorMode) {
    this.colorMode = colorMode;
    return this;
  }

  /**
   * Get colorMode
   * @return colorMode
   */
  @javax.annotation.Nullable
  public String getColorMode() {
    return colorMode;
  }

  public void setColorMode(String colorMode) {
    this.colorMode = colorMode;
  }


  public ColumnStyle colors(List<String> colors) {
    this.colors = colors;
    return this;
  }

  public ColumnStyle addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Get colors
   * @return colors
   */
  @javax.annotation.Nullable
  public List<String> getColors() {
    return colors;
  }

  public void setColors(List<String> colors) {
    this.colors = colors;
  }


  public ColumnStyle dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public ColumnStyle decimals(Integer decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Get decimals
   * @return decimals
   */
  @javax.annotation.Nullable
  public Integer getDecimals() {
    return decimals;
  }

  public void setDecimals(Integer decimals) {
    this.decimals = decimals;
  }


  public ColumnStyle link(Boolean link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public Boolean getLink() {
    return link;
  }

  public void setLink(Boolean link) {
    this.link = link;
  }


  public ColumnStyle linkTargetBlank(Boolean linkTargetBlank) {
    this.linkTargetBlank = linkTargetBlank;
    return this;
  }

  /**
   * Get linkTargetBlank
   * @return linkTargetBlank
   */
  @javax.annotation.Nullable
  public Boolean getLinkTargetBlank() {
    return linkTargetBlank;
  }

  public void setLinkTargetBlank(Boolean linkTargetBlank) {
    this.linkTargetBlank = linkTargetBlank;
  }


  public ColumnStyle linkTooltip(String linkTooltip) {
    this.linkTooltip = linkTooltip;
    return this;
  }

  /**
   * Get linkTooltip
   * @return linkTooltip
   */
  @javax.annotation.Nullable
  public String getLinkTooltip() {
    return linkTooltip;
  }

  public void setLinkTooltip(String linkTooltip) {
    this.linkTooltip = linkTooltip;
  }


  public ColumnStyle linkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
    return this;
  }

  /**
   * Get linkUrl
   * @return linkUrl
   */
  @javax.annotation.Nullable
  public String getLinkUrl() {
    return linkUrl;
  }

  public void setLinkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
  }


  public ColumnStyle mappingType(Long mappingType) {
    this.mappingType = mappingType;
    return this;
  }

  /**
   * Get mappingType
   * @return mappingType
   */
  @javax.annotation.Nullable
  public Long getMappingType() {
    return mappingType;
  }

  public void setMappingType(Long mappingType) {
    this.mappingType = mappingType;
  }


  public ColumnStyle pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * Get pattern
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public ColumnStyle thresholds(List<String> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public ColumnStyle addThresholdsItem(String thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

  /**
   * Get thresholds
   * @return thresholds
   */
  @javax.annotation.Nullable
  public List<String> getThresholds() {
    return thresholds;
  }

  public void setThresholds(List<String> thresholds) {
    this.thresholds = thresholds;
  }


  public ColumnStyle type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ColumnStyle unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public ColumnStyle valueMaps(List<ValueMap> valueMaps) {
    this.valueMaps = valueMaps;
    return this;
  }

  public ColumnStyle addValueMapsItem(ValueMap valueMapsItem) {
    if (this.valueMaps == null) {
      this.valueMaps = new ArrayList<>();
    }
    this.valueMaps.add(valueMapsItem);
    return this;
  }

  /**
   * Get valueMaps
   * @return valueMaps
   */
  @javax.annotation.Nullable
  public List<ValueMap> getValueMaps() {
    return valueMaps;
  }

  public void setValueMaps(List<ValueMap> valueMaps) {
    this.valueMaps = valueMaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnStyle columnStyle = (ColumnStyle) o;
    return Objects.equals(this.alias, columnStyle.alias) &&
        Objects.equals(this.colorMode, columnStyle.colorMode) &&
        Objects.equals(this.colors, columnStyle.colors) &&
        Objects.equals(this.dateFormat, columnStyle.dateFormat) &&
        Objects.equals(this.decimals, columnStyle.decimals) &&
        Objects.equals(this.link, columnStyle.link) &&
        Objects.equals(this.linkTargetBlank, columnStyle.linkTargetBlank) &&
        Objects.equals(this.linkTooltip, columnStyle.linkTooltip) &&
        Objects.equals(this.linkUrl, columnStyle.linkUrl) &&
        Objects.equals(this.mappingType, columnStyle.mappingType) &&
        Objects.equals(this.pattern, columnStyle.pattern) &&
        Objects.equals(this.thresholds, columnStyle.thresholds) &&
        Objects.equals(this.type, columnStyle.type) &&
        Objects.equals(this.unit, columnStyle.unit) &&
        Objects.equals(this.valueMaps, columnStyle.valueMaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, colorMode, colors, dateFormat, decimals, link, linkTargetBlank, linkTooltip, linkUrl, mappingType, pattern, thresholds, type, unit, valueMaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnStyle {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    colorMode: ").append(toIndentedString(colorMode)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkTargetBlank: ").append(toIndentedString(linkTargetBlank)).append("\n");
    sb.append("    linkTooltip: ").append(toIndentedString(linkTooltip)).append("\n");
    sb.append("    linkUrl: ").append(toIndentedString(linkUrl)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    valueMaps: ").append(toIndentedString(valueMaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alias");
    openapiFields.add("colorMode");
    openapiFields.add("colors");
    openapiFields.add("dateFormat");
    openapiFields.add("decimals");
    openapiFields.add("link");
    openapiFields.add("linkTargetBlank");
    openapiFields.add("linkTooltip");
    openapiFields.add("linkUrl");
    openapiFields.add("mappingType");
    openapiFields.add("pattern");
    openapiFields.add("thresholds");
    openapiFields.add("type");
    openapiFields.add("unit");
    openapiFields.add("valueMaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnStyle is not found in the empty JSON string", ColumnStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("colorMode") != null && !jsonObj.get("colorMode").isJsonNull()) && !jsonObj.get("colorMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorMode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull() && !jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
      if ((jsonObj.get("dateFormat") != null && !jsonObj.get("dateFormat").isJsonNull()) && !jsonObj.get("dateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFormat").toString()));
      }
      if ((jsonObj.get("linkTooltip") != null && !jsonObj.get("linkTooltip").isJsonNull()) && !jsonObj.get("linkTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkTooltip").toString()));
      }
      if ((jsonObj.get("linkUrl") != null && !jsonObj.get("linkUrl").isJsonNull()) && !jsonObj.get("linkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkUrl").toString()));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("thresholds") != null && !jsonObj.get("thresholds").isJsonNull() && !jsonObj.get("thresholds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `thresholds` to be an array in the JSON string but got `%s`", jsonObj.get("thresholds").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (jsonObj.get("valueMaps") != null && !jsonObj.get("valueMaps").isJsonNull()) {
        JsonArray jsonArrayvalueMaps = jsonObj.getAsJsonArray("valueMaps");
        if (jsonArrayvalueMaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueMaps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueMaps` to be an array in the JSON string but got `%s`", jsonObj.get("valueMaps").toString()));
          }

          // validate the optional field `valueMaps` (array)
          for (int i = 0; i < jsonArrayvalueMaps.size(); i++) {
            ValueMap.validateJsonElement(jsonArrayvalueMaps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnStyle>() {
           @Override
           public void write(JsonWriter out, ColumnStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnStyle
   * @throws IOException if the JSON string is invalid with respect to ColumnStyle
   */
  public static ColumnStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnStyle.class);
  }

  /**
   * Convert an instance of ColumnStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

