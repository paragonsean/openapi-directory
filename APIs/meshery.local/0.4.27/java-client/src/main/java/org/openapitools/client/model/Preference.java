/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Adapter;
import org.openapitools.client.model.Grafana;
import org.openapitools.client.model.K8SConfig;
import org.openapitools.client.model.LoadTestPreferences;
import org.openapitools.client.model.Prometheus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Preference represents the data stored in session / local DB
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Preference {
  public static final String SERIALIZED_NAME_ANONYMOUS_PERF_RESULTS = "anonymousPerfResults";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_PERF_RESULTS)
  private Boolean anonymousPerfResults;

  public static final String SERIALIZED_NAME_ANONYMOUS_USAGE_STATS = "anonymousUsageStats";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_USAGE_STATS)
  private Boolean anonymousUsageStats;

  public static final String SERIALIZED_NAME_GRAFANA = "grafana";
  @SerializedName(SERIALIZED_NAME_GRAFANA)
  private Grafana grafana;

  public static final String SERIALIZED_NAME_K8S_CONFIG = "k8sConfig";
  @SerializedName(SERIALIZED_NAME_K8S_CONFIG)
  private K8SConfig k8sConfig;

  public static final String SERIALIZED_NAME_LOAD_TEST_PREFS = "loadTestPrefs";
  @SerializedName(SERIALIZED_NAME_LOAD_TEST_PREFS)
  private LoadTestPreferences loadTestPrefs;

  public static final String SERIALIZED_NAME_MESH_ADAPTERS = "meshAdapters";
  @SerializedName(SERIALIZED_NAME_MESH_ADAPTERS)
  private List<Adapter> meshAdapters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMETHEUS = "prometheus";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS)
  private Prometheus prometheus;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Preference() {
  }

  public Preference anonymousPerfResults(Boolean anonymousPerfResults) {
    this.anonymousPerfResults = anonymousPerfResults;
    return this;
  }

  /**
   * Get anonymousPerfResults
   * @return anonymousPerfResults
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousPerfResults() {
    return anonymousPerfResults;
  }

  public void setAnonymousPerfResults(Boolean anonymousPerfResults) {
    this.anonymousPerfResults = anonymousPerfResults;
  }


  public Preference anonymousUsageStats(Boolean anonymousUsageStats) {
    this.anonymousUsageStats = anonymousUsageStats;
    return this;
  }

  /**
   * Get anonymousUsageStats
   * @return anonymousUsageStats
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousUsageStats() {
    return anonymousUsageStats;
  }

  public void setAnonymousUsageStats(Boolean anonymousUsageStats) {
    this.anonymousUsageStats = anonymousUsageStats;
  }


  public Preference grafana(Grafana grafana) {
    this.grafana = grafana;
    return this;
  }

  /**
   * Get grafana
   * @return grafana
   */
  @javax.annotation.Nullable
  public Grafana getGrafana() {
    return grafana;
  }

  public void setGrafana(Grafana grafana) {
    this.grafana = grafana;
  }


  public Preference k8sConfig(K8SConfig k8sConfig) {
    this.k8sConfig = k8sConfig;
    return this;
  }

  /**
   * Get k8sConfig
   * @return k8sConfig
   */
  @javax.annotation.Nullable
  public K8SConfig getK8sConfig() {
    return k8sConfig;
  }

  public void setK8sConfig(K8SConfig k8sConfig) {
    this.k8sConfig = k8sConfig;
  }


  public Preference loadTestPrefs(LoadTestPreferences loadTestPrefs) {
    this.loadTestPrefs = loadTestPrefs;
    return this;
  }

  /**
   * Get loadTestPrefs
   * @return loadTestPrefs
   */
  @javax.annotation.Nullable
  public LoadTestPreferences getLoadTestPrefs() {
    return loadTestPrefs;
  }

  public void setLoadTestPrefs(LoadTestPreferences loadTestPrefs) {
    this.loadTestPrefs = loadTestPrefs;
  }


  public Preference meshAdapters(List<Adapter> meshAdapters) {
    this.meshAdapters = meshAdapters;
    return this;
  }

  public Preference addMeshAdaptersItem(Adapter meshAdaptersItem) {
    if (this.meshAdapters == null) {
      this.meshAdapters = new ArrayList<>();
    }
    this.meshAdapters.add(meshAdaptersItem);
    return this;
  }

  /**
   * Get meshAdapters
   * @return meshAdapters
   */
  @javax.annotation.Nullable
  public List<Adapter> getMeshAdapters() {
    return meshAdapters;
  }

  public void setMeshAdapters(List<Adapter> meshAdapters) {
    this.meshAdapters = meshAdapters;
  }


  public Preference prometheus(Prometheus prometheus) {
    this.prometheus = prometheus;
    return this;
  }

  /**
   * Get prometheus
   * @return prometheus
   */
  @javax.annotation.Nullable
  public Prometheus getPrometheus() {
    return prometheus;
  }

  public void setPrometheus(Prometheus prometheus) {
    this.prometheus = prometheus;
  }


  public Preference updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Preference preference = (Preference) o;
    return Objects.equals(this.anonymousPerfResults, preference.anonymousPerfResults) &&
        Objects.equals(this.anonymousUsageStats, preference.anonymousUsageStats) &&
        Objects.equals(this.grafana, preference.grafana) &&
        Objects.equals(this.k8sConfig, preference.k8sConfig) &&
        Objects.equals(this.loadTestPrefs, preference.loadTestPrefs) &&
        Objects.equals(this.meshAdapters, preference.meshAdapters) &&
        Objects.equals(this.prometheus, preference.prometheus) &&
        Objects.equals(this.updatedAt, preference.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anonymousPerfResults, anonymousUsageStats, grafana, k8sConfig, loadTestPrefs, meshAdapters, prometheus, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Preference {\n");
    sb.append("    anonymousPerfResults: ").append(toIndentedString(anonymousPerfResults)).append("\n");
    sb.append("    anonymousUsageStats: ").append(toIndentedString(anonymousUsageStats)).append("\n");
    sb.append("    grafana: ").append(toIndentedString(grafana)).append("\n");
    sb.append("    k8sConfig: ").append(toIndentedString(k8sConfig)).append("\n");
    sb.append("    loadTestPrefs: ").append(toIndentedString(loadTestPrefs)).append("\n");
    sb.append("    meshAdapters: ").append(toIndentedString(meshAdapters)).append("\n");
    sb.append("    prometheus: ").append(toIndentedString(prometheus)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anonymousPerfResults");
    openapiFields.add("anonymousUsageStats");
    openapiFields.add("grafana");
    openapiFields.add("k8sConfig");
    openapiFields.add("loadTestPrefs");
    openapiFields.add("meshAdapters");
    openapiFields.add("prometheus");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Preference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Preference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Preference is not found in the empty JSON string", Preference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Preference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Preference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `grafana`
      if (jsonObj.get("grafana") != null && !jsonObj.get("grafana").isJsonNull()) {
        Grafana.validateJsonElement(jsonObj.get("grafana"));
      }
      // validate the optional field `k8sConfig`
      if (jsonObj.get("k8sConfig") != null && !jsonObj.get("k8sConfig").isJsonNull()) {
        K8SConfig.validateJsonElement(jsonObj.get("k8sConfig"));
      }
      // validate the optional field `loadTestPrefs`
      if (jsonObj.get("loadTestPrefs") != null && !jsonObj.get("loadTestPrefs").isJsonNull()) {
        LoadTestPreferences.validateJsonElement(jsonObj.get("loadTestPrefs"));
      }
      if (jsonObj.get("meshAdapters") != null && !jsonObj.get("meshAdapters").isJsonNull()) {
        JsonArray jsonArraymeshAdapters = jsonObj.getAsJsonArray("meshAdapters");
        if (jsonArraymeshAdapters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meshAdapters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meshAdapters` to be an array in the JSON string but got `%s`", jsonObj.get("meshAdapters").toString()));
          }

          // validate the optional field `meshAdapters` (array)
          for (int i = 0; i < jsonArraymeshAdapters.size(); i++) {
            Adapter.validateJsonElement(jsonArraymeshAdapters.get(i));
          };
        }
      }
      // validate the optional field `prometheus`
      if (jsonObj.get("prometheus") != null && !jsonObj.get("prometheus").isJsonNull()) {
        Prometheus.validateJsonElement(jsonObj.get("prometheus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Preference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Preference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Preference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Preference.class));

       return (TypeAdapter<T>) new TypeAdapter<Preference>() {
           @Override
           public void write(JsonWriter out, Preference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Preference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Preference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Preference
   * @throws IOException if the JSON string is invalid with respect to Preference
   */
  public static Preference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Preference.class);
  }

  /**
   * Convert an instance of Preference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

