/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GraphQLExtension;
import org.openapitools.client.model.NavigatorExtension;
import org.openapitools.client.model.UserPrefsExtension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extensions defines the UI extension points
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Extensions {
  public static final String SERIALIZED_NAME_GRAPHQL = "graphql";
  @SerializedName(SERIALIZED_NAME_GRAPHQL)
  private List<GraphQLExtension> graphql = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAVIGATOR = "navigator";
  @SerializedName(SERIALIZED_NAME_NAVIGATOR)
  private List<NavigatorExtension> navigator = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_PREFS = "user_prefs";
  @SerializedName(SERIALIZED_NAME_USER_PREFS)
  private List<UserPrefsExtension> userPrefs = new ArrayList<>();

  public Extensions() {
  }

  public Extensions graphql(List<GraphQLExtension> graphql) {
    this.graphql = graphql;
    return this;
  }

  public Extensions addGraphqlItem(GraphQLExtension graphqlItem) {
    if (this.graphql == null) {
      this.graphql = new ArrayList<>();
    }
    this.graphql.add(graphqlItem);
    return this;
  }

  /**
   * GraphQLExtensions is a collection of GraphQLExtension endpoints
   * @return graphql
   */
  @javax.annotation.Nullable
  public List<GraphQLExtension> getGraphql() {
    return graphql;
  }

  public void setGraphql(List<GraphQLExtension> graphql) {
    this.graphql = graphql;
  }


  public Extensions navigator(List<NavigatorExtension> navigator) {
    this.navigator = navigator;
    return this;
  }

  public Extensions addNavigatorItem(NavigatorExtension navigatorItem) {
    if (this.navigator == null) {
      this.navigator = new ArrayList<>();
    }
    this.navigator.add(navigatorItem);
    return this;
  }

  /**
   * NavigatorExtensions is a collection of NavigatorExtension
   * @return navigator
   */
  @javax.annotation.Nullable
  public List<NavigatorExtension> getNavigator() {
    return navigator;
  }

  public void setNavigator(List<NavigatorExtension> navigator) {
    this.navigator = navigator;
  }


  public Extensions userPrefs(List<UserPrefsExtension> userPrefs) {
    this.userPrefs = userPrefs;
    return this;
  }

  public Extensions addUserPrefsItem(UserPrefsExtension userPrefsItem) {
    if (this.userPrefs == null) {
      this.userPrefs = new ArrayList<>();
    }
    this.userPrefs.add(userPrefsItem);
    return this;
  }

  /**
   * UserPrefsExtensions is a collection of UserPrefsExtension
   * @return userPrefs
   */
  @javax.annotation.Nullable
  public List<UserPrefsExtension> getUserPrefs() {
    return userPrefs;
  }

  public void setUserPrefs(List<UserPrefsExtension> userPrefs) {
    this.userPrefs = userPrefs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extensions extensions = (Extensions) o;
    return Objects.equals(this.graphql, extensions.graphql) &&
        Objects.equals(this.navigator, extensions.navigator) &&
        Objects.equals(this.userPrefs, extensions.userPrefs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(graphql, navigator, userPrefs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extensions {\n");
    sb.append("    graphql: ").append(toIndentedString(graphql)).append("\n");
    sb.append("    navigator: ").append(toIndentedString(navigator)).append("\n");
    sb.append("    userPrefs: ").append(toIndentedString(userPrefs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("graphql");
    openapiFields.add("navigator");
    openapiFields.add("user_prefs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Extensions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Extensions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Extensions is not found in the empty JSON string", Extensions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Extensions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Extensions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("graphql") != null && !jsonObj.get("graphql").isJsonNull()) {
        JsonArray jsonArraygraphql = jsonObj.getAsJsonArray("graphql");
        if (jsonArraygraphql != null) {
          // ensure the json data is an array
          if (!jsonObj.get("graphql").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `graphql` to be an array in the JSON string but got `%s`", jsonObj.get("graphql").toString()));
          }

          // validate the optional field `graphql` (array)
          for (int i = 0; i < jsonArraygraphql.size(); i++) {
            GraphQLExtension.validateJsonElement(jsonArraygraphql.get(i));
          };
        }
      }
      if (jsonObj.get("navigator") != null && !jsonObj.get("navigator").isJsonNull()) {
        JsonArray jsonArraynavigator = jsonObj.getAsJsonArray("navigator");
        if (jsonArraynavigator != null) {
          // ensure the json data is an array
          if (!jsonObj.get("navigator").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `navigator` to be an array in the JSON string but got `%s`", jsonObj.get("navigator").toString()));
          }

          // validate the optional field `navigator` (array)
          for (int i = 0; i < jsonArraynavigator.size(); i++) {
            NavigatorExtension.validateJsonElement(jsonArraynavigator.get(i));
          };
        }
      }
      if (jsonObj.get("user_prefs") != null && !jsonObj.get("user_prefs").isJsonNull()) {
        JsonArray jsonArrayuserPrefs = jsonObj.getAsJsonArray("user_prefs");
        if (jsonArrayuserPrefs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("user_prefs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `user_prefs` to be an array in the JSON string but got `%s`", jsonObj.get("user_prefs").toString()));
          }

          // validate the optional field `user_prefs` (array)
          for (int i = 0; i < jsonArrayuserPrefs.size(); i++) {
            UserPrefsExtension.validateJsonElement(jsonArrayuserPrefs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Extensions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Extensions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Extensions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Extensions.class));

       return (TypeAdapter<T>) new TypeAdapter<Extensions>() {
           @Override
           public void write(JsonWriter out, Extensions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Extensions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Extensions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Extensions
   * @throws IOException if the JSON string is invalid with respect to Extensions
   */
  public static Extensions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Extensions.class);
  }

  /**
   * Convert an instance of Extensions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

