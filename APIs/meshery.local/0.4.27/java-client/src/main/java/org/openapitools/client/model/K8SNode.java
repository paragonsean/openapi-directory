/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * K8SNode - represents a kubernetes node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class K8SNode {
  public static final String SERIALIZED_NAME_ALLOCATABLE_CPU = "allocatable_cpu";
  @SerializedName(SERIALIZED_NAME_ALLOCATABLE_CPU)
  private String allocatableCpu;

  public static final String SERIALIZED_NAME_ALLOCATABLE_MEMORY = "allocatable_memory";
  @SerializedName(SERIALIZED_NAME_ALLOCATABLE_MEMORY)
  private String allocatableMemory;

  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private String architecture;

  public static final String SERIALIZED_NAME_CAPACITY_CPU = "capacity_cpu";
  @SerializedName(SERIALIZED_NAME_CAPACITY_CPU)
  private String capacityCpu;

  public static final String SERIALIZED_NAME_CAPACITY_MEMORY = "capacity_memory";
  @SerializedName(SERIALIZED_NAME_CAPACITY_MEMORY)
  private String capacityMemory;

  public static final String SERIALIZED_NAME_CONTAINER_RUNTIME_VERSION = "container_runtime_version";
  @SerializedName(SERIALIZED_NAME_CONTAINER_RUNTIME_VERSION)
  private String containerRuntimeVersion;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_INTERNAL_IP = "internal_ip";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IP)
  private String internalIp;

  public static final String SERIALIZED_NAME_KUBELET_VERSION = "kubelet_version";
  @SerializedName(SERIALIZED_NAME_KUBELET_VERSION)
  private String kubeletVersion;

  public static final String SERIALIZED_NAME_KUBEPROXY_VERSION = "kubeproxy_version";
  @SerializedName(SERIALIZED_NAME_KUBEPROXY_VERSION)
  private String kubeproxyVersion;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_OS_IMAGE = "os_image";
  @SerializedName(SERIALIZED_NAME_OS_IMAGE)
  private String osImage;

  public K8SNode() {
  }

  public K8SNode allocatableCpu(String allocatableCpu) {
    this.allocatableCpu = allocatableCpu;
    return this;
  }

  /**
   * Get allocatableCpu
   * @return allocatableCpu
   */
  @javax.annotation.Nullable
  public String getAllocatableCpu() {
    return allocatableCpu;
  }

  public void setAllocatableCpu(String allocatableCpu) {
    this.allocatableCpu = allocatableCpu;
  }


  public K8SNode allocatableMemory(String allocatableMemory) {
    this.allocatableMemory = allocatableMemory;
    return this;
  }

  /**
   * Get allocatableMemory
   * @return allocatableMemory
   */
  @javax.annotation.Nullable
  public String getAllocatableMemory() {
    return allocatableMemory;
  }

  public void setAllocatableMemory(String allocatableMemory) {
    this.allocatableMemory = allocatableMemory;
  }


  public K8SNode architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public K8SNode capacityCpu(String capacityCpu) {
    this.capacityCpu = capacityCpu;
    return this;
  }

  /**
   * Get capacityCpu
   * @return capacityCpu
   */
  @javax.annotation.Nullable
  public String getCapacityCpu() {
    return capacityCpu;
  }

  public void setCapacityCpu(String capacityCpu) {
    this.capacityCpu = capacityCpu;
  }


  public K8SNode capacityMemory(String capacityMemory) {
    this.capacityMemory = capacityMemory;
    return this;
  }

  /**
   * Get capacityMemory
   * @return capacityMemory
   */
  @javax.annotation.Nullable
  public String getCapacityMemory() {
    return capacityMemory;
  }

  public void setCapacityMemory(String capacityMemory) {
    this.capacityMemory = capacityMemory;
  }


  public K8SNode containerRuntimeVersion(String containerRuntimeVersion) {
    this.containerRuntimeVersion = containerRuntimeVersion;
    return this;
  }

  /**
   * Get containerRuntimeVersion
   * @return containerRuntimeVersion
   */
  @javax.annotation.Nullable
  public String getContainerRuntimeVersion() {
    return containerRuntimeVersion;
  }

  public void setContainerRuntimeVersion(String containerRuntimeVersion) {
    this.containerRuntimeVersion = containerRuntimeVersion;
  }


  public K8SNode hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public K8SNode internalIp(String internalIp) {
    this.internalIp = internalIp;
    return this;
  }

  /**
   * Get internalIp
   * @return internalIp
   */
  @javax.annotation.Nullable
  public String getInternalIp() {
    return internalIp;
  }

  public void setInternalIp(String internalIp) {
    this.internalIp = internalIp;
  }


  public K8SNode kubeletVersion(String kubeletVersion) {
    this.kubeletVersion = kubeletVersion;
    return this;
  }

  /**
   * Get kubeletVersion
   * @return kubeletVersion
   */
  @javax.annotation.Nullable
  public String getKubeletVersion() {
    return kubeletVersion;
  }

  public void setKubeletVersion(String kubeletVersion) {
    this.kubeletVersion = kubeletVersion;
  }


  public K8SNode kubeproxyVersion(String kubeproxyVersion) {
    this.kubeproxyVersion = kubeproxyVersion;
    return this;
  }

  /**
   * Get kubeproxyVersion
   * @return kubeproxyVersion
   */
  @javax.annotation.Nullable
  public String getKubeproxyVersion() {
    return kubeproxyVersion;
  }

  public void setKubeproxyVersion(String kubeproxyVersion) {
    this.kubeproxyVersion = kubeproxyVersion;
  }


  public K8SNode operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public K8SNode osImage(String osImage) {
    this.osImage = osImage;
    return this;
  }

  /**
   * Get osImage
   * @return osImage
   */
  @javax.annotation.Nullable
  public String getOsImage() {
    return osImage;
  }

  public void setOsImage(String osImage) {
    this.osImage = osImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    K8SNode k8SNode = (K8SNode) o;
    return Objects.equals(this.allocatableCpu, k8SNode.allocatableCpu) &&
        Objects.equals(this.allocatableMemory, k8SNode.allocatableMemory) &&
        Objects.equals(this.architecture, k8SNode.architecture) &&
        Objects.equals(this.capacityCpu, k8SNode.capacityCpu) &&
        Objects.equals(this.capacityMemory, k8SNode.capacityMemory) &&
        Objects.equals(this.containerRuntimeVersion, k8SNode.containerRuntimeVersion) &&
        Objects.equals(this.hostname, k8SNode.hostname) &&
        Objects.equals(this.internalIp, k8SNode.internalIp) &&
        Objects.equals(this.kubeletVersion, k8SNode.kubeletVersion) &&
        Objects.equals(this.kubeproxyVersion, k8SNode.kubeproxyVersion) &&
        Objects.equals(this.operatingSystem, k8SNode.operatingSystem) &&
        Objects.equals(this.osImage, k8SNode.osImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatableCpu, allocatableMemory, architecture, capacityCpu, capacityMemory, containerRuntimeVersion, hostname, internalIp, kubeletVersion, kubeproxyVersion, operatingSystem, osImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class K8SNode {\n");
    sb.append("    allocatableCpu: ").append(toIndentedString(allocatableCpu)).append("\n");
    sb.append("    allocatableMemory: ").append(toIndentedString(allocatableMemory)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    capacityCpu: ").append(toIndentedString(capacityCpu)).append("\n");
    sb.append("    capacityMemory: ").append(toIndentedString(capacityMemory)).append("\n");
    sb.append("    containerRuntimeVersion: ").append(toIndentedString(containerRuntimeVersion)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    internalIp: ").append(toIndentedString(internalIp)).append("\n");
    sb.append("    kubeletVersion: ").append(toIndentedString(kubeletVersion)).append("\n");
    sb.append("    kubeproxyVersion: ").append(toIndentedString(kubeproxyVersion)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    osImage: ").append(toIndentedString(osImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatable_cpu");
    openapiFields.add("allocatable_memory");
    openapiFields.add("architecture");
    openapiFields.add("capacity_cpu");
    openapiFields.add("capacity_memory");
    openapiFields.add("container_runtime_version");
    openapiFields.add("hostname");
    openapiFields.add("internal_ip");
    openapiFields.add("kubelet_version");
    openapiFields.add("kubeproxy_version");
    openapiFields.add("operating_system");
    openapiFields.add("os_image");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to K8SNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!K8SNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in K8SNode is not found in the empty JSON string", K8SNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!K8SNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `K8SNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocatable_cpu") != null && !jsonObj.get("allocatable_cpu").isJsonNull()) && !jsonObj.get("allocatable_cpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatable_cpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocatable_cpu").toString()));
      }
      if ((jsonObj.get("allocatable_memory") != null && !jsonObj.get("allocatable_memory").isJsonNull()) && !jsonObj.get("allocatable_memory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatable_memory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocatable_memory").toString()));
      }
      if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) && !jsonObj.get("architecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architecture").toString()));
      }
      if ((jsonObj.get("capacity_cpu") != null && !jsonObj.get("capacity_cpu").isJsonNull()) && !jsonObj.get("capacity_cpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacity_cpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacity_cpu").toString()));
      }
      if ((jsonObj.get("capacity_memory") != null && !jsonObj.get("capacity_memory").isJsonNull()) && !jsonObj.get("capacity_memory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacity_memory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacity_memory").toString()));
      }
      if ((jsonObj.get("container_runtime_version") != null && !jsonObj.get("container_runtime_version").isJsonNull()) && !jsonObj.get("container_runtime_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_runtime_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_runtime_version").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("internal_ip") != null && !jsonObj.get("internal_ip").isJsonNull()) && !jsonObj.get("internal_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal_ip").toString()));
      }
      if ((jsonObj.get("kubelet_version") != null && !jsonObj.get("kubelet_version").isJsonNull()) && !jsonObj.get("kubelet_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kubelet_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kubelet_version").toString()));
      }
      if ((jsonObj.get("kubeproxy_version") != null && !jsonObj.get("kubeproxy_version").isJsonNull()) && !jsonObj.get("kubeproxy_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kubeproxy_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kubeproxy_version").toString()));
      }
      if ((jsonObj.get("operating_system") != null && !jsonObj.get("operating_system").isJsonNull()) && !jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if ((jsonObj.get("os_image") != null && !jsonObj.get("os_image").isJsonNull()) && !jsonObj.get("os_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_image").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!K8SNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'K8SNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<K8SNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(K8SNode.class));

       return (TypeAdapter<T>) new TypeAdapter<K8SNode>() {
           @Override
           public void write(JsonWriter out, K8SNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public K8SNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of K8SNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of K8SNode
   * @throws IOException if the JSON string is invalid with respect to K8SNode
   */
  public static K8SNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, K8SNode.class);
  }

  /**
   * Convert an instance of K8SNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

