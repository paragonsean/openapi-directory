/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StackdriverAlignOptions;
import org.openapitools.client.model.TargetBucketAggsInner;
import org.openapitools.client.model.TargetGroupInner;
import org.openapitools.client.model.TargetMetricsInner;
import org.openapitools.client.model.TargetWhereInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * for an any panel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Target {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_ALIAS_BY = "aliasBy";
  @SerializedName(SERIALIZED_NAME_ALIAS_BY)
  private String aliasBy;

  public static final String SERIALIZED_NAME_ALIGN_OPTIONS = "alignOptions";
  @SerializedName(SERIALIZED_NAME_ALIGN_OPTIONS)
  private List<StackdriverAlignOptions> alignOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALIGNMENT_PERIOD = "alignmentPeriod";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT_PERIOD)
  private String alignmentPeriod;

  public static final String SERIALIZED_NAME_BUCKET_AGGS = "bucketAggs";
  @SerializedName(SERIALIZED_NAME_BUCKET_AGGS)
  private List<TargetBucketAggsInner> bucketAggs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CROSS_SERIES_REDUCER = "crossSeriesReducer";
  @SerializedName(SERIALIZED_NAME_CROSS_SERIES_REDUCER)
  private String crossSeriesReducer;

  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private String datasource;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Map<String, String> dimensions = new HashMap<>();

  public static final String SERIALIZED_NAME_DS_TYPE = "dsType";
  @SerializedName(SERIALIZED_NAME_DS_TYPE)
  private String dsType;

  public static final String SERIALIZED_NAME_EXPR = "expr";
  @SerializedName(SERIALIZED_NAME_EXPR)
  private String expr;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<String> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private List<TargetGroupInner> group = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_BYS = "groupBys";
  @SerializedName(SERIALIZED_NAME_GROUP_BYS)
  private List<String> groupBys = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE = "hide";
  @SerializedName(SERIALIZED_NAME_HIDE)
  private Boolean hide;

  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  private Boolean instant;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_INTERVAL_FACTOR = "intervalFactor";
  @SerializedName(SERIALIZED_NAME_INTERVAL_FACTOR)
  private Long intervalFactor;

  public static final String SERIALIZED_NAME_LEGEND_FORMAT = "legendFormat";
  @SerializedName(SERIALIZED_NAME_LEGEND_FORMAT)
  private String legendFormat;

  public static final String SERIALIZED_NAME_MEASUREMENT = "measurement";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT)
  private String measurement;

  public static final String SERIALIZED_NAME_METRIC_COLUMN = "metricColumn";
  @SerializedName(SERIALIZED_NAME_METRIC_COLUMN)
  private String metricColumn;

  public static final String SERIALIZED_NAME_METRIC_KIND = "metricKind";
  @SerializedName(SERIALIZED_NAME_METRIC_KIND)
  private String metricKind;

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_TYPE = "metricType";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private String metricType;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<TargetMetricsInner> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_PER_SERIES_ALIGNER = "perSeriesAligner";
  @SerializedName(SERIALIZED_NAME_PER_SERIES_ALIGNER)
  private String perSeriesAligner;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RAW_QUERY = "rawQuery";
  @SerializedName(SERIALIZED_NAME_RAW_QUERY)
  private Boolean rawQuery;

  public static final String SERIALIZED_NAME_RAW_SQL = "rawSql";
  @SerializedName(SERIALIZED_NAME_RAW_SQL)
  private String rawSql;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SELECT = "select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private List<List<TargetGroupInner>> select = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private List<String> statistics = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private Long step;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TIME_COLUMN = "timeColumn";
  @SerializedName(SERIALIZED_NAME_TIME_COLUMN)
  private String timeColumn;

  public static final String SERIALIZED_NAME_TIME_FIELD = "timeField";
  @SerializedName(SERIALIZED_NAME_TIME_FIELD)
  private String timeField;

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private String valueType;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private List<TargetWhereInner> where = new ArrayList<>();

  public Target() {
  }

  public Target alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public Target aliasBy(String aliasBy) {
    this.aliasBy = aliasBy;
    return this;
  }

  /**
   * Get aliasBy
   * @return aliasBy
   */
  @javax.annotation.Nullable
  public String getAliasBy() {
    return aliasBy;
  }

  public void setAliasBy(String aliasBy) {
    this.aliasBy = aliasBy;
  }


  public Target alignOptions(List<StackdriverAlignOptions> alignOptions) {
    this.alignOptions = alignOptions;
    return this;
  }

  public Target addAlignOptionsItem(StackdriverAlignOptions alignOptionsItem) {
    if (this.alignOptions == null) {
      this.alignOptions = new ArrayList<>();
    }
    this.alignOptions.add(alignOptionsItem);
    return this;
  }

  /**
   * Get alignOptions
   * @return alignOptions
   */
  @javax.annotation.Nullable
  public List<StackdriverAlignOptions> getAlignOptions() {
    return alignOptions;
  }

  public void setAlignOptions(List<StackdriverAlignOptions> alignOptions) {
    this.alignOptions = alignOptions;
  }


  public Target alignmentPeriod(String alignmentPeriod) {
    this.alignmentPeriod = alignmentPeriod;
    return this;
  }

  /**
   * Get alignmentPeriod
   * @return alignmentPeriod
   */
  @javax.annotation.Nullable
  public String getAlignmentPeriod() {
    return alignmentPeriod;
  }

  public void setAlignmentPeriod(String alignmentPeriod) {
    this.alignmentPeriod = alignmentPeriod;
  }


  public Target bucketAggs(List<TargetBucketAggsInner> bucketAggs) {
    this.bucketAggs = bucketAggs;
    return this;
  }

  public Target addBucketAggsItem(TargetBucketAggsInner bucketAggsItem) {
    if (this.bucketAggs == null) {
      this.bucketAggs = new ArrayList<>();
    }
    this.bucketAggs.add(bucketAggsItem);
    return this;
  }

  /**
   * Get bucketAggs
   * @return bucketAggs
   */
  @javax.annotation.Nullable
  public List<TargetBucketAggsInner> getBucketAggs() {
    return bucketAggs;
  }

  public void setBucketAggs(List<TargetBucketAggsInner> bucketAggs) {
    this.bucketAggs = bucketAggs;
  }


  public Target crossSeriesReducer(String crossSeriesReducer) {
    this.crossSeriesReducer = crossSeriesReducer;
    return this;
  }

  /**
   * Get crossSeriesReducer
   * @return crossSeriesReducer
   */
  @javax.annotation.Nullable
  public String getCrossSeriesReducer() {
    return crossSeriesReducer;
  }

  public void setCrossSeriesReducer(String crossSeriesReducer) {
    this.crossSeriesReducer = crossSeriesReducer;
  }


  public Target datasource(String datasource) {
    this.datasource = datasource;
    return this;
  }

  /**
   * Get datasource
   * @return datasource
   */
  @javax.annotation.Nullable
  public String getDatasource() {
    return datasource;
  }

  public void setDatasource(String datasource) {
    this.datasource = datasource;
  }


  public Target dimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public Target putDimensionsItem(String key, String dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new HashMap<>();
    }
    this.dimensions.put(key, dimensionsItem);
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDimensions() {
    return dimensions;
  }

  public void setDimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
  }


  public Target dsType(String dsType) {
    this.dsType = dsType;
    return this;
  }

  /**
   * For Elasticsearch
   * @return dsType
   */
  @javax.annotation.Nullable
  public String getDsType() {
    return dsType;
  }

  public void setDsType(String dsType) {
    this.dsType = dsType;
  }


  public Target expr(String expr) {
    this.expr = expr;
    return this;
  }

  /**
   * For Prometheus
   * @return expr
   */
  @javax.annotation.Nullable
  public String getExpr() {
    return expr;
  }

  public void setExpr(String expr) {
    this.expr = expr;
  }


  public Target filters(List<String> filters) {
    this.filters = filters;
    return this;
  }

  public Target addFiltersItem(String filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<String> getFilters() {
    return filters;
  }

  public void setFilters(List<String> filters) {
    this.filters = filters;
  }


  public Target format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public Target group(List<TargetGroupInner> group) {
    this.group = group;
    return this;
  }

  public Target addGroupItem(TargetGroupInner groupItem) {
    if (this.group == null) {
      this.group = new ArrayList<>();
    }
    this.group.add(groupItem);
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public List<TargetGroupInner> getGroup() {
    return group;
  }

  public void setGroup(List<TargetGroupInner> group) {
    this.group = group;
  }


  public Target groupBys(List<String> groupBys) {
    this.groupBys = groupBys;
    return this;
  }

  public Target addGroupBysItem(String groupBysItem) {
    if (this.groupBys == null) {
      this.groupBys = new ArrayList<>();
    }
    this.groupBys.add(groupBysItem);
    return this;
  }

  /**
   * Get groupBys
   * @return groupBys
   */
  @javax.annotation.Nullable
  public List<String> getGroupBys() {
    return groupBys;
  }

  public void setGroupBys(List<String> groupBys) {
    this.groupBys = groupBys;
  }


  public Target hide(Boolean hide) {
    this.hide = hide;
    return this;
  }

  /**
   * Get hide
   * @return hide
   */
  @javax.annotation.Nullable
  public Boolean getHide() {
    return hide;
  }

  public void setHide(Boolean hide) {
    this.hide = hide;
  }


  public Target instant(Boolean instant) {
    this.instant = instant;
    return this;
  }

  /**
   * Get instant
   * @return instant
   */
  @javax.annotation.Nullable
  public Boolean getInstant() {
    return instant;
  }

  public void setInstant(Boolean instant) {
    this.instant = instant;
  }


  public Target interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public Target intervalFactor(Long intervalFactor) {
    this.intervalFactor = intervalFactor;
    return this;
  }

  /**
   * Get intervalFactor
   * @return intervalFactor
   */
  @javax.annotation.Nullable
  public Long getIntervalFactor() {
    return intervalFactor;
  }

  public void setIntervalFactor(Long intervalFactor) {
    this.intervalFactor = intervalFactor;
  }


  public Target legendFormat(String legendFormat) {
    this.legendFormat = legendFormat;
    return this;
  }

  /**
   * Get legendFormat
   * @return legendFormat
   */
  @javax.annotation.Nullable
  public String getLegendFormat() {
    return legendFormat;
  }

  public void setLegendFormat(String legendFormat) {
    this.legendFormat = legendFormat;
  }


  public Target measurement(String measurement) {
    this.measurement = measurement;
    return this;
  }

  /**
   * For InfluxDB
   * @return measurement
   */
  @javax.annotation.Nullable
  public String getMeasurement() {
    return measurement;
  }

  public void setMeasurement(String measurement) {
    this.measurement = measurement;
  }


  public Target metricColumn(String metricColumn) {
    this.metricColumn = metricColumn;
    return this;
  }

  /**
   * Get metricColumn
   * @return metricColumn
   */
  @javax.annotation.Nullable
  public String getMetricColumn() {
    return metricColumn;
  }

  public void setMetricColumn(String metricColumn) {
    this.metricColumn = metricColumn;
  }


  public Target metricKind(String metricKind) {
    this.metricKind = metricKind;
    return this;
  }

  /**
   * Get metricKind
   * @return metricKind
   */
  @javax.annotation.Nullable
  public String getMetricKind() {
    return metricKind;
  }

  public void setMetricKind(String metricKind) {
    this.metricKind = metricKind;
  }


  public Target metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public Target metricType(String metricType) {
    this.metricType = metricType;
    return this;
  }

  /**
   * Get metricType
   * @return metricType
   */
  @javax.annotation.Nullable
  public String getMetricType() {
    return metricType;
  }

  public void setMetricType(String metricType) {
    this.metricType = metricType;
  }


  public Target metrics(List<TargetMetricsInner> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Target addMetricsItem(TargetMetricsInner metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<TargetMetricsInner> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<TargetMetricsInner> metrics) {
    this.metrics = metrics;
  }


  public Target namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * For CloudWatch
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public Target perSeriesAligner(String perSeriesAligner) {
    this.perSeriesAligner = perSeriesAligner;
    return this;
  }

  /**
   * Get perSeriesAligner
   * @return perSeriesAligner
   */
  @javax.annotation.Nullable
  public String getPerSeriesAligner() {
    return perSeriesAligner;
  }

  public void setPerSeriesAligner(String perSeriesAligner) {
    this.perSeriesAligner = perSeriesAligner;
  }


  public Target period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public Target projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * For the Stackdriver data source. Find out more information at https:/grafana.com/docs/grafana/v6.0/features/datasources/stackdriver/
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public Target query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public Target rawQuery(Boolean rawQuery) {
    this.rawQuery = rawQuery;
    return this;
  }

  /**
   * Get rawQuery
   * @return rawQuery
   */
  @javax.annotation.Nullable
  public Boolean getRawQuery() {
    return rawQuery;
  }

  public void setRawQuery(Boolean rawQuery) {
    this.rawQuery = rawQuery;
  }


  public Target rawSql(String rawSql) {
    this.rawSql = rawSql;
    return this;
  }

  /**
   * Get rawSql
   * @return rawSql
   */
  @javax.annotation.Nullable
  public String getRawSql() {
    return rawSql;
  }

  public void setRawSql(String rawSql) {
    this.rawSql = rawSql;
  }


  public Target refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * Get refId
   * @return refId
   */
  @javax.annotation.Nullable
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public Target region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Target select(List<List<TargetGroupInner>> select) {
    this.select = select;
    return this;
  }

  public Target addSelectItem(List<TargetGroupInner> selectItem) {
    if (this.select == null) {
      this.select = new ArrayList<>();
    }
    this.select.add(selectItem);
    return this;
  }

  /**
   * Get select
   * @return select
   */
  @javax.annotation.Nullable
  public List<List<TargetGroupInner>> getSelect() {
    return select;
  }

  public void setSelect(List<List<TargetGroupInner>> select) {
    this.select = select;
  }


  public Target statistics(List<String> statistics) {
    this.statistics = statistics;
    return this;
  }

  public Target addStatisticsItem(String statisticsItem) {
    if (this.statistics == null) {
      this.statistics = new ArrayList<>();
    }
    this.statistics.add(statisticsItem);
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public List<String> getStatistics() {
    return statistics;
  }

  public void setStatistics(List<String> statistics) {
    this.statistics = statistics;
  }


  public Target step(Long step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public Long getStep() {
    return step;
  }

  public void setStep(Long step) {
    this.step = step;
  }


  public Target table(String table) {
    this.table = table;
    return this;
  }

  /**
   * For PostgreSQL
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public Target target(String target) {
    this.target = target;
    return this;
  }

  /**
   * For Graphite
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public Target timeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
    return this;
  }

  /**
   * Get timeColumn
   * @return timeColumn
   */
  @javax.annotation.Nullable
  public String getTimeColumn() {
    return timeColumn;
  }

  public void setTimeColumn(String timeColumn) {
    this.timeColumn = timeColumn;
  }


  public Target timeField(String timeField) {
    this.timeField = timeField;
    return this;
  }

  /**
   * Get timeField
   * @return timeField
   */
  @javax.annotation.Nullable
  public String getTimeField() {
    return timeField;
  }

  public void setTimeField(String timeField) {
    this.timeField = timeField;
  }


  public Target valueType(String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Get valueType
   * @return valueType
   */
  @javax.annotation.Nullable
  public String getValueType() {
    return valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = valueType;
  }


  public Target where(List<TargetWhereInner> where) {
    this.where = where;
    return this;
  }

  public Target addWhereItem(TargetWhereInner whereItem) {
    if (this.where == null) {
      this.where = new ArrayList<>();
    }
    this.where.add(whereItem);
    return this;
  }

  /**
   * Get where
   * @return where
   */
  @javax.annotation.Nullable
  public List<TargetWhereInner> getWhere() {
    return where;
  }

  public void setWhere(List<TargetWhereInner> where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Target target = (Target) o;
    return Objects.equals(this.alias, target.alias) &&
        Objects.equals(this.aliasBy, target.aliasBy) &&
        Objects.equals(this.alignOptions, target.alignOptions) &&
        Objects.equals(this.alignmentPeriod, target.alignmentPeriod) &&
        Objects.equals(this.bucketAggs, target.bucketAggs) &&
        Objects.equals(this.crossSeriesReducer, target.crossSeriesReducer) &&
        Objects.equals(this.datasource, target.datasource) &&
        Objects.equals(this.dimensions, target.dimensions) &&
        Objects.equals(this.dsType, target.dsType) &&
        Objects.equals(this.expr, target.expr) &&
        Objects.equals(this.filters, target.filters) &&
        Objects.equals(this.format, target.format) &&
        Objects.equals(this.group, target.group) &&
        Objects.equals(this.groupBys, target.groupBys) &&
        Objects.equals(this.hide, target.hide) &&
        Objects.equals(this.instant, target.instant) &&
        Objects.equals(this.interval, target.interval) &&
        Objects.equals(this.intervalFactor, target.intervalFactor) &&
        Objects.equals(this.legendFormat, target.legendFormat) &&
        Objects.equals(this.measurement, target.measurement) &&
        Objects.equals(this.metricColumn, target.metricColumn) &&
        Objects.equals(this.metricKind, target.metricKind) &&
        Objects.equals(this.metricName, target.metricName) &&
        Objects.equals(this.metricType, target.metricType) &&
        Objects.equals(this.metrics, target.metrics) &&
        Objects.equals(this.namespace, target.namespace) &&
        Objects.equals(this.perSeriesAligner, target.perSeriesAligner) &&
        Objects.equals(this.period, target.period) &&
        Objects.equals(this.projectName, target.projectName) &&
        Objects.equals(this.query, target.query) &&
        Objects.equals(this.rawQuery, target.rawQuery) &&
        Objects.equals(this.rawSql, target.rawSql) &&
        Objects.equals(this.refId, target.refId) &&
        Objects.equals(this.region, target.region) &&
        Objects.equals(this.select, target.select) &&
        Objects.equals(this.statistics, target.statistics) &&
        Objects.equals(this.step, target.step) &&
        Objects.equals(this.table, target.table) &&
        Objects.equals(this.target, target.target) &&
        Objects.equals(this.timeColumn, target.timeColumn) &&
        Objects.equals(this.timeField, target.timeField) &&
        Objects.equals(this.valueType, target.valueType) &&
        Objects.equals(this.where, target.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, aliasBy, alignOptions, alignmentPeriod, bucketAggs, crossSeriesReducer, datasource, dimensions, dsType, expr, filters, format, group, groupBys, hide, instant, interval, intervalFactor, legendFormat, measurement, metricColumn, metricKind, metricName, metricType, metrics, namespace, perSeriesAligner, period, projectName, query, rawQuery, rawSql, refId, region, select, statistics, step, table, target, timeColumn, timeField, valueType, where);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Target {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    aliasBy: ").append(toIndentedString(aliasBy)).append("\n");
    sb.append("    alignOptions: ").append(toIndentedString(alignOptions)).append("\n");
    sb.append("    alignmentPeriod: ").append(toIndentedString(alignmentPeriod)).append("\n");
    sb.append("    bucketAggs: ").append(toIndentedString(bucketAggs)).append("\n");
    sb.append("    crossSeriesReducer: ").append(toIndentedString(crossSeriesReducer)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    dsType: ").append(toIndentedString(dsType)).append("\n");
    sb.append("    expr: ").append(toIndentedString(expr)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupBys: ").append(toIndentedString(groupBys)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalFactor: ").append(toIndentedString(intervalFactor)).append("\n");
    sb.append("    legendFormat: ").append(toIndentedString(legendFormat)).append("\n");
    sb.append("    measurement: ").append(toIndentedString(measurement)).append("\n");
    sb.append("    metricColumn: ").append(toIndentedString(metricColumn)).append("\n");
    sb.append("    metricKind: ").append(toIndentedString(metricKind)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    perSeriesAligner: ").append(toIndentedString(perSeriesAligner)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rawQuery: ").append(toIndentedString(rawQuery)).append("\n");
    sb.append("    rawSql: ").append(toIndentedString(rawSql)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    timeColumn: ").append(toIndentedString(timeColumn)).append("\n");
    sb.append("    timeField: ").append(toIndentedString(timeField)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alias");
    openapiFields.add("aliasBy");
    openapiFields.add("alignOptions");
    openapiFields.add("alignmentPeriod");
    openapiFields.add("bucketAggs");
    openapiFields.add("crossSeriesReducer");
    openapiFields.add("datasource");
    openapiFields.add("dimensions");
    openapiFields.add("dsType");
    openapiFields.add("expr");
    openapiFields.add("filters");
    openapiFields.add("format");
    openapiFields.add("group");
    openapiFields.add("groupBys");
    openapiFields.add("hide");
    openapiFields.add("instant");
    openapiFields.add("interval");
    openapiFields.add("intervalFactor");
    openapiFields.add("legendFormat");
    openapiFields.add("measurement");
    openapiFields.add("metricColumn");
    openapiFields.add("metricKind");
    openapiFields.add("metricName");
    openapiFields.add("metricType");
    openapiFields.add("metrics");
    openapiFields.add("namespace");
    openapiFields.add("perSeriesAligner");
    openapiFields.add("period");
    openapiFields.add("projectName");
    openapiFields.add("query");
    openapiFields.add("rawQuery");
    openapiFields.add("rawSql");
    openapiFields.add("refId");
    openapiFields.add("region");
    openapiFields.add("select");
    openapiFields.add("statistics");
    openapiFields.add("step");
    openapiFields.add("table");
    openapiFields.add("target");
    openapiFields.add("timeColumn");
    openapiFields.add("timeField");
    openapiFields.add("valueType");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Target
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Target.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Target is not found in the empty JSON string", Target.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Target.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Target` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("aliasBy") != null && !jsonObj.get("aliasBy").isJsonNull()) && !jsonObj.get("aliasBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasBy").toString()));
      }
      if (jsonObj.get("alignOptions") != null && !jsonObj.get("alignOptions").isJsonNull()) {
        JsonArray jsonArrayalignOptions = jsonObj.getAsJsonArray("alignOptions");
        if (jsonArrayalignOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alignOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alignOptions` to be an array in the JSON string but got `%s`", jsonObj.get("alignOptions").toString()));
          }

          // validate the optional field `alignOptions` (array)
          for (int i = 0; i < jsonArrayalignOptions.size(); i++) {
            StackdriverAlignOptions.validateJsonElement(jsonArrayalignOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("alignmentPeriod") != null && !jsonObj.get("alignmentPeriod").isJsonNull()) && !jsonObj.get("alignmentPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignmentPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignmentPeriod").toString()));
      }
      if (jsonObj.get("bucketAggs") != null && !jsonObj.get("bucketAggs").isJsonNull()) {
        JsonArray jsonArraybucketAggs = jsonObj.getAsJsonArray("bucketAggs");
        if (jsonArraybucketAggs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bucketAggs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bucketAggs` to be an array in the JSON string but got `%s`", jsonObj.get("bucketAggs").toString()));
          }

          // validate the optional field `bucketAggs` (array)
          for (int i = 0; i < jsonArraybucketAggs.size(); i++) {
            TargetBucketAggsInner.validateJsonElement(jsonArraybucketAggs.get(i));
          };
        }
      }
      if ((jsonObj.get("crossSeriesReducer") != null && !jsonObj.get("crossSeriesReducer").isJsonNull()) && !jsonObj.get("crossSeriesReducer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossSeriesReducer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossSeriesReducer").toString()));
      }
      if ((jsonObj.get("datasource") != null && !jsonObj.get("datasource").isJsonNull()) && !jsonObj.get("datasource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource").toString()));
      }
      if ((jsonObj.get("dsType") != null && !jsonObj.get("dsType").isJsonNull()) && !jsonObj.get("dsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsType").toString()));
      }
      if ((jsonObj.get("expr") != null && !jsonObj.get("expr").isJsonNull()) && !jsonObj.get("expr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expr").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        JsonArray jsonArraygroup = jsonObj.getAsJsonArray("group");
        if (jsonArraygroup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("group").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `group` to be an array in the JSON string but got `%s`", jsonObj.get("group").toString()));
          }

          // validate the optional field `group` (array)
          for (int i = 0; i < jsonArraygroup.size(); i++) {
            TargetGroupInner.validateJsonElement(jsonArraygroup.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupBys") != null && !jsonObj.get("groupBys").isJsonNull() && !jsonObj.get("groupBys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBys` to be an array in the JSON string but got `%s`", jsonObj.get("groupBys").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("legendFormat") != null && !jsonObj.get("legendFormat").isJsonNull()) && !jsonObj.get("legendFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legendFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legendFormat").toString()));
      }
      if ((jsonObj.get("measurement") != null && !jsonObj.get("measurement").isJsonNull()) && !jsonObj.get("measurement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurement").toString()));
      }
      if ((jsonObj.get("metricColumn") != null && !jsonObj.get("metricColumn").isJsonNull()) && !jsonObj.get("metricColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricColumn").toString()));
      }
      if ((jsonObj.get("metricKind") != null && !jsonObj.get("metricKind").isJsonNull()) && !jsonObj.get("metricKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricKind").toString()));
      }
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      if ((jsonObj.get("metricType") != null && !jsonObj.get("metricType").isJsonNull()) && !jsonObj.get("metricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricType").toString()));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            TargetMetricsInner.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("perSeriesAligner") != null && !jsonObj.get("perSeriesAligner").isJsonNull()) && !jsonObj.get("perSeriesAligner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perSeriesAligner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perSeriesAligner").toString()));
      }
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("rawSql") != null && !jsonObj.get("rawSql").isJsonNull()) && !jsonObj.get("rawSql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawSql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawSql").toString()));
      }
      if ((jsonObj.get("refId") != null && !jsonObj.get("refId").isJsonNull()) && !jsonObj.get("refId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refId").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("select") != null && !jsonObj.get("select").isJsonNull() && !jsonObj.get("select").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `select` to be an array in the JSON string but got `%s`", jsonObj.get("select").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull() && !jsonObj.get("statistics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statistics` to be an array in the JSON string but got `%s`", jsonObj.get("statistics").toString()));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("timeColumn") != null && !jsonObj.get("timeColumn").isJsonNull()) && !jsonObj.get("timeColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeColumn").toString()));
      }
      if ((jsonObj.get("timeField") != null && !jsonObj.get("timeField").isJsonNull()) && !jsonObj.get("timeField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeField").toString()));
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
      if (jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull()) {
        JsonArray jsonArraywhere = jsonObj.getAsJsonArray("where");
        if (jsonArraywhere != null) {
          // ensure the json data is an array
          if (!jsonObj.get("where").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `where` to be an array in the JSON string but got `%s`", jsonObj.get("where").toString()));
          }

          // validate the optional field `where` (array)
          for (int i = 0; i < jsonArraywhere.size(); i++) {
            TargetWhereInner.validateJsonElement(jsonArraywhere.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Target.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Target' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Target> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Target.class));

       return (TypeAdapter<T>) new TypeAdapter<Target>() {
           @Override
           public void write(JsonWriter out, Target value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Target read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Target given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Target
   * @throws IOException if the JSON string is invalid with respect to Target
   */
  public static Target fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Target.class);
  }

  /**
   * Convert an instance of Target to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

