/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PanelColor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PanelColor {
  public static final String SERIALIZED_NAME_CARD_COLOR = "cardColor";
  @SerializedName(SERIALIZED_NAME_CARD_COLOR)
  private String cardColor;

  public static final String SERIALIZED_NAME_COLOR_SCALE = "colorScale";
  @SerializedName(SERIALIZED_NAME_COLOR_SCALE)
  private String colorScale;

  public static final String SERIALIZED_NAME_COLOR_SCHEME = "colorScheme";
  @SerializedName(SERIALIZED_NAME_COLOR_SCHEME)
  private String colorScheme;

  public static final String SERIALIZED_NAME_EXPONENT = "exponent";
  @SerializedName(SERIALIZED_NAME_EXPONENT)
  private Double exponent;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public PanelColor() {
  }

  public PanelColor cardColor(String cardColor) {
    this.cardColor = cardColor;
    return this;
  }

  /**
   * Get cardColor
   * @return cardColor
   */
  @javax.annotation.Nullable
  public String getCardColor() {
    return cardColor;
  }

  public void setCardColor(String cardColor) {
    this.cardColor = cardColor;
  }


  public PanelColor colorScale(String colorScale) {
    this.colorScale = colorScale;
    return this;
  }

  /**
   * Get colorScale
   * @return colorScale
   */
  @javax.annotation.Nullable
  public String getColorScale() {
    return colorScale;
  }

  public void setColorScale(String colorScale) {
    this.colorScale = colorScale;
  }


  public PanelColor colorScheme(String colorScheme) {
    this.colorScheme = colorScheme;
    return this;
  }

  /**
   * Get colorScheme
   * @return colorScheme
   */
  @javax.annotation.Nullable
  public String getColorScheme() {
    return colorScheme;
  }

  public void setColorScheme(String colorScheme) {
    this.colorScheme = colorScheme;
  }


  public PanelColor exponent(Double exponent) {
    this.exponent = exponent;
    return this;
  }

  /**
   * Get exponent
   * @return exponent
   */
  @javax.annotation.Nullable
  public Double getExponent() {
    return exponent;
  }

  public void setExponent(Double exponent) {
    this.exponent = exponent;
  }


  public PanelColor max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public PanelColor min(Double min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }


  public PanelColor mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PanelColor panelColor = (PanelColor) o;
    return Objects.equals(this.cardColor, panelColor.cardColor) &&
        Objects.equals(this.colorScale, panelColor.colorScale) &&
        Objects.equals(this.colorScheme, panelColor.colorScheme) &&
        Objects.equals(this.exponent, panelColor.exponent) &&
        Objects.equals(this.max, panelColor.max) &&
        Objects.equals(this.min, panelColor.min) &&
        Objects.equals(this.mode, panelColor.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardColor, colorScale, colorScheme, exponent, max, min, mode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PanelColor {\n");
    sb.append("    cardColor: ").append(toIndentedString(cardColor)).append("\n");
    sb.append("    colorScale: ").append(toIndentedString(colorScale)).append("\n");
    sb.append("    colorScheme: ").append(toIndentedString(colorScheme)).append("\n");
    sb.append("    exponent: ").append(toIndentedString(exponent)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardColor");
    openapiFields.add("colorScale");
    openapiFields.add("colorScheme");
    openapiFields.add("exponent");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PanelColor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PanelColor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PanelColor is not found in the empty JSON string", PanelColor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PanelColor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PanelColor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardColor") != null && !jsonObj.get("cardColor").isJsonNull()) && !jsonObj.get("cardColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardColor").toString()));
      }
      if ((jsonObj.get("colorScale") != null && !jsonObj.get("colorScale").isJsonNull()) && !jsonObj.get("colorScale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorScale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorScale").toString()));
      }
      if ((jsonObj.get("colorScheme") != null && !jsonObj.get("colorScheme").isJsonNull()) && !jsonObj.get("colorScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorScheme").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PanelColor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PanelColor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PanelColor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PanelColor.class));

       return (TypeAdapter<T>) new TypeAdapter<PanelColor>() {
           @Override
           public void write(JsonWriter out, PanelColor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PanelColor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PanelColor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PanelColor
   * @throws IOException if the JSON string is invalid with respect to PanelColor
   */
  public static PanelColor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PanelColor.class);
  }

  /**
   * Convert an instance of PanelColor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

