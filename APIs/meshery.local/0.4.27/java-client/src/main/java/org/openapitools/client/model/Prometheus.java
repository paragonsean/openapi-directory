/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SelectedGrafanaConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Prometheus represents the prometheus session config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Prometheus {
  public static final String SERIALIZED_NAME_PROMETHEUS_U_R_L = "prometheusURL";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS_U_R_L)
  private String prometheusURL;

  public static final String SERIALIZED_NAME_SELECTED_PROMETHEUS_BOARDS_CONFIGS = "selectedPrometheusBoardsConfigs";
  @SerializedName(SERIALIZED_NAME_SELECTED_PROMETHEUS_BOARDS_CONFIGS)
  private List<SelectedGrafanaConfig> selectedPrometheusBoardsConfigs = new ArrayList<>();

  public Prometheus() {
  }

  public Prometheus prometheusURL(String prometheusURL) {
    this.prometheusURL = prometheusURL;
    return this;
  }

  /**
   * Get prometheusURL
   * @return prometheusURL
   */
  @javax.annotation.Nullable
  public String getPrometheusURL() {
    return prometheusURL;
  }

  public void setPrometheusURL(String prometheusURL) {
    this.prometheusURL = prometheusURL;
  }


  public Prometheus selectedPrometheusBoardsConfigs(List<SelectedGrafanaConfig> selectedPrometheusBoardsConfigs) {
    this.selectedPrometheusBoardsConfigs = selectedPrometheusBoardsConfigs;
    return this;
  }

  public Prometheus addSelectedPrometheusBoardsConfigsItem(SelectedGrafanaConfig selectedPrometheusBoardsConfigsItem) {
    if (this.selectedPrometheusBoardsConfigs == null) {
      this.selectedPrometheusBoardsConfigs = new ArrayList<>();
    }
    this.selectedPrometheusBoardsConfigs.add(selectedPrometheusBoardsConfigsItem);
    return this;
  }

  /**
   * Get selectedPrometheusBoardsConfigs
   * @return selectedPrometheusBoardsConfigs
   */
  @javax.annotation.Nullable
  public List<SelectedGrafanaConfig> getSelectedPrometheusBoardsConfigs() {
    return selectedPrometheusBoardsConfigs;
  }

  public void setSelectedPrometheusBoardsConfigs(List<SelectedGrafanaConfig> selectedPrometheusBoardsConfigs) {
    this.selectedPrometheusBoardsConfigs = selectedPrometheusBoardsConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prometheus prometheus = (Prometheus) o;
    return Objects.equals(this.prometheusURL, prometheus.prometheusURL) &&
        Objects.equals(this.selectedPrometheusBoardsConfigs, prometheus.selectedPrometheusBoardsConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prometheusURL, selectedPrometheusBoardsConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prometheus {\n");
    sb.append("    prometheusURL: ").append(toIndentedString(prometheusURL)).append("\n");
    sb.append("    selectedPrometheusBoardsConfigs: ").append(toIndentedString(selectedPrometheusBoardsConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prometheusURL");
    openapiFields.add("selectedPrometheusBoardsConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Prometheus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Prometheus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Prometheus is not found in the empty JSON string", Prometheus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Prometheus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Prometheus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("prometheusURL") != null && !jsonObj.get("prometheusURL").isJsonNull()) && !jsonObj.get("prometheusURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prometheusURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prometheusURL").toString()));
      }
      if (jsonObj.get("selectedPrometheusBoardsConfigs") != null && !jsonObj.get("selectedPrometheusBoardsConfigs").isJsonNull()) {
        JsonArray jsonArrayselectedPrometheusBoardsConfigs = jsonObj.getAsJsonArray("selectedPrometheusBoardsConfigs");
        if (jsonArrayselectedPrometheusBoardsConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectedPrometheusBoardsConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectedPrometheusBoardsConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("selectedPrometheusBoardsConfigs").toString()));
          }

          // validate the optional field `selectedPrometheusBoardsConfigs` (array)
          for (int i = 0; i < jsonArrayselectedPrometheusBoardsConfigs.size(); i++) {
            SelectedGrafanaConfig.validateJsonElement(jsonArrayselectedPrometheusBoardsConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Prometheus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Prometheus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Prometheus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Prometheus.class));

       return (TypeAdapter<T>) new TypeAdapter<Prometheus>() {
           @Override
           public void write(JsonWriter out, Prometheus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Prometheus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Prometheus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Prometheus
   * @throws IOException if the JSON string is invalid with respect to Prometheus
   */
  public static Prometheus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Prometheus.class);
  }

  /**
   * Convert an instance of Prometheus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

