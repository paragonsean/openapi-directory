/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceTestParameters contains parameters to run a performance test
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceTestParameters {
  public static final String SERIALIZED_NAME_C = "c";
  @SerializedName(SERIALIZED_NAME_C)
  private Long c;

  public static final String SERIALIZED_NAME_DUR = "dur";
  @SerializedName(SERIALIZED_NAME_DUR)
  private String dur;

  public static final String SERIALIZED_NAME_LOAD_GENERATOR = "loadGenerator";
  @SerializedName(SERIALIZED_NAME_LOAD_GENERATOR)
  private String loadGenerator;

  public static final String SERIALIZED_NAME_MESH = "mesh";
  @SerializedName(SERIALIZED_NAME_MESH)
  private String mesh;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QPS = "qps";
  @SerializedName(SERIALIZED_NAME_QPS)
  private Long qps;

  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private Long t;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public PerformanceTestParameters() {
  }

  public PerformanceTestParameters c(Long c) {
    this.c = c;
    return this;
  }

  /**
   * concurrent request in number
   * @return c
   */
  @javax.annotation.Nullable
  public Long getC() {
    return c;
  }

  public void setC(Long c) {
    this.c = c;
  }


  public PerformanceTestParameters dur(String dur) {
    this.dur = dur;
    return this;
  }

  /**
   * duration e.g. s for second
   * @return dur
   */
  @javax.annotation.Nullable
  public String getDur() {
    return dur;
  }

  public void setDur(String dur) {
    this.dur = dur;
  }


  public PerformanceTestParameters loadGenerator(String loadGenerator) {
    this.loadGenerator = loadGenerator;
    return this;
  }

  /**
   * load generator for performance test
   * @return loadGenerator
   */
  @javax.annotation.Nullable
  public String getLoadGenerator() {
    return loadGenerator;
  }

  public void setLoadGenerator(String loadGenerator) {
    this.loadGenerator = loadGenerator;
  }


  public PerformanceTestParameters mesh(String mesh) {
    this.mesh = mesh;
    return this;
  }

  /**
   * service mesh for performance test
   * @return mesh
   */
  @javax.annotation.Nullable
  public String getMesh() {
    return mesh;
  }

  public void setMesh(String mesh) {
    this.mesh = mesh;
  }


  public PerformanceTestParameters name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of performance test
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PerformanceTestParameters qps(Long qps) {
    this.qps = qps;
    return this;
  }

  /**
   * qps in number
   * @return qps
   */
  @javax.annotation.Nullable
  public Long getQps() {
    return qps;
  }

  public void setQps(Long qps) {
    this.qps = qps;
  }


  public PerformanceTestParameters t(Long t) {
    this.t = t;
    return this;
  }

  /**
   * time in integer e.g. 30
   * @return t
   */
  @javax.annotation.Nullable
  public Long getT() {
    return t;
  }

  public void setT(Long t) {
    this.t = t;
  }


  public PerformanceTestParameters url(String url) {
    this.url = url;
    return this;
  }

  /**
   * url for test
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PerformanceTestParameters uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * test-id of pre-existing test
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceTestParameters performanceTestParameters = (PerformanceTestParameters) o;
    return Objects.equals(this.c, performanceTestParameters.c) &&
        Objects.equals(this.dur, performanceTestParameters.dur) &&
        Objects.equals(this.loadGenerator, performanceTestParameters.loadGenerator) &&
        Objects.equals(this.mesh, performanceTestParameters.mesh) &&
        Objects.equals(this.name, performanceTestParameters.name) &&
        Objects.equals(this.qps, performanceTestParameters.qps) &&
        Objects.equals(this.t, performanceTestParameters.t) &&
        Objects.equals(this.url, performanceTestParameters.url) &&
        Objects.equals(this.uuid, performanceTestParameters.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(c, dur, loadGenerator, mesh, name, qps, t, url, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceTestParameters {\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("    dur: ").append(toIndentedString(dur)).append("\n");
    sb.append("    loadGenerator: ").append(toIndentedString(loadGenerator)).append("\n");
    sb.append("    mesh: ").append(toIndentedString(mesh)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    qps: ").append(toIndentedString(qps)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("c");
    openapiFields.add("dur");
    openapiFields.add("loadGenerator");
    openapiFields.add("mesh");
    openapiFields.add("name");
    openapiFields.add("qps");
    openapiFields.add("t");
    openapiFields.add("url");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceTestParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceTestParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceTestParameters is not found in the empty JSON string", PerformanceTestParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceTestParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceTestParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dur") != null && !jsonObj.get("dur").isJsonNull()) && !jsonObj.get("dur").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dur` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dur").toString()));
      }
      if ((jsonObj.get("loadGenerator") != null && !jsonObj.get("loadGenerator").isJsonNull()) && !jsonObj.get("loadGenerator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadGenerator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadGenerator").toString()));
      }
      if ((jsonObj.get("mesh") != null && !jsonObj.get("mesh").isJsonNull()) && !jsonObj.get("mesh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mesh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mesh").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceTestParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceTestParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceTestParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceTestParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceTestParameters>() {
           @Override
           public void write(JsonWriter out, PerformanceTestParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceTestParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceTestParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceTestParameters
   * @throws IOException if the JSON string is invalid with respect to PerformanceTestParameters
   */
  public static PerformanceTestParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceTestParameters.class);
  }

  /**
   * Convert an instance of PerformanceTestParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

