/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * +protobuf&#x3D;true +protobuf.options.(gogoproto.goproto_stringer)&#x3D;false +k8s:openapi-gen&#x3D;true
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntOrString {
  public static final String SERIALIZED_NAME_INT_VAL = "IntVal";
  @SerializedName(SERIALIZED_NAME_INT_VAL)
  private Integer intVal;

  public static final String SERIALIZED_NAME_STR_VAL = "StrVal";
  @SerializedName(SERIALIZED_NAME_STR_VAL)
  private String strVal;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Long type;

  public IntOrString() {
  }

  public IntOrString intVal(Integer intVal) {
    this.intVal = intVal;
    return this;
  }

  /**
   * Get intVal
   * @return intVal
   */
  @javax.annotation.Nullable
  public Integer getIntVal() {
    return intVal;
  }

  public void setIntVal(Integer intVal) {
    this.intVal = intVal;
  }


  public IntOrString strVal(String strVal) {
    this.strVal = strVal;
    return this;
  }

  /**
   * Get strVal
   * @return strVal
   */
  @javax.annotation.Nullable
  public String getStrVal() {
    return strVal;
  }

  public void setStrVal(String strVal) {
    this.strVal = strVal;
  }


  public IntOrString type(Long type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Long getType() {
    return type;
  }

  public void setType(Long type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntOrString intOrString = (IntOrString) o;
    return Objects.equals(this.intVal, intOrString.intVal) &&
        Objects.equals(this.strVal, intOrString.strVal) &&
        Objects.equals(this.type, intOrString.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intVal, strVal, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntOrString {\n");
    sb.append("    intVal: ").append(toIndentedString(intVal)).append("\n");
    sb.append("    strVal: ").append(toIndentedString(strVal)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntVal");
    openapiFields.add("StrVal");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntOrString
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntOrString.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntOrString is not found in the empty JSON string", IntOrString.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntOrString.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntOrString` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("StrVal") != null && !jsonObj.get("StrVal").isJsonNull()) && !jsonObj.get("StrVal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StrVal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StrVal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntOrString.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntOrString' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntOrString> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntOrString.class));

       return (TypeAdapter<T>) new TypeAdapter<IntOrString>() {
           @Override
           public void write(JsonWriter out, IntOrString value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntOrString read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntOrString given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntOrString
   * @throws IOException if the JSON string is invalid with respect to IntOrString
   */
  public static IntOrString fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntOrString.class);
  }

  /**
   * Convert an instance of IntOrString to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

