/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GrafanaTemplateVars;
import org.openapitools.client.model.Panel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GrafanaBoard represents a Grafana board
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafanaBoard {
  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private Integer orgId;

  public static final String SERIALIZED_NAME_PANELS = "panels";
  @SerializedName(SERIALIZED_NAME_PANELS)
  private List<Panel> panels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TEMPLATE_VARS = "template_vars";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VARS)
  private List<GrafanaTemplateVars> templateVars = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public GrafanaBoard() {
  }

  public GrafanaBoard orgId(Integer orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Get orgId
   * @return orgId
   */
  @javax.annotation.Nullable
  public Integer getOrgId() {
    return orgId;
  }

  public void setOrgId(Integer orgId) {
    this.orgId = orgId;
  }


  public GrafanaBoard panels(List<Panel> panels) {
    this.panels = panels;
    return this;
  }

  public GrafanaBoard addPanelsItem(Panel panelsItem) {
    if (this.panels == null) {
      this.panels = new ArrayList<>();
    }
    this.panels.add(panelsItem);
    return this;
  }

  /**
   * Get panels
   * @return panels
   */
  @javax.annotation.Nullable
  public List<Panel> getPanels() {
    return panels;
  }

  public void setPanels(List<Panel> panels) {
    this.panels = panels;
  }


  public GrafanaBoard slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public GrafanaBoard templateVars(List<GrafanaTemplateVars> templateVars) {
    this.templateVars = templateVars;
    return this;
  }

  public GrafanaBoard addTemplateVarsItem(GrafanaTemplateVars templateVarsItem) {
    if (this.templateVars == null) {
      this.templateVars = new ArrayList<>();
    }
    this.templateVars.add(templateVarsItem);
    return this;
  }

  /**
   * Get templateVars
   * @return templateVars
   */
  @javax.annotation.Nullable
  public List<GrafanaTemplateVars> getTemplateVars() {
    return templateVars;
  }

  public void setTemplateVars(List<GrafanaTemplateVars> templateVars) {
    this.templateVars = templateVars;
  }


  public GrafanaBoard title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GrafanaBoard uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public GrafanaBoard uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafanaBoard grafanaBoard = (GrafanaBoard) o;
    return Objects.equals(this.orgId, grafanaBoard.orgId) &&
        Objects.equals(this.panels, grafanaBoard.panels) &&
        Objects.equals(this.slug, grafanaBoard.slug) &&
        Objects.equals(this.templateVars, grafanaBoard.templateVars) &&
        Objects.equals(this.title, grafanaBoard.title) &&
        Objects.equals(this.uid, grafanaBoard.uid) &&
        Objects.equals(this.uri, grafanaBoard.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgId, panels, slug, templateVars, title, uid, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafanaBoard {\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    panels: ").append(toIndentedString(panels)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    templateVars: ").append(toIndentedString(templateVars)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("org_id");
    openapiFields.add("panels");
    openapiFields.add("slug");
    openapiFields.add("template_vars");
    openapiFields.add("title");
    openapiFields.add("uid");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafanaBoard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafanaBoard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafanaBoard is not found in the empty JSON string", GrafanaBoard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafanaBoard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafanaBoard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("panels") != null && !jsonObj.get("panels").isJsonNull()) {
        JsonArray jsonArraypanels = jsonObj.getAsJsonArray("panels");
        if (jsonArraypanels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("panels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `panels` to be an array in the JSON string but got `%s`", jsonObj.get("panels").toString()));
          }

          // validate the optional field `panels` (array)
          for (int i = 0; i < jsonArraypanels.size(); i++) {
            Panel.validateJsonElement(jsonArraypanels.get(i));
          };
        }
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("template_vars") != null && !jsonObj.get("template_vars").isJsonNull()) {
        JsonArray jsonArraytemplateVars = jsonObj.getAsJsonArray("template_vars");
        if (jsonArraytemplateVars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("template_vars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `template_vars` to be an array in the JSON string but got `%s`", jsonObj.get("template_vars").toString()));
          }

          // validate the optional field `template_vars` (array)
          for (int i = 0; i < jsonArraytemplateVars.size(); i++) {
            GrafanaTemplateVars.validateJsonElement(jsonArraytemplateVars.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafanaBoard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafanaBoard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafanaBoard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafanaBoard.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafanaBoard>() {
           @Override
           public void write(JsonWriter out, GrafanaBoard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafanaBoard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafanaBoard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafanaBoard
   * @throws IOException if the JSON string is invalid with respect to GrafanaBoard
   */
  public static GrafanaBoard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafanaBoard.class);
  }

  /**
   * Convert an instance of GrafanaBoard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

