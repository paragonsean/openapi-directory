/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Threshold
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Threshold {
  public static final String SERIALIZED_NAME_COLOR_MODE = "colorMode";
  @SerializedName(SERIALIZED_NAME_COLOR_MODE)
  private String colorMode;

  public static final String SERIALIZED_NAME_FILL = "fill";
  @SerializedName(SERIALIZED_NAME_FILL)
  private Boolean fill;

  public static final String SERIALIZED_NAME_FILL_COLOR = "fillColor";
  @SerializedName(SERIALIZED_NAME_FILL_COLOR)
  private String fillColor;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Boolean line;

  public static final String SERIALIZED_NAME_LINE_COLOR = "lineColor";
  @SerializedName(SERIALIZED_NAME_LINE_COLOR)
  private String lineColor;

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private String op;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Float value;

  public static final String SERIALIZED_NAME_YAXIS = "yaxis";
  @SerializedName(SERIALIZED_NAME_YAXIS)
  private String yaxis;

  public Threshold() {
  }

  public Threshold colorMode(String colorMode) {
    this.colorMode = colorMode;
    return this;
  }

  /**
   * critical, warning, ok, custom
   * @return colorMode
   */
  @javax.annotation.Nullable
  public String getColorMode() {
    return colorMode;
  }

  public void setColorMode(String colorMode) {
    this.colorMode = colorMode;
  }


  public Threshold fill(Boolean fill) {
    this.fill = fill;
    return this;
  }

  /**
   * Get fill
   * @return fill
   */
  @javax.annotation.Nullable
  public Boolean getFill() {
    return fill;
  }

  public void setFill(Boolean fill) {
    this.fill = fill;
  }


  public Threshold fillColor(String fillColor) {
    this.fillColor = fillColor;
    return this;
  }

  /**
   * hexadecimal color (e.g. #629e51, only when ColorMode is \&quot;custom\&quot;)
   * @return fillColor
   */
  @javax.annotation.Nullable
  public String getFillColor() {
    return fillColor;
  }

  public void setFillColor(String fillColor) {
    this.fillColor = fillColor;
  }


  public Threshold line(Boolean line) {
    this.line = line;
    return this;
  }

  /**
   * Get line
   * @return line
   */
  @javax.annotation.Nullable
  public Boolean getLine() {
    return line;
  }

  public void setLine(Boolean line) {
    this.line = line;
  }


  public Threshold lineColor(String lineColor) {
    this.lineColor = lineColor;
    return this;
  }

  /**
   * hexadecimal color (e.g. #629e51, only when ColorMode is \&quot;custom\&quot;)
   * @return lineColor
   */
  @javax.annotation.Nullable
  public String getLineColor() {
    return lineColor;
  }

  public void setLineColor(String lineColor) {
    this.lineColor = lineColor;
  }


  public Threshold op(String op) {
    this.op = op;
    return this;
  }

  /**
   * gt or lt
   * @return op
   */
  @javax.annotation.Nullable
  public String getOp() {
    return op;
  }

  public void setOp(String op) {
    this.op = op;
  }


  public Threshold value(Float value) {
    this.value = value;
    return this;
  }

  /**
   * the alert threshold value, we do not omitempty, since 0 is a valid threshold
   * @return value
   */
  @javax.annotation.Nullable
  public Float getValue() {
    return value;
  }

  public void setValue(Float value) {
    this.value = value;
  }


  public Threshold yaxis(String yaxis) {
    this.yaxis = yaxis;
    return this;
  }

  /**
   * left or right
   * @return yaxis
   */
  @javax.annotation.Nullable
  public String getYaxis() {
    return yaxis;
  }

  public void setYaxis(String yaxis) {
    this.yaxis = yaxis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Threshold threshold = (Threshold) o;
    return Objects.equals(this.colorMode, threshold.colorMode) &&
        Objects.equals(this.fill, threshold.fill) &&
        Objects.equals(this.fillColor, threshold.fillColor) &&
        Objects.equals(this.line, threshold.line) &&
        Objects.equals(this.lineColor, threshold.lineColor) &&
        Objects.equals(this.op, threshold.op) &&
        Objects.equals(this.value, threshold.value) &&
        Objects.equals(this.yaxis, threshold.yaxis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorMode, fill, fillColor, line, lineColor, op, value, yaxis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Threshold {\n");
    sb.append("    colorMode: ").append(toIndentedString(colorMode)).append("\n");
    sb.append("    fill: ").append(toIndentedString(fill)).append("\n");
    sb.append("    fillColor: ").append(toIndentedString(fillColor)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    lineColor: ").append(toIndentedString(lineColor)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    yaxis: ").append(toIndentedString(yaxis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorMode");
    openapiFields.add("fill");
    openapiFields.add("fillColor");
    openapiFields.add("line");
    openapiFields.add("lineColor");
    openapiFields.add("op");
    openapiFields.add("value");
    openapiFields.add("yaxis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Threshold
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Threshold.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Threshold is not found in the empty JSON string", Threshold.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Threshold.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Threshold` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorMode") != null && !jsonObj.get("colorMode").isJsonNull()) && !jsonObj.get("colorMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorMode").toString()));
      }
      if ((jsonObj.get("fillColor") != null && !jsonObj.get("fillColor").isJsonNull()) && !jsonObj.get("fillColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillColor").toString()));
      }
      if ((jsonObj.get("lineColor") != null && !jsonObj.get("lineColor").isJsonNull()) && !jsonObj.get("lineColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineColor").toString()));
      }
      if ((jsonObj.get("op") != null && !jsonObj.get("op").isJsonNull()) && !jsonObj.get("op").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op").toString()));
      }
      if ((jsonObj.get("yaxis") != null && !jsonObj.get("yaxis").isJsonNull()) && !jsonObj.get("yaxis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yaxis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yaxis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Threshold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Threshold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Threshold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Threshold.class));

       return (TypeAdapter<T>) new TypeAdapter<Threshold>() {
           @Override
           public void write(JsonWriter out, Threshold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Threshold read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Threshold given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Threshold
   * @throws IOException if the JSON string is invalid with respect to Threshold
   */
  public static Threshold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Threshold.class);
  }

  /**
   * Convert an instance of Threshold to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

