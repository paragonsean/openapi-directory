/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters to updates Anonymous stats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PreferenceParams {
  public static final String SERIALIZED_NAME_ANONYMOUS_PERF_RESULTS = "anonymousPerfResults";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_PERF_RESULTS)
  private Boolean anonymousPerfResults;

  public static final String SERIALIZED_NAME_ANONYMOUS_USAGE_STATS = "anonymousUsageStats";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS_USAGE_STATS)
  private Boolean anonymousUsageStats;

  public PreferenceParams() {
  }

  public PreferenceParams anonymousPerfResults(Boolean anonymousPerfResults) {
    this.anonymousPerfResults = anonymousPerfResults;
    return this;
  }

  /**
   * Get anonymousPerfResults
   * @return anonymousPerfResults
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousPerfResults() {
    return anonymousPerfResults;
  }

  public void setAnonymousPerfResults(Boolean anonymousPerfResults) {
    this.anonymousPerfResults = anonymousPerfResults;
  }


  public PreferenceParams anonymousUsageStats(Boolean anonymousUsageStats) {
    this.anonymousUsageStats = anonymousUsageStats;
    return this;
  }

  /**
   * Get anonymousUsageStats
   * @return anonymousUsageStats
   */
  @javax.annotation.Nullable
  public Boolean getAnonymousUsageStats() {
    return anonymousUsageStats;
  }

  public void setAnonymousUsageStats(Boolean anonymousUsageStats) {
    this.anonymousUsageStats = anonymousUsageStats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreferenceParams preferenceParams = (PreferenceParams) o;
    return Objects.equals(this.anonymousPerfResults, preferenceParams.anonymousPerfResults) &&
        Objects.equals(this.anonymousUsageStats, preferenceParams.anonymousUsageStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anonymousPerfResults, anonymousUsageStats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreferenceParams {\n");
    sb.append("    anonymousPerfResults: ").append(toIndentedString(anonymousPerfResults)).append("\n");
    sb.append("    anonymousUsageStats: ").append(toIndentedString(anonymousUsageStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anonymousPerfResults");
    openapiFields.add("anonymousUsageStats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PreferenceParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PreferenceParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PreferenceParams is not found in the empty JSON string", PreferenceParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PreferenceParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PreferenceParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PreferenceParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PreferenceParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PreferenceParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PreferenceParams.class));

       return (TypeAdapter<T>) new TypeAdapter<PreferenceParams>() {
           @Override
           public void write(JsonWriter out, PreferenceParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PreferenceParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PreferenceParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PreferenceParams
   * @throws IOException if the JSON string is invalid with respect to PreferenceParams
   */
  public static PreferenceParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PreferenceParams.class);
  }

  /**
   * Convert an instance of PreferenceParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

