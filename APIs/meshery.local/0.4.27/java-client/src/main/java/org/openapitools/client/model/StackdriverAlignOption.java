/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StackdriverAlignOption defines a single alignment option shown in Grafana during query configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackdriverAlignOption {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_METRIC_KINDS = "metricKinds";
  @SerializedName(SERIALIZED_NAME_METRIC_KINDS)
  private List<String> metricKinds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_VALUE_TYPES = "valueTypes";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPES)
  private List<String> valueTypes = new ArrayList<>();

  public StackdriverAlignOption() {
  }

  public StackdriverAlignOption label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public StackdriverAlignOption metricKinds(List<String> metricKinds) {
    this.metricKinds = metricKinds;
    return this;
  }

  public StackdriverAlignOption addMetricKindsItem(String metricKindsItem) {
    if (this.metricKinds == null) {
      this.metricKinds = new ArrayList<>();
    }
    this.metricKinds.add(metricKindsItem);
    return this;
  }

  /**
   * Get metricKinds
   * @return metricKinds
   */
  @javax.annotation.Nullable
  public List<String> getMetricKinds() {
    return metricKinds;
  }

  public void setMetricKinds(List<String> metricKinds) {
    this.metricKinds = metricKinds;
  }


  public StackdriverAlignOption text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public StackdriverAlignOption value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public StackdriverAlignOption valueTypes(List<String> valueTypes) {
    this.valueTypes = valueTypes;
    return this;
  }

  public StackdriverAlignOption addValueTypesItem(String valueTypesItem) {
    if (this.valueTypes == null) {
      this.valueTypes = new ArrayList<>();
    }
    this.valueTypes.add(valueTypesItem);
    return this;
  }

  /**
   * Get valueTypes
   * @return valueTypes
   */
  @javax.annotation.Nullable
  public List<String> getValueTypes() {
    return valueTypes;
  }

  public void setValueTypes(List<String> valueTypes) {
    this.valueTypes = valueTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackdriverAlignOption stackdriverAlignOption = (StackdriverAlignOption) o;
    return Objects.equals(this.label, stackdriverAlignOption.label) &&
        Objects.equals(this.metricKinds, stackdriverAlignOption.metricKinds) &&
        Objects.equals(this.text, stackdriverAlignOption.text) &&
        Objects.equals(this.value, stackdriverAlignOption.value) &&
        Objects.equals(this.valueTypes, stackdriverAlignOption.valueTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, metricKinds, text, value, valueTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackdriverAlignOption {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    metricKinds: ").append(toIndentedString(metricKinds)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueTypes: ").append(toIndentedString(valueTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("metricKinds");
    openapiFields.add("text");
    openapiFields.add("value");
    openapiFields.add("valueTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackdriverAlignOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackdriverAlignOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackdriverAlignOption is not found in the empty JSON string", StackdriverAlignOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackdriverAlignOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackdriverAlignOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricKinds") != null && !jsonObj.get("metricKinds").isJsonNull() && !jsonObj.get("metricKinds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricKinds` to be an array in the JSON string but got `%s`", jsonObj.get("metricKinds").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valueTypes") != null && !jsonObj.get("valueTypes").isJsonNull() && !jsonObj.get("valueTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueTypes` to be an array in the JSON string but got `%s`", jsonObj.get("valueTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackdriverAlignOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackdriverAlignOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackdriverAlignOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackdriverAlignOption.class));

       return (TypeAdapter<T>) new TypeAdapter<StackdriverAlignOption>() {
           @Override
           public void write(JsonWriter out, StackdriverAlignOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackdriverAlignOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackdriverAlignOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackdriverAlignOption
   * @throws IOException if the JSON string is invalid with respect to StackdriverAlignOption
   */
  public static StackdriverAlignOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackdriverAlignOption.class);
  }

  /**
   * Convert an instance of StackdriverAlignOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

