/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OptionsReduceOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OptionsReduceOptions {
  public static final String SERIALIZED_NAME_CALCS = "calcs";
  @SerializedName(SERIALIZED_NAME_CALCS)
  private List<String> calcs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private String fields;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private Boolean values;

  public OptionsReduceOptions() {
  }

  public OptionsReduceOptions calcs(List<String> calcs) {
    this.calcs = calcs;
    return this;
  }

  public OptionsReduceOptions addCalcsItem(String calcsItem) {
    if (this.calcs == null) {
      this.calcs = new ArrayList<>();
    }
    this.calcs.add(calcsItem);
    return this;
  }

  /**
   * Get calcs
   * @return calcs
   */
  @javax.annotation.Nullable
  public List<String> getCalcs() {
    return calcs;
  }

  public void setCalcs(List<String> calcs) {
    this.calcs = calcs;
  }


  public OptionsReduceOptions fields(String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public String getFields() {
    return fields;
  }

  public void setFields(String fields) {
    this.fields = fields;
  }


  public OptionsReduceOptions values(Boolean values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public Boolean getValues() {
    return values;
  }

  public void setValues(Boolean values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionsReduceOptions optionsReduceOptions = (OptionsReduceOptions) o;
    return Objects.equals(this.calcs, optionsReduceOptions.calcs) &&
        Objects.equals(this.fields, optionsReduceOptions.fields) &&
        Objects.equals(this.values, optionsReduceOptions.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calcs, fields, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionsReduceOptions {\n");
    sb.append("    calcs: ").append(toIndentedString(calcs)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calcs");
    openapiFields.add("fields");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OptionsReduceOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptionsReduceOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptionsReduceOptions is not found in the empty JSON string", OptionsReduceOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OptionsReduceOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OptionsReduceOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("calcs") != null && !jsonObj.get("calcs").isJsonNull() && !jsonObj.get("calcs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `calcs` to be an array in the JSON string but got `%s`", jsonObj.get("calcs").toString()));
      }
      if ((jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) && !jsonObj.get("fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptionsReduceOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptionsReduceOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptionsReduceOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptionsReduceOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<OptionsReduceOptions>() {
           @Override
           public void write(JsonWriter out, OptionsReduceOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptionsReduceOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OptionsReduceOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OptionsReduceOptions
   * @throws IOException if the JSON string is invalid with respect to OptionsReduceOptions
   */
  public static OptionsReduceOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptionsReduceOptions.class);
  }

  /**
   * Convert an instance of OptionsReduceOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

