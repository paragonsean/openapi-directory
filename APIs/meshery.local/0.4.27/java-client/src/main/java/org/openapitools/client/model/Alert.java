/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AlertCondition;
import org.openapitools.client.model.AlertNotification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Alert {
  public static final String SERIALIZED_NAME_ALERT_RULE_TAGS = "alertRuleTags";
  @SerializedName(SERIALIZED_NAME_ALERT_RULE_TAGS)
  private Map<String, String> alertRuleTags = new HashMap<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<AlertCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_ERROR_STATE = "executionErrorState";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ERROR_STATE)
  private String executionErrorState;

  public static final String SERIALIZED_NAME_FOR = "for";
  @SerializedName(SERIALIZED_NAME_FOR)
  private String _for;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_HANDLER = "handler";
  @SerializedName(SERIALIZED_NAME_HANDLER)
  private Long handler;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_DATA_STATE = "noDataState";
  @SerializedName(SERIALIZED_NAME_NO_DATA_STATE)
  private String noDataState;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<AlertNotification> notifications = new ArrayList<>();

  public Alert() {
  }

  public Alert alertRuleTags(Map<String, String> alertRuleTags) {
    this.alertRuleTags = alertRuleTags;
    return this;
  }

  public Alert putAlertRuleTagsItem(String key, String alertRuleTagsItem) {
    if (this.alertRuleTags == null) {
      this.alertRuleTags = new HashMap<>();
    }
    this.alertRuleTags.put(key, alertRuleTagsItem);
    return this;
  }

  /**
   * Get alertRuleTags
   * @return alertRuleTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getAlertRuleTags() {
    return alertRuleTags;
  }

  public void setAlertRuleTags(Map<String, String> alertRuleTags) {
    this.alertRuleTags = alertRuleTags;
  }


  public Alert conditions(List<AlertCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public Alert addConditionsItem(AlertCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<AlertCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<AlertCondition> conditions) {
    this.conditions = conditions;
  }


  public Alert executionErrorState(String executionErrorState) {
    this.executionErrorState = executionErrorState;
    return this;
  }

  /**
   * Get executionErrorState
   * @return executionErrorState
   */
  @javax.annotation.Nullable
  public String getExecutionErrorState() {
    return executionErrorState;
  }

  public void setExecutionErrorState(String executionErrorState) {
    this.executionErrorState = executionErrorState;
  }


  public Alert _for(String _for) {
    this._for = _for;
    return this;
  }

  /**
   * Get _for
   * @return _for
   */
  @javax.annotation.Nullable
  public String getFor() {
    return _for;
  }

  public void setFor(String _for) {
    this._for = _for;
  }


  public Alert frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public Alert handler(Long handler) {
    this.handler = handler;
    return this;
  }

  /**
   * Get handler
   * @return handler
   */
  @javax.annotation.Nullable
  public Long getHandler() {
    return handler;
  }

  public void setHandler(Long handler) {
    this.handler = handler;
  }


  public Alert message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Alert name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Alert noDataState(String noDataState) {
    this.noDataState = noDataState;
    return this;
  }

  /**
   * Get noDataState
   * @return noDataState
   */
  @javax.annotation.Nullable
  public String getNoDataState() {
    return noDataState;
  }

  public void setNoDataState(String noDataState) {
    this.noDataState = noDataState;
  }


  public Alert notifications(List<AlertNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public Alert addNotificationsItem(AlertNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<AlertNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<AlertNotification> notifications) {
    this.notifications = notifications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.alertRuleTags, alert.alertRuleTags) &&
        Objects.equals(this.conditions, alert.conditions) &&
        Objects.equals(this.executionErrorState, alert.executionErrorState) &&
        Objects.equals(this._for, alert._for) &&
        Objects.equals(this.frequency, alert.frequency) &&
        Objects.equals(this.handler, alert.handler) &&
        Objects.equals(this.message, alert.message) &&
        Objects.equals(this.name, alert.name) &&
        Objects.equals(this.noDataState, alert.noDataState) &&
        Objects.equals(this.notifications, alert.notifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertRuleTags, conditions, executionErrorState, _for, frequency, handler, message, name, noDataState, notifications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");
    sb.append("    alertRuleTags: ").append(toIndentedString(alertRuleTags)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    executionErrorState: ").append(toIndentedString(executionErrorState)).append("\n");
    sb.append("    _for: ").append(toIndentedString(_for)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noDataState: ").append(toIndentedString(noDataState)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertRuleTags");
    openapiFields.add("conditions");
    openapiFields.add("executionErrorState");
    openapiFields.add("for");
    openapiFields.add("frequency");
    openapiFields.add("handler");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("noDataState");
    openapiFields.add("notifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alert is not found in the empty JSON string", Alert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            AlertCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("executionErrorState") != null && !jsonObj.get("executionErrorState").isJsonNull()) && !jsonObj.get("executionErrorState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionErrorState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionErrorState").toString()));
      }
      if ((jsonObj.get("for") != null && !jsonObj.get("for").isJsonNull()) && !jsonObj.get("for").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("noDataState") != null && !jsonObj.get("noDataState").isJsonNull()) && !jsonObj.get("noDataState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noDataState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noDataState").toString()));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            AlertNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alert.class));

       return (TypeAdapter<T>) new TypeAdapter<Alert>() {
           @Override
           public void write(JsonWriter out, Alert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alert
   * @throws IOException if the JSON string is invalid with respect to Alert
   */
  public static Alert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alert.class);
  }

  /**
   * Convert an instance of Alert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

