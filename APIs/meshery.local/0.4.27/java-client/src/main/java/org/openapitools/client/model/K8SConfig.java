/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.K8SNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * K8SConfig represents all the k8s session config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class K8SConfig {
  public static final String SERIALIZED_NAME_CLUSTER_CONFIGURED = "clusterConfigured";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CONFIGURED)
  private Boolean clusterConfigured;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private List<Integer> config = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURED_SERVER = "configuredServer";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_SERVER)
  private String configuredServer;

  public static final String SERIALIZED_NAME_CONTEXT_NAME = "contextName";
  @SerializedName(SERIALIZED_NAME_CONTEXT_NAME)
  private String contextName;

  public static final String SERIALIZED_NAME_IN_CLUSTER_CONFIG = "inClusterConfig";
  @SerializedName(SERIALIZED_NAME_IN_CLUSTER_CONFIG)
  private Boolean inClusterConfig;

  public static final String SERIALIZED_NAME_K8SFILE = "k8sfile";
  @SerializedName(SERIALIZED_NAME_K8SFILE)
  private String k8sfile;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<K8SNode> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_VERSION = "server_version";
  @SerializedName(SERIALIZED_NAME_SERVER_VERSION)
  private String serverVersion;

  public K8SConfig() {
  }

  public K8SConfig clusterConfigured(Boolean clusterConfigured) {
    this.clusterConfigured = clusterConfigured;
    return this;
  }

  /**
   * Get clusterConfigured
   * @return clusterConfigured
   */
  @javax.annotation.Nullable
  public Boolean getClusterConfigured() {
    return clusterConfigured;
  }

  public void setClusterConfigured(Boolean clusterConfigured) {
    this.clusterConfigured = clusterConfigured;
  }


  public K8SConfig config(List<Integer> config) {
    this.config = config;
    return this;
  }

  public K8SConfig addConfigItem(Integer configItem) {
    if (this.config == null) {
      this.config = new ArrayList<>();
    }
    this.config.add(configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public List<Integer> getConfig() {
    return config;
  }

  public void setConfig(List<Integer> config) {
    this.config = config;
  }


  public K8SConfig configuredServer(String configuredServer) {
    this.configuredServer = configuredServer;
    return this;
  }

  /**
   * Get configuredServer
   * @return configuredServer
   */
  @javax.annotation.Nullable
  public String getConfiguredServer() {
    return configuredServer;
  }

  public void setConfiguredServer(String configuredServer) {
    this.configuredServer = configuredServer;
  }


  public K8SConfig contextName(String contextName) {
    this.contextName = contextName;
    return this;
  }

  /**
   * Get contextName
   * @return contextName
   */
  @javax.annotation.Nullable
  public String getContextName() {
    return contextName;
  }

  public void setContextName(String contextName) {
    this.contextName = contextName;
  }


  public K8SConfig inClusterConfig(Boolean inClusterConfig) {
    this.inClusterConfig = inClusterConfig;
    return this;
  }

  /**
   * Get inClusterConfig
   * @return inClusterConfig
   */
  @javax.annotation.Nullable
  public Boolean getInClusterConfig() {
    return inClusterConfig;
  }

  public void setInClusterConfig(Boolean inClusterConfig) {
    this.inClusterConfig = inClusterConfig;
  }


  public K8SConfig k8sfile(String k8sfile) {
    this.k8sfile = k8sfile;
    return this;
  }

  /**
   * Get k8sfile
   * @return k8sfile
   */
  @javax.annotation.Nullable
  public String getK8sfile() {
    return k8sfile;
  }

  public void setK8sfile(String k8sfile) {
    this.k8sfile = k8sfile;
  }


  public K8SConfig nodes(List<K8SNode> nodes) {
    this.nodes = nodes;
    return this;
  }

  public K8SConfig addNodesItem(K8SNode nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Get nodes
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<K8SNode> getNodes() {
    return nodes;
  }

  public void setNodes(List<K8SNode> nodes) {
    this.nodes = nodes;
  }


  public K8SConfig serverVersion(String serverVersion) {
    this.serverVersion = serverVersion;
    return this;
  }

  /**
   * Get serverVersion
   * @return serverVersion
   */
  @javax.annotation.Nullable
  public String getServerVersion() {
    return serverVersion;
  }

  public void setServerVersion(String serverVersion) {
    this.serverVersion = serverVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    K8SConfig k8SConfig = (K8SConfig) o;
    return Objects.equals(this.clusterConfigured, k8SConfig.clusterConfigured) &&
        Objects.equals(this.config, k8SConfig.config) &&
        Objects.equals(this.configuredServer, k8SConfig.configuredServer) &&
        Objects.equals(this.contextName, k8SConfig.contextName) &&
        Objects.equals(this.inClusterConfig, k8SConfig.inClusterConfig) &&
        Objects.equals(this.k8sfile, k8SConfig.k8sfile) &&
        Objects.equals(this.nodes, k8SConfig.nodes) &&
        Objects.equals(this.serverVersion, k8SConfig.serverVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterConfigured, config, configuredServer, contextName, inClusterConfig, k8sfile, nodes, serverVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class K8SConfig {\n");
    sb.append("    clusterConfigured: ").append(toIndentedString(clusterConfigured)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    configuredServer: ").append(toIndentedString(configuredServer)).append("\n");
    sb.append("    contextName: ").append(toIndentedString(contextName)).append("\n");
    sb.append("    inClusterConfig: ").append(toIndentedString(inClusterConfig)).append("\n");
    sb.append("    k8sfile: ").append(toIndentedString(k8sfile)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    serverVersion: ").append(toIndentedString(serverVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterConfigured");
    openapiFields.add("config");
    openapiFields.add("configuredServer");
    openapiFields.add("contextName");
    openapiFields.add("inClusterConfig");
    openapiFields.add("k8sfile");
    openapiFields.add("nodes");
    openapiFields.add("server_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to K8SConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!K8SConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in K8SConfig is not found in the empty JSON string", K8SConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!K8SConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `K8SConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull() && !jsonObj.get("config").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be an array in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if ((jsonObj.get("configuredServer") != null && !jsonObj.get("configuredServer").isJsonNull()) && !jsonObj.get("configuredServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuredServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuredServer").toString()));
      }
      if ((jsonObj.get("contextName") != null && !jsonObj.get("contextName").isJsonNull()) && !jsonObj.get("contextName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextName").toString()));
      }
      if ((jsonObj.get("k8sfile") != null && !jsonObj.get("k8sfile").isJsonNull()) && !jsonObj.get("k8sfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8sfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8sfile").toString()));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            K8SNode.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
      if ((jsonObj.get("server_version") != null && !jsonObj.get("server_version").isJsonNull()) && !jsonObj.get("server_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!K8SConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'K8SConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<K8SConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(K8SConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<K8SConfig>() {
           @Override
           public void write(JsonWriter out, K8SConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public K8SConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of K8SConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of K8SConfig
   * @throws IOException if the JSON string is invalid with respect to K8SConfig
   */
  public static K8SConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, K8SConfig.class);
  }

  /**
   * Convert an instance of K8SConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

