/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.SchedulesAPIResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchedulesApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchedulesApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchedulesApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for idDeleteSchedules
     * @param id id for a specific (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteSchedulesCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/schedules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idDeleteSchedulesValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling idDeleteSchedules(Async)");
        }

        return idDeleteSchedulesCall(id, _callback);

    }

    /**
     * Handle DELETE reqeuest for Schedules
     * Deletes a schedule with the given id
     * @param id id for a specific (required)
     * @return SchedulesAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesAPIResponse idDeleteSchedules(UUID id) throws ApiException {
        ApiResponse<SchedulesAPIResponse> localVarResp = idDeleteSchedulesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Handle DELETE reqeuest for Schedules
     * Deletes a schedule with the given id
     * @param id id for a specific (required)
     * @return ApiResponse&lt;SchedulesAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesAPIResponse> idDeleteSchedulesWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = idDeleteSchedulesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SchedulesAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle DELETE reqeuest for Schedules (asynchronously)
     * Deletes a schedule with the given id
     * @param id id for a specific (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteSchedulesAsync(UUID id, final ApiCallback<SchedulesAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = idDeleteSchedulesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SchedulesAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idGetSchedules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSchedulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idGetSchedulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idGetSchedulesCall(_callback);

    }

    /**
     * Handle GET reqeuest for Schedules
     * Returns the list of all the schedules saved by the current user
     * @return SchedulesAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesAPIResponse idGetSchedules() throws ApiException {
        ApiResponse<SchedulesAPIResponse> localVarResp = idGetSchedulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle GET reqeuest for Schedules
     * Returns the list of all the schedules saved by the current user
     * @return ApiResponse&lt;SchedulesAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesAPIResponse> idGetSchedulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idGetSchedulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SchedulesAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET reqeuest for Schedules (asynchronously)
     * Returns the list of all the schedules saved by the current user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns List of saved schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSchedulesAsync(final ApiCallback<SchedulesAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = idGetSchedulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SchedulesAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idGetSingleSchedule
     * @param id id for a specific (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSingleScheduleCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/schedules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idGetSingleScheduleValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling idGetSingleSchedule(Async)");
        }

        return idGetSingleScheduleCall(id, _callback);

    }

    /**
     * Handle GET reqeuest for Schedules
     * Fetches and returns the schedule with the given id
     * @param id id for a specific (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public Schedule idGetSingleSchedule(UUID id) throws ApiException {
        ApiResponse<Schedule> localVarResp = idGetSingleScheduleWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Handle GET reqeuest for Schedules
     * Fetches and returns the schedule with the given id
     * @param id id for a specific (required)
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> idGetSingleScheduleWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = idGetSingleScheduleValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET reqeuest for Schedules (asynchronously)
     * Fetches and returns the schedule with the given id
     * @param id id for a specific (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSingleScheduleAsync(UUID id, final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = idGetSingleScheduleValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idPostSchedules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostSchedulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idPostSchedulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idPostSchedulesCall(_callback);

    }

    /**
     * Handle POST reqeuest for Schedules
     * Save schedule using the current provider&#39;s persistence mechanism
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public Schedule idPostSchedules() throws ApiException {
        ApiResponse<Schedule> localVarResp = idPostSchedulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle POST reqeuest for Schedules
     * Save schedule using the current provider&#39;s persistence mechanism
     * @return ApiResponse&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedule> idPostSchedulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idPostSchedulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle POST reqeuest for Schedules (asynchronously)
     * Save schedule using the current provider&#39;s persistence mechanism
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostSchedulesAsync(final ApiCallback<Schedule> _callback) throws ApiException {

        okhttp3.Call localVarCall = idPostSchedulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Schedule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
