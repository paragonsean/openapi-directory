/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GrafanaDataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GrafanaTemplateVars represents template variables in a bboard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafanaTemplateVars {
  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private GrafanaDataSource datasource;

  public static final String SERIALIZED_NAME_HIDE = "hide";
  @SerializedName(SERIALIZED_NAME_HIDE)
  private Integer hide;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public GrafanaTemplateVars() {
  }

  public GrafanaTemplateVars datasource(GrafanaDataSource datasource) {
    this.datasource = datasource;
    return this;
  }

  /**
   * Get datasource
   * @return datasource
   */
  @javax.annotation.Nullable
  public GrafanaDataSource getDatasource() {
    return datasource;
  }

  public void setDatasource(GrafanaDataSource datasource) {
    this.datasource = datasource;
  }


  public GrafanaTemplateVars hide(Integer hide) {
    this.hide = hide;
    return this;
  }

  /**
   * Get hide
   * @return hide
   */
  @javax.annotation.Nullable
  public Integer getHide() {
    return hide;
  }

  public void setHide(Integer hide) {
    this.hide = hide;
  }


  public GrafanaTemplateVars name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GrafanaTemplateVars query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public GrafanaTemplateVars value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafanaTemplateVars grafanaTemplateVars = (GrafanaTemplateVars) o;
    return Objects.equals(this.datasource, grafanaTemplateVars.datasource) &&
        Objects.equals(this.hide, grafanaTemplateVars.hide) &&
        Objects.equals(this.name, grafanaTemplateVars.name) &&
        Objects.equals(this.query, grafanaTemplateVars.query) &&
        Objects.equals(this.value, grafanaTemplateVars.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasource, hide, name, query, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafanaTemplateVars {\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasource");
    openapiFields.add("hide");
    openapiFields.add("name");
    openapiFields.add("query");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafanaTemplateVars
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafanaTemplateVars.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafanaTemplateVars is not found in the empty JSON string", GrafanaTemplateVars.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafanaTemplateVars.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafanaTemplateVars` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `datasource`
      if (jsonObj.get("datasource") != null && !jsonObj.get("datasource").isJsonNull()) {
        GrafanaDataSource.validateJsonElement(jsonObj.get("datasource"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafanaTemplateVars.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafanaTemplateVars' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafanaTemplateVars> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafanaTemplateVars.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafanaTemplateVars>() {
           @Override
           public void write(JsonWriter out, GrafanaTemplateVars value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafanaTemplateVars read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafanaTemplateVars given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafanaTemplateVars
   * @throws IOException if the JSON string is invalid with respect to GrafanaTemplateVars
   */
  public static GrafanaTemplateVars fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafanaTemplateVars.class);
  }

  /**
   * Convert an instance of GrafanaTemplateVars to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

