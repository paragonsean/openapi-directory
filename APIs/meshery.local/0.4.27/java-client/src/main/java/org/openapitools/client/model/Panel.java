/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.Axis;
import org.openapitools.client.model.Column;
import org.openapitools.client.model.ColumnStyle;
import org.openapitools.client.model.FieldConfig;
import org.openapitools.client.model.Gauge;
import org.openapitools.client.model.IntString;
import org.openapitools.client.model.Legend;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.MapType;
import org.openapitools.client.model.Options;
import org.openapitools.client.model.PanelCards;
import org.openapitools.client.model.PanelColor;
import org.openapitools.client.model.PanelGridPos;
import org.openapitools.client.model.PanelScopedVarsValue;
import org.openapitools.client.model.PanelXAxis;
import org.openapitools.client.model.PanelYAxis;
import org.openapitools.client.model.RangeMap;
import org.openapitools.client.model.SeriesOverride;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SparkLine;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.Threshold;
import org.openapitools.client.model.Tooltip;
import org.openapitools.client.model.ValueMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Panel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Panel {
  public static final String SERIALIZED_NAME_ALERT = "alert";
  @SerializedName(SERIALIZED_NAME_ALERT)
  private Alert alert;

  public static final String SERIALIZED_NAME_ALIAS_COLORS = "aliasColors";
  @SerializedName(SERIALIZED_NAME_ALIAS_COLORS)
  private Object aliasColors;

  public static final String SERIALIZED_NAME_BARS = "bars";
  @SerializedName(SERIALIZED_NAME_BARS)
  private Boolean bars;

  public static final String SERIALIZED_NAME_CARDS = "cards";
  @SerializedName(SERIALIZED_NAME_CARDS)
  private PanelCards cards;

  public static final String SERIALIZED_NAME_COLLAPSED = "collapsed";
  @SerializedName(SERIALIZED_NAME_COLLAPSED)
  private Boolean collapsed;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private PanelColor color;

  public static final String SERIALIZED_NAME_COLOR_BACKGROUND = "colorBackground";
  @SerializedName(SERIALIZED_NAME_COLOR_BACKGROUND)
  private Boolean colorBackground;

  public static final String SERIALIZED_NAME_COLOR_VALUE = "colorValue";
  @SerializedName(SERIALIZED_NAME_COLOR_VALUE)
  private Boolean colorValue;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<Column> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DASH_LENGTH = "dashLength";
  @SerializedName(SERIALIZED_NAME_DASH_LENGTH)
  private Integer dashLength;

  public static final String SERIALIZED_NAME_DASHBOARD_TAGS = "dashboardTags";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_TAGS)
  private List<String> dashboardTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DASHES = "dashes";
  @SerializedName(SERIALIZED_NAME_DASHES)
  private Boolean dashes;

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private String dataFormat;

  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private String datasource;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private Long decimals;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDITABLE = "editable";
  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Boolean error;

  public static final String SERIALIZED_NAME_FIELD_CONFIG = "fieldConfig";
  @SerializedName(SERIALIZED_NAME_FIELD_CONFIG)
  private FieldConfig fieldConfig;

  public static final String SERIALIZED_NAME_FILL = "fill";
  @SerializedName(SERIALIZED_NAME_FILL)
  private Long fill;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private Long folderId;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_GAUGE = "gauge";
  @SerializedName(SERIALIZED_NAME_GAUGE)
  private Gauge gauge;

  public static final String SERIALIZED_NAME_GRID_POS = "gridPos";
  @SerializedName(SERIALIZED_NAME_GRID_POS)
  private PanelGridPos gridPos;

  public static final String SERIALIZED_NAME_HEADINGS = "headings";
  @SerializedName(SERIALIZED_NAME_HEADINGS)
  private Boolean headings;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Object height;

  public static final String SERIALIZED_NAME_HIDE_TIME_OVERRIDE = "hideTimeOverride";
  @SerializedName(SERIALIZED_NAME_HIDE_TIME_OVERRIDE)
  private Boolean hideTimeOverride;

  public static final String SERIALIZED_NAME_HIDE_ZERO_BUCKETS = "hideZeroBuckets";
  @SerializedName(SERIALIZED_NAME_HIDE_ZERO_BUCKETS)
  private Boolean hideZeroBuckets;

  public static final String SERIALIZED_NAME_HIGHLIGHT_CARDS = "highlightCards";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_CARDS)
  private Boolean highlightCards;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_NEW = "isNew";
  @SerializedName(SERIALIZED_NAME_IS_NEW)
  private Boolean isNew;

  public static final String SERIALIZED_NAME_LEFT_Y_AXIS_LABEL = "leftYAxisLabel";
  @SerializedName(SERIALIZED_NAME_LEFT_Y_AXIS_LABEL)
  private String leftYAxisLabel;

  public static final String SERIALIZED_NAME_LEGEND = "legend";
  @SerializedName(SERIALIZED_NAME_LEGEND)
  private Legend legend;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private Boolean lines;

  public static final String SERIALIZED_NAME_LINEWIDTH = "linewidth";
  @SerializedName(SERIALIZED_NAME_LINEWIDTH)
  private Integer linewidth;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "mappingType";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private Integer mappingType;

  public static final String SERIALIZED_NAME_MAPPING_TYPES = "mappingTypes";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPES)
  private List<MapType> mappingTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_DATA_POINTS = "maxDataPoints";
  @SerializedName(SERIALIZED_NAME_MAX_DATA_POINTS)
  private IntString maxDataPoints;

  public static final String SERIALIZED_NAME_MIN_SPAN = "minSpan";
  @SerializedName(SERIALIZED_NAME_MIN_SPAN)
  private Float minSpan;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_NAME_FILTER = "nameFilter";
  @SerializedName(SERIALIZED_NAME_NAME_FILTER)
  private String nameFilter;

  public static final String SERIALIZED_NAME_NULL_POINT_MODE = "nullPointMode";
  @SerializedName(SERIALIZED_NAME_NULL_POINT_MODE)
  private String nullPointMode;

  public static final String SERIALIZED_NAME_ONLY_ALERTS_ON_DASHBOARD = "onlyAlertsOnDashboard";
  @SerializedName(SERIALIZED_NAME_ONLY_ALERTS_ON_DASHBOARD)
  private Boolean onlyAlertsOnDashboard;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PANELS = "panels";
  @SerializedName(SERIALIZED_NAME_PANELS)
  private List<Panel> panels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Boolean percentage;

  public static final String SERIALIZED_NAME_POINTRADIUS = "pointradius";
  @SerializedName(SERIALIZED_NAME_POINTRADIUS)
  private Float pointradius;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Boolean points;

  public static final String SERIALIZED_NAME_POSTFIX = "postfix";
  @SerializedName(SERIALIZED_NAME_POSTFIX)
  private String postfix;

  public static final String SERIALIZED_NAME_POSTFIX_FONT_SIZE = "postfixFontSize";
  @SerializedName(SERIALIZED_NAME_POSTFIX_FONT_SIZE)
  private String postfixFontSize;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_PREFIX_FONT_SIZE = "prefixFontSize";
  @SerializedName(SERIALIZED_NAME_PREFIX_FONT_SIZE)
  private String prefixFontSize;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RANGE_MAPS = "rangeMaps";
  @SerializedName(SERIALIZED_NAME_RANGE_MAPS)
  private List<RangeMap> rangeMaps = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECENT = "recent";
  @SerializedName(SERIALIZED_NAME_RECENT)
  private Boolean recent;

  public static final String SERIALIZED_NAME_RENDERER = "renderer";
  @SerializedName(SERIALIZED_NAME_RENDERER)
  private String renderer;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private String repeat;

  public static final String SERIALIZED_NAME_REPEAT_PANEL_ID = "repeatPanelId";
  @SerializedName(SERIALIZED_NAME_REPEAT_PANEL_ID)
  private Integer repeatPanelId;

  public static final String SERIALIZED_NAME_REVERSE_Y_BUCKETS = "reverseYBuckets";
  @SerializedName(SERIALIZED_NAME_REVERSE_Y_BUCKETS)
  private Boolean reverseYBuckets;

  public static final String SERIALIZED_NAME_RIGHT_Y_AXIS_LABEL = "rightYAxisLabel";
  @SerializedName(SERIALIZED_NAME_RIGHT_Y_AXIS_LABEL)
  private String rightYAxisLabel;

  public static final String SERIALIZED_NAME_SCOPED_VARS = "scopedVars";
  @SerializedName(SERIALIZED_NAME_SCOPED_VARS)
  private Map<String, PanelScopedVarsValue> scopedVars = new HashMap<>();

  public static final String SERIALIZED_NAME_SCROLL = "scroll";
  @SerializedName(SERIALIZED_NAME_SCROLL)
  private Boolean scroll;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private Boolean search;

  public static final String SERIALIZED_NAME_SERIES_OVERRIDES = "seriesOverrides";
  @SerializedName(SERIALIZED_NAME_SERIES_OVERRIDES)
  private List<SeriesOverride> seriesOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW = "show";
  @SerializedName(SERIALIZED_NAME_SHOW)
  private String show;

  public static final String SERIALIZED_NAME_SHOW_HEADER = "showHeader";
  @SerializedName(SERIALIZED_NAME_SHOW_HEADER)
  private Boolean showHeader;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Sort sort;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Long sortOrder;

  public static final String SERIALIZED_NAME_SPACE_LENGTH = "spaceLength";
  @SerializedName(SERIALIZED_NAME_SPACE_LENGTH)
  private Integer spaceLength;

  public static final String SERIALIZED_NAME_SPAN = "span";
  @SerializedName(SERIALIZED_NAME_SPAN)
  private Float span;

  public static final String SERIALIZED_NAME_SPARKLINE = "sparkline";
  @SerializedName(SERIALIZED_NAME_SPARKLINE)
  private SparkLine sparkline;

  public static final String SERIALIZED_NAME_STACK = "stack";
  @SerializedName(SERIALIZED_NAME_STACK)
  private Boolean stack;

  public static final String SERIALIZED_NAME_STARRED = "starred";
  @SerializedName(SERIALIZED_NAME_STARRED)
  private Boolean starred;

  public static final String SERIALIZED_NAME_STATE_FILTER = "stateFilter";
  @SerializedName(SERIALIZED_NAME_STATE_FILTER)
  private List<String> stateFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEPPED_LINE = "steppedLine";
  @SerializedName(SERIALIZED_NAME_STEPPED_LINE)
  private Boolean steppedLine;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private List<ColumnStyle> styles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  private List<Threshold> thresholds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_FROM = "timeFrom";
  @SerializedName(SERIALIZED_NAME_TIME_FROM)
  private String timeFrom;

  public static final String SERIALIZED_NAME_TIME_SHIFT = "timeShift";
  @SerializedName(SERIALIZED_NAME_TIME_SHIFT)
  private String timeShift;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOOLTIP = "tooltip";
  @SerializedName(SERIALIZED_NAME_TOOLTIP)
  private Tooltip tooltip;

  public static final String SERIALIZED_NAME_TOOLTIP_DECIMALS = "tooltipDecimals";
  @SerializedName(SERIALIZED_NAME_TOOLTIP_DECIMALS)
  private Long tooltipDecimals;

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private String transform;

  public static final String SERIALIZED_NAME_TRANSPARENT = "transparent";
  @SerializedName(SERIALIZED_NAME_TRANSPARENT)
  private Boolean transparent;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE_FONT_SIZE = "valueFontSize";
  @SerializedName(SERIALIZED_NAME_VALUE_FONT_SIZE)
  private String valueFontSize;

  public static final String SERIALIZED_NAME_VALUE_MAPS = "valueMaps";
  @SerializedName(SERIALIZED_NAME_VALUE_MAPS)
  private List<ValueMap> valueMaps = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_NAME = "valueName";
  @SerializedName(SERIALIZED_NAME_VALUE_NAME)
  private String valueName;

  public static final String SERIALIZED_NAME_X_AXIS = "x-axis";
  @SerializedName(SERIALIZED_NAME_X_AXIS)
  private Boolean xAxis;

  public static final String SERIALIZED_NAME_X_AXIS = "xAxis";
  @SerializedName(SERIALIZED_NAME_X_AXIS)
  private PanelXAxis xAxis;

  public static final String SERIALIZED_NAME_X_BUCKET_NUMBER = "xBucketNumber";
  @SerializedName(SERIALIZED_NAME_X_BUCKET_NUMBER)
  private Double xBucketNumber;

  public static final String SERIALIZED_NAME_X_BUCKET_SIZE = "xBucketSize";
  @SerializedName(SERIALIZED_NAME_X_BUCKET_SIZE)
  private String xBucketSize;

  public static final String SERIALIZED_NAME_XAXIS = "xaxis";
  @SerializedName(SERIALIZED_NAME_XAXIS)
  private Axis xaxis;

  public static final String SERIALIZED_NAME_Y_AXIS = "y-axis";
  @SerializedName(SERIALIZED_NAME_Y_AXIS)
  private Boolean yAxis;

  public static final String SERIALIZED_NAME_Y_AXIS = "yAxis";
  @SerializedName(SERIALIZED_NAME_Y_AXIS)
  private PanelYAxis yAxis;

  public static final String SERIALIZED_NAME_Y_BUCKET_BOUND = "yBucketBound";
  @SerializedName(SERIALIZED_NAME_Y_BUCKET_BOUND)
  private String yBucketBound;

  public static final String SERIALIZED_NAME_Y_BUCKET_NUMBER = "yBucketNumber";
  @SerializedName(SERIALIZED_NAME_Y_BUCKET_NUMBER)
  private Double yBucketNumber;

  public static final String SERIALIZED_NAME_Y_BUCKET_SIZE = "yBucketSize";
  @SerializedName(SERIALIZED_NAME_Y_BUCKET_SIZE)
  private Double yBucketSize;

  public static final String SERIALIZED_NAME_Y_FORMATS = "y_formats";
  @SerializedName(SERIALIZED_NAME_Y_FORMATS)
  private List<String> yFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_YAXES = "yaxes";
  @SerializedName(SERIALIZED_NAME_YAXES)
  private List<Axis> yaxes = new ArrayList<>();

  public Panel() {
  }

  public Panel alert(Alert alert) {
    this.alert = alert;
    return this;
  }

  /**
   * Get alert
   * @return alert
   */
  @javax.annotation.Nullable
  public Alert getAlert() {
    return alert;
  }

  public void setAlert(Alert alert) {
    this.alert = alert;
  }


  public Panel aliasColors(Object aliasColors) {
    this.aliasColors = aliasColors;
    return this;
  }

  /**
   * Get aliasColors
   * @return aliasColors
   */
  @javax.annotation.Nullable
  public Object getAliasColors() {
    return aliasColors;
  }

  public void setAliasColors(Object aliasColors) {
    this.aliasColors = aliasColors;
  }


  public Panel bars(Boolean bars) {
    this.bars = bars;
    return this;
  }

  /**
   * Get bars
   * @return bars
   */
  @javax.annotation.Nullable
  public Boolean getBars() {
    return bars;
  }

  public void setBars(Boolean bars) {
    this.bars = bars;
  }


  public Panel cards(PanelCards cards) {
    this.cards = cards;
    return this;
  }

  /**
   * Get cards
   * @return cards
   */
  @javax.annotation.Nullable
  public PanelCards getCards() {
    return cards;
  }

  public void setCards(PanelCards cards) {
    this.cards = cards;
  }


  public Panel collapsed(Boolean collapsed) {
    this.collapsed = collapsed;
    return this;
  }

  /**
   * Get collapsed
   * @return collapsed
   */
  @javax.annotation.Nullable
  public Boolean getCollapsed() {
    return collapsed;
  }

  public void setCollapsed(Boolean collapsed) {
    this.collapsed = collapsed;
  }


  public Panel color(PanelColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public PanelColor getColor() {
    return color;
  }

  public void setColor(PanelColor color) {
    this.color = color;
  }


  public Panel colorBackground(Boolean colorBackground) {
    this.colorBackground = colorBackground;
    return this;
  }

  /**
   * Get colorBackground
   * @return colorBackground
   */
  @javax.annotation.Nullable
  public Boolean getColorBackground() {
    return colorBackground;
  }

  public void setColorBackground(Boolean colorBackground) {
    this.colorBackground = colorBackground;
  }


  public Panel colorValue(Boolean colorValue) {
    this.colorValue = colorValue;
    return this;
  }

  /**
   * Get colorValue
   * @return colorValue
   */
  @javax.annotation.Nullable
  public Boolean getColorValue() {
    return colorValue;
  }

  public void setColorValue(Boolean colorValue) {
    this.colorValue = colorValue;
  }


  public Panel colors(List<String> colors) {
    this.colors = colors;
    return this;
  }

  public Panel addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * Get colors
   * @return colors
   */
  @javax.annotation.Nullable
  public List<String> getColors() {
    return colors;
  }

  public void setColors(List<String> colors) {
    this.colors = colors;
  }


  public Panel columns(List<Column> columns) {
    this.columns = columns;
    return this;
  }

  public Panel addColumnsItem(Column columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List<Column> getColumns() {
    return columns;
  }

  public void setColumns(List<Column> columns) {
    this.columns = columns;
  }


  public Panel content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Panel dashLength(Integer dashLength) {
    this.dashLength = dashLength;
    return this;
  }

  /**
   * Get dashLength
   * @return dashLength
   */
  @javax.annotation.Nullable
  public Integer getDashLength() {
    return dashLength;
  }

  public void setDashLength(Integer dashLength) {
    this.dashLength = dashLength;
  }


  public Panel dashboardTags(List<String> dashboardTags) {
    this.dashboardTags = dashboardTags;
    return this;
  }

  public Panel addDashboardTagsItem(String dashboardTagsItem) {
    if (this.dashboardTags == null) {
      this.dashboardTags = new ArrayList<>();
    }
    this.dashboardTags.add(dashboardTagsItem);
    return this;
  }

  /**
   * Get dashboardTags
   * @return dashboardTags
   */
  @javax.annotation.Nullable
  public List<String> getDashboardTags() {
    return dashboardTags;
  }

  public void setDashboardTags(List<String> dashboardTags) {
    this.dashboardTags = dashboardTags;
  }


  public Panel dashes(Boolean dashes) {
    this.dashes = dashes;
    return this;
  }

  /**
   * Get dashes
   * @return dashes
   */
  @javax.annotation.Nullable
  public Boolean getDashes() {
    return dashes;
  }

  public void setDashes(Boolean dashes) {
    this.dashes = dashes;
  }


  public Panel dataFormat(String dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Get dataFormat
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public String getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(String dataFormat) {
    this.dataFormat = dataFormat;
  }


  public Panel datasource(String datasource) {
    this.datasource = datasource;
    return this;
  }

  /**
   * Get datasource
   * @return datasource
   */
  @javax.annotation.Nullable
  public String getDatasource() {
    return datasource;
  }

  public void setDatasource(String datasource) {
    this.datasource = datasource;
  }


  public Panel decimals(Long decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Get decimals
   * @return decimals
   */
  @javax.annotation.Nullable
  public Long getDecimals() {
    return decimals;
  }

  public void setDecimals(Long decimals) {
    this.decimals = decimals;
  }


  public Panel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Panel editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

  /**
   * Get editable
   * @return editable
   */
  @javax.annotation.Nullable
  public Boolean getEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public Panel error(Boolean error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Boolean getError() {
    return error;
  }

  public void setError(Boolean error) {
    this.error = error;
  }


  public Panel fieldConfig(FieldConfig fieldConfig) {
    this.fieldConfig = fieldConfig;
    return this;
  }

  /**
   * Get fieldConfig
   * @return fieldConfig
   */
  @javax.annotation.Nullable
  public FieldConfig getFieldConfig() {
    return fieldConfig;
  }

  public void setFieldConfig(FieldConfig fieldConfig) {
    this.fieldConfig = fieldConfig;
  }


  public Panel fill(Long fill) {
    this.fill = fill;
    return this;
  }

  /**
   * Get fill
   * @return fill
   */
  @javax.annotation.Nullable
  public Long getFill() {
    return fill;
  }

  public void setFill(Long fill) {
    this.fill = fill;
  }


  public Panel folderId(Long folderId) {
    this.folderId = folderId;
    return this;
  }

  /**
   * Get folderId
   * @return folderId
   */
  @javax.annotation.Nullable
  public Long getFolderId() {
    return folderId;
  }

  public void setFolderId(Long folderId) {
    this.folderId = folderId;
  }


  public Panel format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public Panel gauge(Gauge gauge) {
    this.gauge = gauge;
    return this;
  }

  /**
   * Get gauge
   * @return gauge
   */
  @javax.annotation.Nullable
  public Gauge getGauge() {
    return gauge;
  }

  public void setGauge(Gauge gauge) {
    this.gauge = gauge;
  }


  public Panel gridPos(PanelGridPos gridPos) {
    this.gridPos = gridPos;
    return this;
  }

  /**
   * Get gridPos
   * @return gridPos
   */
  @javax.annotation.Nullable
  public PanelGridPos getGridPos() {
    return gridPos;
  }

  public void setGridPos(PanelGridPos gridPos) {
    this.gridPos = gridPos;
  }


  public Panel headings(Boolean headings) {
    this.headings = headings;
    return this;
  }

  /**
   * Get headings
   * @return headings
   */
  @javax.annotation.Nullable
  public Boolean getHeadings() {
    return headings;
  }

  public void setHeadings(Boolean headings) {
    this.headings = headings;
  }


  public Panel height(Object height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Object getHeight() {
    return height;
  }

  public void setHeight(Object height) {
    this.height = height;
  }


  public Panel hideTimeOverride(Boolean hideTimeOverride) {
    this.hideTimeOverride = hideTimeOverride;
    return this;
  }

  /**
   * Get hideTimeOverride
   * @return hideTimeOverride
   */
  @javax.annotation.Nullable
  public Boolean getHideTimeOverride() {
    return hideTimeOverride;
  }

  public void setHideTimeOverride(Boolean hideTimeOverride) {
    this.hideTimeOverride = hideTimeOverride;
  }


  public Panel hideZeroBuckets(Boolean hideZeroBuckets) {
    this.hideZeroBuckets = hideZeroBuckets;
    return this;
  }

  /**
   * Get hideZeroBuckets
   * @return hideZeroBuckets
   */
  @javax.annotation.Nullable
  public Boolean getHideZeroBuckets() {
    return hideZeroBuckets;
  }

  public void setHideZeroBuckets(Boolean hideZeroBuckets) {
    this.hideZeroBuckets = hideZeroBuckets;
  }


  public Panel highlightCards(Boolean highlightCards) {
    this.highlightCards = highlightCards;
    return this;
  }

  /**
   * Get highlightCards
   * @return highlightCards
   */
  @javax.annotation.Nullable
  public Boolean getHighlightCards() {
    return highlightCards;
  }

  public void setHighlightCards(Boolean highlightCards) {
    this.highlightCards = highlightCards;
  }


  public Panel id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Panel isNew(Boolean isNew) {
    this.isNew = isNew;
    return this;
  }

  /**
   * Get isNew
   * @return isNew
   */
  @javax.annotation.Nullable
  public Boolean getIsNew() {
    return isNew;
  }

  public void setIsNew(Boolean isNew) {
    this.isNew = isNew;
  }


  public Panel leftYAxisLabel(String leftYAxisLabel) {
    this.leftYAxisLabel = leftYAxisLabel;
    return this;
  }

  /**
   * Get leftYAxisLabel
   * @return leftYAxisLabel
   */
  @javax.annotation.Nullable
  public String getLeftYAxisLabel() {
    return leftYAxisLabel;
  }

  public void setLeftYAxisLabel(String leftYAxisLabel) {
    this.leftYAxisLabel = leftYAxisLabel;
  }


  public Panel legend(Legend legend) {
    this.legend = legend;
    return this;
  }

  /**
   * Get legend
   * @return legend
   */
  @javax.annotation.Nullable
  public Legend getLegend() {
    return legend;
  }

  public void setLegend(Legend legend) {
    this.legend = legend;
  }


  public Panel limit(Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public Panel lines(Boolean lines) {
    this.lines = lines;
    return this;
  }

  /**
   * Get lines
   * @return lines
   */
  @javax.annotation.Nullable
  public Boolean getLines() {
    return lines;
  }

  public void setLines(Boolean lines) {
    this.lines = lines;
  }


  public Panel linewidth(Integer linewidth) {
    this.linewidth = linewidth;
    return this;
  }

  /**
   * Get linewidth
   * @return linewidth
   */
  @javax.annotation.Nullable
  public Integer getLinewidth() {
    return linewidth;
  }

  public void setLinewidth(Integer linewidth) {
    this.linewidth = linewidth;
  }


  public Panel links(List<Link> links) {
    this.links = links;
    return this;
  }

  public Panel addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  public Panel mappingType(Integer mappingType) {
    this.mappingType = mappingType;
    return this;
  }

  /**
   * Get mappingType
   * @return mappingType
   */
  @javax.annotation.Nullable
  public Integer getMappingType() {
    return mappingType;
  }

  public void setMappingType(Integer mappingType) {
    this.mappingType = mappingType;
  }


  public Panel mappingTypes(List<MapType> mappingTypes) {
    this.mappingTypes = mappingTypes;
    return this;
  }

  public Panel addMappingTypesItem(MapType mappingTypesItem) {
    if (this.mappingTypes == null) {
      this.mappingTypes = new ArrayList<>();
    }
    this.mappingTypes.add(mappingTypesItem);
    return this;
  }

  /**
   * Get mappingTypes
   * @return mappingTypes
   */
  @javax.annotation.Nullable
  public List<MapType> getMappingTypes() {
    return mappingTypes;
  }

  public void setMappingTypes(List<MapType> mappingTypes) {
    this.mappingTypes = mappingTypes;
  }


  public Panel maxDataPoints(IntString maxDataPoints) {
    this.maxDataPoints = maxDataPoints;
    return this;
  }

  /**
   * Get maxDataPoints
   * @return maxDataPoints
   */
  @javax.annotation.Nullable
  public IntString getMaxDataPoints() {
    return maxDataPoints;
  }

  public void setMaxDataPoints(IntString maxDataPoints) {
    this.maxDataPoints = maxDataPoints;
  }


  public Panel minSpan(Float minSpan) {
    this.minSpan = minSpan;
    return this;
  }

  /**
   * Get minSpan
   * @return minSpan
   */
  @javax.annotation.Nullable
  public Float getMinSpan() {
    return minSpan;
  }

  public void setMinSpan(Float minSpan) {
    this.minSpan = minSpan;
  }


  public Panel mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public Panel nameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
    return this;
  }

  /**
   * Get nameFilter
   * @return nameFilter
   */
  @javax.annotation.Nullable
  public String getNameFilter() {
    return nameFilter;
  }

  public void setNameFilter(String nameFilter) {
    this.nameFilter = nameFilter;
  }


  public Panel nullPointMode(String nullPointMode) {
    this.nullPointMode = nullPointMode;
    return this;
  }

  /**
   * Get nullPointMode
   * @return nullPointMode
   */
  @javax.annotation.Nullable
  public String getNullPointMode() {
    return nullPointMode;
  }

  public void setNullPointMode(String nullPointMode) {
    this.nullPointMode = nullPointMode;
  }


  public Panel onlyAlertsOnDashboard(Boolean onlyAlertsOnDashboard) {
    this.onlyAlertsOnDashboard = onlyAlertsOnDashboard;
    return this;
  }

  /**
   * Get onlyAlertsOnDashboard
   * @return onlyAlertsOnDashboard
   */
  @javax.annotation.Nullable
  public Boolean getOnlyAlertsOnDashboard() {
    return onlyAlertsOnDashboard;
  }

  public void setOnlyAlertsOnDashboard(Boolean onlyAlertsOnDashboard) {
    this.onlyAlertsOnDashboard = onlyAlertsOnDashboard;
  }


  public Panel options(Options options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }


  public Panel pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public Panel panels(List<Panel> panels) {
    this.panels = panels;
    return this;
  }

  public Panel addPanelsItem(Panel panelsItem) {
    if (this.panels == null) {
      this.panels = new ArrayList<>();
    }
    this.panels.add(panelsItem);
    return this;
  }

  /**
   * Get panels
   * @return panels
   */
  @javax.annotation.Nullable
  public List<Panel> getPanels() {
    return panels;
  }

  public void setPanels(List<Panel> panels) {
    this.panels = panels;
  }


  public Panel percentage(Boolean percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public Boolean getPercentage() {
    return percentage;
  }

  public void setPercentage(Boolean percentage) {
    this.percentage = percentage;
  }


  public Panel pointradius(Float pointradius) {
    this.pointradius = pointradius;
    return this;
  }

  /**
   * Get pointradius
   * @return pointradius
   */
  @javax.annotation.Nullable
  public Float getPointradius() {
    return pointradius;
  }

  public void setPointradius(Float pointradius) {
    this.pointradius = pointradius;
  }


  public Panel points(Boolean points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public Boolean getPoints() {
    return points;
  }

  public void setPoints(Boolean points) {
    this.points = points;
  }


  public Panel postfix(String postfix) {
    this.postfix = postfix;
    return this;
  }

  /**
   * Get postfix
   * @return postfix
   */
  @javax.annotation.Nullable
  public String getPostfix() {
    return postfix;
  }

  public void setPostfix(String postfix) {
    this.postfix = postfix;
  }


  public Panel postfixFontSize(String postfixFontSize) {
    this.postfixFontSize = postfixFontSize;
    return this;
  }

  /**
   * Get postfixFontSize
   * @return postfixFontSize
   */
  @javax.annotation.Nullable
  public String getPostfixFontSize() {
    return postfixFontSize;
  }

  public void setPostfixFontSize(String postfixFontSize) {
    this.postfixFontSize = postfixFontSize;
  }


  public Panel prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public Panel prefixFontSize(String prefixFontSize) {
    this.prefixFontSize = prefixFontSize;
    return this;
  }

  /**
   * Get prefixFontSize
   * @return prefixFontSize
   */
  @javax.annotation.Nullable
  public String getPrefixFontSize() {
    return prefixFontSize;
  }

  public void setPrefixFontSize(String prefixFontSize) {
    this.prefixFontSize = prefixFontSize;
  }


  public Panel query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public Panel rangeMaps(List<RangeMap> rangeMaps) {
    this.rangeMaps = rangeMaps;
    return this;
  }

  public Panel addRangeMapsItem(RangeMap rangeMapsItem) {
    if (this.rangeMaps == null) {
      this.rangeMaps = new ArrayList<>();
    }
    this.rangeMaps.add(rangeMapsItem);
    return this;
  }

  /**
   * Get rangeMaps
   * @return rangeMaps
   */
  @javax.annotation.Nullable
  public List<RangeMap> getRangeMaps() {
    return rangeMaps;
  }

  public void setRangeMaps(List<RangeMap> rangeMaps) {
    this.rangeMaps = rangeMaps;
  }


  public Panel recent(Boolean recent) {
    this.recent = recent;
    return this;
  }

  /**
   * Get recent
   * @return recent
   */
  @javax.annotation.Nullable
  public Boolean getRecent() {
    return recent;
  }

  public void setRecent(Boolean recent) {
    this.recent = recent;
  }


  public Panel renderer(String renderer) {
    this.renderer = renderer;
    return this;
  }

  /**
   * Get renderer
   * @return renderer
   */
  @javax.annotation.Nullable
  public String getRenderer() {
    return renderer;
  }

  public void setRenderer(String renderer) {
    this.renderer = renderer;
  }


  public Panel repeat(String repeat) {
    this.repeat = repeat;
    return this;
  }

  /**
   * Get repeat
   * @return repeat
   */
  @javax.annotation.Nullable
  public String getRepeat() {
    return repeat;
  }

  public void setRepeat(String repeat) {
    this.repeat = repeat;
  }


  public Panel repeatPanelId(Integer repeatPanelId) {
    this.repeatPanelId = repeatPanelId;
    return this;
  }

  /**
   * RepeatIteration *int64   &#x60;json:\&quot;repeatIteration,omitempty\&quot;&#x60;
   * @return repeatPanelId
   */
  @javax.annotation.Nullable
  public Integer getRepeatPanelId() {
    return repeatPanelId;
  }

  public void setRepeatPanelId(Integer repeatPanelId) {
    this.repeatPanelId = repeatPanelId;
  }


  public Panel reverseYBuckets(Boolean reverseYBuckets) {
    this.reverseYBuckets = reverseYBuckets;
    return this;
  }

  /**
   * Get reverseYBuckets
   * @return reverseYBuckets
   */
  @javax.annotation.Nullable
  public Boolean getReverseYBuckets() {
    return reverseYBuckets;
  }

  public void setReverseYBuckets(Boolean reverseYBuckets) {
    this.reverseYBuckets = reverseYBuckets;
  }


  public Panel rightYAxisLabel(String rightYAxisLabel) {
    this.rightYAxisLabel = rightYAxisLabel;
    return this;
  }

  /**
   * Get rightYAxisLabel
   * @return rightYAxisLabel
   */
  @javax.annotation.Nullable
  public String getRightYAxisLabel() {
    return rightYAxisLabel;
  }

  public void setRightYAxisLabel(String rightYAxisLabel) {
    this.rightYAxisLabel = rightYAxisLabel;
  }


  public Panel scopedVars(Map<String, PanelScopedVarsValue> scopedVars) {
    this.scopedVars = scopedVars;
    return this;
  }

  public Panel putScopedVarsItem(String key, PanelScopedVarsValue scopedVarsItem) {
    if (this.scopedVars == null) {
      this.scopedVars = new HashMap<>();
    }
    this.scopedVars.put(key, scopedVarsItem);
    return this;
  }

  /**
   * Get scopedVars
   * @return scopedVars
   */
  @javax.annotation.Nullable
  public Map<String, PanelScopedVarsValue> getScopedVars() {
    return scopedVars;
  }

  public void setScopedVars(Map<String, PanelScopedVarsValue> scopedVars) {
    this.scopedVars = scopedVars;
  }


  public Panel scroll(Boolean scroll) {
    this.scroll = scroll;
    return this;
  }

  /**
   * Get scroll
   * @return scroll
   */
  @javax.annotation.Nullable
  public Boolean getScroll() {
    return scroll;
  }

  public void setScroll(Boolean scroll) {
    this.scroll = scroll;
  }


  public Panel search(Boolean search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public Boolean getSearch() {
    return search;
  }

  public void setSearch(Boolean search) {
    this.search = search;
  }


  public Panel seriesOverrides(List<SeriesOverride> seriesOverrides) {
    this.seriesOverrides = seriesOverrides;
    return this;
  }

  public Panel addSeriesOverridesItem(SeriesOverride seriesOverridesItem) {
    if (this.seriesOverrides == null) {
      this.seriesOverrides = new ArrayList<>();
    }
    this.seriesOverrides.add(seriesOverridesItem);
    return this;
  }

  /**
   * Get seriesOverrides
   * @return seriesOverrides
   */
  @javax.annotation.Nullable
  public List<SeriesOverride> getSeriesOverrides() {
    return seriesOverrides;
  }

  public void setSeriesOverrides(List<SeriesOverride> seriesOverrides) {
    this.seriesOverrides = seriesOverrides;
  }


  public Panel show(String show) {
    this.show = show;
    return this;
  }

  /**
   * Get show
   * @return show
   */
  @javax.annotation.Nullable
  public String getShow() {
    return show;
  }

  public void setShow(String show) {
    this.show = show;
  }


  public Panel showHeader(Boolean showHeader) {
    this.showHeader = showHeader;
    return this;
  }

  /**
   * Get showHeader
   * @return showHeader
   */
  @javax.annotation.Nullable
  public Boolean getShowHeader() {
    return showHeader;
  }

  public void setShowHeader(Boolean showHeader) {
    this.showHeader = showHeader;
  }


  public Panel sort(Sort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public Sort getSort() {
    return sort;
  }

  public void setSort(Sort sort) {
    this.sort = sort;
  }


  public Panel sortOrder(Long sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Long getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Long sortOrder) {
    this.sortOrder = sortOrder;
  }


  public Panel spaceLength(Integer spaceLength) {
    this.spaceLength = spaceLength;
    return this;
  }

  /**
   * Get spaceLength
   * @return spaceLength
   */
  @javax.annotation.Nullable
  public Integer getSpaceLength() {
    return spaceLength;
  }

  public void setSpaceLength(Integer spaceLength) {
    this.spaceLength = spaceLength;
  }


  public Panel span(Float span) {
    this.span = span;
    return this;
  }

  /**
   * Get span
   * @return span
   */
  @javax.annotation.Nullable
  public Float getSpan() {
    return span;
  }

  public void setSpan(Float span) {
    this.span = span;
  }


  public Panel sparkline(SparkLine sparkline) {
    this.sparkline = sparkline;
    return this;
  }

  /**
   * Get sparkline
   * @return sparkline
   */
  @javax.annotation.Nullable
  public SparkLine getSparkline() {
    return sparkline;
  }

  public void setSparkline(SparkLine sparkline) {
    this.sparkline = sparkline;
  }


  public Panel stack(Boolean stack) {
    this.stack = stack;
    return this;
  }

  /**
   * Get stack
   * @return stack
   */
  @javax.annotation.Nullable
  public Boolean getStack() {
    return stack;
  }

  public void setStack(Boolean stack) {
    this.stack = stack;
  }


  public Panel starred(Boolean starred) {
    this.starred = starred;
    return this;
  }

  /**
   * Get starred
   * @return starred
   */
  @javax.annotation.Nullable
  public Boolean getStarred() {
    return starred;
  }

  public void setStarred(Boolean starred) {
    this.starred = starred;
  }


  public Panel stateFilter(List<String> stateFilter) {
    this.stateFilter = stateFilter;
    return this;
  }

  public Panel addStateFilterItem(String stateFilterItem) {
    if (this.stateFilter == null) {
      this.stateFilter = new ArrayList<>();
    }
    this.stateFilter.add(stateFilterItem);
    return this;
  }

  /**
   * Get stateFilter
   * @return stateFilter
   */
  @javax.annotation.Nullable
  public List<String> getStateFilter() {
    return stateFilter;
  }

  public void setStateFilter(List<String> stateFilter) {
    this.stateFilter = stateFilter;
  }


  public Panel steppedLine(Boolean steppedLine) {
    this.steppedLine = steppedLine;
    return this;
  }

  /**
   * Get steppedLine
   * @return steppedLine
   */
  @javax.annotation.Nullable
  public Boolean getSteppedLine() {
    return steppedLine;
  }

  public void setSteppedLine(Boolean steppedLine) {
    this.steppedLine = steppedLine;
  }


  public Panel styles(List<ColumnStyle> styles) {
    this.styles = styles;
    return this;
  }

  public Panel addStylesItem(ColumnStyle stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

  /**
   * Get styles
   * @return styles
   */
  @javax.annotation.Nullable
  public List<ColumnStyle> getStyles() {
    return styles;
  }

  public void setStyles(List<ColumnStyle> styles) {
    this.styles = styles;
  }


  public Panel tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Panel addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Panel targets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public Panel addTargetsItem(Target targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List<Target> getTargets() {
    return targets;
  }

  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public Panel thresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public Panel addThresholdsItem(Threshold thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

  /**
   * Get thresholds
   * @return thresholds
   */
  @javax.annotation.Nullable
  public List<Threshold> getThresholds() {
    return thresholds;
  }

  public void setThresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
  }


  public Panel timeFrom(String timeFrom) {
    this.timeFrom = timeFrom;
    return this;
  }

  /**
   * Get timeFrom
   * @return timeFrom
   */
  @javax.annotation.Nullable
  public String getTimeFrom() {
    return timeFrom;
  }

  public void setTimeFrom(String timeFrom) {
    this.timeFrom = timeFrom;
  }


  public Panel timeShift(String timeShift) {
    this.timeShift = timeShift;
    return this;
  }

  /**
   * Get timeShift
   * @return timeShift
   */
  @javax.annotation.Nullable
  public String getTimeShift() {
    return timeShift;
  }

  public void setTimeShift(String timeShift) {
    this.timeShift = timeShift;
  }


  public Panel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Panel tooltip(Tooltip tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  /**
   * Get tooltip
   * @return tooltip
   */
  @javax.annotation.Nullable
  public Tooltip getTooltip() {
    return tooltip;
  }

  public void setTooltip(Tooltip tooltip) {
    this.tooltip = tooltip;
  }


  public Panel tooltipDecimals(Long tooltipDecimals) {
    this.tooltipDecimals = tooltipDecimals;
    return this;
  }

  /**
   * Get tooltipDecimals
   * @return tooltipDecimals
   */
  @javax.annotation.Nullable
  public Long getTooltipDecimals() {
    return tooltipDecimals;
  }

  public void setTooltipDecimals(Long tooltipDecimals) {
    this.tooltipDecimals = tooltipDecimals;
  }


  public Panel transform(String transform) {
    this.transform = transform;
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public String getTransform() {
    return transform;
  }

  public void setTransform(String transform) {
    this.transform = transform;
  }


  public Panel transparent(Boolean transparent) {
    this.transparent = transparent;
    return this;
  }

  /**
   * Get transparent
   * @return transparent
   */
  @javax.annotation.Nullable
  public Boolean getTransparent() {
    return transparent;
  }

  public void setTransparent(Boolean transparent) {
    this.transparent = transparent;
  }


  public Panel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Panel valueFontSize(String valueFontSize) {
    this.valueFontSize = valueFontSize;
    return this;
  }

  /**
   * Get valueFontSize
   * @return valueFontSize
   */
  @javax.annotation.Nullable
  public String getValueFontSize() {
    return valueFontSize;
  }

  public void setValueFontSize(String valueFontSize) {
    this.valueFontSize = valueFontSize;
  }


  public Panel valueMaps(List<ValueMap> valueMaps) {
    this.valueMaps = valueMaps;
    return this;
  }

  public Panel addValueMapsItem(ValueMap valueMapsItem) {
    if (this.valueMaps == null) {
      this.valueMaps = new ArrayList<>();
    }
    this.valueMaps.add(valueMapsItem);
    return this;
  }

  /**
   * Get valueMaps
   * @return valueMaps
   */
  @javax.annotation.Nullable
  public List<ValueMap> getValueMaps() {
    return valueMaps;
  }

  public void setValueMaps(List<ValueMap> valueMaps) {
    this.valueMaps = valueMaps;
  }


  public Panel valueName(String valueName) {
    this.valueName = valueName;
    return this;
  }

  /**
   * Get valueName
   * @return valueName
   */
  @javax.annotation.Nullable
  public String getValueName() {
    return valueName;
  }

  public void setValueName(String valueName) {
    this.valueName = valueName;
  }


  public Panel xAxis(Boolean xAxis) {
    this.xAxis = xAxis;
    return this;
  }

  /**
   * Get xAxis
   * @return xAxis
   */
  @javax.annotation.Nullable
  public Boolean getxAxis() {
    return xAxis;
  }

  public void setxAxis(Boolean xAxis) {
    this.xAxis = xAxis;
  }


  public Panel xAxis(PanelXAxis xAxis) {
    this.xAxis = xAxis;
    return this;
  }

  /**
   * Get xAxis
   * @return xAxis
   */
  @javax.annotation.Nullable
  public PanelXAxis getxAxis() {
    return xAxis;
  }

  public void setxAxis(PanelXAxis xAxis) {
    this.xAxis = xAxis;
  }


  public Panel xBucketNumber(Double xBucketNumber) {
    this.xBucketNumber = xBucketNumber;
    return this;
  }

  /**
   * Get xBucketNumber
   * @return xBucketNumber
   */
  @javax.annotation.Nullable
  public Double getxBucketNumber() {
    return xBucketNumber;
  }

  public void setxBucketNumber(Double xBucketNumber) {
    this.xBucketNumber = xBucketNumber;
  }


  public Panel xBucketSize(String xBucketSize) {
    this.xBucketSize = xBucketSize;
    return this;
  }

  /**
   * Get xBucketSize
   * @return xBucketSize
   */
  @javax.annotation.Nullable
  public String getxBucketSize() {
    return xBucketSize;
  }

  public void setxBucketSize(String xBucketSize) {
    this.xBucketSize = xBucketSize;
  }


  public Panel xaxis(Axis xaxis) {
    this.xaxis = xaxis;
    return this;
  }

  /**
   * Get xaxis
   * @return xaxis
   */
  @javax.annotation.Nullable
  public Axis getXaxis() {
    return xaxis;
  }

  public void setXaxis(Axis xaxis) {
    this.xaxis = xaxis;
  }


  public Panel yAxis(Boolean yAxis) {
    this.yAxis = yAxis;
    return this;
  }

  /**
   * Get yAxis
   * @return yAxis
   */
  @javax.annotation.Nullable
  public Boolean getyAxis() {
    return yAxis;
  }

  public void setyAxis(Boolean yAxis) {
    this.yAxis = yAxis;
  }


  public Panel yAxis(PanelYAxis yAxis) {
    this.yAxis = yAxis;
    return this;
  }

  /**
   * Get yAxis
   * @return yAxis
   */
  @javax.annotation.Nullable
  public PanelYAxis getyAxis() {
    return yAxis;
  }

  public void setyAxis(PanelYAxis yAxis) {
    this.yAxis = yAxis;
  }


  public Panel yBucketBound(String yBucketBound) {
    this.yBucketBound = yBucketBound;
    return this;
  }

  /**
   * Get yBucketBound
   * @return yBucketBound
   */
  @javax.annotation.Nullable
  public String getyBucketBound() {
    return yBucketBound;
  }

  public void setyBucketBound(String yBucketBound) {
    this.yBucketBound = yBucketBound;
  }


  public Panel yBucketNumber(Double yBucketNumber) {
    this.yBucketNumber = yBucketNumber;
    return this;
  }

  /**
   * Get yBucketNumber
   * @return yBucketNumber
   */
  @javax.annotation.Nullable
  public Double getyBucketNumber() {
    return yBucketNumber;
  }

  public void setyBucketNumber(Double yBucketNumber) {
    this.yBucketNumber = yBucketNumber;
  }


  public Panel yBucketSize(Double yBucketSize) {
    this.yBucketSize = yBucketSize;
    return this;
  }

  /**
   * Get yBucketSize
   * @return yBucketSize
   */
  @javax.annotation.Nullable
  public Double getyBucketSize() {
    return yBucketSize;
  }

  public void setyBucketSize(Double yBucketSize) {
    this.yBucketSize = yBucketSize;
  }


  public Panel yFormats(List<String> yFormats) {
    this.yFormats = yFormats;
    return this;
  }

  public Panel addYFormatsItem(String yFormatsItem) {
    if (this.yFormats == null) {
      this.yFormats = new ArrayList<>();
    }
    this.yFormats.add(yFormatsItem);
    return this;
  }

  /**
   * Get yFormats
   * @return yFormats
   */
  @javax.annotation.Nullable
  public List<String> getyFormats() {
    return yFormats;
  }

  public void setyFormats(List<String> yFormats) {
    this.yFormats = yFormats;
  }


  public Panel yaxes(List<Axis> yaxes) {
    this.yaxes = yaxes;
    return this;
  }

  public Panel addYaxesItem(Axis yaxesItem) {
    if (this.yaxes == null) {
      this.yaxes = new ArrayList<>();
    }
    this.yaxes.add(yaxesItem);
    return this;
  }

  /**
   * Get yaxes
   * @return yaxes
   */
  @javax.annotation.Nullable
  public List<Axis> getYaxes() {
    return yaxes;
  }

  public void setYaxes(List<Axis> yaxes) {
    this.yaxes = yaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Panel panel = (Panel) o;
    return Objects.equals(this.alert, panel.alert) &&
        Objects.equals(this.aliasColors, panel.aliasColors) &&
        Objects.equals(this.bars, panel.bars) &&
        Objects.equals(this.cards, panel.cards) &&
        Objects.equals(this.collapsed, panel.collapsed) &&
        Objects.equals(this.color, panel.color) &&
        Objects.equals(this.colorBackground, panel.colorBackground) &&
        Objects.equals(this.colorValue, panel.colorValue) &&
        Objects.equals(this.colors, panel.colors) &&
        Objects.equals(this.columns, panel.columns) &&
        Objects.equals(this.content, panel.content) &&
        Objects.equals(this.dashLength, panel.dashLength) &&
        Objects.equals(this.dashboardTags, panel.dashboardTags) &&
        Objects.equals(this.dashes, panel.dashes) &&
        Objects.equals(this.dataFormat, panel.dataFormat) &&
        Objects.equals(this.datasource, panel.datasource) &&
        Objects.equals(this.decimals, panel.decimals) &&
        Objects.equals(this.description, panel.description) &&
        Objects.equals(this.editable, panel.editable) &&
        Objects.equals(this.error, panel.error) &&
        Objects.equals(this.fieldConfig, panel.fieldConfig) &&
        Objects.equals(this.fill, panel.fill) &&
        Objects.equals(this.folderId, panel.folderId) &&
        Objects.equals(this.format, panel.format) &&
        Objects.equals(this.gauge, panel.gauge) &&
        Objects.equals(this.gridPos, panel.gridPos) &&
        Objects.equals(this.headings, panel.headings) &&
        Objects.equals(this.height, panel.height) &&
        Objects.equals(this.hideTimeOverride, panel.hideTimeOverride) &&
        Objects.equals(this.hideZeroBuckets, panel.hideZeroBuckets) &&
        Objects.equals(this.highlightCards, panel.highlightCards) &&
        Objects.equals(this.id, panel.id) &&
        Objects.equals(this.isNew, panel.isNew) &&
        Objects.equals(this.leftYAxisLabel, panel.leftYAxisLabel) &&
        Objects.equals(this.legend, panel.legend) &&
        Objects.equals(this.limit, panel.limit) &&
        Objects.equals(this.lines, panel.lines) &&
        Objects.equals(this.linewidth, panel.linewidth) &&
        Objects.equals(this.links, panel.links) &&
        Objects.equals(this.mappingType, panel.mappingType) &&
        Objects.equals(this.mappingTypes, panel.mappingTypes) &&
        Objects.equals(this.maxDataPoints, panel.maxDataPoints) &&
        Objects.equals(this.minSpan, panel.minSpan) &&
        Objects.equals(this.mode, panel.mode) &&
        Objects.equals(this.nameFilter, panel.nameFilter) &&
        Objects.equals(this.nullPointMode, panel.nullPointMode) &&
        Objects.equals(this.onlyAlertsOnDashboard, panel.onlyAlertsOnDashboard) &&
        Objects.equals(this.options, panel.options) &&
        Objects.equals(this.pageSize, panel.pageSize) &&
        Objects.equals(this.panels, panel.panels) &&
        Objects.equals(this.percentage, panel.percentage) &&
        Objects.equals(this.pointradius, panel.pointradius) &&
        Objects.equals(this.points, panel.points) &&
        Objects.equals(this.postfix, panel.postfix) &&
        Objects.equals(this.postfixFontSize, panel.postfixFontSize) &&
        Objects.equals(this.prefix, panel.prefix) &&
        Objects.equals(this.prefixFontSize, panel.prefixFontSize) &&
        Objects.equals(this.query, panel.query) &&
        Objects.equals(this.rangeMaps, panel.rangeMaps) &&
        Objects.equals(this.recent, panel.recent) &&
        Objects.equals(this.renderer, panel.renderer) &&
        Objects.equals(this.repeat, panel.repeat) &&
        Objects.equals(this.repeatPanelId, panel.repeatPanelId) &&
        Objects.equals(this.reverseYBuckets, panel.reverseYBuckets) &&
        Objects.equals(this.rightYAxisLabel, panel.rightYAxisLabel) &&
        Objects.equals(this.scopedVars, panel.scopedVars) &&
        Objects.equals(this.scroll, panel.scroll) &&
        Objects.equals(this.search, panel.search) &&
        Objects.equals(this.seriesOverrides, panel.seriesOverrides) &&
        Objects.equals(this.show, panel.show) &&
        Objects.equals(this.showHeader, panel.showHeader) &&
        Objects.equals(this.sort, panel.sort) &&
        Objects.equals(this.sortOrder, panel.sortOrder) &&
        Objects.equals(this.spaceLength, panel.spaceLength) &&
        Objects.equals(this.span, panel.span) &&
        Objects.equals(this.sparkline, panel.sparkline) &&
        Objects.equals(this.stack, panel.stack) &&
        Objects.equals(this.starred, panel.starred) &&
        Objects.equals(this.stateFilter, panel.stateFilter) &&
        Objects.equals(this.steppedLine, panel.steppedLine) &&
        Objects.equals(this.styles, panel.styles) &&
        Objects.equals(this.tags, panel.tags) &&
        Objects.equals(this.targets, panel.targets) &&
        Objects.equals(this.thresholds, panel.thresholds) &&
        Objects.equals(this.timeFrom, panel.timeFrom) &&
        Objects.equals(this.timeShift, panel.timeShift) &&
        Objects.equals(this.title, panel.title) &&
        Objects.equals(this.tooltip, panel.tooltip) &&
        Objects.equals(this.tooltipDecimals, panel.tooltipDecimals) &&
        Objects.equals(this.transform, panel.transform) &&
        Objects.equals(this.transparent, panel.transparent) &&
        Objects.equals(this.type, panel.type) &&
        Objects.equals(this.valueFontSize, panel.valueFontSize) &&
        Objects.equals(this.valueMaps, panel.valueMaps) &&
        Objects.equals(this.valueName, panel.valueName) &&
        Objects.equals(this.xAxis, panel.xAxis) &&
        Objects.equals(this.xAxis, panel.xAxis) &&
        Objects.equals(this.xBucketNumber, panel.xBucketNumber) &&
        Objects.equals(this.xBucketSize, panel.xBucketSize) &&
        Objects.equals(this.xaxis, panel.xaxis) &&
        Objects.equals(this.yAxis, panel.yAxis) &&
        Objects.equals(this.yAxis, panel.yAxis) &&
        Objects.equals(this.yBucketBound, panel.yBucketBound) &&
        Objects.equals(this.yBucketNumber, panel.yBucketNumber) &&
        Objects.equals(this.yBucketSize, panel.yBucketSize) &&
        Objects.equals(this.yFormats, panel.yFormats) &&
        Objects.equals(this.yaxes, panel.yaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, aliasColors, bars, cards, collapsed, color, colorBackground, colorValue, colors, columns, content, dashLength, dashboardTags, dashes, dataFormat, datasource, decimals, description, editable, error, fieldConfig, fill, folderId, format, gauge, gridPos, headings, height, hideTimeOverride, hideZeroBuckets, highlightCards, id, isNew, leftYAxisLabel, legend, limit, lines, linewidth, links, mappingType, mappingTypes, maxDataPoints, minSpan, mode, nameFilter, nullPointMode, onlyAlertsOnDashboard, options, pageSize, panels, percentage, pointradius, points, postfix, postfixFontSize, prefix, prefixFontSize, query, rangeMaps, recent, renderer, repeat, repeatPanelId, reverseYBuckets, rightYAxisLabel, scopedVars, scroll, search, seriesOverrides, show, showHeader, sort, sortOrder, spaceLength, span, sparkline, stack, starred, stateFilter, steppedLine, styles, tags, targets, thresholds, timeFrom, timeShift, title, tooltip, tooltipDecimals, transform, transparent, type, valueFontSize, valueMaps, valueName, xAxis, xAxis, xBucketNumber, xBucketSize, xaxis, yAxis, yAxis, yBucketBound, yBucketNumber, yBucketSize, yFormats, yaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Panel {\n");
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    aliasColors: ").append(toIndentedString(aliasColors)).append("\n");
    sb.append("    bars: ").append(toIndentedString(bars)).append("\n");
    sb.append("    cards: ").append(toIndentedString(cards)).append("\n");
    sb.append("    collapsed: ").append(toIndentedString(collapsed)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    colorBackground: ").append(toIndentedString(colorBackground)).append("\n");
    sb.append("    colorValue: ").append(toIndentedString(colorValue)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    dashLength: ").append(toIndentedString(dashLength)).append("\n");
    sb.append("    dashboardTags: ").append(toIndentedString(dashboardTags)).append("\n");
    sb.append("    dashes: ").append(toIndentedString(dashes)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fieldConfig: ").append(toIndentedString(fieldConfig)).append("\n");
    sb.append("    fill: ").append(toIndentedString(fill)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    gauge: ").append(toIndentedString(gauge)).append("\n");
    sb.append("    gridPos: ").append(toIndentedString(gridPos)).append("\n");
    sb.append("    headings: ").append(toIndentedString(headings)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hideTimeOverride: ").append(toIndentedString(hideTimeOverride)).append("\n");
    sb.append("    hideZeroBuckets: ").append(toIndentedString(hideZeroBuckets)).append("\n");
    sb.append("    highlightCards: ").append(toIndentedString(highlightCards)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isNew: ").append(toIndentedString(isNew)).append("\n");
    sb.append("    leftYAxisLabel: ").append(toIndentedString(leftYAxisLabel)).append("\n");
    sb.append("    legend: ").append(toIndentedString(legend)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    linewidth: ").append(toIndentedString(linewidth)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    mappingTypes: ").append(toIndentedString(mappingTypes)).append("\n");
    sb.append("    maxDataPoints: ").append(toIndentedString(maxDataPoints)).append("\n");
    sb.append("    minSpan: ").append(toIndentedString(minSpan)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    nameFilter: ").append(toIndentedString(nameFilter)).append("\n");
    sb.append("    nullPointMode: ").append(toIndentedString(nullPointMode)).append("\n");
    sb.append("    onlyAlertsOnDashboard: ").append(toIndentedString(onlyAlertsOnDashboard)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    panels: ").append(toIndentedString(panels)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pointradius: ").append(toIndentedString(pointradius)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    postfix: ").append(toIndentedString(postfix)).append("\n");
    sb.append("    postfixFontSize: ").append(toIndentedString(postfixFontSize)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    prefixFontSize: ").append(toIndentedString(prefixFontSize)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rangeMaps: ").append(toIndentedString(rangeMaps)).append("\n");
    sb.append("    recent: ").append(toIndentedString(recent)).append("\n");
    sb.append("    renderer: ").append(toIndentedString(renderer)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    repeatPanelId: ").append(toIndentedString(repeatPanelId)).append("\n");
    sb.append("    reverseYBuckets: ").append(toIndentedString(reverseYBuckets)).append("\n");
    sb.append("    rightYAxisLabel: ").append(toIndentedString(rightYAxisLabel)).append("\n");
    sb.append("    scopedVars: ").append(toIndentedString(scopedVars)).append("\n");
    sb.append("    scroll: ").append(toIndentedString(scroll)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    seriesOverrides: ").append(toIndentedString(seriesOverrides)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("    showHeader: ").append(toIndentedString(showHeader)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    spaceLength: ").append(toIndentedString(spaceLength)).append("\n");
    sb.append("    span: ").append(toIndentedString(span)).append("\n");
    sb.append("    sparkline: ").append(toIndentedString(sparkline)).append("\n");
    sb.append("    stack: ").append(toIndentedString(stack)).append("\n");
    sb.append("    starred: ").append(toIndentedString(starred)).append("\n");
    sb.append("    stateFilter: ").append(toIndentedString(stateFilter)).append("\n");
    sb.append("    steppedLine: ").append(toIndentedString(steppedLine)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("    timeFrom: ").append(toIndentedString(timeFrom)).append("\n");
    sb.append("    timeShift: ").append(toIndentedString(timeShift)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("    tooltipDecimals: ").append(toIndentedString(tooltipDecimals)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    transparent: ").append(toIndentedString(transparent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueFontSize: ").append(toIndentedString(valueFontSize)).append("\n");
    sb.append("    valueMaps: ").append(toIndentedString(valueMaps)).append("\n");
    sb.append("    valueName: ").append(toIndentedString(valueName)).append("\n");
    sb.append("    xAxis: ").append(toIndentedString(xAxis)).append("\n");
    sb.append("    xAxis: ").append(toIndentedString(xAxis)).append("\n");
    sb.append("    xBucketNumber: ").append(toIndentedString(xBucketNumber)).append("\n");
    sb.append("    xBucketSize: ").append(toIndentedString(xBucketSize)).append("\n");
    sb.append("    xaxis: ").append(toIndentedString(xaxis)).append("\n");
    sb.append("    yAxis: ").append(toIndentedString(yAxis)).append("\n");
    sb.append("    yAxis: ").append(toIndentedString(yAxis)).append("\n");
    sb.append("    yBucketBound: ").append(toIndentedString(yBucketBound)).append("\n");
    sb.append("    yBucketNumber: ").append(toIndentedString(yBucketNumber)).append("\n");
    sb.append("    yBucketSize: ").append(toIndentedString(yBucketSize)).append("\n");
    sb.append("    yFormats: ").append(toIndentedString(yFormats)).append("\n");
    sb.append("    yaxes: ").append(toIndentedString(yaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert");
    openapiFields.add("aliasColors");
    openapiFields.add("bars");
    openapiFields.add("cards");
    openapiFields.add("collapsed");
    openapiFields.add("color");
    openapiFields.add("colorBackground");
    openapiFields.add("colorValue");
    openapiFields.add("colors");
    openapiFields.add("columns");
    openapiFields.add("content");
    openapiFields.add("dashLength");
    openapiFields.add("dashboardTags");
    openapiFields.add("dashes");
    openapiFields.add("dataFormat");
    openapiFields.add("datasource");
    openapiFields.add("decimals");
    openapiFields.add("description");
    openapiFields.add("editable");
    openapiFields.add("error");
    openapiFields.add("fieldConfig");
    openapiFields.add("fill");
    openapiFields.add("folderId");
    openapiFields.add("format");
    openapiFields.add("gauge");
    openapiFields.add("gridPos");
    openapiFields.add("headings");
    openapiFields.add("height");
    openapiFields.add("hideTimeOverride");
    openapiFields.add("hideZeroBuckets");
    openapiFields.add("highlightCards");
    openapiFields.add("id");
    openapiFields.add("isNew");
    openapiFields.add("leftYAxisLabel");
    openapiFields.add("legend");
    openapiFields.add("limit");
    openapiFields.add("lines");
    openapiFields.add("linewidth");
    openapiFields.add("links");
    openapiFields.add("mappingType");
    openapiFields.add("mappingTypes");
    openapiFields.add("maxDataPoints");
    openapiFields.add("minSpan");
    openapiFields.add("mode");
    openapiFields.add("nameFilter");
    openapiFields.add("nullPointMode");
    openapiFields.add("onlyAlertsOnDashboard");
    openapiFields.add("options");
    openapiFields.add("pageSize");
    openapiFields.add("panels");
    openapiFields.add("percentage");
    openapiFields.add("pointradius");
    openapiFields.add("points");
    openapiFields.add("postfix");
    openapiFields.add("postfixFontSize");
    openapiFields.add("prefix");
    openapiFields.add("prefixFontSize");
    openapiFields.add("query");
    openapiFields.add("rangeMaps");
    openapiFields.add("recent");
    openapiFields.add("renderer");
    openapiFields.add("repeat");
    openapiFields.add("repeatPanelId");
    openapiFields.add("reverseYBuckets");
    openapiFields.add("rightYAxisLabel");
    openapiFields.add("scopedVars");
    openapiFields.add("scroll");
    openapiFields.add("search");
    openapiFields.add("seriesOverrides");
    openapiFields.add("show");
    openapiFields.add("showHeader");
    openapiFields.add("sort");
    openapiFields.add("sortOrder");
    openapiFields.add("spaceLength");
    openapiFields.add("span");
    openapiFields.add("sparkline");
    openapiFields.add("stack");
    openapiFields.add("starred");
    openapiFields.add("stateFilter");
    openapiFields.add("steppedLine");
    openapiFields.add("styles");
    openapiFields.add("tags");
    openapiFields.add("targets");
    openapiFields.add("thresholds");
    openapiFields.add("timeFrom");
    openapiFields.add("timeShift");
    openapiFields.add("title");
    openapiFields.add("tooltip");
    openapiFields.add("tooltipDecimals");
    openapiFields.add("transform");
    openapiFields.add("transparent");
    openapiFields.add("type");
    openapiFields.add("valueFontSize");
    openapiFields.add("valueMaps");
    openapiFields.add("valueName");
    openapiFields.add("x-axis");
    openapiFields.add("xAxis");
    openapiFields.add("xBucketNumber");
    openapiFields.add("xBucketSize");
    openapiFields.add("xaxis");
    openapiFields.add("y-axis");
    openapiFields.add("yAxis");
    openapiFields.add("yBucketBound");
    openapiFields.add("yBucketNumber");
    openapiFields.add("yBucketSize");
    openapiFields.add("y_formats");
    openapiFields.add("yaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Panel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Panel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Panel is not found in the empty JSON string", Panel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Panel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Panel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alert`
      if (jsonObj.get("alert") != null && !jsonObj.get("alert").isJsonNull()) {
        Alert.validateJsonElement(jsonObj.get("alert"));
      }
      // validate the optional field `cards`
      if (jsonObj.get("cards") != null && !jsonObj.get("cards").isJsonNull()) {
        PanelCards.validateJsonElement(jsonObj.get("cards"));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        PanelColor.validateJsonElement(jsonObj.get("color"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull() && !jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            Column.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dashboardTags") != null && !jsonObj.get("dashboardTags").isJsonNull() && !jsonObj.get("dashboardTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboardTags` to be an array in the JSON string but got `%s`", jsonObj.get("dashboardTags").toString()));
      }
      if ((jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) && !jsonObj.get("dataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormat").toString()));
      }
      if ((jsonObj.get("datasource") != null && !jsonObj.get("datasource").isJsonNull()) && !jsonObj.get("datasource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `fieldConfig`
      if (jsonObj.get("fieldConfig") != null && !jsonObj.get("fieldConfig").isJsonNull()) {
        FieldConfig.validateJsonElement(jsonObj.get("fieldConfig"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `gauge`
      if (jsonObj.get("gauge") != null && !jsonObj.get("gauge").isJsonNull()) {
        Gauge.validateJsonElement(jsonObj.get("gauge"));
      }
      // validate the optional field `gridPos`
      if (jsonObj.get("gridPos") != null && !jsonObj.get("gridPos").isJsonNull()) {
        PanelGridPos.validateJsonElement(jsonObj.get("gridPos"));
      }
      if ((jsonObj.get("leftYAxisLabel") != null && !jsonObj.get("leftYAxisLabel").isJsonNull()) && !jsonObj.get("leftYAxisLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leftYAxisLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leftYAxisLabel").toString()));
      }
      // validate the optional field `legend`
      if (jsonObj.get("legend") != null && !jsonObj.get("legend").isJsonNull()) {
        Legend.validateJsonElement(jsonObj.get("legend"));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if (jsonObj.get("mappingTypes") != null && !jsonObj.get("mappingTypes").isJsonNull()) {
        JsonArray jsonArraymappingTypes = jsonObj.getAsJsonArray("mappingTypes");
        if (jsonArraymappingTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappingTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappingTypes` to be an array in the JSON string but got `%s`", jsonObj.get("mappingTypes").toString()));
          }

          // validate the optional field `mappingTypes` (array)
          for (int i = 0; i < jsonArraymappingTypes.size(); i++) {
            MapType.validateJsonElement(jsonArraymappingTypes.get(i));
          };
        }
      }
      // validate the optional field `maxDataPoints`
      if (jsonObj.get("maxDataPoints") != null && !jsonObj.get("maxDataPoints").isJsonNull()) {
        IntString.validateJsonElement(jsonObj.get("maxDataPoints"));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("nameFilter") != null && !jsonObj.get("nameFilter").isJsonNull()) && !jsonObj.get("nameFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameFilter").toString()));
      }
      if ((jsonObj.get("nullPointMode") != null && !jsonObj.get("nullPointMode").isJsonNull()) && !jsonObj.get("nullPointMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullPointMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullPointMode").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Options.validateJsonElement(jsonObj.get("options"));
      }
      if (jsonObj.get("panels") != null && !jsonObj.get("panels").isJsonNull()) {
        JsonArray jsonArraypanels = jsonObj.getAsJsonArray("panels");
        if (jsonArraypanels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("panels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `panels` to be an array in the JSON string but got `%s`", jsonObj.get("panels").toString()));
          }

          // validate the optional field `panels` (array)
          for (int i = 0; i < jsonArraypanels.size(); i++) {
            Panel.validateJsonElement(jsonArraypanels.get(i));
          };
        }
      }
      if ((jsonObj.get("postfix") != null && !jsonObj.get("postfix").isJsonNull()) && !jsonObj.get("postfix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postfix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postfix").toString()));
      }
      if ((jsonObj.get("postfixFontSize") != null && !jsonObj.get("postfixFontSize").isJsonNull()) && !jsonObj.get("postfixFontSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postfixFontSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postfixFontSize").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("prefixFontSize") != null && !jsonObj.get("prefixFontSize").isJsonNull()) && !jsonObj.get("prefixFontSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixFontSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefixFontSize").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("rangeMaps") != null && !jsonObj.get("rangeMaps").isJsonNull()) {
        JsonArray jsonArrayrangeMaps = jsonObj.getAsJsonArray("rangeMaps");
        if (jsonArrayrangeMaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rangeMaps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rangeMaps` to be an array in the JSON string but got `%s`", jsonObj.get("rangeMaps").toString()));
          }

          // validate the optional field `rangeMaps` (array)
          for (int i = 0; i < jsonArrayrangeMaps.size(); i++) {
            RangeMap.validateJsonElement(jsonArrayrangeMaps.get(i));
          };
        }
      }
      if ((jsonObj.get("renderer") != null && !jsonObj.get("renderer").isJsonNull()) && !jsonObj.get("renderer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderer").toString()));
      }
      if ((jsonObj.get("repeat") != null && !jsonObj.get("repeat").isJsonNull()) && !jsonObj.get("repeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeat").toString()));
      }
      if ((jsonObj.get("rightYAxisLabel") != null && !jsonObj.get("rightYAxisLabel").isJsonNull()) && !jsonObj.get("rightYAxisLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightYAxisLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rightYAxisLabel").toString()));
      }
      if (jsonObj.get("seriesOverrides") != null && !jsonObj.get("seriesOverrides").isJsonNull()) {
        JsonArray jsonArrayseriesOverrides = jsonObj.getAsJsonArray("seriesOverrides");
        if (jsonArrayseriesOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seriesOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seriesOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("seriesOverrides").toString()));
          }

          // validate the optional field `seriesOverrides` (array)
          for (int i = 0; i < jsonArrayseriesOverrides.size(); i++) {
            SeriesOverride.validateJsonElement(jsonArrayseriesOverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("show") != null && !jsonObj.get("show").isJsonNull()) && !jsonObj.get("show").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `show` to be a primitive type in the JSON string but got `%s`", jsonObj.get("show").toString()));
      }
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        Sort.validateJsonElement(jsonObj.get("sort"));
      }
      // validate the optional field `sparkline`
      if (jsonObj.get("sparkline") != null && !jsonObj.get("sparkline").isJsonNull()) {
        SparkLine.validateJsonElement(jsonObj.get("sparkline"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stateFilter") != null && !jsonObj.get("stateFilter").isJsonNull() && !jsonObj.get("stateFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateFilter` to be an array in the JSON string but got `%s`", jsonObj.get("stateFilter").toString()));
      }
      if (jsonObj.get("styles") != null && !jsonObj.get("styles").isJsonNull()) {
        JsonArray jsonArraystyles = jsonObj.getAsJsonArray("styles");
        if (jsonArraystyles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("styles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `styles` to be an array in the JSON string but got `%s`", jsonObj.get("styles").toString()));
          }

          // validate the optional field `styles` (array)
          for (int i = 0; i < jsonArraystyles.size(); i++) {
            ColumnStyle.validateJsonElement(jsonArraystyles.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            Target.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if (jsonObj.get("thresholds") != null && !jsonObj.get("thresholds").isJsonNull()) {
        JsonArray jsonArraythresholds = jsonObj.getAsJsonArray("thresholds");
        if (jsonArraythresholds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thresholds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thresholds` to be an array in the JSON string but got `%s`", jsonObj.get("thresholds").toString()));
          }

          // validate the optional field `thresholds` (array)
          for (int i = 0; i < jsonArraythresholds.size(); i++) {
            Threshold.validateJsonElement(jsonArraythresholds.get(i));
          };
        }
      }
      if ((jsonObj.get("timeFrom") != null && !jsonObj.get("timeFrom").isJsonNull()) && !jsonObj.get("timeFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFrom").toString()));
      }
      if ((jsonObj.get("timeShift") != null && !jsonObj.get("timeShift").isJsonNull()) && !jsonObj.get("timeShift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeShift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeShift").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `tooltip`
      if (jsonObj.get("tooltip") != null && !jsonObj.get("tooltip").isJsonNull()) {
        Tooltip.validateJsonElement(jsonObj.get("tooltip"));
      }
      if ((jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) && !jsonObj.get("transform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transform").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("valueFontSize") != null && !jsonObj.get("valueFontSize").isJsonNull()) && !jsonObj.get("valueFontSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueFontSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueFontSize").toString()));
      }
      if (jsonObj.get("valueMaps") != null && !jsonObj.get("valueMaps").isJsonNull()) {
        JsonArray jsonArrayvalueMaps = jsonObj.getAsJsonArray("valueMaps");
        if (jsonArrayvalueMaps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueMaps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueMaps` to be an array in the JSON string but got `%s`", jsonObj.get("valueMaps").toString()));
          }

          // validate the optional field `valueMaps` (array)
          for (int i = 0; i < jsonArrayvalueMaps.size(); i++) {
            ValueMap.validateJsonElement(jsonArrayvalueMaps.get(i));
          };
        }
      }
      if ((jsonObj.get("valueName") != null && !jsonObj.get("valueName").isJsonNull()) && !jsonObj.get("valueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueName").toString()));
      }
      // validate the optional field `xAxis`
      if (jsonObj.get("xAxis") != null && !jsonObj.get("xAxis").isJsonNull()) {
        PanelXAxis.validateJsonElement(jsonObj.get("xAxis"));
      }
      if ((jsonObj.get("xBucketSize") != null && !jsonObj.get("xBucketSize").isJsonNull()) && !jsonObj.get("xBucketSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xBucketSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xBucketSize").toString()));
      }
      // validate the optional field `xaxis`
      if (jsonObj.get("xaxis") != null && !jsonObj.get("xaxis").isJsonNull()) {
        Axis.validateJsonElement(jsonObj.get("xaxis"));
      }
      // validate the optional field `yAxis`
      if (jsonObj.get("yAxis") != null && !jsonObj.get("yAxis").isJsonNull()) {
        PanelYAxis.validateJsonElement(jsonObj.get("yAxis"));
      }
      if ((jsonObj.get("yBucketBound") != null && !jsonObj.get("yBucketBound").isJsonNull()) && !jsonObj.get("yBucketBound").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yBucketBound` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yBucketBound").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("y_formats") != null && !jsonObj.get("y_formats").isJsonNull() && !jsonObj.get("y_formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `y_formats` to be an array in the JSON string but got `%s`", jsonObj.get("y_formats").toString()));
      }
      if (jsonObj.get("yaxes") != null && !jsonObj.get("yaxes").isJsonNull()) {
        JsonArray jsonArrayyaxes = jsonObj.getAsJsonArray("yaxes");
        if (jsonArrayyaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("yaxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `yaxes` to be an array in the JSON string but got `%s`", jsonObj.get("yaxes").toString()));
          }

          // validate the optional field `yaxes` (array)
          for (int i = 0; i < jsonArrayyaxes.size(); i++) {
            Axis.validateJsonElement(jsonArrayyaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Panel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Panel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Panel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Panel.class));

       return (TypeAdapter<T>) new TypeAdapter<Panel>() {
           @Override
           public void write(JsonWriter out, Panel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Panel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Panel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Panel
   * @throws IOException if the JSON string is invalid with respect to Panel
   */
  public static Panel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Panel.class);
  }

  /**
   * Convert an instance of Panel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

