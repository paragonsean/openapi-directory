/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SelectedGrafanaConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grafana represents the Grafana session config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Grafana {
  public static final String SERIALIZED_NAME_GRAFANA_A_P_I_KEY = "grafanaAPIKey";
  @SerializedName(SERIALIZED_NAME_GRAFANA_A_P_I_KEY)
  private String grafanaAPIKey;

  public static final String SERIALIZED_NAME_GRAFANA_U_R_L = "grafanaURL";
  @SerializedName(SERIALIZED_NAME_GRAFANA_U_R_L)
  private String grafanaURL;

  public static final String SERIALIZED_NAME_SELECTED_BOARDS_CONFIGS = "selectedBoardsConfigs";
  @SerializedName(SERIALIZED_NAME_SELECTED_BOARDS_CONFIGS)
  private List<SelectedGrafanaConfig> selectedBoardsConfigs = new ArrayList<>();

  public Grafana() {
  }

  public Grafana grafanaAPIKey(String grafanaAPIKey) {
    this.grafanaAPIKey = grafanaAPIKey;
    return this;
  }

  /**
   * Get grafanaAPIKey
   * @return grafanaAPIKey
   */
  @javax.annotation.Nullable
  public String getGrafanaAPIKey() {
    return grafanaAPIKey;
  }

  public void setGrafanaAPIKey(String grafanaAPIKey) {
    this.grafanaAPIKey = grafanaAPIKey;
  }


  public Grafana grafanaURL(String grafanaURL) {
    this.grafanaURL = grafanaURL;
    return this;
  }

  /**
   * Get grafanaURL
   * @return grafanaURL
   */
  @javax.annotation.Nullable
  public String getGrafanaURL() {
    return grafanaURL;
  }

  public void setGrafanaURL(String grafanaURL) {
    this.grafanaURL = grafanaURL;
  }


  public Grafana selectedBoardsConfigs(List<SelectedGrafanaConfig> selectedBoardsConfigs) {
    this.selectedBoardsConfigs = selectedBoardsConfigs;
    return this;
  }

  public Grafana addSelectedBoardsConfigsItem(SelectedGrafanaConfig selectedBoardsConfigsItem) {
    if (this.selectedBoardsConfigs == null) {
      this.selectedBoardsConfigs = new ArrayList<>();
    }
    this.selectedBoardsConfigs.add(selectedBoardsConfigsItem);
    return this;
  }

  /**
   * GrafanaBoardSearch string          &#x60;json:\&quot;grafanaBoardSearch,omitempty\&quot;&#x60;
   * @return selectedBoardsConfigs
   */
  @javax.annotation.Nullable
  public List<SelectedGrafanaConfig> getSelectedBoardsConfigs() {
    return selectedBoardsConfigs;
  }

  public void setSelectedBoardsConfigs(List<SelectedGrafanaConfig> selectedBoardsConfigs) {
    this.selectedBoardsConfigs = selectedBoardsConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grafana grafana = (Grafana) o;
    return Objects.equals(this.grafanaAPIKey, grafana.grafanaAPIKey) &&
        Objects.equals(this.grafanaURL, grafana.grafanaURL) &&
        Objects.equals(this.selectedBoardsConfigs, grafana.selectedBoardsConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grafanaAPIKey, grafanaURL, selectedBoardsConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grafana {\n");
    sb.append("    grafanaAPIKey: ").append(toIndentedString(grafanaAPIKey)).append("\n");
    sb.append("    grafanaURL: ").append(toIndentedString(grafanaURL)).append("\n");
    sb.append("    selectedBoardsConfigs: ").append(toIndentedString(selectedBoardsConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grafanaAPIKey");
    openapiFields.add("grafanaURL");
    openapiFields.add("selectedBoardsConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Grafana
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Grafana.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Grafana is not found in the empty JSON string", Grafana.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Grafana.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Grafana` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("grafanaAPIKey") != null && !jsonObj.get("grafanaAPIKey").isJsonNull()) && !jsonObj.get("grafanaAPIKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grafanaAPIKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grafanaAPIKey").toString()));
      }
      if ((jsonObj.get("grafanaURL") != null && !jsonObj.get("grafanaURL").isJsonNull()) && !jsonObj.get("grafanaURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grafanaURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grafanaURL").toString()));
      }
      if (jsonObj.get("selectedBoardsConfigs") != null && !jsonObj.get("selectedBoardsConfigs").isJsonNull()) {
        JsonArray jsonArrayselectedBoardsConfigs = jsonObj.getAsJsonArray("selectedBoardsConfigs");
        if (jsonArrayselectedBoardsConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectedBoardsConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectedBoardsConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("selectedBoardsConfigs").toString()));
          }

          // validate the optional field `selectedBoardsConfigs` (array)
          for (int i = 0; i < jsonArrayselectedBoardsConfigs.size(); i++) {
            SelectedGrafanaConfig.validateJsonElement(jsonArrayselectedBoardsConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Grafana.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Grafana' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Grafana> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Grafana.class));

       return (TypeAdapter<T>) new TypeAdapter<Grafana>() {
           @Override
           public void write(JsonWriter out, Grafana value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Grafana read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Grafana given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Grafana
   * @throws IOException if the JSON string is invalid with respect to Grafana
   */
  public static Grafana fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Grafana.class);
  }

  /**
   * Convert an instance of Grafana to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

