/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceTestConfigClient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceTestConfigClient {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private Integer connections;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_COOKIES = "cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private Map<String, String> cookies = new HashMap<>();

  public static final String SERIALIZED_NAME_ENDPOINT_URLS = "endpoint_urls";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URLS)
  private List<String> endpointUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private Boolean internal;

  public static final String SERIALIZED_NAME_LOAD_GENERATOR = "load_generator";
  @SerializedName(SERIALIZED_NAME_LOAD_GENERATOR)
  private String loadGenerator;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Integer protocol;

  public static final String SERIALIZED_NAME_RPS = "rps";
  @SerializedName(SERIALIZED_NAME_RPS)
  private Long rps;

  public PerformanceTestConfigClient() {
  }

  public PerformanceTestConfigClient body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PerformanceTestConfigClient connections(Integer connections) {
    this.connections = connections;
    return this;
  }

  /**
   * Get connections
   * @return connections
   */
  @javax.annotation.Nullable
  public Integer getConnections() {
    return connections;
  }

  public void setConnections(Integer connections) {
    this.connections = connections;
  }


  public PerformanceTestConfigClient contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public PerformanceTestConfigClient cookies(Map<String, String> cookies) {
    this.cookies = cookies;
    return this;
  }

  public PerformanceTestConfigClient putCookiesItem(String key, String cookiesItem) {
    if (this.cookies == null) {
      this.cookies = new HashMap<>();
    }
    this.cookies.put(key, cookiesItem);
    return this;
  }

  /**
   * Get cookies
   * @return cookies
   */
  @javax.annotation.Nullable
  public Map<String, String> getCookies() {
    return cookies;
  }

  public void setCookies(Map<String, String> cookies) {
    this.cookies = cookies;
  }


  public PerformanceTestConfigClient endpointUrls(List<String> endpointUrls) {
    this.endpointUrls = endpointUrls;
    return this;
  }

  public PerformanceTestConfigClient addEndpointUrlsItem(String endpointUrlsItem) {
    if (this.endpointUrls == null) {
      this.endpointUrls = new ArrayList<>();
    }
    this.endpointUrls.add(endpointUrlsItem);
    return this;
  }

  /**
   * Get endpointUrls
   * @return endpointUrls
   */
  @javax.annotation.Nullable
  public List<String> getEndpointUrls() {
    return endpointUrls;
  }

  public void setEndpointUrls(List<String> endpointUrls) {
    this.endpointUrls = endpointUrls;
  }


  public PerformanceTestConfigClient headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public PerformanceTestConfigClient putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public PerformanceTestConfigClient internal(Boolean internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable
  public Boolean getInternal() {
    return internal;
  }

  public void setInternal(Boolean internal) {
    this.internal = internal;
  }


  public PerformanceTestConfigClient loadGenerator(String loadGenerator) {
    this.loadGenerator = loadGenerator;
    return this;
  }

  /**
   * Get loadGenerator
   * @return loadGenerator
   */
  @javax.annotation.Nullable
  public String getLoadGenerator() {
    return loadGenerator;
  }

  public void setLoadGenerator(String loadGenerator) {
    this.loadGenerator = loadGenerator;
  }


  public PerformanceTestConfigClient protocol(Integer protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public Integer getProtocol() {
    return protocol;
  }

  public void setProtocol(Integer protocol) {
    this.protocol = protocol;
  }


  public PerformanceTestConfigClient rps(Long rps) {
    this.rps = rps;
    return this;
  }

  /**
   * Get rps
   * @return rps
   */
  @javax.annotation.Nullable
  public Long getRps() {
    return rps;
  }

  public void setRps(Long rps) {
    this.rps = rps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceTestConfigClient performanceTestConfigClient = (PerformanceTestConfigClient) o;
    return Objects.equals(this.body, performanceTestConfigClient.body) &&
        Objects.equals(this.connections, performanceTestConfigClient.connections) &&
        Objects.equals(this.contentType, performanceTestConfigClient.contentType) &&
        Objects.equals(this.cookies, performanceTestConfigClient.cookies) &&
        Objects.equals(this.endpointUrls, performanceTestConfigClient.endpointUrls) &&
        Objects.equals(this.headers, performanceTestConfigClient.headers) &&
        Objects.equals(this.internal, performanceTestConfigClient.internal) &&
        Objects.equals(this.loadGenerator, performanceTestConfigClient.loadGenerator) &&
        Objects.equals(this.protocol, performanceTestConfigClient.protocol) &&
        Objects.equals(this.rps, performanceTestConfigClient.rps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, connections, contentType, cookies, endpointUrls, headers, internal, loadGenerator, protocol, rps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceTestConfigClient {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    endpointUrls: ").append(toIndentedString(endpointUrls)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    loadGenerator: ").append(toIndentedString(loadGenerator)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    rps: ").append(toIndentedString(rps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("connections");
    openapiFields.add("content_type");
    openapiFields.add("cookies");
    openapiFields.add("endpoint_urls");
    openapiFields.add("headers");
    openapiFields.add("internal");
    openapiFields.add("load_generator");
    openapiFields.add("protocol");
    openapiFields.add("rps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceTestConfigClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceTestConfigClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceTestConfigClient is not found in the empty JSON string", PerformanceTestConfigClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceTestConfigClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceTestConfigClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("endpoint_urls") != null && !jsonObj.get("endpoint_urls").isJsonNull() && !jsonObj.get("endpoint_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint_urls` to be an array in the JSON string but got `%s`", jsonObj.get("endpoint_urls").toString()));
      }
      if ((jsonObj.get("load_generator") != null && !jsonObj.get("load_generator").isJsonNull()) && !jsonObj.get("load_generator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `load_generator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("load_generator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceTestConfigClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceTestConfigClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceTestConfigClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceTestConfigClient.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceTestConfigClient>() {
           @Override
           public void write(JsonWriter out, PerformanceTestConfigClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceTestConfigClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceTestConfigClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceTestConfigClient
   * @throws IOException if the JSON string is invalid with respect to PerformanceTestConfigClient
   */
  public static PerformanceTestConfigClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceTestConfigClient.class);
  }

  /**
   * Convert an instance of PerformanceTestConfigClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

