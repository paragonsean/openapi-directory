/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceProfileParameters structs contains parameters to save a performance profile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceProfileParameters {
  public static final String SERIALIZED_NAME_CONCURRENT_REQUEST = "concurrent_request";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_REQUEST)
  private Long concurrentRequest;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<String> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_GENERATORS = "load_generators";
  @SerializedName(SERIALIZED_NAME_LOAD_GENERATORS)
  private List<String> loadGenerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QPS = "qps";
  @SerializedName(SERIALIZED_NAME_QPS)
  private Long qps;

  public static final String SERIALIZED_NAME_SERVICE_MESH = "service_mesh";
  @SerializedName(SERIALIZED_NAME_SERVICE_MESH)
  private String serviceMesh;

  public PerformanceProfileParameters() {
  }

  public PerformanceProfileParameters concurrentRequest(Long concurrentRequest) {
    this.concurrentRequest = concurrentRequest;
    return this;
  }

  /**
   * number of concurrent requests
   * @return concurrentRequest
   */
  @javax.annotation.Nullable
  public Long getConcurrentRequest() {
    return concurrentRequest;
  }

  public void setConcurrentRequest(Long concurrentRequest) {
    this.concurrentRequest = concurrentRequest;
  }


  public PerformanceProfileParameters duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * duration of tests e.g. 30s
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public PerformanceProfileParameters endpoints(List<String> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public PerformanceProfileParameters addEndpointsItem(String endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * array of urls of performance results
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<String> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<String> endpoints) {
    this.endpoints = endpoints;
  }


  public PerformanceProfileParameters loadGenerators(List<String> loadGenerators) {
    this.loadGenerators = loadGenerators;
    return this;
  }

  public PerformanceProfileParameters addLoadGeneratorsItem(String loadGeneratorsItem) {
    if (this.loadGenerators == null) {
      this.loadGenerators = new ArrayList<>();
    }
    this.loadGenerators.add(loadGeneratorsItem);
    return this;
  }

  /**
   * array of load generators
   * @return loadGenerators
   */
  @javax.annotation.Nullable
  public List<String> getLoadGenerators() {
    return loadGenerators;
  }

  public void setLoadGenerators(List<String> loadGenerators) {
    this.loadGenerators = loadGenerators;
  }


  public PerformanceProfileParameters name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of performance profile
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PerformanceProfileParameters qps(Long qps) {
    this.qps = qps;
    return this;
  }

  /**
   * qps in integer
   * @return qps
   */
  @javax.annotation.Nullable
  public Long getQps() {
    return qps;
  }

  public void setQps(Long qps) {
    this.qps = qps;
  }


  public PerformanceProfileParameters serviceMesh(String serviceMesh) {
    this.serviceMesh = serviceMesh;
    return this;
  }

  /**
   * service mesh for performance tests
   * @return serviceMesh
   */
  @javax.annotation.Nullable
  public String getServiceMesh() {
    return serviceMesh;
  }

  public void setServiceMesh(String serviceMesh) {
    this.serviceMesh = serviceMesh;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceProfileParameters performanceProfileParameters = (PerformanceProfileParameters) o;
    return Objects.equals(this.concurrentRequest, performanceProfileParameters.concurrentRequest) &&
        Objects.equals(this.duration, performanceProfileParameters.duration) &&
        Objects.equals(this.endpoints, performanceProfileParameters.endpoints) &&
        Objects.equals(this.loadGenerators, performanceProfileParameters.loadGenerators) &&
        Objects.equals(this.name, performanceProfileParameters.name) &&
        Objects.equals(this.qps, performanceProfileParameters.qps) &&
        Objects.equals(this.serviceMesh, performanceProfileParameters.serviceMesh);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrentRequest, duration, endpoints, loadGenerators, name, qps, serviceMesh);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceProfileParameters {\n");
    sb.append("    concurrentRequest: ").append(toIndentedString(concurrentRequest)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    loadGenerators: ").append(toIndentedString(loadGenerators)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    qps: ").append(toIndentedString(qps)).append("\n");
    sb.append("    serviceMesh: ").append(toIndentedString(serviceMesh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrent_request");
    openapiFields.add("duration");
    openapiFields.add("endpoints");
    openapiFields.add("load_generators");
    openapiFields.add("name");
    openapiFields.add("qps");
    openapiFields.add("service_mesh");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceProfileParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceProfileParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceProfileParameters is not found in the empty JSON string", PerformanceProfileParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceProfileParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceProfileParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull() && !jsonObj.get("endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("load_generators") != null && !jsonObj.get("load_generators").isJsonNull() && !jsonObj.get("load_generators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `load_generators` to be an array in the JSON string but got `%s`", jsonObj.get("load_generators").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("service_mesh") != null && !jsonObj.get("service_mesh").isJsonNull()) && !jsonObj.get("service_mesh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_mesh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_mesh").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceProfileParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceProfileParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceProfileParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceProfileParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceProfileParameters>() {
           @Override
           public void write(JsonWriter out, PerformanceProfileParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceProfileParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceProfileParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceProfileParameters
   * @throws IOException if the JSON string is invalid with respect to PerformanceProfileParameters
   */
  public static PerformanceProfileParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceProfileParameters.class);
  }

  /**
   * Convert an instance of PerformanceProfileParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

