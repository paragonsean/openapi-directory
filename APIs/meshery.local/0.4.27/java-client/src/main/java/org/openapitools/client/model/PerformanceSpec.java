/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LatenciesMs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformanceSpec - represents SMP, see here https://github.com/layer5io/service-mesh-performance-specification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceSpec {
  public static final String SERIALIZED_NAME_ACTUAL_Q_P_S = "ActualQPS";
  @SerializedName(SERIALIZED_NAME_ACTUAL_Q_P_S)
  private Double actualQPS;

  public static final String SERIALIZED_NAME_DETAILS_U_R_I = "DetailsURI";
  @SerializedName(SERIALIZED_NAME_DETAILS_U_R_I)
  private String detailsURI;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ENV_I_D = "EnvID";
  @SerializedName(SERIALIZED_NAME_ENV_I_D)
  private String envID;

  public static final String SERIALIZED_NAME_LATENCIES = "Latencies";
  @SerializedName(SERIALIZED_NAME_LATENCIES)
  private LatenciesMs latencies;

  public static final String SERIALIZED_NAME_MESH_CONFIG_I_D = "MeshConfigID";
  @SerializedName(SERIALIZED_NAME_MESH_CONFIG_I_D)
  private String meshConfigID;

  public static final String SERIALIZED_NAME_SM_P_VERSION = "SMPVersion";
  @SerializedName(SERIALIZED_NAME_SM_P_VERSION)
  private String smPVersion;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TEST_I_D = "TestID";
  @SerializedName(SERIALIZED_NAME_TEST_I_D)
  private String testID;

  public PerformanceSpec() {
  }

  public PerformanceSpec actualQPS(Double actualQPS) {
    this.actualQPS = actualQPS;
    return this;
  }

  /**
   * Get actualQPS
   * @return actualQPS
   */
  @javax.annotation.Nullable
  public Double getActualQPS() {
    return actualQPS;
  }

  public void setActualQPS(Double actualQPS) {
    this.actualQPS = actualQPS;
  }


  public PerformanceSpec detailsURI(String detailsURI) {
    this.detailsURI = detailsURI;
    return this;
  }

  /**
   * Get detailsURI
   * @return detailsURI
   */
  @javax.annotation.Nullable
  public String getDetailsURI() {
    return detailsURI;
  }

  public void setDetailsURI(String detailsURI) {
    this.detailsURI = detailsURI;
  }


  public PerformanceSpec endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public PerformanceSpec envID(String envID) {
    this.envID = envID;
    return this;
  }

  /**
   * Get envID
   * @return envID
   */
  @javax.annotation.Nullable
  public String getEnvID() {
    return envID;
  }

  public void setEnvID(String envID) {
    this.envID = envID;
  }


  public PerformanceSpec latencies(LatenciesMs latencies) {
    this.latencies = latencies;
    return this;
  }

  /**
   * Get latencies
   * @return latencies
   */
  @javax.annotation.Nullable
  public LatenciesMs getLatencies() {
    return latencies;
  }

  public void setLatencies(LatenciesMs latencies) {
    this.latencies = latencies;
  }


  public PerformanceSpec meshConfigID(String meshConfigID) {
    this.meshConfigID = meshConfigID;
    return this;
  }

  /**
   * Get meshConfigID
   * @return meshConfigID
   */
  @javax.annotation.Nullable
  public String getMeshConfigID() {
    return meshConfigID;
  }

  public void setMeshConfigID(String meshConfigID) {
    this.meshConfigID = meshConfigID;
  }


  public PerformanceSpec smPVersion(String smPVersion) {
    this.smPVersion = smPVersion;
    return this;
  }

  /**
   * Get smPVersion
   * @return smPVersion
   */
  @javax.annotation.Nullable
  public String getSmPVersion() {
    return smPVersion;
  }

  public void setSmPVersion(String smPVersion) {
    this.smPVersion = smPVersion;
  }


  public PerformanceSpec startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public PerformanceSpec testID(String testID) {
    this.testID = testID;
    return this;
  }

  /**
   * Get testID
   * @return testID
   */
  @javax.annotation.Nullable
  public String getTestID() {
    return testID;
  }

  public void setTestID(String testID) {
    this.testID = testID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceSpec performanceSpec = (PerformanceSpec) o;
    return Objects.equals(this.actualQPS, performanceSpec.actualQPS) &&
        Objects.equals(this.detailsURI, performanceSpec.detailsURI) &&
        Objects.equals(this.endTime, performanceSpec.endTime) &&
        Objects.equals(this.envID, performanceSpec.envID) &&
        Objects.equals(this.latencies, performanceSpec.latencies) &&
        Objects.equals(this.meshConfigID, performanceSpec.meshConfigID) &&
        Objects.equals(this.smPVersion, performanceSpec.smPVersion) &&
        Objects.equals(this.startTime, performanceSpec.startTime) &&
        Objects.equals(this.testID, performanceSpec.testID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualQPS, detailsURI, endTime, envID, latencies, meshConfigID, smPVersion, startTime, testID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceSpec {\n");
    sb.append("    actualQPS: ").append(toIndentedString(actualQPS)).append("\n");
    sb.append("    detailsURI: ").append(toIndentedString(detailsURI)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    envID: ").append(toIndentedString(envID)).append("\n");
    sb.append("    latencies: ").append(toIndentedString(latencies)).append("\n");
    sb.append("    meshConfigID: ").append(toIndentedString(meshConfigID)).append("\n");
    sb.append("    smPVersion: ").append(toIndentedString(smPVersion)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    testID: ").append(toIndentedString(testID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActualQPS");
    openapiFields.add("DetailsURI");
    openapiFields.add("EndTime");
    openapiFields.add("EnvID");
    openapiFields.add("Latencies");
    openapiFields.add("MeshConfigID");
    openapiFields.add("SMPVersion");
    openapiFields.add("StartTime");
    openapiFields.add("TestID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceSpec is not found in the empty JSON string", PerformanceSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DetailsURI") != null && !jsonObj.get("DetailsURI").isJsonNull()) && !jsonObj.get("DetailsURI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DetailsURI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DetailsURI").toString()));
      }
      if ((jsonObj.get("EnvID") != null && !jsonObj.get("EnvID").isJsonNull()) && !jsonObj.get("EnvID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnvID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnvID").toString()));
      }
      // validate the optional field `Latencies`
      if (jsonObj.get("Latencies") != null && !jsonObj.get("Latencies").isJsonNull()) {
        LatenciesMs.validateJsonElement(jsonObj.get("Latencies"));
      }
      if ((jsonObj.get("MeshConfigID") != null && !jsonObj.get("MeshConfigID").isJsonNull()) && !jsonObj.get("MeshConfigID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeshConfigID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeshConfigID").toString()));
      }
      if ((jsonObj.get("SMPVersion") != null && !jsonObj.get("SMPVersion").isJsonNull()) && !jsonObj.get("SMPVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SMPVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SMPVersion").toString()));
      }
      if ((jsonObj.get("TestID") != null && !jsonObj.get("TestID").isJsonNull()) && !jsonObj.get("TestID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TestID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TestID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceSpec>() {
           @Override
           public void write(JsonWriter out, PerformanceSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceSpec
   * @throws IOException if the JSON string is invalid with respect to PerformanceSpec
   */
  public static PerformanceSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceSpec.class);
  }

  /**
   * Convert an instance of PerformanceSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

