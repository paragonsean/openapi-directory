/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertEvaluator;
import org.openapitools.client.model.AlertOperator;
import org.openapitools.client.model.AlertQuery;
import org.openapitools.client.model.AlertReducer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertCondition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertCondition {
  public static final String SERIALIZED_NAME_EVALUATOR = "evaluator";
  @SerializedName(SERIALIZED_NAME_EVALUATOR)
  private AlertEvaluator evaluator;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private AlertOperator operator;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private AlertQuery query;

  public static final String SERIALIZED_NAME_REDUCER = "reducer";
  @SerializedName(SERIALIZED_NAME_REDUCER)
  private AlertReducer reducer;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AlertCondition() {
  }

  public AlertCondition evaluator(AlertEvaluator evaluator) {
    this.evaluator = evaluator;
    return this;
  }

  /**
   * Get evaluator
   * @return evaluator
   */
  @javax.annotation.Nullable
  public AlertEvaluator getEvaluator() {
    return evaluator;
  }

  public void setEvaluator(AlertEvaluator evaluator) {
    this.evaluator = evaluator;
  }


  public AlertCondition operator(AlertOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public AlertOperator getOperator() {
    return operator;
  }

  public void setOperator(AlertOperator operator) {
    this.operator = operator;
  }


  public AlertCondition query(AlertQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public AlertQuery getQuery() {
    return query;
  }

  public void setQuery(AlertQuery query) {
    this.query = query;
  }


  public AlertCondition reducer(AlertReducer reducer) {
    this.reducer = reducer;
    return this;
  }

  /**
   * Get reducer
   * @return reducer
   */
  @javax.annotation.Nullable
  public AlertReducer getReducer() {
    return reducer;
  }

  public void setReducer(AlertReducer reducer) {
    this.reducer = reducer;
  }


  public AlertCondition type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertCondition alertCondition = (AlertCondition) o;
    return Objects.equals(this.evaluator, alertCondition.evaluator) &&
        Objects.equals(this.operator, alertCondition.operator) &&
        Objects.equals(this.query, alertCondition.query) &&
        Objects.equals(this.reducer, alertCondition.reducer) &&
        Objects.equals(this.type, alertCondition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluator, operator, query, reducer, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertCondition {\n");
    sb.append("    evaluator: ").append(toIndentedString(evaluator)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    reducer: ").append(toIndentedString(reducer)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluator");
    openapiFields.add("operator");
    openapiFields.add("query");
    openapiFields.add("reducer");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertCondition is not found in the empty JSON string", AlertCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `evaluator`
      if (jsonObj.get("evaluator") != null && !jsonObj.get("evaluator").isJsonNull()) {
        AlertEvaluator.validateJsonElement(jsonObj.get("evaluator"));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        AlertOperator.validateJsonElement(jsonObj.get("operator"));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        AlertQuery.validateJsonElement(jsonObj.get("query"));
      }
      // validate the optional field `reducer`
      if (jsonObj.get("reducer") != null && !jsonObj.get("reducer").isJsonNull()) {
        AlertReducer.validateJsonElement(jsonObj.get("reducer"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertCondition>() {
           @Override
           public void write(JsonWriter out, AlertCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertCondition
   * @throws IOException if the JSON string is invalid with respect to AlertCondition
   */
  public static AlertCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertCondition.class);
  }

  /**
   * Convert an instance of AlertCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

