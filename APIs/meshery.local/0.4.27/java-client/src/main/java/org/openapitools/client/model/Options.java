/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OptionsReduceOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Options {
  public static final String SERIALIZED_NAME_COLOR_MODE = "colorMode";
  @SerializedName(SERIALIZED_NAME_COLOR_MODE)
  private String colorMode;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DISPLAY_MODE = "displayMode";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MODE)
  private String displayMode;

  public static final String SERIALIZED_NAME_GRAPH_MODE = "graphMode";
  @SerializedName(SERIALIZED_NAME_GRAPH_MODE)
  private String graphMode;

  public static final String SERIALIZED_NAME_JUSTIFY_MODE = "justifyMode";
  @SerializedName(SERIALIZED_NAME_JUSTIFY_MODE)
  private String justifyMode;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private String orientation;

  public static final String SERIALIZED_NAME_REDUCE_OPTIONS = "reduceOptions";
  @SerializedName(SERIALIZED_NAME_REDUCE_OPTIONS)
  private OptionsReduceOptions reduceOptions;

  public static final String SERIALIZED_NAME_TEXT_MODE = "textMode";
  @SerializedName(SERIALIZED_NAME_TEXT_MODE)
  private String textMode;

  public Options() {
  }

  public Options colorMode(String colorMode) {
    this.colorMode = colorMode;
    return this;
  }

  /**
   * Get colorMode
   * @return colorMode
   */
  @javax.annotation.Nullable
  public String getColorMode() {
    return colorMode;
  }

  public void setColorMode(String colorMode) {
    this.colorMode = colorMode;
  }


  public Options content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Options displayMode(String displayMode) {
    this.displayMode = displayMode;
    return this;
  }

  /**
   * Get displayMode
   * @return displayMode
   */
  @javax.annotation.Nullable
  public String getDisplayMode() {
    return displayMode;
  }

  public void setDisplayMode(String displayMode) {
    this.displayMode = displayMode;
  }


  public Options graphMode(String graphMode) {
    this.graphMode = graphMode;
    return this;
  }

  /**
   * Get graphMode
   * @return graphMode
   */
  @javax.annotation.Nullable
  public String getGraphMode() {
    return graphMode;
  }

  public void setGraphMode(String graphMode) {
    this.graphMode = graphMode;
  }


  public Options justifyMode(String justifyMode) {
    this.justifyMode = justifyMode;
    return this;
  }

  /**
   * Get justifyMode
   * @return justifyMode
   */
  @javax.annotation.Nullable
  public String getJustifyMode() {
    return justifyMode;
  }

  public void setJustifyMode(String justifyMode) {
    this.justifyMode = justifyMode;
  }


  public Options mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public Options orientation(String orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Get orientation
   * @return orientation
   */
  @javax.annotation.Nullable
  public String getOrientation() {
    return orientation;
  }

  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }


  public Options reduceOptions(OptionsReduceOptions reduceOptions) {
    this.reduceOptions = reduceOptions;
    return this;
  }

  /**
   * Get reduceOptions
   * @return reduceOptions
   */
  @javax.annotation.Nullable
  public OptionsReduceOptions getReduceOptions() {
    return reduceOptions;
  }

  public void setReduceOptions(OptionsReduceOptions reduceOptions) {
    this.reduceOptions = reduceOptions;
  }


  public Options textMode(String textMode) {
    this.textMode = textMode;
    return this;
  }

  /**
   * Get textMode
   * @return textMode
   */
  @javax.annotation.Nullable
  public String getTextMode() {
    return textMode;
  }

  public void setTextMode(String textMode) {
    this.textMode = textMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.colorMode, options.colorMode) &&
        Objects.equals(this.content, options.content) &&
        Objects.equals(this.displayMode, options.displayMode) &&
        Objects.equals(this.graphMode, options.graphMode) &&
        Objects.equals(this.justifyMode, options.justifyMode) &&
        Objects.equals(this.mode, options.mode) &&
        Objects.equals(this.orientation, options.orientation) &&
        Objects.equals(this.reduceOptions, options.reduceOptions) &&
        Objects.equals(this.textMode, options.textMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorMode, content, displayMode, graphMode, justifyMode, mode, orientation, reduceOptions, textMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    colorMode: ").append(toIndentedString(colorMode)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    displayMode: ").append(toIndentedString(displayMode)).append("\n");
    sb.append("    graphMode: ").append(toIndentedString(graphMode)).append("\n");
    sb.append("    justifyMode: ").append(toIndentedString(justifyMode)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    reduceOptions: ").append(toIndentedString(reduceOptions)).append("\n");
    sb.append("    textMode: ").append(toIndentedString(textMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorMode");
    openapiFields.add("content");
    openapiFields.add("displayMode");
    openapiFields.add("graphMode");
    openapiFields.add("justifyMode");
    openapiFields.add("mode");
    openapiFields.add("orientation");
    openapiFields.add("reduceOptions");
    openapiFields.add("textMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Options
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Options.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Options is not found in the empty JSON string", Options.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Options.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Options` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorMode") != null && !jsonObj.get("colorMode").isJsonNull()) && !jsonObj.get("colorMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorMode").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("displayMode") != null && !jsonObj.get("displayMode").isJsonNull()) && !jsonObj.get("displayMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMode").toString()));
      }
      if ((jsonObj.get("graphMode") != null && !jsonObj.get("graphMode").isJsonNull()) && !jsonObj.get("graphMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `graphMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("graphMode").toString()));
      }
      if ((jsonObj.get("justifyMode") != null && !jsonObj.get("justifyMode").isJsonNull()) && !jsonObj.get("justifyMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `justifyMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("justifyMode").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      // validate the optional field `reduceOptions`
      if (jsonObj.get("reduceOptions") != null && !jsonObj.get("reduceOptions").isJsonNull()) {
        OptionsReduceOptions.validateJsonElement(jsonObj.get("reduceOptions"));
      }
      if ((jsonObj.get("textMode") != null && !jsonObj.get("textMode").isJsonNull()) && !jsonObj.get("textMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Options.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Options' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Options> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Options.class));

       return (TypeAdapter<T>) new TypeAdapter<Options>() {
           @Override
           public void write(JsonWriter out, Options value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Options read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Options given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Options
   * @throws IOException if the JSON string is invalid with respect to Options
   */
  public static Options fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Options.class);
  }

  /**
   * Convert an instance of Options to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

