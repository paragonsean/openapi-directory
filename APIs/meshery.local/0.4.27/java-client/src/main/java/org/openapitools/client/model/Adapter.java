/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SupportedOperation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Adapter represents an adapter in Meshery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Adapter {
  public static final String SERIALIZED_NAME_ADAPTER_LOCATION = "adapter_location";
  @SerializedName(SERIALIZED_NAME_ADAPTER_LOCATION)
  private String adapterLocation;

  public static final String SERIALIZED_NAME_GIT_COMMIT_SHA = "git_commit_sha";
  @SerializedName(SERIALIZED_NAME_GIT_COMMIT_SHA)
  private String gitCommitSha;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPS = "ops";
  @SerializedName(SERIALIZED_NAME_OPS)
  private List<SupportedOperation> ops = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Adapter() {
  }

  public Adapter adapterLocation(String adapterLocation) {
    this.adapterLocation = adapterLocation;
    return this;
  }

  /**
   * Get adapterLocation
   * @return adapterLocation
   */
  @javax.annotation.Nullable
  public String getAdapterLocation() {
    return adapterLocation;
  }

  public void setAdapterLocation(String adapterLocation) {
    this.adapterLocation = adapterLocation;
  }


  public Adapter gitCommitSha(String gitCommitSha) {
    this.gitCommitSha = gitCommitSha;
    return this;
  }

  /**
   * Get gitCommitSha
   * @return gitCommitSha
   */
  @javax.annotation.Nullable
  public String getGitCommitSha() {
    return gitCommitSha;
  }

  public void setGitCommitSha(String gitCommitSha) {
    this.gitCommitSha = gitCommitSha;
  }


  public Adapter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Adapter ops(List<SupportedOperation> ops) {
    this.ops = ops;
    return this;
  }

  public Adapter addOpsItem(SupportedOperation opsItem) {
    if (this.ops == null) {
      this.ops = new ArrayList<>();
    }
    this.ops.add(opsItem);
    return this;
  }

  /**
   * Get ops
   * @return ops
   */
  @javax.annotation.Nullable
  public List<SupportedOperation> getOps() {
    return ops;
  }

  public void setOps(List<SupportedOperation> ops) {
    this.ops = ops;
  }


  public Adapter version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Adapter adapter = (Adapter) o;
    return Objects.equals(this.adapterLocation, adapter.adapterLocation) &&
        Objects.equals(this.gitCommitSha, adapter.gitCommitSha) &&
        Objects.equals(this.name, adapter.name) &&
        Objects.equals(this.ops, adapter.ops) &&
        Objects.equals(this.version, adapter.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adapterLocation, gitCommitSha, name, ops, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Adapter {\n");
    sb.append("    adapterLocation: ").append(toIndentedString(adapterLocation)).append("\n");
    sb.append("    gitCommitSha: ").append(toIndentedString(gitCommitSha)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ops: ").append(toIndentedString(ops)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adapter_location");
    openapiFields.add("git_commit_sha");
    openapiFields.add("name");
    openapiFields.add("ops");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Adapter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Adapter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Adapter is not found in the empty JSON string", Adapter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Adapter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Adapter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adapter_location") != null && !jsonObj.get("adapter_location").isJsonNull()) && !jsonObj.get("adapter_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adapter_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adapter_location").toString()));
      }
      if ((jsonObj.get("git_commit_sha") != null && !jsonObj.get("git_commit_sha").isJsonNull()) && !jsonObj.get("git_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commit_sha").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("ops") != null && !jsonObj.get("ops").isJsonNull()) {
        JsonArray jsonArrayops = jsonObj.getAsJsonArray("ops");
        if (jsonArrayops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops` to be an array in the JSON string but got `%s`", jsonObj.get("ops").toString()));
          }

          // validate the optional field `ops` (array)
          for (int i = 0; i < jsonArrayops.size(); i++) {
            SupportedOperation.validateJsonElement(jsonArrayops.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Adapter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Adapter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Adapter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Adapter.class));

       return (TypeAdapter<T>) new TypeAdapter<Adapter>() {
           @Override
           public void write(JsonWriter out, Adapter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Adapter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Adapter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Adapter
   * @throws IOException if the JSON string is invalid with respect to Adapter
   */
  public static Adapter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Adapter.class);
  }

  /**
   * Convert an instance of Adapter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

