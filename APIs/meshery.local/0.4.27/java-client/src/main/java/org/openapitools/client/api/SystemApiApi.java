/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Adapter;
import org.openapitools.client.model.K8SConfig;
import org.openapitools.client.model.K8SContext;
import org.openapitools.client.model.Preference;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.Version;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for idDeleteAdapterConfig
     * @param adapter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteAdapterConfigCall(String adapter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/adapter/manage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adapter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adapter", adapter));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idDeleteAdapterConfigValidateBeforeCall(String adapter, final ApiCallback _callback) throws ApiException {
        return idDeleteAdapterConfigCall(adapter, _callback);

    }

    /**
     * Handle DELETE requests to delete adapter config
     * Used to delete adapter configuration
     * @param adapter  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void idDeleteAdapterConfig(String adapter) throws ApiException {
        idDeleteAdapterConfigWithHttpInfo(adapter);
    }

    /**
     * Handle DELETE requests to delete adapter config
     * Used to delete adapter configuration
     * @param adapter  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> idDeleteAdapterConfigWithHttpInfo(String adapter) throws ApiException {
        okhttp3.Call localVarCall = idDeleteAdapterConfigValidateBeforeCall(adapter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Handle DELETE requests to delete adapter config (asynchronously)
     * Used to delete adapter configuration
     * @param adapter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteAdapterConfigAsync(String adapter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = idDeleteAdapterConfigValidateBeforeCall(adapter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for idDeleteK8SConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteK8SConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/kubernetes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idDeleteK8SConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idDeleteK8SConfigCall(_callback);

    }

    /**
     * Handle DELETE request for Kubernetes Config
     * Used to delete kubernetes config to System
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void idDeleteK8SConfig() throws ApiException {
        idDeleteK8SConfigWithHttpInfo();
    }

    /**
     * Handle DELETE request for Kubernetes Config
     * Used to delete kubernetes config to System
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> idDeleteK8SConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idDeleteK8SConfigValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Handle DELETE request for Kubernetes Config (asynchronously)
     * Used to delete kubernetes config to System
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idDeleteK8SConfigAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = idDeleteK8SConfigValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for idGetKubernetesPing
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetKubernetesPingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/kubernetes/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idGetKubernetesPingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idGetKubernetesPingCall(_callback);

    }

    /**
     * Handle GET request for Kubernetes ping
     * Fetches server version to simulate ping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void idGetKubernetesPing() throws ApiException {
        idGetKubernetesPingWithHttpInfo();
    }

    /**
     * Handle GET request for Kubernetes ping
     * Fetches server version to simulate ping
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> idGetKubernetesPingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idGetKubernetesPingValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Handle GET request for Kubernetes ping (asynchronously)
     * Fetches server version to simulate ping
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetKubernetesPingAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = idGetKubernetesPingValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for idGetSystemAdapters
     * @param adapter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return all the adapters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSystemAdaptersCall(String adapter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/adapters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adapter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adapter", adapter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idGetSystemAdaptersValidateBeforeCall(String adapter, final ApiCallback _callback) throws ApiException {
        return idGetSystemAdaptersCall(adapter, _callback);

    }

    /**
     * Handle GET request for adapters
     * Fetches and returns all the adapters and ping adapters
     * @param adapter  (optional)
     * @return List&lt;Adapter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return all the adapters </td><td>  -  </td></tr>
     </table>
     */
    public List<Adapter> idGetSystemAdapters(String adapter) throws ApiException {
        ApiResponse<List<Adapter>> localVarResp = idGetSystemAdaptersWithHttpInfo(adapter);
        return localVarResp.getData();
    }

    /**
     * Handle GET request for adapters
     * Fetches and returns all the adapters and ping adapters
     * @param adapter  (optional)
     * @return ApiResponse&lt;List&lt;Adapter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return all the adapters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Adapter>> idGetSystemAdaptersWithHttpInfo(String adapter) throws ApiException {
        okhttp3.Call localVarCall = idGetSystemAdaptersValidateBeforeCall(adapter, null);
        Type localVarReturnType = new TypeToken<List<Adapter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET request for adapters (asynchronously)
     * Fetches and returns all the adapters and ping adapters
     * @param adapter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return all the adapters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSystemAdaptersAsync(String adapter, final ApiCallback<List<Adapter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = idGetSystemAdaptersValidateBeforeCall(adapter, _callback);
        Type localVarReturnType = new TypeToken<List<Adapter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idGetSystemVersion
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Meshery version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSystemVersionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idGetSystemVersionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idGetSystemVersionCall(_callback);

    }

    /**
     * Handle GET request for system/server version
     * Returns the running Meshery version
     * @return Version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Meshery version </td><td>  -  </td></tr>
     </table>
     */
    public Version idGetSystemVersion() throws ApiException {
        ApiResponse<Version> localVarResp = idGetSystemVersionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle GET request for system/server version
     * Returns the running Meshery version
     * @return ApiResponse&lt;Version&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Meshery version </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Version> idGetSystemVersionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idGetSystemVersionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET request for system/server version (asynchronously)
     * Returns the running Meshery version
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Meshery version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idGetSystemVersionAsync(final ApiCallback<Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = idGetSystemVersionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idMeshSyncGrafana
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idMeshSyncGrafanaCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/meshsync/grafana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idMeshSyncGrafanaValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idMeshSyncGrafanaCall(_callback);

    }

    /**
     * Handle GET request for mesh-sync grafana
     * Fetches Prometheus and Grafana
     * @return Map&lt;String, List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Service>> idMeshSyncGrafana() throws ApiException {
        ApiResponse<Map<String, List<Service>>> localVarResp = idMeshSyncGrafanaWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle GET request for mesh-sync grafana
     * Fetches Prometheus and Grafana
     * @return ApiResponse&lt;Map&lt;String, List&lt;Service&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Service>>> idMeshSyncGrafanaWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idMeshSyncGrafanaValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, List<Service>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET request for mesh-sync grafana (asynchronously)
     * Fetches Prometheus and Grafana
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idMeshSyncGrafanaAsync(final ApiCallback<Map<String, List<Service>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = idMeshSyncGrafanaValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Service>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idMeshSyncPrometheus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idMeshSyncPrometheusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/meshsync/prometheus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idMeshSyncPrometheusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idMeshSyncPrometheusCall(_callback);

    }

    /**
     * Handle GET request for fetching prometheus
     * Fetches Prometheus
     * @return Map&lt;String, List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<Service>> idMeshSyncPrometheus() throws ApiException {
        ApiResponse<Map<String, List<Service>>> localVarResp = idMeshSyncPrometheusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle GET request for fetching prometheus
     * Fetches Prometheus
     * @return ApiResponse&lt;Map&lt;String, List&lt;Service&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<Service>>> idMeshSyncPrometheusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idMeshSyncPrometheusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, List<Service>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET request for fetching prometheus (asynchronously)
     * Fetches Prometheus
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a map for v1 services </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idMeshSyncPrometheusAsync(final ApiCallback<Map<String, List<Service>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = idMeshSyncPrometheusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, List<Service>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idPostAdapterConfig
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the meshery adapters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostAdapterConfigCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/system/adapter/manage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idPostAdapterConfigValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        return idPostAdapterConfigCall(body, _callback);

    }

    /**
     * Handle POST requests to persist adapter config
     * Used to persist adapter config
     * @param body  (optional)
     * @return List&lt;Adapter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the meshery adapters </td><td>  -  </td></tr>
     </table>
     */
    public List<Adapter> idPostAdapterConfig(String body) throws ApiException {
        ApiResponse<List<Adapter>> localVarResp = idPostAdapterConfigWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Handle POST requests to persist adapter config
     * Used to persist adapter config
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Adapter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the meshery adapters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Adapter>> idPostAdapterConfigWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = idPostAdapterConfigValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<Adapter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle POST requests to persist adapter config (asynchronously)
     * Used to persist adapter config
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all the meshery adapters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostAdapterConfigAsync(String body, final ApiCallback<List<Adapter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = idPostAdapterConfigValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<Adapter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idPostAdapterOperation
     * @param adapter  (optional)
     * @param query  (optional)
     * @param customBody  (optional)
     * @param namespace  (optional)
     * @param deleteOp  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostAdapterOperationCall(String adapter, String query, String customBody, String namespace, String deleteOp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/adapter/operation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adapter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adapter", adapter));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (customBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customBody", customBody));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (deleteOp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteOp", deleteOp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idPostAdapterOperationValidateBeforeCall(String adapter, String query, String customBody, String namespace, String deleteOp, final ApiCallback _callback) throws ApiException {
        return idPostAdapterOperationCall(adapter, query, customBody, namespace, deleteOp, _callback);

    }

    /**
     * Handle POST requests for Adapter Operations
     * Used to send operations to the adapters
     * @param adapter  (optional)
     * @param query  (optional)
     * @param customBody  (optional)
     * @param namespace  (optional)
     * @param deleteOp  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void idPostAdapterOperation(String adapter, String query, String customBody, String namespace, String deleteOp) throws ApiException {
        idPostAdapterOperationWithHttpInfo(adapter, query, customBody, namespace, deleteOp);
    }

    /**
     * Handle POST requests for Adapter Operations
     * Used to send operations to the adapters
     * @param adapter  (optional)
     * @param query  (optional)
     * @param customBody  (optional)
     * @param namespace  (optional)
     * @param deleteOp  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> idPostAdapterOperationWithHttpInfo(String adapter, String query, String customBody, String namespace, String deleteOp) throws ApiException {
        okhttp3.Call localVarCall = idPostAdapterOperationValidateBeforeCall(adapter, query, customBody, namespace, deleteOp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Handle POST requests for Adapter Operations (asynchronously)
     * Used to send operations to the adapters
     * @param adapter  (optional)
     * @param query  (optional)
     * @param customBody  (optional)
     * @param namespace  (optional)
     * @param deleteOp  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostAdapterOperationAsync(String adapter, String query, String customBody, String namespace, String deleteOp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = idPostAdapterOperationValidateBeforeCall(adapter, query, customBody, namespace, deleteOp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for idPostK8SConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns saved kubernetes config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostK8SConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/kubernetes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idPostK8SConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idPostK8SConfigCall(_callback);

    }

    /**
     * Handle POST request for Kubernetes Config
     * Used to add kubernetes config to System
     * @return K8SConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns saved kubernetes config </td><td>  -  </td></tr>
     </table>
     */
    public K8SConfig idPostK8SConfig() throws ApiException {
        ApiResponse<K8SConfig> localVarResp = idPostK8SConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle POST request for Kubernetes Config
     * Used to add kubernetes config to System
     * @return ApiResponse&lt;K8SConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns saved kubernetes config </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<K8SConfig> idPostK8SConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idPostK8SConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<K8SConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle POST request for Kubernetes Config (asynchronously)
     * Used to add kubernetes config to System
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns saved kubernetes config </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostK8SConfigAsync(final ApiCallback<K8SConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = idPostK8SConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<K8SConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idPostK8SContexts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns kubernetes context list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostK8SContextsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/kubernetes/contexts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idPostK8SContextsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idPostK8SContextsCall(_callback);

    }

    /**
     * Handle POST requests for Kubernetes Context list
     * Returns the context list for a given k8s config
     * @return List&lt;K8SContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns kubernetes context list </td><td>  -  </td></tr>
     </table>
     */
    public List<K8SContext> idPostK8SContexts() throws ApiException {
        ApiResponse<List<K8SContext>> localVarResp = idPostK8SContextsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle POST requests for Kubernetes Context list
     * Returns the context list for a given k8s config
     * @return ApiResponse&lt;List&lt;K8SContext&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns kubernetes context list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<K8SContext>> idPostK8SContextsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idPostK8SContextsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<K8SContext>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle POST requests for Kubernetes Context list (asynchronously)
     * Returns the context list for a given k8s config
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns kubernetes context list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idPostK8SContextsAsync(final ApiCallback<List<K8SContext>> _callback) throws ApiException {

        okhttp3.Call localVarCall = idPostK8SContextsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<K8SContext>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for idSystemSync
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns User Load Test Preferencee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idSystemSyncCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/system/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idSystemSyncValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return idSystemSyncCall(_callback);

    }

    /**
     * Handle GET request for config sync
     * Used to send session data to the UI for initial sync
     * @return Preference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns User Load Test Preferencee </td><td>  -  </td></tr>
     </table>
     */
    public Preference idSystemSync() throws ApiException {
        ApiResponse<Preference> localVarResp = idSystemSyncWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Handle GET request for config sync
     * Used to send session data to the UI for initial sync
     * @return ApiResponse&lt;Preference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns User Load Test Preferencee </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Preference> idSystemSyncWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = idSystemSyncValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Preference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handle GET request for config sync (asynchronously)
     * Used to send session data to the UI for initial sync
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns User Load Test Preferencee </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idSystemSyncAsync(final ApiCallback<Preference> _callback) throws ApiException {

        okhttp3.Call localVarCall = idSystemSyncValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Preference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
