/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoadTestPreferences represents the load test preferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadTestPreferences {
  public static final String SERIALIZED_NAME_C = "c";
  @SerializedName(SERIALIZED_NAME_C)
  private Long c;

  public static final String SERIALIZED_NAME_GEN = "gen";
  @SerializedName(SERIALIZED_NAME_GEN)
  private String gen;

  public static final String SERIALIZED_NAME_QPS = "qps";
  @SerializedName(SERIALIZED_NAME_QPS)
  private Long qps;

  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private String t;

  public LoadTestPreferences() {
  }

  public LoadTestPreferences c(Long c) {
    this.c = c;
    return this;
  }

  /**
   * Get c
   * @return c
   */
  @javax.annotation.Nullable
  public Long getC() {
    return c;
  }

  public void setC(Long c) {
    this.c = c;
  }


  public LoadTestPreferences gen(String gen) {
    this.gen = gen;
    return this;
  }

  /**
   * Get gen
   * @return gen
   */
  @javax.annotation.Nullable
  public String getGen() {
    return gen;
  }

  public void setGen(String gen) {
    this.gen = gen;
  }


  public LoadTestPreferences qps(Long qps) {
    this.qps = qps;
    return this;
  }

  /**
   * Get qps
   * @return qps
   */
  @javax.annotation.Nullable
  public Long getQps() {
    return qps;
  }

  public void setQps(Long qps) {
    this.qps = qps;
  }


  public LoadTestPreferences t(String t) {
    this.t = t;
    return this;
  }

  /**
   * Get t
   * @return t
   */
  @javax.annotation.Nullable
  public String getT() {
    return t;
  }

  public void setT(String t) {
    this.t = t;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadTestPreferences loadTestPreferences = (LoadTestPreferences) o;
    return Objects.equals(this.c, loadTestPreferences.c) &&
        Objects.equals(this.gen, loadTestPreferences.gen) &&
        Objects.equals(this.qps, loadTestPreferences.qps) &&
        Objects.equals(this.t, loadTestPreferences.t);
  }

  @Override
  public int hashCode() {
    return Objects.hash(c, gen, qps, t);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadTestPreferences {\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("    gen: ").append(toIndentedString(gen)).append("\n");
    sb.append("    qps: ").append(toIndentedString(qps)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("c");
    openapiFields.add("gen");
    openapiFields.add("qps");
    openapiFields.add("t");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadTestPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadTestPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadTestPreferences is not found in the empty JSON string", LoadTestPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadTestPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadTestPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gen") != null && !jsonObj.get("gen").isJsonNull()) && !jsonObj.get("gen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gen").toString()));
      }
      if ((jsonObj.get("t") != null && !jsonObj.get("t").isJsonNull()) && !jsonObj.get("t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("t").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadTestPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadTestPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadTestPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadTestPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadTestPreferences>() {
           @Override
           public void write(JsonWriter out, LoadTestPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadTestPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadTestPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadTestPreferences
   * @throws IOException if the JSON string is invalid with respect to LoadTestPreferences
   */
  public static LoadTestPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadTestPreferences.class);
  }

  /**
   * Convert an instance of LoadTestPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

