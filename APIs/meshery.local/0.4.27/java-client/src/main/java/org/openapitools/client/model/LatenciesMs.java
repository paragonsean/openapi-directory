/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LatenciesMs - represents a collection of important latencies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LatenciesMs {
  public static final String SERIALIZED_NAME_AVERAGE = "Average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_P50 = "P50";
  @SerializedName(SERIALIZED_NAME_P50)
  private Double P50;

  public static final String SERIALIZED_NAME_P90 = "P90";
  @SerializedName(SERIALIZED_NAME_P90)
  private Double P90;

  public static final String SERIALIZED_NAME_P99 = "P99";
  @SerializedName(SERIALIZED_NAME_P99)
  private Double P99;

  public LatenciesMs() {
  }

  public LatenciesMs average(Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(Double average) {
    this.average = average;
  }


  public LatenciesMs max(Double max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Double getMax() {
    return max;
  }

  public void setMax(Double max) {
    this.max = max;
  }


  public LatenciesMs min(Double min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Double getMin() {
    return min;
  }

  public void setMin(Double min) {
    this.min = min;
  }


  public LatenciesMs P50(Double P50) {
    this.P50 = P50;
    return this;
  }

  /**
   * Get P50
   * @return P50
   */
  @javax.annotation.Nullable
  public Double getP50() {
    return P50;
  }

  public void setP50(Double P50) {
    this.P50 = P50;
  }


  public LatenciesMs P90(Double P90) {
    this.P90 = P90;
    return this;
  }

  /**
   * Get P90
   * @return P90
   */
  @javax.annotation.Nullable
  public Double getP90() {
    return P90;
  }

  public void setP90(Double P90) {
    this.P90 = P90;
  }


  public LatenciesMs P99(Double P99) {
    this.P99 = P99;
    return this;
  }

  /**
   * Get P99
   * @return P99
   */
  @javax.annotation.Nullable
  public Double getP99() {
    return P99;
  }

  public void setP99(Double P99) {
    this.P99 = P99;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LatenciesMs latenciesMs = (LatenciesMs) o;
    return Objects.equals(this.average, latenciesMs.average) &&
        Objects.equals(this.max, latenciesMs.max) &&
        Objects.equals(this.min, latenciesMs.min) &&
        Objects.equals(this.P50, latenciesMs.P50) &&
        Objects.equals(this.P90, latenciesMs.P90) &&
        Objects.equals(this.P99, latenciesMs.P99);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, max, min, P50, P90, P99);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LatenciesMs {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    P50: ").append(toIndentedString(P50)).append("\n");
    sb.append("    P90: ").append(toIndentedString(P90)).append("\n");
    sb.append("    P99: ").append(toIndentedString(P99)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Average");
    openapiFields.add("Max");
    openapiFields.add("Min");
    openapiFields.add("P50");
    openapiFields.add("P90");
    openapiFields.add("P99");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LatenciesMs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LatenciesMs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LatenciesMs is not found in the empty JSON string", LatenciesMs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LatenciesMs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LatenciesMs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LatenciesMs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LatenciesMs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LatenciesMs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LatenciesMs.class));

       return (TypeAdapter<T>) new TypeAdapter<LatenciesMs>() {
           @Override
           public void write(JsonWriter out, LatenciesMs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LatenciesMs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LatenciesMs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LatenciesMs
   * @throws IOException if the JSON string is invalid with respect to LatenciesMs
   */
  public static LatenciesMs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LatenciesMs.class);
  }

  /**
   * Convert an instance of LatenciesMs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

