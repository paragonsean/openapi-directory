/*
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Link
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:51.881749-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Link {
  public static final String SERIALIZED_NAME_AS_DROPDOWN = "asDropdown";
  @SerializedName(SERIALIZED_NAME_AS_DROPDOWN)
  private Boolean asDropdown;

  public static final String SERIALIZED_NAME_DASH_URI = "dashUri";
  @SerializedName(SERIALIZED_NAME_DASH_URI)
  private String dashUri;

  public static final String SERIALIZED_NAME_DASHBOARD = "dashboard";
  @SerializedName(SERIALIZED_NAME_DASHBOARD)
  private String dashboard;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_INCLUDE_VARS = "includeVars";
  @SerializedName(SERIALIZED_NAME_INCLUDE_VARS)
  private Boolean includeVars;

  public static final String SERIALIZED_NAME_KEEP_TIME = "keepTime";
  @SerializedName(SERIALIZED_NAME_KEEP_TIME)
  private Boolean keepTime;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_BLANK = "targetBlank";
  @SerializedName(SERIALIZED_NAME_TARGET_BLANK)
  private Boolean targetBlank;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOOLTIP = "tooltip";
  @SerializedName(SERIALIZED_NAME_TOOLTIP)
  private String tooltip;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Link() {
  }

  public Link asDropdown(Boolean asDropdown) {
    this.asDropdown = asDropdown;
    return this;
  }

  /**
   * Get asDropdown
   * @return asDropdown
   */
  @javax.annotation.Nullable
  public Boolean getAsDropdown() {
    return asDropdown;
  }

  public void setAsDropdown(Boolean asDropdown) {
    this.asDropdown = asDropdown;
  }


  public Link dashUri(String dashUri) {
    this.dashUri = dashUri;
    return this;
  }

  /**
   * Get dashUri
   * @return dashUri
   */
  @javax.annotation.Nullable
  public String getDashUri() {
    return dashUri;
  }

  public void setDashUri(String dashUri) {
    this.dashUri = dashUri;
  }


  public Link dashboard(String dashboard) {
    this.dashboard = dashboard;
    return this;
  }

  /**
   * Get dashboard
   * @return dashboard
   */
  @javax.annotation.Nullable
  public String getDashboard() {
    return dashboard;
  }

  public void setDashboard(String dashboard) {
    this.dashboard = dashboard;
  }


  public Link icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public Link includeVars(Boolean includeVars) {
    this.includeVars = includeVars;
    return this;
  }

  /**
   * Get includeVars
   * @return includeVars
   */
  @javax.annotation.Nullable
  public Boolean getIncludeVars() {
    return includeVars;
  }

  public void setIncludeVars(Boolean includeVars) {
    this.includeVars = includeVars;
  }


  public Link keepTime(Boolean keepTime) {
    this.keepTime = keepTime;
    return this;
  }

  /**
   * Get keepTime
   * @return keepTime
   */
  @javax.annotation.Nullable
  public Boolean getKeepTime() {
    return keepTime;
  }

  public void setKeepTime(Boolean keepTime) {
    this.keepTime = keepTime;
  }


  public Link params(String params) {
    this.params = params;
    return this;
  }

  /**
   * Get params
   * @return params
   */
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }


  public Link tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Link addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Link targetBlank(Boolean targetBlank) {
    this.targetBlank = targetBlank;
    return this;
  }

  /**
   * Get targetBlank
   * @return targetBlank
   */
  @javax.annotation.Nullable
  public Boolean getTargetBlank() {
    return targetBlank;
  }

  public void setTargetBlank(Boolean targetBlank) {
    this.targetBlank = targetBlank;
  }


  public Link title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Link tooltip(String tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  /**
   * Get tooltip
   * @return tooltip
   */
  @javax.annotation.Nullable
  public String getTooltip() {
    return tooltip;
  }

  public void setTooltip(String tooltip) {
    this.tooltip = tooltip;
  }


  public Link type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Link url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Link link = (Link) o;
    return Objects.equals(this.asDropdown, link.asDropdown) &&
        Objects.equals(this.dashUri, link.dashUri) &&
        Objects.equals(this.dashboard, link.dashboard) &&
        Objects.equals(this.icon, link.icon) &&
        Objects.equals(this.includeVars, link.includeVars) &&
        Objects.equals(this.keepTime, link.keepTime) &&
        Objects.equals(this.params, link.params) &&
        Objects.equals(this.tags, link.tags) &&
        Objects.equals(this.targetBlank, link.targetBlank) &&
        Objects.equals(this.title, link.title) &&
        Objects.equals(this.tooltip, link.tooltip) &&
        Objects.equals(this.type, link.type) &&
        Objects.equals(this.url, link.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asDropdown, dashUri, dashboard, icon, includeVars, keepTime, params, tags, targetBlank, title, tooltip, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Link {\n");
    sb.append("    asDropdown: ").append(toIndentedString(asDropdown)).append("\n");
    sb.append("    dashUri: ").append(toIndentedString(dashUri)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    includeVars: ").append(toIndentedString(includeVars)).append("\n");
    sb.append("    keepTime: ").append(toIndentedString(keepTime)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetBlank: ").append(toIndentedString(targetBlank)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asDropdown");
    openapiFields.add("dashUri");
    openapiFields.add("dashboard");
    openapiFields.add("icon");
    openapiFields.add("includeVars");
    openapiFields.add("keepTime");
    openapiFields.add("params");
    openapiFields.add("tags");
    openapiFields.add("targetBlank");
    openapiFields.add("title");
    openapiFields.add("tooltip");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Link
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Link.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Link is not found in the empty JSON string", Link.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Link.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Link` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dashUri") != null && !jsonObj.get("dashUri").isJsonNull()) && !jsonObj.get("dashUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashUri").toString()));
      }
      if ((jsonObj.get("dashboard") != null && !jsonObj.get("dashboard").isJsonNull()) && !jsonObj.get("dashboard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("tooltip") != null && !jsonObj.get("tooltip").isJsonNull()) && !jsonObj.get("tooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tooltip").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Link.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Link' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Link> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Link.class));

       return (TypeAdapter<T>) new TypeAdapter<Link>() {
           @Override
           public void write(JsonWriter out, Link value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Link read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Link given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Link
   * @throws IOException if the JSON string is invalid with respect to Link
   */
  public static Link fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Link.class);
  }

  /**
   * Convert an instance of Link to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

