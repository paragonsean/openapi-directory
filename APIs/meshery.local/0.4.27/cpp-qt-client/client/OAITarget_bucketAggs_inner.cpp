/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_bucketAggs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_bucketAggs_inner::OAITarget_bucketAggs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_bucketAggs_inner::OAITarget_bucketAggs_inner() {
    this->initializeModel();
}

OAITarget_bucketAggs_inner::~OAITarget_bucketAggs_inner() {}

void OAITarget_bucketAggs_inner::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITarget_bucketAggs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_bucketAggs_inner::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITarget_bucketAggs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_bucketAggs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITarget_bucketAggs_inner::getField() const {
    return m_field;
}
void OAITarget_bucketAggs_inner::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAITarget_bucketAggs_inner::is_field_Set() const{
    return m_field_isSet;
}

bool OAITarget_bucketAggs_inner::is_field_Valid() const{
    return m_field_isValid;
}

QString OAITarget_bucketAggs_inner::getId() const {
    return m_id;
}
void OAITarget_bucketAggs_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITarget_bucketAggs_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITarget_bucketAggs_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAITarget_bucketAggs_inner_settings OAITarget_bucketAggs_inner::getSettings() const {
    return m_settings;
}
void OAITarget_bucketAggs_inner::setSettings(const OAITarget_bucketAggs_inner_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAITarget_bucketAggs_inner::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAITarget_bucketAggs_inner::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAITarget_bucketAggs_inner::getType() const {
    return m_type;
}
void OAITarget_bucketAggs_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITarget_bucketAggs_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAITarget_bucketAggs_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITarget_bucketAggs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_bucketAggs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
