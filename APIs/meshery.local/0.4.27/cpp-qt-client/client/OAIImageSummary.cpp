/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageSummary::OAIImageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageSummary::OAIImageSummary() {
    this->initializeModel();
}

OAIImageSummary::~OAIImageSummary() {}

void OAIImageSummary::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_repo_digests_isSet = false;
    m_repo_digests_isValid = false;

    m_repo_tags_isSet = false;
    m_repo_tags_isValid = false;

    m_shared_size_isSet = false;
    m_shared_size_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_virtual_size_isSet = false;
    m_virtual_size_isValid = false;
}

void OAIImageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageSummary::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("Containers")]);
    m_containers_isSet = !json[QString("Containers")].isNull() && m_containers_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("Labels")]);
    m_labels_isSet = !json[QString("Labels")].isNull() && m_labels_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("ParentId")]);
    m_parent_id_isSet = !json[QString("ParentId")].isNull() && m_parent_id_isValid;

    m_repo_digests_isValid = ::OpenAPI::fromJsonValue(m_repo_digests, json[QString("RepoDigests")]);
    m_repo_digests_isSet = !json[QString("RepoDigests")].isNull() && m_repo_digests_isValid;

    m_repo_tags_isValid = ::OpenAPI::fromJsonValue(m_repo_tags, json[QString("RepoTags")]);
    m_repo_tags_isSet = !json[QString("RepoTags")].isNull() && m_repo_tags_isValid;

    m_shared_size_isValid = ::OpenAPI::fromJsonValue(m_shared_size, json[QString("SharedSize")]);
    m_shared_size_isSet = !json[QString("SharedSize")].isNull() && m_shared_size_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_virtual_size_isValid = ::OpenAPI::fromJsonValue(m_virtual_size, json[QString("VirtualSize")]);
    m_virtual_size_isSet = !json[QString("VirtualSize")].isNull() && m_virtual_size_isValid;
}

QString OAIImageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_containers_isSet) {
        obj.insert(QString("Containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("Labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("ParentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_repo_digests.size() > 0) {
        obj.insert(QString("RepoDigests"), ::OpenAPI::toJsonValue(m_repo_digests));
    }
    if (m_repo_tags.size() > 0) {
        obj.insert(QString("RepoTags"), ::OpenAPI::toJsonValue(m_repo_tags));
    }
    if (m_shared_size_isSet) {
        obj.insert(QString("SharedSize"), ::OpenAPI::toJsonValue(m_shared_size));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_virtual_size_isSet) {
        obj.insert(QString("VirtualSize"), ::OpenAPI::toJsonValue(m_virtual_size));
    }
    return obj;
}

qint64 OAIImageSummary::getContainers() const {
    return m_containers;
}
void OAIImageSummary::setContainers(const qint64 &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIImageSummary::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIImageSummary::is_containers_Valid() const{
    return m_containers_isValid;
}

qint64 OAIImageSummary::getCreated() const {
    return m_created;
}
void OAIImageSummary::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImageSummary::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImageSummary::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIImageSummary::getId() const {
    return m_id;
}
void OAIImageSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageSummary::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIImageSummary::getLabels() const {
    return m_labels;
}
void OAIImageSummary::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIImageSummary::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIImageSummary::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIImageSummary::getParentId() const {
    return m_parent_id;
}
void OAIImageSummary::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIImageSummary::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIImageSummary::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QList<QString> OAIImageSummary::getRepoDigests() const {
    return m_repo_digests;
}
void OAIImageSummary::setRepoDigests(const QList<QString> &repo_digests) {
    m_repo_digests = repo_digests;
    m_repo_digests_isSet = true;
}

bool OAIImageSummary::is_repo_digests_Set() const{
    return m_repo_digests_isSet;
}

bool OAIImageSummary::is_repo_digests_Valid() const{
    return m_repo_digests_isValid;
}

QList<QString> OAIImageSummary::getRepoTags() const {
    return m_repo_tags;
}
void OAIImageSummary::setRepoTags(const QList<QString> &repo_tags) {
    m_repo_tags = repo_tags;
    m_repo_tags_isSet = true;
}

bool OAIImageSummary::is_repo_tags_Set() const{
    return m_repo_tags_isSet;
}

bool OAIImageSummary::is_repo_tags_Valid() const{
    return m_repo_tags_isValid;
}

qint64 OAIImageSummary::getSharedSize() const {
    return m_shared_size;
}
void OAIImageSummary::setSharedSize(const qint64 &shared_size) {
    m_shared_size = shared_size;
    m_shared_size_isSet = true;
}

bool OAIImageSummary::is_shared_size_Set() const{
    return m_shared_size_isSet;
}

bool OAIImageSummary::is_shared_size_Valid() const{
    return m_shared_size_isValid;
}

qint64 OAIImageSummary::getSize() const {
    return m_size;
}
void OAIImageSummary::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIImageSummary::is_size_Set() const{
    return m_size_isSet;
}

bool OAIImageSummary::is_size_Valid() const{
    return m_size_isValid;
}

qint64 OAIImageSummary::getVirtualSize() const {
    return m_virtual_size;
}
void OAIImageSummary::setVirtualSize(const qint64 &virtual_size) {
    m_virtual_size = virtual_size;
    m_virtual_size_isSet = true;
}

bool OAIImageSummary::is_virtual_size_Set() const{
    return m_virtual_size_isSet;
}

bool OAIImageSummary::is_virtual_size_Valid() const{
    return m_virtual_size_isValid;
}

bool OAIImageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_digests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_containers_isValid && m_created_isValid && m_id_isValid && m_labels_isValid && m_parent_id_isValid && m_repo_digests_isValid && m_repo_tags_isValid && m_shared_size_isValid && m_size_isValid && m_virtual_size_isValid && true;
}

} // namespace OpenAPI
