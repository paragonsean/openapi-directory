/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldConfig_defaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldConfig_defaults::OAIFieldConfig_defaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldConfig_defaults::OAIFieldConfig_defaults() {
    this->initializeModel();
}

OAIFieldConfig_defaults::~OAIFieldConfig_defaults() {}

void OAIFieldConfig_defaults::initializeModel() {

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIFieldConfig_defaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldConfig_defaults::fromJsonObject(QJsonObject json) {

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIFieldConfig_defaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldConfig_defaults::asJsonObject() const {
    QJsonObject obj;
    if (m_threshold.isSet()) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

OAIFieldConfig_defaults_threshold OAIFieldConfig_defaults::getThreshold() const {
    return m_threshold;
}
void OAIFieldConfig_defaults::setThreshold(const OAIFieldConfig_defaults_threshold &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIFieldConfig_defaults::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIFieldConfig_defaults::is_threshold_Valid() const{
    return m_threshold_isValid;
}

QString OAIFieldConfig_defaults::getUnit() const {
    return m_unit;
}
void OAIFieldConfig_defaults::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIFieldConfig_defaults::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIFieldConfig_defaults::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIFieldConfig_defaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldConfig_defaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
