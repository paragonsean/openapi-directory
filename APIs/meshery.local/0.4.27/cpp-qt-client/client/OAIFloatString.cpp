/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloatString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloatString::OAIFloatString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloatString::OAIFloatString() {
    this->initializeModel();
}

OAIFloatString::~OAIFloatString() {}

void OAIFloatString::initializeModel() {

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFloatString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloatString::fromJsonObject(QJsonObject json) {

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("Valid")]);
    m_r_valid_isSet = !json[QString("Valid")].isNull() && m_r_valid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIFloatString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloatString::asJsonObject() const {
    QJsonObject obj;
    if (m_r_valid_isSet) {
        obj.insert(QString("Valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIFloatString::isRValid() const {
    return m_r_valid;
}
void OAIFloatString::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIFloatString::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIFloatString::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

double OAIFloatString::getValue() const {
    return m_value;
}
void OAIFloatString::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFloatString::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFloatString::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFloatString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloatString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
