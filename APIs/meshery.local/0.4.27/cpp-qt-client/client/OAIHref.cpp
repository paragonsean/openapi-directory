/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHref.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHref::OAIHref(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHref::OAIHref() {
    this->initializeModel();
}

OAIHref::~OAIHref() {}

void OAIHref::initializeModel() {

    m_external_isSet = false;
    m_external_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIHref::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHref::fromJsonObject(QJsonObject json) {

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIHref::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHref::asJsonObject() const {
    QJsonObject obj;
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIHref::isExternal() const {
    return m_external;
}
void OAIHref::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIHref::is_external_Set() const{
    return m_external_isSet;
}

bool OAIHref::is_external_Valid() const{
    return m_external_isValid;
}

QString OAIHref::getUri() const {
    return m_uri;
}
void OAIHref::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIHref::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIHref::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIHref::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHref::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
