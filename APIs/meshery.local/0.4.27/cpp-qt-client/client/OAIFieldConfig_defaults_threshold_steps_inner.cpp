/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldConfig_defaults_threshold_steps_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldConfig_defaults_threshold_steps_inner::OAIFieldConfig_defaults_threshold_steps_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldConfig_defaults_threshold_steps_inner::OAIFieldConfig_defaults_threshold_steps_inner() {
    this->initializeModel();
}

OAIFieldConfig_defaults_threshold_steps_inner::~OAIFieldConfig_defaults_threshold_steps_inner() {}

void OAIFieldConfig_defaults_threshold_steps_inner::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFieldConfig_defaults_threshold_steps_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldConfig_defaults_threshold_steps_inner::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFieldConfig_defaults_threshold_steps_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldConfig_defaults_threshold_steps_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFieldConfig_defaults_threshold_steps_inner::getColor() const {
    return m_color;
}
void OAIFieldConfig_defaults_threshold_steps_inner::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::is_color_Set() const{
    return m_color_isSet;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIFieldConfig_defaults_threshold_steps_inner::getValue() const {
    return m_value;
}
void OAIFieldConfig_defaults_threshold_steps_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldConfig_defaults_threshold_steps_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
