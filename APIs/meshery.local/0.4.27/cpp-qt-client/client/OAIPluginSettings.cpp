/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginSettings::OAIPluginSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginSettings::OAIPluginSettings() {
    this->initializeModel();
}

OAIPluginSettings::~OAIPluginSettings() {}

void OAIPluginSettings::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_mounts_isSet = false;
    m_mounts_isValid = false;
}

void OAIPluginSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginSettings::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("Args")]);
    m_args_isSet = !json[QString("Args")].isNull() && m_args_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("Devices")]);
    m_devices_isSet = !json[QString("Devices")].isNull() && m_devices_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("Env")]);
    m_env_isSet = !json[QString("Env")].isNull() && m_env_isValid;

    m_mounts_isValid = ::OpenAPI::fromJsonValue(m_mounts, json[QString("Mounts")]);
    m_mounts_isSet = !json[QString("Mounts")].isNull() && m_mounts_isValid;
}

QString OAIPluginSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("Args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("Devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("Env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_mounts.size() > 0) {
        obj.insert(QString("Mounts"), ::OpenAPI::toJsonValue(m_mounts));
    }
    return obj;
}

QList<QString> OAIPluginSettings::getArgs() const {
    return m_args;
}
void OAIPluginSettings::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIPluginSettings::is_args_Set() const{
    return m_args_isSet;
}

bool OAIPluginSettings::is_args_Valid() const{
    return m_args_isValid;
}

QList<OAIPluginDevice> OAIPluginSettings::getDevices() const {
    return m_devices;
}
void OAIPluginSettings::setDevices(const QList<OAIPluginDevice> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIPluginSettings::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIPluginSettings::is_devices_Valid() const{
    return m_devices_isValid;
}

QList<QString> OAIPluginSettings::getEnv() const {
    return m_env;
}
void OAIPluginSettings::setEnv(const QList<QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIPluginSettings::is_env_Set() const{
    return m_env_isSet;
}

bool OAIPluginSettings::is_env_Valid() const{
    return m_env_isValid;
}

QList<OAIPluginMount> OAIPluginSettings::getMounts() const {
    return m_mounts;
}
void OAIPluginSettings::setMounts(const QList<OAIPluginMount> &mounts) {
    m_mounts = mounts;
    m_mounts_isSet = true;
}

bool OAIPluginSettings::is_mounts_Set() const{
    return m_mounts_isSet;
}

bool OAIPluginSettings::is_mounts_Valid() const{
    return m_mounts_isValid;
}

bool OAIPluginSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_args_isValid && m_devices_isValid && m_env_isValid && m_mounts_isValid && true;
}

} // namespace OpenAPI
