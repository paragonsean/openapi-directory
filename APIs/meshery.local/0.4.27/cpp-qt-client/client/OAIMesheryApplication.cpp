/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMesheryApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMesheryApplication::OAIMesheryApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMesheryApplication::OAIMesheryApplication() {
    this->initializeModel();
}

OAIMesheryApplication::~OAIMesheryApplication() {}

void OAIMesheryApplication::initializeModel() {

    m_application_file_isSet = false;
    m_application_file_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIMesheryApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMesheryApplication::fromJsonObject(QJsonObject json) {

    m_application_file_isValid = ::OpenAPI::fromJsonValue(m_application_file, json[QString("application_file")]);
    m_application_file_isSet = !json[QString("application_file")].isNull() && m_application_file_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIMesheryApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMesheryApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_file_isSet) {
        obj.insert(QString("application_file"), ::OpenAPI::toJsonValue(m_application_file));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIMesheryApplication::getApplicationFile() const {
    return m_application_file;
}
void OAIMesheryApplication::setApplicationFile(const QString &application_file) {
    m_application_file = application_file;
    m_application_file_isSet = true;
}

bool OAIMesheryApplication::is_application_file_Set() const{
    return m_application_file_isSet;
}

bool OAIMesheryApplication::is_application_file_Valid() const{
    return m_application_file_isValid;
}

QDateTime OAIMesheryApplication::getCreatedAt() const {
    return m_created_at;
}
void OAIMesheryApplication::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMesheryApplication::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMesheryApplication::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<qint32> OAIMesheryApplication::getId() const {
    return m_id;
}
void OAIMesheryApplication::setId(const QList<qint32> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMesheryApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMesheryApplication::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIObject> OAIMesheryApplication::getLocation() const {
    return m_location;
}
void OAIMesheryApplication::setLocation(const QMap<QString, OAIObject> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMesheryApplication::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMesheryApplication::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMesheryApplication::getName() const {
    return m_name;
}
void OAIMesheryApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMesheryApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMesheryApplication::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIMesheryApplication::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMesheryApplication::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMesheryApplication::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMesheryApplication::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMesheryApplication::getUserId() const {
    return m_user_id;
}
void OAIMesheryApplication::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMesheryApplication::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMesheryApplication::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIMesheryApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMesheryApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
