/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectedGrafanaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectedGrafanaConfig::OAISelectedGrafanaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectedGrafanaConfig::OAISelectedGrafanaConfig() {
    this->initializeModel();
}

OAISelectedGrafanaConfig::~OAISelectedGrafanaConfig() {}

void OAISelectedGrafanaConfig::initializeModel() {

    m_board_isSet = false;
    m_board_isValid = false;

    m_panels_isSet = false;
    m_panels_isValid = false;

    m_template_vars_isSet = false;
    m_template_vars_isValid = false;
}

void OAISelectedGrafanaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectedGrafanaConfig::fromJsonObject(QJsonObject json) {

    m_board_isValid = ::OpenAPI::fromJsonValue(m_board, json[QString("board")]);
    m_board_isSet = !json[QString("board")].isNull() && m_board_isValid;

    m_panels_isValid = ::OpenAPI::fromJsonValue(m_panels, json[QString("panels")]);
    m_panels_isSet = !json[QString("panels")].isNull() && m_panels_isValid;

    m_template_vars_isValid = ::OpenAPI::fromJsonValue(m_template_vars, json[QString("templateVars")]);
    m_template_vars_isSet = !json[QString("templateVars")].isNull() && m_template_vars_isValid;
}

QString OAISelectedGrafanaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectedGrafanaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_board.isSet()) {
        obj.insert(QString("board"), ::OpenAPI::toJsonValue(m_board));
    }
    if (m_panels.size() > 0) {
        obj.insert(QString("panels"), ::OpenAPI::toJsonValue(m_panels));
    }
    if (m_template_vars.size() > 0) {
        obj.insert(QString("templateVars"), ::OpenAPI::toJsonValue(m_template_vars));
    }
    return obj;
}

OAIGrafanaBoard OAISelectedGrafanaConfig::getBoard() const {
    return m_board;
}
void OAISelectedGrafanaConfig::setBoard(const OAIGrafanaBoard &board) {
    m_board = board;
    m_board_isSet = true;
}

bool OAISelectedGrafanaConfig::is_board_Set() const{
    return m_board_isSet;
}

bool OAISelectedGrafanaConfig::is_board_Valid() const{
    return m_board_isValid;
}

QList<OAIPanel> OAISelectedGrafanaConfig::getPanels() const {
    return m_panels;
}
void OAISelectedGrafanaConfig::setPanels(const QList<OAIPanel> &panels) {
    m_panels = panels;
    m_panels_isSet = true;
}

bool OAISelectedGrafanaConfig::is_panels_Set() const{
    return m_panels_isSet;
}

bool OAISelectedGrafanaConfig::is_panels_Valid() const{
    return m_panels_isValid;
}

QList<QString> OAISelectedGrafanaConfig::getTemplateVars() const {
    return m_template_vars;
}
void OAISelectedGrafanaConfig::setTemplateVars(const QList<QString> &template_vars) {
    m_template_vars = template_vars;
    m_template_vars_isSet = true;
}

bool OAISelectedGrafanaConfig::is_template_vars_Set() const{
    return m_template_vars_isSet;
}

bool OAISelectedGrafanaConfig::is_template_vars_Valid() const{
    return m_template_vars_isValid;
}

bool OAISelectedGrafanaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_board.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_panels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectedGrafanaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
