/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPerformanceTestConfig_Client.h
 *
 * 
 */

#ifndef OAIPerformanceTestConfig_Client_H
#define OAIPerformanceTestConfig_Client_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPerformanceTestConfig_Client : public OAIObject {
public:
    OAIPerformanceTestConfig_Client();
    OAIPerformanceTestConfig_Client(QString json);
    ~OAIPerformanceTestConfig_Client() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBody() const;
    void setBody(const QString &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    qint32 getConnections() const;
    void setConnections(const qint32 &connections);
    bool is_connections_Set() const;
    bool is_connections_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QMap<QString, QString> getCookies() const;
    void setCookies(const QMap<QString, QString> &cookies);
    bool is_cookies_Set() const;
    bool is_cookies_Valid() const;

    QList<QString> getEndpointUrls() const;
    void setEndpointUrls(const QList<QString> &endpoint_urls);
    bool is_endpoint_urls_Set() const;
    bool is_endpoint_urls_Valid() const;

    QMap<QString, QString> getHeaders() const;
    void setHeaders(const QMap<QString, QString> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    bool isInternal() const;
    void setInternal(const bool &internal);
    bool is_internal_Set() const;
    bool is_internal_Valid() const;

    QString getLoadGenerator() const;
    void setLoadGenerator(const QString &load_generator);
    bool is_load_generator_Set() const;
    bool is_load_generator_Valid() const;

    qint32 getProtocol() const;
    void setProtocol(const qint32 &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint64 getRps() const;
    void setRps(const qint64 &rps);
    bool is_rps_Set() const;
    bool is_rps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    qint32 m_connections;
    bool m_connections_isSet;
    bool m_connections_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QMap<QString, QString> m_cookies;
    bool m_cookies_isSet;
    bool m_cookies_isValid;

    QList<QString> m_endpoint_urls;
    bool m_endpoint_urls_isSet;
    bool m_endpoint_urls_isValid;

    QMap<QString, QString> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    bool m_internal;
    bool m_internal_isSet;
    bool m_internal_isValid;

    QString m_load_generator;
    bool m_load_generator_isSet;
    bool m_load_generator_isValid;

    qint32 m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint64 m_rps;
    bool m_rps_isSet;
    bool m_rps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPerformanceTestConfig_Client)

#endif // OAIPerformanceTestConfig_Client_H
