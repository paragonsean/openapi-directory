/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAPIApi_H
#define OAI_OAIUserAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPerformanceTestConfig.h"
#include "OAIPreference.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserAPIApi : public QObject {
    Q_OBJECT

public:
    OAIUserAPIApi(const int timeOut = 0);
    ~OAIUserAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uuid QString [optional]
    */
    virtual void idDeleteLoadPreferences(const ::OpenAPI::OptionalParam<QString> &uuid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  uuid QString [optional]
    */
    virtual void idGetLoadPreferences(const ::OpenAPI::OptionalParam<QString> &uuid = ::OpenAPI::OptionalParam<QString>());


    virtual void idGetTokenProvider();


    virtual void idGetUserLogin();


    virtual void idGetUserLogout();


    virtual void idGetUserTestPrefs();

    /**
    * @param[in]  oai_performance_test_config OAIPerformanceTestConfig [optional]
    */
    virtual void idPostLoadPreferences(const ::OpenAPI::OptionalParam<OAIPerformanceTestConfig> &oai_performance_test_config = ::OpenAPI::OptionalParam<OAIPerformanceTestConfig>());


    virtual void idPostTokenProvider();


    virtual void idPostUserTestPrefs();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteLoadPreferencesCallback(OAIHttpRequestWorker *worker);
    void idGetLoadPreferencesCallback(OAIHttpRequestWorker *worker);
    void idGetTokenProviderCallback(OAIHttpRequestWorker *worker);
    void idGetUserLoginCallback(OAIHttpRequestWorker *worker);
    void idGetUserLogoutCallback(OAIHttpRequestWorker *worker);
    void idGetUserTestPrefsCallback(OAIHttpRequestWorker *worker);
    void idPostLoadPreferencesCallback(OAIHttpRequestWorker *worker);
    void idPostTokenProviderCallback(OAIHttpRequestWorker *worker);
    void idPostUserTestPrefsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteLoadPreferencesSignal();
    void idGetLoadPreferencesSignal(OAIPerformanceTestConfig summary);
    void idGetTokenProviderSignal();
    void idGetUserLoginSignal();
    void idGetUserLogoutSignal();
    void idGetUserTestPrefsSignal(OAIPreference summary);
    void idPostLoadPreferencesSignal();
    void idPostTokenProviderSignal();
    void idPostUserTestPrefsSignal(OAIPreference summary);


    void idDeleteLoadPreferencesSignalFull(OAIHttpRequestWorker *worker);
    void idGetLoadPreferencesSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceTestConfig summary);
    void idGetTokenProviderSignalFull(OAIHttpRequestWorker *worker);
    void idGetUserLoginSignalFull(OAIHttpRequestWorker *worker);
    void idGetUserLogoutSignalFull(OAIHttpRequestWorker *worker);
    void idGetUserTestPrefsSignalFull(OAIHttpRequestWorker *worker, OAIPreference summary);
    void idPostLoadPreferencesSignalFull(OAIHttpRequestWorker *worker);
    void idPostTokenProviderSignalFull(OAIHttpRequestWorker *worker);
    void idPostUserTestPrefsSignalFull(OAIHttpRequestWorker *worker, OAIPreference summary);

    Q_DECL_DEPRECATED_X("Use idDeleteLoadPreferencesSignalError() instead")
    void idDeleteLoadPreferencesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteLoadPreferencesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetLoadPreferencesSignalError() instead")
    void idGetLoadPreferencesSignalE(OAIPerformanceTestConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetLoadPreferencesSignalError(OAIPerformanceTestConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetTokenProviderSignalError() instead")
    void idGetTokenProviderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetTokenProviderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserLoginSignalError() instead")
    void idGetUserLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserLogoutSignalError() instead")
    void idGetUserLogoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserLogoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserTestPrefsSignalError() instead")
    void idGetUserTestPrefsSignalE(OAIPreference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserTestPrefsSignalError(OAIPreference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostLoadPreferencesSignalError() instead")
    void idPostLoadPreferencesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostLoadPreferencesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostTokenProviderSignalError() instead")
    void idPostTokenProviderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostTokenProviderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostUserTestPrefsSignalError() instead")
    void idPostUserTestPrefsSignalE(OAIPreference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostUserTestPrefsSignalError(OAIPreference summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteLoadPreferencesSignalErrorFull() instead")
    void idDeleteLoadPreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteLoadPreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetLoadPreferencesSignalErrorFull() instead")
    void idGetLoadPreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetLoadPreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetTokenProviderSignalErrorFull() instead")
    void idGetTokenProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetTokenProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserLoginSignalErrorFull() instead")
    void idGetUserLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserLogoutSignalErrorFull() instead")
    void idGetUserLogoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserLogoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetUserTestPrefsSignalErrorFull() instead")
    void idGetUserTestPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetUserTestPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostLoadPreferencesSignalErrorFull() instead")
    void idPostLoadPreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostLoadPreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostTokenProviderSignalErrorFull() instead")
    void idPostTokenProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostTokenProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostUserTestPrefsSignalErrorFull() instead")
    void idPostUserTestPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostUserTestPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
