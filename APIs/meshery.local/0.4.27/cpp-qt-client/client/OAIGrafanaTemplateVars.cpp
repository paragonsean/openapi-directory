/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafanaTemplateVars.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafanaTemplateVars::OAIGrafanaTemplateVars(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafanaTemplateVars::OAIGrafanaTemplateVars() {
    this->initializeModel();
}

OAIGrafanaTemplateVars::~OAIGrafanaTemplateVars() {}

void OAIGrafanaTemplateVars::initializeModel() {

    m_datasource_isSet = false;
    m_datasource_isValid = false;

    m_hide_isSet = false;
    m_hide_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGrafanaTemplateVars::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafanaTemplateVars::fromJsonObject(QJsonObject json) {

    m_datasource_isValid = ::OpenAPI::fromJsonValue(m_datasource, json[QString("datasource")]);
    m_datasource_isSet = !json[QString("datasource")].isNull() && m_datasource_isValid;

    m_hide_isValid = ::OpenAPI::fromJsonValue(m_hide, json[QString("hide")]);
    m_hide_isSet = !json[QString("hide")].isNull() && m_hide_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGrafanaTemplateVars::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafanaTemplateVars::asJsonObject() const {
    QJsonObject obj;
    if (m_datasource.isSet()) {
        obj.insert(QString("datasource"), ::OpenAPI::toJsonValue(m_datasource));
    }
    if (m_hide_isSet) {
        obj.insert(QString("hide"), ::OpenAPI::toJsonValue(m_hide));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIGrafanaDataSource OAIGrafanaTemplateVars::getDatasource() const {
    return m_datasource;
}
void OAIGrafanaTemplateVars::setDatasource(const OAIGrafanaDataSource &datasource) {
    m_datasource = datasource;
    m_datasource_isSet = true;
}

bool OAIGrafanaTemplateVars::is_datasource_Set() const{
    return m_datasource_isSet;
}

bool OAIGrafanaTemplateVars::is_datasource_Valid() const{
    return m_datasource_isValid;
}

qint32 OAIGrafanaTemplateVars::getHide() const {
    return m_hide;
}
void OAIGrafanaTemplateVars::setHide(const qint32 &hide) {
    m_hide = hide;
    m_hide_isSet = true;
}

bool OAIGrafanaTemplateVars::is_hide_Set() const{
    return m_hide_isSet;
}

bool OAIGrafanaTemplateVars::is_hide_Valid() const{
    return m_hide_isValid;
}

QString OAIGrafanaTemplateVars::getName() const {
    return m_name;
}
void OAIGrafanaTemplateVars::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGrafanaTemplateVars::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGrafanaTemplateVars::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGrafanaTemplateVars::getQuery() const {
    return m_query;
}
void OAIGrafanaTemplateVars::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGrafanaTemplateVars::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGrafanaTemplateVars::is_query_Valid() const{
    return m_query_isValid;
}

OAIObject OAIGrafanaTemplateVars::getValue() const {
    return m_value;
}
void OAIGrafanaTemplateVars::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGrafanaTemplateVars::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGrafanaTemplateVars::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGrafanaTemplateVars::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafanaTemplateVars::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
