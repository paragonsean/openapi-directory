/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreshold::OAIThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreshold::OAIThreshold() {
    this->initializeModel();
}

OAIThreshold::~OAIThreshold() {}

void OAIThreshold::initializeModel() {

    m_color_mode_isSet = false;
    m_color_mode_isValid = false;

    m_fill_isSet = false;
    m_fill_isValid = false;

    m_fill_color_isSet = false;
    m_fill_color_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_line_color_isSet = false;
    m_line_color_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_yaxis_isSet = false;
    m_yaxis_isValid = false;
}

void OAIThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreshold::fromJsonObject(QJsonObject json) {

    m_color_mode_isValid = ::OpenAPI::fromJsonValue(m_color_mode, json[QString("colorMode")]);
    m_color_mode_isSet = !json[QString("colorMode")].isNull() && m_color_mode_isValid;

    m_fill_isValid = ::OpenAPI::fromJsonValue(m_fill, json[QString("fill")]);
    m_fill_isSet = !json[QString("fill")].isNull() && m_fill_isValid;

    m_fill_color_isValid = ::OpenAPI::fromJsonValue(m_fill_color, json[QString("fillColor")]);
    m_fill_color_isSet = !json[QString("fillColor")].isNull() && m_fill_color_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_line_color_isValid = ::OpenAPI::fromJsonValue(m_line_color, json[QString("lineColor")]);
    m_line_color_isSet = !json[QString("lineColor")].isNull() && m_line_color_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_yaxis_isValid = ::OpenAPI::fromJsonValue(m_yaxis, json[QString("yaxis")]);
    m_yaxis_isSet = !json[QString("yaxis")].isNull() && m_yaxis_isValid;
}

QString OAIThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_color_mode_isSet) {
        obj.insert(QString("colorMode"), ::OpenAPI::toJsonValue(m_color_mode));
    }
    if (m_fill_isSet) {
        obj.insert(QString("fill"), ::OpenAPI::toJsonValue(m_fill));
    }
    if (m_fill_color_isSet) {
        obj.insert(QString("fillColor"), ::OpenAPI::toJsonValue(m_fill_color));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_line_color_isSet) {
        obj.insert(QString("lineColor"), ::OpenAPI::toJsonValue(m_line_color));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_yaxis_isSet) {
        obj.insert(QString("yaxis"), ::OpenAPI::toJsonValue(m_yaxis));
    }
    return obj;
}

QString OAIThreshold::getColorMode() const {
    return m_color_mode;
}
void OAIThreshold::setColorMode(const QString &color_mode) {
    m_color_mode = color_mode;
    m_color_mode_isSet = true;
}

bool OAIThreshold::is_color_mode_Set() const{
    return m_color_mode_isSet;
}

bool OAIThreshold::is_color_mode_Valid() const{
    return m_color_mode_isValid;
}

bool OAIThreshold::isFill() const {
    return m_fill;
}
void OAIThreshold::setFill(const bool &fill) {
    m_fill = fill;
    m_fill_isSet = true;
}

bool OAIThreshold::is_fill_Set() const{
    return m_fill_isSet;
}

bool OAIThreshold::is_fill_Valid() const{
    return m_fill_isValid;
}

QString OAIThreshold::getFillColor() const {
    return m_fill_color;
}
void OAIThreshold::setFillColor(const QString &fill_color) {
    m_fill_color = fill_color;
    m_fill_color_isSet = true;
}

bool OAIThreshold::is_fill_color_Set() const{
    return m_fill_color_isSet;
}

bool OAIThreshold::is_fill_color_Valid() const{
    return m_fill_color_isValid;
}

bool OAIThreshold::isLine() const {
    return m_line;
}
void OAIThreshold::setLine(const bool &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIThreshold::is_line_Set() const{
    return m_line_isSet;
}

bool OAIThreshold::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIThreshold::getLineColor() const {
    return m_line_color;
}
void OAIThreshold::setLineColor(const QString &line_color) {
    m_line_color = line_color;
    m_line_color_isSet = true;
}

bool OAIThreshold::is_line_color_Set() const{
    return m_line_color_isSet;
}

bool OAIThreshold::is_line_color_Valid() const{
    return m_line_color_isValid;
}

QString OAIThreshold::getOp() const {
    return m_op;
}
void OAIThreshold::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIThreshold::is_op_Set() const{
    return m_op_isSet;
}

bool OAIThreshold::is_op_Valid() const{
    return m_op_isValid;
}

float OAIThreshold::getValue() const {
    return m_value;
}
void OAIThreshold::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIThreshold::is_value_Set() const{
    return m_value_isSet;
}

bool OAIThreshold::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIThreshold::getYaxis() const {
    return m_yaxis;
}
void OAIThreshold::setYaxis(const QString &yaxis) {
    m_yaxis = yaxis;
    m_yaxis_isSet = true;
}

bool OAIThreshold::is_yaxis_Set() const{
    return m_yaxis_isSet;
}

bool OAIThreshold::is_yaxis_Valid() const{
    return m_yaxis_isValid;
}

bool OAIThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaxis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
