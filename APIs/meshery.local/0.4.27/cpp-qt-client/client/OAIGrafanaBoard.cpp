/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafanaBoard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafanaBoard::OAIGrafanaBoard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafanaBoard::OAIGrafanaBoard() {
    this->initializeModel();
}

OAIGrafanaBoard::~OAIGrafanaBoard() {}

void OAIGrafanaBoard::initializeModel() {

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_panels_isSet = false;
    m_panels_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_template_vars_isSet = false;
    m_template_vars_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGrafanaBoard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafanaBoard::fromJsonObject(QJsonObject json) {

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_panels_isValid = ::OpenAPI::fromJsonValue(m_panels, json[QString("panels")]);
    m_panels_isSet = !json[QString("panels")].isNull() && m_panels_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_template_vars_isValid = ::OpenAPI::fromJsonValue(m_template_vars, json[QString("template_vars")]);
    m_template_vars_isSet = !json[QString("template_vars")].isNull() && m_template_vars_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGrafanaBoard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafanaBoard::asJsonObject() const {
    QJsonObject obj;
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_panels.size() > 0) {
        obj.insert(QString("panels"), ::OpenAPI::toJsonValue(m_panels));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_template_vars.size() > 0) {
        obj.insert(QString("template_vars"), ::OpenAPI::toJsonValue(m_template_vars));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

qint32 OAIGrafanaBoard::getOrgId() const {
    return m_org_id;
}
void OAIGrafanaBoard::setOrgId(const qint32 &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIGrafanaBoard::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIGrafanaBoard::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QList<OAIPanel> OAIGrafanaBoard::getPanels() const {
    return m_panels;
}
void OAIGrafanaBoard::setPanels(const QList<OAIPanel> &panels) {
    m_panels = panels;
    m_panels_isSet = true;
}

bool OAIGrafanaBoard::is_panels_Set() const{
    return m_panels_isSet;
}

bool OAIGrafanaBoard::is_panels_Valid() const{
    return m_panels_isValid;
}

QString OAIGrafanaBoard::getSlug() const {
    return m_slug;
}
void OAIGrafanaBoard::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGrafanaBoard::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGrafanaBoard::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<OAIGrafanaTemplateVars> OAIGrafanaBoard::getTemplateVars() const {
    return m_template_vars;
}
void OAIGrafanaBoard::setTemplateVars(const QList<OAIGrafanaTemplateVars> &template_vars) {
    m_template_vars = template_vars;
    m_template_vars_isSet = true;
}

bool OAIGrafanaBoard::is_template_vars_Set() const{
    return m_template_vars_isSet;
}

bool OAIGrafanaBoard::is_template_vars_Valid() const{
    return m_template_vars_isValid;
}

QString OAIGrafanaBoard::getTitle() const {
    return m_title;
}
void OAIGrafanaBoard::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGrafanaBoard::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGrafanaBoard::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGrafanaBoard::getUid() const {
    return m_uid;
}
void OAIGrafanaBoard::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGrafanaBoard::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGrafanaBoard::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGrafanaBoard::getUri() const {
    return m_uri;
}
void OAIGrafanaBoard::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGrafanaBoard::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGrafanaBoard::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGrafanaBoard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafanaBoard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
