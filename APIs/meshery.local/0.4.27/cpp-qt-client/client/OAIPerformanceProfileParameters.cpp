/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceProfileParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceProfileParameters::OAIPerformanceProfileParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceProfileParameters::OAIPerformanceProfileParameters() {
    this->initializeModel();
}

OAIPerformanceProfileParameters::~OAIPerformanceProfileParameters() {}

void OAIPerformanceProfileParameters::initializeModel() {

    m_concurrent_request_isSet = false;
    m_concurrent_request_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_load_generators_isSet = false;
    m_load_generators_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_qps_isSet = false;
    m_qps_isValid = false;

    m_service_mesh_isSet = false;
    m_service_mesh_isValid = false;
}

void OAIPerformanceProfileParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceProfileParameters::fromJsonObject(QJsonObject json) {

    m_concurrent_request_isValid = ::OpenAPI::fromJsonValue(m_concurrent_request, json[QString("concurrent_request")]);
    m_concurrent_request_isSet = !json[QString("concurrent_request")].isNull() && m_concurrent_request_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_load_generators_isValid = ::OpenAPI::fromJsonValue(m_load_generators, json[QString("load_generators")]);
    m_load_generators_isSet = !json[QString("load_generators")].isNull() && m_load_generators_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_qps_isValid = ::OpenAPI::fromJsonValue(m_qps, json[QString("qps")]);
    m_qps_isSet = !json[QString("qps")].isNull() && m_qps_isValid;

    m_service_mesh_isValid = ::OpenAPI::fromJsonValue(m_service_mesh, json[QString("service_mesh")]);
    m_service_mesh_isSet = !json[QString("service_mesh")].isNull() && m_service_mesh_isValid;
}

QString OAIPerformanceProfileParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceProfileParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_request_isSet) {
        obj.insert(QString("concurrent_request"), ::OpenAPI::toJsonValue(m_concurrent_request));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_load_generators.size() > 0) {
        obj.insert(QString("load_generators"), ::OpenAPI::toJsonValue(m_load_generators));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_qps_isSet) {
        obj.insert(QString("qps"), ::OpenAPI::toJsonValue(m_qps));
    }
    if (m_service_mesh_isSet) {
        obj.insert(QString("service_mesh"), ::OpenAPI::toJsonValue(m_service_mesh));
    }
    return obj;
}

qint64 OAIPerformanceProfileParameters::getConcurrentRequest() const {
    return m_concurrent_request;
}
void OAIPerformanceProfileParameters::setConcurrentRequest(const qint64 &concurrent_request) {
    m_concurrent_request = concurrent_request;
    m_concurrent_request_isSet = true;
}

bool OAIPerformanceProfileParameters::is_concurrent_request_Set() const{
    return m_concurrent_request_isSet;
}

bool OAIPerformanceProfileParameters::is_concurrent_request_Valid() const{
    return m_concurrent_request_isValid;
}

QString OAIPerformanceProfileParameters::getDuration() const {
    return m_duration;
}
void OAIPerformanceProfileParameters::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPerformanceProfileParameters::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPerformanceProfileParameters::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QString> OAIPerformanceProfileParameters::getEndpoints() const {
    return m_endpoints;
}
void OAIPerformanceProfileParameters::setEndpoints(const QList<QString> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIPerformanceProfileParameters::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIPerformanceProfileParameters::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QList<QString> OAIPerformanceProfileParameters::getLoadGenerators() const {
    return m_load_generators;
}
void OAIPerformanceProfileParameters::setLoadGenerators(const QList<QString> &load_generators) {
    m_load_generators = load_generators;
    m_load_generators_isSet = true;
}

bool OAIPerformanceProfileParameters::is_load_generators_Set() const{
    return m_load_generators_isSet;
}

bool OAIPerformanceProfileParameters::is_load_generators_Valid() const{
    return m_load_generators_isValid;
}

QString OAIPerformanceProfileParameters::getName() const {
    return m_name;
}
void OAIPerformanceProfileParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerformanceProfileParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerformanceProfileParameters::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIPerformanceProfileParameters::getQps() const {
    return m_qps;
}
void OAIPerformanceProfileParameters::setQps(const qint64 &qps) {
    m_qps = qps;
    m_qps_isSet = true;
}

bool OAIPerformanceProfileParameters::is_qps_Set() const{
    return m_qps_isSet;
}

bool OAIPerformanceProfileParameters::is_qps_Valid() const{
    return m_qps_isValid;
}

QString OAIPerformanceProfileParameters::getServiceMesh() const {
    return m_service_mesh;
}
void OAIPerformanceProfileParameters::setServiceMesh(const QString &service_mesh) {
    m_service_mesh = service_mesh;
    m_service_mesh_isSet = true;
}

bool OAIPerformanceProfileParameters::is_service_mesh_Set() const{
    return m_service_mesh_isSet;
}

bool OAIPerformanceProfileParameters::is_service_mesh_Valid() const{
    return m_service_mesh_isValid;
}

bool OAIPerformanceProfileParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_generators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_mesh_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceProfileParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
