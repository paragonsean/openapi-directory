/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceSpec::OAIPerformanceSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceSpec::OAIPerformanceSpec() {
    this->initializeModel();
}

OAIPerformanceSpec::~OAIPerformanceSpec() {}

void OAIPerformanceSpec::initializeModel() {

    m_actual_qps_isSet = false;
    m_actual_qps_isValid = false;

    m_details_uri_isSet = false;
    m_details_uri_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_env_id_isSet = false;
    m_env_id_isValid = false;

    m_latencies_isSet = false;
    m_latencies_isValid = false;

    m_mesh_config_id_isSet = false;
    m_mesh_config_id_isValid = false;

    m_smp_version_isSet = false;
    m_smp_version_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_test_id_isSet = false;
    m_test_id_isValid = false;
}

void OAIPerformanceSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceSpec::fromJsonObject(QJsonObject json) {

    m_actual_qps_isValid = ::OpenAPI::fromJsonValue(m_actual_qps, json[QString("ActualQPS")]);
    m_actual_qps_isSet = !json[QString("ActualQPS")].isNull() && m_actual_qps_isValid;

    m_details_uri_isValid = ::OpenAPI::fromJsonValue(m_details_uri, json[QString("DetailsURI")]);
    m_details_uri_isSet = !json[QString("DetailsURI")].isNull() && m_details_uri_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_env_id_isValid = ::OpenAPI::fromJsonValue(m_env_id, json[QString("EnvID")]);
    m_env_id_isSet = !json[QString("EnvID")].isNull() && m_env_id_isValid;

    m_latencies_isValid = ::OpenAPI::fromJsonValue(m_latencies, json[QString("Latencies")]);
    m_latencies_isSet = !json[QString("Latencies")].isNull() && m_latencies_isValid;

    m_mesh_config_id_isValid = ::OpenAPI::fromJsonValue(m_mesh_config_id, json[QString("MeshConfigID")]);
    m_mesh_config_id_isSet = !json[QString("MeshConfigID")].isNull() && m_mesh_config_id_isValid;

    m_smp_version_isValid = ::OpenAPI::fromJsonValue(m_smp_version, json[QString("SMPVersion")]);
    m_smp_version_isSet = !json[QString("SMPVersion")].isNull() && m_smp_version_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_test_id_isValid = ::OpenAPI::fromJsonValue(m_test_id, json[QString("TestID")]);
    m_test_id_isSet = !json[QString("TestID")].isNull() && m_test_id_isValid;
}

QString OAIPerformanceSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_qps_isSet) {
        obj.insert(QString("ActualQPS"), ::OpenAPI::toJsonValue(m_actual_qps));
    }
    if (m_details_uri_isSet) {
        obj.insert(QString("DetailsURI"), ::OpenAPI::toJsonValue(m_details_uri));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_env_id_isSet) {
        obj.insert(QString("EnvID"), ::OpenAPI::toJsonValue(m_env_id));
    }
    if (m_latencies.isSet()) {
        obj.insert(QString("Latencies"), ::OpenAPI::toJsonValue(m_latencies));
    }
    if (m_mesh_config_id_isSet) {
        obj.insert(QString("MeshConfigID"), ::OpenAPI::toJsonValue(m_mesh_config_id));
    }
    if (m_smp_version_isSet) {
        obj.insert(QString("SMPVersion"), ::OpenAPI::toJsonValue(m_smp_version));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_test_id_isSet) {
        obj.insert(QString("TestID"), ::OpenAPI::toJsonValue(m_test_id));
    }
    return obj;
}

double OAIPerformanceSpec::getActualQps() const {
    return m_actual_qps;
}
void OAIPerformanceSpec::setActualQps(const double &actual_qps) {
    m_actual_qps = actual_qps;
    m_actual_qps_isSet = true;
}

bool OAIPerformanceSpec::is_actual_qps_Set() const{
    return m_actual_qps_isSet;
}

bool OAIPerformanceSpec::is_actual_qps_Valid() const{
    return m_actual_qps_isValid;
}

QString OAIPerformanceSpec::getDetailsUri() const {
    return m_details_uri;
}
void OAIPerformanceSpec::setDetailsUri(const QString &details_uri) {
    m_details_uri = details_uri;
    m_details_uri_isSet = true;
}

bool OAIPerformanceSpec::is_details_uri_Set() const{
    return m_details_uri_isSet;
}

bool OAIPerformanceSpec::is_details_uri_Valid() const{
    return m_details_uri_isValid;
}

QDateTime OAIPerformanceSpec::getEndTime() const {
    return m_end_time;
}
void OAIPerformanceSpec::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPerformanceSpec::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPerformanceSpec::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIPerformanceSpec::getEnvId() const {
    return m_env_id;
}
void OAIPerformanceSpec::setEnvId(const QString &env_id) {
    m_env_id = env_id;
    m_env_id_isSet = true;
}

bool OAIPerformanceSpec::is_env_id_Set() const{
    return m_env_id_isSet;
}

bool OAIPerformanceSpec::is_env_id_Valid() const{
    return m_env_id_isValid;
}

OAILatenciesMs OAIPerformanceSpec::getLatencies() const {
    return m_latencies;
}
void OAIPerformanceSpec::setLatencies(const OAILatenciesMs &latencies) {
    m_latencies = latencies;
    m_latencies_isSet = true;
}

bool OAIPerformanceSpec::is_latencies_Set() const{
    return m_latencies_isSet;
}

bool OAIPerformanceSpec::is_latencies_Valid() const{
    return m_latencies_isValid;
}

QString OAIPerformanceSpec::getMeshConfigId() const {
    return m_mesh_config_id;
}
void OAIPerformanceSpec::setMeshConfigId(const QString &mesh_config_id) {
    m_mesh_config_id = mesh_config_id;
    m_mesh_config_id_isSet = true;
}

bool OAIPerformanceSpec::is_mesh_config_id_Set() const{
    return m_mesh_config_id_isSet;
}

bool OAIPerformanceSpec::is_mesh_config_id_Valid() const{
    return m_mesh_config_id_isValid;
}

QString OAIPerformanceSpec::getSmpVersion() const {
    return m_smp_version;
}
void OAIPerformanceSpec::setSmpVersion(const QString &smp_version) {
    m_smp_version = smp_version;
    m_smp_version_isSet = true;
}

bool OAIPerformanceSpec::is_smp_version_Set() const{
    return m_smp_version_isSet;
}

bool OAIPerformanceSpec::is_smp_version_Valid() const{
    return m_smp_version_isValid;
}

QDateTime OAIPerformanceSpec::getStartTime() const {
    return m_start_time;
}
void OAIPerformanceSpec::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPerformanceSpec::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPerformanceSpec::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIPerformanceSpec::getTestId() const {
    return m_test_id;
}
void OAIPerformanceSpec::setTestId(const QString &test_id) {
    m_test_id = test_id;
    m_test_id_isSet = true;
}

bool OAIPerformanceSpec::is_test_id_Set() const{
    return m_test_id_isSet;
}

bool OAIPerformanceSpec::is_test_id_Valid() const{
    return m_test_id_isValid;
}

bool OAIPerformanceSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smp_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
