/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_where_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_where_inner::OAITarget_where_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_where_inner::OAITarget_where_inner() {
    this->initializeModel();
}

OAITarget_where_inner::~OAITarget_where_inner() {}

void OAITarget_where_inner::initializeModel() {

    m_datatype_isSet = false;
    m_datatype_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITarget_where_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_where_inner::fromJsonObject(QJsonObject json) {

    m_datatype_isValid = ::OpenAPI::fromJsonValue(m_datatype, json[QString("datatype")]);
    m_datatype_isSet = !json[QString("datatype")].isNull() && m_datatype_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITarget_where_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_where_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_datatype_isSet) {
        obj.insert(QString("datatype"), ::OpenAPI::toJsonValue(m_datatype));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITarget_where_inner::getDatatype() const {
    return m_datatype;
}
void OAITarget_where_inner::setDatatype(const QString &datatype) {
    m_datatype = datatype;
    m_datatype_isSet = true;
}

bool OAITarget_where_inner::is_datatype_Set() const{
    return m_datatype_isSet;
}

bool OAITarget_where_inner::is_datatype_Valid() const{
    return m_datatype_isValid;
}

QString OAITarget_where_inner::getName() const {
    return m_name;
}
void OAITarget_where_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITarget_where_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITarget_where_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITarget_where_inner::getParams() const {
    return m_params;
}
void OAITarget_where_inner::setParams(const QList<QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAITarget_where_inner::is_params_Set() const{
    return m_params_isSet;
}

bool OAITarget_where_inner::is_params_Valid() const{
    return m_params_isValid;
}

QString OAITarget_where_inner::getType() const {
    return m_type;
}
void OAITarget_where_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITarget_where_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAITarget_where_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITarget_where_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_where_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
