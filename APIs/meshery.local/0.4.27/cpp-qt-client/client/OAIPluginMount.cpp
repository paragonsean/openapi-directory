/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginMount::OAIPluginMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginMount::OAIPluginMount() {
    this->initializeModel();
}

OAIPluginMount::~OAIPluginMount() {}

void OAIPluginMount::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_settable_isSet = false;
    m_settable_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPluginMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginMount::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_settable_isValid = ::OpenAPI::fromJsonValue(m_settable, json[QString("Settable")]);
    m_settable_isSet = !json[QString("Settable")].isNull() && m_settable_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPluginMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginMount::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_settable.size() > 0) {
        obj.insert(QString("Settable"), ::OpenAPI::toJsonValue(m_settable));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPluginMount::getDescription() const {
    return m_description;
}
void OAIPluginMount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginMount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginMount::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPluginMount::getDestination() const {
    return m_destination;
}
void OAIPluginMount::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIPluginMount::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIPluginMount::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIPluginMount::getName() const {
    return m_name;
}
void OAIPluginMount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPluginMount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPluginMount::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIPluginMount::getOptions() const {
    return m_options;
}
void OAIPluginMount::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPluginMount::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPluginMount::is_options_Valid() const{
    return m_options_isValid;
}

QList<QString> OAIPluginMount::getSettable() const {
    return m_settable;
}
void OAIPluginMount::setSettable(const QList<QString> &settable) {
    m_settable = settable;
    m_settable_isSet = true;
}

bool OAIPluginMount::is_settable_Set() const{
    return m_settable_isSet;
}

bool OAIPluginMount::is_settable_Valid() const{
    return m_settable_isValid;
}

QString OAIPluginMount::getSource() const {
    return m_source;
}
void OAIPluginMount::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPluginMount::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPluginMount::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPluginMount::getType() const {
    return m_type;
}
void OAIPluginMount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPluginMount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPluginMount::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPluginMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_destination_isValid && m_name_isValid && m_options_isValid && m_settable_isValid && m_source_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
