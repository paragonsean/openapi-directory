/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceProfile::OAIPerformanceProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceProfile::OAIPerformanceProfile() {
    this->initializeModel();
}

OAIPerformanceProfile::~OAIPerformanceProfile() {}

void OAIPerformanceProfile::initializeModel() {

    m_concurrent_request_isSet = false;
    m_concurrent_request_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_run_isSet = false;
    m_last_run_isValid = false;

    m_load_generators_isSet = false;
    m_load_generators_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_qps_isSet = false;
    m_qps_isValid = false;

    m_request_body_isSet = false;
    m_request_body_isValid = false;

    m_request_cookies_isSet = false;
    m_request_cookies_isValid = false;

    m_request_headers_isSet = false;
    m_request_headers_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_service_mesh_isSet = false;
    m_service_mesh_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPerformanceProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceProfile::fromJsonObject(QJsonObject json) {

    m_concurrent_request_isValid = ::OpenAPI::fromJsonValue(m_concurrent_request, json[QString("concurrent_request")]);
    m_concurrent_request_isSet = !json[QString("concurrent_request")].isNull() && m_concurrent_request_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_run_isValid = ::OpenAPI::fromJsonValue(m_last_run, json[QString("last_run")]);
    m_last_run_isSet = !json[QString("last_run")].isNull() && m_last_run_isValid;

    m_load_generators_isValid = ::OpenAPI::fromJsonValue(m_load_generators, json[QString("load_generators")]);
    m_load_generators_isSet = !json[QString("load_generators")].isNull() && m_load_generators_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_qps_isValid = ::OpenAPI::fromJsonValue(m_qps, json[QString("qps")]);
    m_qps_isSet = !json[QString("qps")].isNull() && m_qps_isValid;

    m_request_body_isValid = ::OpenAPI::fromJsonValue(m_request_body, json[QString("request_body")]);
    m_request_body_isSet = !json[QString("request_body")].isNull() && m_request_body_isValid;

    m_request_cookies_isValid = ::OpenAPI::fromJsonValue(m_request_cookies, json[QString("request_cookies")]);
    m_request_cookies_isSet = !json[QString("request_cookies")].isNull() && m_request_cookies_isValid;

    m_request_headers_isValid = ::OpenAPI::fromJsonValue(m_request_headers, json[QString("request_headers")]);
    m_request_headers_isSet = !json[QString("request_headers")].isNull() && m_request_headers_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_service_mesh_isValid = ::OpenAPI::fromJsonValue(m_service_mesh, json[QString("service_mesh")]);
    m_service_mesh_isSet = !json[QString("service_mesh")].isNull() && m_service_mesh_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("total_results")]);
    m_total_results_isSet = !json[QString("total_results")].isNull() && m_total_results_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIPerformanceProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_request_isSet) {
        obj.insert(QString("concurrent_request"), ::OpenAPI::toJsonValue(m_concurrent_request));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_run_isSet) {
        obj.insert(QString("last_run"), ::OpenAPI::toJsonValue(m_last_run));
    }
    if (m_load_generators.size() > 0) {
        obj.insert(QString("load_generators"), ::OpenAPI::toJsonValue(m_load_generators));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_qps_isSet) {
        obj.insert(QString("qps"), ::OpenAPI::toJsonValue(m_qps));
    }
    if (m_request_body_isSet) {
        obj.insert(QString("request_body"), ::OpenAPI::toJsonValue(m_request_body));
    }
    if (m_request_cookies_isSet) {
        obj.insert(QString("request_cookies"), ::OpenAPI::toJsonValue(m_request_cookies));
    }
    if (m_request_headers_isSet) {
        obj.insert(QString("request_headers"), ::OpenAPI::toJsonValue(m_request_headers));
    }
    if (m_schedule.size() > 0) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_service_mesh_isSet) {
        obj.insert(QString("service_mesh"), ::OpenAPI::toJsonValue(m_service_mesh));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("total_results"), ::OpenAPI::toJsonValue(m_total_results));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint64 OAIPerformanceProfile::getConcurrentRequest() const {
    return m_concurrent_request;
}
void OAIPerformanceProfile::setConcurrentRequest(const qint64 &concurrent_request) {
    m_concurrent_request = concurrent_request;
    m_concurrent_request_isSet = true;
}

bool OAIPerformanceProfile::is_concurrent_request_Set() const{
    return m_concurrent_request_isSet;
}

bool OAIPerformanceProfile::is_concurrent_request_Valid() const{
    return m_concurrent_request_isValid;
}

QString OAIPerformanceProfile::getContentType() const {
    return m_content_type;
}
void OAIPerformanceProfile::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIPerformanceProfile::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIPerformanceProfile::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIObject OAIPerformanceProfile::getCreatedAt() const {
    return m_created_at;
}
void OAIPerformanceProfile::setCreatedAt(const OAIObject &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPerformanceProfile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPerformanceProfile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPerformanceProfile::getDuration() const {
    return m_duration;
}
void OAIPerformanceProfile::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPerformanceProfile::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPerformanceProfile::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QString> OAIPerformanceProfile::getEndpoints() const {
    return m_endpoints;
}
void OAIPerformanceProfile::setEndpoints(const QList<QString> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIPerformanceProfile::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIPerformanceProfile::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QList<qint32> OAIPerformanceProfile::getId() const {
    return m_id;
}
void OAIPerformanceProfile::setId(const QList<qint32> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceProfile::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIPerformanceProfile::getLastRun() const {
    return m_last_run;
}
void OAIPerformanceProfile::setLastRun(const OAIObject &last_run) {
    m_last_run = last_run;
    m_last_run_isSet = true;
}

bool OAIPerformanceProfile::is_last_run_Set() const{
    return m_last_run_isSet;
}

bool OAIPerformanceProfile::is_last_run_Valid() const{
    return m_last_run_isValid;
}

QList<QString> OAIPerformanceProfile::getLoadGenerators() const {
    return m_load_generators;
}
void OAIPerformanceProfile::setLoadGenerators(const QList<QString> &load_generators) {
    m_load_generators = load_generators;
    m_load_generators_isSet = true;
}

bool OAIPerformanceProfile::is_load_generators_Set() const{
    return m_load_generators_isSet;
}

bool OAIPerformanceProfile::is_load_generators_Valid() const{
    return m_load_generators_isValid;
}

QString OAIPerformanceProfile::getName() const {
    return m_name;
}
void OAIPerformanceProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerformanceProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerformanceProfile::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIPerformanceProfile::getQps() const {
    return m_qps;
}
void OAIPerformanceProfile::setQps(const qint64 &qps) {
    m_qps = qps;
    m_qps_isSet = true;
}

bool OAIPerformanceProfile::is_qps_Set() const{
    return m_qps_isSet;
}

bool OAIPerformanceProfile::is_qps_Valid() const{
    return m_qps_isValid;
}

QString OAIPerformanceProfile::getRequestBody() const {
    return m_request_body;
}
void OAIPerformanceProfile::setRequestBody(const QString &request_body) {
    m_request_body = request_body;
    m_request_body_isSet = true;
}

bool OAIPerformanceProfile::is_request_body_Set() const{
    return m_request_body_isSet;
}

bool OAIPerformanceProfile::is_request_body_Valid() const{
    return m_request_body_isValid;
}

QString OAIPerformanceProfile::getRequestCookies() const {
    return m_request_cookies;
}
void OAIPerformanceProfile::setRequestCookies(const QString &request_cookies) {
    m_request_cookies = request_cookies;
    m_request_cookies_isSet = true;
}

bool OAIPerformanceProfile::is_request_cookies_Set() const{
    return m_request_cookies_isSet;
}

bool OAIPerformanceProfile::is_request_cookies_Valid() const{
    return m_request_cookies_isValid;
}

QString OAIPerformanceProfile::getRequestHeaders() const {
    return m_request_headers;
}
void OAIPerformanceProfile::setRequestHeaders(const QString &request_headers) {
    m_request_headers = request_headers;
    m_request_headers_isSet = true;
}

bool OAIPerformanceProfile::is_request_headers_Set() const{
    return m_request_headers_isSet;
}

bool OAIPerformanceProfile::is_request_headers_Valid() const{
    return m_request_headers_isValid;
}

QList<qint32> OAIPerformanceProfile::getSchedule() const {
    return m_schedule;
}
void OAIPerformanceProfile::setSchedule(const QList<qint32> &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIPerformanceProfile::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIPerformanceProfile::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIPerformanceProfile::getServiceMesh() const {
    return m_service_mesh;
}
void OAIPerformanceProfile::setServiceMesh(const QString &service_mesh) {
    m_service_mesh = service_mesh;
    m_service_mesh_isSet = true;
}

bool OAIPerformanceProfile::is_service_mesh_Set() const{
    return m_service_mesh_isSet;
}

bool OAIPerformanceProfile::is_service_mesh_Valid() const{
    return m_service_mesh_isValid;
}

qint64 OAIPerformanceProfile::getTotalResults() const {
    return m_total_results;
}
void OAIPerformanceProfile::setTotalResults(const qint64 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIPerformanceProfile::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIPerformanceProfile::is_total_results_Valid() const{
    return m_total_results_isValid;
}

OAIObject OAIPerformanceProfile::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPerformanceProfile::setUpdatedAt(const OAIObject &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPerformanceProfile::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPerformanceProfile::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPerformanceProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_generators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_mesh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
