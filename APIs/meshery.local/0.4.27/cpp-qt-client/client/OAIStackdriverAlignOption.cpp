/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackdriverAlignOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackdriverAlignOption::OAIStackdriverAlignOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackdriverAlignOption::OAIStackdriverAlignOption() {
    this->initializeModel();
}

OAIStackdriverAlignOption::~OAIStackdriverAlignOption() {}

void OAIStackdriverAlignOption::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_metric_kinds_isSet = false;
    m_metric_kinds_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_types_isSet = false;
    m_value_types_isValid = false;
}

void OAIStackdriverAlignOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackdriverAlignOption::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_metric_kinds_isValid = ::OpenAPI::fromJsonValue(m_metric_kinds, json[QString("metricKinds")]);
    m_metric_kinds_isSet = !json[QString("metricKinds")].isNull() && m_metric_kinds_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_types_isValid = ::OpenAPI::fromJsonValue(m_value_types, json[QString("valueTypes")]);
    m_value_types_isSet = !json[QString("valueTypes")].isNull() && m_value_types_isValid;
}

QString OAIStackdriverAlignOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackdriverAlignOption::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_metric_kinds.size() > 0) {
        obj.insert(QString("metricKinds"), ::OpenAPI::toJsonValue(m_metric_kinds));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_types.size() > 0) {
        obj.insert(QString("valueTypes"), ::OpenAPI::toJsonValue(m_value_types));
    }
    return obj;
}

QString OAIStackdriverAlignOption::getLabel() const {
    return m_label;
}
void OAIStackdriverAlignOption::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIStackdriverAlignOption::is_label_Set() const{
    return m_label_isSet;
}

bool OAIStackdriverAlignOption::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAIStackdriverAlignOption::getMetricKinds() const {
    return m_metric_kinds;
}
void OAIStackdriverAlignOption::setMetricKinds(const QList<QString> &metric_kinds) {
    m_metric_kinds = metric_kinds;
    m_metric_kinds_isSet = true;
}

bool OAIStackdriverAlignOption::is_metric_kinds_Set() const{
    return m_metric_kinds_isSet;
}

bool OAIStackdriverAlignOption::is_metric_kinds_Valid() const{
    return m_metric_kinds_isValid;
}

QString OAIStackdriverAlignOption::getText() const {
    return m_text;
}
void OAIStackdriverAlignOption::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStackdriverAlignOption::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStackdriverAlignOption::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIStackdriverAlignOption::getValue() const {
    return m_value;
}
void OAIStackdriverAlignOption::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIStackdriverAlignOption::is_value_Set() const{
    return m_value_isSet;
}

bool OAIStackdriverAlignOption::is_value_Valid() const{
    return m_value_isValid;
}

QList<QString> OAIStackdriverAlignOption::getValueTypes() const {
    return m_value_types;
}
void OAIStackdriverAlignOption::setValueTypes(const QList<QString> &value_types) {
    m_value_types = value_types;
    m_value_types_isSet = true;
}

bool OAIStackdriverAlignOption::is_value_types_Set() const{
    return m_value_types_isSet;
}

bool OAIStackdriverAlignOption::is_value_types_Valid() const{
    return m_value_types_isValid;
}

bool OAIStackdriverAlignOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackdriverAlignOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
