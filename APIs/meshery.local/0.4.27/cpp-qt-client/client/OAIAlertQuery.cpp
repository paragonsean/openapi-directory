/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertQuery::OAIAlertQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertQuery::OAIAlertQuery() {
    this->initializeModel();
}

OAIAlertQuery::~OAIAlertQuery() {}

void OAIAlertQuery::initializeModel() {

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIAlertQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertQuery::fromJsonObject(QJsonObject json) {

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIAlertQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    return obj;
}

QList<QString> OAIAlertQuery::getParams() const {
    return m_params;
}
void OAIAlertQuery::setParams(const QList<QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAlertQuery::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAlertQuery::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIAlertQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
