/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFiltersAPIApi_H
#define OAI_OAIFiltersAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFiltersAPIResponse.h"
#include "OAIMesheryFilter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFiltersAPIApi : public QObject {
    Q_OBJECT

public:
    OAIFiltersAPIApi(const int timeOut = 0);
    ~OAIFiltersAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idDeleteMesheryFilter(const QString &id);


    virtual void idGetFilterFile();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetFilterFiles(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetMesheryFilter(const QString &id);


    virtual void idPostFilterFile();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteMesheryFilterCallback(OAIHttpRequestWorker *worker);
    void idGetFilterFileCallback(OAIHttpRequestWorker *worker);
    void idGetFilterFilesCallback(OAIHttpRequestWorker *worker);
    void idGetMesheryFilterCallback(OAIHttpRequestWorker *worker);
    void idPostFilterFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteMesheryFilterSignal();
    void idGetFilterFileSignal(OAIFiltersAPIResponse summary);
    void idGetFilterFilesSignal(OAIMesheryFilter summary);
    void idGetMesheryFilterSignal(OAIMesheryFilter summary);
    void idPostFilterFileSignal(OAIMesheryFilter summary);


    void idDeleteMesheryFilterSignalFull(OAIHttpRequestWorker *worker);
    void idGetFilterFileSignalFull(OAIHttpRequestWorker *worker, OAIFiltersAPIResponse summary);
    void idGetFilterFilesSignalFull(OAIHttpRequestWorker *worker, OAIMesheryFilter summary);
    void idGetMesheryFilterSignalFull(OAIHttpRequestWorker *worker, OAIMesheryFilter summary);
    void idPostFilterFileSignalFull(OAIHttpRequestWorker *worker, OAIMesheryFilter summary);

    Q_DECL_DEPRECATED_X("Use idDeleteMesheryFilterSignalError() instead")
    void idDeleteMesheryFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetFilterFileSignalError() instead")
    void idGetFilterFileSignalE(OAIFiltersAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetFilterFileSignalError(OAIFiltersAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetFilterFilesSignalError() instead")
    void idGetFilterFilesSignalE(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetFilterFilesSignalError(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryFilterSignalError() instead")
    void idGetMesheryFilterSignalE(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryFilterSignalError(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostFilterFileSignalError() instead")
    void idPostFilterFileSignalE(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostFilterFileSignalError(OAIMesheryFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteMesheryFilterSignalErrorFull() instead")
    void idDeleteMesheryFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetFilterFileSignalErrorFull() instead")
    void idGetFilterFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetFilterFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetFilterFilesSignalErrorFull() instead")
    void idGetFilterFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetFilterFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryFilterSignalErrorFull() instead")
    void idGetMesheryFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostFilterFileSignalErrorFull() instead")
    void idPostFilterFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostFilterFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
