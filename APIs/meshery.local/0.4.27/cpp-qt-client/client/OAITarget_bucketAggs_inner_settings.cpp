/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_bucketAggs_inner_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_bucketAggs_inner_settings::OAITarget_bucketAggs_inner_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_bucketAggs_inner_settings::OAITarget_bucketAggs_inner_settings() {
    this->initializeModel();
}

OAITarget_bucketAggs_inner_settings::~OAITarget_bucketAggs_inner_settings() {}

void OAITarget_bucketAggs_inner_settings::initializeModel() {

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_min_doc_count_isSet = false;
    m_min_doc_count_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAITarget_bucketAggs_inner_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_bucketAggs_inner_settings::fromJsonObject(QJsonObject json) {

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_min_doc_count_isValid = ::OpenAPI::fromJsonValue(m_min_doc_count, json[QString("min_doc_count")]);
    m_min_doc_count_isSet = !json[QString("min_doc_count")].isNull() && m_min_doc_count_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAITarget_bucketAggs_inner_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_bucketAggs_inner_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_min_doc_count_isSet) {
        obj.insert(QString("min_doc_count"), ::OpenAPI::toJsonValue(m_min_doc_count));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAITarget_bucketAggs_inner_settings::getInterval() const {
    return m_interval;
}
void OAITarget_bucketAggs_inner_settings::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAITarget_bucketAggs_inner_settings::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAITarget_bucketAggs_inner_settings::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIObject OAITarget_bucketAggs_inner_settings::getMinDocCount() const {
    return m_min_doc_count;
}
void OAITarget_bucketAggs_inner_settings::setMinDocCount(const OAIObject &min_doc_count) {
    m_min_doc_count = min_doc_count;
    m_min_doc_count_isSet = true;
}

bool OAITarget_bucketAggs_inner_settings::is_min_doc_count_Set() const{
    return m_min_doc_count_isSet;
}

bool OAITarget_bucketAggs_inner_settings::is_min_doc_count_Valid() const{
    return m_min_doc_count_isValid;
}

QString OAITarget_bucketAggs_inner_settings::getOrder() const {
    return m_order;
}
void OAITarget_bucketAggs_inner_settings::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAITarget_bucketAggs_inner_settings::is_order_Set() const{
    return m_order_isSet;
}

bool OAITarget_bucketAggs_inner_settings::is_order_Valid() const{
    return m_order_isValid;
}

QString OAITarget_bucketAggs_inner_settings::getOrderBy() const {
    return m_order_by;
}
void OAITarget_bucketAggs_inner_settings::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAITarget_bucketAggs_inner_settings::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAITarget_bucketAggs_inner_settings::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QString OAITarget_bucketAggs_inner_settings::getSize() const {
    return m_size;
}
void OAITarget_bucketAggs_inner_settings::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAITarget_bucketAggs_inner_settings::is_size_Set() const{
    return m_size_isSet;
}

bool OAITarget_bucketAggs_inner_settings::is_size_Valid() const{
    return m_size_isValid;
}

bool OAITarget_bucketAggs_inner_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_doc_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_bucketAggs_inner_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
