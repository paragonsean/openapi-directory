/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProvidersAPIApi_H
#define OAI_OAIProvidersAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProviderProperties.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProvidersAPIApi : public QObject {
    Q_OBJECT

public:
    OAIProvidersAPIApi(const int timeOut = 0);
    ~OAIProvidersAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  provider QString [optional]
    */
    virtual void idChoiceProvider(const ::OpenAPI::OptionalParam<QString> &provider = ::OpenAPI::OptionalParam<QString>());


    virtual void idGetProviderCapabilities();


    virtual void idGetProvidersList();


    virtual void idProvider();


    virtual void idReactComponents();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idChoiceProviderCallback(OAIHttpRequestWorker *worker);
    void idGetProviderCapabilitiesCallback(OAIHttpRequestWorker *worker);
    void idGetProvidersListCallback(OAIHttpRequestWorker *worker);
    void idProviderCallback(OAIHttpRequestWorker *worker);
    void idReactComponentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idChoiceProviderSignal();
    void idGetProviderCapabilitiesSignal();
    void idGetProvidersListSignal(QMap<QString, OAIProviderProperties> summary);
    void idProviderSignal();
    void idReactComponentsSignal();


    void idChoiceProviderSignalFull(OAIHttpRequestWorker *worker);
    void idGetProviderCapabilitiesSignalFull(OAIHttpRequestWorker *worker);
    void idGetProvidersListSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIProviderProperties> summary);
    void idProviderSignalFull(OAIHttpRequestWorker *worker);
    void idReactComponentsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use idChoiceProviderSignalError() instead")
    void idChoiceProviderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idChoiceProviderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetProviderCapabilitiesSignalError() instead")
    void idGetProviderCapabilitiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetProviderCapabilitiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetProvidersListSignalError() instead")
    void idGetProvidersListSignalE(QMap<QString, OAIProviderProperties> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetProvidersListSignalError(QMap<QString, OAIProviderProperties> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idProviderSignalError() instead")
    void idProviderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idProviderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idReactComponentsSignalError() instead")
    void idReactComponentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idReactComponentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idChoiceProviderSignalErrorFull() instead")
    void idChoiceProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idChoiceProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetProviderCapabilitiesSignalErrorFull() instead")
    void idGetProviderCapabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetProviderCapabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetProvidersListSignalErrorFull() instead")
    void idGetProvidersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetProvidersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idProviderSignalErrorFull() instead")
    void idProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idReactComponentsSignalErrorFull() instead")
    void idReactComponentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idReactComponentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
