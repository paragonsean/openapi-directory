/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions_reduceOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions_reduceOptions::OAIOptions_reduceOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions_reduceOptions::OAIOptions_reduceOptions() {
    this->initializeModel();
}

OAIOptions_reduceOptions::~OAIOptions_reduceOptions() {}

void OAIOptions_reduceOptions::initializeModel() {

    m_calcs_isSet = false;
    m_calcs_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIOptions_reduceOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions_reduceOptions::fromJsonObject(QJsonObject json) {

    m_calcs_isValid = ::OpenAPI::fromJsonValue(m_calcs, json[QString("calcs")]);
    m_calcs_isSet = !json[QString("calcs")].isNull() && m_calcs_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIOptions_reduceOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions_reduceOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_calcs.size() > 0) {
        obj.insert(QString("calcs"), ::OpenAPI::toJsonValue(m_calcs));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_values_isSet) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<QString> OAIOptions_reduceOptions::getCalcs() const {
    return m_calcs;
}
void OAIOptions_reduceOptions::setCalcs(const QList<QString> &calcs) {
    m_calcs = calcs;
    m_calcs_isSet = true;
}

bool OAIOptions_reduceOptions::is_calcs_Set() const{
    return m_calcs_isSet;
}

bool OAIOptions_reduceOptions::is_calcs_Valid() const{
    return m_calcs_isValid;
}

QString OAIOptions_reduceOptions::getFields() const {
    return m_fields;
}
void OAIOptions_reduceOptions::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIOptions_reduceOptions::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIOptions_reduceOptions::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIOptions_reduceOptions::isValues() const {
    return m_values;
}
void OAIOptions_reduceOptions::setValues(const bool &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIOptions_reduceOptions::is_values_Set() const{
    return m_values_isSet;
}

bool OAIOptions_reduceOptions::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIOptions_reduceOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calcs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions_reduceOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
