/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIK8SContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIK8SContext::OAIK8SContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIK8SContext::OAIK8SContext() {
    this->initializeModel();
}

OAIK8SContext::~OAIK8SContext() {}

void OAIK8SContext::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_context_name_isSet = false;
    m_context_name_isValid = false;

    m_current_context_isSet = false;
    m_current_context_isValid = false;
}

void OAIK8SContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIK8SContext::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_context_name_isValid = ::OpenAPI::fromJsonValue(m_context_name, json[QString("contextName")]);
    m_context_name_isSet = !json[QString("contextName")].isNull() && m_context_name_isValid;

    m_current_context_isValid = ::OpenAPI::fromJsonValue(m_current_context, json[QString("currentContext")]);
    m_current_context_isSet = !json[QString("currentContext")].isNull() && m_current_context_isValid;
}

QString OAIK8SContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIK8SContext::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_context_name_isSet) {
        obj.insert(QString("contextName"), ::OpenAPI::toJsonValue(m_context_name));
    }
    if (m_current_context_isSet) {
        obj.insert(QString("currentContext"), ::OpenAPI::toJsonValue(m_current_context));
    }
    return obj;
}

QString OAIK8SContext::getClusterName() const {
    return m_cluster_name;
}
void OAIK8SContext::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIK8SContext::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIK8SContext::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIK8SContext::getContextName() const {
    return m_context_name;
}
void OAIK8SContext::setContextName(const QString &context_name) {
    m_context_name = context_name;
    m_context_name_isSet = true;
}

bool OAIK8SContext::is_context_name_Set() const{
    return m_context_name_isSet;
}

bool OAIK8SContext::is_context_name_Valid() const{
    return m_context_name_isValid;
}

bool OAIK8SContext::isCurrentContext() const {
    return m_current_context;
}
void OAIK8SContext::setCurrentContext(const bool &current_context) {
    m_current_context = current_context;
    m_current_context_isSet = true;
}

bool OAIK8SContext::is_current_context_Set() const{
    return m_current_context_isSet;
}

bool OAIK8SContext::is_current_context_Valid() const{
    return m_current_context_isValid;
}

bool OAIK8SContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_context_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIK8SContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
