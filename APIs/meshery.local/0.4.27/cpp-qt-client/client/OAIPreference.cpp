/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreference::OAIPreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreference::OAIPreference() {
    this->initializeModel();
}

OAIPreference::~OAIPreference() {}

void OAIPreference::initializeModel() {

    m_anonymous_perf_results_isSet = false;
    m_anonymous_perf_results_isValid = false;

    m_anonymous_usage_stats_isSet = false;
    m_anonymous_usage_stats_isValid = false;

    m_grafana_isSet = false;
    m_grafana_isValid = false;

    m_k8s_config_isSet = false;
    m_k8s_config_isValid = false;

    m_load_test_prefs_isSet = false;
    m_load_test_prefs_isValid = false;

    m_mesh_adapters_isSet = false;
    m_mesh_adapters_isValid = false;

    m_prometheus_isSet = false;
    m_prometheus_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreference::fromJsonObject(QJsonObject json) {

    m_anonymous_perf_results_isValid = ::OpenAPI::fromJsonValue(m_anonymous_perf_results, json[QString("anonymousPerfResults")]);
    m_anonymous_perf_results_isSet = !json[QString("anonymousPerfResults")].isNull() && m_anonymous_perf_results_isValid;

    m_anonymous_usage_stats_isValid = ::OpenAPI::fromJsonValue(m_anonymous_usage_stats, json[QString("anonymousUsageStats")]);
    m_anonymous_usage_stats_isSet = !json[QString("anonymousUsageStats")].isNull() && m_anonymous_usage_stats_isValid;

    m_grafana_isValid = ::OpenAPI::fromJsonValue(m_grafana, json[QString("grafana")]);
    m_grafana_isSet = !json[QString("grafana")].isNull() && m_grafana_isValid;

    m_k8s_config_isValid = ::OpenAPI::fromJsonValue(m_k8s_config, json[QString("k8sConfig")]);
    m_k8s_config_isSet = !json[QString("k8sConfig")].isNull() && m_k8s_config_isValid;

    m_load_test_prefs_isValid = ::OpenAPI::fromJsonValue(m_load_test_prefs, json[QString("loadTestPrefs")]);
    m_load_test_prefs_isSet = !json[QString("loadTestPrefs")].isNull() && m_load_test_prefs_isValid;

    m_mesh_adapters_isValid = ::OpenAPI::fromJsonValue(m_mesh_adapters, json[QString("meshAdapters")]);
    m_mesh_adapters_isSet = !json[QString("meshAdapters")].isNull() && m_mesh_adapters_isValid;

    m_prometheus_isValid = ::OpenAPI::fromJsonValue(m_prometheus, json[QString("prometheus")]);
    m_prometheus_isSet = !json[QString("prometheus")].isNull() && m_prometheus_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIPreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreference::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_perf_results_isSet) {
        obj.insert(QString("anonymousPerfResults"), ::OpenAPI::toJsonValue(m_anonymous_perf_results));
    }
    if (m_anonymous_usage_stats_isSet) {
        obj.insert(QString("anonymousUsageStats"), ::OpenAPI::toJsonValue(m_anonymous_usage_stats));
    }
    if (m_grafana.isSet()) {
        obj.insert(QString("grafana"), ::OpenAPI::toJsonValue(m_grafana));
    }
    if (m_k8s_config.isSet()) {
        obj.insert(QString("k8sConfig"), ::OpenAPI::toJsonValue(m_k8s_config));
    }
    if (m_load_test_prefs.isSet()) {
        obj.insert(QString("loadTestPrefs"), ::OpenAPI::toJsonValue(m_load_test_prefs));
    }
    if (m_mesh_adapters.size() > 0) {
        obj.insert(QString("meshAdapters"), ::OpenAPI::toJsonValue(m_mesh_adapters));
    }
    if (m_prometheus.isSet()) {
        obj.insert(QString("prometheus"), ::OpenAPI::toJsonValue(m_prometheus));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIPreference::isAnonymousPerfResults() const {
    return m_anonymous_perf_results;
}
void OAIPreference::setAnonymousPerfResults(const bool &anonymous_perf_results) {
    m_anonymous_perf_results = anonymous_perf_results;
    m_anonymous_perf_results_isSet = true;
}

bool OAIPreference::is_anonymous_perf_results_Set() const{
    return m_anonymous_perf_results_isSet;
}

bool OAIPreference::is_anonymous_perf_results_Valid() const{
    return m_anonymous_perf_results_isValid;
}

bool OAIPreference::isAnonymousUsageStats() const {
    return m_anonymous_usage_stats;
}
void OAIPreference::setAnonymousUsageStats(const bool &anonymous_usage_stats) {
    m_anonymous_usage_stats = anonymous_usage_stats;
    m_anonymous_usage_stats_isSet = true;
}

bool OAIPreference::is_anonymous_usage_stats_Set() const{
    return m_anonymous_usage_stats_isSet;
}

bool OAIPreference::is_anonymous_usage_stats_Valid() const{
    return m_anonymous_usage_stats_isValid;
}

OAIGrafana OAIPreference::getGrafana() const {
    return m_grafana;
}
void OAIPreference::setGrafana(const OAIGrafana &grafana) {
    m_grafana = grafana;
    m_grafana_isSet = true;
}

bool OAIPreference::is_grafana_Set() const{
    return m_grafana_isSet;
}

bool OAIPreference::is_grafana_Valid() const{
    return m_grafana_isValid;
}

OAIK8SConfig OAIPreference::getK8sConfig() const {
    return m_k8s_config;
}
void OAIPreference::setK8sConfig(const OAIK8SConfig &k8s_config) {
    m_k8s_config = k8s_config;
    m_k8s_config_isSet = true;
}

bool OAIPreference::is_k8s_config_Set() const{
    return m_k8s_config_isSet;
}

bool OAIPreference::is_k8s_config_Valid() const{
    return m_k8s_config_isValid;
}

OAILoadTestPreferences OAIPreference::getLoadTestPrefs() const {
    return m_load_test_prefs;
}
void OAIPreference::setLoadTestPrefs(const OAILoadTestPreferences &load_test_prefs) {
    m_load_test_prefs = load_test_prefs;
    m_load_test_prefs_isSet = true;
}

bool OAIPreference::is_load_test_prefs_Set() const{
    return m_load_test_prefs_isSet;
}

bool OAIPreference::is_load_test_prefs_Valid() const{
    return m_load_test_prefs_isValid;
}

QList<OAIAdapter> OAIPreference::getMeshAdapters() const {
    return m_mesh_adapters;
}
void OAIPreference::setMeshAdapters(const QList<OAIAdapter> &mesh_adapters) {
    m_mesh_adapters = mesh_adapters;
    m_mesh_adapters_isSet = true;
}

bool OAIPreference::is_mesh_adapters_Set() const{
    return m_mesh_adapters_isSet;
}

bool OAIPreference::is_mesh_adapters_Valid() const{
    return m_mesh_adapters_isValid;
}

OAIPrometheus OAIPreference::getPrometheus() const {
    return m_prometheus;
}
void OAIPreference::setPrometheus(const OAIPrometheus &prometheus) {
    m_prometheus = prometheus;
    m_prometheus_isSet = true;
}

bool OAIPreference::is_prometheus_Set() const{
    return m_prometheus_isSet;
}

bool OAIPreference::is_prometheus_Valid() const{
    return m_prometheus_isValid;
}

QDateTime OAIPreference::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPreference::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPreference::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPreference::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_perf_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_usage_stats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_k8s_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_test_prefs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_adapters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prometheus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
