/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_commitsha_isSet = false;
    m_commitsha_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_outdated_isSet = false;
    m_outdated_isValid = false;

    m_release_channel_isSet = false;
    m_release_channel_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_commitsha_isValid = ::OpenAPI::fromJsonValue(m_commitsha, json[QString("commitsha")]);
    m_commitsha_isSet = !json[QString("commitsha")].isNull() && m_commitsha_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_outdated_isValid = ::OpenAPI::fromJsonValue(m_outdated, json[QString("outdated")]);
    m_outdated_isSet = !json[QString("outdated")].isNull() && m_outdated_isValid;

    m_release_channel_isValid = ::OpenAPI::fromJsonValue(m_release_channel, json[QString("release_channel")]);
    m_release_channel_isSet = !json[QString("release_channel")].isNull() && m_release_channel_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_commitsha_isSet) {
        obj.insert(QString("commitsha"), ::OpenAPI::toJsonValue(m_commitsha));
    }
    if (m_latest_isSet) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_outdated_isSet) {
        obj.insert(QString("outdated"), ::OpenAPI::toJsonValue(m_outdated));
    }
    if (m_release_channel_isSet) {
        obj.insert(QString("release_channel"), ::OpenAPI::toJsonValue(m_release_channel));
    }
    return obj;
}

QString OAIVersion::getBuild() const {
    return m_build;
}
void OAIVersion::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIVersion::is_build_Set() const{
    return m_build_isSet;
}

bool OAIVersion::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIVersion::getCommitsha() const {
    return m_commitsha;
}
void OAIVersion::setCommitsha(const QString &commitsha) {
    m_commitsha = commitsha;
    m_commitsha_isSet = true;
}

bool OAIVersion::is_commitsha_Set() const{
    return m_commitsha_isSet;
}

bool OAIVersion::is_commitsha_Valid() const{
    return m_commitsha_isValid;
}

QString OAIVersion::getLatest() const {
    return m_latest;
}
void OAIVersion::setLatest(const QString &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIVersion::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIVersion::is_latest_Valid() const{
    return m_latest_isValid;
}

bool OAIVersion::isOutdated() const {
    return m_outdated;
}
void OAIVersion::setOutdated(const bool &outdated) {
    m_outdated = outdated;
    m_outdated_isSet = true;
}

bool OAIVersion::is_outdated_Set() const{
    return m_outdated_isSet;
}

bool OAIVersion::is_outdated_Valid() const{
    return m_outdated_isValid;
}

QString OAIVersion::getReleaseChannel() const {
    return m_release_channel;
}
void OAIVersion::setReleaseChannel(const QString &release_channel) {
    m_release_channel = release_channel;
    m_release_channel_isSet = true;
}

bool OAIVersion::is_release_channel_Set() const{
    return m_release_channel_isSet;
}

bool OAIVersion::is_release_channel_Valid() const{
    return m_release_channel_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitsha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
