/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedFieldsEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedFieldsEntry::OAIManagedFieldsEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedFieldsEntry::OAIManagedFieldsEntry() {
    this->initializeModel();
}

OAIManagedFieldsEntry::~OAIManagedFieldsEntry() {}

void OAIManagedFieldsEntry::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_fields_type_isSet = false;
    m_fields_type_isValid = false;

    m_fields_v1_isSet = false;
    m_fields_v1_isValid = false;

    m_manager_isSet = false;
    m_manager_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIManagedFieldsEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedFieldsEntry::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_fields_type_isValid = ::OpenAPI::fromJsonValue(m_fields_type, json[QString("fieldsType")]);
    m_fields_type_isSet = !json[QString("fieldsType")].isNull() && m_fields_type_isValid;

    m_fields_v1_isValid = ::OpenAPI::fromJsonValue(m_fields_v1, json[QString("fieldsV1")]);
    m_fields_v1_isSet = !json[QString("fieldsV1")].isNull() && m_fields_v1_isValid;

    m_manager_isValid = ::OpenAPI::fromJsonValue(m_manager, json[QString("manager")]);
    m_manager_isSet = !json[QString("manager")].isNull() && m_manager_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIManagedFieldsEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedFieldsEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_fields_type_isSet) {
        obj.insert(QString("fieldsType"), ::OpenAPI::toJsonValue(m_fields_type));
    }
    if (m_fields_v1_isSet) {
        obj.insert(QString("fieldsV1"), ::OpenAPI::toJsonValue(m_fields_v1));
    }
    if (m_manager_isSet) {
        obj.insert(QString("manager"), ::OpenAPI::toJsonValue(m_manager));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIManagedFieldsEntry::getApiVersion() const {
    return m_api_version;
}
void OAIManagedFieldsEntry::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIManagedFieldsEntry::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIManagedFieldsEntry::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIManagedFieldsEntry::getFieldsType() const {
    return m_fields_type;
}
void OAIManagedFieldsEntry::setFieldsType(const QString &fields_type) {
    m_fields_type = fields_type;
    m_fields_type_isSet = true;
}

bool OAIManagedFieldsEntry::is_fields_type_Set() const{
    return m_fields_type_isSet;
}

bool OAIManagedFieldsEntry::is_fields_type_Valid() const{
    return m_fields_type_isValid;
}

OAIObject OAIManagedFieldsEntry::getFieldsV1() const {
    return m_fields_v1;
}
void OAIManagedFieldsEntry::setFieldsV1(const OAIObject &fields_v1) {
    m_fields_v1 = fields_v1;
    m_fields_v1_isSet = true;
}

bool OAIManagedFieldsEntry::is_fields_v1_Set() const{
    return m_fields_v1_isSet;
}

bool OAIManagedFieldsEntry::is_fields_v1_Valid() const{
    return m_fields_v1_isValid;
}

QString OAIManagedFieldsEntry::getManager() const {
    return m_manager;
}
void OAIManagedFieldsEntry::setManager(const QString &manager) {
    m_manager = manager;
    m_manager_isSet = true;
}

bool OAIManagedFieldsEntry::is_manager_Set() const{
    return m_manager_isSet;
}

bool OAIManagedFieldsEntry::is_manager_Valid() const{
    return m_manager_isValid;
}

QString OAIManagedFieldsEntry::getOperation() const {
    return m_operation;
}
void OAIManagedFieldsEntry::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIManagedFieldsEntry::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIManagedFieldsEntry::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIObject OAIManagedFieldsEntry::getTime() const {
    return m_time;
}
void OAIManagedFieldsEntry::setTime(const OAIObject &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIManagedFieldsEntry::is_time_Set() const{
    return m_time_isSet;
}

bool OAIManagedFieldsEntry::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIManagedFieldsEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_v1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedFieldsEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
