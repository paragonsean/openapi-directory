/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanel_scopedVars_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanel_scopedVars_value::OAIPanel_scopedVars_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanel_scopedVars_value::OAIPanel_scopedVars_value() {
    this->initializeModel();
}

OAIPanel_scopedVars_value::~OAIPanel_scopedVars_value() {}

void OAIPanel_scopedVars_value::initializeModel() {

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPanel_scopedVars_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanel_scopedVars_value::fromJsonObject(QJsonObject json) {

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPanel_scopedVars_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanel_scopedVars_value::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIPanel_scopedVars_value::isSelected() const {
    return m_selected;
}
void OAIPanel_scopedVars_value::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAIPanel_scopedVars_value::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAIPanel_scopedVars_value::is_selected_Valid() const{
    return m_selected_isValid;
}

QString OAIPanel_scopedVars_value::getText() const {
    return m_text;
}
void OAIPanel_scopedVars_value::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPanel_scopedVars_value::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPanel_scopedVars_value::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPanel_scopedVars_value::getValue() const {
    return m_value;
}
void OAIPanel_scopedVars_value::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPanel_scopedVars_value::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPanel_scopedVars_value::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPanel_scopedVars_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanel_scopedVars_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
