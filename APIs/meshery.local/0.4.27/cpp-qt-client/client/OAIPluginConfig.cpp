/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfig::OAIPluginConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfig::OAIPluginConfig() {
    this->initializeModel();
}

OAIPluginConfig::~OAIPluginConfig() {}

void OAIPluginConfig::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_docker_version_isSet = false;
    m_docker_version_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_entrypoint_isSet = false;
    m_entrypoint_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_ipc_host_isSet = false;
    m_ipc_host_isValid = false;

    m_r_linux_isSet = false;
    m_r_linux_isValid = false;

    m_mounts_isSet = false;
    m_mounts_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_pid_host_isSet = false;
    m_pid_host_isValid = false;

    m_propagated_mount_isSet = false;
    m_propagated_mount_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_work_dir_isSet = false;
    m_work_dir_isValid = false;

    m_rootfs_isSet = false;
    m_rootfs_isValid = false;
}

void OAIPluginConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfig::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("Args")]);
    m_args_isSet = !json[QString("Args")].isNull() && m_args_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_docker_version_isValid = ::OpenAPI::fromJsonValue(m_docker_version, json[QString("DockerVersion")]);
    m_docker_version_isSet = !json[QString("DockerVersion")].isNull() && m_docker_version_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("Documentation")]);
    m_documentation_isSet = !json[QString("Documentation")].isNull() && m_documentation_isValid;

    m_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_entrypoint, json[QString("Entrypoint")]);
    m_entrypoint_isSet = !json[QString("Entrypoint")].isNull() && m_entrypoint_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("Env")]);
    m_env_isSet = !json[QString("Env")].isNull() && m_env_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("Interface")]);
    m_interface_isSet = !json[QString("Interface")].isNull() && m_interface_isValid;

    m_ipc_host_isValid = ::OpenAPI::fromJsonValue(m_ipc_host, json[QString("IpcHost")]);
    m_ipc_host_isSet = !json[QString("IpcHost")].isNull() && m_ipc_host_isValid;

    m_r_linux_isValid = ::OpenAPI::fromJsonValue(m_r_linux, json[QString("Linux")]);
    m_r_linux_isSet = !json[QString("Linux")].isNull() && m_r_linux_isValid;

    m_mounts_isValid = ::OpenAPI::fromJsonValue(m_mounts, json[QString("Mounts")]);
    m_mounts_isSet = !json[QString("Mounts")].isNull() && m_mounts_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("Network")]);
    m_network_isSet = !json[QString("Network")].isNull() && m_network_isValid;

    m_pid_host_isValid = ::OpenAPI::fromJsonValue(m_pid_host, json[QString("PidHost")]);
    m_pid_host_isSet = !json[QString("PidHost")].isNull() && m_pid_host_isValid;

    m_propagated_mount_isValid = ::OpenAPI::fromJsonValue(m_propagated_mount, json[QString("PropagatedMount")]);
    m_propagated_mount_isSet = !json[QString("PropagatedMount")].isNull() && m_propagated_mount_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_work_dir_isValid = ::OpenAPI::fromJsonValue(m_work_dir, json[QString("WorkDir")]);
    m_work_dir_isSet = !json[QString("WorkDir")].isNull() && m_work_dir_isValid;

    m_rootfs_isValid = ::OpenAPI::fromJsonValue(m_rootfs, json[QString("rootfs")]);
    m_rootfs_isSet = !json[QString("rootfs")].isNull() && m_rootfs_isValid;
}

QString OAIPluginConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_args.isSet()) {
        obj.insert(QString("Args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_docker_version_isSet) {
        obj.insert(QString("DockerVersion"), ::OpenAPI::toJsonValue(m_docker_version));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("Documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_entrypoint.size() > 0) {
        obj.insert(QString("Entrypoint"), ::OpenAPI::toJsonValue(m_entrypoint));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("Env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_interface.isSet()) {
        obj.insert(QString("Interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_ipc_host_isSet) {
        obj.insert(QString("IpcHost"), ::OpenAPI::toJsonValue(m_ipc_host));
    }
    if (m_r_linux.isSet()) {
        obj.insert(QString("Linux"), ::OpenAPI::toJsonValue(m_r_linux));
    }
    if (m_mounts.size() > 0) {
        obj.insert(QString("Mounts"), ::OpenAPI::toJsonValue(m_mounts));
    }
    if (m_network.isSet()) {
        obj.insert(QString("Network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_pid_host_isSet) {
        obj.insert(QString("PidHost"), ::OpenAPI::toJsonValue(m_pid_host));
    }
    if (m_propagated_mount_isSet) {
        obj.insert(QString("PropagatedMount"), ::OpenAPI::toJsonValue(m_propagated_mount));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_work_dir_isSet) {
        obj.insert(QString("WorkDir"), ::OpenAPI::toJsonValue(m_work_dir));
    }
    if (m_rootfs.isSet()) {
        obj.insert(QString("rootfs"), ::OpenAPI::toJsonValue(m_rootfs));
    }
    return obj;
}

OAIPluginConfigArgs OAIPluginConfig::getArgs() const {
    return m_args;
}
void OAIPluginConfig::setArgs(const OAIPluginConfigArgs &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIPluginConfig::is_args_Set() const{
    return m_args_isSet;
}

bool OAIPluginConfig::is_args_Valid() const{
    return m_args_isValid;
}

QString OAIPluginConfig::getDescription() const {
    return m_description;
}
void OAIPluginConfig::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginConfig::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginConfig::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPluginConfig::getDockerVersion() const {
    return m_docker_version;
}
void OAIPluginConfig::setDockerVersion(const QString &docker_version) {
    m_docker_version = docker_version;
    m_docker_version_isSet = true;
}

bool OAIPluginConfig::is_docker_version_Set() const{
    return m_docker_version_isSet;
}

bool OAIPluginConfig::is_docker_version_Valid() const{
    return m_docker_version_isValid;
}

QString OAIPluginConfig::getDocumentation() const {
    return m_documentation;
}
void OAIPluginConfig::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIPluginConfig::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIPluginConfig::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QList<QString> OAIPluginConfig::getEntrypoint() const {
    return m_entrypoint;
}
void OAIPluginConfig::setEntrypoint(const QList<QString> &entrypoint) {
    m_entrypoint = entrypoint;
    m_entrypoint_isSet = true;
}

bool OAIPluginConfig::is_entrypoint_Set() const{
    return m_entrypoint_isSet;
}

bool OAIPluginConfig::is_entrypoint_Valid() const{
    return m_entrypoint_isValid;
}

QList<OAIPluginEnv> OAIPluginConfig::getEnv() const {
    return m_env;
}
void OAIPluginConfig::setEnv(const QList<OAIPluginEnv> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIPluginConfig::is_env_Set() const{
    return m_env_isSet;
}

bool OAIPluginConfig::is_env_Valid() const{
    return m_env_isValid;
}

OAIPluginConfigInterface OAIPluginConfig::getInterface() const {
    return m_interface;
}
void OAIPluginConfig::setInterface(const OAIPluginConfigInterface &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIPluginConfig::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIPluginConfig::is_interface_Valid() const{
    return m_interface_isValid;
}

bool OAIPluginConfig::isIpcHost() const {
    return m_ipc_host;
}
void OAIPluginConfig::setIpcHost(const bool &ipc_host) {
    m_ipc_host = ipc_host;
    m_ipc_host_isSet = true;
}

bool OAIPluginConfig::is_ipc_host_Set() const{
    return m_ipc_host_isSet;
}

bool OAIPluginConfig::is_ipc_host_Valid() const{
    return m_ipc_host_isValid;
}

OAIPluginConfigLinux OAIPluginConfig::getRLinux() const {
    return m_r_linux;
}
void OAIPluginConfig::setRLinux(const OAIPluginConfigLinux &r_linux) {
    m_r_linux = r_linux;
    m_r_linux_isSet = true;
}

bool OAIPluginConfig::is_r_linux_Set() const{
    return m_r_linux_isSet;
}

bool OAIPluginConfig::is_r_linux_Valid() const{
    return m_r_linux_isValid;
}

QList<OAIPluginMount> OAIPluginConfig::getMounts() const {
    return m_mounts;
}
void OAIPluginConfig::setMounts(const QList<OAIPluginMount> &mounts) {
    m_mounts = mounts;
    m_mounts_isSet = true;
}

bool OAIPluginConfig::is_mounts_Set() const{
    return m_mounts_isSet;
}

bool OAIPluginConfig::is_mounts_Valid() const{
    return m_mounts_isValid;
}

OAIPluginConfigNetwork OAIPluginConfig::getNetwork() const {
    return m_network;
}
void OAIPluginConfig::setNetwork(const OAIPluginConfigNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIPluginConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAIPluginConfig::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIPluginConfig::isPidHost() const {
    return m_pid_host;
}
void OAIPluginConfig::setPidHost(const bool &pid_host) {
    m_pid_host = pid_host;
    m_pid_host_isSet = true;
}

bool OAIPluginConfig::is_pid_host_Set() const{
    return m_pid_host_isSet;
}

bool OAIPluginConfig::is_pid_host_Valid() const{
    return m_pid_host_isValid;
}

QString OAIPluginConfig::getPropagatedMount() const {
    return m_propagated_mount;
}
void OAIPluginConfig::setPropagatedMount(const QString &propagated_mount) {
    m_propagated_mount = propagated_mount;
    m_propagated_mount_isSet = true;
}

bool OAIPluginConfig::is_propagated_mount_Set() const{
    return m_propagated_mount_isSet;
}

bool OAIPluginConfig::is_propagated_mount_Valid() const{
    return m_propagated_mount_isValid;
}

OAIPluginConfigUser OAIPluginConfig::getUser() const {
    return m_user;
}
void OAIPluginConfig::setUser(const OAIPluginConfigUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPluginConfig::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPluginConfig::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIPluginConfig::getWorkDir() const {
    return m_work_dir;
}
void OAIPluginConfig::setWorkDir(const QString &work_dir) {
    m_work_dir = work_dir;
    m_work_dir_isSet = true;
}

bool OAIPluginConfig::is_work_dir_Set() const{
    return m_work_dir_isSet;
}

bool OAIPluginConfig::is_work_dir_Valid() const{
    return m_work_dir_isValid;
}

OAIPluginConfigRootfs OAIPluginConfig::getRootfs() const {
    return m_rootfs;
}
void OAIPluginConfig::setRootfs(const OAIPluginConfigRootfs &rootfs) {
    m_rootfs = rootfs;
    m_rootfs_isSet = true;
}

bool OAIPluginConfig::is_rootfs_Set() const{
    return m_rootfs_isSet;
}

bool OAIPluginConfig::is_rootfs_Valid() const{
    return m_rootfs_isValid;
}

bool OAIPluginConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrypoint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipc_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_linux.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagated_mount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rootfs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_args_isValid && m_description_isValid && m_documentation_isValid && m_entrypoint_isValid && m_env_isValid && m_interface_isValid && m_ipc_host_isValid && m_r_linux_isValid && m_mounts_isValid && m_network_isValid && m_pid_host_isValid && m_propagated_mount_isValid && m_work_dir_isValid && true;
}

} // namespace OpenAPI
