/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeMap::OAIRangeMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeMap::OAIRangeMap() {
    this->initializeModel();
}

OAIRangeMap::~OAIRangeMap() {}

void OAIRangeMap::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIRangeMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeMap::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIRangeMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeMap::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAIRangeMap::getFrom() const {
    return m_from;
}
void OAIRangeMap::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIRangeMap::is_from_Set() const{
    return m_from_isSet;
}

bool OAIRangeMap::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIRangeMap::getText() const {
    return m_text;
}
void OAIRangeMap::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRangeMap::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRangeMap::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIRangeMap::getTo() const {
    return m_to;
}
void OAIRangeMap::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIRangeMap::is_to_Set() const{
    return m_to_isSet;
}

bool OAIRangeMap::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIRangeMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
