/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeriesOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeriesOverride::OAISeriesOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeriesOverride::OAISeriesOverride() {
    this->initializeModel();
}

OAISeriesOverride::~OAISeriesOverride() {}

void OAISeriesOverride::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_bars_isSet = false;
    m_bars_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_dashes_isSet = false;
    m_dashes_isValid = false;

    m_fill_isSet = false;
    m_fill_isValid = false;

    m_fill_below_to_isSet = false;
    m_fill_below_to_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_linewidth_isSet = false;
    m_linewidth_isValid = false;

    m_null_point_mode_isSet = false;
    m_null_point_mode_isValid = false;

    m_stack_isSet = false;
    m_stack_isValid = false;

    m_transform_isSet = false;
    m_transform_isValid = false;

    m_yaxis_isSet = false;
    m_yaxis_isValid = false;

    m_zindex_isSet = false;
    m_zindex_isValid = false;
}

void OAISeriesOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeriesOverride::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_bars_isValid = ::OpenAPI::fromJsonValue(m_bars, json[QString("bars")]);
    m_bars_isSet = !json[QString("bars")].isNull() && m_bars_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_dashes_isValid = ::OpenAPI::fromJsonValue(m_dashes, json[QString("dashes")]);
    m_dashes_isSet = !json[QString("dashes")].isNull() && m_dashes_isValid;

    m_fill_isValid = ::OpenAPI::fromJsonValue(m_fill, json[QString("fill")]);
    m_fill_isSet = !json[QString("fill")].isNull() && m_fill_isValid;

    m_fill_below_to_isValid = ::OpenAPI::fromJsonValue(m_fill_below_to, json[QString("fillBelowTo")]);
    m_fill_below_to_isSet = !json[QString("fillBelowTo")].isNull() && m_fill_below_to_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("legend")]);
    m_legend_isSet = !json[QString("legend")].isNull() && m_legend_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_linewidth_isValid = ::OpenAPI::fromJsonValue(m_linewidth, json[QString("linewidth")]);
    m_linewidth_isSet = !json[QString("linewidth")].isNull() && m_linewidth_isValid;

    m_null_point_mode_isValid = ::OpenAPI::fromJsonValue(m_null_point_mode, json[QString("nullPointMode")]);
    m_null_point_mode_isSet = !json[QString("nullPointMode")].isNull() && m_null_point_mode_isValid;

    m_stack_isValid = ::OpenAPI::fromJsonValue(m_stack, json[QString("stack")]);
    m_stack_isSet = !json[QString("stack")].isNull() && m_stack_isValid;

    m_transform_isValid = ::OpenAPI::fromJsonValue(m_transform, json[QString("transform")]);
    m_transform_isSet = !json[QString("transform")].isNull() && m_transform_isValid;

    m_yaxis_isValid = ::OpenAPI::fromJsonValue(m_yaxis, json[QString("yaxis")]);
    m_yaxis_isSet = !json[QString("yaxis")].isNull() && m_yaxis_isValid;

    m_zindex_isValid = ::OpenAPI::fromJsonValue(m_zindex, json[QString("zindex")]);
    m_zindex_isSet = !json[QString("zindex")].isNull() && m_zindex_isValid;
}

QString OAISeriesOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeriesOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_bars_isSet) {
        obj.insert(QString("bars"), ::OpenAPI::toJsonValue(m_bars));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_dashes_isSet) {
        obj.insert(QString("dashes"), ::OpenAPI::toJsonValue(m_dashes));
    }
    if (m_fill_isSet) {
        obj.insert(QString("fill"), ::OpenAPI::toJsonValue(m_fill));
    }
    if (m_fill_below_to_isSet) {
        obj.insert(QString("fillBelowTo"), ::OpenAPI::toJsonValue(m_fill_below_to));
    }
    if (m_legend_isSet) {
        obj.insert(QString("legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_lines_isSet) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_linewidth_isSet) {
        obj.insert(QString("linewidth"), ::OpenAPI::toJsonValue(m_linewidth));
    }
    if (m_null_point_mode_isSet) {
        obj.insert(QString("nullPointMode"), ::OpenAPI::toJsonValue(m_null_point_mode));
    }
    if (m_stack.isSet()) {
        obj.insert(QString("stack"), ::OpenAPI::toJsonValue(m_stack));
    }
    if (m_transform_isSet) {
        obj.insert(QString("transform"), ::OpenAPI::toJsonValue(m_transform));
    }
    if (m_yaxis_isSet) {
        obj.insert(QString("yaxis"), ::OpenAPI::toJsonValue(m_yaxis));
    }
    if (m_zindex_isSet) {
        obj.insert(QString("zindex"), ::OpenAPI::toJsonValue(m_zindex));
    }
    return obj;
}

QString OAISeriesOverride::getAlias() const {
    return m_alias;
}
void OAISeriesOverride::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAISeriesOverride::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAISeriesOverride::is_alias_Valid() const{
    return m_alias_isValid;
}

bool OAISeriesOverride::isBars() const {
    return m_bars;
}
void OAISeriesOverride::setBars(const bool &bars) {
    m_bars = bars;
    m_bars_isSet = true;
}

bool OAISeriesOverride::is_bars_Set() const{
    return m_bars_isSet;
}

bool OAISeriesOverride::is_bars_Valid() const{
    return m_bars_isValid;
}

QString OAISeriesOverride::getColor() const {
    return m_color;
}
void OAISeriesOverride::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAISeriesOverride::is_color_Set() const{
    return m_color_isSet;
}

bool OAISeriesOverride::is_color_Valid() const{
    return m_color_isValid;
}

bool OAISeriesOverride::isDashes() const {
    return m_dashes;
}
void OAISeriesOverride::setDashes(const bool &dashes) {
    m_dashes = dashes;
    m_dashes_isSet = true;
}

bool OAISeriesOverride::is_dashes_Set() const{
    return m_dashes_isSet;
}

bool OAISeriesOverride::is_dashes_Valid() const{
    return m_dashes_isValid;
}

qint64 OAISeriesOverride::getFill() const {
    return m_fill;
}
void OAISeriesOverride::setFill(const qint64 &fill) {
    m_fill = fill;
    m_fill_isSet = true;
}

bool OAISeriesOverride::is_fill_Set() const{
    return m_fill_isSet;
}

bool OAISeriesOverride::is_fill_Valid() const{
    return m_fill_isValid;
}

QString OAISeriesOverride::getFillBelowTo() const {
    return m_fill_below_to;
}
void OAISeriesOverride::setFillBelowTo(const QString &fill_below_to) {
    m_fill_below_to = fill_below_to;
    m_fill_below_to_isSet = true;
}

bool OAISeriesOverride::is_fill_below_to_Set() const{
    return m_fill_below_to_isSet;
}

bool OAISeriesOverride::is_fill_below_to_Valid() const{
    return m_fill_below_to_isValid;
}

bool OAISeriesOverride::isLegend() const {
    return m_legend;
}
void OAISeriesOverride::setLegend(const bool &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAISeriesOverride::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAISeriesOverride::is_legend_Valid() const{
    return m_legend_isValid;
}

bool OAISeriesOverride::isLines() const {
    return m_lines;
}
void OAISeriesOverride::setLines(const bool &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAISeriesOverride::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAISeriesOverride::is_lines_Valid() const{
    return m_lines_isValid;
}

qint64 OAISeriesOverride::getLinewidth() const {
    return m_linewidth;
}
void OAISeriesOverride::setLinewidth(const qint64 &linewidth) {
    m_linewidth = linewidth;
    m_linewidth_isSet = true;
}

bool OAISeriesOverride::is_linewidth_Set() const{
    return m_linewidth_isSet;
}

bool OAISeriesOverride::is_linewidth_Valid() const{
    return m_linewidth_isValid;
}

QString OAISeriesOverride::getNullPointMode() const {
    return m_null_point_mode;
}
void OAISeriesOverride::setNullPointMode(const QString &null_point_mode) {
    m_null_point_mode = null_point_mode;
    m_null_point_mode_isSet = true;
}

bool OAISeriesOverride::is_null_point_mode_Set() const{
    return m_null_point_mode_isSet;
}

bool OAISeriesOverride::is_null_point_mode_Valid() const{
    return m_null_point_mode_isValid;
}

OAIBoolString OAISeriesOverride::getStack() const {
    return m_stack;
}
void OAISeriesOverride::setStack(const OAIBoolString &stack) {
    m_stack = stack;
    m_stack_isSet = true;
}

bool OAISeriesOverride::is_stack_Set() const{
    return m_stack_isSet;
}

bool OAISeriesOverride::is_stack_Valid() const{
    return m_stack_isValid;
}

QString OAISeriesOverride::getTransform() const {
    return m_transform;
}
void OAISeriesOverride::setTransform(const QString &transform) {
    m_transform = transform;
    m_transform_isSet = true;
}

bool OAISeriesOverride::is_transform_Set() const{
    return m_transform_isSet;
}

bool OAISeriesOverride::is_transform_Valid() const{
    return m_transform_isValid;
}

qint64 OAISeriesOverride::getYaxis() const {
    return m_yaxis;
}
void OAISeriesOverride::setYaxis(const qint64 &yaxis) {
    m_yaxis = yaxis;
    m_yaxis_isSet = true;
}

bool OAISeriesOverride::is_yaxis_Set() const{
    return m_yaxis_isSet;
}

bool OAISeriesOverride::is_yaxis_Valid() const{
    return m_yaxis_isValid;
}

qint64 OAISeriesOverride::getZindex() const {
    return m_zindex;
}
void OAISeriesOverride::setZindex(const qint64 &zindex) {
    m_zindex = zindex;
    m_zindex_isSet = true;
}

bool OAISeriesOverride::is_zindex_Set() const{
    return m_zindex_isSet;
}

bool OAISeriesOverride::is_zindex_Valid() const{
    return m_zindex_isValid;
}

bool OAISeriesOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_below_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linewidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_point_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaxis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zindex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeriesOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
