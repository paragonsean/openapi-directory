/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigRootfs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigRootfs::OAIPluginConfigRootfs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigRootfs::OAIPluginConfigRootfs() {
    this->initializeModel();
}

OAIPluginConfigRootfs::~OAIPluginConfigRootfs() {}

void OAIPluginConfigRootfs::initializeModel() {

    m_diff_ids_isSet = false;
    m_diff_ids_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPluginConfigRootfs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigRootfs::fromJsonObject(QJsonObject json) {

    m_diff_ids_isValid = ::OpenAPI::fromJsonValue(m_diff_ids, json[QString("diff_ids")]);
    m_diff_ids_isSet = !json[QString("diff_ids")].isNull() && m_diff_ids_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPluginConfigRootfs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigRootfs::asJsonObject() const {
    QJsonObject obj;
    if (m_diff_ids.size() > 0) {
        obj.insert(QString("diff_ids"), ::OpenAPI::toJsonValue(m_diff_ids));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIPluginConfigRootfs::getDiffIds() const {
    return m_diff_ids;
}
void OAIPluginConfigRootfs::setDiffIds(const QList<QString> &diff_ids) {
    m_diff_ids = diff_ids;
    m_diff_ids_isSet = true;
}

bool OAIPluginConfigRootfs::is_diff_ids_Set() const{
    return m_diff_ids_isSet;
}

bool OAIPluginConfigRootfs::is_diff_ids_Valid() const{
    return m_diff_ids_isValid;
}

QString OAIPluginConfigRootfs::getType() const {
    return m_type;
}
void OAIPluginConfigRootfs::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPluginConfigRootfs::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPluginConfigRootfs::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPluginConfigRootfs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diff_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigRootfs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
