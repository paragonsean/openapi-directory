/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_color_mode_isSet = false;
    m_color_mode_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_display_mode_isSet = false;
    m_display_mode_isValid = false;

    m_graph_mode_isSet = false;
    m_graph_mode_isValid = false;

    m_justify_mode_isSet = false;
    m_justify_mode_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_reduce_options_isSet = false;
    m_reduce_options_isValid = false;

    m_text_mode_isSet = false;
    m_text_mode_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_color_mode_isValid = ::OpenAPI::fromJsonValue(m_color_mode, json[QString("colorMode")]);
    m_color_mode_isSet = !json[QString("colorMode")].isNull() && m_color_mode_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_display_mode_isValid = ::OpenAPI::fromJsonValue(m_display_mode, json[QString("displayMode")]);
    m_display_mode_isSet = !json[QString("displayMode")].isNull() && m_display_mode_isValid;

    m_graph_mode_isValid = ::OpenAPI::fromJsonValue(m_graph_mode, json[QString("graphMode")]);
    m_graph_mode_isSet = !json[QString("graphMode")].isNull() && m_graph_mode_isValid;

    m_justify_mode_isValid = ::OpenAPI::fromJsonValue(m_justify_mode, json[QString("justifyMode")]);
    m_justify_mode_isSet = !json[QString("justifyMode")].isNull() && m_justify_mode_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_reduce_options_isValid = ::OpenAPI::fromJsonValue(m_reduce_options, json[QString("reduceOptions")]);
    m_reduce_options_isSet = !json[QString("reduceOptions")].isNull() && m_reduce_options_isValid;

    m_text_mode_isValid = ::OpenAPI::fromJsonValue(m_text_mode, json[QString("textMode")]);
    m_text_mode_isSet = !json[QString("textMode")].isNull() && m_text_mode_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_color_mode_isSet) {
        obj.insert(QString("colorMode"), ::OpenAPI::toJsonValue(m_color_mode));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_display_mode_isSet) {
        obj.insert(QString("displayMode"), ::OpenAPI::toJsonValue(m_display_mode));
    }
    if (m_graph_mode_isSet) {
        obj.insert(QString("graphMode"), ::OpenAPI::toJsonValue(m_graph_mode));
    }
    if (m_justify_mode_isSet) {
        obj.insert(QString("justifyMode"), ::OpenAPI::toJsonValue(m_justify_mode));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_reduce_options.isSet()) {
        obj.insert(QString("reduceOptions"), ::OpenAPI::toJsonValue(m_reduce_options));
    }
    if (m_text_mode_isSet) {
        obj.insert(QString("textMode"), ::OpenAPI::toJsonValue(m_text_mode));
    }
    return obj;
}

QString OAIOptions::getColorMode() const {
    return m_color_mode;
}
void OAIOptions::setColorMode(const QString &color_mode) {
    m_color_mode = color_mode;
    m_color_mode_isSet = true;
}

bool OAIOptions::is_color_mode_Set() const{
    return m_color_mode_isSet;
}

bool OAIOptions::is_color_mode_Valid() const{
    return m_color_mode_isValid;
}

QString OAIOptions::getContent() const {
    return m_content;
}
void OAIOptions::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIOptions::is_content_Set() const{
    return m_content_isSet;
}

bool OAIOptions::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIOptions::getDisplayMode() const {
    return m_display_mode;
}
void OAIOptions::setDisplayMode(const QString &display_mode) {
    m_display_mode = display_mode;
    m_display_mode_isSet = true;
}

bool OAIOptions::is_display_mode_Set() const{
    return m_display_mode_isSet;
}

bool OAIOptions::is_display_mode_Valid() const{
    return m_display_mode_isValid;
}

QString OAIOptions::getGraphMode() const {
    return m_graph_mode;
}
void OAIOptions::setGraphMode(const QString &graph_mode) {
    m_graph_mode = graph_mode;
    m_graph_mode_isSet = true;
}

bool OAIOptions::is_graph_mode_Set() const{
    return m_graph_mode_isSet;
}

bool OAIOptions::is_graph_mode_Valid() const{
    return m_graph_mode_isValid;
}

QString OAIOptions::getJustifyMode() const {
    return m_justify_mode;
}
void OAIOptions::setJustifyMode(const QString &justify_mode) {
    m_justify_mode = justify_mode;
    m_justify_mode_isSet = true;
}

bool OAIOptions::is_justify_mode_Set() const{
    return m_justify_mode_isSet;
}

bool OAIOptions::is_justify_mode_Valid() const{
    return m_justify_mode_isValid;
}

QString OAIOptions::getMode() const {
    return m_mode;
}
void OAIOptions::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIOptions::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIOptions::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIOptions::getOrientation() const {
    return m_orientation;
}
void OAIOptions::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIOptions::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIOptions::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAIOptions_reduceOptions OAIOptions::getReduceOptions() const {
    return m_reduce_options;
}
void OAIOptions::setReduceOptions(const OAIOptions_reduceOptions &reduce_options) {
    m_reduce_options = reduce_options;
    m_reduce_options_isSet = true;
}

bool OAIOptions::is_reduce_options_Set() const{
    return m_reduce_options_isSet;
}

bool OAIOptions::is_reduce_options_Valid() const{
    return m_reduce_options_isValid;
}

QString OAIOptions::getTextMode() const {
    return m_text_mode;
}
void OAIOptions::setTextMode(const QString &text_mode) {
    m_text_mode = text_mode;
    m_text_mode_isSet = true;
}

bool OAIOptions::is_text_mode_Set() const{
    return m_text_mode_isSet;
}

bool OAIOptions::is_text_mode_Valid() const{
    return m_text_mode_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_justify_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduce_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
