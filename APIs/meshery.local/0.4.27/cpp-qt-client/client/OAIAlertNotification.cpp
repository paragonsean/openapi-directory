/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertNotification::OAIAlertNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertNotification::OAIAlertNotification() {
    this->initializeModel();
}

OAIAlertNotification::~OAIAlertNotification() {}

void OAIAlertNotification::initializeModel() {

    m_disable_resolve_message_isSet = false;
    m_disable_resolve_message_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_send_reminder_isSet = false;
    m_send_reminder_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIAlertNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertNotification::fromJsonObject(QJsonObject json) {

    m_disable_resolve_message_isValid = ::OpenAPI::fromJsonValue(m_disable_resolve_message, json[QString("disableResolveMessage")]);
    m_disable_resolve_message_isSet = !json[QString("disableResolveMessage")].isNull() && m_disable_resolve_message_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_send_reminder_isValid = ::OpenAPI::fromJsonValue(m_send_reminder, json[QString("sendReminder")]);
    m_send_reminder_isSet = !json[QString("sendReminder")].isNull() && m_send_reminder_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIAlertNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_resolve_message_isSet) {
        obj.insert(QString("disableResolveMessage"), ::OpenAPI::toJsonValue(m_disable_resolve_message));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_send_reminder_isSet) {
        obj.insert(QString("sendReminder"), ::OpenAPI::toJsonValue(m_send_reminder));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

bool OAIAlertNotification::isDisableResolveMessage() const {
    return m_disable_resolve_message;
}
void OAIAlertNotification::setDisableResolveMessage(const bool &disable_resolve_message) {
    m_disable_resolve_message = disable_resolve_message;
    m_disable_resolve_message_isSet = true;
}

bool OAIAlertNotification::is_disable_resolve_message_Set() const{
    return m_disable_resolve_message_isSet;
}

bool OAIAlertNotification::is_disable_resolve_message_Valid() const{
    return m_disable_resolve_message_isValid;
}

QString OAIAlertNotification::getFrequency() const {
    return m_frequency;
}
void OAIAlertNotification::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAlertNotification::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAlertNotification::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint64 OAIAlertNotification::getId() const {
    return m_id;
}
void OAIAlertNotification::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlertNotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlertNotification::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAlertNotification::isIsDefault() const {
    return m_is_default;
}
void OAIAlertNotification::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIAlertNotification::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIAlertNotification::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIAlertNotification::getName() const {
    return m_name;
}
void OAIAlertNotification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlertNotification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlertNotification::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAlertNotification::isSendReminder() const {
    return m_send_reminder;
}
void OAIAlertNotification::setSendReminder(const bool &send_reminder) {
    m_send_reminder = send_reminder;
    m_send_reminder_isSet = true;
}

bool OAIAlertNotification::is_send_reminder_Set() const{
    return m_send_reminder_isSet;
}

bool OAIAlertNotification::is_send_reminder_Valid() const{
    return m_send_reminder_isValid;
}

OAIObject OAIAlertNotification::getSettings() const {
    return m_settings;
}
void OAIAlertNotification::setSettings(const OAIObject &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIAlertNotification::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIAlertNotification::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIAlertNotification::getType() const {
    return m_type;
}
void OAIAlertNotification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlertNotification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlertNotification::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAlertNotification::getUid() const {
    return m_uid;
}
void OAIAlertNotification::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIAlertNotification::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIAlertNotification::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIAlertNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_resolve_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
