/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIK8SNode.h
 *
 * K8SNode - represents a kubernetes node
 */

#ifndef OAIK8SNode_H
#define OAIK8SNode_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIK8SNode : public OAIObject {
public:
    OAIK8SNode();
    OAIK8SNode(QString json);
    ~OAIK8SNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllocatableCpu() const;
    void setAllocatableCpu(const QString &allocatable_cpu);
    bool is_allocatable_cpu_Set() const;
    bool is_allocatable_cpu_Valid() const;

    QString getAllocatableMemory() const;
    void setAllocatableMemory(const QString &allocatable_memory);
    bool is_allocatable_memory_Set() const;
    bool is_allocatable_memory_Valid() const;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getCapacityCpu() const;
    void setCapacityCpu(const QString &capacity_cpu);
    bool is_capacity_cpu_Set() const;
    bool is_capacity_cpu_Valid() const;

    QString getCapacityMemory() const;
    void setCapacityMemory(const QString &capacity_memory);
    bool is_capacity_memory_Set() const;
    bool is_capacity_memory_Valid() const;

    QString getContainerRuntimeVersion() const;
    void setContainerRuntimeVersion(const QString &container_runtime_version);
    bool is_container_runtime_version_Set() const;
    bool is_container_runtime_version_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getInternalIp() const;
    void setInternalIp(const QString &internal_ip);
    bool is_internal_ip_Set() const;
    bool is_internal_ip_Valid() const;

    QString getKubeletVersion() const;
    void setKubeletVersion(const QString &kubelet_version);
    bool is_kubelet_version_Set() const;
    bool is_kubelet_version_Valid() const;

    QString getKubeproxyVersion() const;
    void setKubeproxyVersion(const QString &kubeproxy_version);
    bool is_kubeproxy_version_Set() const;
    bool is_kubeproxy_version_Valid() const;

    QString getOperatingSystem() const;
    void setOperatingSystem(const QString &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    QString getOsImage() const;
    void setOsImage(const QString &os_image);
    bool is_os_image_Set() const;
    bool is_os_image_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allocatable_cpu;
    bool m_allocatable_cpu_isSet;
    bool m_allocatable_cpu_isValid;

    QString m_allocatable_memory;
    bool m_allocatable_memory_isSet;
    bool m_allocatable_memory_isValid;

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_capacity_cpu;
    bool m_capacity_cpu_isSet;
    bool m_capacity_cpu_isValid;

    QString m_capacity_memory;
    bool m_capacity_memory_isSet;
    bool m_capacity_memory_isValid;

    QString m_container_runtime_version;
    bool m_container_runtime_version_isSet;
    bool m_container_runtime_version_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_internal_ip;
    bool m_internal_ip_isSet;
    bool m_internal_ip_isValid;

    QString m_kubelet_version;
    bool m_kubelet_version_isSet;
    bool m_kubelet_version_isValid;

    QString m_kubeproxy_version;
    bool m_kubeproxy_version_isSet;
    bool m_kubeproxy_version_isValid;

    QString m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    QString m_os_image;
    bool m_os_image_isSet;
    bool m_os_image_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIK8SNode)

#endif // OAIK8SNode_H
