/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkLine::OAISparkLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkLine::OAISparkLine() {
    this->initializeModel();
}

OAISparkLine::~OAISparkLine() {}

void OAISparkLine::initializeModel() {

    m_fill_color_isSet = false;
    m_fill_color_isValid = false;

    m_full_isSet = false;
    m_full_isValid = false;

    m_line_color_isSet = false;
    m_line_color_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_ymax_isSet = false;
    m_ymax_isValid = false;

    m_ymin_isSet = false;
    m_ymin_isValid = false;
}

void OAISparkLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkLine::fromJsonObject(QJsonObject json) {

    m_fill_color_isValid = ::OpenAPI::fromJsonValue(m_fill_color, json[QString("fillColor")]);
    m_fill_color_isSet = !json[QString("fillColor")].isNull() && m_fill_color_isValid;

    m_full_isValid = ::OpenAPI::fromJsonValue(m_full, json[QString("full")]);
    m_full_isSet = !json[QString("full")].isNull() && m_full_isValid;

    m_line_color_isValid = ::OpenAPI::fromJsonValue(m_line_color, json[QString("lineColor")]);
    m_line_color_isSet = !json[QString("lineColor")].isNull() && m_line_color_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_ymax_isValid = ::OpenAPI::fromJsonValue(m_ymax, json[QString("ymax")]);
    m_ymax_isSet = !json[QString("ymax")].isNull() && m_ymax_isValid;

    m_ymin_isValid = ::OpenAPI::fromJsonValue(m_ymin, json[QString("ymin")]);
    m_ymin_isSet = !json[QString("ymin")].isNull() && m_ymin_isValid;
}

QString OAISparkLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkLine::asJsonObject() const {
    QJsonObject obj;
    if (m_fill_color_isSet) {
        obj.insert(QString("fillColor"), ::OpenAPI::toJsonValue(m_fill_color));
    }
    if (m_full_isSet) {
        obj.insert(QString("full"), ::OpenAPI::toJsonValue(m_full));
    }
    if (m_line_color_isSet) {
        obj.insert(QString("lineColor"), ::OpenAPI::toJsonValue(m_line_color));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_ymax_isSet) {
        obj.insert(QString("ymax"), ::OpenAPI::toJsonValue(m_ymax));
    }
    if (m_ymin_isSet) {
        obj.insert(QString("ymin"), ::OpenAPI::toJsonValue(m_ymin));
    }
    return obj;
}

QString OAISparkLine::getFillColor() const {
    return m_fill_color;
}
void OAISparkLine::setFillColor(const QString &fill_color) {
    m_fill_color = fill_color;
    m_fill_color_isSet = true;
}

bool OAISparkLine::is_fill_color_Set() const{
    return m_fill_color_isSet;
}

bool OAISparkLine::is_fill_color_Valid() const{
    return m_fill_color_isValid;
}

bool OAISparkLine::isFull() const {
    return m_full;
}
void OAISparkLine::setFull(const bool &full) {
    m_full = full;
    m_full_isSet = true;
}

bool OAISparkLine::is_full_Set() const{
    return m_full_isSet;
}

bool OAISparkLine::is_full_Valid() const{
    return m_full_isValid;
}

QString OAISparkLine::getLineColor() const {
    return m_line_color;
}
void OAISparkLine::setLineColor(const QString &line_color) {
    m_line_color = line_color;
    m_line_color_isSet = true;
}

bool OAISparkLine::is_line_color_Set() const{
    return m_line_color_isSet;
}

bool OAISparkLine::is_line_color_Valid() const{
    return m_line_color_isValid;
}

bool OAISparkLine::isShow() const {
    return m_show;
}
void OAISparkLine::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAISparkLine::is_show_Set() const{
    return m_show_isSet;
}

bool OAISparkLine::is_show_Valid() const{
    return m_show_isValid;
}

double OAISparkLine::getYmax() const {
    return m_ymax;
}
void OAISparkLine::setYmax(const double &ymax) {
    m_ymax = ymax;
    m_ymax_isSet = true;
}

bool OAISparkLine::is_ymax_Set() const{
    return m_ymax_isSet;
}

bool OAISparkLine::is_ymax_Valid() const{
    return m_ymax_isValid;
}

double OAISparkLine::getYmin() const {
    return m_ymin;
}
void OAISparkLine::setYmin(const double &ymin) {
    m_ymin = ymin;
    m_ymin_isSet = true;
}

bool OAISparkLine::is_ymin_Set() const{
    return m_ymin_isSet;
}

bool OAISparkLine::is_ymin_Valid() const{
    return m_ymin_isValid;
}

bool OAISparkLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fill_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ymax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ymin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
