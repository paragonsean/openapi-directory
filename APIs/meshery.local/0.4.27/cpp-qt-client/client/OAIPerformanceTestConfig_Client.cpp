/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceTestConfig_Client.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceTestConfig_Client::OAIPerformanceTestConfig_Client(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceTestConfig_Client::OAIPerformanceTestConfig_Client() {
    this->initializeModel();
}

OAIPerformanceTestConfig_Client::~OAIPerformanceTestConfig_Client() {}

void OAIPerformanceTestConfig_Client::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_endpoint_urls_isSet = false;
    m_endpoint_urls_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_load_generator_isSet = false;
    m_load_generator_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_rps_isSet = false;
    m_rps_isValid = false;
}

void OAIPerformanceTestConfig_Client::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceTestConfig_Client::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_endpoint_urls_isValid = ::OpenAPI::fromJsonValue(m_endpoint_urls, json[QString("endpoint_urls")]);
    m_endpoint_urls_isSet = !json[QString("endpoint_urls")].isNull() && m_endpoint_urls_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_load_generator_isValid = ::OpenAPI::fromJsonValue(m_load_generator, json[QString("load_generator")]);
    m_load_generator_isSet = !json[QString("load_generator")].isNull() && m_load_generator_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_rps_isValid = ::OpenAPI::fromJsonValue(m_rps, json[QString("rps")]);
    m_rps_isSet = !json[QString("rps")].isNull() && m_rps_isValid;
}

QString OAIPerformanceTestConfig_Client::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceTestConfig_Client::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_connections_isSet) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_cookies.size() > 0) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_endpoint_urls.size() > 0) {
        obj.insert(QString("endpoint_urls"), ::OpenAPI::toJsonValue(m_endpoint_urls));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_load_generator_isSet) {
        obj.insert(QString("load_generator"), ::OpenAPI::toJsonValue(m_load_generator));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_rps_isSet) {
        obj.insert(QString("rps"), ::OpenAPI::toJsonValue(m_rps));
    }
    return obj;
}

QString OAIPerformanceTestConfig_Client::getBody() const {
    return m_body;
}
void OAIPerformanceTestConfig_Client::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPerformanceTestConfig_Client::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIPerformanceTestConfig_Client::getConnections() const {
    return m_connections;
}
void OAIPerformanceTestConfig_Client::setConnections(const qint32 &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIPerformanceTestConfig_Client::is_connections_Valid() const{
    return m_connections_isValid;
}

QString OAIPerformanceTestConfig_Client::getContentType() const {
    return m_content_type;
}
void OAIPerformanceTestConfig_Client::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIPerformanceTestConfig_Client::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QMap<QString, QString> OAIPerformanceTestConfig_Client::getCookies() const {
    return m_cookies;
}
void OAIPerformanceTestConfig_Client::setCookies(const QMap<QString, QString> &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAIPerformanceTestConfig_Client::is_cookies_Valid() const{
    return m_cookies_isValid;
}

QList<QString> OAIPerformanceTestConfig_Client::getEndpointUrls() const {
    return m_endpoint_urls;
}
void OAIPerformanceTestConfig_Client::setEndpointUrls(const QList<QString> &endpoint_urls) {
    m_endpoint_urls = endpoint_urls;
    m_endpoint_urls_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_endpoint_urls_Set() const{
    return m_endpoint_urls_isSet;
}

bool OAIPerformanceTestConfig_Client::is_endpoint_urls_Valid() const{
    return m_endpoint_urls_isValid;
}

QMap<QString, QString> OAIPerformanceTestConfig_Client::getHeaders() const {
    return m_headers;
}
void OAIPerformanceTestConfig_Client::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIPerformanceTestConfig_Client::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIPerformanceTestConfig_Client::isInternal() const {
    return m_internal;
}
void OAIPerformanceTestConfig_Client::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIPerformanceTestConfig_Client::is_internal_Valid() const{
    return m_internal_isValid;
}

QString OAIPerformanceTestConfig_Client::getLoadGenerator() const {
    return m_load_generator;
}
void OAIPerformanceTestConfig_Client::setLoadGenerator(const QString &load_generator) {
    m_load_generator = load_generator;
    m_load_generator_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_load_generator_Set() const{
    return m_load_generator_isSet;
}

bool OAIPerformanceTestConfig_Client::is_load_generator_Valid() const{
    return m_load_generator_isValid;
}

qint32 OAIPerformanceTestConfig_Client::getProtocol() const {
    return m_protocol;
}
void OAIPerformanceTestConfig_Client::setProtocol(const qint32 &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIPerformanceTestConfig_Client::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint64 OAIPerformanceTestConfig_Client::getRps() const {
    return m_rps;
}
void OAIPerformanceTestConfig_Client::setRps(const qint64 &rps) {
    m_rps = rps;
    m_rps_isSet = true;
}

bool OAIPerformanceTestConfig_Client::is_rps_Set() const{
    return m_rps_isSet;
}

bool OAIPerformanceTestConfig_Client::is_rps_Valid() const{
    return m_rps_isValid;
}

bool OAIPerformanceTestConfig_Client::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_generator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceTestConfig_Client::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
