/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerWaitOKBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerWaitOKBody::OAIContainerWaitOKBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerWaitOKBody::OAIContainerWaitOKBody() {
    this->initializeModel();
}

OAIContainerWaitOKBody::~OAIContainerWaitOKBody() {}

void OAIContainerWaitOKBody::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIContainerWaitOKBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerWaitOKBody::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;
}

QString OAIContainerWaitOKBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerWaitOKBody::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

OAIContainerWaitOKBodyError OAIContainerWaitOKBody::getError() const {
    return m_error;
}
void OAIContainerWaitOKBody::setError(const OAIContainerWaitOKBodyError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIContainerWaitOKBody::is_error_Set() const{
    return m_error_isSet;
}

bool OAIContainerWaitOKBody::is_error_Valid() const{
    return m_error_isValid;
}

qint64 OAIContainerWaitOKBody::getStatusCode() const {
    return m_status_code;
}
void OAIContainerWaitOKBody::setStatusCode(const qint64 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIContainerWaitOKBody::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIContainerWaitOKBody::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIContainerWaitOKBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerWaitOKBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && m_status_code_isValid && true;
}

} // namespace OpenAPI
