/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIK8SConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIK8SConfig::OAIK8SConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIK8SConfig::OAIK8SConfig() {
    this->initializeModel();
}

OAIK8SConfig::~OAIK8SConfig() {}

void OAIK8SConfig::initializeModel() {

    m_cluster_configured_isSet = false;
    m_cluster_configured_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_configured_server_isSet = false;
    m_configured_server_isValid = false;

    m_context_name_isSet = false;
    m_context_name_isValid = false;

    m_in_cluster_config_isSet = false;
    m_in_cluster_config_isValid = false;

    m_k8sfile_isSet = false;
    m_k8sfile_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_server_version_isSet = false;
    m_server_version_isValid = false;
}

void OAIK8SConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIK8SConfig::fromJsonObject(QJsonObject json) {

    m_cluster_configured_isValid = ::OpenAPI::fromJsonValue(m_cluster_configured, json[QString("clusterConfigured")]);
    m_cluster_configured_isSet = !json[QString("clusterConfigured")].isNull() && m_cluster_configured_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_configured_server_isValid = ::OpenAPI::fromJsonValue(m_configured_server, json[QString("configuredServer")]);
    m_configured_server_isSet = !json[QString("configuredServer")].isNull() && m_configured_server_isValid;

    m_context_name_isValid = ::OpenAPI::fromJsonValue(m_context_name, json[QString("contextName")]);
    m_context_name_isSet = !json[QString("contextName")].isNull() && m_context_name_isValid;

    m_in_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_in_cluster_config, json[QString("inClusterConfig")]);
    m_in_cluster_config_isSet = !json[QString("inClusterConfig")].isNull() && m_in_cluster_config_isValid;

    m_k8sfile_isValid = ::OpenAPI::fromJsonValue(m_k8sfile, json[QString("k8sfile")]);
    m_k8sfile_isSet = !json[QString("k8sfile")].isNull() && m_k8sfile_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_server_version_isValid = ::OpenAPI::fromJsonValue(m_server_version, json[QString("server_version")]);
    m_server_version_isSet = !json[QString("server_version")].isNull() && m_server_version_isValid;
}

QString OAIK8SConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIK8SConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_configured_isSet) {
        obj.insert(QString("clusterConfigured"), ::OpenAPI::toJsonValue(m_cluster_configured));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_configured_server_isSet) {
        obj.insert(QString("configuredServer"), ::OpenAPI::toJsonValue(m_configured_server));
    }
    if (m_context_name_isSet) {
        obj.insert(QString("contextName"), ::OpenAPI::toJsonValue(m_context_name));
    }
    if (m_in_cluster_config_isSet) {
        obj.insert(QString("inClusterConfig"), ::OpenAPI::toJsonValue(m_in_cluster_config));
    }
    if (m_k8sfile_isSet) {
        obj.insert(QString("k8sfile"), ::OpenAPI::toJsonValue(m_k8sfile));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_server_version_isSet) {
        obj.insert(QString("server_version"), ::OpenAPI::toJsonValue(m_server_version));
    }
    return obj;
}

bool OAIK8SConfig::isClusterConfigured() const {
    return m_cluster_configured;
}
void OAIK8SConfig::setClusterConfigured(const bool &cluster_configured) {
    m_cluster_configured = cluster_configured;
    m_cluster_configured_isSet = true;
}

bool OAIK8SConfig::is_cluster_configured_Set() const{
    return m_cluster_configured_isSet;
}

bool OAIK8SConfig::is_cluster_configured_Valid() const{
    return m_cluster_configured_isValid;
}

QList<qint32> OAIK8SConfig::getConfig() const {
    return m_config;
}
void OAIK8SConfig::setConfig(const QList<qint32> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIK8SConfig::is_config_Set() const{
    return m_config_isSet;
}

bool OAIK8SConfig::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIK8SConfig::getConfiguredServer() const {
    return m_configured_server;
}
void OAIK8SConfig::setConfiguredServer(const QString &configured_server) {
    m_configured_server = configured_server;
    m_configured_server_isSet = true;
}

bool OAIK8SConfig::is_configured_server_Set() const{
    return m_configured_server_isSet;
}

bool OAIK8SConfig::is_configured_server_Valid() const{
    return m_configured_server_isValid;
}

QString OAIK8SConfig::getContextName() const {
    return m_context_name;
}
void OAIK8SConfig::setContextName(const QString &context_name) {
    m_context_name = context_name;
    m_context_name_isSet = true;
}

bool OAIK8SConfig::is_context_name_Set() const{
    return m_context_name_isSet;
}

bool OAIK8SConfig::is_context_name_Valid() const{
    return m_context_name_isValid;
}

bool OAIK8SConfig::isInClusterConfig() const {
    return m_in_cluster_config;
}
void OAIK8SConfig::setInClusterConfig(const bool &in_cluster_config) {
    m_in_cluster_config = in_cluster_config;
    m_in_cluster_config_isSet = true;
}

bool OAIK8SConfig::is_in_cluster_config_Set() const{
    return m_in_cluster_config_isSet;
}

bool OAIK8SConfig::is_in_cluster_config_Valid() const{
    return m_in_cluster_config_isValid;
}

QString OAIK8SConfig::getK8sfile() const {
    return m_k8sfile;
}
void OAIK8SConfig::setK8sfile(const QString &k8sfile) {
    m_k8sfile = k8sfile;
    m_k8sfile_isSet = true;
}

bool OAIK8SConfig::is_k8sfile_Set() const{
    return m_k8sfile_isSet;
}

bool OAIK8SConfig::is_k8sfile_Valid() const{
    return m_k8sfile_isValid;
}

QList<OAIK8SNode> OAIK8SConfig::getNodes() const {
    return m_nodes;
}
void OAIK8SConfig::setNodes(const QList<OAIK8SNode> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIK8SConfig::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIK8SConfig::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIK8SConfig::getServerVersion() const {
    return m_server_version;
}
void OAIK8SConfig::setServerVersion(const QString &server_version) {
    m_server_version = server_version;
    m_server_version_isSet = true;
}

bool OAIK8SConfig::is_server_version_Set() const{
    return m_server_version_isSet;
}

bool OAIK8SConfig::is_server_version_Valid() const{
    return m_server_version_isValid;
}

bool OAIK8SConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configured_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_cluster_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k8sfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIK8SConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
