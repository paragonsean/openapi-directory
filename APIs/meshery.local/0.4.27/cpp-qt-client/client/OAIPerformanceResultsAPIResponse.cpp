/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceResultsAPIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceResultsAPIResponse::OAIPerformanceResultsAPIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceResultsAPIResponse::OAIPerformanceResultsAPIResponse() {
    this->initializeModel();
}

OAIPerformanceResultsAPIResponse::~OAIPerformanceResultsAPIResponse() {}

void OAIPerformanceResultsAPIResponse::initializeModel() {

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIPerformanceResultsAPIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceResultsAPIResponse::fromJsonObject(QJsonObject json) {

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIPerformanceResultsAPIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceResultsAPIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIPerformanceResultsAPIResponse::getPage() const {
    return m_page;
}
void OAIPerformanceResultsAPIResponse::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPerformanceResultsAPIResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPerformanceResultsAPIResponse::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIPerformanceResultsAPIResponse::getPageSize() const {
    return m_page_size;
}
void OAIPerformanceResultsAPIResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPerformanceResultsAPIResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPerformanceResultsAPIResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<OAIPerformanceResult> OAIPerformanceResultsAPIResponse::getResults() const {
    return m_results;
}
void OAIPerformanceResultsAPIResponse::setResults(const QList<OAIPerformanceResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPerformanceResultsAPIResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPerformanceResultsAPIResponse::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAIPerformanceResultsAPIResponse::getTotalCount() const {
    return m_total_count;
}
void OAIPerformanceResultsAPIResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIPerformanceResultsAPIResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIPerformanceResultsAPIResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIPerformanceResultsAPIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceResultsAPIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
