/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreferenceParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreferenceParams::OAIPreferenceParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreferenceParams::OAIPreferenceParams() {
    this->initializeModel();
}

OAIPreferenceParams::~OAIPreferenceParams() {}

void OAIPreferenceParams::initializeModel() {

    m_anonymous_perf_results_isSet = false;
    m_anonymous_perf_results_isValid = false;

    m_anonymous_usage_stats_isSet = false;
    m_anonymous_usage_stats_isValid = false;
}

void OAIPreferenceParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreferenceParams::fromJsonObject(QJsonObject json) {

    m_anonymous_perf_results_isValid = ::OpenAPI::fromJsonValue(m_anonymous_perf_results, json[QString("anonymousPerfResults")]);
    m_anonymous_perf_results_isSet = !json[QString("anonymousPerfResults")].isNull() && m_anonymous_perf_results_isValid;

    m_anonymous_usage_stats_isValid = ::OpenAPI::fromJsonValue(m_anonymous_usage_stats, json[QString("anonymousUsageStats")]);
    m_anonymous_usage_stats_isSet = !json[QString("anonymousUsageStats")].isNull() && m_anonymous_usage_stats_isValid;
}

QString OAIPreferenceParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreferenceParams::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_perf_results_isSet) {
        obj.insert(QString("anonymousPerfResults"), ::OpenAPI::toJsonValue(m_anonymous_perf_results));
    }
    if (m_anonymous_usage_stats_isSet) {
        obj.insert(QString("anonymousUsageStats"), ::OpenAPI::toJsonValue(m_anonymous_usage_stats));
    }
    return obj;
}

bool OAIPreferenceParams::isAnonymousPerfResults() const {
    return m_anonymous_perf_results;
}
void OAIPreferenceParams::setAnonymousPerfResults(const bool &anonymous_perf_results) {
    m_anonymous_perf_results = anonymous_perf_results;
    m_anonymous_perf_results_isSet = true;
}

bool OAIPreferenceParams::is_anonymous_perf_results_Set() const{
    return m_anonymous_perf_results_isSet;
}

bool OAIPreferenceParams::is_anonymous_perf_results_Valid() const{
    return m_anonymous_perf_results_isValid;
}

bool OAIPreferenceParams::isAnonymousUsageStats() const {
    return m_anonymous_usage_stats;
}
void OAIPreferenceParams::setAnonymousUsageStats(const bool &anonymous_usage_stats) {
    m_anonymous_usage_stats = anonymous_usage_stats;
    m_anonymous_usage_stats_isSet = true;
}

bool OAIPreferenceParams::is_anonymous_usage_stats_Set() const{
    return m_anonymous_usage_stats_isSet;
}

bool OAIPreferenceParams::is_anonymous_usage_stats_Valid() const{
    return m_anonymous_usage_stats_isValid;
}

bool OAIPreferenceParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_perf_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_usage_stats_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreferenceParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
