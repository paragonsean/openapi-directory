/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerTopOKBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerTopOKBody::OAIContainerTopOKBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerTopOKBody::OAIContainerTopOKBody() {
    this->initializeModel();
}

OAIContainerTopOKBody::~OAIContainerTopOKBody() {}

void OAIContainerTopOKBody::initializeModel() {

    m_processes_isSet = false;
    m_processes_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;
}

void OAIContainerTopOKBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerTopOKBody::fromJsonObject(QJsonObject json) {

    if(json["Processes"].isArray()){
        auto arr = json["Processes"].toArray();
        m_processes_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_processes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_processes_isSet = !jval.isNull() && m_processes_isValid;
                m_processes.push_back(item);
            }
        }
    }

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("Titles")]);
    m_titles_isSet = !json[QString("Titles")].isNull() && m_titles_isValid;
}

QString OAIContainerTopOKBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerTopOKBody::asJsonObject() const {
    QJsonObject obj;
    if (m_processes.size() > 0) {
        
        obj.insert(QString("Processes"), toJsonValue(m_processes));
    }
    if (m_titles.size() > 0) {
        obj.insert(QString("Titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    return obj;
}

QList<QList<QString>> OAIContainerTopOKBody::getProcesses() const {
    return m_processes;
}
void OAIContainerTopOKBody::setProcesses(const QList<QList<QString>> &processes) {
    m_processes = processes;
    m_processes_isSet = true;
}

bool OAIContainerTopOKBody::is_processes_Set() const{
    return m_processes_isSet;
}

bool OAIContainerTopOKBody::is_processes_Valid() const{
    return m_processes_isValid;
}

QList<QString> OAIContainerTopOKBody::getTitles() const {
    return m_titles;
}
void OAIContainerTopOKBody::setTitles(const QList<QString> &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAIContainerTopOKBody::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAIContainerTopOKBody::is_titles_Valid() const{
    return m_titles_isValid;
}

bool OAIContainerTopOKBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_processes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerTopOKBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_processes_isValid && m_titles_isValid && true;
}

} // namespace OpenAPI
