/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanel::OAIPanel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanel::OAIPanel() {
    this->initializeModel();
}

OAIPanel::~OAIPanel() {}

void OAIPanel::initializeModel() {

    m_alert_isSet = false;
    m_alert_isValid = false;

    m_alias_colors_isSet = false;
    m_alias_colors_isValid = false;

    m_bars_isSet = false;
    m_bars_isValid = false;

    m_cards_isSet = false;
    m_cards_isValid = false;

    m_collapsed_isSet = false;
    m_collapsed_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_color_background_isSet = false;
    m_color_background_isValid = false;

    m_color_value_isSet = false;
    m_color_value_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_dash_length_isSet = false;
    m_dash_length_isValid = false;

    m_dashboard_tags_isSet = false;
    m_dashboard_tags_isValid = false;

    m_dashes_isSet = false;
    m_dashes_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_datasource_isSet = false;
    m_datasource_isValid = false;

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_editable_isSet = false;
    m_editable_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_field_config_isSet = false;
    m_field_config_isValid = false;

    m_fill_isSet = false;
    m_fill_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_gauge_isSet = false;
    m_gauge_isValid = false;

    m_grid_pos_isSet = false;
    m_grid_pos_isValid = false;

    m_headings_isSet = false;
    m_headings_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hide_time_override_isSet = false;
    m_hide_time_override_isValid = false;

    m_hide_zero_buckets_isSet = false;
    m_hide_zero_buckets_isValid = false;

    m_highlight_cards_isSet = false;
    m_highlight_cards_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_new_isSet = false;
    m_is_new_isValid = false;

    m_left_y_axis_label_isSet = false;
    m_left_y_axis_label_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_linewidth_isSet = false;
    m_linewidth_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mapping_type_isSet = false;
    m_mapping_type_isValid = false;

    m_mapping_types_isSet = false;
    m_mapping_types_isValid = false;

    m_max_data_points_isSet = false;
    m_max_data_points_isValid = false;

    m_min_span_isSet = false;
    m_min_span_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_filter_isSet = false;
    m_name_filter_isValid = false;

    m_null_point_mode_isSet = false;
    m_null_point_mode_isValid = false;

    m_only_alerts_on_dashboard_isSet = false;
    m_only_alerts_on_dashboard_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_panels_isSet = false;
    m_panels_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_pointradius_isSet = false;
    m_pointradius_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_postfix_isSet = false;
    m_postfix_isValid = false;

    m_postfix_font_size_isSet = false;
    m_postfix_font_size_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_prefix_font_size_isSet = false;
    m_prefix_font_size_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_range_maps_isSet = false;
    m_range_maps_isValid = false;

    m_recent_isSet = false;
    m_recent_isValid = false;

    m_renderer_isSet = false;
    m_renderer_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_repeat_panel_id_isSet = false;
    m_repeat_panel_id_isValid = false;

    m_reverse_y_buckets_isSet = false;
    m_reverse_y_buckets_isValid = false;

    m_right_y_axis_label_isSet = false;
    m_right_y_axis_label_isValid = false;

    m_scoped_vars_isSet = false;
    m_scoped_vars_isValid = false;

    m_scroll_isSet = false;
    m_scroll_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_series_overrides_isSet = false;
    m_series_overrides_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_show_header_isSet = false;
    m_show_header_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_space_length_isSet = false;
    m_space_length_isValid = false;

    m_span_isSet = false;
    m_span_isValid = false;

    m_sparkline_isSet = false;
    m_sparkline_isValid = false;

    m_stack_isSet = false;
    m_stack_isValid = false;

    m_starred_isSet = false;
    m_starred_isValid = false;

    m_state_filter_isSet = false;
    m_state_filter_isValid = false;

    m_stepped_line_isSet = false;
    m_stepped_line_isValid = false;

    m_styles_isSet = false;
    m_styles_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_thresholds_isSet = false;
    m_thresholds_isValid = false;

    m_time_from_isSet = false;
    m_time_from_isValid = false;

    m_time_shift_isSet = false;
    m_time_shift_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_tooltip_decimals_isSet = false;
    m_tooltip_decimals_isValid = false;

    m_transform_isSet = false;
    m_transform_isValid = false;

    m_transparent_isSet = false;
    m_transparent_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_font_size_isSet = false;
    m_value_font_size_isValid = false;

    m_value_maps_isSet = false;
    m_value_maps_isValid = false;

    m_value_name_isSet = false;
    m_value_name_isValid = false;

    m_x_axis_isSet = false;
    m_x_axis_isValid = false;

    m_x_axis_isSet = false;
    m_x_axis_isValid = false;

    m_x_bucket_number_isSet = false;
    m_x_bucket_number_isValid = false;

    m_x_bucket_size_isSet = false;
    m_x_bucket_size_isValid = false;

    m_xaxis_isSet = false;
    m_xaxis_isValid = false;

    m_y_axis_isSet = false;
    m_y_axis_isValid = false;

    m_y_axis_isSet = false;
    m_y_axis_isValid = false;

    m_y_bucket_bound_isSet = false;
    m_y_bucket_bound_isValid = false;

    m_y_bucket_number_isSet = false;
    m_y_bucket_number_isValid = false;

    m_y_bucket_size_isSet = false;
    m_y_bucket_size_isValid = false;

    m_y_formats_isSet = false;
    m_y_formats_isValid = false;

    m_yaxes_isSet = false;
    m_yaxes_isValid = false;
}

void OAIPanel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanel::fromJsonObject(QJsonObject json) {

    m_alert_isValid = ::OpenAPI::fromJsonValue(m_alert, json[QString("alert")]);
    m_alert_isSet = !json[QString("alert")].isNull() && m_alert_isValid;

    m_alias_colors_isValid = ::OpenAPI::fromJsonValue(m_alias_colors, json[QString("aliasColors")]);
    m_alias_colors_isSet = !json[QString("aliasColors")].isNull() && m_alias_colors_isValid;

    m_bars_isValid = ::OpenAPI::fromJsonValue(m_bars, json[QString("bars")]);
    m_bars_isSet = !json[QString("bars")].isNull() && m_bars_isValid;

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;

    m_collapsed_isValid = ::OpenAPI::fromJsonValue(m_collapsed, json[QString("collapsed")]);
    m_collapsed_isSet = !json[QString("collapsed")].isNull() && m_collapsed_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_color_background_isValid = ::OpenAPI::fromJsonValue(m_color_background, json[QString("colorBackground")]);
    m_color_background_isSet = !json[QString("colorBackground")].isNull() && m_color_background_isValid;

    m_color_value_isValid = ::OpenAPI::fromJsonValue(m_color_value, json[QString("colorValue")]);
    m_color_value_isSet = !json[QString("colorValue")].isNull() && m_color_value_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_dash_length_isValid = ::OpenAPI::fromJsonValue(m_dash_length, json[QString("dashLength")]);
    m_dash_length_isSet = !json[QString("dashLength")].isNull() && m_dash_length_isValid;

    m_dashboard_tags_isValid = ::OpenAPI::fromJsonValue(m_dashboard_tags, json[QString("dashboardTags")]);
    m_dashboard_tags_isSet = !json[QString("dashboardTags")].isNull() && m_dashboard_tags_isValid;

    m_dashes_isValid = ::OpenAPI::fromJsonValue(m_dashes, json[QString("dashes")]);
    m_dashes_isSet = !json[QString("dashes")].isNull() && m_dashes_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_datasource_isValid = ::OpenAPI::fromJsonValue(m_datasource, json[QString("datasource")]);
    m_datasource_isSet = !json[QString("datasource")].isNull() && m_datasource_isValid;

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_editable_isValid = ::OpenAPI::fromJsonValue(m_editable, json[QString("editable")]);
    m_editable_isSet = !json[QString("editable")].isNull() && m_editable_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_field_config_isValid = ::OpenAPI::fromJsonValue(m_field_config, json[QString("fieldConfig")]);
    m_field_config_isSet = !json[QString("fieldConfig")].isNull() && m_field_config_isValid;

    m_fill_isValid = ::OpenAPI::fromJsonValue(m_fill, json[QString("fill")]);
    m_fill_isSet = !json[QString("fill")].isNull() && m_fill_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folderId")]);
    m_folder_id_isSet = !json[QString("folderId")].isNull() && m_folder_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_gauge_isValid = ::OpenAPI::fromJsonValue(m_gauge, json[QString("gauge")]);
    m_gauge_isSet = !json[QString("gauge")].isNull() && m_gauge_isValid;

    m_grid_pos_isValid = ::OpenAPI::fromJsonValue(m_grid_pos, json[QString("gridPos")]);
    m_grid_pos_isSet = !json[QString("gridPos")].isNull() && m_grid_pos_isValid;

    m_headings_isValid = ::OpenAPI::fromJsonValue(m_headings, json[QString("headings")]);
    m_headings_isSet = !json[QString("headings")].isNull() && m_headings_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hide_time_override_isValid = ::OpenAPI::fromJsonValue(m_hide_time_override, json[QString("hideTimeOverride")]);
    m_hide_time_override_isSet = !json[QString("hideTimeOverride")].isNull() && m_hide_time_override_isValid;

    m_hide_zero_buckets_isValid = ::OpenAPI::fromJsonValue(m_hide_zero_buckets, json[QString("hideZeroBuckets")]);
    m_hide_zero_buckets_isSet = !json[QString("hideZeroBuckets")].isNull() && m_hide_zero_buckets_isValid;

    m_highlight_cards_isValid = ::OpenAPI::fromJsonValue(m_highlight_cards, json[QString("highlightCards")]);
    m_highlight_cards_isSet = !json[QString("highlightCards")].isNull() && m_highlight_cards_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_new_isValid = ::OpenAPI::fromJsonValue(m_is_new, json[QString("isNew")]);
    m_is_new_isSet = !json[QString("isNew")].isNull() && m_is_new_isValid;

    m_left_y_axis_label_isValid = ::OpenAPI::fromJsonValue(m_left_y_axis_label, json[QString("leftYAxisLabel")]);
    m_left_y_axis_label_isSet = !json[QString("leftYAxisLabel")].isNull() && m_left_y_axis_label_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("legend")]);
    m_legend_isSet = !json[QString("legend")].isNull() && m_legend_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_linewidth_isValid = ::OpenAPI::fromJsonValue(m_linewidth, json[QString("linewidth")]);
    m_linewidth_isSet = !json[QString("linewidth")].isNull() && m_linewidth_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mapping_type_isValid = ::OpenAPI::fromJsonValue(m_mapping_type, json[QString("mappingType")]);
    m_mapping_type_isSet = !json[QString("mappingType")].isNull() && m_mapping_type_isValid;

    m_mapping_types_isValid = ::OpenAPI::fromJsonValue(m_mapping_types, json[QString("mappingTypes")]);
    m_mapping_types_isSet = !json[QString("mappingTypes")].isNull() && m_mapping_types_isValid;

    m_max_data_points_isValid = ::OpenAPI::fromJsonValue(m_max_data_points, json[QString("maxDataPoints")]);
    m_max_data_points_isSet = !json[QString("maxDataPoints")].isNull() && m_max_data_points_isValid;

    m_min_span_isValid = ::OpenAPI::fromJsonValue(m_min_span, json[QString("minSpan")]);
    m_min_span_isSet = !json[QString("minSpan")].isNull() && m_min_span_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_filter_isValid = ::OpenAPI::fromJsonValue(m_name_filter, json[QString("nameFilter")]);
    m_name_filter_isSet = !json[QString("nameFilter")].isNull() && m_name_filter_isValid;

    m_null_point_mode_isValid = ::OpenAPI::fromJsonValue(m_null_point_mode, json[QString("nullPointMode")]);
    m_null_point_mode_isSet = !json[QString("nullPointMode")].isNull() && m_null_point_mode_isValid;

    m_only_alerts_on_dashboard_isValid = ::OpenAPI::fromJsonValue(m_only_alerts_on_dashboard, json[QString("onlyAlertsOnDashboard")]);
    m_only_alerts_on_dashboard_isSet = !json[QString("onlyAlertsOnDashboard")].isNull() && m_only_alerts_on_dashboard_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_panels_isValid = ::OpenAPI::fromJsonValue(m_panels, json[QString("panels")]);
    m_panels_isSet = !json[QString("panels")].isNull() && m_panels_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_pointradius_isValid = ::OpenAPI::fromJsonValue(m_pointradius, json[QString("pointradius")]);
    m_pointradius_isSet = !json[QString("pointradius")].isNull() && m_pointradius_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_postfix_isValid = ::OpenAPI::fromJsonValue(m_postfix, json[QString("postfix")]);
    m_postfix_isSet = !json[QString("postfix")].isNull() && m_postfix_isValid;

    m_postfix_font_size_isValid = ::OpenAPI::fromJsonValue(m_postfix_font_size, json[QString("postfixFontSize")]);
    m_postfix_font_size_isSet = !json[QString("postfixFontSize")].isNull() && m_postfix_font_size_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_prefix_font_size_isValid = ::OpenAPI::fromJsonValue(m_prefix_font_size, json[QString("prefixFontSize")]);
    m_prefix_font_size_isSet = !json[QString("prefixFontSize")].isNull() && m_prefix_font_size_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_range_maps_isValid = ::OpenAPI::fromJsonValue(m_range_maps, json[QString("rangeMaps")]);
    m_range_maps_isSet = !json[QString("rangeMaps")].isNull() && m_range_maps_isValid;

    m_recent_isValid = ::OpenAPI::fromJsonValue(m_recent, json[QString("recent")]);
    m_recent_isSet = !json[QString("recent")].isNull() && m_recent_isValid;

    m_renderer_isValid = ::OpenAPI::fromJsonValue(m_renderer, json[QString("renderer")]);
    m_renderer_isSet = !json[QString("renderer")].isNull() && m_renderer_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_repeat_panel_id_isValid = ::OpenAPI::fromJsonValue(m_repeat_panel_id, json[QString("repeatPanelId")]);
    m_repeat_panel_id_isSet = !json[QString("repeatPanelId")].isNull() && m_repeat_panel_id_isValid;

    m_reverse_y_buckets_isValid = ::OpenAPI::fromJsonValue(m_reverse_y_buckets, json[QString("reverseYBuckets")]);
    m_reverse_y_buckets_isSet = !json[QString("reverseYBuckets")].isNull() && m_reverse_y_buckets_isValid;

    m_right_y_axis_label_isValid = ::OpenAPI::fromJsonValue(m_right_y_axis_label, json[QString("rightYAxisLabel")]);
    m_right_y_axis_label_isSet = !json[QString("rightYAxisLabel")].isNull() && m_right_y_axis_label_isValid;

    m_scoped_vars_isValid = ::OpenAPI::fromJsonValue(m_scoped_vars, json[QString("scopedVars")]);
    m_scoped_vars_isSet = !json[QString("scopedVars")].isNull() && m_scoped_vars_isValid;

    m_scroll_isValid = ::OpenAPI::fromJsonValue(m_scroll, json[QString("scroll")]);
    m_scroll_isSet = !json[QString("scroll")].isNull() && m_scroll_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_series_overrides_isValid = ::OpenAPI::fromJsonValue(m_series_overrides, json[QString("seriesOverrides")]);
    m_series_overrides_isSet = !json[QString("seriesOverrides")].isNull() && m_series_overrides_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_show_header_isValid = ::OpenAPI::fromJsonValue(m_show_header, json[QString("showHeader")]);
    m_show_header_isSet = !json[QString("showHeader")].isNull() && m_show_header_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_space_length_isValid = ::OpenAPI::fromJsonValue(m_space_length, json[QString("spaceLength")]);
    m_space_length_isSet = !json[QString("spaceLength")].isNull() && m_space_length_isValid;

    m_span_isValid = ::OpenAPI::fromJsonValue(m_span, json[QString("span")]);
    m_span_isSet = !json[QString("span")].isNull() && m_span_isValid;

    m_sparkline_isValid = ::OpenAPI::fromJsonValue(m_sparkline, json[QString("sparkline")]);
    m_sparkline_isSet = !json[QString("sparkline")].isNull() && m_sparkline_isValid;

    m_stack_isValid = ::OpenAPI::fromJsonValue(m_stack, json[QString("stack")]);
    m_stack_isSet = !json[QString("stack")].isNull() && m_stack_isValid;

    m_starred_isValid = ::OpenAPI::fromJsonValue(m_starred, json[QString("starred")]);
    m_starred_isSet = !json[QString("starred")].isNull() && m_starred_isValid;

    m_state_filter_isValid = ::OpenAPI::fromJsonValue(m_state_filter, json[QString("stateFilter")]);
    m_state_filter_isSet = !json[QString("stateFilter")].isNull() && m_state_filter_isValid;

    m_stepped_line_isValid = ::OpenAPI::fromJsonValue(m_stepped_line, json[QString("steppedLine")]);
    m_stepped_line_isSet = !json[QString("steppedLine")].isNull() && m_stepped_line_isValid;

    m_styles_isValid = ::OpenAPI::fromJsonValue(m_styles, json[QString("styles")]);
    m_styles_isSet = !json[QString("styles")].isNull() && m_styles_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_thresholds_isValid = ::OpenAPI::fromJsonValue(m_thresholds, json[QString("thresholds")]);
    m_thresholds_isSet = !json[QString("thresholds")].isNull() && m_thresholds_isValid;

    m_time_from_isValid = ::OpenAPI::fromJsonValue(m_time_from, json[QString("timeFrom")]);
    m_time_from_isSet = !json[QString("timeFrom")].isNull() && m_time_from_isValid;

    m_time_shift_isValid = ::OpenAPI::fromJsonValue(m_time_shift, json[QString("timeShift")]);
    m_time_shift_isSet = !json[QString("timeShift")].isNull() && m_time_shift_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("tooltip")]);
    m_tooltip_isSet = !json[QString("tooltip")].isNull() && m_tooltip_isValid;

    m_tooltip_decimals_isValid = ::OpenAPI::fromJsonValue(m_tooltip_decimals, json[QString("tooltipDecimals")]);
    m_tooltip_decimals_isSet = !json[QString("tooltipDecimals")].isNull() && m_tooltip_decimals_isValid;

    m_transform_isValid = ::OpenAPI::fromJsonValue(m_transform, json[QString("transform")]);
    m_transform_isSet = !json[QString("transform")].isNull() && m_transform_isValid;

    m_transparent_isValid = ::OpenAPI::fromJsonValue(m_transparent, json[QString("transparent")]);
    m_transparent_isSet = !json[QString("transparent")].isNull() && m_transparent_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_font_size_isValid = ::OpenAPI::fromJsonValue(m_value_font_size, json[QString("valueFontSize")]);
    m_value_font_size_isSet = !json[QString("valueFontSize")].isNull() && m_value_font_size_isValid;

    m_value_maps_isValid = ::OpenAPI::fromJsonValue(m_value_maps, json[QString("valueMaps")]);
    m_value_maps_isSet = !json[QString("valueMaps")].isNull() && m_value_maps_isValid;

    m_value_name_isValid = ::OpenAPI::fromJsonValue(m_value_name, json[QString("valueName")]);
    m_value_name_isSet = !json[QString("valueName")].isNull() && m_value_name_isValid;

    m_x_axis_isValid = ::OpenAPI::fromJsonValue(m_x_axis, json[QString("x-axis")]);
    m_x_axis_isSet = !json[QString("x-axis")].isNull() && m_x_axis_isValid;

    m_x_axis_isValid = ::OpenAPI::fromJsonValue(m_x_axis, json[QString("xAxis")]);
    m_x_axis_isSet = !json[QString("xAxis")].isNull() && m_x_axis_isValid;

    m_x_bucket_number_isValid = ::OpenAPI::fromJsonValue(m_x_bucket_number, json[QString("xBucketNumber")]);
    m_x_bucket_number_isSet = !json[QString("xBucketNumber")].isNull() && m_x_bucket_number_isValid;

    m_x_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_x_bucket_size, json[QString("xBucketSize")]);
    m_x_bucket_size_isSet = !json[QString("xBucketSize")].isNull() && m_x_bucket_size_isValid;

    m_xaxis_isValid = ::OpenAPI::fromJsonValue(m_xaxis, json[QString("xaxis")]);
    m_xaxis_isSet = !json[QString("xaxis")].isNull() && m_xaxis_isValid;

    m_y_axis_isValid = ::OpenAPI::fromJsonValue(m_y_axis, json[QString("y-axis")]);
    m_y_axis_isSet = !json[QString("y-axis")].isNull() && m_y_axis_isValid;

    m_y_axis_isValid = ::OpenAPI::fromJsonValue(m_y_axis, json[QString("yAxis")]);
    m_y_axis_isSet = !json[QString("yAxis")].isNull() && m_y_axis_isValid;

    m_y_bucket_bound_isValid = ::OpenAPI::fromJsonValue(m_y_bucket_bound, json[QString("yBucketBound")]);
    m_y_bucket_bound_isSet = !json[QString("yBucketBound")].isNull() && m_y_bucket_bound_isValid;

    m_y_bucket_number_isValid = ::OpenAPI::fromJsonValue(m_y_bucket_number, json[QString("yBucketNumber")]);
    m_y_bucket_number_isSet = !json[QString("yBucketNumber")].isNull() && m_y_bucket_number_isValid;

    m_y_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_y_bucket_size, json[QString("yBucketSize")]);
    m_y_bucket_size_isSet = !json[QString("yBucketSize")].isNull() && m_y_bucket_size_isValid;

    m_y_formats_isValid = ::OpenAPI::fromJsonValue(m_y_formats, json[QString("y_formats")]);
    m_y_formats_isSet = !json[QString("y_formats")].isNull() && m_y_formats_isValid;

    m_yaxes_isValid = ::OpenAPI::fromJsonValue(m_yaxes, json[QString("yaxes")]);
    m_yaxes_isSet = !json[QString("yaxes")].isNull() && m_yaxes_isValid;
}

QString OAIPanel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanel::asJsonObject() const {
    QJsonObject obj;
    if (m_alert.isSet()) {
        obj.insert(QString("alert"), ::OpenAPI::toJsonValue(m_alert));
    }
    if (m_alias_colors_isSet) {
        obj.insert(QString("aliasColors"), ::OpenAPI::toJsonValue(m_alias_colors));
    }
    if (m_bars_isSet) {
        obj.insert(QString("bars"), ::OpenAPI::toJsonValue(m_bars));
    }
    if (m_cards.isSet()) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    if (m_collapsed_isSet) {
        obj.insert(QString("collapsed"), ::OpenAPI::toJsonValue(m_collapsed));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_color_background_isSet) {
        obj.insert(QString("colorBackground"), ::OpenAPI::toJsonValue(m_color_background));
    }
    if (m_color_value_isSet) {
        obj.insert(QString("colorValue"), ::OpenAPI::toJsonValue(m_color_value));
    }
    if (m_colors.size() > 0) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_dash_length_isSet) {
        obj.insert(QString("dashLength"), ::OpenAPI::toJsonValue(m_dash_length));
    }
    if (m_dashboard_tags.size() > 0) {
        obj.insert(QString("dashboardTags"), ::OpenAPI::toJsonValue(m_dashboard_tags));
    }
    if (m_dashes_isSet) {
        obj.insert(QString("dashes"), ::OpenAPI::toJsonValue(m_dashes));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_datasource_isSet) {
        obj.insert(QString("datasource"), ::OpenAPI::toJsonValue(m_datasource));
    }
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_editable_isSet) {
        obj.insert(QString("editable"), ::OpenAPI::toJsonValue(m_editable));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_field_config.isSet()) {
        obj.insert(QString("fieldConfig"), ::OpenAPI::toJsonValue(m_field_config));
    }
    if (m_fill_isSet) {
        obj.insert(QString("fill"), ::OpenAPI::toJsonValue(m_fill));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("folderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_gauge.isSet()) {
        obj.insert(QString("gauge"), ::OpenAPI::toJsonValue(m_gauge));
    }
    if (m_grid_pos.isSet()) {
        obj.insert(QString("gridPos"), ::OpenAPI::toJsonValue(m_grid_pos));
    }
    if (m_headings_isSet) {
        obj.insert(QString("headings"), ::OpenAPI::toJsonValue(m_headings));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hide_time_override_isSet) {
        obj.insert(QString("hideTimeOverride"), ::OpenAPI::toJsonValue(m_hide_time_override));
    }
    if (m_hide_zero_buckets_isSet) {
        obj.insert(QString("hideZeroBuckets"), ::OpenAPI::toJsonValue(m_hide_zero_buckets));
    }
    if (m_highlight_cards_isSet) {
        obj.insert(QString("highlightCards"), ::OpenAPI::toJsonValue(m_highlight_cards));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_new_isSet) {
        obj.insert(QString("isNew"), ::OpenAPI::toJsonValue(m_is_new));
    }
    if (m_left_y_axis_label_isSet) {
        obj.insert(QString("leftYAxisLabel"), ::OpenAPI::toJsonValue(m_left_y_axis_label));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_lines_isSet) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_linewidth_isSet) {
        obj.insert(QString("linewidth"), ::OpenAPI::toJsonValue(m_linewidth));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mapping_type_isSet) {
        obj.insert(QString("mappingType"), ::OpenAPI::toJsonValue(m_mapping_type));
    }
    if (m_mapping_types.size() > 0) {
        obj.insert(QString("mappingTypes"), ::OpenAPI::toJsonValue(m_mapping_types));
    }
    if (m_max_data_points.isSet()) {
        obj.insert(QString("maxDataPoints"), ::OpenAPI::toJsonValue(m_max_data_points));
    }
    if (m_min_span_isSet) {
        obj.insert(QString("minSpan"), ::OpenAPI::toJsonValue(m_min_span));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_filter_isSet) {
        obj.insert(QString("nameFilter"), ::OpenAPI::toJsonValue(m_name_filter));
    }
    if (m_null_point_mode_isSet) {
        obj.insert(QString("nullPointMode"), ::OpenAPI::toJsonValue(m_null_point_mode));
    }
    if (m_only_alerts_on_dashboard_isSet) {
        obj.insert(QString("onlyAlertsOnDashboard"), ::OpenAPI::toJsonValue(m_only_alerts_on_dashboard));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_panels.size() > 0) {
        obj.insert(QString("panels"), ::OpenAPI::toJsonValue(m_panels));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_pointradius_isSet) {
        obj.insert(QString("pointradius"), ::OpenAPI::toJsonValue(m_pointradius));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_postfix_isSet) {
        obj.insert(QString("postfix"), ::OpenAPI::toJsonValue(m_postfix));
    }
    if (m_postfix_font_size_isSet) {
        obj.insert(QString("postfixFontSize"), ::OpenAPI::toJsonValue(m_postfix_font_size));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_prefix_font_size_isSet) {
        obj.insert(QString("prefixFontSize"), ::OpenAPI::toJsonValue(m_prefix_font_size));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_range_maps.size() > 0) {
        obj.insert(QString("rangeMaps"), ::OpenAPI::toJsonValue(m_range_maps));
    }
    if (m_recent_isSet) {
        obj.insert(QString("recent"), ::OpenAPI::toJsonValue(m_recent));
    }
    if (m_renderer_isSet) {
        obj.insert(QString("renderer"), ::OpenAPI::toJsonValue(m_renderer));
    }
    if (m_repeat_isSet) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_repeat_panel_id_isSet) {
        obj.insert(QString("repeatPanelId"), ::OpenAPI::toJsonValue(m_repeat_panel_id));
    }
    if (m_reverse_y_buckets_isSet) {
        obj.insert(QString("reverseYBuckets"), ::OpenAPI::toJsonValue(m_reverse_y_buckets));
    }
    if (m_right_y_axis_label_isSet) {
        obj.insert(QString("rightYAxisLabel"), ::OpenAPI::toJsonValue(m_right_y_axis_label));
    }
    if (m_scoped_vars.size() > 0) {
        obj.insert(QString("scopedVars"), ::OpenAPI::toJsonValue(m_scoped_vars));
    }
    if (m_scroll_isSet) {
        obj.insert(QString("scroll"), ::OpenAPI::toJsonValue(m_scroll));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_series_overrides.size() > 0) {
        obj.insert(QString("seriesOverrides"), ::OpenAPI::toJsonValue(m_series_overrides));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_show_header_isSet) {
        obj.insert(QString("showHeader"), ::OpenAPI::toJsonValue(m_show_header));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_space_length_isSet) {
        obj.insert(QString("spaceLength"), ::OpenAPI::toJsonValue(m_space_length));
    }
    if (m_span_isSet) {
        obj.insert(QString("span"), ::OpenAPI::toJsonValue(m_span));
    }
    if (m_sparkline.isSet()) {
        obj.insert(QString("sparkline"), ::OpenAPI::toJsonValue(m_sparkline));
    }
    if (m_stack_isSet) {
        obj.insert(QString("stack"), ::OpenAPI::toJsonValue(m_stack));
    }
    if (m_starred_isSet) {
        obj.insert(QString("starred"), ::OpenAPI::toJsonValue(m_starred));
    }
    if (m_state_filter.size() > 0) {
        obj.insert(QString("stateFilter"), ::OpenAPI::toJsonValue(m_state_filter));
    }
    if (m_stepped_line_isSet) {
        obj.insert(QString("steppedLine"), ::OpenAPI::toJsonValue(m_stepped_line));
    }
    if (m_styles.size() > 0) {
        obj.insert(QString("styles"), ::OpenAPI::toJsonValue(m_styles));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_thresholds.size() > 0) {
        obj.insert(QString("thresholds"), ::OpenAPI::toJsonValue(m_thresholds));
    }
    if (m_time_from_isSet) {
        obj.insert(QString("timeFrom"), ::OpenAPI::toJsonValue(m_time_from));
    }
    if (m_time_shift_isSet) {
        obj.insert(QString("timeShift"), ::OpenAPI::toJsonValue(m_time_shift));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_tooltip_decimals_isSet) {
        obj.insert(QString("tooltipDecimals"), ::OpenAPI::toJsonValue(m_tooltip_decimals));
    }
    if (m_transform_isSet) {
        obj.insert(QString("transform"), ::OpenAPI::toJsonValue(m_transform));
    }
    if (m_transparent_isSet) {
        obj.insert(QString("transparent"), ::OpenAPI::toJsonValue(m_transparent));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_font_size_isSet) {
        obj.insert(QString("valueFontSize"), ::OpenAPI::toJsonValue(m_value_font_size));
    }
    if (m_value_maps.size() > 0) {
        obj.insert(QString("valueMaps"), ::OpenAPI::toJsonValue(m_value_maps));
    }
    if (m_value_name_isSet) {
        obj.insert(QString("valueName"), ::OpenAPI::toJsonValue(m_value_name));
    }
    if (m_x_axis_isSet) {
        obj.insert(QString("x-axis"), ::OpenAPI::toJsonValue(m_x_axis));
    }
    if (m_x_axis.isSet()) {
        obj.insert(QString("xAxis"), ::OpenAPI::toJsonValue(m_x_axis));
    }
    if (m_x_bucket_number_isSet) {
        obj.insert(QString("xBucketNumber"), ::OpenAPI::toJsonValue(m_x_bucket_number));
    }
    if (m_x_bucket_size_isSet) {
        obj.insert(QString("xBucketSize"), ::OpenAPI::toJsonValue(m_x_bucket_size));
    }
    if (m_xaxis.isSet()) {
        obj.insert(QString("xaxis"), ::OpenAPI::toJsonValue(m_xaxis));
    }
    if (m_y_axis_isSet) {
        obj.insert(QString("y-axis"), ::OpenAPI::toJsonValue(m_y_axis));
    }
    if (m_y_axis.isSet()) {
        obj.insert(QString("yAxis"), ::OpenAPI::toJsonValue(m_y_axis));
    }
    if (m_y_bucket_bound_isSet) {
        obj.insert(QString("yBucketBound"), ::OpenAPI::toJsonValue(m_y_bucket_bound));
    }
    if (m_y_bucket_number_isSet) {
        obj.insert(QString("yBucketNumber"), ::OpenAPI::toJsonValue(m_y_bucket_number));
    }
    if (m_y_bucket_size_isSet) {
        obj.insert(QString("yBucketSize"), ::OpenAPI::toJsonValue(m_y_bucket_size));
    }
    if (m_y_formats.size() > 0) {
        obj.insert(QString("y_formats"), ::OpenAPI::toJsonValue(m_y_formats));
    }
    if (m_yaxes.size() > 0) {
        obj.insert(QString("yaxes"), ::OpenAPI::toJsonValue(m_yaxes));
    }
    return obj;
}

OAIAlert OAIPanel::getAlert() const {
    return m_alert;
}
void OAIPanel::setAlert(const OAIAlert &alert) {
    m_alert = alert;
    m_alert_isSet = true;
}

bool OAIPanel::is_alert_Set() const{
    return m_alert_isSet;
}

bool OAIPanel::is_alert_Valid() const{
    return m_alert_isValid;
}

OAIObject OAIPanel::getAliasColors() const {
    return m_alias_colors;
}
void OAIPanel::setAliasColors(const OAIObject &alias_colors) {
    m_alias_colors = alias_colors;
    m_alias_colors_isSet = true;
}

bool OAIPanel::is_alias_colors_Set() const{
    return m_alias_colors_isSet;
}

bool OAIPanel::is_alias_colors_Valid() const{
    return m_alias_colors_isValid;
}

bool OAIPanel::isBars() const {
    return m_bars;
}
void OAIPanel::setBars(const bool &bars) {
    m_bars = bars;
    m_bars_isSet = true;
}

bool OAIPanel::is_bars_Set() const{
    return m_bars_isSet;
}

bool OAIPanel::is_bars_Valid() const{
    return m_bars_isValid;
}

OAIPanel_cards OAIPanel::getCards() const {
    return m_cards;
}
void OAIPanel::setCards(const OAIPanel_cards &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAIPanel::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAIPanel::is_cards_Valid() const{
    return m_cards_isValid;
}

bool OAIPanel::isCollapsed() const {
    return m_collapsed;
}
void OAIPanel::setCollapsed(const bool &collapsed) {
    m_collapsed = collapsed;
    m_collapsed_isSet = true;
}

bool OAIPanel::is_collapsed_Set() const{
    return m_collapsed_isSet;
}

bool OAIPanel::is_collapsed_Valid() const{
    return m_collapsed_isValid;
}

OAIPanel_color OAIPanel::getColor() const {
    return m_color;
}
void OAIPanel::setColor(const OAIPanel_color &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPanel::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPanel::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIPanel::isColorBackground() const {
    return m_color_background;
}
void OAIPanel::setColorBackground(const bool &color_background) {
    m_color_background = color_background;
    m_color_background_isSet = true;
}

bool OAIPanel::is_color_background_Set() const{
    return m_color_background_isSet;
}

bool OAIPanel::is_color_background_Valid() const{
    return m_color_background_isValid;
}

bool OAIPanel::isColorValue() const {
    return m_color_value;
}
void OAIPanel::setColorValue(const bool &color_value) {
    m_color_value = color_value;
    m_color_value_isSet = true;
}

bool OAIPanel::is_color_value_Set() const{
    return m_color_value_isSet;
}

bool OAIPanel::is_color_value_Valid() const{
    return m_color_value_isValid;
}

QList<QString> OAIPanel::getColors() const {
    return m_colors;
}
void OAIPanel::setColors(const QList<QString> &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIPanel::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIPanel::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<OAIColumn> OAIPanel::getColumns() const {
    return m_columns;
}
void OAIPanel::setColumns(const QList<OAIColumn> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIPanel::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIPanel::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIPanel::getContent() const {
    return m_content;
}
void OAIPanel::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPanel::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPanel::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAIPanel::getDashLength() const {
    return m_dash_length;
}
void OAIPanel::setDashLength(const qint32 &dash_length) {
    m_dash_length = dash_length;
    m_dash_length_isSet = true;
}

bool OAIPanel::is_dash_length_Set() const{
    return m_dash_length_isSet;
}

bool OAIPanel::is_dash_length_Valid() const{
    return m_dash_length_isValid;
}

QList<QString> OAIPanel::getDashboardTags() const {
    return m_dashboard_tags;
}
void OAIPanel::setDashboardTags(const QList<QString> &dashboard_tags) {
    m_dashboard_tags = dashboard_tags;
    m_dashboard_tags_isSet = true;
}

bool OAIPanel::is_dashboard_tags_Set() const{
    return m_dashboard_tags_isSet;
}

bool OAIPanel::is_dashboard_tags_Valid() const{
    return m_dashboard_tags_isValid;
}

bool OAIPanel::isDashes() const {
    return m_dashes;
}
void OAIPanel::setDashes(const bool &dashes) {
    m_dashes = dashes;
    m_dashes_isSet = true;
}

bool OAIPanel::is_dashes_Set() const{
    return m_dashes_isSet;
}

bool OAIPanel::is_dashes_Valid() const{
    return m_dashes_isValid;
}

QString OAIPanel::getDataFormat() const {
    return m_data_format;
}
void OAIPanel::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIPanel::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIPanel::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIPanel::getDatasource() const {
    return m_datasource;
}
void OAIPanel::setDatasource(const QString &datasource) {
    m_datasource = datasource;
    m_datasource_isSet = true;
}

bool OAIPanel::is_datasource_Set() const{
    return m_datasource_isSet;
}

bool OAIPanel::is_datasource_Valid() const{
    return m_datasource_isValid;
}

qint64 OAIPanel::getDecimals() const {
    return m_decimals;
}
void OAIPanel::setDecimals(const qint64 &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIPanel::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIPanel::is_decimals_Valid() const{
    return m_decimals_isValid;
}

QString OAIPanel::getDescription() const {
    return m_description;
}
void OAIPanel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPanel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPanel::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPanel::isEditable() const {
    return m_editable;
}
void OAIPanel::setEditable(const bool &editable) {
    m_editable = editable;
    m_editable_isSet = true;
}

bool OAIPanel::is_editable_Set() const{
    return m_editable_isSet;
}

bool OAIPanel::is_editable_Valid() const{
    return m_editable_isValid;
}

bool OAIPanel::isError() const {
    return m_error;
}
void OAIPanel::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPanel::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPanel::is_error_Valid() const{
    return m_error_isValid;
}

OAIFieldConfig OAIPanel::getFieldConfig() const {
    return m_field_config;
}
void OAIPanel::setFieldConfig(const OAIFieldConfig &field_config) {
    m_field_config = field_config;
    m_field_config_isSet = true;
}

bool OAIPanel::is_field_config_Set() const{
    return m_field_config_isSet;
}

bool OAIPanel::is_field_config_Valid() const{
    return m_field_config_isValid;
}

qint64 OAIPanel::getFill() const {
    return m_fill;
}
void OAIPanel::setFill(const qint64 &fill) {
    m_fill = fill;
    m_fill_isSet = true;
}

bool OAIPanel::is_fill_Set() const{
    return m_fill_isSet;
}

bool OAIPanel::is_fill_Valid() const{
    return m_fill_isValid;
}

qint64 OAIPanel::getFolderId() const {
    return m_folder_id;
}
void OAIPanel::setFolderId(const qint64 &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIPanel::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIPanel::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIPanel::getFormat() const {
    return m_format;
}
void OAIPanel::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPanel::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPanel::is_format_Valid() const{
    return m_format_isValid;
}

OAIGauge OAIPanel::getGauge() const {
    return m_gauge;
}
void OAIPanel::setGauge(const OAIGauge &gauge) {
    m_gauge = gauge;
    m_gauge_isSet = true;
}

bool OAIPanel::is_gauge_Set() const{
    return m_gauge_isSet;
}

bool OAIPanel::is_gauge_Valid() const{
    return m_gauge_isValid;
}

OAIPanel_gridPos OAIPanel::getGridPos() const {
    return m_grid_pos;
}
void OAIPanel::setGridPos(const OAIPanel_gridPos &grid_pos) {
    m_grid_pos = grid_pos;
    m_grid_pos_isSet = true;
}

bool OAIPanel::is_grid_pos_Set() const{
    return m_grid_pos_isSet;
}

bool OAIPanel::is_grid_pos_Valid() const{
    return m_grid_pos_isValid;
}

bool OAIPanel::isHeadings() const {
    return m_headings;
}
void OAIPanel::setHeadings(const bool &headings) {
    m_headings = headings;
    m_headings_isSet = true;
}

bool OAIPanel::is_headings_Set() const{
    return m_headings_isSet;
}

bool OAIPanel::is_headings_Valid() const{
    return m_headings_isValid;
}

OAIObject OAIPanel::getHeight() const {
    return m_height;
}
void OAIPanel::setHeight(const OAIObject &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPanel::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPanel::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIPanel::isHideTimeOverride() const {
    return m_hide_time_override;
}
void OAIPanel::setHideTimeOverride(const bool &hide_time_override) {
    m_hide_time_override = hide_time_override;
    m_hide_time_override_isSet = true;
}

bool OAIPanel::is_hide_time_override_Set() const{
    return m_hide_time_override_isSet;
}

bool OAIPanel::is_hide_time_override_Valid() const{
    return m_hide_time_override_isValid;
}

bool OAIPanel::isHideZeroBuckets() const {
    return m_hide_zero_buckets;
}
void OAIPanel::setHideZeroBuckets(const bool &hide_zero_buckets) {
    m_hide_zero_buckets = hide_zero_buckets;
    m_hide_zero_buckets_isSet = true;
}

bool OAIPanel::is_hide_zero_buckets_Set() const{
    return m_hide_zero_buckets_isSet;
}

bool OAIPanel::is_hide_zero_buckets_Valid() const{
    return m_hide_zero_buckets_isValid;
}

bool OAIPanel::isHighlightCards() const {
    return m_highlight_cards;
}
void OAIPanel::setHighlightCards(const bool &highlight_cards) {
    m_highlight_cards = highlight_cards;
    m_highlight_cards_isSet = true;
}

bool OAIPanel::is_highlight_cards_Set() const{
    return m_highlight_cards_isSet;
}

bool OAIPanel::is_highlight_cards_Valid() const{
    return m_highlight_cards_isValid;
}

qint32 OAIPanel::getId() const {
    return m_id;
}
void OAIPanel::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPanel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPanel::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPanel::isIsNew() const {
    return m_is_new;
}
void OAIPanel::setIsNew(const bool &is_new) {
    m_is_new = is_new;
    m_is_new_isSet = true;
}

bool OAIPanel::is_is_new_Set() const{
    return m_is_new_isSet;
}

bool OAIPanel::is_is_new_Valid() const{
    return m_is_new_isValid;
}

QString OAIPanel::getLeftYAxisLabel() const {
    return m_left_y_axis_label;
}
void OAIPanel::setLeftYAxisLabel(const QString &left_y_axis_label) {
    m_left_y_axis_label = left_y_axis_label;
    m_left_y_axis_label_isSet = true;
}

bool OAIPanel::is_left_y_axis_label_Set() const{
    return m_left_y_axis_label_isSet;
}

bool OAIPanel::is_left_y_axis_label_Valid() const{
    return m_left_y_axis_label_isValid;
}

OAILegend OAIPanel::getLegend() const {
    return m_legend;
}
void OAIPanel::setLegend(const OAILegend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIPanel::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIPanel::is_legend_Valid() const{
    return m_legend_isValid;
}

qint64 OAIPanel::getLimit() const {
    return m_limit;
}
void OAIPanel::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPanel::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPanel::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIPanel::isLines() const {
    return m_lines;
}
void OAIPanel::setLines(const bool &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIPanel::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIPanel::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAIPanel::getLinewidth() const {
    return m_linewidth;
}
void OAIPanel::setLinewidth(const qint32 &linewidth) {
    m_linewidth = linewidth;
    m_linewidth_isSet = true;
}

bool OAIPanel::is_linewidth_Set() const{
    return m_linewidth_isSet;
}

bool OAIPanel::is_linewidth_Valid() const{
    return m_linewidth_isValid;
}

QList<OAILink> OAIPanel::getLinks() const {
    return m_links;
}
void OAIPanel::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPanel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPanel::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIPanel::getMappingType() const {
    return m_mapping_type;
}
void OAIPanel::setMappingType(const qint32 &mapping_type) {
    m_mapping_type = mapping_type;
    m_mapping_type_isSet = true;
}

bool OAIPanel::is_mapping_type_Set() const{
    return m_mapping_type_isSet;
}

bool OAIPanel::is_mapping_type_Valid() const{
    return m_mapping_type_isValid;
}

QList<OAIMapType> OAIPanel::getMappingTypes() const {
    return m_mapping_types;
}
void OAIPanel::setMappingTypes(const QList<OAIMapType> &mapping_types) {
    m_mapping_types = mapping_types;
    m_mapping_types_isSet = true;
}

bool OAIPanel::is_mapping_types_Set() const{
    return m_mapping_types_isSet;
}

bool OAIPanel::is_mapping_types_Valid() const{
    return m_mapping_types_isValid;
}

OAIIntString OAIPanel::getMaxDataPoints() const {
    return m_max_data_points;
}
void OAIPanel::setMaxDataPoints(const OAIIntString &max_data_points) {
    m_max_data_points = max_data_points;
    m_max_data_points_isSet = true;
}

bool OAIPanel::is_max_data_points_Set() const{
    return m_max_data_points_isSet;
}

bool OAIPanel::is_max_data_points_Valid() const{
    return m_max_data_points_isValid;
}

float OAIPanel::getMinSpan() const {
    return m_min_span;
}
void OAIPanel::setMinSpan(const float &min_span) {
    m_min_span = min_span;
    m_min_span_isSet = true;
}

bool OAIPanel::is_min_span_Set() const{
    return m_min_span_isSet;
}

bool OAIPanel::is_min_span_Valid() const{
    return m_min_span_isValid;
}

QString OAIPanel::getMode() const {
    return m_mode;
}
void OAIPanel::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIPanel::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIPanel::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIPanel::getNameFilter() const {
    return m_name_filter;
}
void OAIPanel::setNameFilter(const QString &name_filter) {
    m_name_filter = name_filter;
    m_name_filter_isSet = true;
}

bool OAIPanel::is_name_filter_Set() const{
    return m_name_filter_isSet;
}

bool OAIPanel::is_name_filter_Valid() const{
    return m_name_filter_isValid;
}

QString OAIPanel::getNullPointMode() const {
    return m_null_point_mode;
}
void OAIPanel::setNullPointMode(const QString &null_point_mode) {
    m_null_point_mode = null_point_mode;
    m_null_point_mode_isSet = true;
}

bool OAIPanel::is_null_point_mode_Set() const{
    return m_null_point_mode_isSet;
}

bool OAIPanel::is_null_point_mode_Valid() const{
    return m_null_point_mode_isValid;
}

bool OAIPanel::isOnlyAlertsOnDashboard() const {
    return m_only_alerts_on_dashboard;
}
void OAIPanel::setOnlyAlertsOnDashboard(const bool &only_alerts_on_dashboard) {
    m_only_alerts_on_dashboard = only_alerts_on_dashboard;
    m_only_alerts_on_dashboard_isSet = true;
}

bool OAIPanel::is_only_alerts_on_dashboard_Set() const{
    return m_only_alerts_on_dashboard_isSet;
}

bool OAIPanel::is_only_alerts_on_dashboard_Valid() const{
    return m_only_alerts_on_dashboard_isValid;
}

OAIOptions OAIPanel::getOptions() const {
    return m_options;
}
void OAIPanel::setOptions(const OAIOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPanel::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPanel::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAIPanel::getPageSize() const {
    return m_page_size;
}
void OAIPanel::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPanel::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPanel::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<OAIPanel> OAIPanel::getPanels() const {
    return m_panels;
}
void OAIPanel::setPanels(const QList<OAIPanel> &panels) {
    m_panels = panels;
    m_panels_isSet = true;
}

bool OAIPanel::is_panels_Set() const{
    return m_panels_isSet;
}

bool OAIPanel::is_panels_Valid() const{
    return m_panels_isValid;
}

bool OAIPanel::isPercentage() const {
    return m_percentage;
}
void OAIPanel::setPercentage(const bool &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIPanel::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIPanel::is_percentage_Valid() const{
    return m_percentage_isValid;
}

float OAIPanel::getPointradius() const {
    return m_pointradius;
}
void OAIPanel::setPointradius(const float &pointradius) {
    m_pointradius = pointradius;
    m_pointradius_isSet = true;
}

bool OAIPanel::is_pointradius_Set() const{
    return m_pointradius_isSet;
}

bool OAIPanel::is_pointradius_Valid() const{
    return m_pointradius_isValid;
}

bool OAIPanel::isPoints() const {
    return m_points;
}
void OAIPanel::setPoints(const bool &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIPanel::is_points_Set() const{
    return m_points_isSet;
}

bool OAIPanel::is_points_Valid() const{
    return m_points_isValid;
}

QString OAIPanel::getPostfix() const {
    return m_postfix;
}
void OAIPanel::setPostfix(const QString &postfix) {
    m_postfix = postfix;
    m_postfix_isSet = true;
}

bool OAIPanel::is_postfix_Set() const{
    return m_postfix_isSet;
}

bool OAIPanel::is_postfix_Valid() const{
    return m_postfix_isValid;
}

QString OAIPanel::getPostfixFontSize() const {
    return m_postfix_font_size;
}
void OAIPanel::setPostfixFontSize(const QString &postfix_font_size) {
    m_postfix_font_size = postfix_font_size;
    m_postfix_font_size_isSet = true;
}

bool OAIPanel::is_postfix_font_size_Set() const{
    return m_postfix_font_size_isSet;
}

bool OAIPanel::is_postfix_font_size_Valid() const{
    return m_postfix_font_size_isValid;
}

QString OAIPanel::getPrefix() const {
    return m_prefix;
}
void OAIPanel::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIPanel::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIPanel::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIPanel::getPrefixFontSize() const {
    return m_prefix_font_size;
}
void OAIPanel::setPrefixFontSize(const QString &prefix_font_size) {
    m_prefix_font_size = prefix_font_size;
    m_prefix_font_size_isSet = true;
}

bool OAIPanel::is_prefix_font_size_Set() const{
    return m_prefix_font_size_isSet;
}

bool OAIPanel::is_prefix_font_size_Valid() const{
    return m_prefix_font_size_isValid;
}

QString OAIPanel::getQuery() const {
    return m_query;
}
void OAIPanel::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIPanel::is_query_Set() const{
    return m_query_isSet;
}

bool OAIPanel::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIRangeMap> OAIPanel::getRangeMaps() const {
    return m_range_maps;
}
void OAIPanel::setRangeMaps(const QList<OAIRangeMap> &range_maps) {
    m_range_maps = range_maps;
    m_range_maps_isSet = true;
}

bool OAIPanel::is_range_maps_Set() const{
    return m_range_maps_isSet;
}

bool OAIPanel::is_range_maps_Valid() const{
    return m_range_maps_isValid;
}

bool OAIPanel::isRecent() const {
    return m_recent;
}
void OAIPanel::setRecent(const bool &recent) {
    m_recent = recent;
    m_recent_isSet = true;
}

bool OAIPanel::is_recent_Set() const{
    return m_recent_isSet;
}

bool OAIPanel::is_recent_Valid() const{
    return m_recent_isValid;
}

QString OAIPanel::getRenderer() const {
    return m_renderer;
}
void OAIPanel::setRenderer(const QString &renderer) {
    m_renderer = renderer;
    m_renderer_isSet = true;
}

bool OAIPanel::is_renderer_Set() const{
    return m_renderer_isSet;
}

bool OAIPanel::is_renderer_Valid() const{
    return m_renderer_isValid;
}

QString OAIPanel::getRepeat() const {
    return m_repeat;
}
void OAIPanel::setRepeat(const QString &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIPanel::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIPanel::is_repeat_Valid() const{
    return m_repeat_isValid;
}

qint32 OAIPanel::getRepeatPanelId() const {
    return m_repeat_panel_id;
}
void OAIPanel::setRepeatPanelId(const qint32 &repeat_panel_id) {
    m_repeat_panel_id = repeat_panel_id;
    m_repeat_panel_id_isSet = true;
}

bool OAIPanel::is_repeat_panel_id_Set() const{
    return m_repeat_panel_id_isSet;
}

bool OAIPanel::is_repeat_panel_id_Valid() const{
    return m_repeat_panel_id_isValid;
}

bool OAIPanel::isReverseYBuckets() const {
    return m_reverse_y_buckets;
}
void OAIPanel::setReverseYBuckets(const bool &reverse_y_buckets) {
    m_reverse_y_buckets = reverse_y_buckets;
    m_reverse_y_buckets_isSet = true;
}

bool OAIPanel::is_reverse_y_buckets_Set() const{
    return m_reverse_y_buckets_isSet;
}

bool OAIPanel::is_reverse_y_buckets_Valid() const{
    return m_reverse_y_buckets_isValid;
}

QString OAIPanel::getRightYAxisLabel() const {
    return m_right_y_axis_label;
}
void OAIPanel::setRightYAxisLabel(const QString &right_y_axis_label) {
    m_right_y_axis_label = right_y_axis_label;
    m_right_y_axis_label_isSet = true;
}

bool OAIPanel::is_right_y_axis_label_Set() const{
    return m_right_y_axis_label_isSet;
}

bool OAIPanel::is_right_y_axis_label_Valid() const{
    return m_right_y_axis_label_isValid;
}

QMap<QString, OAIPanel_scopedVars_value> OAIPanel::getScopedVars() const {
    return m_scoped_vars;
}
void OAIPanel::setScopedVars(const QMap<QString, OAIPanel_scopedVars_value> &scoped_vars) {
    m_scoped_vars = scoped_vars;
    m_scoped_vars_isSet = true;
}

bool OAIPanel::is_scoped_vars_Set() const{
    return m_scoped_vars_isSet;
}

bool OAIPanel::is_scoped_vars_Valid() const{
    return m_scoped_vars_isValid;
}

bool OAIPanel::isScroll() const {
    return m_scroll;
}
void OAIPanel::setScroll(const bool &scroll) {
    m_scroll = scroll;
    m_scroll_isSet = true;
}

bool OAIPanel::is_scroll_Set() const{
    return m_scroll_isSet;
}

bool OAIPanel::is_scroll_Valid() const{
    return m_scroll_isValid;
}

bool OAIPanel::isSearch() const {
    return m_search;
}
void OAIPanel::setSearch(const bool &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIPanel::is_search_Set() const{
    return m_search_isSet;
}

bool OAIPanel::is_search_Valid() const{
    return m_search_isValid;
}

QList<OAISeriesOverride> OAIPanel::getSeriesOverrides() const {
    return m_series_overrides;
}
void OAIPanel::setSeriesOverrides(const QList<OAISeriesOverride> &series_overrides) {
    m_series_overrides = series_overrides;
    m_series_overrides_isSet = true;
}

bool OAIPanel::is_series_overrides_Set() const{
    return m_series_overrides_isSet;
}

bool OAIPanel::is_series_overrides_Valid() const{
    return m_series_overrides_isValid;
}

QString OAIPanel::getShow() const {
    return m_show;
}
void OAIPanel::setShow(const QString &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAIPanel::is_show_Set() const{
    return m_show_isSet;
}

bool OAIPanel::is_show_Valid() const{
    return m_show_isValid;
}

bool OAIPanel::isShowHeader() const {
    return m_show_header;
}
void OAIPanel::setShowHeader(const bool &show_header) {
    m_show_header = show_header;
    m_show_header_isSet = true;
}

bool OAIPanel::is_show_header_Set() const{
    return m_show_header_isSet;
}

bool OAIPanel::is_show_header_Valid() const{
    return m_show_header_isValid;
}

OAISort OAIPanel::getSort() const {
    return m_sort;
}
void OAIPanel::setSort(const OAISort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIPanel::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIPanel::is_sort_Valid() const{
    return m_sort_isValid;
}

qint64 OAIPanel::getSortOrder() const {
    return m_sort_order;
}
void OAIPanel::setSortOrder(const qint64 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIPanel::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIPanel::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

qint32 OAIPanel::getSpaceLength() const {
    return m_space_length;
}
void OAIPanel::setSpaceLength(const qint32 &space_length) {
    m_space_length = space_length;
    m_space_length_isSet = true;
}

bool OAIPanel::is_space_length_Set() const{
    return m_space_length_isSet;
}

bool OAIPanel::is_space_length_Valid() const{
    return m_space_length_isValid;
}

float OAIPanel::getSpan() const {
    return m_span;
}
void OAIPanel::setSpan(const float &span) {
    m_span = span;
    m_span_isSet = true;
}

bool OAIPanel::is_span_Set() const{
    return m_span_isSet;
}

bool OAIPanel::is_span_Valid() const{
    return m_span_isValid;
}

OAISparkLine OAIPanel::getSparkline() const {
    return m_sparkline;
}
void OAIPanel::setSparkline(const OAISparkLine &sparkline) {
    m_sparkline = sparkline;
    m_sparkline_isSet = true;
}

bool OAIPanel::is_sparkline_Set() const{
    return m_sparkline_isSet;
}

bool OAIPanel::is_sparkline_Valid() const{
    return m_sparkline_isValid;
}

bool OAIPanel::isStack() const {
    return m_stack;
}
void OAIPanel::setStack(const bool &stack) {
    m_stack = stack;
    m_stack_isSet = true;
}

bool OAIPanel::is_stack_Set() const{
    return m_stack_isSet;
}

bool OAIPanel::is_stack_Valid() const{
    return m_stack_isValid;
}

bool OAIPanel::isStarred() const {
    return m_starred;
}
void OAIPanel::setStarred(const bool &starred) {
    m_starred = starred;
    m_starred_isSet = true;
}

bool OAIPanel::is_starred_Set() const{
    return m_starred_isSet;
}

bool OAIPanel::is_starred_Valid() const{
    return m_starred_isValid;
}

QList<QString> OAIPanel::getStateFilter() const {
    return m_state_filter;
}
void OAIPanel::setStateFilter(const QList<QString> &state_filter) {
    m_state_filter = state_filter;
    m_state_filter_isSet = true;
}

bool OAIPanel::is_state_filter_Set() const{
    return m_state_filter_isSet;
}

bool OAIPanel::is_state_filter_Valid() const{
    return m_state_filter_isValid;
}

bool OAIPanel::isSteppedLine() const {
    return m_stepped_line;
}
void OAIPanel::setSteppedLine(const bool &stepped_line) {
    m_stepped_line = stepped_line;
    m_stepped_line_isSet = true;
}

bool OAIPanel::is_stepped_line_Set() const{
    return m_stepped_line_isSet;
}

bool OAIPanel::is_stepped_line_Valid() const{
    return m_stepped_line_isValid;
}

QList<OAIColumnStyle> OAIPanel::getStyles() const {
    return m_styles;
}
void OAIPanel::setStyles(const QList<OAIColumnStyle> &styles) {
    m_styles = styles;
    m_styles_isSet = true;
}

bool OAIPanel::is_styles_Set() const{
    return m_styles_isSet;
}

bool OAIPanel::is_styles_Valid() const{
    return m_styles_isValid;
}

QList<QString> OAIPanel::getTags() const {
    return m_tags;
}
void OAIPanel::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPanel::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPanel::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAITarget> OAIPanel::getTargets() const {
    return m_targets;
}
void OAIPanel::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIPanel::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIPanel::is_targets_Valid() const{
    return m_targets_isValid;
}

QList<OAIThreshold> OAIPanel::getThresholds() const {
    return m_thresholds;
}
void OAIPanel::setThresholds(const QList<OAIThreshold> &thresholds) {
    m_thresholds = thresholds;
    m_thresholds_isSet = true;
}

bool OAIPanel::is_thresholds_Set() const{
    return m_thresholds_isSet;
}

bool OAIPanel::is_thresholds_Valid() const{
    return m_thresholds_isValid;
}

QString OAIPanel::getTimeFrom() const {
    return m_time_from;
}
void OAIPanel::setTimeFrom(const QString &time_from) {
    m_time_from = time_from;
    m_time_from_isSet = true;
}

bool OAIPanel::is_time_from_Set() const{
    return m_time_from_isSet;
}

bool OAIPanel::is_time_from_Valid() const{
    return m_time_from_isValid;
}

QString OAIPanel::getTimeShift() const {
    return m_time_shift;
}
void OAIPanel::setTimeShift(const QString &time_shift) {
    m_time_shift = time_shift;
    m_time_shift_isSet = true;
}

bool OAIPanel::is_time_shift_Set() const{
    return m_time_shift_isSet;
}

bool OAIPanel::is_time_shift_Valid() const{
    return m_time_shift_isValid;
}

QString OAIPanel::getTitle() const {
    return m_title;
}
void OAIPanel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPanel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPanel::is_title_Valid() const{
    return m_title_isValid;
}

OAITooltip OAIPanel::getTooltip() const {
    return m_tooltip;
}
void OAIPanel::setTooltip(const OAITooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIPanel::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIPanel::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

qint64 OAIPanel::getTooltipDecimals() const {
    return m_tooltip_decimals;
}
void OAIPanel::setTooltipDecimals(const qint64 &tooltip_decimals) {
    m_tooltip_decimals = tooltip_decimals;
    m_tooltip_decimals_isSet = true;
}

bool OAIPanel::is_tooltip_decimals_Set() const{
    return m_tooltip_decimals_isSet;
}

bool OAIPanel::is_tooltip_decimals_Valid() const{
    return m_tooltip_decimals_isValid;
}

QString OAIPanel::getTransform() const {
    return m_transform;
}
void OAIPanel::setTransform(const QString &transform) {
    m_transform = transform;
    m_transform_isSet = true;
}

bool OAIPanel::is_transform_Set() const{
    return m_transform_isSet;
}

bool OAIPanel::is_transform_Valid() const{
    return m_transform_isValid;
}

bool OAIPanel::isTransparent() const {
    return m_transparent;
}
void OAIPanel::setTransparent(const bool &transparent) {
    m_transparent = transparent;
    m_transparent_isSet = true;
}

bool OAIPanel::is_transparent_Set() const{
    return m_transparent_isSet;
}

bool OAIPanel::is_transparent_Valid() const{
    return m_transparent_isValid;
}

QString OAIPanel::getType() const {
    return m_type;
}
void OAIPanel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPanel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPanel::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPanel::getValueFontSize() const {
    return m_value_font_size;
}
void OAIPanel::setValueFontSize(const QString &value_font_size) {
    m_value_font_size = value_font_size;
    m_value_font_size_isSet = true;
}

bool OAIPanel::is_value_font_size_Set() const{
    return m_value_font_size_isSet;
}

bool OAIPanel::is_value_font_size_Valid() const{
    return m_value_font_size_isValid;
}

QList<OAIValueMap> OAIPanel::getValueMaps() const {
    return m_value_maps;
}
void OAIPanel::setValueMaps(const QList<OAIValueMap> &value_maps) {
    m_value_maps = value_maps;
    m_value_maps_isSet = true;
}

bool OAIPanel::is_value_maps_Set() const{
    return m_value_maps_isSet;
}

bool OAIPanel::is_value_maps_Valid() const{
    return m_value_maps_isValid;
}

QString OAIPanel::getValueName() const {
    return m_value_name;
}
void OAIPanel::setValueName(const QString &value_name) {
    m_value_name = value_name;
    m_value_name_isSet = true;
}

bool OAIPanel::is_value_name_Set() const{
    return m_value_name_isSet;
}

bool OAIPanel::is_value_name_Valid() const{
    return m_value_name_isValid;
}

bool OAIPanel::isXAxis() const {
    return m_x_axis;
}
void OAIPanel::setXAxis(const bool &x_axis) {
    m_x_axis = x_axis;
    m_x_axis_isSet = true;
}

bool OAIPanel::is_x_axis_Set() const{
    return m_x_axis_isSet;
}

bool OAIPanel::is_x_axis_Valid() const{
    return m_x_axis_isValid;
}

OAIPanel_xAxis OAIPanel::getXAxis() const {
    return m_x_axis;
}
void OAIPanel::setXAxis(const OAIPanel_xAxis &x_axis) {
    m_x_axis = x_axis;
    m_x_axis_isSet = true;
}

bool OAIPanel::is_x_axis_Set() const{
    return m_x_axis_isSet;
}

bool OAIPanel::is_x_axis_Valid() const{
    return m_x_axis_isValid;
}

double OAIPanel::getXBucketNumber() const {
    return m_x_bucket_number;
}
void OAIPanel::setXBucketNumber(const double &x_bucket_number) {
    m_x_bucket_number = x_bucket_number;
    m_x_bucket_number_isSet = true;
}

bool OAIPanel::is_x_bucket_number_Set() const{
    return m_x_bucket_number_isSet;
}

bool OAIPanel::is_x_bucket_number_Valid() const{
    return m_x_bucket_number_isValid;
}

QString OAIPanel::getXBucketSize() const {
    return m_x_bucket_size;
}
void OAIPanel::setXBucketSize(const QString &x_bucket_size) {
    m_x_bucket_size = x_bucket_size;
    m_x_bucket_size_isSet = true;
}

bool OAIPanel::is_x_bucket_size_Set() const{
    return m_x_bucket_size_isSet;
}

bool OAIPanel::is_x_bucket_size_Valid() const{
    return m_x_bucket_size_isValid;
}

OAIAxis OAIPanel::getXaxis() const {
    return m_xaxis;
}
void OAIPanel::setXaxis(const OAIAxis &xaxis) {
    m_xaxis = xaxis;
    m_xaxis_isSet = true;
}

bool OAIPanel::is_xaxis_Set() const{
    return m_xaxis_isSet;
}

bool OAIPanel::is_xaxis_Valid() const{
    return m_xaxis_isValid;
}

bool OAIPanel::isYAxis() const {
    return m_y_axis;
}
void OAIPanel::setYAxis(const bool &y_axis) {
    m_y_axis = y_axis;
    m_y_axis_isSet = true;
}

bool OAIPanel::is_y_axis_Set() const{
    return m_y_axis_isSet;
}

bool OAIPanel::is_y_axis_Valid() const{
    return m_y_axis_isValid;
}

OAIPanel_yAxis OAIPanel::getYAxis() const {
    return m_y_axis;
}
void OAIPanel::setYAxis(const OAIPanel_yAxis &y_axis) {
    m_y_axis = y_axis;
    m_y_axis_isSet = true;
}

bool OAIPanel::is_y_axis_Set() const{
    return m_y_axis_isSet;
}

bool OAIPanel::is_y_axis_Valid() const{
    return m_y_axis_isValid;
}

QString OAIPanel::getYBucketBound() const {
    return m_y_bucket_bound;
}
void OAIPanel::setYBucketBound(const QString &y_bucket_bound) {
    m_y_bucket_bound = y_bucket_bound;
    m_y_bucket_bound_isSet = true;
}

bool OAIPanel::is_y_bucket_bound_Set() const{
    return m_y_bucket_bound_isSet;
}

bool OAIPanel::is_y_bucket_bound_Valid() const{
    return m_y_bucket_bound_isValid;
}

double OAIPanel::getYBucketNumber() const {
    return m_y_bucket_number;
}
void OAIPanel::setYBucketNumber(const double &y_bucket_number) {
    m_y_bucket_number = y_bucket_number;
    m_y_bucket_number_isSet = true;
}

bool OAIPanel::is_y_bucket_number_Set() const{
    return m_y_bucket_number_isSet;
}

bool OAIPanel::is_y_bucket_number_Valid() const{
    return m_y_bucket_number_isValid;
}

double OAIPanel::getYBucketSize() const {
    return m_y_bucket_size;
}
void OAIPanel::setYBucketSize(const double &y_bucket_size) {
    m_y_bucket_size = y_bucket_size;
    m_y_bucket_size_isSet = true;
}

bool OAIPanel::is_y_bucket_size_Set() const{
    return m_y_bucket_size_isSet;
}

bool OAIPanel::is_y_bucket_size_Valid() const{
    return m_y_bucket_size_isValid;
}

QList<QString> OAIPanel::getYFormats() const {
    return m_y_formats;
}
void OAIPanel::setYFormats(const QList<QString> &y_formats) {
    m_y_formats = y_formats;
    m_y_formats_isSet = true;
}

bool OAIPanel::is_y_formats_Set() const{
    return m_y_formats_isSet;
}

bool OAIPanel::is_y_formats_Valid() const{
    return m_y_formats_isValid;
}

QList<OAIAxis> OAIPanel::getYaxes() const {
    return m_yaxes;
}
void OAIPanel::setYaxes(const QList<OAIAxis> &yaxes) {
    m_yaxes = yaxes;
    m_yaxes_isSet = true;
}

bool OAIPanel::is_yaxes_Set() const{
    return m_yaxes_isSet;
}

bool OAIPanel::is_yaxes_Valid() const{
    return m_yaxes_isValid;
}

bool OAIPanel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_colors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gauge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_pos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_time_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_zero_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_y_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linewidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_data_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_point_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_alerts_on_dashboard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pointradius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postfix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postfix_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renderer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_panel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_y_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_y_axis_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoped_vars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scroll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sparkline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stepped_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_styles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_shift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_bucket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xaxis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_bucket_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_bucket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
