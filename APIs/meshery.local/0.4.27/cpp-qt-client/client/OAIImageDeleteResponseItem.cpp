/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDeleteResponseItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDeleteResponseItem::OAIImageDeleteResponseItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDeleteResponseItem::OAIImageDeleteResponseItem() {
    this->initializeModel();
}

OAIImageDeleteResponseItem::~OAIImageDeleteResponseItem() {}

void OAIImageDeleteResponseItem::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_untagged_isSet = false;
    m_untagged_isValid = false;
}

void OAIImageDeleteResponseItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDeleteResponseItem::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("Deleted")]);
    m_deleted_isSet = !json[QString("Deleted")].isNull() && m_deleted_isValid;

    m_untagged_isValid = ::OpenAPI::fromJsonValue(m_untagged, json[QString("Untagged")]);
    m_untagged_isSet = !json[QString("Untagged")].isNull() && m_untagged_isValid;
}

QString OAIImageDeleteResponseItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDeleteResponseItem::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("Deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_untagged_isSet) {
        obj.insert(QString("Untagged"), ::OpenAPI::toJsonValue(m_untagged));
    }
    return obj;
}

QString OAIImageDeleteResponseItem::getDeleted() const {
    return m_deleted;
}
void OAIImageDeleteResponseItem::setDeleted(const QString &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIImageDeleteResponseItem::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIImageDeleteResponseItem::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIImageDeleteResponseItem::getUntagged() const {
    return m_untagged;
}
void OAIImageDeleteResponseItem::setUntagged(const QString &untagged) {
    m_untagged = untagged;
    m_untagged_isSet = true;
}

bool OAIImageDeleteResponseItem::is_untagged_Set() const{
    return m_untagged_isSet;
}

bool OAIImageDeleteResponseItem::is_untagged_Valid() const{
    return m_untagged_isValid;
}

bool OAIImageDeleteResponseItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDeleteResponseItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
