/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticateOKBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticateOKBody::OAIAuthenticateOKBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticateOKBody::OAIAuthenticateOKBody() {
    this->initializeModel();
}

OAIAuthenticateOKBody::~OAIAuthenticateOKBody() {}

void OAIAuthenticateOKBody::initializeModel() {

    m_identity_token_isSet = false;
    m_identity_token_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAuthenticateOKBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticateOKBody::fromJsonObject(QJsonObject json) {

    m_identity_token_isValid = ::OpenAPI::fromJsonValue(m_identity_token, json[QString("IdentityToken")]);
    m_identity_token_isSet = !json[QString("IdentityToken")].isNull() && m_identity_token_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIAuthenticateOKBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticateOKBody::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_token_isSet) {
        obj.insert(QString("IdentityToken"), ::OpenAPI::toJsonValue(m_identity_token));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAuthenticateOKBody::getIdentityToken() const {
    return m_identity_token;
}
void OAIAuthenticateOKBody::setIdentityToken(const QString &identity_token) {
    m_identity_token = identity_token;
    m_identity_token_isSet = true;
}

bool OAIAuthenticateOKBody::is_identity_token_Set() const{
    return m_identity_token_isSet;
}

bool OAIAuthenticateOKBody::is_identity_token_Valid() const{
    return m_identity_token_isValid;
}

QString OAIAuthenticateOKBody::getStatus() const {
    return m_status;
}
void OAIAuthenticateOKBody::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAuthenticateOKBody::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAuthenticateOKBody::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAuthenticateOKBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticateOKBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_token_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
