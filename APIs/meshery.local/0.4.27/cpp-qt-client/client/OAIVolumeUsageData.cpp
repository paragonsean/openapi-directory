/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeUsageData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeUsageData::OAIVolumeUsageData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeUsageData::OAIVolumeUsageData() {
    this->initializeModel();
}

OAIVolumeUsageData::~OAIVolumeUsageData() {}

void OAIVolumeUsageData::initializeModel() {

    m_ref_count_isSet = false;
    m_ref_count_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIVolumeUsageData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeUsageData::fromJsonObject(QJsonObject json) {

    m_ref_count_isValid = ::OpenAPI::fromJsonValue(m_ref_count, json[QString("RefCount")]);
    m_ref_count_isSet = !json[QString("RefCount")].isNull() && m_ref_count_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAIVolumeUsageData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeUsageData::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_count_isSet) {
        obj.insert(QString("RefCount"), ::OpenAPI::toJsonValue(m_ref_count));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

qint64 OAIVolumeUsageData::getRefCount() const {
    return m_ref_count;
}
void OAIVolumeUsageData::setRefCount(const qint64 &ref_count) {
    m_ref_count = ref_count;
    m_ref_count_isSet = true;
}

bool OAIVolumeUsageData::is_ref_count_Set() const{
    return m_ref_count_isSet;
}

bool OAIVolumeUsageData::is_ref_count_Valid() const{
    return m_ref_count_isValid;
}

qint64 OAIVolumeUsageData::getSize() const {
    return m_size;
}
void OAIVolumeUsageData::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIVolumeUsageData::is_size_Set() const{
    return m_size_isSet;
}

bool OAIVolumeUsageData::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIVolumeUsageData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeUsageData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ref_count_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
