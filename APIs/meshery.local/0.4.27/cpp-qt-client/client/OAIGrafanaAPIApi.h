/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGrafanaAPIApi_H
#define OAI_OAIGrafanaAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGrafana.h"
#include "OAIGrafanaBoard.h"
#include "OAIGrafanaConfigParams.h"
#include "OAIService.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGrafanaAPIApi : public QObject {
    Q_OBJECT

public:
    OAIGrafanaAPIApi(const int timeOut = 0);
    ~OAIGrafanaAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void idDeleteGrafanaConfig();


    virtual void idGetGrafana();

    /**
    * @param[in]  dashboard_search QString [optional]
    */
    virtual void idGetGrafanaBoards(const ::OpenAPI::OptionalParam<QString> &dashboard_search = ::OpenAPI::OptionalParam<QString>());


    virtual void idGetGrafanaConfig();


    virtual void idGetGrafanaPing();


    virtual void idGetGrafanaQuery();


    virtual void idPostGrafanaBoards();

    /**
    * @param[in]  oai_grafana_config_params OAIGrafanaConfigParams [required]
    */
    virtual void idPostGrafanaConfig(const OAIGrafanaConfigParams &oai_grafana_config_params);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteGrafanaConfigCallback(OAIHttpRequestWorker *worker);
    void idGetGrafanaCallback(OAIHttpRequestWorker *worker);
    void idGetGrafanaBoardsCallback(OAIHttpRequestWorker *worker);
    void idGetGrafanaConfigCallback(OAIHttpRequestWorker *worker);
    void idGetGrafanaPingCallback(OAIHttpRequestWorker *worker);
    void idGetGrafanaQueryCallback(OAIHttpRequestWorker *worker);
    void idPostGrafanaBoardsCallback(OAIHttpRequestWorker *worker);
    void idPostGrafanaConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteGrafanaConfigSignal();
    void idGetGrafanaSignal(QMap<QString, QList<OAIService>> summary);
    void idGetGrafanaBoardsSignal(QList<OAIGrafanaBoard> summary);
    void idGetGrafanaConfigSignal(OAIGrafana summary);
    void idGetGrafanaPingSignal();
    void idGetGrafanaQuerySignal();
    void idPostGrafanaBoardsSignal();
    void idPostGrafanaConfigSignal();


    void idDeleteGrafanaConfigSignalFull(OAIHttpRequestWorker *worker);
    void idGetGrafanaSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIService>> summary);
    void idGetGrafanaBoardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGrafanaBoard> summary);
    void idGetGrafanaConfigSignalFull(OAIHttpRequestWorker *worker, OAIGrafana summary);
    void idGetGrafanaPingSignalFull(OAIHttpRequestWorker *worker);
    void idGetGrafanaQuerySignalFull(OAIHttpRequestWorker *worker);
    void idPostGrafanaBoardsSignalFull(OAIHttpRequestWorker *worker);
    void idPostGrafanaConfigSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use idDeleteGrafanaConfigSignalError() instead")
    void idDeleteGrafanaConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteGrafanaConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaSignalError() instead")
    void idGetGrafanaSignalE(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaSignalError(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaBoardsSignalError() instead")
    void idGetGrafanaBoardsSignalE(QList<OAIGrafanaBoard> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaBoardsSignalError(QList<OAIGrafanaBoard> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaConfigSignalError() instead")
    void idGetGrafanaConfigSignalE(OAIGrafana summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaConfigSignalError(OAIGrafana summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaPingSignalError() instead")
    void idGetGrafanaPingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaPingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaQuerySignalError() instead")
    void idGetGrafanaQuerySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaQuerySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostGrafanaBoardsSignalError() instead")
    void idPostGrafanaBoardsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostGrafanaBoardsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostGrafanaConfigSignalError() instead")
    void idPostGrafanaConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostGrafanaConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteGrafanaConfigSignalErrorFull() instead")
    void idDeleteGrafanaConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteGrafanaConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaSignalErrorFull() instead")
    void idGetGrafanaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaBoardsSignalErrorFull() instead")
    void idGetGrafanaBoardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaBoardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaConfigSignalErrorFull() instead")
    void idGetGrafanaConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaPingSignalErrorFull() instead")
    void idGetGrafanaPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetGrafanaQuerySignalErrorFull() instead")
    void idGetGrafanaQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetGrafanaQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostGrafanaBoardsSignalErrorFull() instead")
    void idPostGrafanaBoardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostGrafanaBoardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostGrafanaConfigSignalErrorFull() instead")
    void idPostGrafanaConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostGrafanaConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
