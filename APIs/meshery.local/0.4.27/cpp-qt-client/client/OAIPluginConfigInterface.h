/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPluginConfigInterface.h
 *
 * PluginConfigInterface The interface between Docker and the plugin
 */

#ifndef OAIPluginConfigInterface_H
#define OAIPluginConfigInterface_H

#include <QJsonObject>

#include "OAIPluginInterfaceType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPluginInterfaceType;

class OAIPluginConfigInterface : public OAIObject {
public:
    OAIPluginConfigInterface();
    OAIPluginConfigInterface(QString json);
    ~OAIPluginConfigInterface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProtocolScheme() const;
    void setProtocolScheme(const QString &protocol_scheme);
    bool is_protocol_scheme_Set() const;
    bool is_protocol_scheme_Valid() const;

    QString getSocket() const;
    void setSocket(const QString &socket);
    bool is_socket_Set() const;
    bool is_socket_Valid() const;

    QList<OAIPluginInterfaceType> getTypes() const;
    void setTypes(const QList<OAIPluginInterfaceType> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_protocol_scheme;
    bool m_protocol_scheme_isSet;
    bool m_protocol_scheme_isValid;

    QString m_socket;
    bool m_socket_isSet;
    bool m_socket_isValid;

    QList<OAIPluginInterfaceType> m_types;
    bool m_types_isSet;
    bool m_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPluginConfigInterface)

#endif // OAIPluginConfigInterface_H
