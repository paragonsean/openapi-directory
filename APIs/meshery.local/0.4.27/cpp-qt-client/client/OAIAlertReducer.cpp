/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertReducer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertReducer::OAIAlertReducer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertReducer::OAIAlertReducer() {
    this->initializeModel();
}

OAIAlertReducer::~OAIAlertReducer() {}

void OAIAlertReducer::initializeModel() {

    m_params_isSet = false;
    m_params_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAlertReducer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertReducer::fromJsonObject(QJsonObject json) {

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAlertReducer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertReducer::asJsonObject() const {
    QJsonObject obj;
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIAlertReducer::getParams() const {
    return m_params;
}
void OAIAlertReducer::setParams(const QList<QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAlertReducer::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAlertReducer::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIAlertReducer::getType() const {
    return m_type;
}
void OAIAlertReducer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlertReducer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlertReducer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAlertReducer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertReducer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
