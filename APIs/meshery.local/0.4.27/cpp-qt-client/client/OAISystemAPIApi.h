/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemAPIApi_H
#define OAI_OAISystemAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdapter.h"
#include "OAIK8SConfig.h"
#include "OAIK8SContext.h"
#include "OAIPreference.h"
#include "OAIService.h"
#include "OAIVersion.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemAPIApi : public QObject {
    Q_OBJECT

public:
    OAISystemAPIApi(const int timeOut = 0);
    ~OAISystemAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  adapter QString [optional]
    */
    virtual void idDeleteAdapterConfig(const ::OpenAPI::OptionalParam<QString> &adapter = ::OpenAPI::OptionalParam<QString>());


    virtual void idDeleteK8SConfig();


    virtual void idGetKubernetesPing();

    /**
    * @param[in]  adapter QString [optional]
    */
    virtual void idGetSystemAdapters(const ::OpenAPI::OptionalParam<QString> &adapter = ::OpenAPI::OptionalParam<QString>());


    virtual void idGetSystemVersion();


    virtual void idMeshSyncGrafana();


    virtual void idMeshSyncPrometheus();

    /**
    * @param[in]  body QString [optional]
    */
    virtual void idPostAdapterConfig(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  adapter QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  custom_body QString [optional]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  delete_op QString [optional]
    */
    virtual void idPostAdapterOperation(const ::OpenAPI::OptionalParam<QString> &adapter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_op = ::OpenAPI::OptionalParam<QString>());


    virtual void idPostK8SConfig();


    virtual void idPostK8SContexts();


    virtual void idSystemSync();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteAdapterConfigCallback(OAIHttpRequestWorker *worker);
    void idDeleteK8SConfigCallback(OAIHttpRequestWorker *worker);
    void idGetKubernetesPingCallback(OAIHttpRequestWorker *worker);
    void idGetSystemAdaptersCallback(OAIHttpRequestWorker *worker);
    void idGetSystemVersionCallback(OAIHttpRequestWorker *worker);
    void idMeshSyncGrafanaCallback(OAIHttpRequestWorker *worker);
    void idMeshSyncPrometheusCallback(OAIHttpRequestWorker *worker);
    void idPostAdapterConfigCallback(OAIHttpRequestWorker *worker);
    void idPostAdapterOperationCallback(OAIHttpRequestWorker *worker);
    void idPostK8SConfigCallback(OAIHttpRequestWorker *worker);
    void idPostK8SContextsCallback(OAIHttpRequestWorker *worker);
    void idSystemSyncCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteAdapterConfigSignal();
    void idDeleteK8SConfigSignal();
    void idGetKubernetesPingSignal();
    void idGetSystemAdaptersSignal(QList<OAIAdapter> summary);
    void idGetSystemVersionSignal(OAIVersion summary);
    void idMeshSyncGrafanaSignal(QMap<QString, QList<OAIService>> summary);
    void idMeshSyncPrometheusSignal(QMap<QString, QList<OAIService>> summary);
    void idPostAdapterConfigSignal(QList<OAIAdapter> summary);
    void idPostAdapterOperationSignal();
    void idPostK8SConfigSignal(OAIK8SConfig summary);
    void idPostK8SContextsSignal(QList<OAIK8SContext> summary);
    void idSystemSyncSignal(OAIPreference summary);


    void idDeleteAdapterConfigSignalFull(OAIHttpRequestWorker *worker);
    void idDeleteK8SConfigSignalFull(OAIHttpRequestWorker *worker);
    void idGetKubernetesPingSignalFull(OAIHttpRequestWorker *worker);
    void idGetSystemAdaptersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdapter> summary);
    void idGetSystemVersionSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);
    void idMeshSyncGrafanaSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIService>> summary);
    void idMeshSyncPrometheusSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIService>> summary);
    void idPostAdapterConfigSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdapter> summary);
    void idPostAdapterOperationSignalFull(OAIHttpRequestWorker *worker);
    void idPostK8SConfigSignalFull(OAIHttpRequestWorker *worker, OAIK8SConfig summary);
    void idPostK8SContextsSignalFull(OAIHttpRequestWorker *worker, QList<OAIK8SContext> summary);
    void idSystemSyncSignalFull(OAIHttpRequestWorker *worker, OAIPreference summary);

    Q_DECL_DEPRECATED_X("Use idDeleteAdapterConfigSignalError() instead")
    void idDeleteAdapterConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteAdapterConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteK8SConfigSignalError() instead")
    void idDeleteK8SConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteK8SConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetKubernetesPingSignalError() instead")
    void idGetKubernetesPingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGetKubernetesPingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSystemAdaptersSignalError() instead")
    void idGetSystemAdaptersSignalE(QList<OAIAdapter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSystemAdaptersSignalError(QList<OAIAdapter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSystemVersionSignalError() instead")
    void idGetSystemVersionSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSystemVersionSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idMeshSyncGrafanaSignalError() instead")
    void idMeshSyncGrafanaSignalE(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idMeshSyncGrafanaSignalError(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idMeshSyncPrometheusSignalError() instead")
    void idMeshSyncPrometheusSignalE(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idMeshSyncPrometheusSignalError(QMap<QString, QList<OAIService>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostAdapterConfigSignalError() instead")
    void idPostAdapterConfigSignalE(QList<OAIAdapter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostAdapterConfigSignalError(QList<OAIAdapter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostAdapterOperationSignalError() instead")
    void idPostAdapterOperationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostAdapterOperationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostK8SConfigSignalError() instead")
    void idPostK8SConfigSignalE(OAIK8SConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostK8SConfigSignalError(OAIK8SConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostK8SContextsSignalError() instead")
    void idPostK8SContextsSignalE(QList<OAIK8SContext> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostK8SContextsSignalError(QList<OAIK8SContext> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSystemSyncSignalError() instead")
    void idSystemSyncSignalE(OAIPreference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idSystemSyncSignalError(OAIPreference summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteAdapterConfigSignalErrorFull() instead")
    void idDeleteAdapterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteAdapterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteK8SConfigSignalErrorFull() instead")
    void idDeleteK8SConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteK8SConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetKubernetesPingSignalErrorFull() instead")
    void idGetKubernetesPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetKubernetesPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSystemAdaptersSignalErrorFull() instead")
    void idGetSystemAdaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSystemAdaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSystemVersionSignalErrorFull() instead")
    void idGetSystemVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSystemVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idMeshSyncGrafanaSignalErrorFull() instead")
    void idMeshSyncGrafanaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idMeshSyncGrafanaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idMeshSyncPrometheusSignalErrorFull() instead")
    void idMeshSyncPrometheusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idMeshSyncPrometheusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostAdapterConfigSignalErrorFull() instead")
    void idPostAdapterConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostAdapterConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostAdapterOperationSignalErrorFull() instead")
    void idPostAdapterOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostAdapterOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostK8SConfigSignalErrorFull() instead")
    void idPostK8SConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostK8SConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostK8SContextsSignalErrorFull() instead")
    void idPostK8SContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostK8SContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSystemSyncSignalErrorFull() instead")
    void idSystemSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idSystemSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
