/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPort::OAIPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPort::OAIPort() {
    this->initializeModel();
}

OAIPort::~OAIPort() {}

void OAIPort::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_private_port_isSet = false;
    m_private_port_isValid = false;

    m_public_port_isSet = false;
    m_public_port_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPort::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("IP")]);
    m_ip_isSet = !json[QString("IP")].isNull() && m_ip_isValid;

    m_private_port_isValid = ::OpenAPI::fromJsonValue(m_private_port, json[QString("PrivatePort")]);
    m_private_port_isSet = !json[QString("PrivatePort")].isNull() && m_private_port_isValid;

    m_public_port_isValid = ::OpenAPI::fromJsonValue(m_public_port, json[QString("PublicPort")]);
    m_public_port_isSet = !json[QString("PublicPort")].isNull() && m_public_port_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPort::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("IP"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_private_port_isSet) {
        obj.insert(QString("PrivatePort"), ::OpenAPI::toJsonValue(m_private_port));
    }
    if (m_public_port_isSet) {
        obj.insert(QString("PublicPort"), ::OpenAPI::toJsonValue(m_public_port));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPort::getIp() const {
    return m_ip;
}
void OAIPort::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIPort::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIPort::is_ip_Valid() const{
    return m_ip_isValid;
}

qint32 OAIPort::getPrivatePort() const {
    return m_private_port;
}
void OAIPort::setPrivatePort(const qint32 &private_port) {
    m_private_port = private_port;
    m_private_port_isSet = true;
}

bool OAIPort::is_private_port_Set() const{
    return m_private_port_isSet;
}

bool OAIPort::is_private_port_Valid() const{
    return m_private_port_isValid;
}

qint32 OAIPort::getPublicPort() const {
    return m_public_port;
}
void OAIPort::setPublicPort(const qint32 &public_port) {
    m_public_port = public_port;
    m_public_port_isSet = true;
}

bool OAIPort::is_public_port_Set() const{
    return m_public_port_isSet;
}

bool OAIPort::is_public_port_Valid() const{
    return m_public_port_isValid;
}

QString OAIPort::getType() const {
    return m_type;
}
void OAIPort::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPort::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPort::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_private_port_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
