/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigUser::OAIPluginConfigUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigUser::OAIPluginConfigUser() {
    this->initializeModel();
}

OAIPluginConfigUser::~OAIPluginConfigUser() {}

void OAIPluginConfigUser::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIPluginConfigUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigUser::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("GID")]);
    m_gid_isSet = !json[QString("GID")].isNull() && m_gid_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;
}

QString OAIPluginConfigUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigUser::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("GID"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAIPluginConfigUser::getGid() const {
    return m_gid;
}
void OAIPluginConfigUser::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIPluginConfigUser::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIPluginConfigUser::is_gid_Valid() const{
    return m_gid_isValid;
}

qint32 OAIPluginConfigUser::getUid() const {
    return m_uid;
}
void OAIPluginConfigUser::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPluginConfigUser::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPluginConfigUser::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIPluginConfigUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
