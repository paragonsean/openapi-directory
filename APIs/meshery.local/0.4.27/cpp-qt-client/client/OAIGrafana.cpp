/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafana.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafana::OAIGrafana(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafana::OAIGrafana() {
    this->initializeModel();
}

OAIGrafana::~OAIGrafana() {}

void OAIGrafana::initializeModel() {

    m_grafana_api_key_isSet = false;
    m_grafana_api_key_isValid = false;

    m_grafana_url_isSet = false;
    m_grafana_url_isValid = false;

    m_selected_boards_configs_isSet = false;
    m_selected_boards_configs_isValid = false;
}

void OAIGrafana::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafana::fromJsonObject(QJsonObject json) {

    m_grafana_api_key_isValid = ::OpenAPI::fromJsonValue(m_grafana_api_key, json[QString("grafanaAPIKey")]);
    m_grafana_api_key_isSet = !json[QString("grafanaAPIKey")].isNull() && m_grafana_api_key_isValid;

    m_grafana_url_isValid = ::OpenAPI::fromJsonValue(m_grafana_url, json[QString("grafanaURL")]);
    m_grafana_url_isSet = !json[QString("grafanaURL")].isNull() && m_grafana_url_isValid;

    m_selected_boards_configs_isValid = ::OpenAPI::fromJsonValue(m_selected_boards_configs, json[QString("selectedBoardsConfigs")]);
    m_selected_boards_configs_isSet = !json[QString("selectedBoardsConfigs")].isNull() && m_selected_boards_configs_isValid;
}

QString OAIGrafana::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafana::asJsonObject() const {
    QJsonObject obj;
    if (m_grafana_api_key_isSet) {
        obj.insert(QString("grafanaAPIKey"), ::OpenAPI::toJsonValue(m_grafana_api_key));
    }
    if (m_grafana_url_isSet) {
        obj.insert(QString("grafanaURL"), ::OpenAPI::toJsonValue(m_grafana_url));
    }
    if (m_selected_boards_configs.size() > 0) {
        obj.insert(QString("selectedBoardsConfigs"), ::OpenAPI::toJsonValue(m_selected_boards_configs));
    }
    return obj;
}

QString OAIGrafana::getGrafanaApiKey() const {
    return m_grafana_api_key;
}
void OAIGrafana::setGrafanaApiKey(const QString &grafana_api_key) {
    m_grafana_api_key = grafana_api_key;
    m_grafana_api_key_isSet = true;
}

bool OAIGrafana::is_grafana_api_key_Set() const{
    return m_grafana_api_key_isSet;
}

bool OAIGrafana::is_grafana_api_key_Valid() const{
    return m_grafana_api_key_isValid;
}

QString OAIGrafana::getGrafanaUrl() const {
    return m_grafana_url;
}
void OAIGrafana::setGrafanaUrl(const QString &grafana_url) {
    m_grafana_url = grafana_url;
    m_grafana_url_isSet = true;
}

bool OAIGrafana::is_grafana_url_Set() const{
    return m_grafana_url_isSet;
}

bool OAIGrafana::is_grafana_url_Valid() const{
    return m_grafana_url_isValid;
}

QList<OAISelectedGrafanaConfig> OAIGrafana::getSelectedBoardsConfigs() const {
    return m_selected_boards_configs;
}
void OAIGrafana::setSelectedBoardsConfigs(const QList<OAISelectedGrafanaConfig> &selected_boards_configs) {
    m_selected_boards_configs = selected_boards_configs;
    m_selected_boards_configs_isSet = true;
}

bool OAIGrafana::is_selected_boards_configs_Set() const{
    return m_selected_boards_configs_isSet;
}

bool OAIGrafana::is_selected_boards_configs_Valid() const{
    return m_selected_boards_configs_isValid;
}

bool OAIGrafana::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grafana_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_boards_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafana::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
