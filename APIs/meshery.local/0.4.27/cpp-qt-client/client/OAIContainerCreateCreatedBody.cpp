/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerCreateCreatedBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerCreateCreatedBody::OAIContainerCreateCreatedBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerCreateCreatedBody::OAIContainerCreateCreatedBody() {
    this->initializeModel();
}

OAIContainerCreateCreatedBody::~OAIContainerCreateCreatedBody() {}

void OAIContainerCreateCreatedBody::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIContainerCreateCreatedBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerCreateCreatedBody::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIContainerCreateCreatedBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerCreateCreatedBody::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIContainerCreateCreatedBody::getId() const {
    return m_id;
}
void OAIContainerCreateCreatedBody::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContainerCreateCreatedBody::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContainerCreateCreatedBody::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIContainerCreateCreatedBody::getWarnings() const {
    return m_warnings;
}
void OAIContainerCreateCreatedBody::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIContainerCreateCreatedBody::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIContainerCreateCreatedBody::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIContainerCreateCreatedBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerCreateCreatedBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_warnings_isValid && true;
}

} // namespace OpenAPI
