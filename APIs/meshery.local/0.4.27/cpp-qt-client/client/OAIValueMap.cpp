/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueMap::OAIValueMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueMap::OAIValueMap() {
    this->initializeModel();
}

OAIValueMap::~OAIValueMap() {}

void OAIValueMap::initializeModel() {

    m_op_isSet = false;
    m_op_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIValueMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueMap::fromJsonObject(QJsonObject json) {

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIValueMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueMap::asJsonObject() const {
    QJsonObject obj;
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIValueMap::getOp() const {
    return m_op;
}
void OAIValueMap::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIValueMap::is_op_Set() const{
    return m_op_isSet;
}

bool OAIValueMap::is_op_Valid() const{
    return m_op_isValid;
}

QString OAIValueMap::getText() const {
    return m_text;
}
void OAIValueMap::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIValueMap::is_text_Set() const{
    return m_text_isSet;
}

bool OAIValueMap::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIValueMap::getValue() const {
    return m_value;
}
void OAIValueMap::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValueMap::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValueMap::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIValueMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
