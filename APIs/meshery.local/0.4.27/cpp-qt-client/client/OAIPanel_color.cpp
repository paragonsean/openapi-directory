/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanel_color.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanel_color::OAIPanel_color(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanel_color::OAIPanel_color() {
    this->initializeModel();
}

OAIPanel_color::~OAIPanel_color() {}

void OAIPanel_color::initializeModel() {

    m_card_color_isSet = false;
    m_card_color_isValid = false;

    m_color_scale_isSet = false;
    m_color_scale_isValid = false;

    m_color_scheme_isSet = false;
    m_color_scheme_isValid = false;

    m_exponent_isSet = false;
    m_exponent_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIPanel_color::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanel_color::fromJsonObject(QJsonObject json) {

    m_card_color_isValid = ::OpenAPI::fromJsonValue(m_card_color, json[QString("cardColor")]);
    m_card_color_isSet = !json[QString("cardColor")].isNull() && m_card_color_isValid;

    m_color_scale_isValid = ::OpenAPI::fromJsonValue(m_color_scale, json[QString("colorScale")]);
    m_color_scale_isSet = !json[QString("colorScale")].isNull() && m_color_scale_isValid;

    m_color_scheme_isValid = ::OpenAPI::fromJsonValue(m_color_scheme, json[QString("colorScheme")]);
    m_color_scheme_isSet = !json[QString("colorScheme")].isNull() && m_color_scheme_isValid;

    m_exponent_isValid = ::OpenAPI::fromJsonValue(m_exponent, json[QString("exponent")]);
    m_exponent_isSet = !json[QString("exponent")].isNull() && m_exponent_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIPanel_color::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanel_color::asJsonObject() const {
    QJsonObject obj;
    if (m_card_color_isSet) {
        obj.insert(QString("cardColor"), ::OpenAPI::toJsonValue(m_card_color));
    }
    if (m_color_scale_isSet) {
        obj.insert(QString("colorScale"), ::OpenAPI::toJsonValue(m_color_scale));
    }
    if (m_color_scheme_isSet) {
        obj.insert(QString("colorScheme"), ::OpenAPI::toJsonValue(m_color_scheme));
    }
    if (m_exponent_isSet) {
        obj.insert(QString("exponent"), ::OpenAPI::toJsonValue(m_exponent));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QString OAIPanel_color::getCardColor() const {
    return m_card_color;
}
void OAIPanel_color::setCardColor(const QString &card_color) {
    m_card_color = card_color;
    m_card_color_isSet = true;
}

bool OAIPanel_color::is_card_color_Set() const{
    return m_card_color_isSet;
}

bool OAIPanel_color::is_card_color_Valid() const{
    return m_card_color_isValid;
}

QString OAIPanel_color::getColorScale() const {
    return m_color_scale;
}
void OAIPanel_color::setColorScale(const QString &color_scale) {
    m_color_scale = color_scale;
    m_color_scale_isSet = true;
}

bool OAIPanel_color::is_color_scale_Set() const{
    return m_color_scale_isSet;
}

bool OAIPanel_color::is_color_scale_Valid() const{
    return m_color_scale_isValid;
}

QString OAIPanel_color::getColorScheme() const {
    return m_color_scheme;
}
void OAIPanel_color::setColorScheme(const QString &color_scheme) {
    m_color_scheme = color_scheme;
    m_color_scheme_isSet = true;
}

bool OAIPanel_color::is_color_scheme_Set() const{
    return m_color_scheme_isSet;
}

bool OAIPanel_color::is_color_scheme_Valid() const{
    return m_color_scheme_isValid;
}

double OAIPanel_color::getExponent() const {
    return m_exponent;
}
void OAIPanel_color::setExponent(const double &exponent) {
    m_exponent = exponent;
    m_exponent_isSet = true;
}

bool OAIPanel_color::is_exponent_Set() const{
    return m_exponent_isSet;
}

bool OAIPanel_color::is_exponent_Valid() const{
    return m_exponent_isValid;
}

double OAIPanel_color::getMax() const {
    return m_max;
}
void OAIPanel_color::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIPanel_color::is_max_Set() const{
    return m_max_isSet;
}

bool OAIPanel_color::is_max_Valid() const{
    return m_max_isValid;
}

double OAIPanel_color::getMin() const {
    return m_min;
}
void OAIPanel_color::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIPanel_color::is_min_Set() const{
    return m_min_isSet;
}

bool OAIPanel_color::is_min_Valid() const{
    return m_min_isValid;
}

QString OAIPanel_color::getMode() const {
    return m_mode;
}
void OAIPanel_color::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIPanel_color::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIPanel_color::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIPanel_color::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanel_color::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
