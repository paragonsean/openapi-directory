/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPreference.h
 *
 * Preference represents the data stored in session / local DB
 */

#ifndef OAIPreference_H
#define OAIPreference_H

#include <QJsonObject>

#include "OAIAdapter.h"
#include "OAIGrafana.h"
#include "OAIK8SConfig.h"
#include "OAILoadTestPreferences.h"
#include "OAIPrometheus.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGrafana;
class OAIK8SConfig;
class OAILoadTestPreferences;
class OAIAdapter;
class OAIPrometheus;

class OAIPreference : public OAIObject {
public:
    OAIPreference();
    OAIPreference(QString json);
    ~OAIPreference() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAnonymousPerfResults() const;
    void setAnonymousPerfResults(const bool &anonymous_perf_results);
    bool is_anonymous_perf_results_Set() const;
    bool is_anonymous_perf_results_Valid() const;

    bool isAnonymousUsageStats() const;
    void setAnonymousUsageStats(const bool &anonymous_usage_stats);
    bool is_anonymous_usage_stats_Set() const;
    bool is_anonymous_usage_stats_Valid() const;

    OAIGrafana getGrafana() const;
    void setGrafana(const OAIGrafana &grafana);
    bool is_grafana_Set() const;
    bool is_grafana_Valid() const;

    OAIK8SConfig getK8sConfig() const;
    void setK8sConfig(const OAIK8SConfig &k8s_config);
    bool is_k8s_config_Set() const;
    bool is_k8s_config_Valid() const;

    OAILoadTestPreferences getLoadTestPrefs() const;
    void setLoadTestPrefs(const OAILoadTestPreferences &load_test_prefs);
    bool is_load_test_prefs_Set() const;
    bool is_load_test_prefs_Valid() const;

    QList<OAIAdapter> getMeshAdapters() const;
    void setMeshAdapters(const QList<OAIAdapter> &mesh_adapters);
    bool is_mesh_adapters_Set() const;
    bool is_mesh_adapters_Valid() const;

    OAIPrometheus getPrometheus() const;
    void setPrometheus(const OAIPrometheus &prometheus);
    bool is_prometheus_Set() const;
    bool is_prometheus_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_anonymous_perf_results;
    bool m_anonymous_perf_results_isSet;
    bool m_anonymous_perf_results_isValid;

    bool m_anonymous_usage_stats;
    bool m_anonymous_usage_stats_isSet;
    bool m_anonymous_usage_stats_isValid;

    OAIGrafana m_grafana;
    bool m_grafana_isSet;
    bool m_grafana_isValid;

    OAIK8SConfig m_k8s_config;
    bool m_k8s_config_isSet;
    bool m_k8s_config_isValid;

    OAILoadTestPreferences m_load_test_prefs;
    bool m_load_test_prefs_isSet;
    bool m_load_test_prefs_isValid;

    QList<OAIAdapter> m_mesh_adapters;
    bool m_mesh_adapters_isSet;
    bool m_mesh_adapters_isValid;

    OAIPrometheus m_prometheus;
    bool m_prometheus_isSet;
    bool m_prometheus_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPreference)

#endif // OAIPreference_H
