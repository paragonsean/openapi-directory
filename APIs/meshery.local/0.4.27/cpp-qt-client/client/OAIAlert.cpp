/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_alert_rule_tags_isSet = false;
    m_alert_rule_tags_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_execution_error_state_isSet = false;
    m_execution_error_state_isValid = false;

    m_r_for_isSet = false;
    m_r_for_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_handler_isSet = false;
    m_handler_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_data_state_isSet = false;
    m_no_data_state_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_alert_rule_tags_isValid = ::OpenAPI::fromJsonValue(m_alert_rule_tags, json[QString("alertRuleTags")]);
    m_alert_rule_tags_isSet = !json[QString("alertRuleTags")].isNull() && m_alert_rule_tags_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_execution_error_state_isValid = ::OpenAPI::fromJsonValue(m_execution_error_state, json[QString("executionErrorState")]);
    m_execution_error_state_isSet = !json[QString("executionErrorState")].isNull() && m_execution_error_state_isValid;

    m_r_for_isValid = ::OpenAPI::fromJsonValue(m_r_for, json[QString("for")]);
    m_r_for_isSet = !json[QString("for")].isNull() && m_r_for_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_handler_isValid = ::OpenAPI::fromJsonValue(m_handler, json[QString("handler")]);
    m_handler_isSet = !json[QString("handler")].isNull() && m_handler_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_data_state_isValid = ::OpenAPI::fromJsonValue(m_no_data_state, json[QString("noDataState")]);
    m_no_data_state_isSet = !json[QString("noDataState")].isNull() && m_no_data_state_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_rule_tags.size() > 0) {
        obj.insert(QString("alertRuleTags"), ::OpenAPI::toJsonValue(m_alert_rule_tags));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_execution_error_state_isSet) {
        obj.insert(QString("executionErrorState"), ::OpenAPI::toJsonValue(m_execution_error_state));
    }
    if (m_r_for_isSet) {
        obj.insert(QString("for"), ::OpenAPI::toJsonValue(m_r_for));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_handler_isSet) {
        obj.insert(QString("handler"), ::OpenAPI::toJsonValue(m_handler));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_data_state_isSet) {
        obj.insert(QString("noDataState"), ::OpenAPI::toJsonValue(m_no_data_state));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    return obj;
}

QMap<QString, QString> OAIAlert::getAlertRuleTags() const {
    return m_alert_rule_tags;
}
void OAIAlert::setAlertRuleTags(const QMap<QString, QString> &alert_rule_tags) {
    m_alert_rule_tags = alert_rule_tags;
    m_alert_rule_tags_isSet = true;
}

bool OAIAlert::is_alert_rule_tags_Set() const{
    return m_alert_rule_tags_isSet;
}

bool OAIAlert::is_alert_rule_tags_Valid() const{
    return m_alert_rule_tags_isValid;
}

QList<OAIAlertCondition> OAIAlert::getConditions() const {
    return m_conditions;
}
void OAIAlert::setConditions(const QList<OAIAlertCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIAlert::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIAlert::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIAlert::getExecutionErrorState() const {
    return m_execution_error_state;
}
void OAIAlert::setExecutionErrorState(const QString &execution_error_state) {
    m_execution_error_state = execution_error_state;
    m_execution_error_state_isSet = true;
}

bool OAIAlert::is_execution_error_state_Set() const{
    return m_execution_error_state_isSet;
}

bool OAIAlert::is_execution_error_state_Valid() const{
    return m_execution_error_state_isValid;
}

QString OAIAlert::getRFor() const {
    return m_r_for;
}
void OAIAlert::setRFor(const QString &r_for) {
    m_r_for = r_for;
    m_r_for_isSet = true;
}

bool OAIAlert::is_r_for_Set() const{
    return m_r_for_isSet;
}

bool OAIAlert::is_r_for_Valid() const{
    return m_r_for_isValid;
}

QString OAIAlert::getFrequency() const {
    return m_frequency;
}
void OAIAlert::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAlert::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAlert::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint64 OAIAlert::getHandler() const {
    return m_handler;
}
void OAIAlert::setHandler(const qint64 &handler) {
    m_handler = handler;
    m_handler_isSet = true;
}

bool OAIAlert::is_handler_Set() const{
    return m_handler_isSet;
}

bool OAIAlert::is_handler_Valid() const{
    return m_handler_isValid;
}

QString OAIAlert::getMessage() const {
    return m_message;
}
void OAIAlert::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAlert::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAlert::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAlert::getName() const {
    return m_name;
}
void OAIAlert::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlert::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlert::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAlert::getNoDataState() const {
    return m_no_data_state;
}
void OAIAlert::setNoDataState(const QString &no_data_state) {
    m_no_data_state = no_data_state;
    m_no_data_state_isSet = true;
}

bool OAIAlert::is_no_data_state_Set() const{
    return m_no_data_state_isSet;
}

bool OAIAlert::is_no_data_state_Valid() const{
    return m_no_data_state_isValid;
}

QList<OAIAlertNotification> OAIAlert::getNotifications() const {
    return m_notifications;
}
void OAIAlert::setNotifications(const QList<OAIAlertNotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIAlert::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIAlert::is_notifications_Valid() const{
    return m_notifications_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_rule_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_error_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_data_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
