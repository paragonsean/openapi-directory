/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIK8SConfig.h
 *
 * K8SConfig represents all the k8s session config
 */

#ifndef OAIK8SConfig_H
#define OAIK8SConfig_H

#include <QJsonObject>

#include "OAIK8SNode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIK8SNode;

class OAIK8SConfig : public OAIObject {
public:
    OAIK8SConfig();
    OAIK8SConfig(QString json);
    ~OAIK8SConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isClusterConfigured() const;
    void setClusterConfigured(const bool &cluster_configured);
    bool is_cluster_configured_Set() const;
    bool is_cluster_configured_Valid() const;

    QList<qint32> getConfig() const;
    void setConfig(const QList<qint32> &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getConfiguredServer() const;
    void setConfiguredServer(const QString &configured_server);
    bool is_configured_server_Set() const;
    bool is_configured_server_Valid() const;

    QString getContextName() const;
    void setContextName(const QString &context_name);
    bool is_context_name_Set() const;
    bool is_context_name_Valid() const;

    bool isInClusterConfig() const;
    void setInClusterConfig(const bool &in_cluster_config);
    bool is_in_cluster_config_Set() const;
    bool is_in_cluster_config_Valid() const;

    QString getK8sfile() const;
    void setK8sfile(const QString &k8sfile);
    bool is_k8sfile_Set() const;
    bool is_k8sfile_Valid() const;

    QList<OAIK8SNode> getNodes() const;
    void setNodes(const QList<OAIK8SNode> &nodes);
    bool is_nodes_Set() const;
    bool is_nodes_Valid() const;

    QString getServerVersion() const;
    void setServerVersion(const QString &server_version);
    bool is_server_version_Set() const;
    bool is_server_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cluster_configured;
    bool m_cluster_configured_isSet;
    bool m_cluster_configured_isValid;

    QList<qint32> m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_configured_server;
    bool m_configured_server_isSet;
    bool m_configured_server_isValid;

    QString m_context_name;
    bool m_context_name_isSet;
    bool m_context_name_isValid;

    bool m_in_cluster_config;
    bool m_in_cluster_config_isSet;
    bool m_in_cluster_config_isValid;

    QString m_k8sfile;
    bool m_k8sfile_isSet;
    bool m_k8sfile_isValid;

    QList<OAIK8SNode> m_nodes;
    bool m_nodes_isSet;
    bool m_nodes_isValid;

    QString m_server_version;
    bool m_server_version_isSet;
    bool m_server_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIK8SConfig)

#endif // OAIK8SConfig_H
