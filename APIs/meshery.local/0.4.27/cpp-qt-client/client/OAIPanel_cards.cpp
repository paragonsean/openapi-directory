/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPanel_cards.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPanel_cards::OAIPanel_cards(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPanel_cards::OAIPanel_cards() {
    this->initializeModel();
}

OAIPanel_cards::~OAIPanel_cards() {}

void OAIPanel_cards::initializeModel() {

    m_card_padding_isSet = false;
    m_card_padding_isValid = false;

    m_card_round_isSet = false;
    m_card_round_isValid = false;
}

void OAIPanel_cards::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPanel_cards::fromJsonObject(QJsonObject json) {

    m_card_padding_isValid = ::OpenAPI::fromJsonValue(m_card_padding, json[QString("cardPadding")]);
    m_card_padding_isSet = !json[QString("cardPadding")].isNull() && m_card_padding_isValid;

    m_card_round_isValid = ::OpenAPI::fromJsonValue(m_card_round, json[QString("cardRound")]);
    m_card_round_isSet = !json[QString("cardRound")].isNull() && m_card_round_isValid;
}

QString OAIPanel_cards::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPanel_cards::asJsonObject() const {
    QJsonObject obj;
    if (m_card_padding_isSet) {
        obj.insert(QString("cardPadding"), ::OpenAPI::toJsonValue(m_card_padding));
    }
    if (m_card_round_isSet) {
        obj.insert(QString("cardRound"), ::OpenAPI::toJsonValue(m_card_round));
    }
    return obj;
}

double OAIPanel_cards::getCardPadding() const {
    return m_card_padding;
}
void OAIPanel_cards::setCardPadding(const double &card_padding) {
    m_card_padding = card_padding;
    m_card_padding_isSet = true;
}

bool OAIPanel_cards::is_card_padding_Set() const{
    return m_card_padding_isSet;
}

bool OAIPanel_cards::is_card_padding_Valid() const{
    return m_card_padding_isValid;
}

double OAIPanel_cards::getCardRound() const {
    return m_card_round;
}
void OAIPanel_cards::setCardRound(const double &card_round) {
    m_card_round = card_round;
    m_card_round_isSet = true;
}

bool OAIPanel_cards::is_card_round_Set() const{
    return m_card_round_isSet;
}

bool OAIPanel_cards::is_card_round_Valid() const{
    return m_card_round_isValid;
}

bool OAIPanel_cards::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_round_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPanel_cards::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
