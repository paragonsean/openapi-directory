/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_cron_expression_isSet = false;
    m_cron_expression_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_cron_expression_isValid = ::OpenAPI::fromJsonValue(m_cron_expression, json[QString("cron_expression")]);
    m_cron_expression_isSet = !json[QString("cron_expression")].isNull() && m_cron_expression_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_cron_expression_isSet) {
        obj.insert(QString("cron_expression"), ::OpenAPI::toJsonValue(m_cron_expression));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAISchedule::getCronExpression() const {
    return m_cron_expression;
}
void OAISchedule::setCronExpression(const QString &cron_expression) {
    m_cron_expression = cron_expression;
    m_cron_expression_isSet = true;
}

bool OAISchedule::is_cron_expression_Set() const{
    return m_cron_expression_isSet;
}

bool OAISchedule::is_cron_expression_Valid() const{
    return m_cron_expression_isValid;
}

QList<qint32> OAISchedule::getId() const {
    return m_id;
}
void OAISchedule::setId(const QList<qint32> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISchedule::is_id_Set() const{
    return m_id_isSet;
}

bool OAISchedule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cron_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
