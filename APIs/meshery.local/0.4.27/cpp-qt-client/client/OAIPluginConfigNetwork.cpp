/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigNetwork::OAIPluginConfigNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigNetwork::OAIPluginConfigNetwork() {
    this->initializeModel();
}

OAIPluginConfigNetwork::~OAIPluginConfigNetwork() {}

void OAIPluginConfigNetwork::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPluginConfigNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigNetwork::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPluginConfigNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPluginConfigNetwork::getType() const {
    return m_type;
}
void OAIPluginConfigNetwork::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPluginConfigNetwork::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPluginConfigNetwork::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPluginConfigNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
