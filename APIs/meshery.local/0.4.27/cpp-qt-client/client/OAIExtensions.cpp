/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensions::OAIExtensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensions::OAIExtensions() {
    this->initializeModel();
}

OAIExtensions::~OAIExtensions() {}

void OAIExtensions::initializeModel() {

    m_graphql_isSet = false;
    m_graphql_isValid = false;

    m_navigator_isSet = false;
    m_navigator_isValid = false;

    m_user_prefs_isSet = false;
    m_user_prefs_isValid = false;
}

void OAIExtensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensions::fromJsonObject(QJsonObject json) {

    m_graphql_isValid = ::OpenAPI::fromJsonValue(m_graphql, json[QString("graphql")]);
    m_graphql_isSet = !json[QString("graphql")].isNull() && m_graphql_isValid;

    m_navigator_isValid = ::OpenAPI::fromJsonValue(m_navigator, json[QString("navigator")]);
    m_navigator_isSet = !json[QString("navigator")].isNull() && m_navigator_isValid;

    m_user_prefs_isValid = ::OpenAPI::fromJsonValue(m_user_prefs, json[QString("user_prefs")]);
    m_user_prefs_isSet = !json[QString("user_prefs")].isNull() && m_user_prefs_isValid;
}

QString OAIExtensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensions::asJsonObject() const {
    QJsonObject obj;
    if (m_graphql.size() > 0) {
        obj.insert(QString("graphql"), ::OpenAPI::toJsonValue(m_graphql));
    }
    if (m_navigator.size() > 0) {
        obj.insert(QString("navigator"), ::OpenAPI::toJsonValue(m_navigator));
    }
    if (m_user_prefs.size() > 0) {
        obj.insert(QString("user_prefs"), ::OpenAPI::toJsonValue(m_user_prefs));
    }
    return obj;
}

QList<OAIGraphQLExtension> OAIExtensions::getGraphql() const {
    return m_graphql;
}
void OAIExtensions::setGraphql(const QList<OAIGraphQLExtension> &graphql) {
    m_graphql = graphql;
    m_graphql_isSet = true;
}

bool OAIExtensions::is_graphql_Set() const{
    return m_graphql_isSet;
}

bool OAIExtensions::is_graphql_Valid() const{
    return m_graphql_isValid;
}

QList<OAINavigatorExtension> OAIExtensions::getNavigator() const {
    return m_navigator;
}
void OAIExtensions::setNavigator(const QList<OAINavigatorExtension> &navigator) {
    m_navigator = navigator;
    m_navigator_isSet = true;
}

bool OAIExtensions::is_navigator_Set() const{
    return m_navigator_isSet;
}

bool OAIExtensions::is_navigator_Valid() const{
    return m_navigator_isValid;
}

QList<OAIUserPrefsExtension> OAIExtensions::getUserPrefs() const {
    return m_user_prefs;
}
void OAIExtensions::setUserPrefs(const QList<OAIUserPrefsExtension> &user_prefs) {
    m_user_prefs = user_prefs;
    m_user_prefs_isSet = true;
}

bool OAIExtensions::is_user_prefs_Set() const{
    return m_user_prefs_isSet;
}

bool OAIExtensions::is_user_prefs_Valid() const{
    return m_user_prefs_isValid;
}

bool OAIExtensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_graphql.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigator.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_prefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
