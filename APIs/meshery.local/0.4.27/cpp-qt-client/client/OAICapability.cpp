/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapability::OAICapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapability::OAICapability() {
    this->initializeModel();
}

OAICapability::~OAICapability() {}

void OAICapability::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;
}

void OAICapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapability::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;
}

QString OAICapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapability::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    return obj;
}

QString OAICapability::getEndpoint() const {
    return m_endpoint;
}
void OAICapability::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAICapability::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAICapability::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAICapability::getFeature() const {
    return m_feature;
}
void OAICapability::setFeature(const QString &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAICapability::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAICapability::is_feature_Valid() const{
    return m_feature_isValid;
}

bool OAICapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
