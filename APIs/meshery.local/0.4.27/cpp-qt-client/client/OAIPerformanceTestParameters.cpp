/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceTestParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceTestParameters::OAIPerformanceTestParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceTestParameters::OAIPerformanceTestParameters() {
    this->initializeModel();
}

OAIPerformanceTestParameters::~OAIPerformanceTestParameters() {}

void OAIPerformanceTestParameters::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_dur_isSet = false;
    m_dur_isValid = false;

    m_load_generator_isSet = false;
    m_load_generator_isValid = false;

    m_mesh_isSet = false;
    m_mesh_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_qps_isSet = false;
    m_qps_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIPerformanceTestParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceTestParameters::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_dur_isValid = ::OpenAPI::fromJsonValue(m_dur, json[QString("dur")]);
    m_dur_isSet = !json[QString("dur")].isNull() && m_dur_isValid;

    m_load_generator_isValid = ::OpenAPI::fromJsonValue(m_load_generator, json[QString("loadGenerator")]);
    m_load_generator_isSet = !json[QString("loadGenerator")].isNull() && m_load_generator_isValid;

    m_mesh_isValid = ::OpenAPI::fromJsonValue(m_mesh, json[QString("mesh")]);
    m_mesh_isSet = !json[QString("mesh")].isNull() && m_mesh_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_qps_isValid = ::OpenAPI::fromJsonValue(m_qps, json[QString("qps")]);
    m_qps_isSet = !json[QString("qps")].isNull() && m_qps_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIPerformanceTestParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceTestParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_dur_isSet) {
        obj.insert(QString("dur"), ::OpenAPI::toJsonValue(m_dur));
    }
    if (m_load_generator_isSet) {
        obj.insert(QString("loadGenerator"), ::OpenAPI::toJsonValue(m_load_generator));
    }
    if (m_mesh_isSet) {
        obj.insert(QString("mesh"), ::OpenAPI::toJsonValue(m_mesh));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_qps_isSet) {
        obj.insert(QString("qps"), ::OpenAPI::toJsonValue(m_qps));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

qint64 OAIPerformanceTestParameters::getC() const {
    return m_c;
}
void OAIPerformanceTestParameters::setC(const qint64 &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIPerformanceTestParameters::is_c_Set() const{
    return m_c_isSet;
}

bool OAIPerformanceTestParameters::is_c_Valid() const{
    return m_c_isValid;
}

QString OAIPerformanceTestParameters::getDur() const {
    return m_dur;
}
void OAIPerformanceTestParameters::setDur(const QString &dur) {
    m_dur = dur;
    m_dur_isSet = true;
}

bool OAIPerformanceTestParameters::is_dur_Set() const{
    return m_dur_isSet;
}

bool OAIPerformanceTestParameters::is_dur_Valid() const{
    return m_dur_isValid;
}

QString OAIPerformanceTestParameters::getLoadGenerator() const {
    return m_load_generator;
}
void OAIPerformanceTestParameters::setLoadGenerator(const QString &load_generator) {
    m_load_generator = load_generator;
    m_load_generator_isSet = true;
}

bool OAIPerformanceTestParameters::is_load_generator_Set() const{
    return m_load_generator_isSet;
}

bool OAIPerformanceTestParameters::is_load_generator_Valid() const{
    return m_load_generator_isValid;
}

QString OAIPerformanceTestParameters::getMesh() const {
    return m_mesh;
}
void OAIPerformanceTestParameters::setMesh(const QString &mesh) {
    m_mesh = mesh;
    m_mesh_isSet = true;
}

bool OAIPerformanceTestParameters::is_mesh_Set() const{
    return m_mesh_isSet;
}

bool OAIPerformanceTestParameters::is_mesh_Valid() const{
    return m_mesh_isValid;
}

QString OAIPerformanceTestParameters::getName() const {
    return m_name;
}
void OAIPerformanceTestParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerformanceTestParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerformanceTestParameters::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIPerformanceTestParameters::getQps() const {
    return m_qps;
}
void OAIPerformanceTestParameters::setQps(const qint64 &qps) {
    m_qps = qps;
    m_qps_isSet = true;
}

bool OAIPerformanceTestParameters::is_qps_Set() const{
    return m_qps_isSet;
}

bool OAIPerformanceTestParameters::is_qps_Valid() const{
    return m_qps_isValid;
}

qint64 OAIPerformanceTestParameters::getT() const {
    return m_t;
}
void OAIPerformanceTestParameters::setT(const qint64 &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIPerformanceTestParameters::is_t_Set() const{
    return m_t_isSet;
}

bool OAIPerformanceTestParameters::is_t_Valid() const{
    return m_t_isValid;
}

QString OAIPerformanceTestParameters::getUrl() const {
    return m_url;
}
void OAIPerformanceTestParameters::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPerformanceTestParameters::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPerformanceTestParameters::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPerformanceTestParameters::getUuid() const {
    return m_uuid;
}
void OAIPerformanceTestParameters::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPerformanceTestParameters::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPerformanceTestParameters::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIPerformanceTestParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_generator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceTestParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
