/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePort::OAIServicePort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePort::OAIServicePort() {
    this->initializeModel();
}

OAIServicePort::~OAIServicePort() {}

void OAIServicePort::initializeModel() {

    m_app_protocol_isSet = false;
    m_app_protocol_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_port_isSet = false;
    m_node_port_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_target_port_isSet = false;
    m_target_port_isValid = false;
}

void OAIServicePort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServicePort::fromJsonObject(QJsonObject json) {

    m_app_protocol_isValid = ::OpenAPI::fromJsonValue(m_app_protocol, json[QString("appProtocol")]);
    m_app_protocol_isSet = !json[QString("appProtocol")].isNull() && m_app_protocol_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_port_isValid = ::OpenAPI::fromJsonValue(m_node_port, json[QString("nodePort")]);
    m_node_port_isSet = !json[QString("nodePort")].isNull() && m_node_port_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_target_port_isValid = ::OpenAPI::fromJsonValue(m_target_port, json[QString("targetPort")]);
    m_target_port_isSet = !json[QString("targetPort")].isNull() && m_target_port_isValid;
}

QString OAIServicePort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServicePort::asJsonObject() const {
    QJsonObject obj;
    if (m_app_protocol_isSet) {
        obj.insert(QString("appProtocol"), ::OpenAPI::toJsonValue(m_app_protocol));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_port_isSet) {
        obj.insert(QString("nodePort"), ::OpenAPI::toJsonValue(m_node_port));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_target_port.isSet()) {
        obj.insert(QString("targetPort"), ::OpenAPI::toJsonValue(m_target_port));
    }
    return obj;
}

QString OAIServicePort::getAppProtocol() const {
    return m_app_protocol;
}
void OAIServicePort::setAppProtocol(const QString &app_protocol) {
    m_app_protocol = app_protocol;
    m_app_protocol_isSet = true;
}

bool OAIServicePort::is_app_protocol_Set() const{
    return m_app_protocol_isSet;
}

bool OAIServicePort::is_app_protocol_Valid() const{
    return m_app_protocol_isValid;
}

QString OAIServicePort::getName() const {
    return m_name;
}
void OAIServicePort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServicePort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServicePort::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIServicePort::getNodePort() const {
    return m_node_port;
}
void OAIServicePort::setNodePort(const qint32 &node_port) {
    m_node_port = node_port;
    m_node_port_isSet = true;
}

bool OAIServicePort::is_node_port_Set() const{
    return m_node_port_isSet;
}

bool OAIServicePort::is_node_port_Valid() const{
    return m_node_port_isValid;
}

qint32 OAIServicePort::getPort() const {
    return m_port;
}
void OAIServicePort::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIServicePort::is_port_Set() const{
    return m_port_isSet;
}

bool OAIServicePort::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIServicePort::getProtocol() const {
    return m_protocol;
}
void OAIServicePort::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIServicePort::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIServicePort::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAIIntOrString OAIServicePort::getTargetPort() const {
    return m_target_port;
}
void OAIServicePort::setTargetPort(const OAIIntOrString &target_port) {
    m_target_port = target_port;
    m_target_port_isSet = true;
}

bool OAIServicePort::is_target_port_Set() const{
    return m_target_port_isSet;
}

bool OAIServicePort::is_target_port_Valid() const{
    return m_target_port_isValid;
}

bool OAIServicePort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_port.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServicePort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
