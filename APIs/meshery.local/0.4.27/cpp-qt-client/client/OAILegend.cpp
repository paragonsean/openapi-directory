/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegend::OAILegend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegend::OAILegend() {
    this->initializeModel();
}

OAILegend::~OAILegend() {}

void OAILegend::initializeModel() {

    m_align_as_table_isSet = false;
    m_align_as_table_isValid = false;

    m_avg_isSet = false;
    m_avg_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_hide_empty_isSet = false;
    m_hide_empty_isValid = false;

    m_hide_zero_isSet = false;
    m_hide_zero_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_right_side_isSet = false;
    m_right_side_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_side_width_isSet = false;
    m_side_width_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAILegend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegend::fromJsonObject(QJsonObject json) {

    m_align_as_table_isValid = ::OpenAPI::fromJsonValue(m_align_as_table, json[QString("alignAsTable")]);
    m_align_as_table_isSet = !json[QString("alignAsTable")].isNull() && m_align_as_table_isValid;

    m_avg_isValid = ::OpenAPI::fromJsonValue(m_avg, json[QString("avg")]);
    m_avg_isSet = !json[QString("avg")].isNull() && m_avg_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_hide_empty_isValid = ::OpenAPI::fromJsonValue(m_hide_empty, json[QString("hideEmpty")]);
    m_hide_empty_isSet = !json[QString("hideEmpty")].isNull() && m_hide_empty_isValid;

    m_hide_zero_isValid = ::OpenAPI::fromJsonValue(m_hide_zero, json[QString("hideZero")]);
    m_hide_zero_isSet = !json[QString("hideZero")].isNull() && m_hide_zero_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_right_side_isValid = ::OpenAPI::fromJsonValue(m_right_side, json[QString("rightSide")]);
    m_right_side_isSet = !json[QString("rightSide")].isNull() && m_right_side_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_side_width_isValid = ::OpenAPI::fromJsonValue(m_side_width, json[QString("sideWidth")]);
    m_side_width_isSet = !json[QString("sideWidth")].isNull() && m_side_width_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAILegend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegend::asJsonObject() const {
    QJsonObject obj;
    if (m_align_as_table_isSet) {
        obj.insert(QString("alignAsTable"), ::OpenAPI::toJsonValue(m_align_as_table));
    }
    if (m_avg_isSet) {
        obj.insert(QString("avg"), ::OpenAPI::toJsonValue(m_avg));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_hide_empty_isSet) {
        obj.insert(QString("hideEmpty"), ::OpenAPI::toJsonValue(m_hide_empty));
    }
    if (m_hide_zero_isSet) {
        obj.insert(QString("hideZero"), ::OpenAPI::toJsonValue(m_hide_zero));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_right_side_isSet) {
        obj.insert(QString("rightSide"), ::OpenAPI::toJsonValue(m_right_side));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_side_width_isSet) {
        obj.insert(QString("sideWidth"), ::OpenAPI::toJsonValue(m_side_width));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_values_isSet) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAILegend::isAlignAsTable() const {
    return m_align_as_table;
}
void OAILegend::setAlignAsTable(const bool &align_as_table) {
    m_align_as_table = align_as_table;
    m_align_as_table_isSet = true;
}

bool OAILegend::is_align_as_table_Set() const{
    return m_align_as_table_isSet;
}

bool OAILegend::is_align_as_table_Valid() const{
    return m_align_as_table_isValid;
}

bool OAILegend::isAvg() const {
    return m_avg;
}
void OAILegend::setAvg(const bool &avg) {
    m_avg = avg;
    m_avg_isSet = true;
}

bool OAILegend::is_avg_Set() const{
    return m_avg_isSet;
}

bool OAILegend::is_avg_Valid() const{
    return m_avg_isValid;
}

bool OAILegend::isCurrent() const {
    return m_current;
}
void OAILegend::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAILegend::is_current_Set() const{
    return m_current_isSet;
}

bool OAILegend::is_current_Valid() const{
    return m_current_isValid;
}

bool OAILegend::isHideEmpty() const {
    return m_hide_empty;
}
void OAILegend::setHideEmpty(const bool &hide_empty) {
    m_hide_empty = hide_empty;
    m_hide_empty_isSet = true;
}

bool OAILegend::is_hide_empty_Set() const{
    return m_hide_empty_isSet;
}

bool OAILegend::is_hide_empty_Valid() const{
    return m_hide_empty_isValid;
}

bool OAILegend::isHideZero() const {
    return m_hide_zero;
}
void OAILegend::setHideZero(const bool &hide_zero) {
    m_hide_zero = hide_zero;
    m_hide_zero_isSet = true;
}

bool OAILegend::is_hide_zero_Set() const{
    return m_hide_zero_isSet;
}

bool OAILegend::is_hide_zero_Valid() const{
    return m_hide_zero_isValid;
}

bool OAILegend::isMax() const {
    return m_max;
}
void OAILegend::setMax(const bool &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAILegend::is_max_Set() const{
    return m_max_isSet;
}

bool OAILegend::is_max_Valid() const{
    return m_max_isValid;
}

bool OAILegend::isMin() const {
    return m_min;
}
void OAILegend::setMin(const bool &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAILegend::is_min_Set() const{
    return m_min_isSet;
}

bool OAILegend::is_min_Valid() const{
    return m_min_isValid;
}

bool OAILegend::isRightSide() const {
    return m_right_side;
}
void OAILegend::setRightSide(const bool &right_side) {
    m_right_side = right_side;
    m_right_side_isSet = true;
}

bool OAILegend::is_right_side_Set() const{
    return m_right_side_isSet;
}

bool OAILegend::is_right_side_Valid() const{
    return m_right_side_isValid;
}

bool OAILegend::isShow() const {
    return m_show;
}
void OAILegend::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAILegend::is_show_Set() const{
    return m_show_isSet;
}

bool OAILegend::is_show_Valid() const{
    return m_show_isValid;
}

qint32 OAILegend::getSideWidth() const {
    return m_side_width;
}
void OAILegend::setSideWidth(const qint32 &side_width) {
    m_side_width = side_width;
    m_side_width_isSet = true;
}

bool OAILegend::is_side_width_Set() const{
    return m_side_width_isSet;
}

bool OAILegend::is_side_width_Valid() const{
    return m_side_width_isValid;
}

bool OAILegend::isTotal() const {
    return m_total;
}
void OAILegend::setTotal(const bool &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAILegend::is_total_Set() const{
    return m_total_isSet;
}

bool OAILegend::is_total_Valid() const{
    return m_total_isValid;
}

bool OAILegend::isValues() const {
    return m_values;
}
void OAILegend::setValues(const bool &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAILegend::is_values_Set() const{
    return m_values_isSet;
}

bool OAILegend::is_values_Valid() const{
    return m_values_isValid;
}

bool OAILegend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_align_as_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_zero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
