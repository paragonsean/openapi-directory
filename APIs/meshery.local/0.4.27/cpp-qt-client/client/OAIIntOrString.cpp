/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntOrString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntOrString::OAIIntOrString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntOrString::OAIIntOrString() {
    this->initializeModel();
}

OAIIntOrString::~OAIIntOrString() {}

void OAIIntOrString::initializeModel() {

    m_int_val_isSet = false;
    m_int_val_isValid = false;

    m_str_val_isSet = false;
    m_str_val_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIntOrString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntOrString::fromJsonObject(QJsonObject json) {

    m_int_val_isValid = ::OpenAPI::fromJsonValue(m_int_val, json[QString("IntVal")]);
    m_int_val_isSet = !json[QString("IntVal")].isNull() && m_int_val_isValid;

    m_str_val_isValid = ::OpenAPI::fromJsonValue(m_str_val, json[QString("StrVal")]);
    m_str_val_isSet = !json[QString("StrVal")].isNull() && m_str_val_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIIntOrString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntOrString::asJsonObject() const {
    QJsonObject obj;
    if (m_int_val_isSet) {
        obj.insert(QString("IntVal"), ::OpenAPI::toJsonValue(m_int_val));
    }
    if (m_str_val_isSet) {
        obj.insert(QString("StrVal"), ::OpenAPI::toJsonValue(m_str_val));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIIntOrString::getIntVal() const {
    return m_int_val;
}
void OAIIntOrString::setIntVal(const qint32 &int_val) {
    m_int_val = int_val;
    m_int_val_isSet = true;
}

bool OAIIntOrString::is_int_val_Set() const{
    return m_int_val_isSet;
}

bool OAIIntOrString::is_int_val_Valid() const{
    return m_int_val_isValid;
}

QString OAIIntOrString::getStrVal() const {
    return m_str_val;
}
void OAIIntOrString::setStrVal(const QString &str_val) {
    m_str_val = str_val;
    m_str_val_isSet = true;
}

bool OAIIntOrString::is_str_val_Set() const{
    return m_str_val_isSet;
}

bool OAIIntOrString::is_str_val_Valid() const{
    return m_str_val_isValid;
}

qint64 OAIIntOrString::getType() const {
    return m_type;
}
void OAIIntOrString::setType(const qint64 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIntOrString::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIntOrString::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIntOrString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_int_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_str_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntOrString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
