/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIColumnStyle.h
 *
 * for a table
 */

#ifndef OAIColumnStyle_H
#define OAIColumnStyle_H

#include <QJsonObject>

#include "OAIValueMap.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIValueMap;

class OAIColumnStyle : public OAIObject {
public:
    OAIColumnStyle();
    OAIColumnStyle(QString json);
    ~OAIColumnStyle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlias() const;
    void setAlias(const QString &alias);
    bool is_alias_Set() const;
    bool is_alias_Valid() const;

    QString getColorMode() const;
    void setColorMode(const QString &color_mode);
    bool is_color_mode_Set() const;
    bool is_color_mode_Valid() const;

    QList<QString> getColors() const;
    void setColors(const QList<QString> &colors);
    bool is_colors_Set() const;
    bool is_colors_Valid() const;

    QString getDateFormat() const;
    void setDateFormat(const QString &date_format);
    bool is_date_format_Set() const;
    bool is_date_format_Valid() const;

    qint32 getDecimals() const;
    void setDecimals(const qint32 &decimals);
    bool is_decimals_Set() const;
    bool is_decimals_Valid() const;

    bool isLink() const;
    void setLink(const bool &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    bool isLinkTargetBlank() const;
    void setLinkTargetBlank(const bool &link_target_blank);
    bool is_link_target_blank_Set() const;
    bool is_link_target_blank_Valid() const;

    QString getLinkTooltip() const;
    void setLinkTooltip(const QString &link_tooltip);
    bool is_link_tooltip_Set() const;
    bool is_link_tooltip_Valid() const;

    QString getLinkUrl() const;
    void setLinkUrl(const QString &link_url);
    bool is_link_url_Set() const;
    bool is_link_url_Valid() const;

    qint64 getMappingType() const;
    void setMappingType(const qint64 &mapping_type);
    bool is_mapping_type_Set() const;
    bool is_mapping_type_Valid() const;

    QString getPattern() const;
    void setPattern(const QString &pattern);
    bool is_pattern_Set() const;
    bool is_pattern_Valid() const;

    QList<QString> getThresholds() const;
    void setThresholds(const QList<QString> &thresholds);
    bool is_thresholds_Set() const;
    bool is_thresholds_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QList<OAIValueMap> getValueMaps() const;
    void setValueMaps(const QList<OAIValueMap> &value_maps);
    bool is_value_maps_Set() const;
    bool is_value_maps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alias;
    bool m_alias_isSet;
    bool m_alias_isValid;

    QString m_color_mode;
    bool m_color_mode_isSet;
    bool m_color_mode_isValid;

    QList<QString> m_colors;
    bool m_colors_isSet;
    bool m_colors_isValid;

    QString m_date_format;
    bool m_date_format_isSet;
    bool m_date_format_isValid;

    qint32 m_decimals;
    bool m_decimals_isSet;
    bool m_decimals_isValid;

    bool m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    bool m_link_target_blank;
    bool m_link_target_blank_isSet;
    bool m_link_target_blank_isValid;

    QString m_link_tooltip;
    bool m_link_tooltip_isSet;
    bool m_link_tooltip_isValid;

    QString m_link_url;
    bool m_link_url_isSet;
    bool m_link_url_isValid;

    qint64 m_mapping_type;
    bool m_mapping_type_isSet;
    bool m_mapping_type_isValid;

    QString m_pattern;
    bool m_pattern_isSet;
    bool m_pattern_isValid;

    QList<QString> m_thresholds;
    bool m_thresholds_isSet;
    bool m_thresholds_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QList<OAIValueMap> m_value_maps;
    bool m_value_maps_isSet;
    bool m_value_maps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIColumnStyle)

#endif // OAIColumnStyle_H
