/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldConfig_defaults_threshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldConfig_defaults_threshold::OAIFieldConfig_defaults_threshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldConfig_defaults_threshold::OAIFieldConfig_defaults_threshold() {
    this->initializeModel();
}

OAIFieldConfig_defaults_threshold::~OAIFieldConfig_defaults_threshold() {}

void OAIFieldConfig_defaults_threshold::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIFieldConfig_defaults_threshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldConfig_defaults_threshold::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIFieldConfig_defaults_threshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldConfig_defaults_threshold::asJsonObject() const {
    QJsonObject obj;
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

QString OAIFieldConfig_defaults_threshold::getMode() const {
    return m_mode;
}
void OAIFieldConfig_defaults_threshold::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIFieldConfig_defaults_threshold::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIFieldConfig_defaults_threshold::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAIFieldConfig_defaults_threshold_steps_inner> OAIFieldConfig_defaults_threshold::getSteps() const {
    return m_steps;
}
void OAIFieldConfig_defaults_threshold::setSteps(const QList<OAIFieldConfig_defaults_threshold_steps_inner> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIFieldConfig_defaults_threshold::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIFieldConfig_defaults_threshold::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIFieldConfig_defaults_threshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldConfig_defaults_threshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
