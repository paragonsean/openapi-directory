/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMesheryPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMesheryPattern::OAIMesheryPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMesheryPattern::OAIMesheryPattern() {
    this->initializeModel();
}

OAIMesheryPattern::~OAIMesheryPattern() {}

void OAIMesheryPattern::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pattern_file_isSet = false;
    m_pattern_file_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIMesheryPattern::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMesheryPattern::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pattern_file_isValid = ::OpenAPI::fromJsonValue(m_pattern_file, json[QString("pattern_file")]);
    m_pattern_file_isSet = !json[QString("pattern_file")].isNull() && m_pattern_file_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIMesheryPattern::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMesheryPattern::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pattern_file_isSet) {
        obj.insert(QString("pattern_file"), ::OpenAPI::toJsonValue(m_pattern_file));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIMesheryPattern::getCreatedAt() const {
    return m_created_at;
}
void OAIMesheryPattern::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMesheryPattern::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMesheryPattern::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<qint32> OAIMesheryPattern::getId() const {
    return m_id;
}
void OAIMesheryPattern::setId(const QList<qint32> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMesheryPattern::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMesheryPattern::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIObject> OAIMesheryPattern::getLocation() const {
    return m_location;
}
void OAIMesheryPattern::setLocation(const QMap<QString, OAIObject> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMesheryPattern::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMesheryPattern::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMesheryPattern::getName() const {
    return m_name;
}
void OAIMesheryPattern::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMesheryPattern::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMesheryPattern::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMesheryPattern::getPatternFile() const {
    return m_pattern_file;
}
void OAIMesheryPattern::setPatternFile(const QString &pattern_file) {
    m_pattern_file = pattern_file;
    m_pattern_file_isSet = true;
}

bool OAIMesheryPattern::is_pattern_file_Set() const{
    return m_pattern_file_isSet;
}

bool OAIMesheryPattern::is_pattern_file_Valid() const{
    return m_pattern_file_isValid;
}

QDateTime OAIMesheryPattern::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMesheryPattern::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMesheryPattern::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMesheryPattern::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMesheryPattern::getUserId() const {
    return m_user_id;
}
void OAIMesheryPattern::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMesheryPattern::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMesheryPattern::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIMesheryPattern::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMesheryPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
