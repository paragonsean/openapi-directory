/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceTestConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceTestConfig::OAIPerformanceTestConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceTestConfig::OAIPerformanceTestConfig() {
    this->initializeModel();
}

OAIPerformanceTestConfig::~OAIPerformanceTestConfig() {}

void OAIPerformanceTestConfig::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_smp_version_isSet = false;
    m_smp_version_isValid = false;
}

void OAIPerformanceTestConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceTestConfig::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_smp_version_isValid = ::OpenAPI::fromJsonValue(m_smp_version, json[QString("smp_version")]);
    m_smp_version_isSet = !json[QString("smp_version")].isNull() && m_smp_version_isValid;
}

QString OAIPerformanceTestConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceTestConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_smp_version_isSet) {
        obj.insert(QString("smp_version"), ::OpenAPI::toJsonValue(m_smp_version));
    }
    return obj;
}

QList<OAIPerformanceTestConfig_Client> OAIPerformanceTestConfig::getClients() const {
    return m_clients;
}
void OAIPerformanceTestConfig::setClients(const QList<OAIPerformanceTestConfig_Client> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIPerformanceTestConfig::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIPerformanceTestConfig::is_clients_Valid() const{
    return m_clients_isValid;
}

QString OAIPerformanceTestConfig::getDuration() const {
    return m_duration;
}
void OAIPerformanceTestConfig::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPerformanceTestConfig::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPerformanceTestConfig::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIPerformanceTestConfig::getId() const {
    return m_id;
}
void OAIPerformanceTestConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceTestConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceTestConfig::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIPerformanceTestConfig::getLabels() const {
    return m_labels;
}
void OAIPerformanceTestConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPerformanceTestConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPerformanceTestConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPerformanceTestConfig::getName() const {
    return m_name;
}
void OAIPerformanceTestConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerformanceTestConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerformanceTestConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPerformanceTestConfig::getSmpVersion() const {
    return m_smp_version;
}
void OAIPerformanceTestConfig::setSmpVersion(const QString &smp_version) {
    m_smp_version = smp_version;
    m_smp_version_isSet = true;
}

bool OAIPerformanceTestConfig::is_smp_version_Set() const{
    return m_smp_version_isSet;
}

bool OAIPerformanceTestConfig::is_smp_version_Valid() const{
    return m_smp_version_isValid;
}

bool OAIPerformanceTestConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smp_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceTestConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
