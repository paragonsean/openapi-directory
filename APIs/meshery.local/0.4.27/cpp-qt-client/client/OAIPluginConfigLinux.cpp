/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigLinux.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigLinux::OAIPluginConfigLinux(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigLinux::OAIPluginConfigLinux() {
    this->initializeModel();
}

OAIPluginConfigLinux::~OAIPluginConfigLinux() {}

void OAIPluginConfigLinux::initializeModel() {

    m_allow_all_devices_isSet = false;
    m_allow_all_devices_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;
}

void OAIPluginConfigLinux::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigLinux::fromJsonObject(QJsonObject json) {

    m_allow_all_devices_isValid = ::OpenAPI::fromJsonValue(m_allow_all_devices, json[QString("AllowAllDevices")]);
    m_allow_all_devices_isSet = !json[QString("AllowAllDevices")].isNull() && m_allow_all_devices_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("Devices")]);
    m_devices_isSet = !json[QString("Devices")].isNull() && m_devices_isValid;
}

QString OAIPluginConfigLinux::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigLinux::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_all_devices_isSet) {
        obj.insert(QString("AllowAllDevices"), ::OpenAPI::toJsonValue(m_allow_all_devices));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("Devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    return obj;
}

bool OAIPluginConfigLinux::isAllowAllDevices() const {
    return m_allow_all_devices;
}
void OAIPluginConfigLinux::setAllowAllDevices(const bool &allow_all_devices) {
    m_allow_all_devices = allow_all_devices;
    m_allow_all_devices_isSet = true;
}

bool OAIPluginConfigLinux::is_allow_all_devices_Set() const{
    return m_allow_all_devices_isSet;
}

bool OAIPluginConfigLinux::is_allow_all_devices_Valid() const{
    return m_allow_all_devices_isValid;
}

QList<QString> OAIPluginConfigLinux::getCapabilities() const {
    return m_capabilities;
}
void OAIPluginConfigLinux::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIPluginConfigLinux::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIPluginConfigLinux::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList<OAIPluginDevice> OAIPluginConfigLinux::getDevices() const {
    return m_devices;
}
void OAIPluginConfigLinux::setDevices(const QList<OAIPluginDevice> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIPluginConfigLinux::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIPluginConfigLinux::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAIPluginConfigLinux::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_all_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigLinux::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_all_devices_isValid && m_capabilities_isValid && m_devices_isValid && true;
}

} // namespace OpenAPI
