/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeCreateBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeCreateBody::OAIVolumeCreateBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeCreateBody::OAIVolumeCreateBody() {
    this->initializeModel();
}

OAIVolumeCreateBody::~OAIVolumeCreateBody() {}

void OAIVolumeCreateBody::initializeModel() {

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_driver_opts_isSet = false;
    m_driver_opts_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIVolumeCreateBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeCreateBody::fromJsonObject(QJsonObject json) {

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("Driver")]);
    m_driver_isSet = !json[QString("Driver")].isNull() && m_driver_isValid;

    m_driver_opts_isValid = ::OpenAPI::fromJsonValue(m_driver_opts, json[QString("DriverOpts")]);
    m_driver_opts_isSet = !json[QString("DriverOpts")].isNull() && m_driver_opts_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("Labels")]);
    m_labels_isSet = !json[QString("Labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIVolumeCreateBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeCreateBody::asJsonObject() const {
    QJsonObject obj;
    if (m_driver_isSet) {
        obj.insert(QString("Driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_driver_opts.size() > 0) {
        obj.insert(QString("DriverOpts"), ::OpenAPI::toJsonValue(m_driver_opts));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("Labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIVolumeCreateBody::getDriver() const {
    return m_driver;
}
void OAIVolumeCreateBody::setDriver(const QString &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAIVolumeCreateBody::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAIVolumeCreateBody::is_driver_Valid() const{
    return m_driver_isValid;
}

QMap<QString, QString> OAIVolumeCreateBody::getDriverOpts() const {
    return m_driver_opts;
}
void OAIVolumeCreateBody::setDriverOpts(const QMap<QString, QString> &driver_opts) {
    m_driver_opts = driver_opts;
    m_driver_opts_isSet = true;
}

bool OAIVolumeCreateBody::is_driver_opts_Set() const{
    return m_driver_opts_isSet;
}

bool OAIVolumeCreateBody::is_driver_opts_Valid() const{
    return m_driver_opts_isValid;
}

QMap<QString, QString> OAIVolumeCreateBody::getLabels() const {
    return m_labels;
}
void OAIVolumeCreateBody::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIVolumeCreateBody::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIVolumeCreateBody::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIVolumeCreateBody::getName() const {
    return m_name;
}
void OAIVolumeCreateBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolumeCreateBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolumeCreateBody::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIVolumeCreateBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_opts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeCreateBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_driver_isValid && m_driver_opts_isValid && m_labels_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
