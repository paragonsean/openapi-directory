/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPluginConfig.h
 *
 * 
 */

#ifndef OAIPluginConfig_H
#define OAIPluginConfig_H

#include <QJsonObject>

#include "OAIPluginConfigArgs.h"
#include "OAIPluginConfigInterface.h"
#include "OAIPluginConfigLinux.h"
#include "OAIPluginConfigNetwork.h"
#include "OAIPluginConfigRootfs.h"
#include "OAIPluginConfigUser.h"
#include "OAIPluginEnv.h"
#include "OAIPluginMount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPluginConfigArgs;
class OAIPluginEnv;
class OAIPluginConfigInterface;
class OAIPluginConfigLinux;
class OAIPluginMount;
class OAIPluginConfigNetwork;
class OAIPluginConfigUser;
class OAIPluginConfigRootfs;

class OAIPluginConfig : public OAIObject {
public:
    OAIPluginConfig();
    OAIPluginConfig(QString json);
    ~OAIPluginConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPluginConfigArgs getArgs() const;
    void setArgs(const OAIPluginConfigArgs &args);
    bool is_args_Set() const;
    bool is_args_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDockerVersion() const;
    void setDockerVersion(const QString &docker_version);
    bool is_docker_version_Set() const;
    bool is_docker_version_Valid() const;

    QString getDocumentation() const;
    void setDocumentation(const QString &documentation);
    bool is_documentation_Set() const;
    bool is_documentation_Valid() const;

    QList<QString> getEntrypoint() const;
    void setEntrypoint(const QList<QString> &entrypoint);
    bool is_entrypoint_Set() const;
    bool is_entrypoint_Valid() const;

    QList<OAIPluginEnv> getEnv() const;
    void setEnv(const QList<OAIPluginEnv> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    OAIPluginConfigInterface getInterface() const;
    void setInterface(const OAIPluginConfigInterface &interface);
    bool is_interface_Set() const;
    bool is_interface_Valid() const;

    bool isIpcHost() const;
    void setIpcHost(const bool &ipc_host);
    bool is_ipc_host_Set() const;
    bool is_ipc_host_Valid() const;

    OAIPluginConfigLinux getRLinux() const;
    void setRLinux(const OAIPluginConfigLinux &r_linux);
    bool is_r_linux_Set() const;
    bool is_r_linux_Valid() const;

    QList<OAIPluginMount> getMounts() const;
    void setMounts(const QList<OAIPluginMount> &mounts);
    bool is_mounts_Set() const;
    bool is_mounts_Valid() const;

    OAIPluginConfigNetwork getNetwork() const;
    void setNetwork(const OAIPluginConfigNetwork &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    bool isPidHost() const;
    void setPidHost(const bool &pid_host);
    bool is_pid_host_Set() const;
    bool is_pid_host_Valid() const;

    QString getPropagatedMount() const;
    void setPropagatedMount(const QString &propagated_mount);
    bool is_propagated_mount_Set() const;
    bool is_propagated_mount_Valid() const;

    OAIPluginConfigUser getUser() const;
    void setUser(const OAIPluginConfigUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getWorkDir() const;
    void setWorkDir(const QString &work_dir);
    bool is_work_dir_Set() const;
    bool is_work_dir_Valid() const;

    OAIPluginConfigRootfs getRootfs() const;
    void setRootfs(const OAIPluginConfigRootfs &rootfs);
    bool is_rootfs_Set() const;
    bool is_rootfs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPluginConfigArgs m_args;
    bool m_args_isSet;
    bool m_args_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_docker_version;
    bool m_docker_version_isSet;
    bool m_docker_version_isValid;

    QString m_documentation;
    bool m_documentation_isSet;
    bool m_documentation_isValid;

    QList<QString> m_entrypoint;
    bool m_entrypoint_isSet;
    bool m_entrypoint_isValid;

    QList<OAIPluginEnv> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    OAIPluginConfigInterface m_interface;
    bool m_interface_isSet;
    bool m_interface_isValid;

    bool m_ipc_host;
    bool m_ipc_host_isSet;
    bool m_ipc_host_isValid;

    OAIPluginConfigLinux m_r_linux;
    bool m_r_linux_isSet;
    bool m_r_linux_isValid;

    QList<OAIPluginMount> m_mounts;
    bool m_mounts_isSet;
    bool m_mounts_isValid;

    OAIPluginConfigNetwork m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    bool m_pid_host;
    bool m_pid_host_isSet;
    bool m_pid_host_isValid;

    QString m_propagated_mount;
    bool m_propagated_mount_isSet;
    bool m_propagated_mount_isValid;

    OAIPluginConfigUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_work_dir;
    bool m_work_dir_isSet;
    bool m_work_dir_isValid;

    OAIPluginConfigRootfs m_rootfs;
    bool m_rootfs_isSet;
    bool m_rootfs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPluginConfig)

#endif // OAIPluginConfig_H
