/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertEvaluator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertEvaluator::OAIAlertEvaluator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertEvaluator::OAIAlertEvaluator() {
    this->initializeModel();
}

OAIAlertEvaluator::~OAIAlertEvaluator() {}

void OAIAlertEvaluator::initializeModel() {

    m_params_isSet = false;
    m_params_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAlertEvaluator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertEvaluator::fromJsonObject(QJsonObject json) {

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAlertEvaluator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertEvaluator::asJsonObject() const {
    QJsonObject obj;
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<double> OAIAlertEvaluator::getParams() const {
    return m_params;
}
void OAIAlertEvaluator::setParams(const QList<double> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAlertEvaluator::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAlertEvaluator::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIAlertEvaluator::getType() const {
    return m_type;
}
void OAIAlertEvaluator::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlertEvaluator::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlertEvaluator::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAlertEvaluator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertEvaluator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
