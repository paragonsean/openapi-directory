/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigInterface::OAIPluginConfigInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigInterface::OAIPluginConfigInterface() {
    this->initializeModel();
}

OAIPluginConfigInterface::~OAIPluginConfigInterface() {}

void OAIPluginConfigInterface::initializeModel() {

    m_protocol_scheme_isSet = false;
    m_protocol_scheme_isValid = false;

    m_socket_isSet = false;
    m_socket_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIPluginConfigInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigInterface::fromJsonObject(QJsonObject json) {

    m_protocol_scheme_isValid = ::OpenAPI::fromJsonValue(m_protocol_scheme, json[QString("ProtocolScheme")]);
    m_protocol_scheme_isSet = !json[QString("ProtocolScheme")].isNull() && m_protocol_scheme_isValid;

    m_socket_isValid = ::OpenAPI::fromJsonValue(m_socket, json[QString("Socket")]);
    m_socket_isSet = !json[QString("Socket")].isNull() && m_socket_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("Types")]);
    m_types_isSet = !json[QString("Types")].isNull() && m_types_isValid;
}

QString OAIPluginConfigInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_protocol_scheme_isSet) {
        obj.insert(QString("ProtocolScheme"), ::OpenAPI::toJsonValue(m_protocol_scheme));
    }
    if (m_socket_isSet) {
        obj.insert(QString("Socket"), ::OpenAPI::toJsonValue(m_socket));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("Types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIPluginConfigInterface::getProtocolScheme() const {
    return m_protocol_scheme;
}
void OAIPluginConfigInterface::setProtocolScheme(const QString &protocol_scheme) {
    m_protocol_scheme = protocol_scheme;
    m_protocol_scheme_isSet = true;
}

bool OAIPluginConfigInterface::is_protocol_scheme_Set() const{
    return m_protocol_scheme_isSet;
}

bool OAIPluginConfigInterface::is_protocol_scheme_Valid() const{
    return m_protocol_scheme_isValid;
}

QString OAIPluginConfigInterface::getSocket() const {
    return m_socket;
}
void OAIPluginConfigInterface::setSocket(const QString &socket) {
    m_socket = socket;
    m_socket_isSet = true;
}

bool OAIPluginConfigInterface::is_socket_Set() const{
    return m_socket_isSet;
}

bool OAIPluginConfigInterface::is_socket_Valid() const{
    return m_socket_isValid;
}

QList<OAIPluginInterfaceType> OAIPluginConfigInterface::getTypes() const {
    return m_types;
}
void OAIPluginConfigInterface::setTypes(const QList<OAIPluginInterfaceType> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIPluginConfigInterface::is_types_Set() const{
    return m_types_isSet;
}

bool OAIPluginConfigInterface::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIPluginConfigInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocol_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_socket_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
