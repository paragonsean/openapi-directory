/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISchedulesAPIApi_H
#define OAI_OAISchedulesAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISchedule.h"
#include "OAISchedulesAPIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISchedulesAPIApi : public QObject {
    Q_OBJECT

public:
    OAISchedulesAPIApi(const int timeOut = 0);
    ~OAISchedulesAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idDeleteSchedules(const QString &id);


    virtual void idGetSchedules();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetSingleSchedule(const QString &id);


    virtual void idPostSchedules();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteSchedulesCallback(OAIHttpRequestWorker *worker);
    void idGetSchedulesCallback(OAIHttpRequestWorker *worker);
    void idGetSingleScheduleCallback(OAIHttpRequestWorker *worker);
    void idPostSchedulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteSchedulesSignal(OAISchedulesAPIResponse summary);
    void idGetSchedulesSignal(OAISchedulesAPIResponse summary);
    void idGetSingleScheduleSignal(OAISchedule summary);
    void idPostSchedulesSignal(OAISchedule summary);


    void idDeleteSchedulesSignalFull(OAIHttpRequestWorker *worker, OAISchedulesAPIResponse summary);
    void idGetSchedulesSignalFull(OAIHttpRequestWorker *worker, OAISchedulesAPIResponse summary);
    void idGetSingleScheduleSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);
    void idPostSchedulesSignalFull(OAIHttpRequestWorker *worker, OAISchedule summary);

    Q_DECL_DEPRECATED_X("Use idDeleteSchedulesSignalError() instead")
    void idDeleteSchedulesSignalE(OAISchedulesAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteSchedulesSignalError(OAISchedulesAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSchedulesSignalError() instead")
    void idGetSchedulesSignalE(OAISchedulesAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSchedulesSignalError(OAISchedulesAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSingleScheduleSignalError() instead")
    void idGetSingleScheduleSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSingleScheduleSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostSchedulesSignalError() instead")
    void idPostSchedulesSignalE(OAISchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostSchedulesSignalError(OAISchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteSchedulesSignalErrorFull() instead")
    void idDeleteSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSchedulesSignalErrorFull() instead")
    void idGetSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSingleScheduleSignalErrorFull() instead")
    void idGetSingleScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSingleScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostSchedulesSignalErrorFull() instead")
    void idPostSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
