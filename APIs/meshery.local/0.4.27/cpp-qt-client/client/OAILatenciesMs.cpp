/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatenciesMs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatenciesMs::OAILatenciesMs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatenciesMs::OAILatenciesMs() {
    this->initializeModel();
}

OAILatenciesMs::~OAILatenciesMs() {}

void OAILatenciesMs::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_p50_isSet = false;
    m_p50_isValid = false;

    m_p90_isSet = false;
    m_p90_isValid = false;

    m_p99_isSet = false;
    m_p99_isValid = false;
}

void OAILatenciesMs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatenciesMs::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("Average")]);
    m_average_isSet = !json[QString("Average")].isNull() && m_average_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("Min")]);
    m_min_isSet = !json[QString("Min")].isNull() && m_min_isValid;

    m_p50_isValid = ::OpenAPI::fromJsonValue(m_p50, json[QString("P50")]);
    m_p50_isSet = !json[QString("P50")].isNull() && m_p50_isValid;

    m_p90_isValid = ::OpenAPI::fromJsonValue(m_p90, json[QString("P90")]);
    m_p90_isSet = !json[QString("P90")].isNull() && m_p90_isValid;

    m_p99_isValid = ::OpenAPI::fromJsonValue(m_p99, json[QString("P99")]);
    m_p99_isSet = !json[QString("P99")].isNull() && m_p99_isValid;
}

QString OAILatenciesMs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatenciesMs::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("Average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("Min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_p50_isSet) {
        obj.insert(QString("P50"), ::OpenAPI::toJsonValue(m_p50));
    }
    if (m_p90_isSet) {
        obj.insert(QString("P90"), ::OpenAPI::toJsonValue(m_p90));
    }
    if (m_p99_isSet) {
        obj.insert(QString("P99"), ::OpenAPI::toJsonValue(m_p99));
    }
    return obj;
}

double OAILatenciesMs::getAverage() const {
    return m_average;
}
void OAILatenciesMs::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAILatenciesMs::is_average_Set() const{
    return m_average_isSet;
}

bool OAILatenciesMs::is_average_Valid() const{
    return m_average_isValid;
}

double OAILatenciesMs::getMax() const {
    return m_max;
}
void OAILatenciesMs::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAILatenciesMs::is_max_Set() const{
    return m_max_isSet;
}

bool OAILatenciesMs::is_max_Valid() const{
    return m_max_isValid;
}

double OAILatenciesMs::getMin() const {
    return m_min;
}
void OAILatenciesMs::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAILatenciesMs::is_min_Set() const{
    return m_min_isSet;
}

bool OAILatenciesMs::is_min_Valid() const{
    return m_min_isValid;
}

double OAILatenciesMs::getP50() const {
    return m_p50;
}
void OAILatenciesMs::setP50(const double &p50) {
    m_p50 = p50;
    m_p50_isSet = true;
}

bool OAILatenciesMs::is_p50_Set() const{
    return m_p50_isSet;
}

bool OAILatenciesMs::is_p50_Valid() const{
    return m_p50_isValid;
}

double OAILatenciesMs::getP90() const {
    return m_p90;
}
void OAILatenciesMs::setP90(const double &p90) {
    m_p90 = p90;
    m_p90_isSet = true;
}

bool OAILatenciesMs::is_p90_Set() const{
    return m_p90_isSet;
}

bool OAILatenciesMs::is_p90_Valid() const{
    return m_p90_isValid;
}

double OAILatenciesMs::getP99() const {
    return m_p99;
}
void OAILatenciesMs::setP99(const double &p99) {
    m_p99 = p99;
    m_p99_isSet = true;
}

bool OAILatenciesMs::is_p99_Set() const{
    return m_p99_isSet;
}

bool OAILatenciesMs::is_p99_Valid() const{
    return m_p99_isValid;
}

bool OAILatenciesMs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p99_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatenciesMs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
