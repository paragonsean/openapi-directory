/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraphQLExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraphQLExtension::OAIGraphQLExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraphQLExtension::OAIGraphQLExtension() {
    this->initializeModel();
}

OAIGraphQLExtension::~OAIGraphQLExtension() {}

void OAIGraphQLExtension::initializeModel() {

    m_component_isSet = false;
    m_component_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIGraphQLExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraphQLExtension::fromJsonObject(QJsonObject json) {

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIGraphQLExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraphQLExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_component_isSet) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIGraphQLExtension::getComponent() const {
    return m_component;
}
void OAIGraphQLExtension::setComponent(const QString &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIGraphQLExtension::is_component_Set() const{
    return m_component_isSet;
}

bool OAIGraphQLExtension::is_component_Valid() const{
    return m_component_isValid;
}

QString OAIGraphQLExtension::getPath() const {
    return m_path;
}
void OAIGraphQLExtension::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGraphQLExtension::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGraphQLExtension::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIGraphQLExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraphQLExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
