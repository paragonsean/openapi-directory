/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginDevice::OAIPluginDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginDevice::OAIPluginDevice() {
    this->initializeModel();
}

OAIPluginDevice::~OAIPluginDevice() {}

void OAIPluginDevice::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_settable_isSet = false;
    m_settable_isValid = false;
}

void OAIPluginDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginDevice::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_settable_isValid = ::OpenAPI::fromJsonValue(m_settable, json[QString("Settable")]);
    m_settable_isSet = !json[QString("Settable")].isNull() && m_settable_isValid;
}

QString OAIPluginDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_settable.size() > 0) {
        obj.insert(QString("Settable"), ::OpenAPI::toJsonValue(m_settable));
    }
    return obj;
}

QString OAIPluginDevice::getDescription() const {
    return m_description;
}
void OAIPluginDevice::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginDevice::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginDevice::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPluginDevice::getName() const {
    return m_name;
}
void OAIPluginDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPluginDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPluginDevice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPluginDevice::getPath() const {
    return m_path;
}
void OAIPluginDevice::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPluginDevice::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPluginDevice::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIPluginDevice::getSettable() const {
    return m_settable;
}
void OAIPluginDevice::setSettable(const QList<QString> &settable) {
    m_settable = settable;
    m_settable_isSet = true;
}

bool OAIPluginDevice::is_settable_Set() const{
    return m_settable_isSet;
}

bool OAIPluginDevice::is_settable_Valid() const{
    return m_settable_isValid;
}

bool OAIPluginDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_path_isValid && m_settable_isValid && true;
}

} // namespace OpenAPI
