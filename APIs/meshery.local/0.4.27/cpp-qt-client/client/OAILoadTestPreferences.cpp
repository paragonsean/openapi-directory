/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadTestPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadTestPreferences::OAILoadTestPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadTestPreferences::OAILoadTestPreferences() {
    this->initializeModel();
}

OAILoadTestPreferences::~OAILoadTestPreferences() {}

void OAILoadTestPreferences::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_gen_isSet = false;
    m_gen_isValid = false;

    m_qps_isSet = false;
    m_qps_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;
}

void OAILoadTestPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadTestPreferences::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_gen_isValid = ::OpenAPI::fromJsonValue(m_gen, json[QString("gen")]);
    m_gen_isSet = !json[QString("gen")].isNull() && m_gen_isValid;

    m_qps_isValid = ::OpenAPI::fromJsonValue(m_qps, json[QString("qps")]);
    m_qps_isSet = !json[QString("qps")].isNull() && m_qps_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;
}

QString OAILoadTestPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadTestPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_gen_isSet) {
        obj.insert(QString("gen"), ::OpenAPI::toJsonValue(m_gen));
    }
    if (m_qps_isSet) {
        obj.insert(QString("qps"), ::OpenAPI::toJsonValue(m_qps));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    return obj;
}

qint64 OAILoadTestPreferences::getC() const {
    return m_c;
}
void OAILoadTestPreferences::setC(const qint64 &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAILoadTestPreferences::is_c_Set() const{
    return m_c_isSet;
}

bool OAILoadTestPreferences::is_c_Valid() const{
    return m_c_isValid;
}

QString OAILoadTestPreferences::getGen() const {
    return m_gen;
}
void OAILoadTestPreferences::setGen(const QString &gen) {
    m_gen = gen;
    m_gen_isSet = true;
}

bool OAILoadTestPreferences::is_gen_Set() const{
    return m_gen_isSet;
}

bool OAILoadTestPreferences::is_gen_Valid() const{
    return m_gen_isValid;
}

qint64 OAILoadTestPreferences::getQps() const {
    return m_qps;
}
void OAILoadTestPreferences::setQps(const qint64 &qps) {
    m_qps = qps;
    m_qps_isSet = true;
}

bool OAILoadTestPreferences::is_qps_Set() const{
    return m_qps_isSet;
}

bool OAILoadTestPreferences::is_qps_Valid() const{
    return m_qps_isValid;
}

QString OAILoadTestPreferences::getT() const {
    return m_t;
}
void OAILoadTestPreferences::setT(const QString &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAILoadTestPreferences::is_t_Set() const{
    return m_t_isSet;
}

bool OAILoadTestPreferences::is_t_Valid() const{
    return m_t_isValid;
}

bool OAILoadTestPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadTestPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
