/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedOperation::OAISupportedOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedOperation::OAISupportedOperation() {
    this->initializeModel();
}

OAISupportedOperation::~OAISupportedOperation() {}

void OAISupportedOperation::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISupportedOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedOperation::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISupportedOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAISupportedOperation::getCategory() const {
    return m_category;
}
void OAISupportedOperation::setCategory(const qint32 &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISupportedOperation::is_category_Set() const{
    return m_category_isSet;
}

bool OAISupportedOperation::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISupportedOperation::getKey() const {
    return m_key;
}
void OAISupportedOperation::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISupportedOperation::is_key_Set() const{
    return m_key_isSet;
}

bool OAISupportedOperation::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISupportedOperation::getValue() const {
    return m_value;
}
void OAISupportedOperation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISupportedOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAISupportedOperation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISupportedOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
