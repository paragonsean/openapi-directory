/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertCondition::OAIAlertCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertCondition::OAIAlertCondition() {
    this->initializeModel();
}

OAIAlertCondition::~OAIAlertCondition() {}

void OAIAlertCondition::initializeModel() {

    m_evaluator_isSet = false;
    m_evaluator_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_reducer_isSet = false;
    m_reducer_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAlertCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertCondition::fromJsonObject(QJsonObject json) {

    m_evaluator_isValid = ::OpenAPI::fromJsonValue(m_evaluator, json[QString("evaluator")]);
    m_evaluator_isSet = !json[QString("evaluator")].isNull() && m_evaluator_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_reducer_isValid = ::OpenAPI::fromJsonValue(m_reducer, json[QString("reducer")]);
    m_reducer_isSet = !json[QString("reducer")].isNull() && m_reducer_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAlertCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluator.isSet()) {
        obj.insert(QString("evaluator"), ::OpenAPI::toJsonValue(m_evaluator));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_reducer.isSet()) {
        obj.insert(QString("reducer"), ::OpenAPI::toJsonValue(m_reducer));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAlertEvaluator OAIAlertCondition::getEvaluator() const {
    return m_evaluator;
}
void OAIAlertCondition::setEvaluator(const OAIAlertEvaluator &evaluator) {
    m_evaluator = evaluator;
    m_evaluator_isSet = true;
}

bool OAIAlertCondition::is_evaluator_Set() const{
    return m_evaluator_isSet;
}

bool OAIAlertCondition::is_evaluator_Valid() const{
    return m_evaluator_isValid;
}

OAIAlertOperator OAIAlertCondition::getROperator() const {
    return m_r_operator;
}
void OAIAlertCondition::setROperator(const OAIAlertOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIAlertCondition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIAlertCondition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

OAIAlertQuery OAIAlertCondition::getQuery() const {
    return m_query;
}
void OAIAlertCondition::setQuery(const OAIAlertQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIAlertCondition::is_query_Set() const{
    return m_query_isSet;
}

bool OAIAlertCondition::is_query_Valid() const{
    return m_query_isValid;
}

OAIAlertReducer OAIAlertCondition::getReducer() const {
    return m_reducer;
}
void OAIAlertCondition::setReducer(const OAIAlertReducer &reducer) {
    m_reducer = reducer;
    m_reducer_isSet = true;
}

bool OAIAlertCondition::is_reducer_Set() const{
    return m_reducer_isSet;
}

bool OAIAlertCondition::is_reducer_Valid() const{
    return m_reducer_isValid;
}

QString OAIAlertCondition::getType() const {
    return m_type;
}
void OAIAlertCondition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlertCondition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlertCondition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAlertCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reducer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
