/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_metrics_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_metrics_inner::OAITarget_metrics_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_metrics_inner::OAITarget_metrics_inner() {
    this->initializeModel();
}

OAITarget_metrics_inner::~OAITarget_metrics_inner() {}

void OAITarget_metrics_inner::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITarget_metrics_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_metrics_inner::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITarget_metrics_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_metrics_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITarget_metrics_inner::getField() const {
    return m_field;
}
void OAITarget_metrics_inner::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAITarget_metrics_inner::is_field_Set() const{
    return m_field_isSet;
}

bool OAITarget_metrics_inner::is_field_Valid() const{
    return m_field_isValid;
}

QString OAITarget_metrics_inner::getId() const {
    return m_id;
}
void OAITarget_metrics_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITarget_metrics_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITarget_metrics_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITarget_metrics_inner::getType() const {
    return m_type;
}
void OAITarget_metrics_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITarget_metrics_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAITarget_metrics_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITarget_metrics_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_metrics_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
