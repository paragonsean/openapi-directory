/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_deletion_grace_period_seconds_isSet = false;
    m_deletion_grace_period_seconds_isValid = false;

    m_deletion_timestamp_isSet = false;
    m_deletion_timestamp_isValid = false;

    m_finalizers_isSet = false;
    m_finalizers_isValid = false;

    m_generate_name_isSet = false;
    m_generate_name_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_managed_fields_isSet = false;
    m_managed_fields_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_owner_references_isSet = false;
    m_owner_references_isValid = false;

    m_resource_version_isSet = false;
    m_resource_version_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_deletion_grace_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_deletion_grace_period_seconds, json[QString("deletionGracePeriodSeconds")]);
    m_deletion_grace_period_seconds_isSet = !json[QString("deletionGracePeriodSeconds")].isNull() && m_deletion_grace_period_seconds_isValid;

    m_deletion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_deletion_timestamp, json[QString("deletionTimestamp")]);
    m_deletion_timestamp_isSet = !json[QString("deletionTimestamp")].isNull() && m_deletion_timestamp_isValid;

    m_finalizers_isValid = ::OpenAPI::fromJsonValue(m_finalizers, json[QString("finalizers")]);
    m_finalizers_isSet = !json[QString("finalizers")].isNull() && m_finalizers_isValid;

    m_generate_name_isValid = ::OpenAPI::fromJsonValue(m_generate_name, json[QString("generateName")]);
    m_generate_name_isSet = !json[QString("generateName")].isNull() && m_generate_name_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_managed_fields_isValid = ::OpenAPI::fromJsonValue(m_managed_fields, json[QString("managedFields")]);
    m_managed_fields_isSet = !json[QString("managedFields")].isNull() && m_managed_fields_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_owner_references_isValid = ::OpenAPI::fromJsonValue(m_owner_references, json[QString("ownerReferences")]);
    m_owner_references_isSet = !json[QString("ownerReferences")].isNull() && m_owner_references_isValid;

    m_resource_version_isValid = ::OpenAPI::fromJsonValue(m_resource_version, json[QString("resourceVersion")]);
    m_resource_version_isSet = !json[QString("resourceVersion")].isNull() && m_resource_version_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_deletion_grace_period_seconds_isSet) {
        obj.insert(QString("deletionGracePeriodSeconds"), ::OpenAPI::toJsonValue(m_deletion_grace_period_seconds));
    }
    if (m_deletion_timestamp_isSet) {
        obj.insert(QString("deletionTimestamp"), ::OpenAPI::toJsonValue(m_deletion_timestamp));
    }
    if (m_finalizers.size() > 0) {
        obj.insert(QString("finalizers"), ::OpenAPI::toJsonValue(m_finalizers));
    }
    if (m_generate_name_isSet) {
        obj.insert(QString("generateName"), ::OpenAPI::toJsonValue(m_generate_name));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_managed_fields.size() > 0) {
        obj.insert(QString("managedFields"), ::OpenAPI::toJsonValue(m_managed_fields));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_owner_references.size() > 0) {
        obj.insert(QString("ownerReferences"), ::OpenAPI::toJsonValue(m_owner_references));
    }
    if (m_resource_version_isSet) {
        obj.insert(QString("resourceVersion"), ::OpenAPI::toJsonValue(m_resource_version));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QMap<QString, QString> OAIService::getAnnotations() const {
    return m_annotations;
}
void OAIService::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIService::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIService::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIService::getApiVersion() const {
    return m_api_version;
}
void OAIService::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIService::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIService::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIService::getClusterName() const {
    return m_cluster_name;
}
void OAIService::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIService::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIService::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAIObject OAIService::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIService::setCreationTimestamp(const OAIObject &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIService::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIService::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

qint64 OAIService::getDeletionGracePeriodSeconds() const {
    return m_deletion_grace_period_seconds;
}
void OAIService::setDeletionGracePeriodSeconds(const qint64 &deletion_grace_period_seconds) {
    m_deletion_grace_period_seconds = deletion_grace_period_seconds;
    m_deletion_grace_period_seconds_isSet = true;
}

bool OAIService::is_deletion_grace_period_seconds_Set() const{
    return m_deletion_grace_period_seconds_isSet;
}

bool OAIService::is_deletion_grace_period_seconds_Valid() const{
    return m_deletion_grace_period_seconds_isValid;
}

OAIObject OAIService::getDeletionTimestamp() const {
    return m_deletion_timestamp;
}
void OAIService::setDeletionTimestamp(const OAIObject &deletion_timestamp) {
    m_deletion_timestamp = deletion_timestamp;
    m_deletion_timestamp_isSet = true;
}

bool OAIService::is_deletion_timestamp_Set() const{
    return m_deletion_timestamp_isSet;
}

bool OAIService::is_deletion_timestamp_Valid() const{
    return m_deletion_timestamp_isValid;
}

QList<QString> OAIService::getFinalizers() const {
    return m_finalizers;
}
void OAIService::setFinalizers(const QList<QString> &finalizers) {
    m_finalizers = finalizers;
    m_finalizers_isSet = true;
}

bool OAIService::is_finalizers_Set() const{
    return m_finalizers_isSet;
}

bool OAIService::is_finalizers_Valid() const{
    return m_finalizers_isValid;
}

QString OAIService::getGenerateName() const {
    return m_generate_name;
}
void OAIService::setGenerateName(const QString &generate_name) {
    m_generate_name = generate_name;
    m_generate_name_isSet = true;
}

bool OAIService::is_generate_name_Set() const{
    return m_generate_name_isSet;
}

bool OAIService::is_generate_name_Valid() const{
    return m_generate_name_isValid;
}

qint64 OAIService::getGeneration() const {
    return m_generation;
}
void OAIService::setGeneration(const qint64 &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIService::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIService::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIService::getKind() const {
    return m_kind;
}
void OAIService::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIService::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIService::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIService::getLabels() const {
    return m_labels;
}
void OAIService::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIService::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIService::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIManagedFieldsEntry> OAIService::getManagedFields() const {
    return m_managed_fields;
}
void OAIService::setManagedFields(const QList<OAIManagedFieldsEntry> &managed_fields) {
    m_managed_fields = managed_fields;
    m_managed_fields_isSet = true;
}

bool OAIService::is_managed_fields_Set() const{
    return m_managed_fields_isSet;
}

bool OAIService::is_managed_fields_Valid() const{
    return m_managed_fields_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIService::getRNamespace() const {
    return m_r_namespace;
}
void OAIService::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIService::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIService::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList<OAIOwnerReference> OAIService::getOwnerReferences() const {
    return m_owner_references;
}
void OAIService::setOwnerReferences(const QList<OAIOwnerReference> &owner_references) {
    m_owner_references = owner_references;
    m_owner_references_isSet = true;
}

bool OAIService::is_owner_references_Set() const{
    return m_owner_references_isSet;
}

bool OAIService::is_owner_references_Valid() const{
    return m_owner_references_isValid;
}

QString OAIService::getResourceVersion() const {
    return m_resource_version;
}
void OAIService::setResourceVersion(const QString &resource_version) {
    m_resource_version = resource_version;
    m_resource_version_isSet = true;
}

bool OAIService::is_resource_version_Set() const{
    return m_resource_version_isSet;
}

bool OAIService::is_resource_version_Valid() const{
    return m_resource_version_isValid;
}

QString OAIService::getSelfLink() const {
    return m_self_link;
}
void OAIService::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIService::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIService::is_self_link_Valid() const{
    return m_self_link_isValid;
}

OAIServiceSpec OAIService::getSpec() const {
    return m_spec;
}
void OAIService::setSpec(const OAIServiceSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIService::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIService::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIServiceStatus OAIService::getStatus() const {
    return m_status;
}
void OAIService::setStatus(const OAIServiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIService::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIService::getUid() const {
    return m_uid;
}
void OAIService::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIService::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIService::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_grace_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finalizers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
