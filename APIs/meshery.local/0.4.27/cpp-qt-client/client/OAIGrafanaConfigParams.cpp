/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafanaConfigParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafanaConfigParams::OAIGrafanaConfigParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafanaConfigParams::OAIGrafanaConfigParams() {
    this->initializeModel();
}

OAIGrafanaConfigParams::~OAIGrafanaConfigParams() {}

void OAIGrafanaConfigParams::initializeModel() {

    m_grafana_api_key_isSet = false;
    m_grafana_api_key_isValid = false;

    m_grafana_url_isSet = false;
    m_grafana_url_isValid = false;
}

void OAIGrafanaConfigParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafanaConfigParams::fromJsonObject(QJsonObject json) {

    m_grafana_api_key_isValid = ::OpenAPI::fromJsonValue(m_grafana_api_key, json[QString("grafanaAPIKey")]);
    m_grafana_api_key_isSet = !json[QString("grafanaAPIKey")].isNull() && m_grafana_api_key_isValid;

    m_grafana_url_isValid = ::OpenAPI::fromJsonValue(m_grafana_url, json[QString("grafanaURL")]);
    m_grafana_url_isSet = !json[QString("grafanaURL")].isNull() && m_grafana_url_isValid;
}

QString OAIGrafanaConfigParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafanaConfigParams::asJsonObject() const {
    QJsonObject obj;
    if (m_grafana_api_key_isSet) {
        obj.insert(QString("grafanaAPIKey"), ::OpenAPI::toJsonValue(m_grafana_api_key));
    }
    if (m_grafana_url_isSet) {
        obj.insert(QString("grafanaURL"), ::OpenAPI::toJsonValue(m_grafana_url));
    }
    return obj;
}

QString OAIGrafanaConfigParams::getGrafanaApiKey() const {
    return m_grafana_api_key;
}
void OAIGrafanaConfigParams::setGrafanaApiKey(const QString &grafana_api_key) {
    m_grafana_api_key = grafana_api_key;
    m_grafana_api_key_isSet = true;
}

bool OAIGrafanaConfigParams::is_grafana_api_key_Set() const{
    return m_grafana_api_key_isSet;
}

bool OAIGrafanaConfigParams::is_grafana_api_key_Valid() const{
    return m_grafana_api_key_isValid;
}

QString OAIGrafanaConfigParams::getGrafanaUrl() const {
    return m_grafana_url;
}
void OAIGrafanaConfigParams::setGrafanaUrl(const QString &grafana_url) {
    m_grafana_url = grafana_url;
    m_grafana_url_isSet = true;
}

bool OAIGrafanaConfigParams::is_grafana_url_Set() const{
    return m_grafana_url_isSet;
}

bool OAIGrafanaConfigParams::is_grafana_url_Valid() const{
    return m_grafana_url_isValid;
}

bool OAIGrafanaConfigParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grafana_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafanaConfigParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
