/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlert.h
 *
 * 
 */

#ifndef OAIAlert_H
#define OAIAlert_H

#include <QJsonObject>

#include "OAIAlertCondition.h"
#include "OAIAlertNotification.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAlertCondition;
class OAIAlertNotification;

class OAIAlert : public OAIObject {
public:
    OAIAlert();
    OAIAlert(QString json);
    ~OAIAlert() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAlertRuleTags() const;
    void setAlertRuleTags(const QMap<QString, QString> &alert_rule_tags);
    bool is_alert_rule_tags_Set() const;
    bool is_alert_rule_tags_Valid() const;

    QList<OAIAlertCondition> getConditions() const;
    void setConditions(const QList<OAIAlertCondition> &conditions);
    bool is_conditions_Set() const;
    bool is_conditions_Valid() const;

    QString getExecutionErrorState() const;
    void setExecutionErrorState(const QString &execution_error_state);
    bool is_execution_error_state_Set() const;
    bool is_execution_error_state_Valid() const;

    QString getRFor() const;
    void setRFor(const QString &r_for);
    bool is_r_for_Set() const;
    bool is_r_for_Valid() const;

    QString getFrequency() const;
    void setFrequency(const QString &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    qint64 getHandler() const;
    void setHandler(const qint64 &handler);
    bool is_handler_Set() const;
    bool is_handler_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNoDataState() const;
    void setNoDataState(const QString &no_data_state);
    bool is_no_data_state_Set() const;
    bool is_no_data_state_Valid() const;

    QList<OAIAlertNotification> getNotifications() const;
    void setNotifications(const QList<OAIAlertNotification> &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_alert_rule_tags;
    bool m_alert_rule_tags_isSet;
    bool m_alert_rule_tags_isValid;

    QList<OAIAlertCondition> m_conditions;
    bool m_conditions_isSet;
    bool m_conditions_isValid;

    QString m_execution_error_state;
    bool m_execution_error_state_isSet;
    bool m_execution_error_state_isValid;

    QString m_r_for;
    bool m_r_for_isSet;
    bool m_r_for_isValid;

    QString m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    qint64 m_handler;
    bool m_handler_isSet;
    bool m_handler_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_no_data_state;
    bool m_no_data_state_isSet;
    bool m_no_data_state_isValid;

    QList<OAIAlertNotification> m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlert)

#endif // OAIAlert_H
