/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunnerResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunnerResults::OAIRunnerResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunnerResults::OAIRunnerResults() {
    this->initializeModel();
}

OAIRunnerResults::~OAIRunnerResults() {}

void OAIRunnerResults::initializeModel() {

    m_actual_duration_isSet = false;
    m_actual_duration_isValid = false;

    m_actual_qps_isSet = false;
    m_actual_qps_isValid = false;

    m_duration_histogram_isSet = false;
    m_duration_histogram_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_load_generator_isSet = false;
    m_load_generator_isValid = false;
}

void OAIRunnerResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunnerResults::fromJsonObject(QJsonObject json) {

    m_actual_duration_isValid = ::OpenAPI::fromJsonValue(m_actual_duration, json[QString("ActualDuration")]);
    m_actual_duration_isSet = !json[QString("ActualDuration")].isNull() && m_actual_duration_isValid;

    m_actual_qps_isValid = ::OpenAPI::fromJsonValue(m_actual_qps, json[QString("ActualQPS")]);
    m_actual_qps_isSet = !json[QString("ActualQPS")].isNull() && m_actual_qps_isValid;

    m_duration_histogram_isValid = ::OpenAPI::fromJsonValue(m_duration_histogram, json[QString("DurationHistogram")]);
    m_duration_histogram_isSet = !json[QString("DurationHistogram")].isNull() && m_duration_histogram_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("URL")]);
    m_url_isSet = !json[QString("URL")].isNull() && m_url_isValid;

    m_load_generator_isValid = ::OpenAPI::fromJsonValue(m_load_generator, json[QString("load-generator")]);
    m_load_generator_isSet = !json[QString("load-generator")].isNull() && m_load_generator_isValid;
}

QString OAIRunnerResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunnerResults::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_duration_isSet) {
        obj.insert(QString("ActualDuration"), ::OpenAPI::toJsonValue(m_actual_duration));
    }
    if (m_actual_qps_isSet) {
        obj.insert(QString("ActualQPS"), ::OpenAPI::toJsonValue(m_actual_qps));
    }
    if (m_duration_histogram.isSet()) {
        obj.insert(QString("DurationHistogram"), ::OpenAPI::toJsonValue(m_duration_histogram));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("URL"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_load_generator_isSet) {
        obj.insert(QString("load-generator"), ::OpenAPI::toJsonValue(m_load_generator));
    }
    return obj;
}

qint32 OAIRunnerResults::getActualDuration() const {
    return m_actual_duration;
}
void OAIRunnerResults::setActualDuration(const qint32 &actual_duration) {
    m_actual_duration = actual_duration;
    m_actual_duration_isSet = true;
}

bool OAIRunnerResults::is_actual_duration_Set() const{
    return m_actual_duration_isSet;
}

bool OAIRunnerResults::is_actual_duration_Valid() const{
    return m_actual_duration_isValid;
}

double OAIRunnerResults::getActualQps() const {
    return m_actual_qps;
}
void OAIRunnerResults::setActualQps(const double &actual_qps) {
    m_actual_qps = actual_qps;
    m_actual_qps_isSet = true;
}

bool OAIRunnerResults::is_actual_qps_Set() const{
    return m_actual_qps_isSet;
}

bool OAIRunnerResults::is_actual_qps_Valid() const{
    return m_actual_qps_isValid;
}

OAIRunnerResults_DurationHistogram OAIRunnerResults::getDurationHistogram() const {
    return m_duration_histogram;
}
void OAIRunnerResults::setDurationHistogram(const OAIRunnerResults_DurationHistogram &duration_histogram) {
    m_duration_histogram = duration_histogram;
    m_duration_histogram_isSet = true;
}

bool OAIRunnerResults::is_duration_histogram_Set() const{
    return m_duration_histogram_isSet;
}

bool OAIRunnerResults::is_duration_histogram_Valid() const{
    return m_duration_histogram_isValid;
}

QDateTime OAIRunnerResults::getStartTime() const {
    return m_start_time;
}
void OAIRunnerResults::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRunnerResults::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRunnerResults::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRunnerResults::getUrl() const {
    return m_url;
}
void OAIRunnerResults::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRunnerResults::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRunnerResults::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRunnerResults::getLoadGenerator() const {
    return m_load_generator;
}
void OAIRunnerResults::setLoadGenerator(const QString &load_generator) {
    m_load_generator = load_generator;
    m_load_generator_isSet = true;
}

bool OAIRunnerResults::is_load_generator_Set() const{
    return m_load_generator_isSet;
}

bool OAIRunnerResults::is_load_generator_Valid() const{
    return m_load_generator_isValid;
}

bool OAIRunnerResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_generator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunnerResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
