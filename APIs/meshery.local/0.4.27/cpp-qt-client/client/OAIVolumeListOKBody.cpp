/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeListOKBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeListOKBody::OAIVolumeListOKBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeListOKBody::OAIVolumeListOKBody() {
    this->initializeModel();
}

OAIVolumeListOKBody::~OAIVolumeListOKBody() {}

void OAIVolumeListOKBody::initializeModel() {

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIVolumeListOKBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeListOKBody::fromJsonObject(QJsonObject json) {

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("Volumes")]);
    m_volumes_isSet = !json[QString("Volumes")].isNull() && m_volumes_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIVolumeListOKBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeListOKBody::asJsonObject() const {
    QJsonObject obj;
    if (m_volumes.size() > 0) {
        obj.insert(QString("Volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAIVolume> OAIVolumeListOKBody::getVolumes() const {
    return m_volumes;
}
void OAIVolumeListOKBody::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIVolumeListOKBody::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIVolumeListOKBody::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QList<QString> OAIVolumeListOKBody::getWarnings() const {
    return m_warnings;
}
void OAIVolumeListOKBody::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIVolumeListOKBody::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIVolumeListOKBody::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIVolumeListOKBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeListOKBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_volumes_isValid && m_warnings_isValid && true;
}

} // namespace OpenAPI
