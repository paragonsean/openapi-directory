/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrometheus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrometheus::OAIPrometheus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrometheus::OAIPrometheus() {
    this->initializeModel();
}

OAIPrometheus::~OAIPrometheus() {}

void OAIPrometheus::initializeModel() {

    m_prometheus_url_isSet = false;
    m_prometheus_url_isValid = false;

    m_selected_prometheus_boards_configs_isSet = false;
    m_selected_prometheus_boards_configs_isValid = false;
}

void OAIPrometheus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrometheus::fromJsonObject(QJsonObject json) {

    m_prometheus_url_isValid = ::OpenAPI::fromJsonValue(m_prometheus_url, json[QString("prometheusURL")]);
    m_prometheus_url_isSet = !json[QString("prometheusURL")].isNull() && m_prometheus_url_isValid;

    m_selected_prometheus_boards_configs_isValid = ::OpenAPI::fromJsonValue(m_selected_prometheus_boards_configs, json[QString("selectedPrometheusBoardsConfigs")]);
    m_selected_prometheus_boards_configs_isSet = !json[QString("selectedPrometheusBoardsConfigs")].isNull() && m_selected_prometheus_boards_configs_isValid;
}

QString OAIPrometheus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrometheus::asJsonObject() const {
    QJsonObject obj;
    if (m_prometheus_url_isSet) {
        obj.insert(QString("prometheusURL"), ::OpenAPI::toJsonValue(m_prometheus_url));
    }
    if (m_selected_prometheus_boards_configs.size() > 0) {
        obj.insert(QString("selectedPrometheusBoardsConfigs"), ::OpenAPI::toJsonValue(m_selected_prometheus_boards_configs));
    }
    return obj;
}

QString OAIPrometheus::getPrometheusUrl() const {
    return m_prometheus_url;
}
void OAIPrometheus::setPrometheusUrl(const QString &prometheus_url) {
    m_prometheus_url = prometheus_url;
    m_prometheus_url_isSet = true;
}

bool OAIPrometheus::is_prometheus_url_Set() const{
    return m_prometheus_url_isSet;
}

bool OAIPrometheus::is_prometheus_url_Valid() const{
    return m_prometheus_url_isValid;
}

QList<OAISelectedGrafanaConfig> OAIPrometheus::getSelectedPrometheusBoardsConfigs() const {
    return m_selected_prometheus_boards_configs;
}
void OAIPrometheus::setSelectedPrometheusBoardsConfigs(const QList<OAISelectedGrafanaConfig> &selected_prometheus_boards_configs) {
    m_selected_prometheus_boards_configs = selected_prometheus_boards_configs;
    m_selected_prometheus_boards_configs_isSet = true;
}

bool OAIPrometheus::is_selected_prometheus_boards_configs_Set() const{
    return m_selected_prometheus_boards_configs_isSet;
}

bool OAIPrometheus::is_selected_prometheus_boards_configs_Valid() const{
    return m_selected_prometheus_boards_configs_isValid;
}

bool OAIPrometheus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prometheus_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_prometheus_boards_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrometheus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
