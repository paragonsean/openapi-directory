/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntString::OAIIntString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntString::OAIIntString() {
    this->initializeModel();
}

OAIIntString::~OAIIntString() {}

void OAIIntString::initializeModel() {

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIIntString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntString::fromJsonObject(QJsonObject json) {

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("Valid")]);
    m_r_valid_isSet = !json[QString("Valid")].isNull() && m_r_valid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIIntString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntString::asJsonObject() const {
    QJsonObject obj;
    if (m_r_valid_isSet) {
        obj.insert(QString("Valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIIntString::isRValid() const {
    return m_r_valid;
}
void OAIIntString::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIIntString::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIIntString::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

qint64 OAIIntString::getValue() const {
    return m_value;
}
void OAIIntString::setValue(const qint64 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIIntString::is_value_Set() const{
    return m_value_isSet;
}

bool OAIIntString::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIIntString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
