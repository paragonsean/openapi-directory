/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPerformanceAPIApi_H
#define OAI_OAIPerformanceAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPerformanceProfile.h"
#include "OAIPerformanceProfileParameters.h"
#include "OAIPerformanceProfilesAPIResponse.h"
#include "OAIPerformanceResultsAPIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPerformanceAPIApi : public QObject {
    Q_OBJECT

public:
    OAIPerformanceAPIApi(const int timeOut = 0);
    ~OAIPerformanceAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idDeletePerformanceProfile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGETProfileResults(const QString &id);


    virtual void idGetAllPerformanceResults();


    virtual void idGetPerformanceProfiles();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetSinglePerformanceProfile(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idRunPerformanceTest(const QString &id);

    /**
    * @param[in]  oai_performance_profile_parameters OAIPerformanceProfileParameters [optional]
    */
    virtual void idSavePerformanceProfile(const ::OpenAPI::OptionalParam<OAIPerformanceProfileParameters> &oai_performance_profile_parameters = ::OpenAPI::OptionalParam<OAIPerformanceProfileParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeletePerformanceProfileCallback(OAIHttpRequestWorker *worker);
    void idGETProfileResultsCallback(OAIHttpRequestWorker *worker);
    void idGetAllPerformanceResultsCallback(OAIHttpRequestWorker *worker);
    void idGetPerformanceProfilesCallback(OAIHttpRequestWorker *worker);
    void idGetSinglePerformanceProfileCallback(OAIHttpRequestWorker *worker);
    void idRunPerformanceTestCallback(OAIHttpRequestWorker *worker);
    void idSavePerformanceProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeletePerformanceProfileSignal();
    void idGETProfileResultsSignal(OAIPerformanceResultsAPIResponse summary);
    void idGetAllPerformanceResultsSignal(OAIPerformanceResultsAPIResponse summary);
    void idGetPerformanceProfilesSignal(OAIPerformanceProfilesAPIResponse summary);
    void idGetSinglePerformanceProfileSignal(OAIPerformanceProfile summary);
    void idRunPerformanceTestSignal();
    void idSavePerformanceProfileSignal(OAIPerformanceProfile summary);


    void idDeletePerformanceProfileSignalFull(OAIHttpRequestWorker *worker);
    void idGETProfileResultsSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceResultsAPIResponse summary);
    void idGetAllPerformanceResultsSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceResultsAPIResponse summary);
    void idGetPerformanceProfilesSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceProfilesAPIResponse summary);
    void idGetSinglePerformanceProfileSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceProfile summary);
    void idRunPerformanceTestSignalFull(OAIHttpRequestWorker *worker);
    void idSavePerformanceProfileSignalFull(OAIHttpRequestWorker *worker, OAIPerformanceProfile summary);

    Q_DECL_DEPRECATED_X("Use idDeletePerformanceProfileSignalError() instead")
    void idDeletePerformanceProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeletePerformanceProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGETProfileResultsSignalError() instead")
    void idGETProfileResultsSignalE(OAIPerformanceResultsAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGETProfileResultsSignalError(OAIPerformanceResultsAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetAllPerformanceResultsSignalError() instead")
    void idGetAllPerformanceResultsSignalE(OAIPerformanceResultsAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetAllPerformanceResultsSignalError(OAIPerformanceResultsAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetPerformanceProfilesSignalError() instead")
    void idGetPerformanceProfilesSignalE(OAIPerformanceProfilesAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetPerformanceProfilesSignalError(OAIPerformanceProfilesAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSinglePerformanceProfileSignalError() instead")
    void idGetSinglePerformanceProfileSignalE(OAIPerformanceProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSinglePerformanceProfileSignalError(OAIPerformanceProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idRunPerformanceTestSignalError() instead")
    void idRunPerformanceTestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idRunPerformanceTestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSavePerformanceProfileSignalError() instead")
    void idSavePerformanceProfileSignalE(OAIPerformanceProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idSavePerformanceProfileSignalError(OAIPerformanceProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeletePerformanceProfileSignalErrorFull() instead")
    void idDeletePerformanceProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeletePerformanceProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGETProfileResultsSignalErrorFull() instead")
    void idGETProfileResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGETProfileResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetAllPerformanceResultsSignalErrorFull() instead")
    void idGetAllPerformanceResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetAllPerformanceResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetPerformanceProfilesSignalErrorFull() instead")
    void idGetPerformanceProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetPerformanceProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetSinglePerformanceProfileSignalErrorFull() instead")
    void idGetSinglePerformanceProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetSinglePerformanceProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idRunPerformanceTestSignalErrorFull() instead")
    void idRunPerformanceTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idRunPerformanceTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSavePerformanceProfileSignalErrorFull() instead")
    void idSavePerformanceProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idSavePerformanceProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
