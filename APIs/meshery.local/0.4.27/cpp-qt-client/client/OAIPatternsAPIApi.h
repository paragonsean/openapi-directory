/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPatternsAPIApi_H
#define OAI_OAIPatternsAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIMesheryPattern.h"
#include "OAIPatternsAPIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPatternsAPIApi : public QObject {
    Q_OBJECT

public:
    OAIPatternsAPIApi(const int timeOut = 0);
    ~OAIPatternsAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void idDeleteDeployPattern();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idDeleteMesheryPattern(const QString &id);

    /**
    * @param[in]  type QString [required]
    */
    virtual void idGETOAMMesheryPattern(const QString &type);

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetMesheryPattern(const QString &id);


    virtual void idGetPatternFiles();

    /**
    * @param[in]  type QString [required]
    */
    virtual void idPOSTOAMMesheryPattern(const QString &type);

    /**
    * @param[in]  upload_yaml_yml_file OAIHttpFileElement [optional]
    */
    virtual void idPostDeployPattern(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &upload_yaml_yml_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


    virtual void idPostPatternFile();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteDeployPatternCallback(OAIHttpRequestWorker *worker);
    void idDeleteMesheryPatternCallback(OAIHttpRequestWorker *worker);
    void idGETOAMMesheryPatternCallback(OAIHttpRequestWorker *worker);
    void idGetMesheryPatternCallback(OAIHttpRequestWorker *worker);
    void idGetPatternFilesCallback(OAIHttpRequestWorker *worker);
    void idPOSTOAMMesheryPatternCallback(OAIHttpRequestWorker *worker);
    void idPostDeployPatternCallback(OAIHttpRequestWorker *worker);
    void idPostPatternFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteDeployPatternSignal();
    void idDeleteMesheryPatternSignal();
    void idGETOAMMesheryPatternSignal();
    void idGetMesheryPatternSignal(OAIMesheryPattern summary);
    void idGetPatternFilesSignal(OAIPatternsAPIResponse summary);
    void idPOSTOAMMesheryPatternSignal();
    void idPostDeployPatternSignal();
    void idPostPatternFileSignal(OAIMesheryPattern summary);


    void idDeleteDeployPatternSignalFull(OAIHttpRequestWorker *worker);
    void idDeleteMesheryPatternSignalFull(OAIHttpRequestWorker *worker);
    void idGETOAMMesheryPatternSignalFull(OAIHttpRequestWorker *worker);
    void idGetMesheryPatternSignalFull(OAIHttpRequestWorker *worker, OAIMesheryPattern summary);
    void idGetPatternFilesSignalFull(OAIHttpRequestWorker *worker, OAIPatternsAPIResponse summary);
    void idPOSTOAMMesheryPatternSignalFull(OAIHttpRequestWorker *worker);
    void idPostDeployPatternSignalFull(OAIHttpRequestWorker *worker);
    void idPostPatternFileSignalFull(OAIHttpRequestWorker *worker, OAIMesheryPattern summary);

    Q_DECL_DEPRECATED_X("Use idDeleteDeployPatternSignalError() instead")
    void idDeleteDeployPatternSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteDeployPatternSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteMesheryPatternSignalError() instead")
    void idDeleteMesheryPatternSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryPatternSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGETOAMMesheryPatternSignalError() instead")
    void idGETOAMMesheryPatternSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idGETOAMMesheryPatternSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryPatternSignalError() instead")
    void idGetMesheryPatternSignalE(OAIMesheryPattern summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryPatternSignalError(OAIMesheryPattern summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetPatternFilesSignalError() instead")
    void idGetPatternFilesSignalE(OAIPatternsAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetPatternFilesSignalError(OAIPatternsAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPOSTOAMMesheryPatternSignalError() instead")
    void idPOSTOAMMesheryPatternSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPOSTOAMMesheryPatternSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostDeployPatternSignalError() instead")
    void idPostDeployPatternSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idPostDeployPatternSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostPatternFileSignalError() instead")
    void idPostPatternFileSignalE(OAIMesheryPattern summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostPatternFileSignalError(OAIMesheryPattern summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteDeployPatternSignalErrorFull() instead")
    void idDeleteDeployPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteDeployPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteMesheryPatternSignalErrorFull() instead")
    void idDeleteMesheryPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGETOAMMesheryPatternSignalErrorFull() instead")
    void idGETOAMMesheryPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGETOAMMesheryPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryPatternSignalErrorFull() instead")
    void idGetMesheryPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetPatternFilesSignalErrorFull() instead")
    void idGetPatternFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetPatternFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPOSTOAMMesheryPatternSignalErrorFull() instead")
    void idPOSTOAMMesheryPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPOSTOAMMesheryPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostDeployPatternSignalErrorFull() instead")
    void idPostDeployPatternSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostDeployPatternSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostPatternFileSignalErrorFull() instead")
    void idPostPatternFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostPatternFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
