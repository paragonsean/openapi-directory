/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginConfigArgs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginConfigArgs::OAIPluginConfigArgs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginConfigArgs::OAIPluginConfigArgs() {
    this->initializeModel();
}

OAIPluginConfigArgs::~OAIPluginConfigArgs() {}

void OAIPluginConfigArgs::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settable_isSet = false;
    m_settable_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPluginConfigArgs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginConfigArgs::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_settable_isValid = ::OpenAPI::fromJsonValue(m_settable, json[QString("Settable")]);
    m_settable_isSet = !json[QString("Settable")].isNull() && m_settable_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPluginConfigArgs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginConfigArgs::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settable.size() > 0) {
        obj.insert(QString("Settable"), ::OpenAPI::toJsonValue(m_settable));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPluginConfigArgs::getDescription() const {
    return m_description;
}
void OAIPluginConfigArgs::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginConfigArgs::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginConfigArgs::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPluginConfigArgs::getName() const {
    return m_name;
}
void OAIPluginConfigArgs::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPluginConfigArgs::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPluginConfigArgs::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIPluginConfigArgs::getSettable() const {
    return m_settable;
}
void OAIPluginConfigArgs::setSettable(const QList<QString> &settable) {
    m_settable = settable;
    m_settable_isSet = true;
}

bool OAIPluginConfigArgs::is_settable_Set() const{
    return m_settable_isSet;
}

bool OAIPluginConfigArgs::is_settable_Valid() const{
    return m_settable_isValid;
}

QList<QString> OAIPluginConfigArgs::getValue() const {
    return m_value;
}
void OAIPluginConfigArgs::setValue(const QList<QString> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPluginConfigArgs::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPluginConfigArgs::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPluginConfigArgs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginConfigArgs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_settable_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
