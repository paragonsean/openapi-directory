/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlugin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlugin::OAIPlugin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlugin::OAIPlugin() {
    this->initializeModel();
}

OAIPlugin::~OAIPlugin() {}

void OAIPlugin::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plugin_reference_isSet = false;
    m_plugin_reference_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIPlugin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlugin::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("Config")]);
    m_config_isSet = !json[QString("Config")].isNull() && m_config_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_plugin_reference_isValid = ::OpenAPI::fromJsonValue(m_plugin_reference, json[QString("PluginReference")]);
    m_plugin_reference_isSet = !json[QString("PluginReference")].isNull() && m_plugin_reference_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAIPlugin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlugin::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("Config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plugin_reference_isSet) {
        obj.insert(QString("PluginReference"), ::OpenAPI::toJsonValue(m_plugin_reference));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAIPluginConfig OAIPlugin::getConfig() const {
    return m_config;
}
void OAIPlugin::setConfig(const OAIPluginConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIPlugin::is_config_Set() const{
    return m_config_isSet;
}

bool OAIPlugin::is_config_Valid() const{
    return m_config_isValid;
}

bool OAIPlugin::isEnabled() const {
    return m_enabled;
}
void OAIPlugin::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPlugin::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPlugin::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIPlugin::getId() const {
    return m_id;
}
void OAIPlugin::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlugin::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlugin::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlugin::getName() const {
    return m_name;
}
void OAIPlugin::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlugin::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlugin::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlugin::getPluginReference() const {
    return m_plugin_reference;
}
void OAIPlugin::setPluginReference(const QString &plugin_reference) {
    m_plugin_reference = plugin_reference;
    m_plugin_reference_isSet = true;
}

bool OAIPlugin::is_plugin_reference_Set() const{
    return m_plugin_reference_isSet;
}

bool OAIPlugin::is_plugin_reference_Valid() const{
    return m_plugin_reference_isValid;
}

OAIPluginSettings OAIPlugin::getSettings() const {
    return m_settings;
}
void OAIPlugin::setSettings(const OAIPluginSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIPlugin::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIPlugin::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIPlugin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlugin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_isValid && m_enabled_isValid && m_name_isValid && m_settings_isValid && true;
}

} // namespace OpenAPI
