/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginEnv.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginEnv::OAIPluginEnv(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginEnv::OAIPluginEnv() {
    this->initializeModel();
}

OAIPluginEnv::~OAIPluginEnv() {}

void OAIPluginEnv::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settable_isSet = false;
    m_settable_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPluginEnv::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginEnv::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_settable_isValid = ::OpenAPI::fromJsonValue(m_settable, json[QString("Settable")]);
    m_settable_isSet = !json[QString("Settable")].isNull() && m_settable_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPluginEnv::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginEnv::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settable.size() > 0) {
        obj.insert(QString("Settable"), ::OpenAPI::toJsonValue(m_settable));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPluginEnv::getDescription() const {
    return m_description;
}
void OAIPluginEnv::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPluginEnv::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPluginEnv::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPluginEnv::getName() const {
    return m_name;
}
void OAIPluginEnv::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPluginEnv::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPluginEnv::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIPluginEnv::getSettable() const {
    return m_settable;
}
void OAIPluginEnv::setSettable(const QList<QString> &settable) {
    m_settable = settable;
    m_settable_isSet = true;
}

bool OAIPluginEnv::is_settable_Set() const{
    return m_settable_isSet;
}

bool OAIPluginEnv::is_settable_Valid() const{
    return m_settable_isValid;
}

QString OAIPluginEnv::getValue() const {
    return m_value;
}
void OAIPluginEnv::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPluginEnv::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPluginEnv::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPluginEnv::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginEnv::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_settable_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
