/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProviderProperties.h
 *
 * ProviderProperties represents the structure of properties that a provider has
 */

#ifndef OAIProviderProperties_H
#define OAIProviderProperties_H

#include <QJsonObject>

#include "OAICapability.h"
#include "OAIExtensions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICapability;
class OAIExtensions;

class OAIProviderProperties : public OAIObject {
public:
    OAIProviderProperties();
    OAIProviderProperties(QString json);
    ~OAIProviderProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICapability> getCapabilities() const;
    void setCapabilities(const QList<OAICapability> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    OAIExtensions getExtensions() const;
    void setExtensions(const OAIExtensions &extensions);
    bool is_extensions_Set() const;
    bool is_extensions_Valid() const;

    QString getPackageUrl() const;
    void setPackageUrl(const QString &package_url);
    bool is_package_url_Set() const;
    bool is_package_url_Valid() const;

    QString getPackageVersion() const;
    void setPackageVersion(const QString &package_version);
    bool is_package_version_Set() const;
    bool is_package_version_Valid() const;

    QList<QString> getProviderDescription() const;
    void setProviderDescription(const QList<QString> &provider_description);
    bool is_provider_description_Set() const;
    bool is_provider_description_Valid() const;

    QString getProviderName() const;
    void setProviderName(const QString &provider_name);
    bool is_provider_name_Set() const;
    bool is_provider_name_Valid() const;

    QString getProviderType() const;
    void setProviderType(const QString &provider_type);
    bool is_provider_type_Set() const;
    bool is_provider_type_Valid() const;

    QString getProviderUrl() const;
    void setProviderUrl(const QString &provider_url);
    bool is_provider_url_Set() const;
    bool is_provider_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICapability> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    OAIExtensions m_extensions;
    bool m_extensions_isSet;
    bool m_extensions_isValid;

    QString m_package_url;
    bool m_package_url_isSet;
    bool m_package_url_isValid;

    QString m_package_version;
    bool m_package_version_isSet;
    bool m_package_version_isValid;

    QList<QString> m_provider_description;
    bool m_provider_description_isSet;
    bool m_provider_description_isValid;

    QString m_provider_name;
    bool m_provider_name_isSet;
    bool m_provider_name_isValid;

    QString m_provider_type;
    bool m_provider_type_isSet;
    bool m_provider_type_isValid;

    QString m_provider_url;
    bool m_provider_url_isSet;
    bool m_provider_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProviderProperties)

#endif // OAIProviderProperties_H
