/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINavigatorExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINavigatorExtension::OAINavigatorExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINavigatorExtension::OAINavigatorExtension() {
    this->initializeModel();
}

OAINavigatorExtension::~OAINavigatorExtension() {}

void OAINavigatorExtension::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINavigatorExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINavigatorExtension::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAINavigatorExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINavigatorExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_component_isSet) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_href.isSet()) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_show_isSet) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAINavigatorExtension> OAINavigatorExtension::getChildren() const {
    return m_children;
}
void OAINavigatorExtension::setChildren(const QList<OAINavigatorExtension> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAINavigatorExtension::is_children_Set() const{
    return m_children_isSet;
}

bool OAINavigatorExtension::is_children_Valid() const{
    return m_children_isValid;
}

QString OAINavigatorExtension::getComponent() const {
    return m_component;
}
void OAINavigatorExtension::setComponent(const QString &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAINavigatorExtension::is_component_Set() const{
    return m_component_isSet;
}

bool OAINavigatorExtension::is_component_Valid() const{
    return m_component_isValid;
}

OAIHref OAINavigatorExtension::getHref() const {
    return m_href;
}
void OAINavigatorExtension::setHref(const OAIHref &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAINavigatorExtension::is_href_Set() const{
    return m_href_isSet;
}

bool OAINavigatorExtension::is_href_Valid() const{
    return m_href_isValid;
}

QString OAINavigatorExtension::getIcon() const {
    return m_icon;
}
void OAINavigatorExtension::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAINavigatorExtension::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAINavigatorExtension::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAINavigatorExtension::isLink() const {
    return m_link;
}
void OAINavigatorExtension::setLink(const bool &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAINavigatorExtension::is_link_Set() const{
    return m_link_isSet;
}

bool OAINavigatorExtension::is_link_Valid() const{
    return m_link_isValid;
}

bool OAINavigatorExtension::isShow() const {
    return m_show;
}
void OAINavigatorExtension::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAINavigatorExtension::is_show_Set() const{
    return m_show_isSet;
}

bool OAINavigatorExtension::is_show_Valid() const{
    return m_show_isValid;
}

QString OAINavigatorExtension::getTitle() const {
    return m_title;
}
void OAINavigatorExtension::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINavigatorExtension::is_title_Set() const{
    return m_title_isSet;
}

bool OAINavigatorExtension::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINavigatorExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINavigatorExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
