/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITooltip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITooltip::OAITooltip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITooltip::OAITooltip() {
    this->initializeModel();
}

OAITooltip::~OAITooltip() {}

void OAITooltip::initializeModel() {

    m_ms_resolution_isSet = false;
    m_ms_resolution_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAITooltip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITooltip::fromJsonObject(QJsonObject json) {

    m_ms_resolution_isValid = ::OpenAPI::fromJsonValue(m_ms_resolution, json[QString("msResolution")]);
    m_ms_resolution_isSet = !json[QString("msResolution")].isNull() && m_ms_resolution_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("value_type")]);
    m_value_type_isSet = !json[QString("value_type")].isNull() && m_value_type_isValid;
}

QString OAITooltip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITooltip::asJsonObject() const {
    QJsonObject obj;
    if (m_ms_resolution_isSet) {
        obj.insert(QString("msResolution"), ::OpenAPI::toJsonValue(m_ms_resolution));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("value_type"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

bool OAITooltip::isMsResolution() const {
    return m_ms_resolution;
}
void OAITooltip::setMsResolution(const bool &ms_resolution) {
    m_ms_resolution = ms_resolution;
    m_ms_resolution_isSet = true;
}

bool OAITooltip::is_ms_resolution_Set() const{
    return m_ms_resolution_isSet;
}

bool OAITooltip::is_ms_resolution_Valid() const{
    return m_ms_resolution_isValid;
}

bool OAITooltip::isShared() const {
    return m_shared;
}
void OAITooltip::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAITooltip::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAITooltip::is_shared_Valid() const{
    return m_shared_isValid;
}

qint64 OAITooltip::getSort() const {
    return m_sort;
}
void OAITooltip::setSort(const qint64 &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAITooltip::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAITooltip::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAITooltip::getValueType() const {
    return m_value_type;
}
void OAITooltip::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAITooltip::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAITooltip::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAITooltip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ms_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITooltip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
