/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdapter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdapter::OAIAdapter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdapter::OAIAdapter() {
    this->initializeModel();
}

OAIAdapter::~OAIAdapter() {}

void OAIAdapter::initializeModel() {

    m_adapter_location_isSet = false;
    m_adapter_location_isValid = false;

    m_git_commit_sha_isSet = false;
    m_git_commit_sha_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ops_isSet = false;
    m_ops_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAdapter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdapter::fromJsonObject(QJsonObject json) {

    m_adapter_location_isValid = ::OpenAPI::fromJsonValue(m_adapter_location, json[QString("adapter_location")]);
    m_adapter_location_isSet = !json[QString("adapter_location")].isNull() && m_adapter_location_isValid;

    m_git_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_git_commit_sha, json[QString("git_commit_sha")]);
    m_git_commit_sha_isSet = !json[QString("git_commit_sha")].isNull() && m_git_commit_sha_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ops_isValid = ::OpenAPI::fromJsonValue(m_ops, json[QString("ops")]);
    m_ops_isSet = !json[QString("ops")].isNull() && m_ops_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAdapter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdapter::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_location_isSet) {
        obj.insert(QString("adapter_location"), ::OpenAPI::toJsonValue(m_adapter_location));
    }
    if (m_git_commit_sha_isSet) {
        obj.insert(QString("git_commit_sha"), ::OpenAPI::toJsonValue(m_git_commit_sha));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ops.size() > 0) {
        obj.insert(QString("ops"), ::OpenAPI::toJsonValue(m_ops));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIAdapter::getAdapterLocation() const {
    return m_adapter_location;
}
void OAIAdapter::setAdapterLocation(const QString &adapter_location) {
    m_adapter_location = adapter_location;
    m_adapter_location_isSet = true;
}

bool OAIAdapter::is_adapter_location_Set() const{
    return m_adapter_location_isSet;
}

bool OAIAdapter::is_adapter_location_Valid() const{
    return m_adapter_location_isValid;
}

QString OAIAdapter::getGitCommitSha() const {
    return m_git_commit_sha;
}
void OAIAdapter::setGitCommitSha(const QString &git_commit_sha) {
    m_git_commit_sha = git_commit_sha;
    m_git_commit_sha_isSet = true;
}

bool OAIAdapter::is_git_commit_sha_Set() const{
    return m_git_commit_sha_isSet;
}

bool OAIAdapter::is_git_commit_sha_Valid() const{
    return m_git_commit_sha_isValid;
}

QString OAIAdapter::getName() const {
    return m_name;
}
void OAIAdapter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdapter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdapter::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISupportedOperation> OAIAdapter::getOps() const {
    return m_ops;
}
void OAIAdapter::setOps(const QList<OAISupportedOperation> &ops) {
    m_ops = ops;
    m_ops_isSet = true;
}

bool OAIAdapter::is_ops_Set() const{
    return m_ops_isSet;
}

bool OAIAdapter::is_ops_Valid() const{
    return m_ops_isValid;
}

QString OAIAdapter::getVersion() const {
    return m_version;
}
void OAIAdapter::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAdapter::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAdapter::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAdapter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdapter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
