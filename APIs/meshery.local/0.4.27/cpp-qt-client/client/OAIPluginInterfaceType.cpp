/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginInterfaceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginInterfaceType::OAIPluginInterfaceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginInterfaceType::OAIPluginInterfaceType() {
    this->initializeModel();
}

OAIPluginInterfaceType::~OAIPluginInterfaceType() {}

void OAIPluginInterfaceType::initializeModel() {

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPluginInterfaceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginInterfaceType::fromJsonObject(QJsonObject json) {

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("Capability")]);
    m_capability_isSet = !json[QString("Capability")].isNull() && m_capability_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIPluginInterfaceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginInterfaceType::asJsonObject() const {
    QJsonObject obj;
    if (m_capability_isSet) {
        obj.insert(QString("Capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPluginInterfaceType::getCapability() const {
    return m_capability;
}
void OAIPluginInterfaceType::setCapability(const QString &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIPluginInterfaceType::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIPluginInterfaceType::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIPluginInterfaceType::getPrefix() const {
    return m_prefix;
}
void OAIPluginInterfaceType::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIPluginInterfaceType::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIPluginInterfaceType::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIPluginInterfaceType::getVersion() const {
    return m_version;
}
void OAIPluginInterfaceType::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPluginInterfaceType::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPluginInterfaceType::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPluginInterfaceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginInterfaceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capability_isValid && m_prefix_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
