/**
 * Meshery API.
 * the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec
 *
 * The version of the OpenAPI document: 0.4.27
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationsAPIApi_H
#define OAI_OAIApplicationsAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationsAPIResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIMesheryApplication.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationsAPIApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationsAPIApi(const int timeOut = 0);
    ~OAIApplicationsAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void idDeleteApplicationFile();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idDeleteMesheryApplicationFile(const QString &id);


    virtual void idGetApplicationFileRequest();

    /**
    * @param[in]  id QString [required]
    */
    virtual void idGetMesheryApplication(const QString &id);


    virtual void idPostApplicationFileRequest();

    /**
    * @param[in]  upload_yaml_yml_file OAIHttpFileElement [optional]
    */
    virtual void idPostDeployApplicationFile(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &upload_yaml_yml_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void idDeleteApplicationFileCallback(OAIHttpRequestWorker *worker);
    void idDeleteMesheryApplicationFileCallback(OAIHttpRequestWorker *worker);
    void idGetApplicationFileRequestCallback(OAIHttpRequestWorker *worker);
    void idGetMesheryApplicationCallback(OAIHttpRequestWorker *worker);
    void idPostApplicationFileRequestCallback(OAIHttpRequestWorker *worker);
    void idPostDeployApplicationFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void idDeleteApplicationFileSignal();
    void idDeleteMesheryApplicationFileSignal();
    void idGetApplicationFileRequestSignal(OAIApplicationsAPIResponse summary);
    void idGetMesheryApplicationSignal(OAIMesheryApplication summary);
    void idPostApplicationFileRequestSignal(OAIMesheryApplication summary);
    void idPostDeployApplicationFileSignal(OAIMesheryApplication summary);


    void idDeleteApplicationFileSignalFull(OAIHttpRequestWorker *worker);
    void idDeleteMesheryApplicationFileSignalFull(OAIHttpRequestWorker *worker);
    void idGetApplicationFileRequestSignalFull(OAIHttpRequestWorker *worker, OAIApplicationsAPIResponse summary);
    void idGetMesheryApplicationSignalFull(OAIHttpRequestWorker *worker, OAIMesheryApplication summary);
    void idPostApplicationFileRequestSignalFull(OAIHttpRequestWorker *worker, OAIMesheryApplication summary);
    void idPostDeployApplicationFileSignalFull(OAIHttpRequestWorker *worker, OAIMesheryApplication summary);

    Q_DECL_DEPRECATED_X("Use idDeleteApplicationFileSignalError() instead")
    void idDeleteApplicationFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteApplicationFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteMesheryApplicationFileSignalError() instead")
    void idDeleteMesheryApplicationFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryApplicationFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetApplicationFileRequestSignalError() instead")
    void idGetApplicationFileRequestSignalE(OAIApplicationsAPIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetApplicationFileRequestSignalError(OAIApplicationsAPIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryApplicationSignalError() instead")
    void idGetMesheryApplicationSignalE(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryApplicationSignalError(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostApplicationFileRequestSignalError() instead")
    void idPostApplicationFileRequestSignalE(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostApplicationFileRequestSignalError(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostDeployApplicationFileSignalError() instead")
    void idPostDeployApplicationFileSignalE(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostDeployApplicationFileSignalError(OAIMesheryApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use idDeleteApplicationFileSignalErrorFull() instead")
    void idDeleteApplicationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteApplicationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idDeleteMesheryApplicationFileSignalErrorFull() instead")
    void idDeleteMesheryApplicationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idDeleteMesheryApplicationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetApplicationFileRequestSignalErrorFull() instead")
    void idGetApplicationFileRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetApplicationFileRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idGetMesheryApplicationSignalErrorFull() instead")
    void idGetMesheryApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idGetMesheryApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostApplicationFileRequestSignalErrorFull() instead")
    void idPostApplicationFileRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostApplicationFileRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idPostDeployApplicationFileSignalErrorFull() instead")
    void idPostDeployApplicationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idPostDeployApplicationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
