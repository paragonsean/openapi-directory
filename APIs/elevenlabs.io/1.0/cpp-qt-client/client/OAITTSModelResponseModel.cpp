/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITTSModelResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITTSModelResponseModel::OAITTSModelResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITTSModelResponseModel::OAITTSModelResponseModel() {
    this->initializeModel();
}

OAITTSModelResponseModel::~OAITTSModelResponseModel() {}

void OAITTSModelResponseModel::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_supported_language_isSet = false;
    m_supported_language_isValid = false;
}

void OAITTSModelResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITTSModelResponseModel::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("model_id")]);
    m_model_id_isSet = !json[QString("model_id")].isNull() && m_model_id_isValid;

    m_supported_language_isValid = ::OpenAPI::fromJsonValue(m_supported_language, json[QString("supported_language")]);
    m_supported_language_isSet = !json[QString("supported_language")].isNull() && m_supported_language_isValid;
}

QString OAITTSModelResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITTSModelResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("model_id"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_supported_language.size() > 0) {
        obj.insert(QString("supported_language"), ::OpenAPI::toJsonValue(m_supported_language));
    }
    return obj;
}

QString OAITTSModelResponseModel::getDisplayName() const {
    return m_display_name;
}
void OAITTSModelResponseModel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITTSModelResponseModel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITTSModelResponseModel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITTSModelResponseModel::getModelId() const {
    return m_model_id;
}
void OAITTSModelResponseModel::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAITTSModelResponseModel::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAITTSModelResponseModel::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QList<OAILanguageResponseModel> OAITTSModelResponseModel::getSupportedLanguage() const {
    return m_supported_language;
}
void OAITTSModelResponseModel::setSupportedLanguage(const QList<OAILanguageResponseModel> &supported_language) {
    m_supported_language = supported_language;
    m_supported_language_isSet = true;
}

bool OAITTSModelResponseModel::is_supported_language_Set() const{
    return m_supported_language_isSet;
}

bool OAITTSModelResponseModel::is_supported_language_Valid() const{
    return m_supported_language_isValid;
}

bool OAITTSModelResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_language.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITTSModelResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_model_id_isValid && m_supported_language_isValid && true;
}

} // namespace OpenAPI
