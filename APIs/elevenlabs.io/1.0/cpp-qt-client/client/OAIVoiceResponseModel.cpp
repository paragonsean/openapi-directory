/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoiceResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoiceResponseModel::OAIVoiceResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoiceResponseModel::OAIVoiceResponseModel() {
    this->initializeModel();
}

OAIVoiceResponseModel::~OAIVoiceResponseModel() {}

void OAIVoiceResponseModel::initializeModel() {

    m_available_for_tiers_isSet = false;
    m_available_for_tiers_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fine_tuning_isSet = false;
    m_fine_tuning_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preview_url_isSet = false;
    m_preview_url_isValid = false;

    m_samples_isSet = false;
    m_samples_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;
}

void OAIVoiceResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoiceResponseModel::fromJsonObject(QJsonObject json) {

    m_available_for_tiers_isValid = ::OpenAPI::fromJsonValue(m_available_for_tiers, json[QString("available_for_tiers")]);
    m_available_for_tiers_isSet = !json[QString("available_for_tiers")].isNull() && m_available_for_tiers_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fine_tuning_isValid = ::OpenAPI::fromJsonValue(m_fine_tuning, json[QString("fine_tuning")]);
    m_fine_tuning_isSet = !json[QString("fine_tuning")].isNull() && m_fine_tuning_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preview_url_isValid = ::OpenAPI::fromJsonValue(m_preview_url, json[QString("preview_url")]);
    m_preview_url_isSet = !json[QString("preview_url")].isNull() && m_preview_url_isValid;

    m_samples_isValid = ::OpenAPI::fromJsonValue(m_samples, json[QString("samples")]);
    m_samples_isSet = !json[QString("samples")].isNull() && m_samples_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("voice_id")]);
    m_voice_id_isSet = !json[QString("voice_id")].isNull() && m_voice_id_isValid;
}

QString OAIVoiceResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoiceResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_available_for_tiers.size() > 0) {
        obj.insert(QString("available_for_tiers"), ::OpenAPI::toJsonValue(m_available_for_tiers));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fine_tuning.isSet()) {
        obj.insert(QString("fine_tuning"), ::OpenAPI::toJsonValue(m_fine_tuning));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preview_url_isSet) {
        obj.insert(QString("preview_url"), ::OpenAPI::toJsonValue(m_preview_url));
    }
    if (m_samples.size() > 0) {
        obj.insert(QString("samples"), ::OpenAPI::toJsonValue(m_samples));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_voice_id_isSet) {
        obj.insert(QString("voice_id"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    return obj;
}

QList<QString> OAIVoiceResponseModel::getAvailableForTiers() const {
    return m_available_for_tiers;
}
void OAIVoiceResponseModel::setAvailableForTiers(const QList<QString> &available_for_tiers) {
    m_available_for_tiers = available_for_tiers;
    m_available_for_tiers_isSet = true;
}

bool OAIVoiceResponseModel::is_available_for_tiers_Set() const{
    return m_available_for_tiers_isSet;
}

bool OAIVoiceResponseModel::is_available_for_tiers_Valid() const{
    return m_available_for_tiers_isValid;
}

QString OAIVoiceResponseModel::getCategory() const {
    return m_category;
}
void OAIVoiceResponseModel::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIVoiceResponseModel::is_category_Set() const{
    return m_category_isSet;
}

bool OAIVoiceResponseModel::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIVoiceResponseModel::getDescription() const {
    return m_description;
}
void OAIVoiceResponseModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVoiceResponseModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVoiceResponseModel::is_description_Valid() const{
    return m_description_isValid;
}

OAIFineTuningResponseModel OAIVoiceResponseModel::getFineTuning() const {
    return m_fine_tuning;
}
void OAIVoiceResponseModel::setFineTuning(const OAIFineTuningResponseModel &fine_tuning) {
    m_fine_tuning = fine_tuning;
    m_fine_tuning_isSet = true;
}

bool OAIVoiceResponseModel::is_fine_tuning_Set() const{
    return m_fine_tuning_isSet;
}

bool OAIVoiceResponseModel::is_fine_tuning_Valid() const{
    return m_fine_tuning_isValid;
}

QMap<QString, QString> OAIVoiceResponseModel::getLabels() const {
    return m_labels;
}
void OAIVoiceResponseModel::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIVoiceResponseModel::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIVoiceResponseModel::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIVoiceResponseModel::getName() const {
    return m_name;
}
void OAIVoiceResponseModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVoiceResponseModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVoiceResponseModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVoiceResponseModel::getPreviewUrl() const {
    return m_preview_url;
}
void OAIVoiceResponseModel::setPreviewUrl(const QString &preview_url) {
    m_preview_url = preview_url;
    m_preview_url_isSet = true;
}

bool OAIVoiceResponseModel::is_preview_url_Set() const{
    return m_preview_url_isSet;
}

bool OAIVoiceResponseModel::is_preview_url_Valid() const{
    return m_preview_url_isValid;
}

QList<OAISampleResponseModel> OAIVoiceResponseModel::getSamples() const {
    return m_samples;
}
void OAIVoiceResponseModel::setSamples(const QList<OAISampleResponseModel> &samples) {
    m_samples = samples;
    m_samples_isSet = true;
}

bool OAIVoiceResponseModel::is_samples_Set() const{
    return m_samples_isSet;
}

bool OAIVoiceResponseModel::is_samples_Valid() const{
    return m_samples_isValid;
}

OAIVoiceSettingsResponseModel OAIVoiceResponseModel::getSettings() const {
    return m_settings;
}
void OAIVoiceResponseModel::setSettings(const OAIVoiceSettingsResponseModel &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIVoiceResponseModel::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIVoiceResponseModel::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIVoiceResponseModel::getVoiceId() const {
    return m_voice_id;
}
void OAIVoiceResponseModel::setVoiceId(const QString &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAIVoiceResponseModel::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAIVoiceResponseModel::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

bool OAIVoiceResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_for_tiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_tuning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoiceResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_for_tiers_isValid && m_category_isValid && m_description_isValid && m_fine_tuning_isValid && m_labels_isValid && m_name_isValid && m_preview_url_isValid && m_samples_isValid && m_settings_isValid && m_voice_id_isValid && true;
}

} // namespace OpenAPI
