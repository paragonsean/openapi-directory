/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISampleResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISampleResponseModel::OAISampleResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISampleResponseModel::OAISampleResponseModel() {
    this->initializeModel();
}

OAISampleResponseModel::~OAISampleResponseModel() {}

void OAISampleResponseModel::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;
}

void OAISampleResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISampleResponseModel::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sample_id")]);
    m_sample_id_isSet = !json[QString("sample_id")].isNull() && m_sample_id_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("size_bytes")]);
    m_size_bytes_isSet = !json[QString("size_bytes")].isNull() && m_size_bytes_isValid;
}

QString OAISampleResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISampleResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sample_id"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("size_bytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    return obj;
}

QString OAISampleResponseModel::getFileName() const {
    return m_file_name;
}
void OAISampleResponseModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISampleResponseModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISampleResponseModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAISampleResponseModel::getHash() const {
    return m_hash;
}
void OAISampleResponseModel::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAISampleResponseModel::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAISampleResponseModel::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAISampleResponseModel::getMimeType() const {
    return m_mime_type;
}
void OAISampleResponseModel::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAISampleResponseModel::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAISampleResponseModel::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAISampleResponseModel::getSampleId() const {
    return m_sample_id;
}
void OAISampleResponseModel::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAISampleResponseModel::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAISampleResponseModel::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

qint32 OAISampleResponseModel::getSizeBytes() const {
    return m_size_bytes;
}
void OAISampleResponseModel::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAISampleResponseModel::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAISampleResponseModel::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

bool OAISampleResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISampleResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && m_hash_isValid && m_mime_type_isValid && m_sample_id_isValid && m_size_bytes_isValid && true;
}

} // namespace OpenAPI
