/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedbackResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedbackResponseModel::OAIFeedbackResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedbackResponseModel::OAIFeedbackResponseModel() {
    this->initializeModel();
}

OAIFeedbackResponseModel::~OAIFeedbackResponseModel() {}

void OAIFeedbackResponseModel::initializeModel() {

    m_audio_quality_isSet = false;
    m_audio_quality_isValid = false;

    m_emotions_isSet = false;
    m_emotions_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_glitches_isSet = false;
    m_glitches_isValid = false;

    m_inaccurate_clone_isSet = false;
    m_inaccurate_clone_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_thumbs_up_isSet = false;
    m_thumbs_up_isValid = false;
}

void OAIFeedbackResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedbackResponseModel::fromJsonObject(QJsonObject json) {

    m_audio_quality_isValid = ::OpenAPI::fromJsonValue(m_audio_quality, json[QString("audio_quality")]);
    m_audio_quality_isSet = !json[QString("audio_quality")].isNull() && m_audio_quality_isValid;

    m_emotions_isValid = ::OpenAPI::fromJsonValue(m_emotions, json[QString("emotions")]);
    m_emotions_isSet = !json[QString("emotions")].isNull() && m_emotions_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_glitches_isValid = ::OpenAPI::fromJsonValue(m_glitches, json[QString("glitches")]);
    m_glitches_isSet = !json[QString("glitches")].isNull() && m_glitches_isValid;

    m_inaccurate_clone_isValid = ::OpenAPI::fromJsonValue(m_inaccurate_clone, json[QString("inaccurate_clone")]);
    m_inaccurate_clone_isSet = !json[QString("inaccurate_clone")].isNull() && m_inaccurate_clone_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("review_status")]);
    m_review_status_isSet = !json[QString("review_status")].isNull() && m_review_status_isValid;

    m_thumbs_up_isValid = ::OpenAPI::fromJsonValue(m_thumbs_up, json[QString("thumbs_up")]);
    m_thumbs_up_isSet = !json[QString("thumbs_up")].isNull() && m_thumbs_up_isValid;
}

QString OAIFeedbackResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedbackResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_quality_isSet) {
        obj.insert(QString("audio_quality"), ::OpenAPI::toJsonValue(m_audio_quality));
    }
    if (m_emotions_isSet) {
        obj.insert(QString("emotions"), ::OpenAPI::toJsonValue(m_emotions));
    }
    if (m_feedback_isSet) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_glitches_isSet) {
        obj.insert(QString("glitches"), ::OpenAPI::toJsonValue(m_glitches));
    }
    if (m_inaccurate_clone_isSet) {
        obj.insert(QString("inaccurate_clone"), ::OpenAPI::toJsonValue(m_inaccurate_clone));
    }
    if (m_other_isSet) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("review_status"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_thumbs_up_isSet) {
        obj.insert(QString("thumbs_up"), ::OpenAPI::toJsonValue(m_thumbs_up));
    }
    return obj;
}

bool OAIFeedbackResponseModel::isAudioQuality() const {
    return m_audio_quality;
}
void OAIFeedbackResponseModel::setAudioQuality(const bool &audio_quality) {
    m_audio_quality = audio_quality;
    m_audio_quality_isSet = true;
}

bool OAIFeedbackResponseModel::is_audio_quality_Set() const{
    return m_audio_quality_isSet;
}

bool OAIFeedbackResponseModel::is_audio_quality_Valid() const{
    return m_audio_quality_isValid;
}

bool OAIFeedbackResponseModel::isEmotions() const {
    return m_emotions;
}
void OAIFeedbackResponseModel::setEmotions(const bool &emotions) {
    m_emotions = emotions;
    m_emotions_isSet = true;
}

bool OAIFeedbackResponseModel::is_emotions_Set() const{
    return m_emotions_isSet;
}

bool OAIFeedbackResponseModel::is_emotions_Valid() const{
    return m_emotions_isValid;
}

QString OAIFeedbackResponseModel::getFeedback() const {
    return m_feedback;
}
void OAIFeedbackResponseModel::setFeedback(const QString &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIFeedbackResponseModel::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIFeedbackResponseModel::is_feedback_Valid() const{
    return m_feedback_isValid;
}

bool OAIFeedbackResponseModel::isGlitches() const {
    return m_glitches;
}
void OAIFeedbackResponseModel::setGlitches(const bool &glitches) {
    m_glitches = glitches;
    m_glitches_isSet = true;
}

bool OAIFeedbackResponseModel::is_glitches_Set() const{
    return m_glitches_isSet;
}

bool OAIFeedbackResponseModel::is_glitches_Valid() const{
    return m_glitches_isValid;
}

bool OAIFeedbackResponseModel::isInaccurateClone() const {
    return m_inaccurate_clone;
}
void OAIFeedbackResponseModel::setInaccurateClone(const bool &inaccurate_clone) {
    m_inaccurate_clone = inaccurate_clone;
    m_inaccurate_clone_isSet = true;
}

bool OAIFeedbackResponseModel::is_inaccurate_clone_Set() const{
    return m_inaccurate_clone_isSet;
}

bool OAIFeedbackResponseModel::is_inaccurate_clone_Valid() const{
    return m_inaccurate_clone_isValid;
}

bool OAIFeedbackResponseModel::isOther() const {
    return m_other;
}
void OAIFeedbackResponseModel::setOther(const bool &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAIFeedbackResponseModel::is_other_Set() const{
    return m_other_isSet;
}

bool OAIFeedbackResponseModel::is_other_Valid() const{
    return m_other_isValid;
}

QString OAIFeedbackResponseModel::getReviewStatus() const {
    return m_review_status;
}
void OAIFeedbackResponseModel::setReviewStatus(const QString &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAIFeedbackResponseModel::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAIFeedbackResponseModel::is_review_status_Valid() const{
    return m_review_status_isValid;
}

bool OAIFeedbackResponseModel::isThumbsUp() const {
    return m_thumbs_up;
}
void OAIFeedbackResponseModel::setThumbsUp(const bool &thumbs_up) {
    m_thumbs_up = thumbs_up;
    m_thumbs_up_isSet = true;
}

bool OAIFeedbackResponseModel::is_thumbs_up_Set() const{
    return m_thumbs_up_isSet;
}

bool OAIFeedbackResponseModel::is_thumbs_up_Valid() const{
    return m_thumbs_up_isValid;
}

bool OAIFeedbackResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emotions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glitches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inaccurate_clone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbs_up_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedbackResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_quality_isValid && m_emotions_isValid && m_feedback_isValid && m_glitches_isValid && m_inaccurate_clone_isValid && m_other_isValid && m_thumbs_up_isValid && true;
}

} // namespace OpenAPI
