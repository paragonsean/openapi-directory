/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionResponseModel::OAISubscriptionResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionResponseModel::OAISubscriptionResponseModel() {
    this->initializeModel();
}

OAISubscriptionResponseModel::~OAISubscriptionResponseModel() {}

void OAISubscriptionResponseModel::initializeModel() {

    m_allowed_to_extend_character_limit_isSet = false;
    m_allowed_to_extend_character_limit_isValid = false;

    m_available_models_isSet = false;
    m_available_models_isValid = false;

    m_can_extend_character_limit_isSet = false;
    m_can_extend_character_limit_isValid = false;

    m_can_extend_voice_limit_isSet = false;
    m_can_extend_voice_limit_isValid = false;

    m_can_use_delayed_payment_methods_isSet = false;
    m_can_use_delayed_payment_methods_isValid = false;

    m_can_use_instant_voice_cloning_isSet = false;
    m_can_use_instant_voice_cloning_isValid = false;

    m_can_use_professional_voice_cloning_isSet = false;
    m_can_use_professional_voice_cloning_isValid = false;

    m_character_count_isSet = false;
    m_character_count_isValid = false;

    m_character_limit_isSet = false;
    m_character_limit_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_next_character_count_reset_unix_isSet = false;
    m_next_character_count_reset_unix_isValid = false;

    m_professional_voice_limit_isSet = false;
    m_professional_voice_limit_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_voice_limit_isSet = false;
    m_voice_limit_isValid = false;
}

void OAISubscriptionResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionResponseModel::fromJsonObject(QJsonObject json) {

    m_allowed_to_extend_character_limit_isValid = ::OpenAPI::fromJsonValue(m_allowed_to_extend_character_limit, json[QString("allowed_to_extend_character_limit")]);
    m_allowed_to_extend_character_limit_isSet = !json[QString("allowed_to_extend_character_limit")].isNull() && m_allowed_to_extend_character_limit_isValid;

    m_available_models_isValid = ::OpenAPI::fromJsonValue(m_available_models, json[QString("available_models")]);
    m_available_models_isSet = !json[QString("available_models")].isNull() && m_available_models_isValid;

    m_can_extend_character_limit_isValid = ::OpenAPI::fromJsonValue(m_can_extend_character_limit, json[QString("can_extend_character_limit")]);
    m_can_extend_character_limit_isSet = !json[QString("can_extend_character_limit")].isNull() && m_can_extend_character_limit_isValid;

    m_can_extend_voice_limit_isValid = ::OpenAPI::fromJsonValue(m_can_extend_voice_limit, json[QString("can_extend_voice_limit")]);
    m_can_extend_voice_limit_isSet = !json[QString("can_extend_voice_limit")].isNull() && m_can_extend_voice_limit_isValid;

    m_can_use_delayed_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_can_use_delayed_payment_methods, json[QString("can_use_delayed_payment_methods")]);
    m_can_use_delayed_payment_methods_isSet = !json[QString("can_use_delayed_payment_methods")].isNull() && m_can_use_delayed_payment_methods_isValid;

    m_can_use_instant_voice_cloning_isValid = ::OpenAPI::fromJsonValue(m_can_use_instant_voice_cloning, json[QString("can_use_instant_voice_cloning")]);
    m_can_use_instant_voice_cloning_isSet = !json[QString("can_use_instant_voice_cloning")].isNull() && m_can_use_instant_voice_cloning_isValid;

    m_can_use_professional_voice_cloning_isValid = ::OpenAPI::fromJsonValue(m_can_use_professional_voice_cloning, json[QString("can_use_professional_voice_cloning")]);
    m_can_use_professional_voice_cloning_isSet = !json[QString("can_use_professional_voice_cloning")].isNull() && m_can_use_professional_voice_cloning_isValid;

    m_character_count_isValid = ::OpenAPI::fromJsonValue(m_character_count, json[QString("character_count")]);
    m_character_count_isSet = !json[QString("character_count")].isNull() && m_character_count_isValid;

    m_character_limit_isValid = ::OpenAPI::fromJsonValue(m_character_limit, json[QString("character_limit")]);
    m_character_limit_isSet = !json[QString("character_limit")].isNull() && m_character_limit_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_next_character_count_reset_unix_isValid = ::OpenAPI::fromJsonValue(m_next_character_count_reset_unix, json[QString("next_character_count_reset_unix")]);
    m_next_character_count_reset_unix_isSet = !json[QString("next_character_count_reset_unix")].isNull() && m_next_character_count_reset_unix_isValid;

    m_professional_voice_limit_isValid = ::OpenAPI::fromJsonValue(m_professional_voice_limit, json[QString("professional_voice_limit")]);
    m_professional_voice_limit_isSet = !json[QString("professional_voice_limit")].isNull() && m_professional_voice_limit_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_voice_limit_isValid = ::OpenAPI::fromJsonValue(m_voice_limit, json[QString("voice_limit")]);
    m_voice_limit_isSet = !json[QString("voice_limit")].isNull() && m_voice_limit_isValid;
}

QString OAISubscriptionResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_to_extend_character_limit_isSet) {
        obj.insert(QString("allowed_to_extend_character_limit"), ::OpenAPI::toJsonValue(m_allowed_to_extend_character_limit));
    }
    if (m_available_models.size() > 0) {
        obj.insert(QString("available_models"), ::OpenAPI::toJsonValue(m_available_models));
    }
    if (m_can_extend_character_limit_isSet) {
        obj.insert(QString("can_extend_character_limit"), ::OpenAPI::toJsonValue(m_can_extend_character_limit));
    }
    if (m_can_extend_voice_limit_isSet) {
        obj.insert(QString("can_extend_voice_limit"), ::OpenAPI::toJsonValue(m_can_extend_voice_limit));
    }
    if (m_can_use_delayed_payment_methods_isSet) {
        obj.insert(QString("can_use_delayed_payment_methods"), ::OpenAPI::toJsonValue(m_can_use_delayed_payment_methods));
    }
    if (m_can_use_instant_voice_cloning_isSet) {
        obj.insert(QString("can_use_instant_voice_cloning"), ::OpenAPI::toJsonValue(m_can_use_instant_voice_cloning));
    }
    if (m_can_use_professional_voice_cloning_isSet) {
        obj.insert(QString("can_use_professional_voice_cloning"), ::OpenAPI::toJsonValue(m_can_use_professional_voice_cloning));
    }
    if (m_character_count_isSet) {
        obj.insert(QString("character_count"), ::OpenAPI::toJsonValue(m_character_count));
    }
    if (m_character_limit_isSet) {
        obj.insert(QString("character_limit"), ::OpenAPI::toJsonValue(m_character_limit));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_next_character_count_reset_unix_isSet) {
        obj.insert(QString("next_character_count_reset_unix"), ::OpenAPI::toJsonValue(m_next_character_count_reset_unix));
    }
    if (m_professional_voice_limit_isSet) {
        obj.insert(QString("professional_voice_limit"), ::OpenAPI::toJsonValue(m_professional_voice_limit));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_voice_limit_isSet) {
        obj.insert(QString("voice_limit"), ::OpenAPI::toJsonValue(m_voice_limit));
    }
    return obj;
}

bool OAISubscriptionResponseModel::isAllowedToExtendCharacterLimit() const {
    return m_allowed_to_extend_character_limit;
}
void OAISubscriptionResponseModel::setAllowedToExtendCharacterLimit(const bool &allowed_to_extend_character_limit) {
    m_allowed_to_extend_character_limit = allowed_to_extend_character_limit;
    m_allowed_to_extend_character_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_allowed_to_extend_character_limit_Set() const{
    return m_allowed_to_extend_character_limit_isSet;
}

bool OAISubscriptionResponseModel::is_allowed_to_extend_character_limit_Valid() const{
    return m_allowed_to_extend_character_limit_isValid;
}

QList<OAITTSModelResponseModel> OAISubscriptionResponseModel::getAvailableModels() const {
    return m_available_models;
}
void OAISubscriptionResponseModel::setAvailableModels(const QList<OAITTSModelResponseModel> &available_models) {
    m_available_models = available_models;
    m_available_models_isSet = true;
}

bool OAISubscriptionResponseModel::is_available_models_Set() const{
    return m_available_models_isSet;
}

bool OAISubscriptionResponseModel::is_available_models_Valid() const{
    return m_available_models_isValid;
}

bool OAISubscriptionResponseModel::isCanExtendCharacterLimit() const {
    return m_can_extend_character_limit;
}
void OAISubscriptionResponseModel::setCanExtendCharacterLimit(const bool &can_extend_character_limit) {
    m_can_extend_character_limit = can_extend_character_limit;
    m_can_extend_character_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_can_extend_character_limit_Set() const{
    return m_can_extend_character_limit_isSet;
}

bool OAISubscriptionResponseModel::is_can_extend_character_limit_Valid() const{
    return m_can_extend_character_limit_isValid;
}

bool OAISubscriptionResponseModel::isCanExtendVoiceLimit() const {
    return m_can_extend_voice_limit;
}
void OAISubscriptionResponseModel::setCanExtendVoiceLimit(const bool &can_extend_voice_limit) {
    m_can_extend_voice_limit = can_extend_voice_limit;
    m_can_extend_voice_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_can_extend_voice_limit_Set() const{
    return m_can_extend_voice_limit_isSet;
}

bool OAISubscriptionResponseModel::is_can_extend_voice_limit_Valid() const{
    return m_can_extend_voice_limit_isValid;
}

bool OAISubscriptionResponseModel::isCanUseDelayedPaymentMethods() const {
    return m_can_use_delayed_payment_methods;
}
void OAISubscriptionResponseModel::setCanUseDelayedPaymentMethods(const bool &can_use_delayed_payment_methods) {
    m_can_use_delayed_payment_methods = can_use_delayed_payment_methods;
    m_can_use_delayed_payment_methods_isSet = true;
}

bool OAISubscriptionResponseModel::is_can_use_delayed_payment_methods_Set() const{
    return m_can_use_delayed_payment_methods_isSet;
}

bool OAISubscriptionResponseModel::is_can_use_delayed_payment_methods_Valid() const{
    return m_can_use_delayed_payment_methods_isValid;
}

bool OAISubscriptionResponseModel::isCanUseInstantVoiceCloning() const {
    return m_can_use_instant_voice_cloning;
}
void OAISubscriptionResponseModel::setCanUseInstantVoiceCloning(const bool &can_use_instant_voice_cloning) {
    m_can_use_instant_voice_cloning = can_use_instant_voice_cloning;
    m_can_use_instant_voice_cloning_isSet = true;
}

bool OAISubscriptionResponseModel::is_can_use_instant_voice_cloning_Set() const{
    return m_can_use_instant_voice_cloning_isSet;
}

bool OAISubscriptionResponseModel::is_can_use_instant_voice_cloning_Valid() const{
    return m_can_use_instant_voice_cloning_isValid;
}

bool OAISubscriptionResponseModel::isCanUseProfessionalVoiceCloning() const {
    return m_can_use_professional_voice_cloning;
}
void OAISubscriptionResponseModel::setCanUseProfessionalVoiceCloning(const bool &can_use_professional_voice_cloning) {
    m_can_use_professional_voice_cloning = can_use_professional_voice_cloning;
    m_can_use_professional_voice_cloning_isSet = true;
}

bool OAISubscriptionResponseModel::is_can_use_professional_voice_cloning_Set() const{
    return m_can_use_professional_voice_cloning_isSet;
}

bool OAISubscriptionResponseModel::is_can_use_professional_voice_cloning_Valid() const{
    return m_can_use_professional_voice_cloning_isValid;
}

qint32 OAISubscriptionResponseModel::getCharacterCount() const {
    return m_character_count;
}
void OAISubscriptionResponseModel::setCharacterCount(const qint32 &character_count) {
    m_character_count = character_count;
    m_character_count_isSet = true;
}

bool OAISubscriptionResponseModel::is_character_count_Set() const{
    return m_character_count_isSet;
}

bool OAISubscriptionResponseModel::is_character_count_Valid() const{
    return m_character_count_isValid;
}

qint32 OAISubscriptionResponseModel::getCharacterLimit() const {
    return m_character_limit;
}
void OAISubscriptionResponseModel::setCharacterLimit(const qint32 &character_limit) {
    m_character_limit = character_limit;
    m_character_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_character_limit_Set() const{
    return m_character_limit_isSet;
}

bool OAISubscriptionResponseModel::is_character_limit_Valid() const{
    return m_character_limit_isValid;
}

QString OAISubscriptionResponseModel::getCurrency() const {
    return m_currency;
}
void OAISubscriptionResponseModel::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISubscriptionResponseModel::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISubscriptionResponseModel::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAISubscriptionResponseModel::getNextCharacterCountResetUnix() const {
    return m_next_character_count_reset_unix;
}
void OAISubscriptionResponseModel::setNextCharacterCountResetUnix(const qint32 &next_character_count_reset_unix) {
    m_next_character_count_reset_unix = next_character_count_reset_unix;
    m_next_character_count_reset_unix_isSet = true;
}

bool OAISubscriptionResponseModel::is_next_character_count_reset_unix_Set() const{
    return m_next_character_count_reset_unix_isSet;
}

bool OAISubscriptionResponseModel::is_next_character_count_reset_unix_Valid() const{
    return m_next_character_count_reset_unix_isValid;
}

qint32 OAISubscriptionResponseModel::getProfessionalVoiceLimit() const {
    return m_professional_voice_limit;
}
void OAISubscriptionResponseModel::setProfessionalVoiceLimit(const qint32 &professional_voice_limit) {
    m_professional_voice_limit = professional_voice_limit;
    m_professional_voice_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_professional_voice_limit_Set() const{
    return m_professional_voice_limit_isSet;
}

bool OAISubscriptionResponseModel::is_professional_voice_limit_Valid() const{
    return m_professional_voice_limit_isValid;
}

QString OAISubscriptionResponseModel::getStatus() const {
    return m_status;
}
void OAISubscriptionResponseModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionResponseModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionResponseModel::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscriptionResponseModel::getTier() const {
    return m_tier;
}
void OAISubscriptionResponseModel::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAISubscriptionResponseModel::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAISubscriptionResponseModel::is_tier_Valid() const{
    return m_tier_isValid;
}

qint32 OAISubscriptionResponseModel::getVoiceLimit() const {
    return m_voice_limit;
}
void OAISubscriptionResponseModel::setVoiceLimit(const qint32 &voice_limit) {
    m_voice_limit = voice_limit;
    m_voice_limit_isSet = true;
}

bool OAISubscriptionResponseModel::is_voice_limit_Set() const{
    return m_voice_limit_isSet;
}

bool OAISubscriptionResponseModel::is_voice_limit_Valid() const{
    return m_voice_limit_isValid;
}

bool OAISubscriptionResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_to_extend_character_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_extend_character_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_extend_voice_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_use_delayed_payment_methods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_use_instant_voice_cloning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_use_professional_voice_cloning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_character_count_reset_unix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_professional_voice_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_to_extend_character_limit_isValid && m_available_models_isValid && m_can_extend_character_limit_isValid && m_can_extend_voice_limit_isValid && m_can_use_delayed_payment_methods_isValid && m_can_use_instant_voice_cloning_isValid && m_can_use_professional_voice_cloning_isValid && m_character_count_isValid && m_character_limit_isValid && m_currency_isValid && m_next_character_count_reset_unix_isValid && m_professional_voice_limit_isValid && m_status_isValid && m_tier_isValid && m_voice_limit_isValid && true;
}

} // namespace OpenAPI
