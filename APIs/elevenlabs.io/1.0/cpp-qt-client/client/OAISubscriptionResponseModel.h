/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionResponseModel.h
 *
 * 
 */

#ifndef OAISubscriptionResponseModel_H
#define OAISubscriptionResponseModel_H

#include <QJsonObject>

#include "OAITTSModelResponseModel.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITTSModelResponseModel;

class OAISubscriptionResponseModel : public OAIObject {
public:
    OAISubscriptionResponseModel();
    OAISubscriptionResponseModel(QString json);
    ~OAISubscriptionResponseModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowedToExtendCharacterLimit() const;
    void setAllowedToExtendCharacterLimit(const bool &allowed_to_extend_character_limit);
    bool is_allowed_to_extend_character_limit_Set() const;
    bool is_allowed_to_extend_character_limit_Valid() const;

    QList<OAITTSModelResponseModel> getAvailableModels() const;
    void setAvailableModels(const QList<OAITTSModelResponseModel> &available_models);
    bool is_available_models_Set() const;
    bool is_available_models_Valid() const;

    bool isCanExtendCharacterLimit() const;
    void setCanExtendCharacterLimit(const bool &can_extend_character_limit);
    bool is_can_extend_character_limit_Set() const;
    bool is_can_extend_character_limit_Valid() const;

    bool isCanExtendVoiceLimit() const;
    void setCanExtendVoiceLimit(const bool &can_extend_voice_limit);
    bool is_can_extend_voice_limit_Set() const;
    bool is_can_extend_voice_limit_Valid() const;

    bool isCanUseDelayedPaymentMethods() const;
    void setCanUseDelayedPaymentMethods(const bool &can_use_delayed_payment_methods);
    bool is_can_use_delayed_payment_methods_Set() const;
    bool is_can_use_delayed_payment_methods_Valid() const;

    bool isCanUseInstantVoiceCloning() const;
    void setCanUseInstantVoiceCloning(const bool &can_use_instant_voice_cloning);
    bool is_can_use_instant_voice_cloning_Set() const;
    bool is_can_use_instant_voice_cloning_Valid() const;

    bool isCanUseProfessionalVoiceCloning() const;
    void setCanUseProfessionalVoiceCloning(const bool &can_use_professional_voice_cloning);
    bool is_can_use_professional_voice_cloning_Set() const;
    bool is_can_use_professional_voice_cloning_Valid() const;

    qint32 getCharacterCount() const;
    void setCharacterCount(const qint32 &character_count);
    bool is_character_count_Set() const;
    bool is_character_count_Valid() const;

    qint32 getCharacterLimit() const;
    void setCharacterLimit(const qint32 &character_limit);
    bool is_character_limit_Set() const;
    bool is_character_limit_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    qint32 getNextCharacterCountResetUnix() const;
    void setNextCharacterCountResetUnix(const qint32 &next_character_count_reset_unix);
    bool is_next_character_count_reset_unix_Set() const;
    bool is_next_character_count_reset_unix_Valid() const;

    qint32 getProfessionalVoiceLimit() const;
    void setProfessionalVoiceLimit(const qint32 &professional_voice_limit);
    bool is_professional_voice_limit_Set() const;
    bool is_professional_voice_limit_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    qint32 getVoiceLimit() const;
    void setVoiceLimit(const qint32 &voice_limit);
    bool is_voice_limit_Set() const;
    bool is_voice_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allowed_to_extend_character_limit;
    bool m_allowed_to_extend_character_limit_isSet;
    bool m_allowed_to_extend_character_limit_isValid;

    QList<OAITTSModelResponseModel> m_available_models;
    bool m_available_models_isSet;
    bool m_available_models_isValid;

    bool m_can_extend_character_limit;
    bool m_can_extend_character_limit_isSet;
    bool m_can_extend_character_limit_isValid;

    bool m_can_extend_voice_limit;
    bool m_can_extend_voice_limit_isSet;
    bool m_can_extend_voice_limit_isValid;

    bool m_can_use_delayed_payment_methods;
    bool m_can_use_delayed_payment_methods_isSet;
    bool m_can_use_delayed_payment_methods_isValid;

    bool m_can_use_instant_voice_cloning;
    bool m_can_use_instant_voice_cloning_isSet;
    bool m_can_use_instant_voice_cloning_isValid;

    bool m_can_use_professional_voice_cloning;
    bool m_can_use_professional_voice_cloning_isSet;
    bool m_can_use_professional_voice_cloning_isValid;

    qint32 m_character_count;
    bool m_character_count_isSet;
    bool m_character_count_isValid;

    qint32 m_character_limit;
    bool m_character_limit_isSet;
    bool m_character_limit_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    qint32 m_next_character_count_reset_unix;
    bool m_next_character_count_reset_unix_isSet;
    bool m_next_character_count_reset_unix_isValid;

    qint32 m_professional_voice_limit;
    bool m_professional_voice_limit_isSet;
    bool m_professional_voice_limit_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    qint32 m_voice_limit;
    bool m_voice_limit_isSet;
    bool m_voice_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionResponseModel)

#endif // OAISubscriptionResponseModel_H
