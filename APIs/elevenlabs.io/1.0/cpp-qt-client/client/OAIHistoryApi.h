/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHistoryApi_H
#define OAI_OAIHistoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBody_Delete_history_items_v1_history_delete_post.h"
#include "OAIBody_Download_history_items_v1_history_download_post.h"
#include "OAIGetHistoryResponseModel.h"
#include "OAIHTTPValidationError.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHistoryApi : public QObject {
    Q_OBJECT

public:
    OAIHistoryApi(const int timeOut = 0);
    ~OAIHistoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  history_item_id QString [required]
    * @param[in]  xi_api_key QString [optional]
    */
    virtual void deleteHistoryItemV1HistoryHistoryItemIdDelete(const QString &history_item_id, const ::OpenAPI::OptionalParam<QString> &xi_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_body_delete_history_items_v1_history_delete_post OAIBody_Delete_history_items_v1_history_delete_post [required]
    * @param[in]  xi_api_key QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteHistoryItemsV1HistoryDeletePost(const OAIBody_Delete_history_items_v1_history_delete_post &oai_body_delete_history_items_v1_history_delete_post, const ::OpenAPI::OptionalParam<QString> &xi_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_body_download_history_items_v1_history_download_post OAIBody_Download_history_items_v1_history_download_post [required]
    * @param[in]  xi_api_key QString [optional]
    */
    virtual void downloadHistoryItemsV1HistoryDownloadPost(const OAIBody_Download_history_items_v1_history_download_post &oai_body_download_history_items_v1_history_download_post, const ::OpenAPI::OptionalParam<QString> &xi_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  history_item_id QString [required]
    * @param[in]  xi_api_key QString [optional]
    */
    virtual void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(const QString &history_item_id, const ::OpenAPI::OptionalParam<QString> &xi_api_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  xi_api_key QString [optional]
    */
    virtual void getGeneratedItemsV1HistoryGet(const ::OpenAPI::OptionalParam<QString> &xi_api_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteHistoryItemV1HistoryHistoryItemIdDeleteCallback(OAIHttpRequestWorker *worker);
    void deleteHistoryItemsV1HistoryDeletePostCallback(OAIHttpRequestWorker *worker);
    void downloadHistoryItemsV1HistoryDownloadPostCallback(OAIHttpRequestWorker *worker);
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetCallback(OAIHttpRequestWorker *worker);
    void getGeneratedItemsV1HistoryGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignal(QJsonValue summary);
    void deleteHistoryItemsV1HistoryDeletePostSignal(QJsonValue summary);
    void downloadHistoryItemsV1HistoryDownloadPostSignal();
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignal();
    void getGeneratedItemsV1HistoryGetSignal(OAIGetHistoryResponseModel summary);


    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteHistoryItemsV1HistoryDeletePostSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void downloadHistoryItemsV1HistoryDownloadPostSignalFull(OAIHttpRequestWorker *worker);
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalFull(OAIHttpRequestWorker *worker);
    void getGeneratedItemsV1HistoryGetSignalFull(OAIHttpRequestWorker *worker, OAIGetHistoryResponseModel summary);

    Q_DECL_DEPRECATED_X("Use deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalError() instead")
    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHistoryItemsV1HistoryDeletePostSignalError() instead")
    void deleteHistoryItemsV1HistoryDeletePostSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHistoryItemsV1HistoryDeletePostSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadHistoryItemsV1HistoryDownloadPostSignalError() instead")
    void downloadHistoryItemsV1HistoryDownloadPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadHistoryItemsV1HistoryDownloadPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalError() instead")
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneratedItemsV1HistoryGetSignalError() instead")
    void getGeneratedItemsV1HistoryGetSignalE(OAIGetHistoryResponseModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneratedItemsV1HistoryGetSignalError(OAIGetHistoryResponseModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalErrorFull() instead")
    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHistoryItemV1HistoryHistoryItemIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHistoryItemsV1HistoryDeletePostSignalErrorFull() instead")
    void deleteHistoryItemsV1HistoryDeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHistoryItemsV1HistoryDeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadHistoryItemsV1HistoryDownloadPostSignalErrorFull() instead")
    void downloadHistoryItemsV1HistoryDownloadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadHistoryItemsV1HistoryDownloadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalErrorFull() instead")
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeneratedItemsV1HistoryGetSignalErrorFull() instead")
    void getGeneratedItemsV1HistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeneratedItemsV1HistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
