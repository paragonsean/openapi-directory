/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryItemResponseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryItemResponseModel::OAIHistoryItemResponseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryItemResponseModel::OAIHistoryItemResponseModel() {
    this->initializeModel();
}

OAIHistoryItemResponseModel::~OAIHistoryItemResponseModel() {}

void OAIHistoryItemResponseModel::initializeModel() {

    m_character_count_change_from_isSet = false;
    m_character_count_change_from_isValid = false;

    m_character_count_change_to_isSet = false;
    m_character_count_change_to_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_date_unix_isSet = false;
    m_date_unix_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_history_item_id_isSet = false;
    m_history_item_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;

    m_voice_name_isSet = false;
    m_voice_name_isValid = false;
}

void OAIHistoryItemResponseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryItemResponseModel::fromJsonObject(QJsonObject json) {

    m_character_count_change_from_isValid = ::OpenAPI::fromJsonValue(m_character_count_change_from, json[QString("character_count_change_from")]);
    m_character_count_change_from_isSet = !json[QString("character_count_change_from")].isNull() && m_character_count_change_from_isValid;

    m_character_count_change_to_isValid = ::OpenAPI::fromJsonValue(m_character_count_change_to, json[QString("character_count_change_to")]);
    m_character_count_change_to_isSet = !json[QString("character_count_change_to")].isNull() && m_character_count_change_to_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_date_unix_isValid = ::OpenAPI::fromJsonValue(m_date_unix, json[QString("date_unix")]);
    m_date_unix_isSet = !json[QString("date_unix")].isNull() && m_date_unix_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_history_item_id_isValid = ::OpenAPI::fromJsonValue(m_history_item_id, json[QString("history_item_id")]);
    m_history_item_id_isSet = !json[QString("history_item_id")].isNull() && m_history_item_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("voice_id")]);
    m_voice_id_isSet = !json[QString("voice_id")].isNull() && m_voice_id_isValid;

    m_voice_name_isValid = ::OpenAPI::fromJsonValue(m_voice_name, json[QString("voice_name")]);
    m_voice_name_isSet = !json[QString("voice_name")].isNull() && m_voice_name_isValid;
}

QString OAIHistoryItemResponseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryItemResponseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_character_count_change_from_isSet) {
        obj.insert(QString("character_count_change_from"), ::OpenAPI::toJsonValue(m_character_count_change_from));
    }
    if (m_character_count_change_to_isSet) {
        obj.insert(QString("character_count_change_to"), ::OpenAPI::toJsonValue(m_character_count_change_to));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_date_unix_isSet) {
        obj.insert(QString("date_unix"), ::OpenAPI::toJsonValue(m_date_unix));
    }
    if (m_feedback.isSet()) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_history_item_id_isSet) {
        obj.insert(QString("history_item_id"), ::OpenAPI::toJsonValue(m_history_item_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_voice_id_isSet) {
        obj.insert(QString("voice_id"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    if (m_voice_name_isSet) {
        obj.insert(QString("voice_name"), ::OpenAPI::toJsonValue(m_voice_name));
    }
    return obj;
}

qint32 OAIHistoryItemResponseModel::getCharacterCountChangeFrom() const {
    return m_character_count_change_from;
}
void OAIHistoryItemResponseModel::setCharacterCountChangeFrom(const qint32 &character_count_change_from) {
    m_character_count_change_from = character_count_change_from;
    m_character_count_change_from_isSet = true;
}

bool OAIHistoryItemResponseModel::is_character_count_change_from_Set() const{
    return m_character_count_change_from_isSet;
}

bool OAIHistoryItemResponseModel::is_character_count_change_from_Valid() const{
    return m_character_count_change_from_isValid;
}

qint32 OAIHistoryItemResponseModel::getCharacterCountChangeTo() const {
    return m_character_count_change_to;
}
void OAIHistoryItemResponseModel::setCharacterCountChangeTo(const qint32 &character_count_change_to) {
    m_character_count_change_to = character_count_change_to;
    m_character_count_change_to_isSet = true;
}

bool OAIHistoryItemResponseModel::is_character_count_change_to_Set() const{
    return m_character_count_change_to_isSet;
}

bool OAIHistoryItemResponseModel::is_character_count_change_to_Valid() const{
    return m_character_count_change_to_isValid;
}

QString OAIHistoryItemResponseModel::getContentType() const {
    return m_content_type;
}
void OAIHistoryItemResponseModel::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIHistoryItemResponseModel::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIHistoryItemResponseModel::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIHistoryItemResponseModel::getDateUnix() const {
    return m_date_unix;
}
void OAIHistoryItemResponseModel::setDateUnix(const qint32 &date_unix) {
    m_date_unix = date_unix;
    m_date_unix_isSet = true;
}

bool OAIHistoryItemResponseModel::is_date_unix_Set() const{
    return m_date_unix_isSet;
}

bool OAIHistoryItemResponseModel::is_date_unix_Valid() const{
    return m_date_unix_isValid;
}

OAIFeedbackResponseModel OAIHistoryItemResponseModel::getFeedback() const {
    return m_feedback;
}
void OAIHistoryItemResponseModel::setFeedback(const OAIFeedbackResponseModel &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIHistoryItemResponseModel::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIHistoryItemResponseModel::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QString OAIHistoryItemResponseModel::getHistoryItemId() const {
    return m_history_item_id;
}
void OAIHistoryItemResponseModel::setHistoryItemId(const QString &history_item_id) {
    m_history_item_id = history_item_id;
    m_history_item_id_isSet = true;
}

bool OAIHistoryItemResponseModel::is_history_item_id_Set() const{
    return m_history_item_id_isSet;
}

bool OAIHistoryItemResponseModel::is_history_item_id_Valid() const{
    return m_history_item_id_isValid;
}

QString OAIHistoryItemResponseModel::getRequestId() const {
    return m_request_id;
}
void OAIHistoryItemResponseModel::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIHistoryItemResponseModel::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIHistoryItemResponseModel::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIObject OAIHistoryItemResponseModel::getSettings() const {
    return m_settings;
}
void OAIHistoryItemResponseModel::setSettings(const OAIObject &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIHistoryItemResponseModel::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIHistoryItemResponseModel::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIHistoryItemResponseModel::getState() const {
    return m_state;
}
void OAIHistoryItemResponseModel::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIHistoryItemResponseModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIHistoryItemResponseModel::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIHistoryItemResponseModel::getText() const {
    return m_text;
}
void OAIHistoryItemResponseModel::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIHistoryItemResponseModel::is_text_Set() const{
    return m_text_isSet;
}

bool OAIHistoryItemResponseModel::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIHistoryItemResponseModel::getVoiceId() const {
    return m_voice_id;
}
void OAIHistoryItemResponseModel::setVoiceId(const QString &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAIHistoryItemResponseModel::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAIHistoryItemResponseModel::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

QString OAIHistoryItemResponseModel::getVoiceName() const {
    return m_voice_name;
}
void OAIHistoryItemResponseModel::setVoiceName(const QString &voice_name) {
    m_voice_name = voice_name;
    m_voice_name_isSet = true;
}

bool OAIHistoryItemResponseModel::is_voice_name_Set() const{
    return m_voice_name_isSet;
}

bool OAIHistoryItemResponseModel::is_voice_name_Valid() const{
    return m_voice_name_isValid;
}

bool OAIHistoryItemResponseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_count_change_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_count_change_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_unix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryItemResponseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_character_count_change_from_isValid && m_character_count_change_to_isValid && m_content_type_isValid && m_date_unix_isValid && m_feedback_isValid && m_history_item_id_isValid && m_request_id_isValid && m_settings_isValid && m_state_isValid && m_text_isValid && m_voice_id_isValid && m_voice_name_isValid && true;
}

} // namespace OpenAPI
