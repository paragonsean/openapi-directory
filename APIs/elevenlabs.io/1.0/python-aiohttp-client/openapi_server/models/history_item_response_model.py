# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feedback_response_model import FeedbackResponseModel
from openapi_server import util


class HistoryItemResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_count_change_from: int=None, character_count_change_to: int=None, content_type: str=None, date_unix: int=None, feedback: FeedbackResponseModel=None, history_item_id: str=None, request_id: str=None, settings: object=None, state: str=None, text: str=None, voice_id: str=None, voice_name: str=None):
        """HistoryItemResponseModel - a model defined in OpenAPI

        :param character_count_change_from: The character_count_change_from of this HistoryItemResponseModel.
        :param character_count_change_to: The character_count_change_to of this HistoryItemResponseModel.
        :param content_type: The content_type of this HistoryItemResponseModel.
        :param date_unix: The date_unix of this HistoryItemResponseModel.
        :param feedback: The feedback of this HistoryItemResponseModel.
        :param history_item_id: The history_item_id of this HistoryItemResponseModel.
        :param request_id: The request_id of this HistoryItemResponseModel.
        :param settings: The settings of this HistoryItemResponseModel.
        :param state: The state of this HistoryItemResponseModel.
        :param text: The text of this HistoryItemResponseModel.
        :param voice_id: The voice_id of this HistoryItemResponseModel.
        :param voice_name: The voice_name of this HistoryItemResponseModel.
        """
        self.openapi_types = {
            'character_count_change_from': int,
            'character_count_change_to': int,
            'content_type': str,
            'date_unix': int,
            'feedback': FeedbackResponseModel,
            'history_item_id': str,
            'request_id': str,
            'settings': object,
            'state': str,
            'text': str,
            'voice_id': str,
            'voice_name': str
        }

        self.attribute_map = {
            'character_count_change_from': 'character_count_change_from',
            'character_count_change_to': 'character_count_change_to',
            'content_type': 'content_type',
            'date_unix': 'date_unix',
            'feedback': 'feedback',
            'history_item_id': 'history_item_id',
            'request_id': 'request_id',
            'settings': 'settings',
            'state': 'state',
            'text': 'text',
            'voice_id': 'voice_id',
            'voice_name': 'voice_name'
        }

        self._character_count_change_from = character_count_change_from
        self._character_count_change_to = character_count_change_to
        self._content_type = content_type
        self._date_unix = date_unix
        self._feedback = feedback
        self._history_item_id = history_item_id
        self._request_id = request_id
        self._settings = settings
        self._state = state
        self._text = text
        self._voice_id = voice_id
        self._voice_name = voice_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryItemResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryItemResponseModel of this HistoryItemResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_count_change_from(self):
        """Gets the character_count_change_from of this HistoryItemResponseModel.


        :return: The character_count_change_from of this HistoryItemResponseModel.
        :rtype: int
        """
        return self._character_count_change_from

    @character_count_change_from.setter
    def character_count_change_from(self, character_count_change_from):
        """Sets the character_count_change_from of this HistoryItemResponseModel.


        :param character_count_change_from: The character_count_change_from of this HistoryItemResponseModel.
        :type character_count_change_from: int
        """
        if character_count_change_from is None:
            raise ValueError("Invalid value for `character_count_change_from`, must not be `None`")

        self._character_count_change_from = character_count_change_from

    @property
    def character_count_change_to(self):
        """Gets the character_count_change_to of this HistoryItemResponseModel.


        :return: The character_count_change_to of this HistoryItemResponseModel.
        :rtype: int
        """
        return self._character_count_change_to

    @character_count_change_to.setter
    def character_count_change_to(self, character_count_change_to):
        """Sets the character_count_change_to of this HistoryItemResponseModel.


        :param character_count_change_to: The character_count_change_to of this HistoryItemResponseModel.
        :type character_count_change_to: int
        """
        if character_count_change_to is None:
            raise ValueError("Invalid value for `character_count_change_to`, must not be `None`")

        self._character_count_change_to = character_count_change_to

    @property
    def content_type(self):
        """Gets the content_type of this HistoryItemResponseModel.


        :return: The content_type of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this HistoryItemResponseModel.


        :param content_type: The content_type of this HistoryItemResponseModel.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def date_unix(self):
        """Gets the date_unix of this HistoryItemResponseModel.


        :return: The date_unix of this HistoryItemResponseModel.
        :rtype: int
        """
        return self._date_unix

    @date_unix.setter
    def date_unix(self, date_unix):
        """Sets the date_unix of this HistoryItemResponseModel.


        :param date_unix: The date_unix of this HistoryItemResponseModel.
        :type date_unix: int
        """
        if date_unix is None:
            raise ValueError("Invalid value for `date_unix`, must not be `None`")

        self._date_unix = date_unix

    @property
    def feedback(self):
        """Gets the feedback of this HistoryItemResponseModel.


        :return: The feedback of this HistoryItemResponseModel.
        :rtype: FeedbackResponseModel
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this HistoryItemResponseModel.


        :param feedback: The feedback of this HistoryItemResponseModel.
        :type feedback: FeedbackResponseModel
        """
        if feedback is None:
            raise ValueError("Invalid value for `feedback`, must not be `None`")

        self._feedback = feedback

    @property
    def history_item_id(self):
        """Gets the history_item_id of this HistoryItemResponseModel.


        :return: The history_item_id of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._history_item_id

    @history_item_id.setter
    def history_item_id(self, history_item_id):
        """Sets the history_item_id of this HistoryItemResponseModel.


        :param history_item_id: The history_item_id of this HistoryItemResponseModel.
        :type history_item_id: str
        """
        if history_item_id is None:
            raise ValueError("Invalid value for `history_item_id`, must not be `None`")

        self._history_item_id = history_item_id

    @property
    def request_id(self):
        """Gets the request_id of this HistoryItemResponseModel.


        :return: The request_id of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this HistoryItemResponseModel.


        :param request_id: The request_id of this HistoryItemResponseModel.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def settings(self):
        """Gets the settings of this HistoryItemResponseModel.


        :return: The settings of this HistoryItemResponseModel.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this HistoryItemResponseModel.


        :param settings: The settings of this HistoryItemResponseModel.
        :type settings: object
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def state(self):
        """Gets the state of this HistoryItemResponseModel.


        :return: The state of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HistoryItemResponseModel.


        :param state: The state of this HistoryItemResponseModel.
        :type state: str
        """
        allowed_values = ["created", "deleted", "processing"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def text(self):
        """Gets the text of this HistoryItemResponseModel.


        :return: The text of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this HistoryItemResponseModel.


        :param text: The text of this HistoryItemResponseModel.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def voice_id(self):
        """Gets the voice_id of this HistoryItemResponseModel.


        :return: The voice_id of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this HistoryItemResponseModel.


        :param voice_id: The voice_id of this HistoryItemResponseModel.
        :type voice_id: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")

        self._voice_id = voice_id

    @property
    def voice_name(self):
        """Gets the voice_name of this HistoryItemResponseModel.


        :return: The voice_name of this HistoryItemResponseModel.
        :rtype: str
        """
        return self._voice_name

    @voice_name.setter
    def voice_name(self, voice_name):
        """Sets the voice_name of this HistoryItemResponseModel.


        :param voice_name: The voice_name of this HistoryItemResponseModel.
        :type voice_name: str
        """
        if voice_name is None:
            raise ValueError("Invalid value for `voice_name`, must not be `None`")

        self._voice_name = voice_name
