# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fine_tuning_response_model import FineTuningResponseModel
from openapi_server.models.sample_response_model import SampleResponseModel
from openapi_server.models.voice_settings_response_model import VoiceSettingsResponseModel
from openapi_server import util


class VoiceResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_for_tiers: List[str]=None, category: str=None, description: str=None, fine_tuning: FineTuningResponseModel=None, labels: Dict[str, str]=None, name: str=None, preview_url: str=None, samples: List[SampleResponseModel]=None, settings: VoiceSettingsResponseModel=None, voice_id: str=None):
        """VoiceResponseModel - a model defined in OpenAPI

        :param available_for_tiers: The available_for_tiers of this VoiceResponseModel.
        :param category: The category of this VoiceResponseModel.
        :param description: The description of this VoiceResponseModel.
        :param fine_tuning: The fine_tuning of this VoiceResponseModel.
        :param labels: The labels of this VoiceResponseModel.
        :param name: The name of this VoiceResponseModel.
        :param preview_url: The preview_url of this VoiceResponseModel.
        :param samples: The samples of this VoiceResponseModel.
        :param settings: The settings of this VoiceResponseModel.
        :param voice_id: The voice_id of this VoiceResponseModel.
        """
        self.openapi_types = {
            'available_for_tiers': List[str],
            'category': str,
            'description': str,
            'fine_tuning': FineTuningResponseModel,
            'labels': Dict[str, str],
            'name': str,
            'preview_url': str,
            'samples': List[SampleResponseModel],
            'settings': VoiceSettingsResponseModel,
            'voice_id': str
        }

        self.attribute_map = {
            'available_for_tiers': 'available_for_tiers',
            'category': 'category',
            'description': 'description',
            'fine_tuning': 'fine_tuning',
            'labels': 'labels',
            'name': 'name',
            'preview_url': 'preview_url',
            'samples': 'samples',
            'settings': 'settings',
            'voice_id': 'voice_id'
        }

        self._available_for_tiers = available_for_tiers
        self._category = category
        self._description = description
        self._fine_tuning = fine_tuning
        self._labels = labels
        self._name = name
        self._preview_url = preview_url
        self._samples = samples
        self._settings = settings
        self._voice_id = voice_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoiceResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoiceResponseModel of this VoiceResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_for_tiers(self):
        """Gets the available_for_tiers of this VoiceResponseModel.


        :return: The available_for_tiers of this VoiceResponseModel.
        :rtype: List[str]
        """
        return self._available_for_tiers

    @available_for_tiers.setter
    def available_for_tiers(self, available_for_tiers):
        """Sets the available_for_tiers of this VoiceResponseModel.


        :param available_for_tiers: The available_for_tiers of this VoiceResponseModel.
        :type available_for_tiers: List[str]
        """
        if available_for_tiers is None:
            raise ValueError("Invalid value for `available_for_tiers`, must not be `None`")

        self._available_for_tiers = available_for_tiers

    @property
    def category(self):
        """Gets the category of this VoiceResponseModel.


        :return: The category of this VoiceResponseModel.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this VoiceResponseModel.


        :param category: The category of this VoiceResponseModel.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def description(self):
        """Gets the description of this VoiceResponseModel.


        :return: The description of this VoiceResponseModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VoiceResponseModel.


        :param description: The description of this VoiceResponseModel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def fine_tuning(self):
        """Gets the fine_tuning of this VoiceResponseModel.


        :return: The fine_tuning of this VoiceResponseModel.
        :rtype: FineTuningResponseModel
        """
        return self._fine_tuning

    @fine_tuning.setter
    def fine_tuning(self, fine_tuning):
        """Sets the fine_tuning of this VoiceResponseModel.


        :param fine_tuning: The fine_tuning of this VoiceResponseModel.
        :type fine_tuning: FineTuningResponseModel
        """
        if fine_tuning is None:
            raise ValueError("Invalid value for `fine_tuning`, must not be `None`")

        self._fine_tuning = fine_tuning

    @property
    def labels(self):
        """Gets the labels of this VoiceResponseModel.


        :return: The labels of this VoiceResponseModel.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VoiceResponseModel.


        :param labels: The labels of this VoiceResponseModel.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this VoiceResponseModel.


        :return: The name of this VoiceResponseModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceResponseModel.


        :param name: The name of this VoiceResponseModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def preview_url(self):
        """Gets the preview_url of this VoiceResponseModel.


        :return: The preview_url of this VoiceResponseModel.
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this VoiceResponseModel.


        :param preview_url: The preview_url of this VoiceResponseModel.
        :type preview_url: str
        """
        if preview_url is None:
            raise ValueError("Invalid value for `preview_url`, must not be `None`")

        self._preview_url = preview_url

    @property
    def samples(self):
        """Gets the samples of this VoiceResponseModel.


        :return: The samples of this VoiceResponseModel.
        :rtype: List[SampleResponseModel]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this VoiceResponseModel.


        :param samples: The samples of this VoiceResponseModel.
        :type samples: List[SampleResponseModel]
        """
        if samples is None:
            raise ValueError("Invalid value for `samples`, must not be `None`")

        self._samples = samples

    @property
    def settings(self):
        """Gets the settings of this VoiceResponseModel.


        :return: The settings of this VoiceResponseModel.
        :rtype: VoiceSettingsResponseModel
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this VoiceResponseModel.


        :param settings: The settings of this VoiceResponseModel.
        :type settings: VoiceSettingsResponseModel
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def voice_id(self):
        """Gets the voice_id of this VoiceResponseModel.


        :return: The voice_id of this VoiceResponseModel.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this VoiceResponseModel.


        :param voice_id: The voice_id of this VoiceResponseModel.
        :type voice_id: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")

        self._voice_id = voice_id
