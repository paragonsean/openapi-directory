# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VoiceSettingsResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, similarity_boost: float=None, stability: float=None):
        """VoiceSettingsResponseModel - a model defined in OpenAPI

        :param similarity_boost: The similarity_boost of this VoiceSettingsResponseModel.
        :param stability: The stability of this VoiceSettingsResponseModel.
        """
        self.openapi_types = {
            'similarity_boost': float,
            'stability': float
        }

        self.attribute_map = {
            'similarity_boost': 'similarity_boost',
            'stability': 'stability'
        }

        self._similarity_boost = similarity_boost
        self._stability = stability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoiceSettingsResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoiceSettingsResponseModel of this VoiceSettingsResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def similarity_boost(self):
        """Gets the similarity_boost of this VoiceSettingsResponseModel.


        :return: The similarity_boost of this VoiceSettingsResponseModel.
        :rtype: float
        """
        return self._similarity_boost

    @similarity_boost.setter
    def similarity_boost(self, similarity_boost):
        """Sets the similarity_boost of this VoiceSettingsResponseModel.


        :param similarity_boost: The similarity_boost of this VoiceSettingsResponseModel.
        :type similarity_boost: float
        """
        if similarity_boost is None:
            raise ValueError("Invalid value for `similarity_boost`, must not be `None`")

        self._similarity_boost = similarity_boost

    @property
    def stability(self):
        """Gets the stability of this VoiceSettingsResponseModel.


        :return: The stability of this VoiceSettingsResponseModel.
        :rtype: float
        """
        return self._stability

    @stability.setter
    def stability(self, stability):
        """Sets the stability of this VoiceSettingsResponseModel.


        :param stability: The stability of this VoiceSettingsResponseModel.
        :type stability: float
        """
        if stability is None:
            raise ValueError("Invalid value for `stability`, must not be `None`")

        self._stability = stability
