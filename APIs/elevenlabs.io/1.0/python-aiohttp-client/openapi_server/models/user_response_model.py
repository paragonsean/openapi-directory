# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_response_model import SubscriptionResponseModel
from openapi_server import util


class UserResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_new_user: bool=None, subscription: SubscriptionResponseModel=None, xi_api_key: str=None):
        """UserResponseModel - a model defined in OpenAPI

        :param is_new_user: The is_new_user of this UserResponseModel.
        :param subscription: The subscription of this UserResponseModel.
        :param xi_api_key: The xi_api_key of this UserResponseModel.
        """
        self.openapi_types = {
            'is_new_user': bool,
            'subscription': SubscriptionResponseModel,
            'xi_api_key': str
        }

        self.attribute_map = {
            'is_new_user': 'is_new_user',
            'subscription': 'subscription',
            'xi_api_key': 'xi_api_key'
        }

        self._is_new_user = is_new_user
        self._subscription = subscription
        self._xi_api_key = xi_api_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserResponseModel of this UserResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_new_user(self):
        """Gets the is_new_user of this UserResponseModel.


        :return: The is_new_user of this UserResponseModel.
        :rtype: bool
        """
        return self._is_new_user

    @is_new_user.setter
    def is_new_user(self, is_new_user):
        """Sets the is_new_user of this UserResponseModel.


        :param is_new_user: The is_new_user of this UserResponseModel.
        :type is_new_user: bool
        """
        if is_new_user is None:
            raise ValueError("Invalid value for `is_new_user`, must not be `None`")

        self._is_new_user = is_new_user

    @property
    def subscription(self):
        """Gets the subscription of this UserResponseModel.


        :return: The subscription of this UserResponseModel.
        :rtype: SubscriptionResponseModel
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UserResponseModel.


        :param subscription: The subscription of this UserResponseModel.
        :type subscription: SubscriptionResponseModel
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")

        self._subscription = subscription

    @property
    def xi_api_key(self):
        """Gets the xi_api_key of this UserResponseModel.


        :return: The xi_api_key of this UserResponseModel.
        :rtype: str
        """
        return self._xi_api_key

    @xi_api_key.setter
    def xi_api_key(self, xi_api_key):
        """Sets the xi_api_key of this UserResponseModel.


        :param xi_api_key: The xi_api_key of this UserResponseModel.
        :type xi_api_key: str
        """
        if xi_api_key is None:
            raise ValueError("Invalid value for `xi_api_key`, must not be `None`")

        self._xi_api_key = xi_api_key
