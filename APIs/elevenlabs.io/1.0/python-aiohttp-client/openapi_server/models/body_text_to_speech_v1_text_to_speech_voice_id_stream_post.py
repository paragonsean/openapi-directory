# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.voice_settings_response_model import VoiceSettingsResponseModel
from openapi_server import util


class BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, voice_settings: VoiceSettingsResponseModel=None):
        """BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost - a model defined in OpenAPI

        :param text: The text of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        :param voice_settings: The voice_settings of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        """
        self.openapi_types = {
            'text': str,
            'voice_settings': VoiceSettingsResponseModel
        }

        self.attribute_map = {
            'text': 'text',
            'voice_settings': 'voice_settings'
        }

        self._text = text
        self._voice_settings = voice_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Body_Text_to_speech_v1_text_to_speech__voice_id__stream_post of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.

        The text that will get converted into speech. Currently only English text is supported.

        :return: The text of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.

        The text that will get converted into speech. Currently only English text is supported.

        :param text: The text of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def voice_settings(self):
        """Gets the voice_settings of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.

        Voice settings overriding stored setttings for the given voice. They are applied only on the given TTS request.

        :return: The voice_settings of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        :rtype: VoiceSettingsResponseModel
        """
        return self._voice_settings

    @voice_settings.setter
    def voice_settings(self, voice_settings):
        """Sets the voice_settings of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.

        Voice settings overriding stored setttings for the given voice. They are applied only on the given TTS request.

        :param voice_settings: The voice_settings of this BodyTextToSpeechV1TextToSpeechVoiceIdStreamPost.
        :type voice_settings: VoiceSettingsResponseModel
        """

        self._voice_settings = voice_settings
