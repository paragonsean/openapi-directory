# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LanguageResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, iso_code: str=None):
        """LanguageResponseModel - a model defined in OpenAPI

        :param display_name: The display_name of this LanguageResponseModel.
        :param iso_code: The iso_code of this LanguageResponseModel.
        """
        self.openapi_types = {
            'display_name': str,
            'iso_code': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'iso_code': 'iso_code'
        }

        self._display_name = display_name
        self._iso_code = iso_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguageResponseModel of this LanguageResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this LanguageResponseModel.


        :return: The display_name of this LanguageResponseModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LanguageResponseModel.


        :param display_name: The display_name of this LanguageResponseModel.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def iso_code(self):
        """Gets the iso_code of this LanguageResponseModel.


        :return: The iso_code of this LanguageResponseModel.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this LanguageResponseModel.


        :param iso_code: The iso_code of this LanguageResponseModel.
        :type iso_code: str
        """
        if iso_code is None:
            raise ValueError("Invalid value for `iso_code`, must not be `None`")

        self._iso_code = iso_code
