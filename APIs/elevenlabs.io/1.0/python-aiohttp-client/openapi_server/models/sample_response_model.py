# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SampleResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, hash: str=None, mime_type: str=None, sample_id: str=None, size_bytes: int=None):
        """SampleResponseModel - a model defined in OpenAPI

        :param file_name: The file_name of this SampleResponseModel.
        :param hash: The hash of this SampleResponseModel.
        :param mime_type: The mime_type of this SampleResponseModel.
        :param sample_id: The sample_id of this SampleResponseModel.
        :param size_bytes: The size_bytes of this SampleResponseModel.
        """
        self.openapi_types = {
            'file_name': str,
            'hash': str,
            'mime_type': str,
            'sample_id': str,
            'size_bytes': int
        }

        self.attribute_map = {
            'file_name': 'file_name',
            'hash': 'hash',
            'mime_type': 'mime_type',
            'sample_id': 'sample_id',
            'size_bytes': 'size_bytes'
        }

        self._file_name = file_name
        self._hash = hash
        self._mime_type = mime_type
        self._sample_id = sample_id
        self._size_bytes = size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SampleResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SampleResponseModel of this SampleResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self):
        """Gets the file_name of this SampleResponseModel.


        :return: The file_name of this SampleResponseModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SampleResponseModel.


        :param file_name: The file_name of this SampleResponseModel.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def hash(self):
        """Gets the hash of this SampleResponseModel.


        :return: The hash of this SampleResponseModel.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SampleResponseModel.


        :param hash: The hash of this SampleResponseModel.
        :type hash: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def mime_type(self):
        """Gets the mime_type of this SampleResponseModel.


        :return: The mime_type of this SampleResponseModel.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this SampleResponseModel.


        :param mime_type: The mime_type of this SampleResponseModel.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")

        self._mime_type = mime_type

    @property
    def sample_id(self):
        """Gets the sample_id of this SampleResponseModel.


        :return: The sample_id of this SampleResponseModel.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this SampleResponseModel.


        :param sample_id: The sample_id of this SampleResponseModel.
        :type sample_id: str
        """
        if sample_id is None:
            raise ValueError("Invalid value for `sample_id`, must not be `None`")

        self._sample_id = sample_id

    @property
    def size_bytes(self):
        """Gets the size_bytes of this SampleResponseModel.


        :return: The size_bytes of this SampleResponseModel.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this SampleResponseModel.


        :param size_bytes: The size_bytes of this SampleResponseModel.
        :type size_bytes: int
        """
        if size_bytes is None:
            raise ValueError("Invalid value for `size_bytes`, must not be `None`")

        self._size_bytes = size_bytes
