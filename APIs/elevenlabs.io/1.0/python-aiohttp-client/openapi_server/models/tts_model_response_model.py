# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_response_model import LanguageResponseModel
from openapi_server import util


class TTSModelResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, model_id: str=None, supported_language: List[LanguageResponseModel]=None):
        """TTSModelResponseModel - a model defined in OpenAPI

        :param display_name: The display_name of this TTSModelResponseModel.
        :param model_id: The model_id of this TTSModelResponseModel.
        :param supported_language: The supported_language of this TTSModelResponseModel.
        """
        self.openapi_types = {
            'display_name': str,
            'model_id': str,
            'supported_language': List[LanguageResponseModel]
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'model_id': 'model_id',
            'supported_language': 'supported_language'
        }

        self._display_name = display_name
        self._model_id = model_id
        self._supported_language = supported_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TTSModelResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TTSModelResponseModel of this TTSModelResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this TTSModelResponseModel.


        :return: The display_name of this TTSModelResponseModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TTSModelResponseModel.


        :param display_name: The display_name of this TTSModelResponseModel.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def model_id(self):
        """Gets the model_id of this TTSModelResponseModel.


        :return: The model_id of this TTSModelResponseModel.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this TTSModelResponseModel.


        :param model_id: The model_id of this TTSModelResponseModel.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def supported_language(self):
        """Gets the supported_language of this TTSModelResponseModel.


        :return: The supported_language of this TTSModelResponseModel.
        :rtype: List[LanguageResponseModel]
        """
        return self._supported_language

    @supported_language.setter
    def supported_language(self, supported_language):
        """Sets the supported_language of this TTSModelResponseModel.


        :param supported_language: The supported_language of this TTSModelResponseModel.
        :type supported_language: List[LanguageResponseModel]
        """
        if supported_language is None:
            raise ValueError("Invalid value for `supported_language`, must not be `None`")

        self._supported_language = supported_language
