# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeedbackResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_quality: bool=None, emotions: bool=None, feedback: str=None, glitches: bool=None, inaccurate_clone: bool=None, other: bool=None, review_status: str='not_reviewed', thumbs_up: bool=None):
        """FeedbackResponseModel - a model defined in OpenAPI

        :param audio_quality: The audio_quality of this FeedbackResponseModel.
        :param emotions: The emotions of this FeedbackResponseModel.
        :param feedback: The feedback of this FeedbackResponseModel.
        :param glitches: The glitches of this FeedbackResponseModel.
        :param inaccurate_clone: The inaccurate_clone of this FeedbackResponseModel.
        :param other: The other of this FeedbackResponseModel.
        :param review_status: The review_status of this FeedbackResponseModel.
        :param thumbs_up: The thumbs_up of this FeedbackResponseModel.
        """
        self.openapi_types = {
            'audio_quality': bool,
            'emotions': bool,
            'feedback': str,
            'glitches': bool,
            'inaccurate_clone': bool,
            'other': bool,
            'review_status': str,
            'thumbs_up': bool
        }

        self.attribute_map = {
            'audio_quality': 'audio_quality',
            'emotions': 'emotions',
            'feedback': 'feedback',
            'glitches': 'glitches',
            'inaccurate_clone': 'inaccurate_clone',
            'other': 'other',
            'review_status': 'review_status',
            'thumbs_up': 'thumbs_up'
        }

        self._audio_quality = audio_quality
        self._emotions = emotions
        self._feedback = feedback
        self._glitches = glitches
        self._inaccurate_clone = inaccurate_clone
        self._other = other
        self._review_status = review_status
        self._thumbs_up = thumbs_up

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedbackResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedbackResponseModel of this FeedbackResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_quality(self):
        """Gets the audio_quality of this FeedbackResponseModel.


        :return: The audio_quality of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._audio_quality

    @audio_quality.setter
    def audio_quality(self, audio_quality):
        """Sets the audio_quality of this FeedbackResponseModel.


        :param audio_quality: The audio_quality of this FeedbackResponseModel.
        :type audio_quality: bool
        """
        if audio_quality is None:
            raise ValueError("Invalid value for `audio_quality`, must not be `None`")

        self._audio_quality = audio_quality

    @property
    def emotions(self):
        """Gets the emotions of this FeedbackResponseModel.


        :return: The emotions of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this FeedbackResponseModel.


        :param emotions: The emotions of this FeedbackResponseModel.
        :type emotions: bool
        """
        if emotions is None:
            raise ValueError("Invalid value for `emotions`, must not be `None`")

        self._emotions = emotions

    @property
    def feedback(self):
        """Gets the feedback of this FeedbackResponseModel.


        :return: The feedback of this FeedbackResponseModel.
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this FeedbackResponseModel.


        :param feedback: The feedback of this FeedbackResponseModel.
        :type feedback: str
        """
        if feedback is None:
            raise ValueError("Invalid value for `feedback`, must not be `None`")

        self._feedback = feedback

    @property
    def glitches(self):
        """Gets the glitches of this FeedbackResponseModel.


        :return: The glitches of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._glitches

    @glitches.setter
    def glitches(self, glitches):
        """Sets the glitches of this FeedbackResponseModel.


        :param glitches: The glitches of this FeedbackResponseModel.
        :type glitches: bool
        """
        if glitches is None:
            raise ValueError("Invalid value for `glitches`, must not be `None`")

        self._glitches = glitches

    @property
    def inaccurate_clone(self):
        """Gets the inaccurate_clone of this FeedbackResponseModel.


        :return: The inaccurate_clone of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._inaccurate_clone

    @inaccurate_clone.setter
    def inaccurate_clone(self, inaccurate_clone):
        """Sets the inaccurate_clone of this FeedbackResponseModel.


        :param inaccurate_clone: The inaccurate_clone of this FeedbackResponseModel.
        :type inaccurate_clone: bool
        """
        if inaccurate_clone is None:
            raise ValueError("Invalid value for `inaccurate_clone`, must not be `None`")

        self._inaccurate_clone = inaccurate_clone

    @property
    def other(self):
        """Gets the other of this FeedbackResponseModel.


        :return: The other of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this FeedbackResponseModel.


        :param other: The other of this FeedbackResponseModel.
        :type other: bool
        """
        if other is None:
            raise ValueError("Invalid value for `other`, must not be `None`")

        self._other = other

    @property
    def review_status(self):
        """Gets the review_status of this FeedbackResponseModel.


        :return: The review_status of this FeedbackResponseModel.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this FeedbackResponseModel.


        :param review_status: The review_status of this FeedbackResponseModel.
        :type review_status: str
        """

        self._review_status = review_status

    @property
    def thumbs_up(self):
        """Gets the thumbs_up of this FeedbackResponseModel.


        :return: The thumbs_up of this FeedbackResponseModel.
        :rtype: bool
        """
        return self._thumbs_up

    @thumbs_up.setter
    def thumbs_up(self, thumbs_up):
        """Sets the thumbs_up of this FeedbackResponseModel.


        :param thumbs_up: The thumbs_up of this FeedbackResponseModel.
        :type thumbs_up: bool
        """
        if thumbs_up is None:
            raise ValueError("Invalid value for `thumbs_up`, must not be `None`")

        self._thumbs_up = thumbs_up
