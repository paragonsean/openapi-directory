# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_due_cents: int=None, next_payment_attempt_unix: int=None):
        """InvoiceResponseModel - a model defined in OpenAPI

        :param amount_due_cents: The amount_due_cents of this InvoiceResponseModel.
        :param next_payment_attempt_unix: The next_payment_attempt_unix of this InvoiceResponseModel.
        """
        self.openapi_types = {
            'amount_due_cents': int,
            'next_payment_attempt_unix': int
        }

        self.attribute_map = {
            'amount_due_cents': 'amount_due_cents',
            'next_payment_attempt_unix': 'next_payment_attempt_unix'
        }

        self._amount_due_cents = amount_due_cents
        self._next_payment_attempt_unix = next_payment_attempt_unix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceResponseModel of this InvoiceResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_due_cents(self):
        """Gets the amount_due_cents of this InvoiceResponseModel.


        :return: The amount_due_cents of this InvoiceResponseModel.
        :rtype: int
        """
        return self._amount_due_cents

    @amount_due_cents.setter
    def amount_due_cents(self, amount_due_cents):
        """Sets the amount_due_cents of this InvoiceResponseModel.


        :param amount_due_cents: The amount_due_cents of this InvoiceResponseModel.
        :type amount_due_cents: int
        """
        if amount_due_cents is None:
            raise ValueError("Invalid value for `amount_due_cents`, must not be `None`")

        self._amount_due_cents = amount_due_cents

    @property
    def next_payment_attempt_unix(self):
        """Gets the next_payment_attempt_unix of this InvoiceResponseModel.


        :return: The next_payment_attempt_unix of this InvoiceResponseModel.
        :rtype: int
        """
        return self._next_payment_attempt_unix

    @next_payment_attempt_unix.setter
    def next_payment_attempt_unix(self, next_payment_attempt_unix):
        """Sets the next_payment_attempt_unix of this InvoiceResponseModel.


        :param next_payment_attempt_unix: The next_payment_attempt_unix of this InvoiceResponseModel.
        :type next_payment_attempt_unix: int
        """
        if next_payment_attempt_unix is None:
            raise ValueError("Invalid value for `next_payment_attempt_unix`, must not be `None`")

        self._next_payment_attempt_unix = next_payment_attempt_unix
