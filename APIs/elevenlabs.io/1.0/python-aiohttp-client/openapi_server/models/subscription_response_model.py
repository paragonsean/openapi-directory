# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tts_model_response_model import TTSModelResponseModel
from openapi_server import util


class SubscriptionResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_to_extend_character_limit: bool=None, available_models: List[TTSModelResponseModel]=None, can_extend_character_limit: bool=None, can_extend_voice_limit: bool=None, can_use_delayed_payment_methods: bool=None, can_use_instant_voice_cloning: bool=None, can_use_professional_voice_cloning: bool=None, character_count: int=None, character_limit: int=None, currency: str=None, next_character_count_reset_unix: int=None, professional_voice_limit: int=None, status: str=None, tier: str=None, voice_limit: int=None):
        """SubscriptionResponseModel - a model defined in OpenAPI

        :param allowed_to_extend_character_limit: The allowed_to_extend_character_limit of this SubscriptionResponseModel.
        :param available_models: The available_models of this SubscriptionResponseModel.
        :param can_extend_character_limit: The can_extend_character_limit of this SubscriptionResponseModel.
        :param can_extend_voice_limit: The can_extend_voice_limit of this SubscriptionResponseModel.
        :param can_use_delayed_payment_methods: The can_use_delayed_payment_methods of this SubscriptionResponseModel.
        :param can_use_instant_voice_cloning: The can_use_instant_voice_cloning of this SubscriptionResponseModel.
        :param can_use_professional_voice_cloning: The can_use_professional_voice_cloning of this SubscriptionResponseModel.
        :param character_count: The character_count of this SubscriptionResponseModel.
        :param character_limit: The character_limit of this SubscriptionResponseModel.
        :param currency: The currency of this SubscriptionResponseModel.
        :param next_character_count_reset_unix: The next_character_count_reset_unix of this SubscriptionResponseModel.
        :param professional_voice_limit: The professional_voice_limit of this SubscriptionResponseModel.
        :param status: The status of this SubscriptionResponseModel.
        :param tier: The tier of this SubscriptionResponseModel.
        :param voice_limit: The voice_limit of this SubscriptionResponseModel.
        """
        self.openapi_types = {
            'allowed_to_extend_character_limit': bool,
            'available_models': List[TTSModelResponseModel],
            'can_extend_character_limit': bool,
            'can_extend_voice_limit': bool,
            'can_use_delayed_payment_methods': bool,
            'can_use_instant_voice_cloning': bool,
            'can_use_professional_voice_cloning': bool,
            'character_count': int,
            'character_limit': int,
            'currency': str,
            'next_character_count_reset_unix': int,
            'professional_voice_limit': int,
            'status': str,
            'tier': str,
            'voice_limit': int
        }

        self.attribute_map = {
            'allowed_to_extend_character_limit': 'allowed_to_extend_character_limit',
            'available_models': 'available_models',
            'can_extend_character_limit': 'can_extend_character_limit',
            'can_extend_voice_limit': 'can_extend_voice_limit',
            'can_use_delayed_payment_methods': 'can_use_delayed_payment_methods',
            'can_use_instant_voice_cloning': 'can_use_instant_voice_cloning',
            'can_use_professional_voice_cloning': 'can_use_professional_voice_cloning',
            'character_count': 'character_count',
            'character_limit': 'character_limit',
            'currency': 'currency',
            'next_character_count_reset_unix': 'next_character_count_reset_unix',
            'professional_voice_limit': 'professional_voice_limit',
            'status': 'status',
            'tier': 'tier',
            'voice_limit': 'voice_limit'
        }

        self._allowed_to_extend_character_limit = allowed_to_extend_character_limit
        self._available_models = available_models
        self._can_extend_character_limit = can_extend_character_limit
        self._can_extend_voice_limit = can_extend_voice_limit
        self._can_use_delayed_payment_methods = can_use_delayed_payment_methods
        self._can_use_instant_voice_cloning = can_use_instant_voice_cloning
        self._can_use_professional_voice_cloning = can_use_professional_voice_cloning
        self._character_count = character_count
        self._character_limit = character_limit
        self._currency = currency
        self._next_character_count_reset_unix = next_character_count_reset_unix
        self._professional_voice_limit = professional_voice_limit
        self._status = status
        self._tier = tier
        self._voice_limit = voice_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionResponseModel of this SubscriptionResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_to_extend_character_limit(self):
        """Gets the allowed_to_extend_character_limit of this SubscriptionResponseModel.


        :return: The allowed_to_extend_character_limit of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._allowed_to_extend_character_limit

    @allowed_to_extend_character_limit.setter
    def allowed_to_extend_character_limit(self, allowed_to_extend_character_limit):
        """Sets the allowed_to_extend_character_limit of this SubscriptionResponseModel.


        :param allowed_to_extend_character_limit: The allowed_to_extend_character_limit of this SubscriptionResponseModel.
        :type allowed_to_extend_character_limit: bool
        """
        if allowed_to_extend_character_limit is None:
            raise ValueError("Invalid value for `allowed_to_extend_character_limit`, must not be `None`")

        self._allowed_to_extend_character_limit = allowed_to_extend_character_limit

    @property
    def available_models(self):
        """Gets the available_models of this SubscriptionResponseModel.


        :return: The available_models of this SubscriptionResponseModel.
        :rtype: List[TTSModelResponseModel]
        """
        return self._available_models

    @available_models.setter
    def available_models(self, available_models):
        """Sets the available_models of this SubscriptionResponseModel.


        :param available_models: The available_models of this SubscriptionResponseModel.
        :type available_models: List[TTSModelResponseModel]
        """
        if available_models is None:
            raise ValueError("Invalid value for `available_models`, must not be `None`")

        self._available_models = available_models

    @property
    def can_extend_character_limit(self):
        """Gets the can_extend_character_limit of this SubscriptionResponseModel.


        :return: The can_extend_character_limit of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._can_extend_character_limit

    @can_extend_character_limit.setter
    def can_extend_character_limit(self, can_extend_character_limit):
        """Sets the can_extend_character_limit of this SubscriptionResponseModel.


        :param can_extend_character_limit: The can_extend_character_limit of this SubscriptionResponseModel.
        :type can_extend_character_limit: bool
        """
        if can_extend_character_limit is None:
            raise ValueError("Invalid value for `can_extend_character_limit`, must not be `None`")

        self._can_extend_character_limit = can_extend_character_limit

    @property
    def can_extend_voice_limit(self):
        """Gets the can_extend_voice_limit of this SubscriptionResponseModel.


        :return: The can_extend_voice_limit of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._can_extend_voice_limit

    @can_extend_voice_limit.setter
    def can_extend_voice_limit(self, can_extend_voice_limit):
        """Sets the can_extend_voice_limit of this SubscriptionResponseModel.


        :param can_extend_voice_limit: The can_extend_voice_limit of this SubscriptionResponseModel.
        :type can_extend_voice_limit: bool
        """
        if can_extend_voice_limit is None:
            raise ValueError("Invalid value for `can_extend_voice_limit`, must not be `None`")

        self._can_extend_voice_limit = can_extend_voice_limit

    @property
    def can_use_delayed_payment_methods(self):
        """Gets the can_use_delayed_payment_methods of this SubscriptionResponseModel.


        :return: The can_use_delayed_payment_methods of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._can_use_delayed_payment_methods

    @can_use_delayed_payment_methods.setter
    def can_use_delayed_payment_methods(self, can_use_delayed_payment_methods):
        """Sets the can_use_delayed_payment_methods of this SubscriptionResponseModel.


        :param can_use_delayed_payment_methods: The can_use_delayed_payment_methods of this SubscriptionResponseModel.
        :type can_use_delayed_payment_methods: bool
        """
        if can_use_delayed_payment_methods is None:
            raise ValueError("Invalid value for `can_use_delayed_payment_methods`, must not be `None`")

        self._can_use_delayed_payment_methods = can_use_delayed_payment_methods

    @property
    def can_use_instant_voice_cloning(self):
        """Gets the can_use_instant_voice_cloning of this SubscriptionResponseModel.


        :return: The can_use_instant_voice_cloning of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._can_use_instant_voice_cloning

    @can_use_instant_voice_cloning.setter
    def can_use_instant_voice_cloning(self, can_use_instant_voice_cloning):
        """Sets the can_use_instant_voice_cloning of this SubscriptionResponseModel.


        :param can_use_instant_voice_cloning: The can_use_instant_voice_cloning of this SubscriptionResponseModel.
        :type can_use_instant_voice_cloning: bool
        """
        if can_use_instant_voice_cloning is None:
            raise ValueError("Invalid value for `can_use_instant_voice_cloning`, must not be `None`")

        self._can_use_instant_voice_cloning = can_use_instant_voice_cloning

    @property
    def can_use_professional_voice_cloning(self):
        """Gets the can_use_professional_voice_cloning of this SubscriptionResponseModel.


        :return: The can_use_professional_voice_cloning of this SubscriptionResponseModel.
        :rtype: bool
        """
        return self._can_use_professional_voice_cloning

    @can_use_professional_voice_cloning.setter
    def can_use_professional_voice_cloning(self, can_use_professional_voice_cloning):
        """Sets the can_use_professional_voice_cloning of this SubscriptionResponseModel.


        :param can_use_professional_voice_cloning: The can_use_professional_voice_cloning of this SubscriptionResponseModel.
        :type can_use_professional_voice_cloning: bool
        """
        if can_use_professional_voice_cloning is None:
            raise ValueError("Invalid value for `can_use_professional_voice_cloning`, must not be `None`")

        self._can_use_professional_voice_cloning = can_use_professional_voice_cloning

    @property
    def character_count(self):
        """Gets the character_count of this SubscriptionResponseModel.


        :return: The character_count of this SubscriptionResponseModel.
        :rtype: int
        """
        return self._character_count

    @character_count.setter
    def character_count(self, character_count):
        """Sets the character_count of this SubscriptionResponseModel.


        :param character_count: The character_count of this SubscriptionResponseModel.
        :type character_count: int
        """
        if character_count is None:
            raise ValueError("Invalid value for `character_count`, must not be `None`")

        self._character_count = character_count

    @property
    def character_limit(self):
        """Gets the character_limit of this SubscriptionResponseModel.


        :return: The character_limit of this SubscriptionResponseModel.
        :rtype: int
        """
        return self._character_limit

    @character_limit.setter
    def character_limit(self, character_limit):
        """Sets the character_limit of this SubscriptionResponseModel.


        :param character_limit: The character_limit of this SubscriptionResponseModel.
        :type character_limit: int
        """
        if character_limit is None:
            raise ValueError("Invalid value for `character_limit`, must not be `None`")

        self._character_limit = character_limit

    @property
    def currency(self):
        """Gets the currency of this SubscriptionResponseModel.


        :return: The currency of this SubscriptionResponseModel.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SubscriptionResponseModel.


        :param currency: The currency of this SubscriptionResponseModel.
        :type currency: str
        """
        allowed_values = ["usd", "eur"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def next_character_count_reset_unix(self):
        """Gets the next_character_count_reset_unix of this SubscriptionResponseModel.


        :return: The next_character_count_reset_unix of this SubscriptionResponseModel.
        :rtype: int
        """
        return self._next_character_count_reset_unix

    @next_character_count_reset_unix.setter
    def next_character_count_reset_unix(self, next_character_count_reset_unix):
        """Sets the next_character_count_reset_unix of this SubscriptionResponseModel.


        :param next_character_count_reset_unix: The next_character_count_reset_unix of this SubscriptionResponseModel.
        :type next_character_count_reset_unix: int
        """
        if next_character_count_reset_unix is None:
            raise ValueError("Invalid value for `next_character_count_reset_unix`, must not be `None`")

        self._next_character_count_reset_unix = next_character_count_reset_unix

    @property
    def professional_voice_limit(self):
        """Gets the professional_voice_limit of this SubscriptionResponseModel.


        :return: The professional_voice_limit of this SubscriptionResponseModel.
        :rtype: int
        """
        return self._professional_voice_limit

    @professional_voice_limit.setter
    def professional_voice_limit(self, professional_voice_limit):
        """Sets the professional_voice_limit of this SubscriptionResponseModel.


        :param professional_voice_limit: The professional_voice_limit of this SubscriptionResponseModel.
        :type professional_voice_limit: int
        """
        if professional_voice_limit is None:
            raise ValueError("Invalid value for `professional_voice_limit`, must not be `None`")

        self._professional_voice_limit = professional_voice_limit

    @property
    def status(self):
        """Gets the status of this SubscriptionResponseModel.


        :return: The status of this SubscriptionResponseModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionResponseModel.


        :param status: The status of this SubscriptionResponseModel.
        :type status: str
        """
        allowed_values = ["trialing", "active", "incomplete", "incomplete_expired", "past_due", "canceled", "unpaid", "free"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tier(self):
        """Gets the tier of this SubscriptionResponseModel.


        :return: The tier of this SubscriptionResponseModel.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SubscriptionResponseModel.


        :param tier: The tier of this SubscriptionResponseModel.
        :type tier: str
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")

        self._tier = tier

    @property
    def voice_limit(self):
        """Gets the voice_limit of this SubscriptionResponseModel.


        :return: The voice_limit of this SubscriptionResponseModel.
        :rtype: int
        """
        return self._voice_limit

    @voice_limit.setter
    def voice_limit(self, voice_limit):
        """Sets the voice_limit of this SubscriptionResponseModel.


        :param voice_limit: The voice_limit of this SubscriptionResponseModel.
        :type voice_limit: int
        """
        if voice_limit is None:
            raise ValueError("Invalid value for `voice_limit`, must not be `None`")

        self._voice_limit = voice_limit
