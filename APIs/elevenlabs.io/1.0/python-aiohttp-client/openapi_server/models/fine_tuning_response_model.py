# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verification_attempt_response_model import VerificationAttemptResponseModel
from openapi_server import util


class FineTuningResponseModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fine_tuning_requested: bool=None, finetuning_state: str=None, is_allowed_to_fine_tune: bool=None, model_id: str=None, slice_ids: List[str]=None, verification_attempts: List[VerificationAttemptResponseModel]=None, verification_attempts_count: int=None, verification_failures: List[str]=None):
        """FineTuningResponseModel - a model defined in OpenAPI

        :param fine_tuning_requested: The fine_tuning_requested of this FineTuningResponseModel.
        :param finetuning_state: The finetuning_state of this FineTuningResponseModel.
        :param is_allowed_to_fine_tune: The is_allowed_to_fine_tune of this FineTuningResponseModel.
        :param model_id: The model_id of this FineTuningResponseModel.
        :param slice_ids: The slice_ids of this FineTuningResponseModel.
        :param verification_attempts: The verification_attempts of this FineTuningResponseModel.
        :param verification_attempts_count: The verification_attempts_count of this FineTuningResponseModel.
        :param verification_failures: The verification_failures of this FineTuningResponseModel.
        """
        self.openapi_types = {
            'fine_tuning_requested': bool,
            'finetuning_state': str,
            'is_allowed_to_fine_tune': bool,
            'model_id': str,
            'slice_ids': List[str],
            'verification_attempts': List[VerificationAttemptResponseModel],
            'verification_attempts_count': int,
            'verification_failures': List[str]
        }

        self.attribute_map = {
            'fine_tuning_requested': 'fine_tuning_requested',
            'finetuning_state': 'finetuning_state',
            'is_allowed_to_fine_tune': 'is_allowed_to_fine_tune',
            'model_id': 'model_id',
            'slice_ids': 'slice_ids',
            'verification_attempts': 'verification_attempts',
            'verification_attempts_count': 'verification_attempts_count',
            'verification_failures': 'verification_failures'
        }

        self._fine_tuning_requested = fine_tuning_requested
        self._finetuning_state = finetuning_state
        self._is_allowed_to_fine_tune = is_allowed_to_fine_tune
        self._model_id = model_id
        self._slice_ids = slice_ids
        self._verification_attempts = verification_attempts
        self._verification_attempts_count = verification_attempts_count
        self._verification_failures = verification_failures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FineTuningResponseModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FineTuningResponseModel of this FineTuningResponseModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fine_tuning_requested(self):
        """Gets the fine_tuning_requested of this FineTuningResponseModel.


        :return: The fine_tuning_requested of this FineTuningResponseModel.
        :rtype: bool
        """
        return self._fine_tuning_requested

    @fine_tuning_requested.setter
    def fine_tuning_requested(self, fine_tuning_requested):
        """Sets the fine_tuning_requested of this FineTuningResponseModel.


        :param fine_tuning_requested: The fine_tuning_requested of this FineTuningResponseModel.
        :type fine_tuning_requested: bool
        """
        if fine_tuning_requested is None:
            raise ValueError("Invalid value for `fine_tuning_requested`, must not be `None`")

        self._fine_tuning_requested = fine_tuning_requested

    @property
    def finetuning_state(self):
        """Gets the finetuning_state of this FineTuningResponseModel.


        :return: The finetuning_state of this FineTuningResponseModel.
        :rtype: str
        """
        return self._finetuning_state

    @finetuning_state.setter
    def finetuning_state(self, finetuning_state):
        """Sets the finetuning_state of this FineTuningResponseModel.


        :param finetuning_state: The finetuning_state of this FineTuningResponseModel.
        :type finetuning_state: str
        """
        allowed_values = ["not_started", "is_fine_tuning", "fine_tuned"]  # noqa: E501
        if finetuning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `finetuning_state` ({0}), must be one of {1}"
                .format(finetuning_state, allowed_values)
            )

        self._finetuning_state = finetuning_state

    @property
    def is_allowed_to_fine_tune(self):
        """Gets the is_allowed_to_fine_tune of this FineTuningResponseModel.


        :return: The is_allowed_to_fine_tune of this FineTuningResponseModel.
        :rtype: bool
        """
        return self._is_allowed_to_fine_tune

    @is_allowed_to_fine_tune.setter
    def is_allowed_to_fine_tune(self, is_allowed_to_fine_tune):
        """Sets the is_allowed_to_fine_tune of this FineTuningResponseModel.


        :param is_allowed_to_fine_tune: The is_allowed_to_fine_tune of this FineTuningResponseModel.
        :type is_allowed_to_fine_tune: bool
        """
        if is_allowed_to_fine_tune is None:
            raise ValueError("Invalid value for `is_allowed_to_fine_tune`, must not be `None`")

        self._is_allowed_to_fine_tune = is_allowed_to_fine_tune

    @property
    def model_id(self):
        """Gets the model_id of this FineTuningResponseModel.


        :return: The model_id of this FineTuningResponseModel.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this FineTuningResponseModel.


        :param model_id: The model_id of this FineTuningResponseModel.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def slice_ids(self):
        """Gets the slice_ids of this FineTuningResponseModel.


        :return: The slice_ids of this FineTuningResponseModel.
        :rtype: List[str]
        """
        return self._slice_ids

    @slice_ids.setter
    def slice_ids(self, slice_ids):
        """Sets the slice_ids of this FineTuningResponseModel.


        :param slice_ids: The slice_ids of this FineTuningResponseModel.
        :type slice_ids: List[str]
        """
        if slice_ids is None:
            raise ValueError("Invalid value for `slice_ids`, must not be `None`")

        self._slice_ids = slice_ids

    @property
    def verification_attempts(self):
        """Gets the verification_attempts of this FineTuningResponseModel.


        :return: The verification_attempts of this FineTuningResponseModel.
        :rtype: List[VerificationAttemptResponseModel]
        """
        return self._verification_attempts

    @verification_attempts.setter
    def verification_attempts(self, verification_attempts):
        """Sets the verification_attempts of this FineTuningResponseModel.


        :param verification_attempts: The verification_attempts of this FineTuningResponseModel.
        :type verification_attempts: List[VerificationAttemptResponseModel]
        """
        if verification_attempts is None:
            raise ValueError("Invalid value for `verification_attempts`, must not be `None`")

        self._verification_attempts = verification_attempts

    @property
    def verification_attempts_count(self):
        """Gets the verification_attempts_count of this FineTuningResponseModel.


        :return: The verification_attempts_count of this FineTuningResponseModel.
        :rtype: int
        """
        return self._verification_attempts_count

    @verification_attempts_count.setter
    def verification_attempts_count(self, verification_attempts_count):
        """Sets the verification_attempts_count of this FineTuningResponseModel.


        :param verification_attempts_count: The verification_attempts_count of this FineTuningResponseModel.
        :type verification_attempts_count: int
        """
        if verification_attempts_count is None:
            raise ValueError("Invalid value for `verification_attempts_count`, must not be `None`")

        self._verification_attempts_count = verification_attempts_count

    @property
    def verification_failures(self):
        """Gets the verification_failures of this FineTuningResponseModel.


        :return: The verification_failures of this FineTuningResponseModel.
        :rtype: List[str]
        """
        return self._verification_failures

    @verification_failures.setter
    def verification_failures(self, verification_failures):
        """Sets the verification_failures of this FineTuningResponseModel.


        :param verification_failures: The verification_failures of this FineTuningResponseModel.
        :type verification_failures: List[str]
        """
        if verification_failures is None:
            raise ValueError("Invalid value for `verification_failures`, must not be `None`")

        self._verification_failures = verification_failures
