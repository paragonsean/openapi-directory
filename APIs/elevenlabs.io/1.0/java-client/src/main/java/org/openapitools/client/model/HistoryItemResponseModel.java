/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FeedbackResponseModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryItemResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:47.855117-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryItemResponseModel {
  public static final String SERIALIZED_NAME_CHARACTER_COUNT_CHANGE_FROM = "character_count_change_from";
  @SerializedName(SERIALIZED_NAME_CHARACTER_COUNT_CHANGE_FROM)
  private Integer characterCountChangeFrom;

  public static final String SERIALIZED_NAME_CHARACTER_COUNT_CHANGE_TO = "character_count_change_to";
  @SerializedName(SERIALIZED_NAME_CHARACTER_COUNT_CHANGE_TO)
  private Integer characterCountChangeTo;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DATE_UNIX = "date_unix";
  @SerializedName(SERIALIZED_NAME_DATE_UNIX)
  private Integer dateUnix;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private FeedbackResponseModel feedback;

  public static final String SERIALIZED_NAME_HISTORY_ITEM_ID = "history_item_id";
  @SerializedName(SERIALIZED_NAME_HISTORY_ITEM_ID)
  private String historyItemId;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATED("created"),
    
    DELETED("deleted"),
    
    PROCESSING("processing");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VOICE_ID = "voice_id";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private String voiceId;

  public static final String SERIALIZED_NAME_VOICE_NAME = "voice_name";
  @SerializedName(SERIALIZED_NAME_VOICE_NAME)
  private String voiceName;

  public HistoryItemResponseModel() {
  }

  public HistoryItemResponseModel characterCountChangeFrom(Integer characterCountChangeFrom) {
    this.characterCountChangeFrom = characterCountChangeFrom;
    return this;
  }

  /**
   * Get characterCountChangeFrom
   * @return characterCountChangeFrom
   */
  @javax.annotation.Nonnull
  public Integer getCharacterCountChangeFrom() {
    return characterCountChangeFrom;
  }

  public void setCharacterCountChangeFrom(Integer characterCountChangeFrom) {
    this.characterCountChangeFrom = characterCountChangeFrom;
  }


  public HistoryItemResponseModel characterCountChangeTo(Integer characterCountChangeTo) {
    this.characterCountChangeTo = characterCountChangeTo;
    return this;
  }

  /**
   * Get characterCountChangeTo
   * @return characterCountChangeTo
   */
  @javax.annotation.Nonnull
  public Integer getCharacterCountChangeTo() {
    return characterCountChangeTo;
  }

  public void setCharacterCountChangeTo(Integer characterCountChangeTo) {
    this.characterCountChangeTo = characterCountChangeTo;
  }


  public HistoryItemResponseModel contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public HistoryItemResponseModel dateUnix(Integer dateUnix) {
    this.dateUnix = dateUnix;
    return this;
  }

  /**
   * Get dateUnix
   * @return dateUnix
   */
  @javax.annotation.Nonnull
  public Integer getDateUnix() {
    return dateUnix;
  }

  public void setDateUnix(Integer dateUnix) {
    this.dateUnix = dateUnix;
  }


  public HistoryItemResponseModel feedback(FeedbackResponseModel feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * Get feedback
   * @return feedback
   */
  @javax.annotation.Nonnull
  public FeedbackResponseModel getFeedback() {
    return feedback;
  }

  public void setFeedback(FeedbackResponseModel feedback) {
    this.feedback = feedback;
  }


  public HistoryItemResponseModel historyItemId(String historyItemId) {
    this.historyItemId = historyItemId;
    return this;
  }

  /**
   * Get historyItemId
   * @return historyItemId
   */
  @javax.annotation.Nonnull
  public String getHistoryItemId() {
    return historyItemId;
  }

  public void setHistoryItemId(String historyItemId) {
    this.historyItemId = historyItemId;
  }


  public HistoryItemResponseModel requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public HistoryItemResponseModel settings(Object settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nonnull
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }


  public HistoryItemResponseModel state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public HistoryItemResponseModel text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public HistoryItemResponseModel voiceId(String voiceId) {
    this.voiceId = voiceId;
    return this;
  }

  /**
   * Get voiceId
   * @return voiceId
   */
  @javax.annotation.Nonnull
  public String getVoiceId() {
    return voiceId;
  }

  public void setVoiceId(String voiceId) {
    this.voiceId = voiceId;
  }


  public HistoryItemResponseModel voiceName(String voiceName) {
    this.voiceName = voiceName;
    return this;
  }

  /**
   * Get voiceName
   * @return voiceName
   */
  @javax.annotation.Nonnull
  public String getVoiceName() {
    return voiceName;
  }

  public void setVoiceName(String voiceName) {
    this.voiceName = voiceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryItemResponseModel historyItemResponseModel = (HistoryItemResponseModel) o;
    return Objects.equals(this.characterCountChangeFrom, historyItemResponseModel.characterCountChangeFrom) &&
        Objects.equals(this.characterCountChangeTo, historyItemResponseModel.characterCountChangeTo) &&
        Objects.equals(this.contentType, historyItemResponseModel.contentType) &&
        Objects.equals(this.dateUnix, historyItemResponseModel.dateUnix) &&
        Objects.equals(this.feedback, historyItemResponseModel.feedback) &&
        Objects.equals(this.historyItemId, historyItemResponseModel.historyItemId) &&
        Objects.equals(this.requestId, historyItemResponseModel.requestId) &&
        Objects.equals(this.settings, historyItemResponseModel.settings) &&
        Objects.equals(this.state, historyItemResponseModel.state) &&
        Objects.equals(this.text, historyItemResponseModel.text) &&
        Objects.equals(this.voiceId, historyItemResponseModel.voiceId) &&
        Objects.equals(this.voiceName, historyItemResponseModel.voiceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterCountChangeFrom, characterCountChangeTo, contentType, dateUnix, feedback, historyItemId, requestId, settings, state, text, voiceId, voiceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryItemResponseModel {\n");
    sb.append("    characterCountChangeFrom: ").append(toIndentedString(characterCountChangeFrom)).append("\n");
    sb.append("    characterCountChangeTo: ").append(toIndentedString(characterCountChangeTo)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    dateUnix: ").append(toIndentedString(dateUnix)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    historyItemId: ").append(toIndentedString(historyItemId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("    voiceName: ").append(toIndentedString(voiceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("character_count_change_from");
    openapiFields.add("character_count_change_to");
    openapiFields.add("content_type");
    openapiFields.add("date_unix");
    openapiFields.add("feedback");
    openapiFields.add("history_item_id");
    openapiFields.add("request_id");
    openapiFields.add("settings");
    openapiFields.add("state");
    openapiFields.add("text");
    openapiFields.add("voice_id");
    openapiFields.add("voice_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("character_count_change_from");
    openapiRequiredFields.add("character_count_change_to");
    openapiRequiredFields.add("content_type");
    openapiRequiredFields.add("date_unix");
    openapiRequiredFields.add("feedback");
    openapiRequiredFields.add("history_item_id");
    openapiRequiredFields.add("request_id");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("voice_id");
    openapiRequiredFields.add("voice_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryItemResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryItemResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryItemResponseModel is not found in the empty JSON string", HistoryItemResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryItemResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryItemResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistoryItemResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      // validate the required field `feedback`
      FeedbackResponseModel.validateJsonElement(jsonObj.get("feedback"));
      if (!jsonObj.get("history_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `history_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("history_item_id").toString()));
      }
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("voice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_id").toString()));
      }
      if (!jsonObj.get("voice_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryItemResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryItemResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryItemResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryItemResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryItemResponseModel>() {
           @Override
           public void write(JsonWriter out, HistoryItemResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryItemResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryItemResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryItemResponseModel
   * @throws IOException if the JSON string is invalid with respect to HistoryItemResponseModel
   */
  public static HistoryItemResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryItemResponseModel.class);
  }

  /**
   * Convert an instance of HistoryItemResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

