/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.RecordingResponseModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerificationAttemptResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:47.855117-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerificationAttemptResponseModel {
  public static final String SERIALIZED_NAME_ACCEPTED = "accepted";
  @SerializedName(SERIALIZED_NAME_ACCEPTED)
  private Boolean accepted;

  public static final String SERIALIZED_NAME_DATE_UNIX = "date_unix";
  @SerializedName(SERIALIZED_NAME_DATE_UNIX)
  private Integer dateUnix;

  public static final String SERIALIZED_NAME_LEVENSHTEIN_DISTANCE = "levenshtein_distance";
  @SerializedName(SERIALIZED_NAME_LEVENSHTEIN_DISTANCE)
  private BigDecimal levenshteinDistance;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private RecordingResponseModel recording;

  public static final String SERIALIZED_NAME_SIMILARITY = "similarity";
  @SerializedName(SERIALIZED_NAME_SIMILARITY)
  private BigDecimal similarity;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public VerificationAttemptResponseModel() {
  }

  public VerificationAttemptResponseModel accepted(Boolean accepted) {
    this.accepted = accepted;
    return this;
  }

  /**
   * Get accepted
   * @return accepted
   */
  @javax.annotation.Nonnull
  public Boolean getAccepted() {
    return accepted;
  }

  public void setAccepted(Boolean accepted) {
    this.accepted = accepted;
  }


  public VerificationAttemptResponseModel dateUnix(Integer dateUnix) {
    this.dateUnix = dateUnix;
    return this;
  }

  /**
   * Get dateUnix
   * @return dateUnix
   */
  @javax.annotation.Nonnull
  public Integer getDateUnix() {
    return dateUnix;
  }

  public void setDateUnix(Integer dateUnix) {
    this.dateUnix = dateUnix;
  }


  public VerificationAttemptResponseModel levenshteinDistance(BigDecimal levenshteinDistance) {
    this.levenshteinDistance = levenshteinDistance;
    return this;
  }

  /**
   * Get levenshteinDistance
   * @return levenshteinDistance
   */
  @javax.annotation.Nonnull
  public BigDecimal getLevenshteinDistance() {
    return levenshteinDistance;
  }

  public void setLevenshteinDistance(BigDecimal levenshteinDistance) {
    this.levenshteinDistance = levenshteinDistance;
  }


  public VerificationAttemptResponseModel recording(RecordingResponseModel recording) {
    this.recording = recording;
    return this;
  }

  /**
   * Get recording
   * @return recording
   */
  @javax.annotation.Nonnull
  public RecordingResponseModel getRecording() {
    return recording;
  }

  public void setRecording(RecordingResponseModel recording) {
    this.recording = recording;
  }


  public VerificationAttemptResponseModel similarity(BigDecimal similarity) {
    this.similarity = similarity;
    return this;
  }

  /**
   * Get similarity
   * @return similarity
   */
  @javax.annotation.Nonnull
  public BigDecimal getSimilarity() {
    return similarity;
  }

  public void setSimilarity(BigDecimal similarity) {
    this.similarity = similarity;
  }


  public VerificationAttemptResponseModel text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationAttemptResponseModel verificationAttemptResponseModel = (VerificationAttemptResponseModel) o;
    return Objects.equals(this.accepted, verificationAttemptResponseModel.accepted) &&
        Objects.equals(this.dateUnix, verificationAttemptResponseModel.dateUnix) &&
        Objects.equals(this.levenshteinDistance, verificationAttemptResponseModel.levenshteinDistance) &&
        Objects.equals(this.recording, verificationAttemptResponseModel.recording) &&
        Objects.equals(this.similarity, verificationAttemptResponseModel.similarity) &&
        Objects.equals(this.text, verificationAttemptResponseModel.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accepted, dateUnix, levenshteinDistance, recording, similarity, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationAttemptResponseModel {\n");
    sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
    sb.append("    dateUnix: ").append(toIndentedString(dateUnix)).append("\n");
    sb.append("    levenshteinDistance: ").append(toIndentedString(levenshteinDistance)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    similarity: ").append(toIndentedString(similarity)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted");
    openapiFields.add("date_unix");
    openapiFields.add("levenshtein_distance");
    openapiFields.add("recording");
    openapiFields.add("similarity");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accepted");
    openapiRequiredFields.add("date_unix");
    openapiRequiredFields.add("levenshtein_distance");
    openapiRequiredFields.add("recording");
    openapiRequiredFields.add("similarity");
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerificationAttemptResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerificationAttemptResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationAttemptResponseModel is not found in the empty JSON string", VerificationAttemptResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerificationAttemptResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerificationAttemptResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerificationAttemptResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `recording`
      RecordingResponseModel.validateJsonElement(jsonObj.get("recording"));
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationAttemptResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationAttemptResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationAttemptResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationAttemptResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationAttemptResponseModel>() {
           @Override
           public void write(JsonWriter out, VerificationAttemptResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationAttemptResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerificationAttemptResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerificationAttemptResponseModel
   * @throws IOException if the JSON string is invalid with respect to VerificationAttemptResponseModel
   */
  public static VerificationAttemptResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationAttemptResponseModel.class);
  }

  /**
   * Convert an instance of VerificationAttemptResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

