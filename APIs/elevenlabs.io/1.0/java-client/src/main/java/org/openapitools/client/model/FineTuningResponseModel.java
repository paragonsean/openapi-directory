/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VerificationAttemptResponseModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FineTuningResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:47.855117-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FineTuningResponseModel {
  public static final String SERIALIZED_NAME_FINE_TUNING_REQUESTED = "fine_tuning_requested";
  @SerializedName(SERIALIZED_NAME_FINE_TUNING_REQUESTED)
  private Boolean fineTuningRequested;

  /**
   * Gets or Sets finetuningState
   */
  @JsonAdapter(FinetuningStateEnum.Adapter.class)
  public enum FinetuningStateEnum {
    NOT_STARTED("not_started"),
    
    IS_FINE_TUNING("is_fine_tuning"),
    
    FINE_TUNED("fine_tuned");

    private String value;

    FinetuningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FinetuningStateEnum fromValue(String value) {
      for (FinetuningStateEnum b : FinetuningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FinetuningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FinetuningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FinetuningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FinetuningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FinetuningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FINETUNING_STATE = "finetuning_state";
  @SerializedName(SERIALIZED_NAME_FINETUNING_STATE)
  private FinetuningStateEnum finetuningState;

  public static final String SERIALIZED_NAME_IS_ALLOWED_TO_FINE_TUNE = "is_allowed_to_fine_tune";
  @SerializedName(SERIALIZED_NAME_IS_ALLOWED_TO_FINE_TUNE)
  private Boolean isAllowedToFineTune;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_SLICE_IDS = "slice_ids";
  @SerializedName(SERIALIZED_NAME_SLICE_IDS)
  private List<String> sliceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFICATION_ATTEMPTS = "verification_attempts";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ATTEMPTS)
  private List<VerificationAttemptResponseModel> verificationAttempts = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFICATION_ATTEMPTS_COUNT = "verification_attempts_count";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ATTEMPTS_COUNT)
  private Integer verificationAttemptsCount;

  public static final String SERIALIZED_NAME_VERIFICATION_FAILURES = "verification_failures";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_FAILURES)
  private List<String> verificationFailures = new ArrayList<>();

  public FineTuningResponseModel() {
  }

  public FineTuningResponseModel fineTuningRequested(Boolean fineTuningRequested) {
    this.fineTuningRequested = fineTuningRequested;
    return this;
  }

  /**
   * Get fineTuningRequested
   * @return fineTuningRequested
   */
  @javax.annotation.Nonnull
  public Boolean getFineTuningRequested() {
    return fineTuningRequested;
  }

  public void setFineTuningRequested(Boolean fineTuningRequested) {
    this.fineTuningRequested = fineTuningRequested;
  }


  public FineTuningResponseModel finetuningState(FinetuningStateEnum finetuningState) {
    this.finetuningState = finetuningState;
    return this;
  }

  /**
   * Get finetuningState
   * @return finetuningState
   */
  @javax.annotation.Nonnull
  public FinetuningStateEnum getFinetuningState() {
    return finetuningState;
  }

  public void setFinetuningState(FinetuningStateEnum finetuningState) {
    this.finetuningState = finetuningState;
  }


  public FineTuningResponseModel isAllowedToFineTune(Boolean isAllowedToFineTune) {
    this.isAllowedToFineTune = isAllowedToFineTune;
    return this;
  }

  /**
   * Get isAllowedToFineTune
   * @return isAllowedToFineTune
   */
  @javax.annotation.Nonnull
  public Boolean getIsAllowedToFineTune() {
    return isAllowedToFineTune;
  }

  public void setIsAllowedToFineTune(Boolean isAllowedToFineTune) {
    this.isAllowedToFineTune = isAllowedToFineTune;
  }


  public FineTuningResponseModel modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public FineTuningResponseModel sliceIds(List<String> sliceIds) {
    this.sliceIds = sliceIds;
    return this;
  }

  public FineTuningResponseModel addSliceIdsItem(String sliceIdsItem) {
    if (this.sliceIds == null) {
      this.sliceIds = new ArrayList<>();
    }
    this.sliceIds.add(sliceIdsItem);
    return this;
  }

  /**
   * Get sliceIds
   * @return sliceIds
   */
  @javax.annotation.Nonnull
  public List<String> getSliceIds() {
    return sliceIds;
  }

  public void setSliceIds(List<String> sliceIds) {
    this.sliceIds = sliceIds;
  }


  public FineTuningResponseModel verificationAttempts(List<VerificationAttemptResponseModel> verificationAttempts) {
    this.verificationAttempts = verificationAttempts;
    return this;
  }

  public FineTuningResponseModel addVerificationAttemptsItem(VerificationAttemptResponseModel verificationAttemptsItem) {
    if (this.verificationAttempts == null) {
      this.verificationAttempts = new ArrayList<>();
    }
    this.verificationAttempts.add(verificationAttemptsItem);
    return this;
  }

  /**
   * Get verificationAttempts
   * @return verificationAttempts
   */
  @javax.annotation.Nonnull
  public List<VerificationAttemptResponseModel> getVerificationAttempts() {
    return verificationAttempts;
  }

  public void setVerificationAttempts(List<VerificationAttemptResponseModel> verificationAttempts) {
    this.verificationAttempts = verificationAttempts;
  }


  public FineTuningResponseModel verificationAttemptsCount(Integer verificationAttemptsCount) {
    this.verificationAttemptsCount = verificationAttemptsCount;
    return this;
  }

  /**
   * Get verificationAttemptsCount
   * @return verificationAttemptsCount
   */
  @javax.annotation.Nonnull
  public Integer getVerificationAttemptsCount() {
    return verificationAttemptsCount;
  }

  public void setVerificationAttemptsCount(Integer verificationAttemptsCount) {
    this.verificationAttemptsCount = verificationAttemptsCount;
  }


  public FineTuningResponseModel verificationFailures(List<String> verificationFailures) {
    this.verificationFailures = verificationFailures;
    return this;
  }

  public FineTuningResponseModel addVerificationFailuresItem(String verificationFailuresItem) {
    if (this.verificationFailures == null) {
      this.verificationFailures = new ArrayList<>();
    }
    this.verificationFailures.add(verificationFailuresItem);
    return this;
  }

  /**
   * Get verificationFailures
   * @return verificationFailures
   */
  @javax.annotation.Nonnull
  public List<String> getVerificationFailures() {
    return verificationFailures;
  }

  public void setVerificationFailures(List<String> verificationFailures) {
    this.verificationFailures = verificationFailures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FineTuningResponseModel fineTuningResponseModel = (FineTuningResponseModel) o;
    return Objects.equals(this.fineTuningRequested, fineTuningResponseModel.fineTuningRequested) &&
        Objects.equals(this.finetuningState, fineTuningResponseModel.finetuningState) &&
        Objects.equals(this.isAllowedToFineTune, fineTuningResponseModel.isAllowedToFineTune) &&
        Objects.equals(this.modelId, fineTuningResponseModel.modelId) &&
        Objects.equals(this.sliceIds, fineTuningResponseModel.sliceIds) &&
        Objects.equals(this.verificationAttempts, fineTuningResponseModel.verificationAttempts) &&
        Objects.equals(this.verificationAttemptsCount, fineTuningResponseModel.verificationAttemptsCount) &&
        Objects.equals(this.verificationFailures, fineTuningResponseModel.verificationFailures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fineTuningRequested, finetuningState, isAllowedToFineTune, modelId, sliceIds, verificationAttempts, verificationAttemptsCount, verificationFailures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FineTuningResponseModel {\n");
    sb.append("    fineTuningRequested: ").append(toIndentedString(fineTuningRequested)).append("\n");
    sb.append("    finetuningState: ").append(toIndentedString(finetuningState)).append("\n");
    sb.append("    isAllowedToFineTune: ").append(toIndentedString(isAllowedToFineTune)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    sliceIds: ").append(toIndentedString(sliceIds)).append("\n");
    sb.append("    verificationAttempts: ").append(toIndentedString(verificationAttempts)).append("\n");
    sb.append("    verificationAttemptsCount: ").append(toIndentedString(verificationAttemptsCount)).append("\n");
    sb.append("    verificationFailures: ").append(toIndentedString(verificationFailures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fine_tuning_requested");
    openapiFields.add("finetuning_state");
    openapiFields.add("is_allowed_to_fine_tune");
    openapiFields.add("model_id");
    openapiFields.add("slice_ids");
    openapiFields.add("verification_attempts");
    openapiFields.add("verification_attempts_count");
    openapiFields.add("verification_failures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fine_tuning_requested");
    openapiRequiredFields.add("finetuning_state");
    openapiRequiredFields.add("is_allowed_to_fine_tune");
    openapiRequiredFields.add("model_id");
    openapiRequiredFields.add("slice_ids");
    openapiRequiredFields.add("verification_attempts");
    openapiRequiredFields.add("verification_attempts_count");
    openapiRequiredFields.add("verification_failures");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FineTuningResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FineTuningResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FineTuningResponseModel is not found in the empty JSON string", FineTuningResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FineTuningResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FineTuningResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FineTuningResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("finetuning_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finetuning_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finetuning_state").toString()));
      }
      // validate the required field `finetuning_state`
      FinetuningStateEnum.validateJsonElement(jsonObj.get("finetuning_state"));
      if (!jsonObj.get("model_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("slice_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("slice_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slice_ids` to be an array in the JSON string but got `%s`", jsonObj.get("slice_ids").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("verification_attempts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_attempts` to be an array in the JSON string but got `%s`", jsonObj.get("verification_attempts").toString()));
      }

      JsonArray jsonArrayverificationAttempts = jsonObj.getAsJsonArray("verification_attempts");
      // validate the required field `verification_attempts` (array)
      for (int i = 0; i < jsonArrayverificationAttempts.size(); i++) {
        VerificationAttemptResponseModel.validateJsonElement(jsonArrayverificationAttempts.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("verification_failures") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("verification_failures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_failures` to be an array in the JSON string but got `%s`", jsonObj.get("verification_failures").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FineTuningResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FineTuningResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FineTuningResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FineTuningResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FineTuningResponseModel>() {
           @Override
           public void write(JsonWriter out, FineTuningResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FineTuningResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FineTuningResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FineTuningResponseModel
   * @throws IOException if the JSON string is invalid with respect to FineTuningResponseModel
   */
  public static FineTuningResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FineTuningResponseModel.class);
  }

  /**
   * Convert an instance of FineTuningResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

