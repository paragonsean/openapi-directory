/*
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordingResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:47.855117-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordingResponseModel {
  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_RECORDING_ID = "recording_id";
  @SerializedName(SERIALIZED_NAME_RECORDING_ID)
  private String recordingId;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "size_bytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private Integer sizeBytes;

  public static final String SERIALIZED_NAME_TRANSCRIPTION = "transcription";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION)
  private String transcription;

  public static final String SERIALIZED_NAME_UPLOAD_DATE_UNIX = "upload_date_unix";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE_UNIX)
  private Integer uploadDateUnix;

  public RecordingResponseModel() {
  }

  public RecordingResponseModel mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Get mimeType
   * @return mimeType
   */
  @javax.annotation.Nonnull
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public RecordingResponseModel recordingId(String recordingId) {
    this.recordingId = recordingId;
    return this;
  }

  /**
   * Get recordingId
   * @return recordingId
   */
  @javax.annotation.Nonnull
  public String getRecordingId() {
    return recordingId;
  }

  public void setRecordingId(String recordingId) {
    this.recordingId = recordingId;
  }


  public RecordingResponseModel sizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Get sizeBytes
   * @return sizeBytes
   */
  @javax.annotation.Nonnull
  public Integer getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public RecordingResponseModel transcription(String transcription) {
    this.transcription = transcription;
    return this;
  }

  /**
   * Get transcription
   * @return transcription
   */
  @javax.annotation.Nonnull
  public String getTranscription() {
    return transcription;
  }

  public void setTranscription(String transcription) {
    this.transcription = transcription;
  }


  public RecordingResponseModel uploadDateUnix(Integer uploadDateUnix) {
    this.uploadDateUnix = uploadDateUnix;
    return this;
  }

  /**
   * Get uploadDateUnix
   * @return uploadDateUnix
   */
  @javax.annotation.Nonnull
  public Integer getUploadDateUnix() {
    return uploadDateUnix;
  }

  public void setUploadDateUnix(Integer uploadDateUnix) {
    this.uploadDateUnix = uploadDateUnix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordingResponseModel recordingResponseModel = (RecordingResponseModel) o;
    return Objects.equals(this.mimeType, recordingResponseModel.mimeType) &&
        Objects.equals(this.recordingId, recordingResponseModel.recordingId) &&
        Objects.equals(this.sizeBytes, recordingResponseModel.sizeBytes) &&
        Objects.equals(this.transcription, recordingResponseModel.transcription) &&
        Objects.equals(this.uploadDateUnix, recordingResponseModel.uploadDateUnix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mimeType, recordingId, sizeBytes, transcription, uploadDateUnix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordingResponseModel {\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    recordingId: ").append(toIndentedString(recordingId)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    transcription: ").append(toIndentedString(transcription)).append("\n");
    sb.append("    uploadDateUnix: ").append(toIndentedString(uploadDateUnix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mime_type");
    openapiFields.add("recording_id");
    openapiFields.add("size_bytes");
    openapiFields.add("transcription");
    openapiFields.add("upload_date_unix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mime_type");
    openapiRequiredFields.add("recording_id");
    openapiRequiredFields.add("size_bytes");
    openapiRequiredFields.add("transcription");
    openapiRequiredFields.add("upload_date_unix");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordingResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordingResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordingResponseModel is not found in the empty JSON string", RecordingResponseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordingResponseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordingResponseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordingResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if (!jsonObj.get("recording_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_id").toString()));
      }
      if (!jsonObj.get("transcription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordingResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordingResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordingResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordingResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordingResponseModel>() {
           @Override
           public void write(JsonWriter out, RecordingResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordingResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordingResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordingResponseModel
   * @throws IOException if the JSON string is invalid with respect to RecordingResponseModel
   */
  public static RecordingResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordingResponseModel.class);
  }

  /**
   * Convert an instance of RecordingResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

