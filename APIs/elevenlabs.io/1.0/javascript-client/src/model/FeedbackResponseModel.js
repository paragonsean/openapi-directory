/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeedbackResponseModel model module.
 * @module model/FeedbackResponseModel
 * @version 1.0
 */
class FeedbackResponseModel {
    /**
     * Constructs a new <code>FeedbackResponseModel</code>.
     * @alias module:model/FeedbackResponseModel
     * @param audioQuality {Boolean} 
     * @param emotions {Boolean} 
     * @param feedback {String} 
     * @param glitches {Boolean} 
     * @param inaccurateClone {Boolean} 
     * @param other {Boolean} 
     * @param thumbsUp {Boolean} 
     */
    constructor(audioQuality, emotions, feedback, glitches, inaccurateClone, other, thumbsUp) { 
        
        FeedbackResponseModel.initialize(this, audioQuality, emotions, feedback, glitches, inaccurateClone, other, thumbsUp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioQuality, emotions, feedback, glitches, inaccurateClone, other, thumbsUp) { 
        obj['audio_quality'] = audioQuality;
        obj['emotions'] = emotions;
        obj['feedback'] = feedback;
        obj['glitches'] = glitches;
        obj['inaccurate_clone'] = inaccurateClone;
        obj['other'] = other;
        obj['review_status'] = 'not_reviewed';
        obj['thumbs_up'] = thumbsUp;
    }

    /**
     * Constructs a <code>FeedbackResponseModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackResponseModel} obj Optional instance to populate.
     * @return {module:model/FeedbackResponseModel} The populated <code>FeedbackResponseModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackResponseModel();

            if (data.hasOwnProperty('audio_quality')) {
                obj['audio_quality'] = ApiClient.convertToType(data['audio_quality'], 'Boolean');
            }
            if (data.hasOwnProperty('emotions')) {
                obj['emotions'] = ApiClient.convertToType(data['emotions'], 'Boolean');
            }
            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = ApiClient.convertToType(data['feedback'], 'String');
            }
            if (data.hasOwnProperty('glitches')) {
                obj['glitches'] = ApiClient.convertToType(data['glitches'], 'Boolean');
            }
            if (data.hasOwnProperty('inaccurate_clone')) {
                obj['inaccurate_clone'] = ApiClient.convertToType(data['inaccurate_clone'], 'Boolean');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], 'Boolean');
            }
            if (data.hasOwnProperty('review_status')) {
                obj['review_status'] = ApiClient.convertToType(data['review_status'], 'String');
            }
            if (data.hasOwnProperty('thumbs_up')) {
                obj['thumbs_up'] = ApiClient.convertToType(data['thumbs_up'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedbackResponseModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedbackResponseModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedbackResponseModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['feedback'] && !(typeof data['feedback'] === 'string' || data['feedback'] instanceof String)) {
            throw new Error("Expected the field `feedback` to be a primitive type in the JSON string but got " + data['feedback']);
        }
        // ensure the json data is a string
        if (data['review_status'] && !(typeof data['review_status'] === 'string' || data['review_status'] instanceof String)) {
            throw new Error("Expected the field `review_status` to be a primitive type in the JSON string but got " + data['review_status']);
        }

        return true;
    }


}

FeedbackResponseModel.RequiredProperties = ["audio_quality", "emotions", "feedback", "glitches", "inaccurate_clone", "other", "thumbs_up"];

/**
 * @member {Boolean} audio_quality
 */
FeedbackResponseModel.prototype['audio_quality'] = undefined;

/**
 * @member {Boolean} emotions
 */
FeedbackResponseModel.prototype['emotions'] = undefined;

/**
 * @member {String} feedback
 */
FeedbackResponseModel.prototype['feedback'] = undefined;

/**
 * @member {Boolean} glitches
 */
FeedbackResponseModel.prototype['glitches'] = undefined;

/**
 * @member {Boolean} inaccurate_clone
 */
FeedbackResponseModel.prototype['inaccurate_clone'] = undefined;

/**
 * @member {Boolean} other
 */
FeedbackResponseModel.prototype['other'] = undefined;

/**
 * @member {String} review_status
 * @default 'not_reviewed'
 */
FeedbackResponseModel.prototype['review_status'] = 'not_reviewed';

/**
 * @member {Boolean} thumbs_up
 */
FeedbackResponseModel.prototype['thumbs_up'] = undefined;






export default FeedbackResponseModel;

