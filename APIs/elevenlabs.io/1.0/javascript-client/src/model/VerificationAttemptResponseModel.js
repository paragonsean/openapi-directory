/**
 * ElevenLabs API Documentation
 * This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordingResponseModel from './RecordingResponseModel';

/**
 * The VerificationAttemptResponseModel model module.
 * @module model/VerificationAttemptResponseModel
 * @version 1.0
 */
class VerificationAttemptResponseModel {
    /**
     * Constructs a new <code>VerificationAttemptResponseModel</code>.
     * @alias module:model/VerificationAttemptResponseModel
     * @param accepted {Boolean} 
     * @param dateUnix {Number} 
     * @param levenshteinDistance {Number} 
     * @param recording {module:model/RecordingResponseModel} 
     * @param similarity {Number} 
     * @param text {String} 
     */
    constructor(accepted, dateUnix, levenshteinDistance, recording, similarity, text) { 
        
        VerificationAttemptResponseModel.initialize(this, accepted, dateUnix, levenshteinDistance, recording, similarity, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accepted, dateUnix, levenshteinDistance, recording, similarity, text) { 
        obj['accepted'] = accepted;
        obj['date_unix'] = dateUnix;
        obj['levenshtein_distance'] = levenshteinDistance;
        obj['recording'] = recording;
        obj['similarity'] = similarity;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>VerificationAttemptResponseModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationAttemptResponseModel} obj Optional instance to populate.
     * @return {module:model/VerificationAttemptResponseModel} The populated <code>VerificationAttemptResponseModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationAttemptResponseModel();

            if (data.hasOwnProperty('accepted')) {
                obj['accepted'] = ApiClient.convertToType(data['accepted'], 'Boolean');
            }
            if (data.hasOwnProperty('date_unix')) {
                obj['date_unix'] = ApiClient.convertToType(data['date_unix'], 'Number');
            }
            if (data.hasOwnProperty('levenshtein_distance')) {
                obj['levenshtein_distance'] = ApiClient.convertToType(data['levenshtein_distance'], 'Number');
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = RecordingResponseModel.constructFromObject(data['recording']);
            }
            if (data.hasOwnProperty('similarity')) {
                obj['similarity'] = ApiClient.convertToType(data['similarity'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationAttemptResponseModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationAttemptResponseModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerificationAttemptResponseModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `recording`
        if (data['recording']) { // data not null
          RecordingResponseModel.validateJSON(data['recording']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

VerificationAttemptResponseModel.RequiredProperties = ["accepted", "date_unix", "levenshtein_distance", "recording", "similarity", "text"];

/**
 * @member {Boolean} accepted
 */
VerificationAttemptResponseModel.prototype['accepted'] = undefined;

/**
 * @member {Number} date_unix
 */
VerificationAttemptResponseModel.prototype['date_unix'] = undefined;

/**
 * @member {Number} levenshtein_distance
 */
VerificationAttemptResponseModel.prototype['levenshtein_distance'] = undefined;

/**
 * @member {module:model/RecordingResponseModel} recording
 */
VerificationAttemptResponseModel.prototype['recording'] = undefined;

/**
 * @member {Number} similarity
 */
VerificationAttemptResponseModel.prototype['similarity'] = undefined;

/**
 * @member {String} text
 */
VerificationAttemptResponseModel.prototype['text'] = undefined;






export default VerificationAttemptResponseModel;

