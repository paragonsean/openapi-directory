/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject_word_count_analysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject_word_count_analysis::OAIProject_word_count_analysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject_word_count_analysis::OAIProject_word_count_analysis() {
    this->initializeModel();
}

OAIProject_word_count_analysis::~OAIProject_word_count_analysis() {}

void OAIProject_word_count_analysis::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_duplicate_isSet = false;
    m_duplicate_isValid = false;

    m_exclusion_isSet = false;
    m_exclusion_isValid = false;

    m_final_isSet = false;
    m_final_isValid = false;

    m_tm_isSet = false;
    m_tm_isValid = false;
}

void OAIProject_word_count_analysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject_word_count_analysis::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_duplicate_isValid = ::OpenAPI::fromJsonValue(m_duplicate, json[QString("duplicate")]);
    m_duplicate_isSet = !json[QString("duplicate")].isNull() && m_duplicate_isValid;

    m_exclusion_isValid = ::OpenAPI::fromJsonValue(m_exclusion, json[QString("exclusion")]);
    m_exclusion_isSet = !json[QString("exclusion")].isNull() && m_exclusion_isValid;

    m_final_isValid = ::OpenAPI::fromJsonValue(m_final, json[QString("final")]);
    m_final_isSet = !json[QString("final")].isNull() && m_final_isValid;

    m_tm_isValid = ::OpenAPI::fromJsonValue(m_tm, json[QString("tm")]);
    m_tm_isSet = !json[QString("tm")].isNull() && m_tm_isValid;
}

QString OAIProject_word_count_analysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject_word_count_analysis::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_duplicate_isSet) {
        obj.insert(QString("duplicate"), ::OpenAPI::toJsonValue(m_duplicate));
    }
    if (m_exclusion_isSet) {
        obj.insert(QString("exclusion"), ::OpenAPI::toJsonValue(m_exclusion));
    }
    if (m_final_isSet) {
        obj.insert(QString("final"), ::OpenAPI::toJsonValue(m_final));
    }
    if (m_tm_isSet) {
        obj.insert(QString("tm"), ::OpenAPI::toJsonValue(m_tm));
    }
    return obj;
}

double OAIProject_word_count_analysis::getBase() const {
    return m_base;
}
void OAIProject_word_count_analysis::setBase(const double &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIProject_word_count_analysis::is_base_Set() const{
    return m_base_isSet;
}

bool OAIProject_word_count_analysis::is_base_Valid() const{
    return m_base_isValid;
}

double OAIProject_word_count_analysis::getDuplicate() const {
    return m_duplicate;
}
void OAIProject_word_count_analysis::setDuplicate(const double &duplicate) {
    m_duplicate = duplicate;
    m_duplicate_isSet = true;
}

bool OAIProject_word_count_analysis::is_duplicate_Set() const{
    return m_duplicate_isSet;
}

bool OAIProject_word_count_analysis::is_duplicate_Valid() const{
    return m_duplicate_isValid;
}

double OAIProject_word_count_analysis::getExclusion() const {
    return m_exclusion;
}
void OAIProject_word_count_analysis::setExclusion(const double &exclusion) {
    m_exclusion = exclusion;
    m_exclusion_isSet = true;
}

bool OAIProject_word_count_analysis::is_exclusion_Set() const{
    return m_exclusion_isSet;
}

bool OAIProject_word_count_analysis::is_exclusion_Valid() const{
    return m_exclusion_isValid;
}

double OAIProject_word_count_analysis::getFinal() const {
    return m_final;
}
void OAIProject_word_count_analysis::setFinal(const double &final) {
    m_final = final;
    m_final_isSet = true;
}

bool OAIProject_word_count_analysis::is_final_Set() const{
    return m_final_isSet;
}

bool OAIProject_word_count_analysis::is_final_Valid() const{
    return m_final_isValid;
}

double OAIProject_word_count_analysis::getTm() const {
    return m_tm;
}
void OAIProject_word_count_analysis::setTm(const double &tm) {
    m_tm = tm;
    m_tm_isSet = true;
}

bool OAIProject_word_count_analysis::is_tm_Set() const{
    return m_tm_isSet;
}

bool OAIProject_word_count_analysis::is_tm_Valid() const{
    return m_tm_isValid;
}

bool OAIProject_word_count_analysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject_word_count_analysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
