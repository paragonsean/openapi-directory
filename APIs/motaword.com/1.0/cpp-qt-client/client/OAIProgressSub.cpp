/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgressSub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgressSub::OAIProgressSub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgressSub::OAIProgressSub() {
    this->initializeModel();
}

OAIProgressSub::~OAIProgressSub() {}

void OAIProgressSub::initializeModel() {

    m_proofreading_isSet = false;
    m_proofreading_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_translation_isSet = false;
    m_translation_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIProgressSub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgressSub::fromJsonObject(QJsonObject json) {

    m_proofreading_isValid = ::OpenAPI::fromJsonValue(m_proofreading, json[QString("proofreading")]);
    m_proofreading_isSet = !json[QString("proofreading")].isNull() && m_proofreading_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_translation_isValid = ::OpenAPI::fromJsonValue(m_translation, json[QString("translation")]);
    m_translation_isSet = !json[QString("translation")].isNull() && m_translation_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIProgressSub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgressSub::asJsonObject() const {
    QJsonObject obj;
    if (m_proofreading_isSet) {
        obj.insert(QString("proofreading"), ::OpenAPI::toJsonValue(m_proofreading));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_translation_isSet) {
        obj.insert(QString("translation"), ::OpenAPI::toJsonValue(m_translation));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

float OAIProgressSub::getProofreading() const {
    return m_proofreading;
}
void OAIProgressSub::setProofreading(const float &proofreading) {
    m_proofreading = proofreading;
    m_proofreading_isSet = true;
}

bool OAIProgressSub::is_proofreading_Set() const{
    return m_proofreading_isSet;
}

bool OAIProgressSub::is_proofreading_Valid() const{
    return m_proofreading_isValid;
}

float OAIProgressSub::getTotal() const {
    return m_total;
}
void OAIProgressSub::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIProgressSub::is_total_Set() const{
    return m_total_isSet;
}

bool OAIProgressSub::is_total_Valid() const{
    return m_total_isValid;
}

float OAIProgressSub::getTranslation() const {
    return m_translation;
}
void OAIProgressSub::setTranslation(const float &translation) {
    m_translation = translation;
    m_translation_isSet = true;
}

bool OAIProgressSub::is_translation_Set() const{
    return m_translation_isSet;
}

bool OAIProgressSub::is_translation_Valid() const{
    return m_translation_isValid;
}

qint64 OAIProgressSub::getWordCount() const {
    return m_word_count;
}
void OAIProgressSub::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIProgressSub::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIProgressSub::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIProgressSub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_proofreading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgressSub::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
