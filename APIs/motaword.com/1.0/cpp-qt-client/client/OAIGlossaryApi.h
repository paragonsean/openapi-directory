/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlossaryApi_H
#define OAI_OAIGlossaryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountGlossaryUploadRequest.h"
#include "OAIError.h"
#include "OAIGlossary.h"
#include "OAIGlossaryList.h"
#include "OAIGlossaryUploadRequest.h"
#include "OAIOperationStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlossaryApi : public QObject {
    Q_OBJECT

public:
    OAIGlossaryApi(const int timeOut = 0);
    ~OAIGlossaryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_glossary_upload_request OAIGlossaryUploadRequest [optional]
    */
    virtual void createGlossary(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIGlossaryUploadRequest> &oai_glossary_upload_request = ::OpenAPI::OptionalParam<OAIGlossaryUploadRequest>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  glossary_id qint64 [required]
    */
    virtual void deleteGlossary(const qint64 &project_id, const qint64 &glossary_id);


    virtual void downloadGlobalGlossary();

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  glossary_id qint64 [required]
    */
    virtual void downloadGlossary(const qint64 &project_id, const qint64 &glossary_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getGlossaries(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  glossary_id qint64 [required]
    */
    virtual void getGlossary(const qint64 &project_id, const qint64 &glossary_id);

    /**
    * @param[in]  oai_account_glossary_upload_request OAIAccountGlossaryUploadRequest [optional]
    */
    virtual void updateGlobalGlossary(const ::OpenAPI::OptionalParam<OAIAccountGlossaryUploadRequest> &oai_account_glossary_upload_request = ::OpenAPI::OptionalParam<OAIAccountGlossaryUploadRequest>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  glossary_id qint64 [required]
    * @param[in]  oai_glossary_upload_request OAIGlossaryUploadRequest [optional]
    */
    virtual void updateGlossary(const qint64 &project_id, const qint64 &glossary_id, const ::OpenAPI::OptionalParam<OAIGlossaryUploadRequest> &oai_glossary_upload_request = ::OpenAPI::OptionalParam<OAIGlossaryUploadRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGlossaryCallback(OAIHttpRequestWorker *worker);
    void deleteGlossaryCallback(OAIHttpRequestWorker *worker);
    void downloadGlobalGlossaryCallback(OAIHttpRequestWorker *worker);
    void downloadGlossaryCallback(OAIHttpRequestWorker *worker);
    void getGlossariesCallback(OAIHttpRequestWorker *worker);
    void getGlossaryCallback(OAIHttpRequestWorker *worker);
    void updateGlobalGlossaryCallback(OAIHttpRequestWorker *worker);
    void updateGlossaryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGlossarySignal(OAIGlossary summary);
    void deleteGlossarySignal(OAIOperationStatus summary);
    void downloadGlobalGlossarySignal(QString summary);
    void downloadGlossarySignal(QString summary);
    void getGlossariesSignal(OAIGlossaryList summary);
    void getGlossarySignal(OAIGlossary summary);
    void updateGlobalGlossarySignal(OAIOperationStatus summary);
    void updateGlossarySignal(OAIGlossary summary);


    void createGlossarySignalFull(OAIHttpRequestWorker *worker, OAIGlossary summary);
    void deleteGlossarySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downloadGlobalGlossarySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void downloadGlossarySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getGlossariesSignalFull(OAIHttpRequestWorker *worker, OAIGlossaryList summary);
    void getGlossarySignalFull(OAIHttpRequestWorker *worker, OAIGlossary summary);
    void updateGlobalGlossarySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void updateGlossarySignalFull(OAIHttpRequestWorker *worker, OAIGlossary summary);

    Q_DECL_DEPRECATED_X("Use createGlossarySignalError() instead")
    void createGlossarySignalE(OAIGlossary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGlossarySignalError(OAIGlossary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlossarySignalError() instead")
    void deleteGlossarySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlossarySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlobalGlossarySignalError() instead")
    void downloadGlobalGlossarySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlobalGlossarySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlossarySignalError() instead")
    void downloadGlossarySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlossarySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlossariesSignalError() instead")
    void getGlossariesSignalE(OAIGlossaryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlossariesSignalError(OAIGlossaryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlossarySignalError() instead")
    void getGlossarySignalE(OAIGlossary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlossarySignalError(OAIGlossary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalGlossarySignalError() instead")
    void updateGlobalGlossarySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalGlossarySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlossarySignalError() instead")
    void updateGlossarySignalE(OAIGlossary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlossarySignalError(OAIGlossary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGlossarySignalErrorFull() instead")
    void createGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlossarySignalErrorFull() instead")
    void deleteGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlobalGlossarySignalErrorFull() instead")
    void downloadGlobalGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlobalGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlossarySignalErrorFull() instead")
    void downloadGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlossariesSignalErrorFull() instead")
    void getGlossariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlossariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlossarySignalErrorFull() instead")
    void getGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalGlossarySignalErrorFull() instead")
    void updateGlobalGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlossarySignalErrorFull() instead")
    void updateGlossarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlossarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
