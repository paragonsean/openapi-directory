/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectLanguageCache.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectLanguageCache::OAIContinuousProjectLanguageCache(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectLanguageCache::OAIContinuousProjectLanguageCache() {
    this->initializeModel();
}

OAIContinuousProjectLanguageCache::~OAIContinuousProjectLanguageCache() {}

void OAIContinuousProjectLanguageCache::initializeModel() {

    m_mt_isSet = false;
    m_mt_isValid = false;

    m_nonparsed_isSet = false;
    m_nonparsed_isValid = false;

    m_tm_isSet = false;
    m_tm_isValid = false;
}

void OAIContinuousProjectLanguageCache::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectLanguageCache::fromJsonObject(QJsonObject json) {

    m_mt_isValid = ::OpenAPI::fromJsonValue(m_mt, json[QString("mt")]);
    m_mt_isSet = !json[QString("mt")].isNull() && m_mt_isValid;

    m_nonparsed_isValid = ::OpenAPI::fromJsonValue(m_nonparsed, json[QString("nonparsed")]);
    m_nonparsed_isSet = !json[QString("nonparsed")].isNull() && m_nonparsed_isValid;

    m_tm_isValid = ::OpenAPI::fromJsonValue(m_tm, json[QString("tm")]);
    m_tm_isSet = !json[QString("tm")].isNull() && m_tm_isValid;
}

QString OAIContinuousProjectLanguageCache::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectLanguageCache::asJsonObject() const {
    QJsonObject obj;
    if (m_mt.size() > 0) {
        obj.insert(QString("mt"), ::OpenAPI::toJsonValue(m_mt));
    }
    if (m_nonparsed.size() > 0) {
        obj.insert(QString("nonparsed"), ::OpenAPI::toJsonValue(m_nonparsed));
    }
    if (m_tm.size() > 0) {
        obj.insert(QString("tm"), ::OpenAPI::toJsonValue(m_tm));
    }
    return obj;
}

QMap<QString, QString> OAIContinuousProjectLanguageCache::getMt() const {
    return m_mt;
}
void OAIContinuousProjectLanguageCache::setMt(const QMap<QString, QString> &mt) {
    m_mt = mt;
    m_mt_isSet = true;
}

bool OAIContinuousProjectLanguageCache::is_mt_Set() const{
    return m_mt_isSet;
}

bool OAIContinuousProjectLanguageCache::is_mt_Valid() const{
    return m_mt_isValid;
}

QMap<QString, QString> OAIContinuousProjectLanguageCache::getNonparsed() const {
    return m_nonparsed;
}
void OAIContinuousProjectLanguageCache::setNonparsed(const QMap<QString, QString> &nonparsed) {
    m_nonparsed = nonparsed;
    m_nonparsed_isSet = true;
}

bool OAIContinuousProjectLanguageCache::is_nonparsed_Set() const{
    return m_nonparsed_isSet;
}

bool OAIContinuousProjectLanguageCache::is_nonparsed_Valid() const{
    return m_nonparsed_isValid;
}

QMap<QString, QString> OAIContinuousProjectLanguageCache::getTm() const {
    return m_tm;
}
void OAIContinuousProjectLanguageCache::setTm(const QMap<QString, QString> &tm) {
    m_tm = tm;
    m_tm_isSet = true;
}

bool OAIContinuousProjectLanguageCache::is_tm_Set() const{
    return m_tm_isSet;
}

bool OAIContinuousProjectLanguageCache::is_tm_Valid() const{
    return m_tm_isValid;
}

bool OAIContinuousProjectLanguageCache::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonparsed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tm.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectLanguageCache::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
