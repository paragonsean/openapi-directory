/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlossaryUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlossaryUploadRequest::OAIGlossaryUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlossaryUploadRequest::OAIGlossaryUploadRequest() {
    this->initializeModel();
}

OAIGlossaryUploadRequest::~OAIGlossaryUploadRequest() {}

void OAIGlossaryUploadRequest::initializeModel() {

    m_glossaries_isSet = false;
    m_glossaries_isValid = false;
}

void OAIGlossaryUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlossaryUploadRequest::fromJsonObject(QJsonObject json) {

    m_glossaries_isValid = ::OpenAPI::fromJsonValue(m_glossaries, json[QString("glossaries")]);
    m_glossaries_isSet = !json[QString("glossaries")].isNull() && m_glossaries_isValid;
}

QString OAIGlossaryUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlossaryUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_glossaries.isSet()) {
        obj.insert(QString("glossaries"), ::OpenAPI::toJsonValue(m_glossaries));
    }
    return obj;
}

OAIHttpFileElement OAIGlossaryUploadRequest::getGlossaries() const {
    return m_glossaries;
}
void OAIGlossaryUploadRequest::setGlossaries(const OAIHttpFileElement &glossaries) {
    m_glossaries = glossaries;
    m_glossaries_isSet = true;
}

bool OAIGlossaryUploadRequest::is_glossaries_Set() const{
    return m_glossaries_isSet;
}

bool OAIGlossaryUploadRequest::is_glossaries_Valid() const{
    return m_glossaries_isValid;
}

bool OAIGlossaryUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_glossaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlossaryUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_glossaries_isValid && true;
}

} // namespace OpenAPI
