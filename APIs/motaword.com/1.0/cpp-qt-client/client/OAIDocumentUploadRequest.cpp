/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentUploadRequest::OAIDocumentUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentUploadRequest::OAIDocumentUploadRequest() {
    this->initializeModel();
}

OAIDocumentUploadRequest::~OAIDocumentUploadRequest() {}

void OAIDocumentUploadRequest::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_schemes_isSet = false;
    m_schemes_isValid = false;

    m_source_link_isSet = false;
    m_source_link_isValid = false;
}

void OAIDocumentUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentUploadRequest::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_schemes_isValid = ::OpenAPI::fromJsonValue(m_schemes, json[QString("schemes")]);
    m_schemes_isSet = !json[QString("schemes")].isNull() && m_schemes_isValid;

    m_source_link_isValid = ::OpenAPI::fromJsonValue(m_source_link, json[QString("source-link")]);
    m_source_link_isSet = !json[QString("source-link")].isNull() && m_source_link_isValid;
}

QString OAIDocumentUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.isSet()) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_schemes_isSet) {
        obj.insert(QString("schemes"), ::OpenAPI::toJsonValue(m_schemes));
    }
    if (m_source_link.isSet()) {
        obj.insert(QString("source-link"), ::OpenAPI::toJsonValue(m_source_link));
    }
    return obj;
}

OAIHttpFileElement OAIDocumentUploadRequest::getDocuments() const {
    return m_documents;
}
void OAIDocumentUploadRequest::setDocuments(const OAIHttpFileElement &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIDocumentUploadRequest::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIDocumentUploadRequest::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIDocumentUploadRequest::getSchemes() const {
    return m_schemes;
}
void OAIDocumentUploadRequest::setSchemes(const QString &schemes) {
    m_schemes = schemes;
    m_schemes_isSet = true;
}

bool OAIDocumentUploadRequest::is_schemes_Set() const{
    return m_schemes_isSet;
}

bool OAIDocumentUploadRequest::is_schemes_Valid() const{
    return m_schemes_isValid;
}

OAILinkedSourceDocument OAIDocumentUploadRequest::getSourceLink() const {
    return m_source_link;
}
void OAIDocumentUploadRequest::setSourceLink(const OAILinkedSourceDocument &source_link) {
    m_source_link = source_link;
    m_source_link_isSet = true;
}

bool OAIDocumentUploadRequest::is_source_link_Set() const{
    return m_source_link_isSet;
}

bool OAIDocumentUploadRequest::is_source_link_Valid() const{
    return m_source_link_isValid;
}

bool OAIDocumentUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
