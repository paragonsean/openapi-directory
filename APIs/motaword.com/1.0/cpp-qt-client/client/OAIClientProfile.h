/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClientProfile.h
 *
 * 
 */

#ifndef OAIClientProfile_H
#define OAIClientProfile_H

#include <QJsonObject>

#include "OAIClientProfile_nps.h"
#include "OAIProofreaderWithLanguage.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProofreaderWithLanguage;
class OAIClientProfile_nps;

class OAIClientProfile : public OAIObject {
public:
    OAIClientProfile();
    OAIClientProfile(QString json);
    ~OAIClientProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAccountCreationDate() const;
    void setAccountCreationDate(const QDateTime &account_creation_date);
    bool is_account_creation_date_Set() const;
    bool is_account_creation_date_Valid() const;

    double getClientProjectCount() const;
    void setClientProjectCount(const double &client_project_count);
    bool is_client_project_count_Set() const;
    bool is_client_project_count_Valid() const;

    QString getCorporate() const;
    void setCorporate(const QString &corporate);
    bool is_corporate_Set() const;
    bool is_corporate_Valid() const;

    double getCorporateId() const;
    void setCorporateId(const double &corporate_id);
    bool is_corporate_id_Set() const;
    bool is_corporate_id_Valid() const;

    double getCorporateUserCount() const;
    void setCorporateUserCount(const double &corporate_user_count);
    bool is_corporate_user_count_Set() const;
    bool is_corporate_user_count_Valid() const;

    QString getFrequentFileExtension() const;
    void setFrequentFileExtension(const QString &frequent_file_extension);
    bool is_frequent_file_extension_Set() const;
    bool is_frequent_file_extension_Valid() const;

    QList<QString> getFrequentLanguagePairs() const;
    void setFrequentLanguagePairs(const QList<QString> &frequent_language_pairs);
    bool is_frequent_language_pairs_Set() const;
    bool is_frequent_language_pairs_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    bool isGrowth() const;
    void setGrowth(const bool &growth);
    bool is_growth_Set() const;
    bool is_growth_Valid() const;

    bool isIsComplex() const;
    void setIsComplex(const bool &is_complex);
    bool is_is_complex_Set() const;
    bool is_is_complex_Valid() const;

    float getLast12MonthsSpending() const;
    void setLast12MonthsSpending(const float &last_12_months_spending);
    bool is_last_12_months_spending_Set() const;
    bool is_last_12_months_spending_Valid() const;

    double getLastProject() const;
    void setLastProject(const double &last_project);
    bool is_last_project_Set() const;
    bool is_last_project_Valid() const;

    QDateTime getLastProjectTime() const;
    void setLastProjectTime(const QDateTime &last_project_time);
    bool is_last_project_time_Set() const;
    bool is_last_project_time_Valid() const;

    QList<OAIProofreaderWithLanguage> getLastProofreaders() const;
    void setLastProofreaders(const QList<OAIProofreaderWithLanguage> &last_proofreaders);
    bool is_last_proofreaders_Set() const;
    bool is_last_proofreaders_Valid() const;

    QList<QString> getNotes() const;
    void setNotes(const QList<QString> &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    OAIClientProfile_nps getNps() const;
    void setNps(const OAIClientProfile_nps &nps);
    bool is_nps_Set() const;
    bool is_nps_Valid() const;

    double getUserRankInProjectCount() const;
    void setUserRankInProjectCount(const double &user_rank_in_project_count);
    bool is_user_rank_in_project_count_Set() const;
    bool is_user_rank_in_project_count_Valid() const;

    double getUserRankInSpending() const;
    void setUserRankInSpending(const double &user_rank_in_spending);
    bool is_user_rank_in_spending_Set() const;
    bool is_user_rank_in_spending_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_account_creation_date;
    bool m_account_creation_date_isSet;
    bool m_account_creation_date_isValid;

    double m_client_project_count;
    bool m_client_project_count_isSet;
    bool m_client_project_count_isValid;

    QString m_corporate;
    bool m_corporate_isSet;
    bool m_corporate_isValid;

    double m_corporate_id;
    bool m_corporate_id_isSet;
    bool m_corporate_id_isValid;

    double m_corporate_user_count;
    bool m_corporate_user_count_isSet;
    bool m_corporate_user_count_isValid;

    QString m_frequent_file_extension;
    bool m_frequent_file_extension_isSet;
    bool m_frequent_file_extension_isValid;

    QList<QString> m_frequent_language_pairs;
    bool m_frequent_language_pairs_isSet;
    bool m_frequent_language_pairs_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    bool m_growth;
    bool m_growth_isSet;
    bool m_growth_isValid;

    bool m_is_complex;
    bool m_is_complex_isSet;
    bool m_is_complex_isValid;

    float m_last_12_months_spending;
    bool m_last_12_months_spending_isSet;
    bool m_last_12_months_spending_isValid;

    double m_last_project;
    bool m_last_project_isSet;
    bool m_last_project_isValid;

    QDateTime m_last_project_time;
    bool m_last_project_time_isSet;
    bool m_last_project_time_isValid;

    QList<OAIProofreaderWithLanguage> m_last_proofreaders;
    bool m_last_proofreaders_isSet;
    bool m_last_proofreaders_isValid;

    QList<QString> m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    OAIClientProfile_nps m_nps;
    bool m_nps_isSet;
    bool m_nps_isValid;

    double m_user_rank_in_project_count;
    bool m_user_rank_in_project_count_isSet;
    bool m_user_rank_in_project_count_isValid;

    double m_user_rank_in_spending;
    bool m_user_rank_in_spending_isSet;
    bool m_user_rank_in_spending_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClientProfile)

#endif // OAIClientProfile_H
