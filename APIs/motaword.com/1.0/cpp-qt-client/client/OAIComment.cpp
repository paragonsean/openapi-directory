/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_commented_at_isSet = false;
    m_commented_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_commented_at_isValid = ::OpenAPI::fromJsonValue(m_commented_at, json[QString("commented_at")]);
    m_commented_at_isSet = !json[QString("commented_at")].isNull() && m_commented_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_commented_at_isSet) {
        obj.insert(QString("commented_at"), ::OpenAPI::toJsonValue(m_commented_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

QString OAIComment::getComment() const {
    return m_comment;
}
void OAIComment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIComment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIComment::is_comment_Valid() const{
    return m_comment_isValid;
}

qint64 OAIComment::getCommentedAt() const {
    return m_commented_at;
}
void OAIComment::setCommentedAt(const qint64 &commented_at) {
    m_commented_at = commented_at;
    m_commented_at_isSet = true;
}

bool OAIComment::is_commented_at_Set() const{
    return m_commented_at_isSet;
}

bool OAIComment::is_commented_at_Valid() const{
    return m_commented_at_isValid;
}

qint64 OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

OAICommentLinks OAIComment::getLinks() const {
    return m_links;
}
void OAIComment::setLinks(const OAICommentLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIComment::is_links_Set() const{
    return m_links_isSet;
}

bool OAIComment::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commented_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && true;
}

} // namespace OpenAPI
