/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStats::OAIStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStats::OAIStats() {
    this->initializeModel();
}

OAIStats::~OAIStats() {}

void OAIStats::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStats::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStats::asJsonObject() const {
    QJsonObject obj;
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_vendor.isSet()) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

OAIClientStats OAIStats::getClient() const {
    return m_client;
}
void OAIStats::setClient(const OAIClientStats &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIStats::is_client_Set() const{
    return m_client_isSet;
}

bool OAIStats::is_client_Valid() const{
    return m_client_isValid;
}

OAIVendorStats OAIStats::getVendor() const {
    return m_vendor;
}
void OAIStats::setVendor(const OAIVendorStats &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIStats::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIStats::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
