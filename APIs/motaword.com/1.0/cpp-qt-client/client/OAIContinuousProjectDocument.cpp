/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectDocument::OAIContinuousProjectDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectDocument::OAIContinuousProjectDocument() {
    this->initializeModel();
}

OAIContinuousProjectDocument::~OAIContinuousProjectDocument() {}

void OAIContinuousProjectDocument::initializeModel() {

    m_billed_word_count_isSet = false;
    m_billed_word_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_edit_enabled_isSet = false;
    m_post_edit_enabled_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIContinuousProjectDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectDocument::fromJsonObject(QJsonObject json) {

    m_billed_word_count_isValid = ::OpenAPI::fromJsonValue(m_billed_word_count, json[QString("billed_word_count")]);
    m_billed_word_count_isSet = !json[QString("billed_word_count")].isNull() && m_billed_word_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_edit_enabled_isValid = ::OpenAPI::fromJsonValue(m_post_edit_enabled, json[QString("post_edit_enabled")]);
    m_post_edit_enabled_isSet = !json[QString("post_edit_enabled")].isNull() && m_post_edit_enabled_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages")]);
    m_target_languages_isSet = !json[QString("target_languages")].isNull() && m_target_languages_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIContinuousProjectDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_word_count_isSet) {
        obj.insert(QString("billed_word_count"), ::OpenAPI::toJsonValue(m_billed_word_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_edit_enabled_isSet) {
        obj.insert(QString("post_edit_enabled"), ::OpenAPI::toJsonValue(m_post_edit_enabled));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

qint64 OAIContinuousProjectDocument::getBilledWordCount() const {
    return m_billed_word_count;
}
void OAIContinuousProjectDocument::setBilledWordCount(const qint64 &billed_word_count) {
    m_billed_word_count = billed_word_count;
    m_billed_word_count_isSet = true;
}

bool OAIContinuousProjectDocument::is_billed_word_count_Set() const{
    return m_billed_word_count_isSet;
}

bool OAIContinuousProjectDocument::is_billed_word_count_Valid() const{
    return m_billed_word_count_isValid;
}

QString OAIContinuousProjectDocument::getId() const {
    return m_id;
}
void OAIContinuousProjectDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContinuousProjectDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContinuousProjectDocument::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentLinks OAIContinuousProjectDocument::getLinks() const {
    return m_links;
}
void OAIContinuousProjectDocument::setLinks(const OAIDocumentLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIContinuousProjectDocument::is_links_Set() const{
    return m_links_isSet;
}

bool OAIContinuousProjectDocument::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIContinuousProjectDocument::getName() const {
    return m_name;
}
void OAIContinuousProjectDocument::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContinuousProjectDocument::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContinuousProjectDocument::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIContinuousProjectDocument::isPostEditEnabled() const {
    return m_post_edit_enabled;
}
void OAIContinuousProjectDocument::setPostEditEnabled(const bool &post_edit_enabled) {
    m_post_edit_enabled = post_edit_enabled;
    m_post_edit_enabled_isSet = true;
}

bool OAIContinuousProjectDocument::is_post_edit_enabled_Set() const{
    return m_post_edit_enabled_isSet;
}

bool OAIContinuousProjectDocument::is_post_edit_enabled_Valid() const{
    return m_post_edit_enabled_isValid;
}

QString OAIContinuousProjectDocument::getProjectId() const {
    return m_project_id;
}
void OAIContinuousProjectDocument::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIContinuousProjectDocument::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIContinuousProjectDocument::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIContinuousProjectDocument::getSourceLanguage() const {
    return m_source_language;
}
void OAIContinuousProjectDocument::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIContinuousProjectDocument::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIContinuousProjectDocument::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QList<QString> OAIContinuousProjectDocument::getTargetLanguages() const {
    return m_target_languages;
}
void OAIContinuousProjectDocument::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIContinuousProjectDocument::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIContinuousProjectDocument::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

qint64 OAIContinuousProjectDocument::getWordCount() const {
    return m_word_count;
}
void OAIContinuousProjectDocument::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIContinuousProjectDocument::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIContinuousProjectDocument::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIContinuousProjectDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_edit_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
