/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewProject::OAINewProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewProject::OAINewProject() {
    this->initializeModel();
}

OAINewProject::~OAINewProject() {}

void OAINewProject::initializeModel() {

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_coupon_code_isSet = false;
    m_coupon_code_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_glossaries_isSet = false;
    m_glossaries_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_styleguides_isSet = false;
    m_styleguides_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;
}

void OAINewProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewProject::fromJsonObject(QJsonObject json) {

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_coupon_code_isValid = ::OpenAPI::fromJsonValue(m_coupon_code, json[QString("coupon_code")]);
    m_coupon_code_isSet = !json[QString("coupon_code")].isNull() && m_coupon_code_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents[]")]);
    m_documents_isSet = !json[QString("documents[]")].isNull() && m_documents_isValid;

    m_glossaries_isValid = ::OpenAPI::fromJsonValue(m_glossaries, json[QString("glossaries[]")]);
    m_glossaries_isSet = !json[QString("glossaries[]")].isNull() && m_glossaries_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_styleguides_isValid = ::OpenAPI::fromJsonValue(m_styleguides, json[QString("styleguides[]")]);
    m_styleguides_isSet = !json[QString("styleguides[]")].isNull() && m_styleguides_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages[]")]);
    m_target_languages_isSet = !json[QString("target_languages[]")].isNull() && m_target_languages_isValid;
}

QString OAINewProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewProject::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_coupon_code_isSet) {
        obj.insert(QString("coupon_code"), ::OpenAPI::toJsonValue(m_coupon_code));
    }
    if (m_custom.size() > 0) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_documents.isSet()) {
        obj.insert(QString("documents[]"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_glossaries.isSet()) {
        obj.insert(QString("glossaries[]"), ::OpenAPI::toJsonValue(m_glossaries));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_styleguides.isSet()) {
        obj.insert(QString("styleguides[]"), ::OpenAPI::toJsonValue(m_styleguides));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages[]"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    return obj;
}

QString OAINewProject::getCallbackUrl() const {
    return m_callback_url;
}
void OAINewProject::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAINewProject::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAINewProject::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAINewProject::getCouponCode() const {
    return m_coupon_code;
}
void OAINewProject::setCouponCode(const QString &coupon_code) {
    m_coupon_code = coupon_code;
    m_coupon_code_isSet = true;
}

bool OAINewProject::is_coupon_code_Set() const{
    return m_coupon_code_isSet;
}

bool OAINewProject::is_coupon_code_Valid() const{
    return m_coupon_code_isValid;
}

QList<QString> OAINewProject::getCustom() const {
    return m_custom;
}
void OAINewProject::setCustom(const QList<QString> &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAINewProject::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAINewProject::is_custom_Valid() const{
    return m_custom_isValid;
}

OAIHttpFileElement OAINewProject::getDocuments() const {
    return m_documents;
}
void OAINewProject::setDocuments(const OAIHttpFileElement &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAINewProject::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAINewProject::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIHttpFileElement OAINewProject::getGlossaries() const {
    return m_glossaries;
}
void OAINewProject::setGlossaries(const OAIHttpFileElement &glossaries) {
    m_glossaries = glossaries;
    m_glossaries_isSet = true;
}

bool OAINewProject::is_glossaries_Set() const{
    return m_glossaries_isSet;
}

bool OAINewProject::is_glossaries_Valid() const{
    return m_glossaries_isValid;
}

QString OAINewProject::getSourceLanguage() const {
    return m_source_language;
}
void OAINewProject::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAINewProject::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAINewProject::is_source_language_Valid() const{
    return m_source_language_isValid;
}

OAIHttpFileElement OAINewProject::getStyleguides() const {
    return m_styleguides;
}
void OAINewProject::setStyleguides(const OAIHttpFileElement &styleguides) {
    m_styleguides = styleguides;
    m_styleguides_isSet = true;
}

bool OAINewProject::is_styleguides_Set() const{
    return m_styleguides_isSet;
}

bool OAINewProject::is_styleguides_Valid() const{
    return m_styleguides_isValid;
}

QList<QString> OAINewProject::getTargetLanguages() const {
    return m_target_languages;
}
void OAINewProject::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAINewProject::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAINewProject::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

bool OAINewProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glossaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_styleguides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
