/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManualFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManualFile::OAIManualFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManualFile::OAIManualFile() {
    this->initializeModel();
}

OAIManualFile::~OAIManualFile() {}

void OAIManualFile::initializeModel() {

    m_drive_file_id_isSet = false;
    m_drive_file_id_isValid = false;

    m_is_proofread_isSet = false;
    m_is_proofread_isValid = false;

    m_is_translated_isSet = false;
    m_is_translated_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_proofreading_file_id_isSet = false;
    m_proofreading_file_id_isValid = false;

    m_translation_file_id_isSet = false;
    m_translation_file_id_isValid = false;
}

void OAIManualFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManualFile::fromJsonObject(QJsonObject json) {

    m_drive_file_id_isValid = ::OpenAPI::fromJsonValue(m_drive_file_id, json[QString("driveFileId")]);
    m_drive_file_id_isSet = !json[QString("driveFileId")].isNull() && m_drive_file_id_isValid;

    m_is_proofread_isValid = ::OpenAPI::fromJsonValue(m_is_proofread, json[QString("isProofread")]);
    m_is_proofread_isSet = !json[QString("isProofread")].isNull() && m_is_proofread_isValid;

    m_is_translated_isValid = ::OpenAPI::fromJsonValue(m_is_translated, json[QString("isTranslated")]);
    m_is_translated_isSet = !json[QString("isTranslated")].isNull() && m_is_translated_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_proofreading_file_id_isValid = ::OpenAPI::fromJsonValue(m_proofreading_file_id, json[QString("proofreadingFileId")]);
    m_proofreading_file_id_isSet = !json[QString("proofreadingFileId")].isNull() && m_proofreading_file_id_isValid;

    m_translation_file_id_isValid = ::OpenAPI::fromJsonValue(m_translation_file_id, json[QString("translationFileId")]);
    m_translation_file_id_isSet = !json[QString("translationFileId")].isNull() && m_translation_file_id_isValid;
}

QString OAIManualFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManualFile::asJsonObject() const {
    QJsonObject obj;
    if (m_drive_file_id_isSet) {
        obj.insert(QString("driveFileId"), ::OpenAPI::toJsonValue(m_drive_file_id));
    }
    if (m_is_proofread_isSet) {
        obj.insert(QString("isProofread"), ::OpenAPI::toJsonValue(m_is_proofread));
    }
    if (m_is_translated_isSet) {
        obj.insert(QString("isTranslated"), ::OpenAPI::toJsonValue(m_is_translated));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_proofreading_file_id_isSet) {
        obj.insert(QString("proofreadingFileId"), ::OpenAPI::toJsonValue(m_proofreading_file_id));
    }
    if (m_translation_file_id_isSet) {
        obj.insert(QString("translationFileId"), ::OpenAPI::toJsonValue(m_translation_file_id));
    }
    return obj;
}

qint64 OAIManualFile::getDriveFileId() const {
    return m_drive_file_id;
}
void OAIManualFile::setDriveFileId(const qint64 &drive_file_id) {
    m_drive_file_id = drive_file_id;
    m_drive_file_id_isSet = true;
}

bool OAIManualFile::is_drive_file_id_Set() const{
    return m_drive_file_id_isSet;
}

bool OAIManualFile::is_drive_file_id_Valid() const{
    return m_drive_file_id_isValid;
}

bool OAIManualFile::isIsProofread() const {
    return m_is_proofread;
}
void OAIManualFile::setIsProofread(const bool &is_proofread) {
    m_is_proofread = is_proofread;
    m_is_proofread_isSet = true;
}

bool OAIManualFile::is_is_proofread_Set() const{
    return m_is_proofread_isSet;
}

bool OAIManualFile::is_is_proofread_Valid() const{
    return m_is_proofread_isValid;
}

bool OAIManualFile::isIsTranslated() const {
    return m_is_translated;
}
void OAIManualFile::setIsTranslated(const bool &is_translated) {
    m_is_translated = is_translated;
    m_is_translated_isSet = true;
}

bool OAIManualFile::is_is_translated_Set() const{
    return m_is_translated_isSet;
}

bool OAIManualFile::is_is_translated_Valid() const{
    return m_is_translated_isValid;
}

QString OAIManualFile::getLanguage() const {
    return m_language;
}
void OAIManualFile::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIManualFile::is_language_Set() const{
    return m_language_isSet;
}

bool OAIManualFile::is_language_Valid() const{
    return m_language_isValid;
}

qint64 OAIManualFile::getProofreadingFileId() const {
    return m_proofreading_file_id;
}
void OAIManualFile::setProofreadingFileId(const qint64 &proofreading_file_id) {
    m_proofreading_file_id = proofreading_file_id;
    m_proofreading_file_id_isSet = true;
}

bool OAIManualFile::is_proofreading_file_id_Set() const{
    return m_proofreading_file_id_isSet;
}

bool OAIManualFile::is_proofreading_file_id_Valid() const{
    return m_proofreading_file_id_isValid;
}

qint64 OAIManualFile::getTranslationFileId() const {
    return m_translation_file_id;
}
void OAIManualFile::setTranslationFileId(const qint64 &translation_file_id) {
    m_translation_file_id = translation_file_id;
    m_translation_file_id_isSet = true;
}

bool OAIManualFile::is_translation_file_id_Set() const{
    return m_translation_file_id_isSet;
}

bool OAIManualFile::is_translation_file_id_Valid() const{
    return m_translation_file_id_isValid;
}

bool OAIManualFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proofread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_translated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proofreading_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManualFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
