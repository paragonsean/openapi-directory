/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgress::OAIProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgress::OAIProgress() {
    this->initializeModel();
}

OAIProgress::~OAIProgress() {}

void OAIProgress::initializeModel() {

    m_proofreading_isSet = false;
    m_proofreading_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_translation_isSet = false;
    m_translation_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_project_status_isSet = false;
    m_project_status_isValid = false;
}

void OAIProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgress::fromJsonObject(QJsonObject json) {

    m_proofreading_isValid = ::OpenAPI::fromJsonValue(m_proofreading, json[QString("proofreading")]);
    m_proofreading_isSet = !json[QString("proofreading")].isNull() && m_proofreading_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_translation_isValid = ::OpenAPI::fromJsonValue(m_translation, json[QString("translation")]);
    m_translation_isSet = !json[QString("translation")].isNull() && m_translation_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_project_status_isValid = ::OpenAPI::fromJsonValue(m_project_status, json[QString("project_status")]);
    m_project_status_isSet = !json[QString("project_status")].isNull() && m_project_status_isValid;
}

QString OAIProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_proofreading_isSet) {
        obj.insert(QString("proofreading"), ::OpenAPI::toJsonValue(m_proofreading));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_translation_isSet) {
        obj.insert(QString("translation"), ::OpenAPI::toJsonValue(m_translation));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_project_status.isSet()) {
        obj.insert(QString("project_status"), ::OpenAPI::toJsonValue(m_project_status));
    }
    return obj;
}

float OAIProgress::getProofreading() const {
    return m_proofreading;
}
void OAIProgress::setProofreading(const float &proofreading) {
    m_proofreading = proofreading;
    m_proofreading_isSet = true;
}

bool OAIProgress::is_proofreading_Set() const{
    return m_proofreading_isSet;
}

bool OAIProgress::is_proofreading_Valid() const{
    return m_proofreading_isValid;
}

float OAIProgress::getTotal() const {
    return m_total;
}
void OAIProgress::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIProgress::is_total_Set() const{
    return m_total_isSet;
}

bool OAIProgress::is_total_Valid() const{
    return m_total_isValid;
}

float OAIProgress::getTranslation() const {
    return m_translation;
}
void OAIProgress::setTranslation(const float &translation) {
    m_translation = translation;
    m_translation_isSet = true;
}

bool OAIProgress::is_translation_Set() const{
    return m_translation_isSet;
}

bool OAIProgress::is_translation_Valid() const{
    return m_translation_isValid;
}

qint64 OAIProgress::getWordCount() const {
    return m_word_count;
}
void OAIProgress::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIProgress::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIProgress::is_word_count_Valid() const{
    return m_word_count_isValid;
}

QMap<QString, OAIProgressSub> OAIProgress::getLanguages() const {
    return m_languages;
}
void OAIProgress::setLanguages(const QMap<QString, OAIProgressSub> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIProgress::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIProgress::is_languages_Valid() const{
    return m_languages_isValid;
}

OAIProgressLink OAIProgress::getLinks() const {
    return m_links;
}
void OAIProgress::setLinks(const OAIProgressLink &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProgress::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProgress::is_links_Valid() const{
    return m_links_isValid;
}

OAIProjectStatus OAIProgress::getProjectStatus() const {
    return m_project_status;
}
void OAIProgress::setProjectStatus(const OAIProjectStatus &project_status) {
    m_project_status = project_status;
    m_project_status_isSet = true;
}

bool OAIProgress::is_project_status_Set() const{
    return m_project_status_isSet;
}

bool OAIProgress::is_project_status_Valid() const{
    return m_project_status_isValid;
}

bool OAIProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_proofreading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
