/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActivityApi_H
#define OAI_OAIActivityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity.h"
#include "OAIActivityList.h"
#include "OAIComment.h"
#include "OAICommentList.h"
#include "OAIError.h"
#include "OAINewSalesActivity.h"
#include "OAIOperationStatus.h"
#include "OAISalesActivities.h"
#include "OAISalesActivityType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActivityApi : public QObject {
    Q_OBJECT

public:
    OAIActivityApi(const int timeOut = 0);
    ~OAIActivityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    */
    virtual void getActivities(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  activity_id qint64 [required]
    */
    virtual void getActivity(const qint64 &project_id, const qint64 &activity_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  activity_id qint64 [required]
    */
    virtual void getActivityComments(const qint64 &project_id, const qint64 &activity_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    */
    virtual void getComments(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  exclude_owner QString [optional]
    * @param[in]  type OAISalesActivityType [optional]
    */
    virtual void getSalesActivities(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &exclude_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISalesActivityType> &type = ::OpenAPI::OptionalParam<OAISalesActivityType>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_new_sales_activity OAINewSalesActivity [optional]
    */
    virtual void insertSalesActivity(const qint64 &id, const ::OpenAPI::OptionalParam<OAINewSalesActivity> &oai_new_sales_activity = ::OpenAPI::OptionalParam<OAINewSalesActivity>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  activity_id qint64 [required]
    * @param[in]  oai_comment OAIComment [optional]
    */
    virtual void submitComment(const qint64 &project_id, const qint64 &activity_id, const ::OpenAPI::OptionalParam<OAIComment> &oai_comment = ::OpenAPI::OptionalParam<OAIComment>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getActivitiesCallback(OAIHttpRequestWorker *worker);
    void getActivityCallback(OAIHttpRequestWorker *worker);
    void getActivityCommentsCallback(OAIHttpRequestWorker *worker);
    void getCommentsCallback(OAIHttpRequestWorker *worker);
    void getSalesActivitiesCallback(OAIHttpRequestWorker *worker);
    void insertSalesActivityCallback(OAIHttpRequestWorker *worker);
    void submitCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getActivitiesSignal(OAIActivityList summary);
    void getActivitySignal(OAIActivity summary);
    void getActivityCommentsSignal(OAICommentList summary);
    void getCommentsSignal(OAICommentList summary);
    void getSalesActivitiesSignal(OAISalesActivities summary);
    void insertSalesActivitySignal(OAIOperationStatus summary);
    void submitCommentSignal(OAIComment summary);


    void getActivitiesSignalFull(OAIHttpRequestWorker *worker, OAIActivityList summary);
    void getActivitySignalFull(OAIHttpRequestWorker *worker, OAIActivity summary);
    void getActivityCommentsSignalFull(OAIHttpRequestWorker *worker, OAICommentList summary);
    void getCommentsSignalFull(OAIHttpRequestWorker *worker, OAICommentList summary);
    void getSalesActivitiesSignalFull(OAIHttpRequestWorker *worker, OAISalesActivities summary);
    void insertSalesActivitySignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void submitCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);

    Q_DECL_DEPRECATED_X("Use getActivitiesSignalError() instead")
    void getActivitiesSignalE(OAIActivityList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitiesSignalError(OAIActivityList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivitySignalError() instead")
    void getActivitySignalE(OAIActivity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitySignalError(OAIActivity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivityCommentsSignalError() instead")
    void getActivityCommentsSignalE(OAICommentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivityCommentsSignalError(OAICommentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalError() instead")
    void getCommentsSignalE(OAICommentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalError(OAICommentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesActivitiesSignalError() instead")
    void getSalesActivitiesSignalE(OAISalesActivities summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesActivitiesSignalError(OAISalesActivities summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSalesActivitySignalError() instead")
    void insertSalesActivitySignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void insertSalesActivitySignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitCommentSignalError() instead")
    void submitCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getActivitiesSignalErrorFull() instead")
    void getActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivitySignalErrorFull() instead")
    void getActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivityCommentsSignalErrorFull() instead")
    void getActivityCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivityCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalErrorFull() instead")
    void getCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSalesActivitiesSignalErrorFull() instead")
    void getSalesActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSalesActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSalesActivitySignalErrorFull() instead")
    void insertSalesActivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertSalesActivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitCommentSignalErrorFull() instead")
    void submitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
