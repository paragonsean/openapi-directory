/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentLinks::OAICommentLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentLinks::OAICommentLinks() {
    this->initializeModel();
}

OAICommentLinks::~OAICommentLinks() {}

void OAICommentLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAICommentLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAICommentLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_activity.isSet()) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

OAIHref OAICommentLinks::getSelf() const {
    return m_self;
}
void OAICommentLinks::setSelf(const OAIHref &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAICommentLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAICommentLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAIHref OAICommentLinks::getActivity() const {
    return m_activity;
}
void OAICommentLinks::setActivity(const OAIHref &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAICommentLinks::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAICommentLinks::is_activity_Valid() const{
    return m_activity_isValid;
}

OAIHref OAICommentLinks::getProject() const {
    return m_project;
}
void OAICommentLinks::setProject(const OAIHref &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICommentLinks::is_project_Set() const{
    return m_project_isSet;
}

bool OAICommentLinks::is_project_Valid() const{
    return m_project_isValid;
}

bool OAICommentLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
