/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject.h
 *
 * 
 */

#ifndef OAIProject_H
#define OAIProject_H

#include <QJsonObject>

#include "OAIError.h"
#include "OAIObject.h"
#include "OAIProjectLinks.h"
#include "OAIProjectSource.h"
#include "OAIProjectStatus.h"
#include "OAIProject_price.h"
#include "OAIProject_word_count_analysis.h"
#include "OAIUser.h"
#include "OAIVendorProjectPair.h"
#include "OAIVendorProjectRole.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;
class OAIError;
class OAIProjectLinks;
class OAIVendorProjectPair;
class OAIProject_price;
class OAIProject_word_count_analysis;

class OAIProject : public OAIObject {
public:
    OAIProject();
    OAIProject(QString json);
    ~OAIProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, float> getAverageScores() const;
    void setAverageScores(const QMap<QString, float> &average_scores);
    bool is_average_scores_Set() const;
    bool is_average_scores_Valid() const;

    QString getBudgetCode() const;
    void setBudgetCode(const QString &budget_code);
    bool is_budget_code_Set() const;
    bool is_budget_code_Valid() const;

    QString getCallbackUrl() const;
    void setCallbackUrl(const QString &callback_url);
    bool is_callback_url_Set() const;
    bool is_callback_url_Valid() const;

    bool isCanPamManage() const;
    void setCanPamManage(const bool &can_pam_manage);
    bool is_can_pam_manage_Set() const;
    bool is_can_pam_manage_Valid() const;

    OAIUser getClient() const;
    void setClient(const OAIUser &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    qint64 getCmId() const;
    void setCmId(const qint64 &cm_id);
    bool is_cm_id_Set() const;
    bool is_cm_id_Valid() const;

    QDateTime getCompletedOn() const;
    void setCompletedOn(const QDateTime &completed_on);
    bool is_completed_on_Set() const;
    bool is_completed_on_Valid() const;

    QString getContinuousProjectType() const;
    void setContinuousProjectType(const QString &continuous_project_type);
    bool is_continuous_project_type_Set() const;
    bool is_continuous_project_type_Valid() const;

    qint64 getCreatedAt() const;
    void setCreatedAt(const qint64 &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIObject getCustom() const;
    void setCustom(const OAIObject &custom);
    bool is_custom_Set() const;
    bool is_custom_Valid() const;

    qint64 getDeliveryAt() const;
    void setDeliveryAt(const qint64 &delivery_at);
    bool is_delivery_at_Set() const;
    bool is_delivery_at_Valid() const;

    QList<OAIError> getErrors() const;
    void setErrors(const QList<OAIError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsApiProject() const;
    void setIsApiProject(const bool &is_api_project);
    bool is_is_api_project_Set() const;
    bool is_is_api_project_Valid() const;

    bool isIsCertified() const;
    void setIsCertified(const bool &is_certified);
    bool is_is_certified_Set() const;
    bool is_is_certified_Valid() const;

    bool isIsContinuous() const;
    void setIsContinuous(const bool &is_continuous);
    bool is_is_continuous_Set() const;
    bool is_is_continuous_Valid() const;

    bool isIsManual() const;
    void setIsManual(const bool &is_manual);
    bool is_is_manual_Set() const;
    bool is_is_manual_Valid() const;

    OAIProjectLinks getLinks() const;
    void setLinks(const OAIProjectLinks &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QList<OAIVendorProjectPair> getPairs() const;
    void setPairs(const QList<OAIVendorProjectPair> &pairs);
    bool is_pairs_Set() const;
    bool is_pairs_Valid() const;

    QList<qint64> getPivotedProjects() const;
    void setPivotedProjects(const QList<qint64> &pivoted_projects);
    bool is_pivoted_projects_Set() const;
    bool is_pivoted_projects_Valid() const;

    OAIProject_price getPrice() const;
    void setPrice(const OAIProject_price &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    OAIProject_price getPriceWithoutDiscount() const;
    void setPriceWithoutDiscount(const OAIProject_price &price_without_discount);
    bool is_price_without_discount_Set() const;
    bool is_price_without_discount_Valid() const;

    OAIVendorProjectRole getRole() const;
    void setRole(const OAIVendorProjectRole &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    bool isShouldSendClientSurvey() const;
    void setShouldSendClientSurvey(const bool &should_send_client_survey);
    bool is_should_send_client_survey_Set() const;
    bool is_should_send_client_survey_Valid() const;

    OAIProjectSource getSource() const;
    void setSource(const OAIProjectSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getSourceLanguage() const;
    void setSourceLanguage(const QString &source_language);
    bool is_source_language_Set() const;
    bool is_source_language_Valid() const;

    OAIProjectStatus getStatus() const;
    void setStatus(const OAIProjectStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<QString> getSubjects() const;
    void setSubjects(const QList<QString> &subjects);
    bool is_subjects_Set() const;
    bool is_subjects_Valid() const;

    QList<QString> getTargetLanguages() const;
    void setTargetLanguages(const QList<QString> &target_languages);
    bool is_target_languages_Set() const;
    bool is_target_languages_Valid() const;

    QString getTmsName() const;
    void setTmsName(const QString &tms_name);
    bool is_tms_name_Set() const;
    bool is_tms_name_Valid() const;

    qint64 getValidUntil() const;
    void setValidUntil(const qint64 &valid_until);
    bool is_valid_until_Set() const;
    bool is_valid_until_Valid() const;

    qint64 getVendorWordCount() const;
    void setVendorWordCount(const qint64 &vendor_word_count);
    bool is_vendor_word_count_Set() const;
    bool is_vendor_word_count_Valid() const;

    qint64 getWordCount() const;
    void setWordCount(const qint64 &word_count);
    bool is_word_count_Set() const;
    bool is_word_count_Valid() const;

    OAIProject_word_count_analysis getWordCountAnalysis() const;
    void setWordCountAnalysis(const OAIProject_word_count_analysis &word_count_analysis);
    bool is_word_count_analysis_Set() const;
    bool is_word_count_analysis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, float> m_average_scores;
    bool m_average_scores_isSet;
    bool m_average_scores_isValid;

    QString m_budget_code;
    bool m_budget_code_isSet;
    bool m_budget_code_isValid;

    QString m_callback_url;
    bool m_callback_url_isSet;
    bool m_callback_url_isValid;

    bool m_can_pam_manage;
    bool m_can_pam_manage_isSet;
    bool m_can_pam_manage_isValid;

    OAIUser m_client;
    bool m_client_isSet;
    bool m_client_isValid;

    qint64 m_cm_id;
    bool m_cm_id_isSet;
    bool m_cm_id_isValid;

    QDateTime m_completed_on;
    bool m_completed_on_isSet;
    bool m_completed_on_isValid;

    QString m_continuous_project_type;
    bool m_continuous_project_type_isSet;
    bool m_continuous_project_type_isValid;

    qint64 m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIObject m_custom;
    bool m_custom_isSet;
    bool m_custom_isValid;

    qint64 m_delivery_at;
    bool m_delivery_at_isSet;
    bool m_delivery_at_isValid;

    QList<OAIError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_api_project;
    bool m_is_api_project_isSet;
    bool m_is_api_project_isValid;

    bool m_is_certified;
    bool m_is_certified_isSet;
    bool m_is_certified_isValid;

    bool m_is_continuous;
    bool m_is_continuous_isSet;
    bool m_is_continuous_isValid;

    bool m_is_manual;
    bool m_is_manual_isSet;
    bool m_is_manual_isValid;

    OAIProjectLinks m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QList<OAIVendorProjectPair> m_pairs;
    bool m_pairs_isSet;
    bool m_pairs_isValid;

    QList<qint64> m_pivoted_projects;
    bool m_pivoted_projects_isSet;
    bool m_pivoted_projects_isValid;

    OAIProject_price m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    OAIProject_price m_price_without_discount;
    bool m_price_without_discount_isSet;
    bool m_price_without_discount_isValid;

    OAIVendorProjectRole m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    bool m_should_send_client_survey;
    bool m_should_send_client_survey_isSet;
    bool m_should_send_client_survey_isValid;

    OAIProjectSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_source_language;
    bool m_source_language_isSet;
    bool m_source_language_isValid;

    OAIProjectStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<QString> m_subjects;
    bool m_subjects_isSet;
    bool m_subjects_isValid;

    QList<QString> m_target_languages;
    bool m_target_languages_isSet;
    bool m_target_languages_isValid;

    QString m_tms_name;
    bool m_tms_name_isSet;
    bool m_tms_name_isValid;

    qint64 m_valid_until;
    bool m_valid_until_isSet;
    bool m_valid_until_isValid;

    qint64 m_vendor_word_count;
    bool m_vendor_word_count_isSet;
    bool m_vendor_word_count_isValid;

    qint64 m_word_count;
    bool m_word_count_isSet;
    bool m_word_count_isValid;

    OAIProject_word_count_analysis m_word_count_analysis;
    bool m_word_count_analysis_isSet;
    bool m_word_count_analysis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject)

#endif // OAIProject_H
