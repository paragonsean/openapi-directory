/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageStringStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageStringStat::OAILanguageStringStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageStringStat::OAILanguageStringStat() {
    this->initializeModel();
}

OAILanguageStringStat::~OAILanguageStringStat() {}

void OAILanguageStringStat::initializeModel() {

    m_project_string_count_isSet = false;
    m_project_string_count_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_tm_string_count_isSet = false;
    m_tm_string_count_isValid = false;
}

void OAILanguageStringStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageStringStat::fromJsonObject(QJsonObject json) {

    m_project_string_count_isValid = ::OpenAPI::fromJsonValue(m_project_string_count, json[QString("project_string_count")]);
    m_project_string_count_isSet = !json[QString("project_string_count")].isNull() && m_project_string_count_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_tm_string_count_isValid = ::OpenAPI::fromJsonValue(m_tm_string_count, json[QString("tm_string_count")]);
    m_tm_string_count_isSet = !json[QString("tm_string_count")].isNull() && m_tm_string_count_isValid;
}

QString OAILanguageStringStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageStringStat::asJsonObject() const {
    QJsonObject obj;
    if (m_project_string_count_isSet) {
        obj.insert(QString("project_string_count"), ::OpenAPI::toJsonValue(m_project_string_count));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_tm_string_count_isSet) {
        obj.insert(QString("tm_string_count"), ::OpenAPI::toJsonValue(m_tm_string_count));
    }
    return obj;
}

qint64 OAILanguageStringStat::getProjectStringCount() const {
    return m_project_string_count;
}
void OAILanguageStringStat::setProjectStringCount(const qint64 &project_string_count) {
    m_project_string_count = project_string_count;
    m_project_string_count_isSet = true;
}

bool OAILanguageStringStat::is_project_string_count_Set() const{
    return m_project_string_count_isSet;
}

bool OAILanguageStringStat::is_project_string_count_Valid() const{
    return m_project_string_count_isValid;
}

QString OAILanguageStringStat::getSourceLanguage() const {
    return m_source_language;
}
void OAILanguageStringStat::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAILanguageStringStat::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAILanguageStringStat::is_source_language_Valid() const{
    return m_source_language_isValid;
}

qint64 OAILanguageStringStat::getTmStringCount() const {
    return m_tm_string_count;
}
void OAILanguageStringStat::setTmStringCount(const qint64 &tm_string_count) {
    m_tm_string_count = tm_string_count;
    m_tm_string_count_isSet = true;
}

bool OAILanguageStringStat::is_tm_string_count_Set() const{
    return m_tm_string_count_isSet;
}

bool OAILanguageStringStat::is_tm_string_count_Valid() const{
    return m_tm_string_count_isValid;
}

bool OAILanguageStringStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_string_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tm_string_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageStringStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
