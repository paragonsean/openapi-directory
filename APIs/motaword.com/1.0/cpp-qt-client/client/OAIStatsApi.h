/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatsApi_H
#define OAI_OAIStatsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClientProjectStats.h"
#include "OAIClientStringStats.h"
#include "OAICommissionStats.h"
#include "OAIError.h"
#include "OAIPopularLanguagePairs.h"
#include "OAIReportFilter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatsApi : public QObject {
    Q_OBJECT

public:
    OAIStatsApi(const int timeOut = 0);
    ~OAIStatsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getCommissionStats();

    /**
    * @param[in]  oai_report_filter OAIReportFilter [optional]
    */
    virtual void getCommissionStatsByFilter(const ::OpenAPI::OptionalParam<OAIReportFilter> &oai_report_filter = ::OpenAPI::OptionalParam<OAIReportFilter>());


    virtual void getPopularPairs();


    virtual void getProjectStats();


    virtual void getStringStats();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCommissionStatsCallback(OAIHttpRequestWorker *worker);
    void getCommissionStatsByFilterCallback(OAIHttpRequestWorker *worker);
    void getPopularPairsCallback(OAIHttpRequestWorker *worker);
    void getProjectStatsCallback(OAIHttpRequestWorker *worker);
    void getStringStatsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCommissionStatsSignal(OAICommissionStats summary);
    void getCommissionStatsByFilterSignal(OAICommissionStats summary);
    void getPopularPairsSignal(OAIPopularLanguagePairs summary);
    void getProjectStatsSignal(OAIClientProjectStats summary);
    void getStringStatsSignal(OAIClientStringStats summary);


    void getCommissionStatsSignalFull(OAIHttpRequestWorker *worker, OAICommissionStats summary);
    void getCommissionStatsByFilterSignalFull(OAIHttpRequestWorker *worker, OAICommissionStats summary);
    void getPopularPairsSignalFull(OAIHttpRequestWorker *worker, OAIPopularLanguagePairs summary);
    void getProjectStatsSignalFull(OAIHttpRequestWorker *worker, OAIClientProjectStats summary);
    void getStringStatsSignalFull(OAIHttpRequestWorker *worker, OAIClientStringStats summary);

    Q_DECL_DEPRECATED_X("Use getCommissionStatsSignalError() instead")
    void getCommissionStatsSignalE(OAICommissionStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommissionStatsSignalError(OAICommissionStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommissionStatsByFilterSignalError() instead")
    void getCommissionStatsByFilterSignalE(OAICommissionStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommissionStatsByFilterSignalError(OAICommissionStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopularPairsSignalError() instead")
    void getPopularPairsSignalE(OAIPopularLanguagePairs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularPairsSignalError(OAIPopularLanguagePairs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatsSignalError() instead")
    void getProjectStatsSignalE(OAIClientProjectStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatsSignalError(OAIClientProjectStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStringStatsSignalError() instead")
    void getStringStatsSignalE(OAIClientStringStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStringStatsSignalError(OAIClientStringStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCommissionStatsSignalErrorFull() instead")
    void getCommissionStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommissionStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommissionStatsByFilterSignalErrorFull() instead")
    void getCommissionStatsByFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommissionStatsByFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopularPairsSignalErrorFull() instead")
    void getPopularPairsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularPairsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatsSignalErrorFull() instead")
    void getProjectStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStringStatsSignalErrorFull() instead")
    void getStringStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStringStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
