/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientStringWithTranslations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientStringWithTranslations::OAIClientStringWithTranslations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientStringWithTranslations::OAIClientStringWithTranslations() {
    this->initializeModel();
}

OAIClientStringWithTranslations::~OAIClientStringWithTranslations() {}

void OAIClientStringWithTranslations::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_changed_isSet = false;
    m_last_changed_isValid = false;

    m_translations_isSet = false;
    m_translations_isValid = false;
}

void OAIClientStringWithTranslations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientStringWithTranslations::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_changed_isValid = ::OpenAPI::fromJsonValue(m_last_changed, json[QString("last_changed")]);
    m_last_changed_isSet = !json[QString("last_changed")].isNull() && m_last_changed_isValid;

    m_translations_isValid = ::OpenAPI::fromJsonValue(m_translations, json[QString("translations")]);
    m_translations_isSet = !json[QString("translations")].isNull() && m_translations_isValid;
}

QString OAIClientStringWithTranslations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientStringWithTranslations::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_changed_isSet) {
        obj.insert(QString("last_changed"), ::OpenAPI::toJsonValue(m_last_changed));
    }
    if (m_translations.size() > 0) {
        obj.insert(QString("translations"), ::OpenAPI::toJsonValue(m_translations));
    }
    return obj;
}

QString OAIClientStringWithTranslations::getContent() const {
    return m_content;
}
void OAIClientStringWithTranslations::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIClientStringWithTranslations::is_content_Set() const{
    return m_content_isSet;
}

bool OAIClientStringWithTranslations::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIClientStringWithTranslations::getLanguage() const {
    return m_language;
}
void OAIClientStringWithTranslations::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIClientStringWithTranslations::is_language_Set() const{
    return m_language_isSet;
}

bool OAIClientStringWithTranslations::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAIClientStringWithTranslations::getLastChanged() const {
    return m_last_changed;
}
void OAIClientStringWithTranslations::setLastChanged(const QDateTime &last_changed) {
    m_last_changed = last_changed;
    m_last_changed_isSet = true;
}

bool OAIClientStringWithTranslations::is_last_changed_Set() const{
    return m_last_changed_isSet;
}

bool OAIClientStringWithTranslations::is_last_changed_Valid() const{
    return m_last_changed_isValid;
}

QList<OAIClientStringTranslation> OAIClientStringWithTranslations::getTranslations() const {
    return m_translations;
}
void OAIClientStringWithTranslations::setTranslations(const QList<OAIClientStringTranslation> &translations) {
    m_translations = translations;
    m_translations_isSet = true;
}

bool OAIClientStringWithTranslations::is_translations_Set() const{
    return m_translations_isSet;
}

bool OAIClientStringWithTranslations::is_translations_Valid() const{
    return m_translations_isValid;
}

bool OAIClientStringWithTranslations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientStringWithTranslations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
