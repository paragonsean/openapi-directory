/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguagePairsReport_report_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguagePairsReport_report_inner::OAILanguagePairsReport_report_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguagePairsReport_report_inner::OAILanguagePairsReport_report_inner() {
    this->initializeModel();
}

OAILanguagePairsReport_report_inner::~OAILanguagePairsReport_report_inner() {}

void OAILanguagePairsReport_report_inner::initializeModel() {

    m_language_pair_isSet = false;
    m_language_pair_isValid = false;

    m_spending_isSet = false;
    m_spending_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAILanguagePairsReport_report_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguagePairsReport_report_inner::fromJsonObject(QJsonObject json) {

    m_language_pair_isValid = ::OpenAPI::fromJsonValue(m_language_pair, json[QString("language_pair")]);
    m_language_pair_isSet = !json[QString("language_pair")].isNull() && m_language_pair_isValid;

    m_spending_isValid = ::OpenAPI::fromJsonValue(m_spending, json[QString("spending")]);
    m_spending_isSet = !json[QString("spending")].isNull() && m_spending_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAILanguagePairsReport_report_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguagePairsReport_report_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_language_pair.isSet()) {
        obj.insert(QString("language_pair"), ::OpenAPI::toJsonValue(m_language_pair));
    }
    if (m_spending_isSet) {
        obj.insert(QString("spending"), ::OpenAPI::toJsonValue(m_spending));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

OAILanguagePairsReport_report_inner_language_pair OAILanguagePairsReport_report_inner::getLanguagePair() const {
    return m_language_pair;
}
void OAILanguagePairsReport_report_inner::setLanguagePair(const OAILanguagePairsReport_report_inner_language_pair &language_pair) {
    m_language_pair = language_pair;
    m_language_pair_isSet = true;
}

bool OAILanguagePairsReport_report_inner::is_language_pair_Set() const{
    return m_language_pair_isSet;
}

bool OAILanguagePairsReport_report_inner::is_language_pair_Valid() const{
    return m_language_pair_isValid;
}

float OAILanguagePairsReport_report_inner::getSpending() const {
    return m_spending;
}
void OAILanguagePairsReport_report_inner::setSpending(const float &spending) {
    m_spending = spending;
    m_spending_isSet = true;
}

bool OAILanguagePairsReport_report_inner::is_spending_Set() const{
    return m_spending_isSet;
}

bool OAILanguagePairsReport_report_inner::is_spending_Valid() const{
    return m_spending_isValid;
}

qint64 OAILanguagePairsReport_report_inner::getWordCount() const {
    return m_word_count;
}
void OAILanguagePairsReport_report_inner::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAILanguagePairsReport_report_inner::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAILanguagePairsReport_report_inner::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAILanguagePairsReport_report_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_pair.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguagePairsReport_report_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
