/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISurveyAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISurveyAnswer::OAISurveyAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISurveyAnswer::OAISurveyAnswer() {
    this->initializeModel();
}

OAISurveyAnswer::~OAISurveyAnswer() {}

void OAISurveyAnswer::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_question_answer_id_isSet = false;
    m_question_answer_id_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISurveyAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISurveyAnswer::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_question_answer_id_isValid = ::OpenAPI::fromJsonValue(m_question_answer_id, json[QString("question_answer_id")]);
    m_question_answer_id_isSet = !json[QString("question_answer_id")].isNull() && m_question_answer_id_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAISurveyAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISurveyAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_question_answer_id_isSet) {
        obj.insert(QString("question_answer_id"), ::OpenAPI::toJsonValue(m_question_answer_id));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISurveyAnswer::getAnswer() const {
    return m_answer;
}
void OAISurveyAnswer::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAISurveyAnswer::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAISurveyAnswer::is_answer_Valid() const{
    return m_answer_isValid;
}

qint64 OAISurveyAnswer::getProjectId() const {
    return m_project_id;
}
void OAISurveyAnswer::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISurveyAnswer::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISurveyAnswer::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint64 OAISurveyAnswer::getQuestionAnswerId() const {
    return m_question_answer_id;
}
void OAISurveyAnswer::setQuestionAnswerId(const qint64 &question_answer_id) {
    m_question_answer_id = question_answer_id;
    m_question_answer_id_isSet = true;
}

bool OAISurveyAnswer::is_question_answer_id_Set() const{
    return m_question_answer_id_isSet;
}

bool OAISurveyAnswer::is_question_answer_id_Valid() const{
    return m_question_answer_id_isValid;
}

qint64 OAISurveyAnswer::getQuestionId() const {
    return m_question_id;
}
void OAISurveyAnswer::setQuestionId(const qint64 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAISurveyAnswer::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAISurveyAnswer::is_question_id_Valid() const{
    return m_question_id_isValid;
}

qint64 OAISurveyAnswer::getUserId() const {
    return m_user_id;
}
void OAISurveyAnswer::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISurveyAnswer::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISurveyAnswer::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISurveyAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_answer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISurveyAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
