/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectDocumentList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectDocumentList::OAIContinuousProjectDocumentList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectDocumentList::OAIContinuousProjectDocumentList() {
    this->initializeModel();
}

OAIContinuousProjectDocumentList::~OAIContinuousProjectDocumentList() {}

void OAIContinuousProjectDocumentList::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIContinuousProjectDocumentList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectDocumentList::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIContinuousProjectDocumentList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectDocumentList::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QList<OAIContinuousProjectDocument> OAIContinuousProjectDocumentList::getDocuments() const {
    return m_documents;
}
void OAIContinuousProjectDocumentList::setDocuments(const QList<OAIContinuousProjectDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIContinuousProjectDocumentList::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIContinuousProjectDocumentList::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIPagingMeta OAIContinuousProjectDocumentList::getMeta() const {
    return m_meta;
}
void OAIContinuousProjectDocumentList::setMeta(const OAIPagingMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIContinuousProjectDocumentList::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIContinuousProjectDocumentList::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIContinuousProjectDocumentList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectDocumentList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
