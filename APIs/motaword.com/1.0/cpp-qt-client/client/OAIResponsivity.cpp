/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponsivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponsivity::OAIResponsivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponsivity::OAIResponsivity() {
    this->initializeModel();
}

OAIResponsivity::~OAIResponsivity() {}

void OAIResponsivity::initializeModel() {

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_not_entered_isSet = false;
    m_not_entered_isValid = false;

    m_only_entered_isSet = false;
    m_only_entered_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_worked_isSet = false;
    m_worked_isValid = false;
}

void OAIResponsivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponsivity::fromJsonObject(QJsonObject json) {

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_not_entered_isValid = ::OpenAPI::fromJsonValue(m_not_entered, json[QString("notEntered")]);
    m_not_entered_isSet = !json[QString("notEntered")].isNull() && m_not_entered_isValid;

    m_only_entered_isValid = ::OpenAPI::fromJsonValue(m_only_entered, json[QString("onlyEntered")]);
    m_only_entered_isSet = !json[QString("onlyEntered")].isNull() && m_only_entered_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;

    m_worked_isValid = ::OpenAPI::fromJsonValue(m_worked, json[QString("worked")]);
    m_worked_isSet = !json[QString("worked")].isNull() && m_worked_isValid;
}

QString OAIResponsivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponsivity::asJsonObject() const {
    QJsonObject obj;
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_not_entered_isSet) {
        obj.insert(QString("notEntered"), ::OpenAPI::toJsonValue(m_not_entered));
    }
    if (m_only_entered_isSet) {
        obj.insert(QString("onlyEntered"), ::OpenAPI::toJsonValue(m_only_entered));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_worked_isSet) {
        obj.insert(QString("worked"), ::OpenAPI::toJsonValue(m_worked));
    }
    return obj;
}

qint64 OAIResponsivity::getInvited() const {
    return m_invited;
}
void OAIResponsivity::setInvited(const qint64 &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIResponsivity::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIResponsivity::is_invited_Valid() const{
    return m_invited_isValid;
}

QString OAIResponsivity::getMonth() const {
    return m_month;
}
void OAIResponsivity::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIResponsivity::is_month_Set() const{
    return m_month_isSet;
}

bool OAIResponsivity::is_month_Valid() const{
    return m_month_isValid;
}

qint64 OAIResponsivity::getNotEntered() const {
    return m_not_entered;
}
void OAIResponsivity::setNotEntered(const qint64 &not_entered) {
    m_not_entered = not_entered;
    m_not_entered_isSet = true;
}

bool OAIResponsivity::is_not_entered_Set() const{
    return m_not_entered_isSet;
}

bool OAIResponsivity::is_not_entered_Valid() const{
    return m_not_entered_isValid;
}

qint64 OAIResponsivity::getOnlyEntered() const {
    return m_only_entered;
}
void OAIResponsivity::setOnlyEntered(const qint64 &only_entered) {
    m_only_entered = only_entered;
    m_only_entered_isSet = true;
}

bool OAIResponsivity::is_only_entered_Set() const{
    return m_only_entered_isSet;
}

bool OAIResponsivity::is_only_entered_Valid() const{
    return m_only_entered_isValid;
}

float OAIResponsivity::getScore() const {
    return m_score;
}
void OAIResponsivity::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIResponsivity::is_score_Set() const{
    return m_score_isSet;
}

bool OAIResponsivity::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIResponsivity::getWeek() const {
    return m_week;
}
void OAIResponsivity::setWeek(const QString &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIResponsivity::is_week_Set() const{
    return m_week_isSet;
}

bool OAIResponsivity::is_week_Valid() const{
    return m_week_isValid;
}

qint64 OAIResponsivity::getWorked() const {
    return m_worked;
}
void OAIResponsivity::setWorked(const qint64 &worked) {
    m_worked = worked;
    m_worked_isSet = true;
}

bool OAIResponsivity::is_worked_Set() const{
    return m_worked_isSet;
}

bool OAIResponsivity::is_worked_Valid() const{
    return m_worked_isValid;
}

bool OAIResponsivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponsivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
