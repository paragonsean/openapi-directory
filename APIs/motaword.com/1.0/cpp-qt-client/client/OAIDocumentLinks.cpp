/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentLinks::OAIDocumentLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentLinks::OAIDocumentLinks() {
    this->initializeModel();
}

OAIDocumentLinks::~OAIDocumentLinks() {}

void OAIDocumentLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_admins_isSet = false;
    m_admins_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_editors_isSet = false;
    m_editors_isValid = false;

    m_preview_box_isSet = false;
    m_preview_box_isValid = false;

    m_preview_pdf_isSet = false;
    m_preview_pdf_isValid = false;

    m_preview_pdf_viewer_isSet = false;
    m_preview_pdf_viewer_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_strings_isSet = false;
    m_strings_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIDocumentLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_admins_isValid = ::OpenAPI::fromJsonValue(m_admins, json[QString("admins")]);
    m_admins_isSet = !json[QString("admins")].isNull() && m_admins_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_editors_isValid = ::OpenAPI::fromJsonValue(m_editors, json[QString("editors")]);
    m_editors_isSet = !json[QString("editors")].isNull() && m_editors_isValid;

    m_preview_box_isValid = ::OpenAPI::fromJsonValue(m_preview_box, json[QString("preview-box")]);
    m_preview_box_isSet = !json[QString("preview-box")].isNull() && m_preview_box_isValid;

    m_preview_pdf_isValid = ::OpenAPI::fromJsonValue(m_preview_pdf, json[QString("preview-pdf")]);
    m_preview_pdf_isSet = !json[QString("preview-pdf")].isNull() && m_preview_pdf_isValid;

    m_preview_pdf_viewer_isValid = ::OpenAPI::fromJsonValue(m_preview_pdf_viewer, json[QString("preview-pdf-viewer")]);
    m_preview_pdf_viewer_isSet = !json[QString("preview-pdf-viewer")].isNull() && m_preview_pdf_viewer_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_strings_isValid = ::OpenAPI::fromJsonValue(m_strings, json[QString("strings")]);
    m_strings_isSet = !json[QString("strings")].isNull() && m_strings_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIDocumentLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_admins.size() > 0) {
        obj.insert(QString("admins"), ::OpenAPI::toJsonValue(m_admins));
    }
    if (m_download.isSet()) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_editors.size() > 0) {
        obj.insert(QString("editors"), ::OpenAPI::toJsonValue(m_editors));
    }
    if (m_preview_box.isSet()) {
        obj.insert(QString("preview-box"), ::OpenAPI::toJsonValue(m_preview_box));
    }
    if (m_preview_pdf.isSet()) {
        obj.insert(QString("preview-pdf"), ::OpenAPI::toJsonValue(m_preview_pdf));
    }
    if (m_preview_pdf_viewer.isSet()) {
        obj.insert(QString("preview-pdf-viewer"), ::OpenAPI::toJsonValue(m_preview_pdf_viewer));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_strings.isSet()) {
        obj.insert(QString("strings"), ::OpenAPI::toJsonValue(m_strings));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

OAIHref OAIDocumentLinks::getSelf() const {
    return m_self;
}
void OAIDocumentLinks::setSelf(const OAIHref &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIDocumentLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIDocumentLinks::is_self_Valid() const{
    return m_self_isValid;
}

QMap<QString, OAIHref> OAIDocumentLinks::getAdmins() const {
    return m_admins;
}
void OAIDocumentLinks::setAdmins(const QMap<QString, OAIHref> &admins) {
    m_admins = admins;
    m_admins_isSet = true;
}

bool OAIDocumentLinks::is_admins_Set() const{
    return m_admins_isSet;
}

bool OAIDocumentLinks::is_admins_Valid() const{
    return m_admins_isValid;
}

OAIHref OAIDocumentLinks::getDownload() const {
    return m_download;
}
void OAIDocumentLinks::setDownload(const OAIHref &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIDocumentLinks::is_download_Set() const{
    return m_download_isSet;
}

bool OAIDocumentLinks::is_download_Valid() const{
    return m_download_isValid;
}

QMap<QString, OAIHref> OAIDocumentLinks::getEditors() const {
    return m_editors;
}
void OAIDocumentLinks::setEditors(const QMap<QString, OAIHref> &editors) {
    m_editors = editors;
    m_editors_isSet = true;
}

bool OAIDocumentLinks::is_editors_Set() const{
    return m_editors_isSet;
}

bool OAIDocumentLinks::is_editors_Valid() const{
    return m_editors_isValid;
}

OAIHref OAIDocumentLinks::getPreviewBox() const {
    return m_preview_box;
}
void OAIDocumentLinks::setPreviewBox(const OAIHref &preview_box) {
    m_preview_box = preview_box;
    m_preview_box_isSet = true;
}

bool OAIDocumentLinks::is_preview_box_Set() const{
    return m_preview_box_isSet;
}

bool OAIDocumentLinks::is_preview_box_Valid() const{
    return m_preview_box_isValid;
}

OAIHref OAIDocumentLinks::getPreviewPdf() const {
    return m_preview_pdf;
}
void OAIDocumentLinks::setPreviewPdf(const OAIHref &preview_pdf) {
    m_preview_pdf = preview_pdf;
    m_preview_pdf_isSet = true;
}

bool OAIDocumentLinks::is_preview_pdf_Set() const{
    return m_preview_pdf_isSet;
}

bool OAIDocumentLinks::is_preview_pdf_Valid() const{
    return m_preview_pdf_isValid;
}

OAIHref OAIDocumentLinks::getPreviewPdfViewer() const {
    return m_preview_pdf_viewer;
}
void OAIDocumentLinks::setPreviewPdfViewer(const OAIHref &preview_pdf_viewer) {
    m_preview_pdf_viewer = preview_pdf_viewer;
    m_preview_pdf_viewer_isSet = true;
}

bool OAIDocumentLinks::is_preview_pdf_viewer_Set() const{
    return m_preview_pdf_viewer_isSet;
}

bool OAIDocumentLinks::is_preview_pdf_viewer_Valid() const{
    return m_preview_pdf_viewer_isValid;
}

OAIHref OAIDocumentLinks::getProgress() const {
    return m_progress;
}
void OAIDocumentLinks::setProgress(const OAIHref &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIDocumentLinks::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIDocumentLinks::is_progress_Valid() const{
    return m_progress_isValid;
}

OAIHref OAIDocumentLinks::getProject() const {
    return m_project;
}
void OAIDocumentLinks::setProject(const OAIHref &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDocumentLinks::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDocumentLinks::is_project_Valid() const{
    return m_project_isValid;
}

OAIHref OAIDocumentLinks::getStrings() const {
    return m_strings;
}
void OAIDocumentLinks::setStrings(const OAIHref &strings) {
    m_strings = strings;
    m_strings_isSet = true;
}

bool OAIDocumentLinks::is_strings_Set() const{
    return m_strings_isSet;
}

bool OAIDocumentLinks::is_strings_Valid() const{
    return m_strings_isValid;
}

OAIHref OAIDocumentLinks::getThumbnail() const {
    return m_thumbnail;
}
void OAIDocumentLinks::setThumbnail(const OAIHref &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIDocumentLinks::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIDocumentLinks::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIDocumentLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_pdf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_pdf_viewer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
