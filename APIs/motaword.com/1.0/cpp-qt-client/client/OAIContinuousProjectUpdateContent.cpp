/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectUpdateContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectUpdateContent::OAIContinuousProjectUpdateContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectUpdateContent::OAIContinuousProjectUpdateContent() {
    this->initializeModel();
}

OAIContinuousProjectUpdateContent::~OAIContinuousProjectUpdateContent() {}

void OAIContinuousProjectUpdateContent::initializeModel() {

    m_analytics_enabled_isSet = false;
    m_analytics_enabled_isValid = false;

    m_auto_start_postedit_isSet = false;
    m_auto_start_postedit_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_mt_enabled_isSet = false;
    m_mt_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postedit_enabled_isSet = false;
    m_postedit_enabled_isValid = false;
}

void OAIContinuousProjectUpdateContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectUpdateContent::fromJsonObject(QJsonObject json) {

    m_analytics_enabled_isValid = ::OpenAPI::fromJsonValue(m_analytics_enabled, json[QString("analytics_enabled")]);
    m_analytics_enabled_isSet = !json[QString("analytics_enabled")].isNull() && m_analytics_enabled_isValid;

    m_auto_start_postedit_isValid = ::OpenAPI::fromJsonValue(m_auto_start_postedit, json[QString("auto_start_postedit")]);
    m_auto_start_postedit_isSet = !json[QString("auto_start_postedit")].isNull() && m_auto_start_postedit_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("is_enabled")]);
    m_is_enabled_isSet = !json[QString("is_enabled")].isNull() && m_is_enabled_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_mt_enabled_isValid = ::OpenAPI::fromJsonValue(m_mt_enabled, json[QString("mt_enabled")]);
    m_mt_enabled_isSet = !json[QString("mt_enabled")].isNull() && m_mt_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postedit_enabled_isValid = ::OpenAPI::fromJsonValue(m_postedit_enabled, json[QString("postedit_enabled")]);
    m_postedit_enabled_isSet = !json[QString("postedit_enabled")].isNull() && m_postedit_enabled_isValid;
}

QString OAIContinuousProjectUpdateContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectUpdateContent::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics_enabled_isSet) {
        obj.insert(QString("analytics_enabled"), ::OpenAPI::toJsonValue(m_analytics_enabled));
    }
    if (m_auto_start_postedit_isSet) {
        obj.insert(QString("auto_start_postedit"), ::OpenAPI::toJsonValue(m_auto_start_postedit));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("is_enabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_mt_enabled_isSet) {
        obj.insert(QString("mt_enabled"), ::OpenAPI::toJsonValue(m_mt_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postedit_enabled_isSet) {
        obj.insert(QString("postedit_enabled"), ::OpenAPI::toJsonValue(m_postedit_enabled));
    }
    return obj;
}

bool OAIContinuousProjectUpdateContent::isAnalyticsEnabled() const {
    return m_analytics_enabled;
}
void OAIContinuousProjectUpdateContent::setAnalyticsEnabled(const bool &analytics_enabled) {
    m_analytics_enabled = analytics_enabled;
    m_analytics_enabled_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_analytics_enabled_Set() const{
    return m_analytics_enabled_isSet;
}

bool OAIContinuousProjectUpdateContent::is_analytics_enabled_Valid() const{
    return m_analytics_enabled_isValid;
}

bool OAIContinuousProjectUpdateContent::isAutoStartPostedit() const {
    return m_auto_start_postedit;
}
void OAIContinuousProjectUpdateContent::setAutoStartPostedit(const bool &auto_start_postedit) {
    m_auto_start_postedit = auto_start_postedit;
    m_auto_start_postedit_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_auto_start_postedit_Set() const{
    return m_auto_start_postedit_isSet;
}

bool OAIContinuousProjectUpdateContent::is_auto_start_postedit_Valid() const{
    return m_auto_start_postedit_isValid;
}

bool OAIContinuousProjectUpdateContent::isIsEnabled() const {
    return m_is_enabled;
}
void OAIContinuousProjectUpdateContent::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIContinuousProjectUpdateContent::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<OAIContinuousProjectLanguage> OAIContinuousProjectUpdateContent::getLanguages() const {
    return m_languages;
}
void OAIContinuousProjectUpdateContent::setLanguages(const QList<OAIContinuousProjectLanguage> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIContinuousProjectUpdateContent::is_languages_Valid() const{
    return m_languages_isValid;
}

bool OAIContinuousProjectUpdateContent::isMtEnabled() const {
    return m_mt_enabled;
}
void OAIContinuousProjectUpdateContent::setMtEnabled(const bool &mt_enabled) {
    m_mt_enabled = mt_enabled;
    m_mt_enabled_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_mt_enabled_Set() const{
    return m_mt_enabled_isSet;
}

bool OAIContinuousProjectUpdateContent::is_mt_enabled_Valid() const{
    return m_mt_enabled_isValid;
}

QString OAIContinuousProjectUpdateContent::getName() const {
    return m_name;
}
void OAIContinuousProjectUpdateContent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContinuousProjectUpdateContent::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIContinuousProjectUpdateContent::isPosteditEnabled() const {
    return m_postedit_enabled;
}
void OAIContinuousProjectUpdateContent::setPosteditEnabled(const bool &postedit_enabled) {
    m_postedit_enabled = postedit_enabled;
    m_postedit_enabled_isSet = true;
}

bool OAIContinuousProjectUpdateContent::is_postedit_enabled_Set() const{
    return m_postedit_enabled_isSet;
}

bool OAIContinuousProjectUpdateContent::is_postedit_enabled_Valid() const{
    return m_postedit_enabled_isValid;
}

bool OAIContinuousProjectUpdateContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_start_postedit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mt_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postedit_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectUpdateContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
