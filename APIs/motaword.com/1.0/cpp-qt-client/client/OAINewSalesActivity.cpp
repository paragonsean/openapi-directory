/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewSalesActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewSalesActivity::OAINewSalesActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewSalesActivity::OAINewSalesActivity() {
    this->initializeModel();
}

OAINewSalesActivity::~OAINewSalesActivity() {}

void OAINewSalesActivity::initializeModel() {

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINewSalesActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewSalesActivity::fromJsonObject(QJsonObject json) {

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINewSalesActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewSalesActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINewSalesActivity::getSubject() const {
    return m_subject;
}
void OAINewSalesActivity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAINewSalesActivity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAINewSalesActivity::is_subject_Valid() const{
    return m_subject_isValid;
}

qint64 OAINewSalesActivity::getTimestamp() const {
    return m_timestamp;
}
void OAINewSalesActivity::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINewSalesActivity::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINewSalesActivity::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAINewSalesActivity::getType() const {
    return m_type;
}
void OAINewSalesActivity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINewSalesActivity::is_type_Set() const{
    return m_type_isSet;
}

bool OAINewSalesActivity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINewSalesActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewSalesActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
