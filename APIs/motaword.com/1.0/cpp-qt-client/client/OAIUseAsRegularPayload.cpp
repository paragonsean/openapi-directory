/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUseAsRegularPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUseAsRegularPayload::OAIUseAsRegularPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUseAsRegularPayload::OAIUseAsRegularPayload() {
    this->initializeModel();
}

OAIUseAsRegularPayload::~OAIUseAsRegularPayload() {}

void OAIUseAsRegularPayload::initializeModel() {

    m_allow_original_file_preview_isSet = false;
    m_allow_original_file_preview_isValid = false;

    m_allow_review_in_manual_editor_isSet = false;
    m_allow_review_in_manual_editor_isValid = false;

    m_disable_invitations_isSet = false;
    m_disable_invitations_isValid = false;

    m_from_manual_translation_file_id_isSet = false;
    m_from_manual_translation_file_id_isValid = false;

    m_hide_numbers_isSet = false;
    m_hide_numbers_isValid = false;

    m_recreate_isSet = false;
    m_recreate_isValid = false;
}

void OAIUseAsRegularPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUseAsRegularPayload::fromJsonObject(QJsonObject json) {

    m_allow_original_file_preview_isValid = ::OpenAPI::fromJsonValue(m_allow_original_file_preview, json[QString("allowOriginalFilePreview")]);
    m_allow_original_file_preview_isSet = !json[QString("allowOriginalFilePreview")].isNull() && m_allow_original_file_preview_isValid;

    m_allow_review_in_manual_editor_isValid = ::OpenAPI::fromJsonValue(m_allow_review_in_manual_editor, json[QString("allowReviewInManualEditor")]);
    m_allow_review_in_manual_editor_isSet = !json[QString("allowReviewInManualEditor")].isNull() && m_allow_review_in_manual_editor_isValid;

    m_disable_invitations_isValid = ::OpenAPI::fromJsonValue(m_disable_invitations, json[QString("disableInvitations")]);
    m_disable_invitations_isSet = !json[QString("disableInvitations")].isNull() && m_disable_invitations_isValid;

    m_from_manual_translation_file_id_isValid = ::OpenAPI::fromJsonValue(m_from_manual_translation_file_id, json[QString("fromManualTranslationFileId")]);
    m_from_manual_translation_file_id_isSet = !json[QString("fromManualTranslationFileId")].isNull() && m_from_manual_translation_file_id_isValid;

    m_hide_numbers_isValid = ::OpenAPI::fromJsonValue(m_hide_numbers, json[QString("hideNumbers")]);
    m_hide_numbers_isSet = !json[QString("hideNumbers")].isNull() && m_hide_numbers_isValid;

    m_recreate_isValid = ::OpenAPI::fromJsonValue(m_recreate, json[QString("recreate")]);
    m_recreate_isSet = !json[QString("recreate")].isNull() && m_recreate_isValid;
}

QString OAIUseAsRegularPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUseAsRegularPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_original_file_preview_isSet) {
        obj.insert(QString("allowOriginalFilePreview"), ::OpenAPI::toJsonValue(m_allow_original_file_preview));
    }
    if (m_allow_review_in_manual_editor_isSet) {
        obj.insert(QString("allowReviewInManualEditor"), ::OpenAPI::toJsonValue(m_allow_review_in_manual_editor));
    }
    if (m_disable_invitations_isSet) {
        obj.insert(QString("disableInvitations"), ::OpenAPI::toJsonValue(m_disable_invitations));
    }
    if (m_from_manual_translation_file_id_isSet) {
        obj.insert(QString("fromManualTranslationFileId"), ::OpenAPI::toJsonValue(m_from_manual_translation_file_id));
    }
    if (m_hide_numbers_isSet) {
        obj.insert(QString("hideNumbers"), ::OpenAPI::toJsonValue(m_hide_numbers));
    }
    if (m_recreate_isSet) {
        obj.insert(QString("recreate"), ::OpenAPI::toJsonValue(m_recreate));
    }
    return obj;
}

bool OAIUseAsRegularPayload::isAllowOriginalFilePreview() const {
    return m_allow_original_file_preview;
}
void OAIUseAsRegularPayload::setAllowOriginalFilePreview(const bool &allow_original_file_preview) {
    m_allow_original_file_preview = allow_original_file_preview;
    m_allow_original_file_preview_isSet = true;
}

bool OAIUseAsRegularPayload::is_allow_original_file_preview_Set() const{
    return m_allow_original_file_preview_isSet;
}

bool OAIUseAsRegularPayload::is_allow_original_file_preview_Valid() const{
    return m_allow_original_file_preview_isValid;
}

bool OAIUseAsRegularPayload::isAllowReviewInManualEditor() const {
    return m_allow_review_in_manual_editor;
}
void OAIUseAsRegularPayload::setAllowReviewInManualEditor(const bool &allow_review_in_manual_editor) {
    m_allow_review_in_manual_editor = allow_review_in_manual_editor;
    m_allow_review_in_manual_editor_isSet = true;
}

bool OAIUseAsRegularPayload::is_allow_review_in_manual_editor_Set() const{
    return m_allow_review_in_manual_editor_isSet;
}

bool OAIUseAsRegularPayload::is_allow_review_in_manual_editor_Valid() const{
    return m_allow_review_in_manual_editor_isValid;
}

bool OAIUseAsRegularPayload::isDisableInvitations() const {
    return m_disable_invitations;
}
void OAIUseAsRegularPayload::setDisableInvitations(const bool &disable_invitations) {
    m_disable_invitations = disable_invitations;
    m_disable_invitations_isSet = true;
}

bool OAIUseAsRegularPayload::is_disable_invitations_Set() const{
    return m_disable_invitations_isSet;
}

bool OAIUseAsRegularPayload::is_disable_invitations_Valid() const{
    return m_disable_invitations_isValid;
}

double OAIUseAsRegularPayload::getFromManualTranslationFileId() const {
    return m_from_manual_translation_file_id;
}
void OAIUseAsRegularPayload::setFromManualTranslationFileId(const double &from_manual_translation_file_id) {
    m_from_manual_translation_file_id = from_manual_translation_file_id;
    m_from_manual_translation_file_id_isSet = true;
}

bool OAIUseAsRegularPayload::is_from_manual_translation_file_id_Set() const{
    return m_from_manual_translation_file_id_isSet;
}

bool OAIUseAsRegularPayload::is_from_manual_translation_file_id_Valid() const{
    return m_from_manual_translation_file_id_isValid;
}

bool OAIUseAsRegularPayload::isHideNumbers() const {
    return m_hide_numbers;
}
void OAIUseAsRegularPayload::setHideNumbers(const bool &hide_numbers) {
    m_hide_numbers = hide_numbers;
    m_hide_numbers_isSet = true;
}

bool OAIUseAsRegularPayload::is_hide_numbers_Set() const{
    return m_hide_numbers_isSet;
}

bool OAIUseAsRegularPayload::is_hide_numbers_Valid() const{
    return m_hide_numbers_isValid;
}

bool OAIUseAsRegularPayload::isRecreate() const {
    return m_recreate;
}
void OAIUseAsRegularPayload::setRecreate(const bool &recreate) {
    m_recreate = recreate;
    m_recreate_isSet = true;
}

bool OAIUseAsRegularPayload::is_recreate_Set() const{
    return m_recreate_isSet;
}

bool OAIUseAsRegularPayload::is_recreate_Valid() const{
    return m_recreate_isValid;
}

bool OAIUseAsRegularPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_original_file_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_review_in_manual_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_invitations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_manual_translation_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_numbers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recreate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUseAsRegularPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
