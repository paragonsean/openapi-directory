/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQaEntry.h
 *
 * 
 */

#ifndef OAIQaEntry_H
#define OAIQaEntry_H

#include <QJsonObject>

#include "OAISimpleModel.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleModel;

class OAIQaEntry : public OAIObject {
public:
    OAIQaEntry();
    OAIQaEntry(QString json);
    ~OAIQaEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getDocId() const;
    void setDocId(const QString &doc_id);
    bool is_doc_id_Set() const;
    bool is_doc_id_Valid() const;

    QString getEditorLink() const;
    void setEditorLink(const QString &editor_link);
    bool is_editor_link_Set() const;
    bool is_editor_link_Valid() const;

    qint64 getEnd() const;
    void setEnd(const qint64 &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    bool isInSource() const;
    void setInSource(const bool &in_source);
    bool is_in_source_Set() const;
    bool is_in_source_Valid() const;

    bool isIsCurrent() const;
    void setIsCurrent(const bool &is_current);
    bool is_is_current_Set() const;
    bool is_is_current_Valid() const;

    QString getModule() const;
    void setModule(const QString &module);
    bool is_module_Set() const;
    bool is_module_Valid() const;

    OAISimpleModel getProjectId() const;
    void setProjectId(const OAISimpleModel &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QString getSeverity() const;
    void setSeverity(const QString &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    OAISimpleModel getSourceLanguage() const;
    void setSourceLanguage(const OAISimpleModel &source_language);
    bool is_source_language_Set() const;
    bool is_source_language_Valid() const;

    qint64 getStart() const;
    void setStart(const qint64 &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAISimpleModel getTargetLanguage() const;
    void setTargetLanguage(const OAISimpleModel &target_language);
    bool is_target_language_Set() const;
    bool is_target_language_Valid() const;

    QString getTranslation() const;
    void setTranslation(const QString &translation);
    bool is_translation_Set() const;
    bool is_translation_Valid() const;

    QString getUniqueKey() const;
    void setUniqueKey(const QString &unique_key);
    bool is_unique_key_Set() const;
    bool is_unique_key_Valid() const;

    OAISimpleModel getVendor() const;
    void setVendor(const OAISimpleModel &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_doc_id;
    bool m_doc_id_isSet;
    bool m_doc_id_isValid;

    QString m_editor_link;
    bool m_editor_link_isSet;
    bool m_editor_link_isValid;

    qint64 m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    bool m_in_source;
    bool m_in_source_isSet;
    bool m_in_source_isValid;

    bool m_is_current;
    bool m_is_current_isSet;
    bool m_is_current_isValid;

    QString m_module;
    bool m_module_isSet;
    bool m_module_isValid;

    OAISimpleModel m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QString m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    OAISimpleModel m_source_language;
    bool m_source_language_isSet;
    bool m_source_language_isValid;

    qint64 m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAISimpleModel m_target_language;
    bool m_target_language_isSet;
    bool m_target_language_isValid;

    QString m_translation;
    bool m_translation_isSet;
    bool m_translation_isValid;

    QString m_unique_key;
    bool m_unique_key_isSet;
    bool m_unique_key_isValid;

    OAISimpleModel m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQaEntry)

#endif // OAIQaEntry_H
