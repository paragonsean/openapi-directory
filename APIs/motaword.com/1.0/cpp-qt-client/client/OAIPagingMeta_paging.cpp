/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagingMeta_paging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagingMeta_paging::OAIPagingMeta_paging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagingMeta_paging::OAIPagingMeta_paging() {
    this->initializeModel();
}

OAIPagingMeta_paging::~OAIPagingMeta_paging() {}

void OAIPagingMeta_paging::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIPagingMeta_paging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagingMeta_paging::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIPagingMeta_paging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagingMeta_paging::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint64 OAIPagingMeta_paging::getCount() const {
    return m_count;
}
void OAIPagingMeta_paging::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPagingMeta_paging::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPagingMeta_paging::is_count_Valid() const{
    return m_count_isValid;
}

OAIPagingLinksMeta OAIPagingMeta_paging::getLinks() const {
    return m_links;
}
void OAIPagingMeta_paging::setLinks(const OAIPagingLinksMeta &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPagingMeta_paging::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPagingMeta_paging::is_links_Valid() const{
    return m_links_isValid;
}

qint64 OAIPagingMeta_paging::getPage() const {
    return m_page;
}
void OAIPagingMeta_paging::setPage(const qint64 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPagingMeta_paging::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPagingMeta_paging::is_page_Valid() const{
    return m_page_isValid;
}

qint64 OAIPagingMeta_paging::getPerPage() const {
    return m_per_page;
}
void OAIPagingMeta_paging::setPerPage(const qint64 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIPagingMeta_paging::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIPagingMeta_paging::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint64 OAIPagingMeta_paging::getTotalCount() const {
    return m_total_count;
}
void OAIPagingMeta_paging::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIPagingMeta_paging::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIPagingMeta_paging::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIPagingMeta_paging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagingMeta_paging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
