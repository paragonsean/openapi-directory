/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectLinks::OAIProjectLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectLinks::OAIProjectLinks() {
    this->initializeModel();
}

OAIProjectLinks::~OAIProjectLinks() {}

void OAIProjectLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_glossaries_isSet = false;
    m_glossaries_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_quote_pdf_isSet = false;
    m_quote_pdf_isValid = false;

    m_styleguides_isSet = false;
    m_styleguides_isValid = false;
}

void OAIProjectLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_glossaries_isValid = ::OpenAPI::fromJsonValue(m_glossaries, json[QString("glossaries")]);
    m_glossaries_isSet = !json[QString("glossaries")].isNull() && m_glossaries_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_quote_pdf_isValid = ::OpenAPI::fromJsonValue(m_quote_pdf, json[QString("quote-pdf")]);
    m_quote_pdf_isSet = !json[QString("quote-pdf")].isNull() && m_quote_pdf_isValid;

    m_styleguides_isValid = ::OpenAPI::fromJsonValue(m_styleguides, json[QString("styleguides")]);
    m_styleguides_isSet = !json[QString("styleguides")].isNull() && m_styleguides_isValid;
}

QString OAIProjectLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_documents.isSet()) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_glossaries.isSet()) {
        obj.insert(QString("glossaries"), ::OpenAPI::toJsonValue(m_glossaries));
    }
    if (m_payment.isSet()) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    if (m_quote_pdf.isSet()) {
        obj.insert(QString("quote-pdf"), ::OpenAPI::toJsonValue(m_quote_pdf));
    }
    if (m_styleguides.isSet()) {
        obj.insert(QString("styleguides"), ::OpenAPI::toJsonValue(m_styleguides));
    }
    return obj;
}

OAIHref OAIProjectLinks::getSelf() const {
    return m_self;
}
void OAIProjectLinks::setSelf(const OAIHref &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIProjectLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIProjectLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAIHref OAIProjectLinks::getDocuments() const {
    return m_documents;
}
void OAIProjectLinks::setDocuments(const OAIHref &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIProjectLinks::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIProjectLinks::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIHref OAIProjectLinks::getGlossaries() const {
    return m_glossaries;
}
void OAIProjectLinks::setGlossaries(const OAIHref &glossaries) {
    m_glossaries = glossaries;
    m_glossaries_isSet = true;
}

bool OAIProjectLinks::is_glossaries_Set() const{
    return m_glossaries_isSet;
}

bool OAIProjectLinks::is_glossaries_Valid() const{
    return m_glossaries_isValid;
}

OAIHref OAIProjectLinks::getPayment() const {
    return m_payment;
}
void OAIProjectLinks::setPayment(const OAIHref &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAIProjectLinks::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAIProjectLinks::is_payment_Valid() const{
    return m_payment_isValid;
}

OAIHref OAIProjectLinks::getQuotePdf() const {
    return m_quote_pdf;
}
void OAIProjectLinks::setQuotePdf(const OAIHref &quote_pdf) {
    m_quote_pdf = quote_pdf;
    m_quote_pdf_isSet = true;
}

bool OAIProjectLinks::is_quote_pdf_Set() const{
    return m_quote_pdf_isSet;
}

bool OAIProjectLinks::is_quote_pdf_Valid() const{
    return m_quote_pdf_isValid;
}

OAIHref OAIProjectLinks::getStyleguides() const {
    return m_styleguides;
}
void OAIProjectLinks::setStyleguides(const OAIHref &styleguides) {
    m_styleguides = styleguides;
    m_styleguides_isSet = true;
}

bool OAIProjectLinks::is_styleguides_Set() const{
    return m_styleguides_isSet;
}

bool OAIProjectLinks::is_styleguides_Valid() const{
    return m_styleguides_isValid;
}

bool OAIProjectLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glossaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_pdf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_styleguides.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
