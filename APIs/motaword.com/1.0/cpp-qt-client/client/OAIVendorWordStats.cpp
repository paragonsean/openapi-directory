/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorWordStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorWordStats::OAIVendorWordStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorWordStats::OAIVendorWordStats() {
    this->initializeModel();
}

OAIVendorWordStats::~OAIVendorWordStats() {}

void OAIVendorWordStats::initializeModel() {

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_translated_isSet = false;
    m_translated_isValid = false;
}

void OAIVendorWordStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorWordStats::fromJsonObject(QJsonObject json) {

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_translated_isValid = ::OpenAPI::fromJsonValue(m_translated, json[QString("translated")]);
    m_translated_isSet = !json[QString("translated")].isNull() && m_translated_isValid;
}

QString OAIVendorWordStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorWordStats::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_translated_isSet) {
        obj.insert(QString("translated"), ::OpenAPI::toJsonValue(m_translated));
    }
    return obj;
}

qint64 OAIVendorWordStats::getApproved() const {
    return m_approved;
}
void OAIVendorWordStats::setApproved(const qint64 &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIVendorWordStats::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIVendorWordStats::is_approved_Valid() const{
    return m_approved_isValid;
}

qint64 OAIVendorWordStats::getTranslated() const {
    return m_translated;
}
void OAIVendorWordStats::setTranslated(const qint64 &translated) {
    m_translated = translated;
    m_translated_isSet = true;
}

bool OAIVendorWordStats::is_translated_Set() const{
    return m_translated_isSet;
}

bool OAIVendorWordStats::is_translated_Valid() const{
    return m_translated_isValid;
}

bool OAIVendorWordStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorWordStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
