/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectDocumentProgressBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectDocumentProgressBody::OAIContinuousProjectDocumentProgressBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectDocumentProgressBody::OAIContinuousProjectDocumentProgressBody() {
    this->initializeModel();
}

OAIContinuousProjectDocumentProgressBody::~OAIContinuousProjectDocumentProgressBody() {}

void OAIContinuousProjectDocumentProgressBody::initializeModel() {

    m_document_name_isSet = false;
    m_document_name_isValid = false;

    m_filter_by_language_isSet = false;
    m_filter_by_language_isValid = false;
}

void OAIContinuousProjectDocumentProgressBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectDocumentProgressBody::fromJsonObject(QJsonObject json) {

    m_document_name_isValid = ::OpenAPI::fromJsonValue(m_document_name, json[QString("documentName")]);
    m_document_name_isSet = !json[QString("documentName")].isNull() && m_document_name_isValid;

    m_filter_by_language_isValid = ::OpenAPI::fromJsonValue(m_filter_by_language, json[QString("filterByLanguage")]);
    m_filter_by_language_isSet = !json[QString("filterByLanguage")].isNull() && m_filter_by_language_isValid;
}

QString OAIContinuousProjectDocumentProgressBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectDocumentProgressBody::asJsonObject() const {
    QJsonObject obj;
    if (m_document_name_isSet) {
        obj.insert(QString("documentName"), ::OpenAPI::toJsonValue(m_document_name));
    }
    if (m_filter_by_language_isSet) {
        obj.insert(QString("filterByLanguage"), ::OpenAPI::toJsonValue(m_filter_by_language));
    }
    return obj;
}

QString OAIContinuousProjectDocumentProgressBody::getDocumentName() const {
    return m_document_name;
}
void OAIContinuousProjectDocumentProgressBody::setDocumentName(const QString &document_name) {
    m_document_name = document_name;
    m_document_name_isSet = true;
}

bool OAIContinuousProjectDocumentProgressBody::is_document_name_Set() const{
    return m_document_name_isSet;
}

bool OAIContinuousProjectDocumentProgressBody::is_document_name_Valid() const{
    return m_document_name_isValid;
}

QString OAIContinuousProjectDocumentProgressBody::getFilterByLanguage() const {
    return m_filter_by_language;
}
void OAIContinuousProjectDocumentProgressBody::setFilterByLanguage(const QString &filter_by_language) {
    m_filter_by_language = filter_by_language;
    m_filter_by_language_isSet = true;
}

bool OAIContinuousProjectDocumentProgressBody::is_filter_by_language_Set() const{
    return m_filter_by_language_isSet;
}

bool OAIContinuousProjectDocumentProgressBody::is_filter_by_language_Valid() const{
    return m_filter_by_language_isValid;
}

bool OAIContinuousProjectDocumentProgressBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_by_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectDocumentProgressBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
