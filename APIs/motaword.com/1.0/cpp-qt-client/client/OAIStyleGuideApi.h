/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStyleGuideApi_H
#define OAI_OAIStyleGuideApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountStyleGuideUploadRequest.h"
#include "OAIError.h"
#include "OAIOperationStatus.h"
#include "OAIStyleGuide.h"
#include "OAIStyleGuideList.h"
#include "OAIStyleGuideUploadRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStyleGuideApi : public QObject {
    Q_OBJECT

public:
    OAIStyleGuideApi(const int timeOut = 0);
    ~OAIStyleGuideApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_style_guide_upload_request OAIStyleGuideUploadRequest [optional]
    */
    virtual void createStyleGuide(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIStyleGuideUploadRequest> &oai_style_guide_upload_request = ::OpenAPI::OptionalParam<OAIStyleGuideUploadRequest>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  style_guide_id qint64 [required]
    */
    virtual void deleteStyleGuide(const qint64 &project_id, const qint64 &style_guide_id);


    virtual void downloadGlobalStyleGuide();

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  style_guide_id qint64 [required]
    */
    virtual void downloadStyleGuide(const qint64 &project_id, const qint64 &style_guide_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  style_guide_id qint64 [required]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getStyleGuide(const qint64 &project_id, const qint64 &style_guide_id, const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getStyleGuides(const qint64 &project_id, const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_account_style_guide_upload_request OAIAccountStyleGuideUploadRequest [optional]
    */
    virtual void updateGlobalStyleGuide(const ::OpenAPI::OptionalParam<OAIAccountStyleGuideUploadRequest> &oai_account_style_guide_upload_request = ::OpenAPI::OptionalParam<OAIAccountStyleGuideUploadRequest>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  style_guide_id qint64 [required]
    * @param[in]  oai_style_guide_upload_request OAIStyleGuideUploadRequest [optional]
    */
    virtual void updateStyleGuide(const qint64 &project_id, const qint64 &style_guide_id, const ::OpenAPI::OptionalParam<OAIStyleGuideUploadRequest> &oai_style_guide_upload_request = ::OpenAPI::OptionalParam<OAIStyleGuideUploadRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createStyleGuideCallback(OAIHttpRequestWorker *worker);
    void deleteStyleGuideCallback(OAIHttpRequestWorker *worker);
    void downloadGlobalStyleGuideCallback(OAIHttpRequestWorker *worker);
    void downloadStyleGuideCallback(OAIHttpRequestWorker *worker);
    void getStyleGuideCallback(OAIHttpRequestWorker *worker);
    void getStyleGuidesCallback(OAIHttpRequestWorker *worker);
    void updateGlobalStyleGuideCallback(OAIHttpRequestWorker *worker);
    void updateStyleGuideCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createStyleGuideSignal(OAIStyleGuideList summary);
    void deleteStyleGuideSignal(OAIOperationStatus summary);
    void downloadGlobalStyleGuideSignal(QString summary);
    void downloadStyleGuideSignal(QString summary);
    void getStyleGuideSignal(OAIStyleGuide summary);
    void getStyleGuidesSignal(OAIStyleGuideList summary);
    void updateGlobalStyleGuideSignal(OAIOperationStatus summary);
    void updateStyleGuideSignal(OAIStyleGuide summary);


    void createStyleGuideSignalFull(OAIHttpRequestWorker *worker, OAIStyleGuideList summary);
    void deleteStyleGuideSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downloadGlobalStyleGuideSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void downloadStyleGuideSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getStyleGuideSignalFull(OAIHttpRequestWorker *worker, OAIStyleGuide summary);
    void getStyleGuidesSignalFull(OAIHttpRequestWorker *worker, OAIStyleGuideList summary);
    void updateGlobalStyleGuideSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void updateStyleGuideSignalFull(OAIHttpRequestWorker *worker, OAIStyleGuide summary);

    Q_DECL_DEPRECATED_X("Use createStyleGuideSignalError() instead")
    void createStyleGuideSignalE(OAIStyleGuideList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStyleGuideSignalError(OAIStyleGuideList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStyleGuideSignalError() instead")
    void deleteStyleGuideSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStyleGuideSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlobalStyleGuideSignalError() instead")
    void downloadGlobalStyleGuideSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlobalStyleGuideSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadStyleGuideSignalError() instead")
    void downloadStyleGuideSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadStyleGuideSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStyleGuideSignalError() instead")
    void getStyleGuideSignalE(OAIStyleGuide summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStyleGuideSignalError(OAIStyleGuide summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStyleGuidesSignalError() instead")
    void getStyleGuidesSignalE(OAIStyleGuideList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStyleGuidesSignalError(OAIStyleGuideList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalStyleGuideSignalError() instead")
    void updateGlobalStyleGuideSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalStyleGuideSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStyleGuideSignalError() instead")
    void updateStyleGuideSignalE(OAIStyleGuide summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStyleGuideSignalError(OAIStyleGuide summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createStyleGuideSignalErrorFull() instead")
    void createStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStyleGuideSignalErrorFull() instead")
    void deleteStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadGlobalStyleGuideSignalErrorFull() instead")
    void downloadGlobalStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadGlobalStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadStyleGuideSignalErrorFull() instead")
    void downloadStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStyleGuideSignalErrorFull() instead")
    void getStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStyleGuidesSignalErrorFull() instead")
    void getStyleGuidesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStyleGuidesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalStyleGuideSignalErrorFull() instead")
    void updateGlobalStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStyleGuideSignalErrorFull() instead")
    void updateStyleGuideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStyleGuideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
