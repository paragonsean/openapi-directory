/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommission::OAICommission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommission::OAICommission() {
    this->initializeModel();
}

OAICommission::~OAICommission() {}

void OAICommission::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICommission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommission::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICommission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommission::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIMonetary OAICommission::getAmount() const {
    return m_amount;
}
void OAICommission::setAmount(const OAIMonetary &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICommission::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICommission::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAICommission::getDate() const {
    return m_date;
}
void OAICommission::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICommission::is_date_Set() const{
    return m_date_isSet;
}

bool OAICommission::is_date_Valid() const{
    return m_date_isValid;
}

OAIProject OAICommission::getProject() const {
    return m_project;
}
void OAICommission::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICommission::is_project_Set() const{
    return m_project_isSet;
}

bool OAICommission::is_project_Valid() const{
    return m_project_isValid;
}

QString OAICommission::getStatus() const {
    return m_status;
}
void OAICommission::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICommission::is_status_Set() const{
    return m_status_isSet;
}

bool OAICommission::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICommission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
