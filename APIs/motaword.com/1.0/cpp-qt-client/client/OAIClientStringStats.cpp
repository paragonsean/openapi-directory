/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientStringStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientStringStats::OAIClientStringStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientStringStats::OAIClientStringStats() {
    this->initializeModel();
}

OAIClientStringStats::~OAIClientStringStats() {}

void OAIClientStringStats::initializeModel() {

    m_language_counts_isSet = false;
    m_language_counts_isValid = false;

    m_total_project_strings_count_isSet = false;
    m_total_project_strings_count_isValid = false;

    m_total_tm_strings_count_isSet = false;
    m_total_tm_strings_count_isValid = false;
}

void OAIClientStringStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientStringStats::fromJsonObject(QJsonObject json) {

    m_language_counts_isValid = ::OpenAPI::fromJsonValue(m_language_counts, json[QString("language_counts")]);
    m_language_counts_isSet = !json[QString("language_counts")].isNull() && m_language_counts_isValid;

    m_total_project_strings_count_isValid = ::OpenAPI::fromJsonValue(m_total_project_strings_count, json[QString("total_project_strings_count")]);
    m_total_project_strings_count_isSet = !json[QString("total_project_strings_count")].isNull() && m_total_project_strings_count_isValid;

    m_total_tm_strings_count_isValid = ::OpenAPI::fromJsonValue(m_total_tm_strings_count, json[QString("total_tm_strings_count")]);
    m_total_tm_strings_count_isSet = !json[QString("total_tm_strings_count")].isNull() && m_total_tm_strings_count_isValid;
}

QString OAIClientStringStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientStringStats::asJsonObject() const {
    QJsonObject obj;
    if (m_language_counts.size() > 0) {
        obj.insert(QString("language_counts"), ::OpenAPI::toJsonValue(m_language_counts));
    }
    if (m_total_project_strings_count_isSet) {
        obj.insert(QString("total_project_strings_count"), ::OpenAPI::toJsonValue(m_total_project_strings_count));
    }
    if (m_total_tm_strings_count_isSet) {
        obj.insert(QString("total_tm_strings_count"), ::OpenAPI::toJsonValue(m_total_tm_strings_count));
    }
    return obj;
}

QList<OAILanguageStringStat> OAIClientStringStats::getLanguageCounts() const {
    return m_language_counts;
}
void OAIClientStringStats::setLanguageCounts(const QList<OAILanguageStringStat> &language_counts) {
    m_language_counts = language_counts;
    m_language_counts_isSet = true;
}

bool OAIClientStringStats::is_language_counts_Set() const{
    return m_language_counts_isSet;
}

bool OAIClientStringStats::is_language_counts_Valid() const{
    return m_language_counts_isValid;
}

qint64 OAIClientStringStats::getTotalProjectStringsCount() const {
    return m_total_project_strings_count;
}
void OAIClientStringStats::setTotalProjectStringsCount(const qint64 &total_project_strings_count) {
    m_total_project_strings_count = total_project_strings_count;
    m_total_project_strings_count_isSet = true;
}

bool OAIClientStringStats::is_total_project_strings_count_Set() const{
    return m_total_project_strings_count_isSet;
}

bool OAIClientStringStats::is_total_project_strings_count_Valid() const{
    return m_total_project_strings_count_isValid;
}

qint64 OAIClientStringStats::getTotalTmStringsCount() const {
    return m_total_tm_strings_count;
}
void OAIClientStringStats::setTotalTmStringsCount(const qint64 &total_tm_strings_count) {
    m_total_tm_strings_count = total_tm_strings_count;
    m_total_tm_strings_count_isSet = true;
}

bool OAIClientStringStats::is_total_tm_strings_count_Set() const{
    return m_total_tm_strings_count_isSet;
}

bool OAIClientStringStats::is_total_tm_strings_count_Valid() const{
    return m_total_tm_strings_count_isValid;
}

bool OAIClientStringStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_project_strings_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tm_strings_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientStringStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
