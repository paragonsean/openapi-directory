/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationUpdateContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationUpdateContent::OAILocationUpdateContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationUpdateContent::OAILocationUpdateContent() {
    this->initializeModel();
}

OAILocationUpdateContent::~OAILocationUpdateContent() {}

void OAILocationUpdateContent::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAILocationUpdateContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationUpdateContent::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAILocationUpdateContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationUpdateContent::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

float OAILocationUpdateContent::getLat() const {
    return m_lat;
}
void OAILocationUpdateContent::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAILocationUpdateContent::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAILocationUpdateContent::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAILocationUpdateContent::getLon() const {
    return m_lon;
}
void OAILocationUpdateContent::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAILocationUpdateContent::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAILocationUpdateContent::is_lon_Valid() const{
    return m_lon_isValid;
}

qint32 OAILocationUpdateContent::getTimestamp() const {
    return m_timestamp;
}
void OAILocationUpdateContent::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILocationUpdateContent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILocationUpdateContent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAILocationUpdateContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationUpdateContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lat_isValid && m_lon_isValid && true;
}

} // namespace OpenAPI
