/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarnings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarnings::OAIEarnings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarnings::OAIEarnings() {
    this->initializeModel();
}

OAIEarnings::~OAIEarnings() {}

void OAIEarnings::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_ongoing_isSet = false;
    m_ongoing_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIEarnings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarnings::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_ongoing_isValid = ::OpenAPI::fromJsonValue(m_ongoing, json[QString("ongoing")]);
    m_ongoing_isSet = !json[QString("ongoing")].isNull() && m_ongoing_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIEarnings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarnings::asJsonObject() const {
    QJsonObject obj;
    if (m_completed.size() > 0) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_ongoing.size() > 0) {
        obj.insert(QString("ongoing"), ::OpenAPI::toJsonValue(m_ongoing));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIEarningWithTQS> OAIEarnings::getCompleted() const {
    return m_completed;
}
void OAIEarnings::setCompleted(const QList<OAIEarningWithTQS> &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIEarnings::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIEarnings::is_completed_Valid() const{
    return m_completed_isValid;
}

QList<OAIEarningWithTQS> OAIEarnings::getOngoing() const {
    return m_ongoing;
}
void OAIEarnings::setOngoing(const QList<OAIEarningWithTQS> &ongoing) {
    m_ongoing = ongoing;
    m_ongoing_isSet = true;
}

bool OAIEarnings::is_ongoing_Set() const{
    return m_ongoing_isSet;
}

bool OAIEarnings::is_ongoing_Valid() const{
    return m_ongoing_isValid;
}

float OAIEarnings::getTotal() const {
    return m_total;
}
void OAIEarnings::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIEarnings::is_total_Set() const{
    return m_total_isSet;
}

bool OAIEarnings::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIEarnings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ongoing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarnings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
