/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilterVendorRequest.h
 *
 * 
 */

#ifndef OAIFilterVendorRequest_H
#define OAIFilterVendorRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFilterVendorRequest : public OAIObject {
public:
    OAIFilterVendorRequest();
    OAIFilterVendorRequest(QString json);
    ~OAIFilterVendorRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getClients() const;
    void setClients(const QList<qint32> &clients);
    bool is_clients_Set() const;
    bool is_clients_Valid() const;

    QList<QString> getCommunicationChannel() const;
    void setCommunicationChannel(const QList<QString> &communication_channel);
    bool is_communication_channel_Set() const;
    bool is_communication_channel_Valid() const;

    QList<qint32> getCorporateIdsForAuth() const;
    void setCorporateIdsForAuth(const QList<qint32> &corporate_ids_for_auth);
    bool is_corporate_ids_for_auth_Set() const;
    bool is_corporate_ids_for_auth_Valid() const;

    QList<qint32> getCorporates() const;
    void setCorporates(const QList<qint32> &corporates);
    bool is_corporates_Set() const;
    bool is_corporates_Valid() const;

    QList<QString> getCountry() const;
    void setCountry(const QList<QString> &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QList<QString> getCurrentServices() const;
    void setCurrentServices(const QList<QString> &current_services);
    bool is_current_services_Set() const;
    bool is_current_services_Valid() const;

    qint32 getDailyProofreadingCapacity() const;
    void setDailyProofreadingCapacity(const qint32 &daily_proofreading_capacity);
    bool is_daily_proofreading_capacity_Set() const;
    bool is_daily_proofreading_capacity_Valid() const;

    qint32 getDailyTranslationCapacity() const;
    void setDailyTranslationCapacity(const qint32 &daily_translation_capacity);
    bool is_daily_translation_capacity_Set() const;
    bool is_daily_translation_capacity_Valid() const;

    QList<qint32> getDestinationLanguages() const;
    void setDestinationLanguages(const QList<qint32> &destination_languages);
    bool is_destination_languages_Set() const;
    bool is_destination_languages_Valid() const;

    QList<QString> getDtpSoftware() const;
    void setDtpSoftware(const QList<QString> &dtp_software);
    bool is_dtp_software_Set() const;
    bool is_dtp_software_Valid() const;

    QString getEmailAddress() const;
    void setEmailAddress(const QString &email_address);
    bool is_email_address_Set() const;
    bool is_email_address_Valid() const;

    QList<QString> getExperience() const;
    void setExperience(const QList<QString> &experience);
    bool is_experience_Set() const;
    bool is_experience_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QList<qint32> getId() const;
    void setId(const QList<qint32> &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsCertifiedTranslator() const;
    void setIsCertifiedTranslator(const bool &is_certified_translator);
    bool is_is_certified_translator_Set() const;
    bool is_is_certified_translator_Valid() const;

    bool isIsSwornTranslator() const;
    void setIsSwornTranslator(const bool &is_sworn_translator);
    bool is_is_sworn_translator_Set() const;
    bool is_is_sworn_translator_Valid() const;

    QList<QList<qint32>> getLanguagePairs() const;
    void setLanguagePairs(const QList<QList<qint32>> &language_pairs);
    bool is_language_pairs_Set() const;
    bool is_language_pairs_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QString getLastOnline() const;
    void setLastOnline(const QString &last_online);
    bool is_last_online_Set() const;
    bool is_last_online_Valid() const;

    QString getLastWorked() const;
    void setLastWorked(const QString &last_worked);
    bool is_last_worked_Set() const;
    bool is_last_worked_Valid() const;

    qint32 getMemoq() const;
    void setMemoq(const qint32 &memoq);
    bool is_memoq_Set() const;
    bool is_memoq_Valid() const;

    qint32 getMemsource() const;
    void setMemsource(const qint32 &memsource);
    bool is_memsource_Set() const;
    bool is_memsource_Valid() const;

    double getMinTqs() const;
    void setMinTqs(const double &min_tqs);
    bool is_min_tqs_Set() const;
    bool is_min_tqs_Valid() const;

    qint32 getOmegat() const;
    void setOmegat(const qint32 &omegat);
    bool is_omegat_Set() const;
    bool is_omegat_Valid() const;

    qint32 getProjectCount() const;
    void setProjectCount(const qint32 &project_count);
    bool is_project_count_Set() const;
    bool is_project_count_Valid() const;

    qint32 getProofreaderExperience() const;
    void setProofreaderExperience(const qint32 &proofreader_experience);
    bool is_proofreader_experience_Set() const;
    bool is_proofreader_experience_Valid() const;

    bool isProvidesCreativeWritingService() const;
    void setProvidesCreativeWritingService(const bool &provides_creative_writing_service);
    bool is_provides_creative_writing_service_Set() const;
    bool is_provides_creative_writing_service_Valid() const;

    bool isProvidesPosteditService() const;
    void setProvidesPosteditService(const bool &provides_postedit_service);
    bool is_provides_postedit_service_Set() const;
    bool is_provides_postedit_service_Valid() const;

    QList<QString> getQuoteFileSubjects() const;
    void setQuoteFileSubjects(const QList<QString> &quote_file_subjects);
    bool is_quote_file_subjects_Set() const;
    bool is_quote_file_subjects_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    qint32 getSdlTrados() const;
    void setSdlTrados(const qint32 &sdl_trados);
    bool is_sdl_trados_Set() const;
    bool is_sdl_trados_Valid() const;

    QString getSearch() const;
    void setSearch(const QString &search);
    bool is_search_Set() const;
    bool is_search_Valid() const;

    QString getSkypeId() const;
    void setSkypeId(const QString &skype_id);
    bool is_skype_id_Set() const;
    bool is_skype_id_Valid() const;

    qint32 getSmartcat() const;
    void setSmartcat(const qint32 &smartcat);
    bool is_smartcat_Set() const;
    bool is_smartcat_Valid() const;

    qint32 getSmartling() const;
    void setSmartling(const qint32 &smartling);
    bool is_smartling_Set() const;
    bool is_smartling_Valid() const;

    QList<qint32> getSourceLanguages() const;
    void setSourceLanguages(const QList<qint32> &source_languages);
    bool is_source_languages_Set() const;
    bool is_source_languages_Valid() const;

    QList<QString> getSpecialization() const;
    void setSpecialization(const QList<QString> &specialization);
    bool is_specialization_Set() const;
    bool is_specialization_Valid() const;

    QList<QString> getStatus() const;
    void setStatus(const QList<QString> &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getSubtitleEdit() const;
    void setSubtitleEdit(const qint32 &subtitle_edit);
    bool is_subtitle_edit_Set() const;
    bool is_subtitle_edit_Valid() const;

    qint32 getSubtitleWorkshop() const;
    void setSubtitleWorkshop(const qint32 &subtitle_workshop);
    bool is_subtitle_workshop_Set() const;
    bool is_subtitle_workshop_Valid() const;

    QString getTranslatorAssociation() const;
    void setTranslatorAssociation(const QString &translator_association);
    bool is_translator_association_Set() const;
    bool is_translator_association_Valid() const;

    qint32 getTranssuite2000() const;
    void setTranssuite2000(const qint32 &transsuite_2000);
    bool is_transsuite_2000_Set() const;
    bool is_transsuite_2000_Valid() const;

    QList<QString> getUserWorkingTimezone() const;
    void setUserWorkingTimezone(const QList<QString> &user_working_timezone);
    bool is_user_working_timezone_Set() const;
    bool is_user_working_timezone_Valid() const;

    QString getVendorProfileLsp() const;
    void setVendorProfileLsp(const QString &vendor_profile_lsp);
    bool is_vendor_profile_lsp_Set() const;
    bool is_vendor_profile_lsp_Valid() const;

    QList<QString> getVendorTags() const;
    void setVendorTags(const QList<QString> &vendor_tags);
    bool is_vendor_tags_Set() const;
    bool is_vendor_tags_Valid() const;

    QList<QString> getVendorType() const;
    void setVendorType(const QList<QString> &vendor_type);
    bool is_vendor_type_Set() const;
    bool is_vendor_type_Valid() const;

    QList<QString> getVendorWorkingTimezone() const;
    void setVendorWorkingTimezone(const QList<QString> &vendor_working_timezone);
    bool is_vendor_working_timezone_Set() const;
    bool is_vendor_working_timezone_Valid() const;

    qint32 getWordCount() const;
    void setWordCount(const qint32 &word_count);
    bool is_word_count_Set() const;
    bool is_word_count_Valid() const;

    qint32 getWordbee() const;
    void setWordbee(const qint32 &wordbee);
    bool is_wordbee_Set() const;
    bool is_wordbee_Valid() const;

    qint32 getWordfast() const;
    void setWordfast(const qint32 &wordfast);
    bool is_wordfast_Set() const;
    bool is_wordfast_Valid() const;

    QString getWorkType() const;
    void setWorkType(const QString &work_type);
    bool is_work_type_Set() const;
    bool is_work_type_Valid() const;

    QString getWorkWith() const;
    void setWorkWith(const QString &work_with);
    bool is_work_with_Set() const;
    bool is_work_with_Valid() const;

    QList<QString> getWorkingAs() const;
    void setWorkingAs(const QList<QString> &working_as);
    bool is_working_as_Set() const;
    bool is_working_as_Valid() const;

    qint32 getXbench() const;
    void setXbench(const qint32 &xbench);
    bool is_xbench_Set() const;
    bool is_xbench_Valid() const;

    qint32 getXtm() const;
    void setXtm(const qint32 &xtm);
    bool is_xtm_Set() const;
    bool is_xtm_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_clients;
    bool m_clients_isSet;
    bool m_clients_isValid;

    QList<QString> m_communication_channel;
    bool m_communication_channel_isSet;
    bool m_communication_channel_isValid;

    QList<qint32> m_corporate_ids_for_auth;
    bool m_corporate_ids_for_auth_isSet;
    bool m_corporate_ids_for_auth_isValid;

    QList<qint32> m_corporates;
    bool m_corporates_isSet;
    bool m_corporates_isValid;

    QList<QString> m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QList<QString> m_current_services;
    bool m_current_services_isSet;
    bool m_current_services_isValid;

    qint32 m_daily_proofreading_capacity;
    bool m_daily_proofreading_capacity_isSet;
    bool m_daily_proofreading_capacity_isValid;

    qint32 m_daily_translation_capacity;
    bool m_daily_translation_capacity_isSet;
    bool m_daily_translation_capacity_isValid;

    QList<qint32> m_destination_languages;
    bool m_destination_languages_isSet;
    bool m_destination_languages_isValid;

    QList<QString> m_dtp_software;
    bool m_dtp_software_isSet;
    bool m_dtp_software_isValid;

    QString m_email_address;
    bool m_email_address_isSet;
    bool m_email_address_isValid;

    QList<QString> m_experience;
    bool m_experience_isSet;
    bool m_experience_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QList<qint32> m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_certified_translator;
    bool m_is_certified_translator_isSet;
    bool m_is_certified_translator_isValid;

    bool m_is_sworn_translator;
    bool m_is_sworn_translator_isSet;
    bool m_is_sworn_translator_isValid;

    QList<QList<qint32>> m_language_pairs;
    bool m_language_pairs_isSet;
    bool m_language_pairs_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QString m_last_online;
    bool m_last_online_isSet;
    bool m_last_online_isValid;

    QString m_last_worked;
    bool m_last_worked_isSet;
    bool m_last_worked_isValid;

    qint32 m_memoq;
    bool m_memoq_isSet;
    bool m_memoq_isValid;

    qint32 m_memsource;
    bool m_memsource_isSet;
    bool m_memsource_isValid;

    double m_min_tqs;
    bool m_min_tqs_isSet;
    bool m_min_tqs_isValid;

    qint32 m_omegat;
    bool m_omegat_isSet;
    bool m_omegat_isValid;

    qint32 m_project_count;
    bool m_project_count_isSet;
    bool m_project_count_isValid;

    qint32 m_proofreader_experience;
    bool m_proofreader_experience_isSet;
    bool m_proofreader_experience_isValid;

    bool m_provides_creative_writing_service;
    bool m_provides_creative_writing_service_isSet;
    bool m_provides_creative_writing_service_isValid;

    bool m_provides_postedit_service;
    bool m_provides_postedit_service_isSet;
    bool m_provides_postedit_service_isValid;

    QList<QString> m_quote_file_subjects;
    bool m_quote_file_subjects_isSet;
    bool m_quote_file_subjects_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    qint32 m_sdl_trados;
    bool m_sdl_trados_isSet;
    bool m_sdl_trados_isValid;

    QString m_search;
    bool m_search_isSet;
    bool m_search_isValid;

    QString m_skype_id;
    bool m_skype_id_isSet;
    bool m_skype_id_isValid;

    qint32 m_smartcat;
    bool m_smartcat_isSet;
    bool m_smartcat_isValid;

    qint32 m_smartling;
    bool m_smartling_isSet;
    bool m_smartling_isValid;

    QList<qint32> m_source_languages;
    bool m_source_languages_isSet;
    bool m_source_languages_isValid;

    QList<QString> m_specialization;
    bool m_specialization_isSet;
    bool m_specialization_isValid;

    QList<QString> m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_subtitle_edit;
    bool m_subtitle_edit_isSet;
    bool m_subtitle_edit_isValid;

    qint32 m_subtitle_workshop;
    bool m_subtitle_workshop_isSet;
    bool m_subtitle_workshop_isValid;

    QString m_translator_association;
    bool m_translator_association_isSet;
    bool m_translator_association_isValid;

    qint32 m_transsuite_2000;
    bool m_transsuite_2000_isSet;
    bool m_transsuite_2000_isValid;

    QList<QString> m_user_working_timezone;
    bool m_user_working_timezone_isSet;
    bool m_user_working_timezone_isValid;

    QString m_vendor_profile_lsp;
    bool m_vendor_profile_lsp_isSet;
    bool m_vendor_profile_lsp_isValid;

    QList<QString> m_vendor_tags;
    bool m_vendor_tags_isSet;
    bool m_vendor_tags_isValid;

    QList<QString> m_vendor_type;
    bool m_vendor_type_isSet;
    bool m_vendor_type_isValid;

    QList<QString> m_vendor_working_timezone;
    bool m_vendor_working_timezone_isSet;
    bool m_vendor_working_timezone_isValid;

    qint32 m_word_count;
    bool m_word_count_isSet;
    bool m_word_count_isValid;

    qint32 m_wordbee;
    bool m_wordbee_isSet;
    bool m_wordbee_isValid;

    qint32 m_wordfast;
    bool m_wordfast_isSet;
    bool m_wordfast_isValid;

    QString m_work_type;
    bool m_work_type_isSet;
    bool m_work_type_isValid;

    QString m_work_with;
    bool m_work_with_isSet;
    bool m_work_with_isValid;

    QList<QString> m_working_as;
    bool m_working_as_isSet;
    bool m_working_as_isValid;

    qint32 m_xbench;
    bool m_xbench_isSet;
    bool m_xbench_isValid;

    qint32 m_xtm;
    bool m_xtm_isSet;
    bool m_xtm_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilterVendorRequest)

#endif // OAIFilterVendorRequest_H
