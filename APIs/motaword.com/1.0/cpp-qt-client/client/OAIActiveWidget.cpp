/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveWidget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveWidget::OAIActiveWidget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveWidget::OAIActiveWidget() {
    this->initializeModel();
}

OAIActiveWidget::~OAIActiveWidget() {}

void OAIActiveWidget::initializeModel() {

    m_admin_mode_isSet = false;
    m_admin_mode_isValid = false;

    m_allow_hash_in_url_isSet = false;
    m_allow_hash_in_url_isValid = false;

    m_allow_query_in_url_isSet = false;
    m_allow_query_in_url_isValid = false;

    m_auto_detect_source_language_isSet = false;
    m_auto_detect_source_language_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_debug_mode_isSet = false;
    m_debug_mode_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_follow_user_isSet = false;
    m_follow_user_isValid = false;

    m_force_cache_refresh_interval_isSet = false;
    m_force_cache_refresh_interval_isValid = false;

    m_hit_backend_for_existing_isSet = false;
    m_hit_backend_for_existing_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_mappings_isSet = false;
    m_language_mappings_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_modify_links_isSet = false;
    m_modify_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optimize_per_page_isSet = false;
    m_optimize_per_page_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_path_regex_isSet = false;
    m_path_regex_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_query_name_isSet = false;
    m_query_name_isValid = false;

    m_reboot_on_url_change_isSet = false;
    m_reboot_on_url_change_isValid = false;

    m_restricted_domains_isSet = false;
    m_restricted_domains_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_test_mode_isSet = false;
    m_test_mode_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_url_change_mode_isSet = false;
    m_url_change_mode_isValid = false;

    m_url_mode_isSet = false;
    m_url_mode_isValid = false;

    m_use_cache_isSet = false;
    m_use_cache_isValid = false;

    m_use_dummy_translations_isSet = false;
    m_use_dummy_translations_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIActiveWidget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveWidget::fromJsonObject(QJsonObject json) {

    m_admin_mode_isValid = ::OpenAPI::fromJsonValue(m_admin_mode, json[QString("admin_mode")]);
    m_admin_mode_isSet = !json[QString("admin_mode")].isNull() && m_admin_mode_isValid;

    m_allow_hash_in_url_isValid = ::OpenAPI::fromJsonValue(m_allow_hash_in_url, json[QString("allow_hash_in_url")]);
    m_allow_hash_in_url_isSet = !json[QString("allow_hash_in_url")].isNull() && m_allow_hash_in_url_isValid;

    m_allow_query_in_url_isValid = ::OpenAPI::fromJsonValue(m_allow_query_in_url, json[QString("allow_query_in_url")]);
    m_allow_query_in_url_isSet = !json[QString("allow_query_in_url")].isNull() && m_allow_query_in_url_isValid;

    m_auto_detect_source_language_isValid = ::OpenAPI::fromJsonValue(m_auto_detect_source_language, json[QString("auto_detect_source_language")]);
    m_auto_detect_source_language_isSet = !json[QString("auto_detect_source_language")].isNull() && m_auto_detect_source_language_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_debug_mode_isValid = ::OpenAPI::fromJsonValue(m_debug_mode, json[QString("debug_mode")]);
    m_debug_mode_isSet = !json[QString("debug_mode")].isNull() && m_debug_mode_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_follow_user_isValid = ::OpenAPI::fromJsonValue(m_follow_user, json[QString("follow_user")]);
    m_follow_user_isSet = !json[QString("follow_user")].isNull() && m_follow_user_isValid;

    m_force_cache_refresh_interval_isValid = ::OpenAPI::fromJsonValue(m_force_cache_refresh_interval, json[QString("force_cache_refresh_interval")]);
    m_force_cache_refresh_interval_isSet = !json[QString("force_cache_refresh_interval")].isNull() && m_force_cache_refresh_interval_isValid;

    m_hit_backend_for_existing_isValid = ::OpenAPI::fromJsonValue(m_hit_backend_for_existing, json[QString("hit_backend_for_existing")]);
    m_hit_backend_for_existing_isSet = !json[QString("hit_backend_for_existing")].isNull() && m_hit_backend_for_existing_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_mappings_isValid = ::OpenAPI::fromJsonValue(m_language_mappings, json[QString("language_mappings")]);
    m_language_mappings_isSet = !json[QString("language_mappings")].isNull() && m_language_mappings_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_modify_links_isValid = ::OpenAPI::fromJsonValue(m_modify_links, json[QString("modify_links")]);
    m_modify_links_isSet = !json[QString("modify_links")].isNull() && m_modify_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optimize_per_page_isValid = ::OpenAPI::fromJsonValue(m_optimize_per_page, json[QString("optimize_per_page")]);
    m_optimize_per_page_isSet = !json[QString("optimize_per_page")].isNull() && m_optimize_per_page_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_path_regex_isValid = ::OpenAPI::fromJsonValue(m_path_regex, json[QString("path_regex")]);
    m_path_regex_isSet = !json[QString("path_regex")].isNull() && m_path_regex_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_query_name_isValid = ::OpenAPI::fromJsonValue(m_query_name, json[QString("query_name")]);
    m_query_name_isSet = !json[QString("query_name")].isNull() && m_query_name_isValid;

    m_reboot_on_url_change_isValid = ::OpenAPI::fromJsonValue(m_reboot_on_url_change, json[QString("reboot_on_url_change")]);
    m_reboot_on_url_change_isSet = !json[QString("reboot_on_url_change")].isNull() && m_reboot_on_url_change_isValid;

    m_restricted_domains_isValid = ::OpenAPI::fromJsonValue(m_restricted_domains, json[QString("restricted_domains")]);
    m_restricted_domains_isSet = !json[QString("restricted_domains")].isNull() && m_restricted_domains_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;

    m_test_mode_isValid = ::OpenAPI::fromJsonValue(m_test_mode, json[QString("test_mode")]);
    m_test_mode_isSet = !json[QString("test_mode")].isNull() && m_test_mode_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_url_change_mode_isValid = ::OpenAPI::fromJsonValue(m_url_change_mode, json[QString("url_change_mode")]);
    m_url_change_mode_isSet = !json[QString("url_change_mode")].isNull() && m_url_change_mode_isValid;

    m_url_mode_isValid = ::OpenAPI::fromJsonValue(m_url_mode, json[QString("url_mode")]);
    m_url_mode_isSet = !json[QString("url_mode")].isNull() && m_url_mode_isValid;

    m_use_cache_isValid = ::OpenAPI::fromJsonValue(m_use_cache, json[QString("use_cache")]);
    m_use_cache_isSet = !json[QString("use_cache")].isNull() && m_use_cache_isValid;

    m_use_dummy_translations_isValid = ::OpenAPI::fromJsonValue(m_use_dummy_translations, json[QString("use_dummy_translations")]);
    m_use_dummy_translations_isSet = !json[QString("use_dummy_translations")].isNull() && m_use_dummy_translations_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAIActiveWidget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveWidget::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_mode_isSet) {
        obj.insert(QString("admin_mode"), ::OpenAPI::toJsonValue(m_admin_mode));
    }
    if (m_allow_hash_in_url_isSet) {
        obj.insert(QString("allow_hash_in_url"), ::OpenAPI::toJsonValue(m_allow_hash_in_url));
    }
    if (m_allow_query_in_url_isSet) {
        obj.insert(QString("allow_query_in_url"), ::OpenAPI::toJsonValue(m_allow_query_in_url));
    }
    if (m_auto_detect_source_language_isSet) {
        obj.insert(QString("auto_detect_source_language"), ::OpenAPI::toJsonValue(m_auto_detect_source_language));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_debug_mode_isSet) {
        obj.insert(QString("debug_mode"), ::OpenAPI::toJsonValue(m_debug_mode));
    }
    if (m_elements_isSet) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_follow_user_isSet) {
        obj.insert(QString("follow_user"), ::OpenAPI::toJsonValue(m_follow_user));
    }
    if (m_force_cache_refresh_interval_isSet) {
        obj.insert(QString("force_cache_refresh_interval"), ::OpenAPI::toJsonValue(m_force_cache_refresh_interval));
    }
    if (m_hit_backend_for_existing_isSet) {
        obj.insert(QString("hit_backend_for_existing"), ::OpenAPI::toJsonValue(m_hit_backend_for_existing));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_mappings_isSet) {
        obj.insert(QString("language_mappings"), ::OpenAPI::toJsonValue(m_language_mappings));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_modify_links_isSet) {
        obj.insert(QString("modify_links"), ::OpenAPI::toJsonValue(m_modify_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optimize_per_page_isSet) {
        obj.insert(QString("optimize_per_page"), ::OpenAPI::toJsonValue(m_optimize_per_page));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_path_regex_isSet) {
        obj.insert(QString("path_regex"), ::OpenAPI::toJsonValue(m_path_regex));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_query_name_isSet) {
        obj.insert(QString("query_name"), ::OpenAPI::toJsonValue(m_query_name));
    }
    if (m_reboot_on_url_change_isSet) {
        obj.insert(QString("reboot_on_url_change"), ::OpenAPI::toJsonValue(m_reboot_on_url_change));
    }
    if (m_restricted_domains_isSet) {
        obj.insert(QString("restricted_domains"), ::OpenAPI::toJsonValue(m_restricted_domains));
    }
    if (m_sections_isSet) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_test_mode_isSet) {
        obj.insert(QString("test_mode"), ::OpenAPI::toJsonValue(m_test_mode));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_url_change_mode_isSet) {
        obj.insert(QString("url_change_mode"), ::OpenAPI::toJsonValue(m_url_change_mode));
    }
    if (m_url_mode_isSet) {
        obj.insert(QString("url_mode"), ::OpenAPI::toJsonValue(m_url_mode));
    }
    if (m_use_cache_isSet) {
        obj.insert(QString("use_cache"), ::OpenAPI::toJsonValue(m_use_cache));
    }
    if (m_use_dummy_translations_isSet) {
        obj.insert(QString("use_dummy_translations"), ::OpenAPI::toJsonValue(m_use_dummy_translations));
    }
    if (m_variables_isSet) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

bool OAIActiveWidget::isAdminMode() const {
    return m_admin_mode;
}
void OAIActiveWidget::setAdminMode(const bool &admin_mode) {
    m_admin_mode = admin_mode;
    m_admin_mode_isSet = true;
}

bool OAIActiveWidget::is_admin_mode_Set() const{
    return m_admin_mode_isSet;
}

bool OAIActiveWidget::is_admin_mode_Valid() const{
    return m_admin_mode_isValid;
}

bool OAIActiveWidget::isAllowHashInUrl() const {
    return m_allow_hash_in_url;
}
void OAIActiveWidget::setAllowHashInUrl(const bool &allow_hash_in_url) {
    m_allow_hash_in_url = allow_hash_in_url;
    m_allow_hash_in_url_isSet = true;
}

bool OAIActiveWidget::is_allow_hash_in_url_Set() const{
    return m_allow_hash_in_url_isSet;
}

bool OAIActiveWidget::is_allow_hash_in_url_Valid() const{
    return m_allow_hash_in_url_isValid;
}

bool OAIActiveWidget::isAllowQueryInUrl() const {
    return m_allow_query_in_url;
}
void OAIActiveWidget::setAllowQueryInUrl(const bool &allow_query_in_url) {
    m_allow_query_in_url = allow_query_in_url;
    m_allow_query_in_url_isSet = true;
}

bool OAIActiveWidget::is_allow_query_in_url_Set() const{
    return m_allow_query_in_url_isSet;
}

bool OAIActiveWidget::is_allow_query_in_url_Valid() const{
    return m_allow_query_in_url_isValid;
}

bool OAIActiveWidget::isAutoDetectSourceLanguage() const {
    return m_auto_detect_source_language;
}
void OAIActiveWidget::setAutoDetectSourceLanguage(const bool &auto_detect_source_language) {
    m_auto_detect_source_language = auto_detect_source_language;
    m_auto_detect_source_language_isSet = true;
}

bool OAIActiveWidget::is_auto_detect_source_language_Set() const{
    return m_auto_detect_source_language_isSet;
}

bool OAIActiveWidget::is_auto_detect_source_language_Valid() const{
    return m_auto_detect_source_language_isValid;
}

QDateTime OAIActiveWidget::getCreatedAt() const {
    return m_created_at;
}
void OAIActiveWidget::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIActiveWidget::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIActiveWidget::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIActiveWidget::isDebugMode() const {
    return m_debug_mode;
}
void OAIActiveWidget::setDebugMode(const bool &debug_mode) {
    m_debug_mode = debug_mode;
    m_debug_mode_isSet = true;
}

bool OAIActiveWidget::is_debug_mode_Set() const{
    return m_debug_mode_isSet;
}

bool OAIActiveWidget::is_debug_mode_Valid() const{
    return m_debug_mode_isValid;
}

QString OAIActiveWidget::getElements() const {
    return m_elements;
}
void OAIActiveWidget::setElements(const QString &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIActiveWidget::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIActiveWidget::is_elements_Valid() const{
    return m_elements_isValid;
}

bool OAIActiveWidget::isFollowUser() const {
    return m_follow_user;
}
void OAIActiveWidget::setFollowUser(const bool &follow_user) {
    m_follow_user = follow_user;
    m_follow_user_isSet = true;
}

bool OAIActiveWidget::is_follow_user_Set() const{
    return m_follow_user_isSet;
}

bool OAIActiveWidget::is_follow_user_Valid() const{
    return m_follow_user_isValid;
}

bool OAIActiveWidget::isForceCacheRefreshInterval() const {
    return m_force_cache_refresh_interval;
}
void OAIActiveWidget::setForceCacheRefreshInterval(const bool &force_cache_refresh_interval) {
    m_force_cache_refresh_interval = force_cache_refresh_interval;
    m_force_cache_refresh_interval_isSet = true;
}

bool OAIActiveWidget::is_force_cache_refresh_interval_Set() const{
    return m_force_cache_refresh_interval_isSet;
}

bool OAIActiveWidget::is_force_cache_refresh_interval_Valid() const{
    return m_force_cache_refresh_interval_isValid;
}

bool OAIActiveWidget::isHitBackendForExisting() const {
    return m_hit_backend_for_existing;
}
void OAIActiveWidget::setHitBackendForExisting(const bool &hit_backend_for_existing) {
    m_hit_backend_for_existing = hit_backend_for_existing;
    m_hit_backend_for_existing_isSet = true;
}

bool OAIActiveWidget::is_hit_backend_for_existing_Set() const{
    return m_hit_backend_for_existing_isSet;
}

bool OAIActiveWidget::is_hit_backend_for_existing_Valid() const{
    return m_hit_backend_for_existing_isValid;
}

qint64 OAIActiveWidget::getId() const {
    return m_id;
}
void OAIActiveWidget::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActiveWidget::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActiveWidget::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActiveWidget::getLanguageMappings() const {
    return m_language_mappings;
}
void OAIActiveWidget::setLanguageMappings(const QString &language_mappings) {
    m_language_mappings = language_mappings;
    m_language_mappings_isSet = true;
}

bool OAIActiveWidget::is_language_mappings_Set() const{
    return m_language_mappings_isSet;
}

bool OAIActiveWidget::is_language_mappings_Valid() const{
    return m_language_mappings_isValid;
}

bool OAIActiveWidget::isLive() const {
    return m_live;
}
void OAIActiveWidget::setLive(const bool &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIActiveWidget::is_live_Set() const{
    return m_live_isSet;
}

bool OAIActiveWidget::is_live_Valid() const{
    return m_live_isValid;
}

bool OAIActiveWidget::isModifyLinks() const {
    return m_modify_links;
}
void OAIActiveWidget::setModifyLinks(const bool &modify_links) {
    m_modify_links = modify_links;
    m_modify_links_isSet = true;
}

bool OAIActiveWidget::is_modify_links_Set() const{
    return m_modify_links_isSet;
}

bool OAIActiveWidget::is_modify_links_Valid() const{
    return m_modify_links_isValid;
}

QString OAIActiveWidget::getName() const {
    return m_name;
}
void OAIActiveWidget::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActiveWidget::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActiveWidget::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIActiveWidget::isOptimizePerPage() const {
    return m_optimize_per_page;
}
void OAIActiveWidget::setOptimizePerPage(const bool &optimize_per_page) {
    m_optimize_per_page = optimize_per_page;
    m_optimize_per_page_isSet = true;
}

bool OAIActiveWidget::is_optimize_per_page_Set() const{
    return m_optimize_per_page_isSet;
}

bool OAIActiveWidget::is_optimize_per_page_Valid() const{
    return m_optimize_per_page_isValid;
}

QString OAIActiveWidget::getPages() const {
    return m_pages;
}
void OAIActiveWidget::setPages(const QString &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIActiveWidget::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIActiveWidget::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIActiveWidget::getPathRegex() const {
    return m_path_regex;
}
void OAIActiveWidget::setPathRegex(const QString &path_regex) {
    m_path_regex = path_regex;
    m_path_regex_isSet = true;
}

bool OAIActiveWidget::is_path_regex_Set() const{
    return m_path_regex_isSet;
}

bool OAIActiveWidget::is_path_regex_Valid() const{
    return m_path_regex_isValid;
}

QString OAIActiveWidget::getPosition() const {
    return m_position;
}
void OAIActiveWidget::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIActiveWidget::is_position_Set() const{
    return m_position_isSet;
}

bool OAIActiveWidget::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIActiveWidget::getQueryName() const {
    return m_query_name;
}
void OAIActiveWidget::setQueryName(const QString &query_name) {
    m_query_name = query_name;
    m_query_name_isSet = true;
}

bool OAIActiveWidget::is_query_name_Set() const{
    return m_query_name_isSet;
}

bool OAIActiveWidget::is_query_name_Valid() const{
    return m_query_name_isValid;
}

bool OAIActiveWidget::isRebootOnUrlChange() const {
    return m_reboot_on_url_change;
}
void OAIActiveWidget::setRebootOnUrlChange(const bool &reboot_on_url_change) {
    m_reboot_on_url_change = reboot_on_url_change;
    m_reboot_on_url_change_isSet = true;
}

bool OAIActiveWidget::is_reboot_on_url_change_Set() const{
    return m_reboot_on_url_change_isSet;
}

bool OAIActiveWidget::is_reboot_on_url_change_Valid() const{
    return m_reboot_on_url_change_isValid;
}

QString OAIActiveWidget::getRestrictedDomains() const {
    return m_restricted_domains;
}
void OAIActiveWidget::setRestrictedDomains(const QString &restricted_domains) {
    m_restricted_domains = restricted_domains;
    m_restricted_domains_isSet = true;
}

bool OAIActiveWidget::is_restricted_domains_Set() const{
    return m_restricted_domains_isSet;
}

bool OAIActiveWidget::is_restricted_domains_Valid() const{
    return m_restricted_domains_isValid;
}

QString OAIActiveWidget::getSections() const {
    return m_sections;
}
void OAIActiveWidget::setSections(const QString &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIActiveWidget::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIActiveWidget::is_sections_Valid() const{
    return m_sections_isValid;
}

bool OAIActiveWidget::isTestMode() const {
    return m_test_mode;
}
void OAIActiveWidget::setTestMode(const bool &test_mode) {
    m_test_mode = test_mode;
    m_test_mode_isSet = true;
}

bool OAIActiveWidget::is_test_mode_Set() const{
    return m_test_mode_isSet;
}

bool OAIActiveWidget::is_test_mode_Valid() const{
    return m_test_mode_isValid;
}

QString OAIActiveWidget::getTheme() const {
    return m_theme;
}
void OAIActiveWidget::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIActiveWidget::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIActiveWidget::is_theme_Valid() const{
    return m_theme_isValid;
}

QString OAIActiveWidget::getToken() const {
    return m_token;
}
void OAIActiveWidget::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIActiveWidget::is_token_Set() const{
    return m_token_isSet;
}

bool OAIActiveWidget::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIActiveWidget::getUrlChangeMode() const {
    return m_url_change_mode;
}
void OAIActiveWidget::setUrlChangeMode(const QString &url_change_mode) {
    m_url_change_mode = url_change_mode;
    m_url_change_mode_isSet = true;
}

bool OAIActiveWidget::is_url_change_mode_Set() const{
    return m_url_change_mode_isSet;
}

bool OAIActiveWidget::is_url_change_mode_Valid() const{
    return m_url_change_mode_isValid;
}

QString OAIActiveWidget::getUrlMode() const {
    return m_url_mode;
}
void OAIActiveWidget::setUrlMode(const QString &url_mode) {
    m_url_mode = url_mode;
    m_url_mode_isSet = true;
}

bool OAIActiveWidget::is_url_mode_Set() const{
    return m_url_mode_isSet;
}

bool OAIActiveWidget::is_url_mode_Valid() const{
    return m_url_mode_isValid;
}

bool OAIActiveWidget::isUseCache() const {
    return m_use_cache;
}
void OAIActiveWidget::setUseCache(const bool &use_cache) {
    m_use_cache = use_cache;
    m_use_cache_isSet = true;
}

bool OAIActiveWidget::is_use_cache_Set() const{
    return m_use_cache_isSet;
}

bool OAIActiveWidget::is_use_cache_Valid() const{
    return m_use_cache_isValid;
}

bool OAIActiveWidget::isUseDummyTranslations() const {
    return m_use_dummy_translations;
}
void OAIActiveWidget::setUseDummyTranslations(const bool &use_dummy_translations) {
    m_use_dummy_translations = use_dummy_translations;
    m_use_dummy_translations_isSet = true;
}

bool OAIActiveWidget::is_use_dummy_translations_Set() const{
    return m_use_dummy_translations_isSet;
}

bool OAIActiveWidget::is_use_dummy_translations_Valid() const{
    return m_use_dummy_translations_isValid;
}

QString OAIActiveWidget::getVariables() const {
    return m_variables;
}
void OAIActiveWidget::setVariables(const QString &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIActiveWidget::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIActiveWidget::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAIActiveWidget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_hash_in_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_query_in_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_detect_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_cache_refresh_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_backend_for_existing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_mappings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimize_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_on_url_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_change_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_dummy_translations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveWidget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
