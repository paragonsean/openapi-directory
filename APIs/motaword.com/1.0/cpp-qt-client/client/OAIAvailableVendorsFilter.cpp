/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableVendorsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableVendorsFilter::OAIAvailableVendorsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableVendorsFilter::OAIAvailableVendorsFilter() {
    this->initializeModel();
}

OAIAvailableVendorsFilter::~OAIAvailableVendorsFilter() {}

void OAIAvailableVendorsFilter::initializeModel() {

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_manual_work_permission_isSet = false;
    m_manual_work_permission_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIAvailableVendorsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableVendorsFilter::fromJsonObject(QJsonObject json) {

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporateId")]);
    m_corporate_id_isSet = !json[QString("corporateId")].isNull() && m_corporate_id_isValid;

    m_manual_work_permission_isValid = ::OpenAPI::fromJsonValue(m_manual_work_permission, json[QString("manualWorkPermission")]);
    m_manual_work_permission_isSet = !json[QString("manualWorkPermission")].isNull() && m_manual_work_permission_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("sourceLanguage")]);
    m_source_language_isSet = !json[QString("sourceLanguage")].isNull() && m_source_language_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("targetLanguages")]);
    m_target_languages_isSet = !json[QString("targetLanguages")].isNull() && m_target_languages_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIAvailableVendorsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableVendorsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporateId"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_manual_work_permission_isSet) {
        obj.insert(QString("manualWorkPermission"), ::OpenAPI::toJsonValue(m_manual_work_permission));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("sourceLanguage"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("targetLanguages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

double OAIAvailableVendorsFilter::getCorporateId() const {
    return m_corporate_id;
}
void OAIAvailableVendorsFilter::setCorporateId(const double &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAIAvailableVendorsFilter::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAIAvailableVendorsFilter::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

bool OAIAvailableVendorsFilter::isManualWorkPermission() const {
    return m_manual_work_permission;
}
void OAIAvailableVendorsFilter::setManualWorkPermission(const bool &manual_work_permission) {
    m_manual_work_permission = manual_work_permission;
    m_manual_work_permission_isSet = true;
}

bool OAIAvailableVendorsFilter::is_manual_work_permission_Set() const{
    return m_manual_work_permission_isSet;
}

bool OAIAvailableVendorsFilter::is_manual_work_permission_Valid() const{
    return m_manual_work_permission_isValid;
}

QString OAIAvailableVendorsFilter::getSourceLanguage() const {
    return m_source_language;
}
void OAIAvailableVendorsFilter::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIAvailableVendorsFilter::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIAvailableVendorsFilter::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QList<QString> OAIAvailableVendorsFilter::getTargetLanguages() const {
    return m_target_languages;
}
void OAIAvailableVendorsFilter::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIAvailableVendorsFilter::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIAvailableVendorsFilter::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

QList<QString> OAIAvailableVendorsFilter::getTypes() const {
    return m_types;
}
void OAIAvailableVendorsFilter::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIAvailableVendorsFilter::is_types_Set() const{
    return m_types_isSet;
}

bool OAIAvailableVendorsFilter::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIAvailableVendorsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_work_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableVendorsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
