/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectCompletionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectCompletionReport::OAIProjectCompletionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectCompletionReport::OAIProjectCompletionReport() {
    this->initializeModel();
}

OAIProjectCompletionReport::~OAIProjectCompletionReport() {}

void OAIProjectCompletionReport::initializeModel() {

    m_admin_user_id_isSet = false;
    m_admin_user_id_isValid = false;

    m_completion_report_data_isSet = false;
    m_completion_report_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;
}

void OAIProjectCompletionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectCompletionReport::fromJsonObject(QJsonObject json) {

    m_admin_user_id_isValid = ::OpenAPI::fromJsonValue(m_admin_user_id, json[QString("admin_user_id")]);
    m_admin_user_id_isSet = !json[QString("admin_user_id")].isNull() && m_admin_user_id_isValid;

    m_completion_report_data_isValid = ::OpenAPI::fromJsonValue(m_completion_report_data, json[QString("completion_report_data")]);
    m_completion_report_data_isSet = !json[QString("completion_report_data")].isNull() && m_completion_report_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quote_id")]);
    m_quote_id_isSet = !json[QString("quote_id")].isNull() && m_quote_id_isValid;
}

QString OAIProjectCompletionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectCompletionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_user_id_isSet) {
        obj.insert(QString("admin_user_id"), ::OpenAPI::toJsonValue(m_admin_user_id));
    }
    if (m_completion_report_data.size() > 0) {
        obj.insert(QString("completion_report_data"), ::OpenAPI::toJsonValue(m_completion_report_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quote_id"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    return obj;
}

double OAIProjectCompletionReport::getAdminUserId() const {
    return m_admin_user_id;
}
void OAIProjectCompletionReport::setAdminUserId(const double &admin_user_id) {
    m_admin_user_id = admin_user_id;
    m_admin_user_id_isSet = true;
}

bool OAIProjectCompletionReport::is_admin_user_id_Set() const{
    return m_admin_user_id_isSet;
}

bool OAIProjectCompletionReport::is_admin_user_id_Valid() const{
    return m_admin_user_id_isValid;
}

QList<OAIInvitedVendorsByLanguage> OAIProjectCompletionReport::getCompletionReportData() const {
    return m_completion_report_data;
}
void OAIProjectCompletionReport::setCompletionReportData(const QList<OAIInvitedVendorsByLanguage> &completion_report_data) {
    m_completion_report_data = completion_report_data;
    m_completion_report_data_isSet = true;
}

bool OAIProjectCompletionReport::is_completion_report_data_Set() const{
    return m_completion_report_data_isSet;
}

bool OAIProjectCompletionReport::is_completion_report_data_Valid() const{
    return m_completion_report_data_isValid;
}

double OAIProjectCompletionReport::getId() const {
    return m_id;
}
void OAIProjectCompletionReport::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectCompletionReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectCompletionReport::is_id_Valid() const{
    return m_id_isValid;
}

double OAIProjectCompletionReport::getQuoteId() const {
    return m_quote_id;
}
void OAIProjectCompletionReport::setQuoteId(const double &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAIProjectCompletionReport::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAIProjectCompletionReport::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

bool OAIProjectCompletionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_report_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectCompletionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
