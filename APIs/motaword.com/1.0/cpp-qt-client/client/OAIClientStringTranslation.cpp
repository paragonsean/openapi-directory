/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientStringTranslation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientStringTranslation::OAIClientStringTranslation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientStringTranslation::OAIClientStringTranslation() {
    this->initializeModel();
}

OAIClientStringTranslation::~OAIClientStringTranslation() {}

void OAIClientStringTranslation::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_last_changed_isSet = false;
    m_last_changed_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_language_isSet = false;
    m_target_language_isValid = false;
}

void OAIClientStringTranslation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientStringTranslation::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_last_changed_isValid = ::OpenAPI::fromJsonValue(m_last_changed, json[QString("last_changed")]);
    m_last_changed_isSet = !json[QString("last_changed")].isNull() && m_last_changed_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_language_isValid = ::OpenAPI::fromJsonValue(m_target_language, json[QString("target_language")]);
    m_target_language_isSet = !json[QString("target_language")].isNull() && m_target_language_isValid;
}

QString OAIClientStringTranslation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientStringTranslation::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_last_changed_isSet) {
        obj.insert(QString("last_changed"), ::OpenAPI::toJsonValue(m_last_changed));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_language_isSet) {
        obj.insert(QString("target_language"), ::OpenAPI::toJsonValue(m_target_language));
    }
    return obj;
}

QString OAIClientStringTranslation::getContent() const {
    return m_content;
}
void OAIClientStringTranslation::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIClientStringTranslation::is_content_Set() const{
    return m_content_isSet;
}

bool OAIClientStringTranslation::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIClientStringTranslation::getLastChanged() const {
    return m_last_changed;
}
void OAIClientStringTranslation::setLastChanged(const QDateTime &last_changed) {
    m_last_changed = last_changed;
    m_last_changed_isSet = true;
}

bool OAIClientStringTranslation::is_last_changed_Set() const{
    return m_last_changed_isSet;
}

bool OAIClientStringTranslation::is_last_changed_Valid() const{
    return m_last_changed_isValid;
}

QString OAIClientStringTranslation::getResource() const {
    return m_resource;
}
void OAIClientStringTranslation::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIClientStringTranslation::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIClientStringTranslation::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIClientStringTranslation::getResourceId() const {
    return m_resource_id;
}
void OAIClientStringTranslation::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIClientStringTranslation::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIClientStringTranslation::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIClientStringTranslation::getState() const {
    return m_state;
}
void OAIClientStringTranslation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIClientStringTranslation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIClientStringTranslation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIClientStringTranslation::getTargetLanguage() const {
    return m_target_language;
}
void OAIClientStringTranslation::setTargetLanguage(const QString &target_language) {
    m_target_language = target_language;
    m_target_language_isSet = true;
}

bool OAIClientStringTranslation::is_target_language_Set() const{
    return m_target_language_isSet;
}

bool OAIClientStringTranslation::is_target_language_Valid() const{
    return m_target_language_isValid;
}

bool OAIClientStringTranslation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientStringTranslation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
