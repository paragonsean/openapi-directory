/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_base_amount_isSet = false;
    m_base_amount_isValid = false;

    m_base_currency_isSet = false;
    m_base_currency_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_no_isSet = false;
    m_invoice_no_isValid = false;

    m_invoiced_at_isSet = false;
    m_invoiced_at_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_base_amount_isValid = ::OpenAPI::fromJsonValue(m_base_amount, json[QString("base_amount")]);
    m_base_amount_isSet = !json[QString("base_amount")].isNull() && m_base_amount_isValid;

    m_base_currency_isValid = ::OpenAPI::fromJsonValue(m_base_currency, json[QString("base_currency")]);
    m_base_currency_isSet = !json[QString("base_currency")].isNull() && m_base_currency_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_no_isValid = ::OpenAPI::fromJsonValue(m_invoice_no, json[QString("invoice_no")]);
    m_invoice_no_isSet = !json[QString("invoice_no")].isNull() && m_invoice_no_isValid;

    m_invoiced_at_isValid = ::OpenAPI::fromJsonValue(m_invoiced_at, json[QString("invoiced_at")]);
    m_invoiced_at_isSet = !json[QString("invoiced_at")].isNull() && m_invoiced_at_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_base_amount_isSet) {
        obj.insert(QString("base_amount"), ::OpenAPI::toJsonValue(m_base_amount));
    }
    if (m_base_currency_isSet) {
        obj.insert(QString("base_currency"), ::OpenAPI::toJsonValue(m_base_currency));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_no_isSet) {
        obj.insert(QString("invoice_no"), ::OpenAPI::toJsonValue(m_invoice_no));
    }
    if (m_invoiced_at_isSet) {
        obj.insert(QString("invoiced_at"), ::OpenAPI::toJsonValue(m_invoiced_at));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

float OAIInvoice::getAmount() const {
    return m_amount;
}
void OAIInvoice::setAmount(const float &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIInvoice::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIInvoice::is_amount_Valid() const{
    return m_amount_isValid;
}

float OAIInvoice::getBaseAmount() const {
    return m_base_amount;
}
void OAIInvoice::setBaseAmount(const float &base_amount) {
    m_base_amount = base_amount;
    m_base_amount_isSet = true;
}

bool OAIInvoice::is_base_amount_Set() const{
    return m_base_amount_isSet;
}

bool OAIInvoice::is_base_amount_Valid() const{
    return m_base_amount_isValid;
}

QString OAIInvoice::getBaseCurrency() const {
    return m_base_currency;
}
void OAIInvoice::setBaseCurrency(const QString &base_currency) {
    m_base_currency = base_currency;
    m_base_currency_isSet = true;
}

bool OAIInvoice::is_base_currency_Set() const{
    return m_base_currency_isSet;
}

bool OAIInvoice::is_base_currency_Valid() const{
    return m_base_currency_isValid;
}

OAIBillingAddress OAIInvoice::getBilling() const {
    return m_billing;
}
void OAIInvoice::setBilling(const OAIBillingAddress &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAIInvoice::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAIInvoice::is_billing_Valid() const{
    return m_billing_isValid;
}

QString OAIInvoice::getCurrency() const {
    return m_currency;
}
void OAIInvoice::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvoice::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvoice::is_currency_Valid() const{
    return m_currency_isValid;
}

qint64 OAIInvoice::getId() const {
    return m_id;
}
void OAIInvoice::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvoice::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIInvoice::getInvoiceNo() const {
    return m_invoice_no;
}
void OAIInvoice::setInvoiceNo(const qint64 &invoice_no) {
    m_invoice_no = invoice_no;
    m_invoice_no_isSet = true;
}

bool OAIInvoice::is_invoice_no_Set() const{
    return m_invoice_no_isSet;
}

bool OAIInvoice::is_invoice_no_Valid() const{
    return m_invoice_no_isValid;
}

QDateTime OAIInvoice::getInvoicedAt() const {
    return m_invoiced_at;
}
void OAIInvoice::setInvoicedAt(const QDateTime &invoiced_at) {
    m_invoiced_at = invoiced_at;
    m_invoiced_at_isSet = true;
}

bool OAIInvoice::is_invoiced_at_Set() const{
    return m_invoiced_at_isSet;
}

bool OAIInvoice::is_invoiced_at_Valid() const{
    return m_invoiced_at_isValid;
}

OAIInvoiceLinks OAIInvoice::getLinks() const {
    return m_links;
}
void OAIInvoice::setLinks(const OAIInvoiceLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIInvoice::is_links_Set() const{
    return m_links_isSet;
}

bool OAIInvoice::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIInvoice::getStatus() const {
    return m_status;
}
void OAIInvoice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoice::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiced_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
