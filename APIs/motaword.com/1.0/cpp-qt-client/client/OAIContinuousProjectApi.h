/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContinuousProjectApi_H
#define OAI_OAIContinuousProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveWidget.h"
#include "OAIActiveWidgetList.h"
#include "OAIAddOrUpdateDocumentRequest.h"
#include "OAIAnalyticsCollection.h"
#include "OAIAnalyticsToken.h"
#include "OAIContinuousProject.h"
#include "OAIContinuousProjectDocument.h"
#include "OAIContinuousProjectDocumentList.h"
#include "OAIContinuousProjectDocumentProgressBody.h"
#include "OAIContinuousProjectInvoices.h"
#include "OAIContinuousProjectProgress.h"
#include "OAIContinuousProjectUpdateContent.h"
#include "OAIContinuousProjectsList.h"
#include "OAIError.h"
#include "OAIGetQuotesForDocumentsBody.h"
#include "OAIGetQuotesForLanguagesBody.h"
#include "OAIInstantTranslationRequest.h"
#include "OAIInstantTranslationResult.h"
#include "OAIOperationStatus.h"
#include "OAIProgress.h"
#include "OAIProjectList.h"
#include "OAISubscription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContinuousProjectApi : public QObject {
    Q_OBJECT

public:
    OAIContinuousProjectApi(const int timeOut = 0);
    ~OAIContinuousProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_add_or_update_document_request OAIAddOrUpdateDocumentRequest [optional]
    */
    virtual void addDocument(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIAddOrUpdateDocumentRequest> &oai_add_or_update_document_request = ::OpenAPI::OptionalParam<OAIAddOrUpdateDocumentRequest>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_analytics_collection OAIAnalyticsCollection [optional]
    */
    virtual void collectAnalytics(const qint64 &id, const ::OpenAPI::OptionalParam<OAIAnalyticsCollection> &oai_analytics_collection = ::OpenAPI::OptionalParam<OAIAnalyticsCollection>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void complete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void completeContinuousDocument(const qint64 &id, const qint64 &document_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  target_language QString [required]
    */
    virtual void completeLanguage(const qint64 &id, const QString &target_language);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_active_widget OAIActiveWidget [optional]
    */
    virtual void createActiveWidget(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIActiveWidget> &oai_active_widget = ::OpenAPI::OptionalParam<OAIActiveWidget>());

    /**
    * @param[in]  oai_continuous_project OAIContinuousProject [optional]
    */
    virtual void createContinuousProject(const ::OpenAPI::OptionalParam<OAIContinuousProject> &oai_continuous_project = ::OpenAPI::OptionalParam<OAIContinuousProject>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_subscription OAISubscription [required]
    */
    virtual void createSubscription(const qint64 &id, const OAISubscription &oai_subscription);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  widget_id qint64 [required]
    */
    virtual void deleteActiveWidget(const qint64 &project_id, const qint64 &widget_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteContinuousProject(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteSubscription(const qint64 &id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  widget_id qint64 [required]
    */
    virtual void getActiveWidget(const qint64 &project_id, const qint64 &widget_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getActiveWidgets(const qint64 &project_id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getAnalyticsToken(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getContinuousProject(const qint64 &id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void getContinuousProjectDocument(const qint64 &project_id, const qint64 &document_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  filter_by_language QString [optional]
    */
    virtual void getContinuousProjectDocumentProgress(const qint64 &project_id, const qint64 &document_id, const ::OpenAPI::OptionalParam<QString> &filter_by_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  filter_by_language QString [optional]
    */
    virtual void getContinuousProjectDocuments(const qint64 &project_id, const ::OpenAPI::OptionalParam<QString> &filter_by_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getContinuousProjectInvoices(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  filter_by_language QString [optional]
    */
    virtual void getContinuousProjectProgress(const qint64 &project_id, const ::OpenAPI::OptionalParam<QString> &filter_by_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [optional]
    */
    virtual void getContinuousProjects(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void getQuoteForDocument(const qint64 &id, const qint64 &document_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_get_quotes_for_documents_body OAIGetQuotesForDocumentsBody [optional]
    */
    virtual void getQuoteForDocuments(const qint64 &id, const ::OpenAPI::OptionalParam<OAIGetQuotesForDocumentsBody> &oai_get_quotes_for_documents_body = ::OpenAPI::OptionalParam<OAIGetQuotesForDocumentsBody>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  target_language QString [required]
    */
    virtual void getQuoteForLanguage(const qint64 &id, const QString &target_language);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_get_quotes_for_languages_body OAIGetQuotesForLanguagesBody [optional]
    */
    virtual void getQuoteForLanguages(const qint64 &id, const ::OpenAPI::OptionalParam<OAIGetQuotesForLanguagesBody> &oai_get_quotes_for_languages_body = ::OpenAPI::OptionalParam<OAIGetQuotesForLanguagesBody>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getSubscription(const qint64 &id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_continuous_project_document_progress_body OAIContinuousProjectDocumentProgressBody [optional]
    */
    virtual void postContinuousProjectDocumentProgress(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIContinuousProjectDocumentProgressBody> &oai_continuous_project_document_progress_body = ::OpenAPI::OptionalParam<OAIContinuousProjectDocumentProgressBody>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  widget_id qint64 [required]
    */
    virtual void resetActiveWidgetToken(const qint64 &project_id, const qint64 &widget_id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  target_language QString [required]
    * @param[in]  oai_instant_translation_request OAIInstantTranslationRequest [optional]
    */
    virtual void translate(const qint64 &id, const QString &target_language, const ::OpenAPI::OptionalParam<OAIInstantTranslationRequest> &oai_instant_translation_request = ::OpenAPI::OptionalParam<OAIInstantTranslationRequest>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  widget_id qint64 [required]
    * @param[in]  oai_active_widget OAIActiveWidget [optional]
    */
    virtual void updateActiveWidget(const qint64 &project_id, const qint64 &widget_id, const ::OpenAPI::OptionalParam<OAIActiveWidget> &oai_active_widget = ::OpenAPI::OptionalParam<OAIActiveWidget>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_continuous_project_update_content OAIContinuousProjectUpdateContent [optional]
    */
    virtual void updateContinuousProject(const qint64 &id, const ::OpenAPI::OptionalParam<OAIContinuousProjectUpdateContent> &oai_continuous_project_update_content = ::OpenAPI::OptionalParam<OAIContinuousProjectUpdateContent>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  oai_add_or_update_document_request OAIAddOrUpdateDocumentRequest [optional]
    */
    virtual void updateDocument(const qint64 &project_id, const qint64 &document_id, const ::OpenAPI::OptionalParam<OAIAddOrUpdateDocumentRequest> &oai_add_or_update_document_request = ::OpenAPI::OptionalParam<OAIAddOrUpdateDocumentRequest>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_subscription OAISubscription [required]
    */
    virtual void updateSubscription(const qint64 &id, const OAISubscription &oai_subscription);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_subscription OAISubscription [required]
    */
    virtual void updateSubscriptionPaymentMethod(const qint64 &id, const OAISubscription &oai_subscription);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDocumentCallback(OAIHttpRequestWorker *worker);
    void collectAnalyticsCallback(OAIHttpRequestWorker *worker);
    void completeCallback(OAIHttpRequestWorker *worker);
    void completeContinuousDocumentCallback(OAIHttpRequestWorker *worker);
    void completeLanguageCallback(OAIHttpRequestWorker *worker);
    void createActiveWidgetCallback(OAIHttpRequestWorker *worker);
    void createContinuousProjectCallback(OAIHttpRequestWorker *worker);
    void createSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteActiveWidgetCallback(OAIHttpRequestWorker *worker);
    void deleteContinuousProjectCallback(OAIHttpRequestWorker *worker);
    void deleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void getActiveWidgetCallback(OAIHttpRequestWorker *worker);
    void getActiveWidgetsCallback(OAIHttpRequestWorker *worker);
    void getAnalyticsTokenCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectDocumentCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectDocumentProgressCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectDocumentsCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectInvoicesCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectProgressCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectsCallback(OAIHttpRequestWorker *worker);
    void getQuoteForDocumentCallback(OAIHttpRequestWorker *worker);
    void getQuoteForDocumentsCallback(OAIHttpRequestWorker *worker);
    void getQuoteForLanguageCallback(OAIHttpRequestWorker *worker);
    void getQuoteForLanguagesCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionCallback(OAIHttpRequestWorker *worker);
    void postContinuousProjectDocumentProgressCallback(OAIHttpRequestWorker *worker);
    void resetActiveWidgetTokenCallback(OAIHttpRequestWorker *worker);
    void translateCallback(OAIHttpRequestWorker *worker);
    void updateActiveWidgetCallback(OAIHttpRequestWorker *worker);
    void updateContinuousProjectCallback(OAIHttpRequestWorker *worker);
    void updateDocumentCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionPaymentMethodCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDocumentSignal(OAIContinuousProjectDocument summary);
    void collectAnalyticsSignal(OAIOperationStatus summary);
    void completeSignal(OAIOperationStatus summary);
    void completeContinuousDocumentSignal(OAIOperationStatus summary);
    void completeLanguageSignal(OAIOperationStatus summary);
    void createActiveWidgetSignal(OAIActiveWidget summary);
    void createContinuousProjectSignal(OAIContinuousProject summary);
    void createSubscriptionSignal(OAISubscription summary);
    void deleteActiveWidgetSignal(OAIOperationStatus summary);
    void deleteContinuousProjectSignal(OAIOperationStatus summary);
    void deleteSubscriptionSignal(OAISubscription summary);
    void getActiveWidgetSignal(OAIActiveWidget summary);
    void getActiveWidgetsSignal(OAIActiveWidgetList summary);
    void getAnalyticsTokenSignal(OAIAnalyticsToken summary);
    void getContinuousProjectSignal(OAIContinuousProject summary);
    void getContinuousProjectDocumentSignal(OAIContinuousProjectDocument summary);
    void getContinuousProjectDocumentProgressSignal(OAIProgress summary);
    void getContinuousProjectDocumentsSignal(OAIContinuousProjectDocumentList summary);
    void getContinuousProjectInvoicesSignal(OAIContinuousProjectInvoices summary);
    void getContinuousProjectProgressSignal(OAIContinuousProjectProgress summary);
    void getContinuousProjectsSignal(OAIContinuousProjectsList summary);
    void getQuoteForDocumentSignal(OAIProjectList summary);
    void getQuoteForDocumentsSignal(OAIProjectList summary);
    void getQuoteForLanguageSignal(OAIProjectList summary);
    void getQuoteForLanguagesSignal(OAIProjectList summary);
    void getSubscriptionSignal(OAISubscription summary);
    void postContinuousProjectDocumentProgressSignal(OAIProgress summary);
    void resetActiveWidgetTokenSignal(OAIActiveWidget summary);
    void translateSignal(OAIInstantTranslationResult summary);
    void updateActiveWidgetSignal(OAIActiveWidget summary);
    void updateContinuousProjectSignal(OAIContinuousProject summary);
    void updateDocumentSignal(OAIContinuousProjectDocument summary);
    void updateSubscriptionSignal(OAISubscription summary);
    void updateSubscriptionPaymentMethodSignal(OAISubscription summary);


    void addDocumentSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectDocument summary);
    void collectAnalyticsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void completeSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void completeContinuousDocumentSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void completeLanguageSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void createActiveWidgetSignalFull(OAIHttpRequestWorker *worker, OAIActiveWidget summary);
    void createContinuousProjectSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProject summary);
    void createSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void deleteActiveWidgetSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void deleteContinuousProjectSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void deleteSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void getActiveWidgetSignalFull(OAIHttpRequestWorker *worker, OAIActiveWidget summary);
    void getActiveWidgetsSignalFull(OAIHttpRequestWorker *worker, OAIActiveWidgetList summary);
    void getAnalyticsTokenSignalFull(OAIHttpRequestWorker *worker, OAIAnalyticsToken summary);
    void getContinuousProjectSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProject summary);
    void getContinuousProjectDocumentSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectDocument summary);
    void getContinuousProjectDocumentProgressSignalFull(OAIHttpRequestWorker *worker, OAIProgress summary);
    void getContinuousProjectDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectDocumentList summary);
    void getContinuousProjectInvoicesSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectInvoices summary);
    void getContinuousProjectProgressSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectProgress summary);
    void getContinuousProjectsSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectsList summary);
    void getQuoteForDocumentSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getQuoteForDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getQuoteForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getQuoteForLanguagesSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void postContinuousProjectDocumentProgressSignalFull(OAIHttpRequestWorker *worker, OAIProgress summary);
    void resetActiveWidgetTokenSignalFull(OAIHttpRequestWorker *worker, OAIActiveWidget summary);
    void translateSignalFull(OAIHttpRequestWorker *worker, OAIInstantTranslationResult summary);
    void updateActiveWidgetSignalFull(OAIHttpRequestWorker *worker, OAIActiveWidget summary);
    void updateContinuousProjectSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProject summary);
    void updateDocumentSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectDocument summary);
    void updateSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void updateSubscriptionPaymentMethodSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);

    Q_DECL_DEPRECATED_X("Use addDocumentSignalError() instead")
    void addDocumentSignalE(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDocumentSignalError(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectAnalyticsSignalError() instead")
    void collectAnalyticsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectAnalyticsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeSignalError() instead")
    void completeSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeContinuousDocumentSignalError() instead")
    void completeContinuousDocumentSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeContinuousDocumentSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeLanguageSignalError() instead")
    void completeLanguageSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeLanguageSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createActiveWidgetSignalError() instead")
    void createActiveWidgetSignalE(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createActiveWidgetSignalError(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContinuousProjectSignalError() instead")
    void createContinuousProjectSignalE(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createContinuousProjectSignalError(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalError() instead")
    void createSubscriptionSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActiveWidgetSignalError() instead")
    void deleteActiveWidgetSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActiveWidgetSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContinuousProjectSignalError() instead")
    void deleteContinuousProjectSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContinuousProjectSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalError() instead")
    void deleteSubscriptionSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveWidgetSignalError() instead")
    void getActiveWidgetSignalE(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveWidgetSignalError(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveWidgetsSignalError() instead")
    void getActiveWidgetsSignalE(OAIActiveWidgetList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveWidgetsSignalError(OAIActiveWidgetList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyticsTokenSignalError() instead")
    void getAnalyticsTokenSignalE(OAIAnalyticsToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyticsTokenSignalError(OAIAnalyticsToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectSignalError() instead")
    void getContinuousProjectSignalE(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectSignalError(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentSignalError() instead")
    void getContinuousProjectDocumentSignalE(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentSignalError(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentProgressSignalError() instead")
    void getContinuousProjectDocumentProgressSignalE(OAIProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentProgressSignalError(OAIProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentsSignalError() instead")
    void getContinuousProjectDocumentsSignalE(OAIContinuousProjectDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentsSignalError(OAIContinuousProjectDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectInvoicesSignalError() instead")
    void getContinuousProjectInvoicesSignalE(OAIContinuousProjectInvoices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectInvoicesSignalError(OAIContinuousProjectInvoices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectProgressSignalError() instead")
    void getContinuousProjectProgressSignalE(OAIContinuousProjectProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectProgressSignalError(OAIContinuousProjectProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectsSignalError() instead")
    void getContinuousProjectsSignalE(OAIContinuousProjectsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectsSignalError(OAIContinuousProjectsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForDocumentSignalError() instead")
    void getQuoteForDocumentSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForDocumentSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForDocumentsSignalError() instead")
    void getQuoteForDocumentsSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForDocumentsSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForLanguageSignalError() instead")
    void getQuoteForLanguageSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForLanguageSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForLanguagesSignalError() instead")
    void getQuoteForLanguagesSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForLanguagesSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalError() instead")
    void getSubscriptionSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postContinuousProjectDocumentProgressSignalError() instead")
    void postContinuousProjectDocumentProgressSignalE(OAIProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postContinuousProjectDocumentProgressSignalError(OAIProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetActiveWidgetTokenSignalError() instead")
    void resetActiveWidgetTokenSignalE(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetActiveWidgetTokenSignalError(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateSignalError() instead")
    void translateSignalE(OAIInstantTranslationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translateSignalError(OAIInstantTranslationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActiveWidgetSignalError() instead")
    void updateActiveWidgetSignalE(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActiveWidgetSignalError(OAIActiveWidget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContinuousProjectSignalError() instead")
    void updateContinuousProjectSignalE(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContinuousProjectSignalError(OAIContinuousProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentSignalError() instead")
    void updateDocumentSignalE(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentSignalError(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalError() instead")
    void updateSubscriptionSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionPaymentMethodSignalError() instead")
    void updateSubscriptionPaymentMethodSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionPaymentMethodSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDocumentSignalErrorFull() instead")
    void addDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectAnalyticsSignalErrorFull() instead")
    void collectAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeSignalErrorFull() instead")
    void completeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeContinuousDocumentSignalErrorFull() instead")
    void completeContinuousDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeContinuousDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeLanguageSignalErrorFull() instead")
    void completeLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createActiveWidgetSignalErrorFull() instead")
    void createActiveWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createActiveWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createContinuousProjectSignalErrorFull() instead")
    void createContinuousProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContinuousProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionSignalErrorFull() instead")
    void createSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActiveWidgetSignalErrorFull() instead")
    void deleteActiveWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActiveWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteContinuousProjectSignalErrorFull() instead")
    void deleteContinuousProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteContinuousProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalErrorFull() instead")
    void deleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveWidgetSignalErrorFull() instead")
    void getActiveWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveWidgetsSignalErrorFull() instead")
    void getActiveWidgetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveWidgetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyticsTokenSignalErrorFull() instead")
    void getAnalyticsTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyticsTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectSignalErrorFull() instead")
    void getContinuousProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentSignalErrorFull() instead")
    void getContinuousProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentProgressSignalErrorFull() instead")
    void getContinuousProjectDocumentProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectDocumentsSignalErrorFull() instead")
    void getContinuousProjectDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectInvoicesSignalErrorFull() instead")
    void getContinuousProjectInvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectInvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectProgressSignalErrorFull() instead")
    void getContinuousProjectProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectsSignalErrorFull() instead")
    void getContinuousProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForDocumentSignalErrorFull() instead")
    void getQuoteForDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForDocumentsSignalErrorFull() instead")
    void getQuoteForDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForLanguageSignalErrorFull() instead")
    void getQuoteForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteForLanguagesSignalErrorFull() instead")
    void getQuoteForLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteForLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalErrorFull() instead")
    void getSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postContinuousProjectDocumentProgressSignalErrorFull() instead")
    void postContinuousProjectDocumentProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postContinuousProjectDocumentProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetActiveWidgetTokenSignalErrorFull() instead")
    void resetActiveWidgetTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetActiveWidgetTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateSignalErrorFull() instead")
    void translateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActiveWidgetSignalErrorFull() instead")
    void updateActiveWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActiveWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContinuousProjectSignalErrorFull() instead")
    void updateContinuousProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContinuousProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentSignalErrorFull() instead")
    void updateDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalErrorFull() instead")
    void updateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionPaymentMethodSignalErrorFull() instead")
    void updateSubscriptionPaymentMethodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionPaymentMethodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
