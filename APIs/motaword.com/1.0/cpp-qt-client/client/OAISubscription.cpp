/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_downgrade_isSet = false;
    m_downgrade_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_schedule_name_isSet = false;
    m_schedule_name_isValid = false;

    m_schedule_start_isSet = false;
    m_schedule_start_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_upgrade_isSet = false;
    m_upgrade_isValid = false;

    m_with_trial_isSet = false;
    m_with_trial_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_downgrade_isValid = ::OpenAPI::fromJsonValue(m_downgrade, json[QString("downgrade")]);
    m_downgrade_isSet = !json[QString("downgrade")].isNull() && m_downgrade_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("plan_id")]);
    m_plan_id_isSet = !json[QString("plan_id")].isNull() && m_plan_id_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("plan_name")]);
    m_plan_name_isSet = !json[QString("plan_name")].isNull() && m_plan_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_schedule_name, json[QString("schedule_name")]);
    m_schedule_name_isSet = !json[QString("schedule_name")].isNull() && m_schedule_name_isValid;

    m_schedule_start_isValid = ::OpenAPI::fromJsonValue(m_schedule_start, json[QString("schedule_start")]);
    m_schedule_start_isSet = !json[QString("schedule_start")].isNull() && m_schedule_start_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_upgrade_isValid = ::OpenAPI::fromJsonValue(m_upgrade, json[QString("upgrade")]);
    m_upgrade_isSet = !json[QString("upgrade")].isNull() && m_upgrade_isValid;

    m_with_trial_isValid = ::OpenAPI::fromJsonValue(m_with_trial, json[QString("withTrial")]);
    m_with_trial_isSet = !json[QString("withTrial")].isNull() && m_with_trial_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_downgrade.size() > 0) {
        obj.insert(QString("downgrade"), ::OpenAPI::toJsonValue(m_downgrade));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("plan_id"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("plan_name"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_schedule_name_isSet) {
        obj.insert(QString("schedule_name"), ::OpenAPI::toJsonValue(m_schedule_name));
    }
    if (m_schedule_start_isSet) {
        obj.insert(QString("schedule_start"), ::OpenAPI::toJsonValue(m_schedule_start));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_upgrade.size() > 0) {
        obj.insert(QString("upgrade"), ::OpenAPI::toJsonValue(m_upgrade));
    }
    if (m_with_trial_isSet) {
        obj.insert(QString("withTrial"), ::OpenAPI::toJsonValue(m_with_trial));
    }
    return obj;
}

QList<QString> OAISubscription::getDowngrade() const {
    return m_downgrade;
}
void OAISubscription::setDowngrade(const QList<QString> &downgrade) {
    m_downgrade = downgrade;
    m_downgrade_isSet = true;
}

bool OAISubscription::is_downgrade_Set() const{
    return m_downgrade_isSet;
}

bool OAISubscription::is_downgrade_Valid() const{
    return m_downgrade_isValid;
}

qint32 OAISubscription::getPaymentMethod() const {
    return m_payment_method;
}
void OAISubscription::setPaymentMethod(const qint32 &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAISubscription::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAISubscription::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QDateTime OAISubscription::getPeriodEnd() const {
    return m_period_end;
}
void OAISubscription::setPeriodEnd(const QDateTime &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAISubscription::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAISubscription::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QString OAISubscription::getPlanId() const {
    return m_plan_id;
}
void OAISubscription::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAISubscription::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAISubscription::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAISubscription::getPlanName() const {
    return m_plan_name;
}
void OAISubscription::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAISubscription::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAISubscription::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

QString OAISubscription::getPrice() const {
    return m_price;
}
void OAISubscription::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISubscription::is_price_Set() const{
    return m_price_isSet;
}

bool OAISubscription::is_price_Valid() const{
    return m_price_isValid;
}

QList<QJsonValue> OAISubscription::getProducts() const {
    return m_products;
}
void OAISubscription::setProducts(const QList<QJsonValue> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAISubscription::is_products_Set() const{
    return m_products_isSet;
}

bool OAISubscription::is_products_Valid() const{
    return m_products_isValid;
}

QString OAISubscription::getScheduleName() const {
    return m_schedule_name;
}
void OAISubscription::setScheduleName(const QString &schedule_name) {
    m_schedule_name = schedule_name;
    m_schedule_name_isSet = true;
}

bool OAISubscription::is_schedule_name_Set() const{
    return m_schedule_name_isSet;
}

bool OAISubscription::is_schedule_name_Valid() const{
    return m_schedule_name_isValid;
}

QDateTime OAISubscription::getScheduleStart() const {
    return m_schedule_start;
}
void OAISubscription::setScheduleStart(const QDateTime &schedule_start) {
    m_schedule_start = schedule_start;
    m_schedule_start_isSet = true;
}

bool OAISubscription::is_schedule_start_Set() const{
    return m_schedule_start_isSet;
}

bool OAISubscription::is_schedule_start_Valid() const{
    return m_schedule_start_isValid;
}

QString OAISubscription::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscription::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QList<QString> OAISubscription::getUpgrade() const {
    return m_upgrade;
}
void OAISubscription::setUpgrade(const QList<QString> &upgrade) {
    m_upgrade = upgrade;
    m_upgrade_isSet = true;
}

bool OAISubscription::is_upgrade_Set() const{
    return m_upgrade_isSet;
}

bool OAISubscription::is_upgrade_Valid() const{
    return m_upgrade_isValid;
}

QJsonValue OAISubscription::getWithTrial() const {
    return m_with_trial;
}
void OAISubscription::setWithTrial(const QJsonValue &with_trial) {
    m_with_trial = with_trial;
    m_with_trial_isSet = true;
}

bool OAISubscription::is_with_trial_Set() const{
    return m_with_trial_isSet;
}

bool OAISubscription::is_with_trial_Valid() const{
    return m_with_trial_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downgrade.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_trial_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
