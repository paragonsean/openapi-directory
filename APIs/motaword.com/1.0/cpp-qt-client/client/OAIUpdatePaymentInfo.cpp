/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePaymentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePaymentInfo::OAIUpdatePaymentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePaymentInfo::OAIUpdatePaymentInfo() {
    this->initializeModel();
}

OAIUpdatePaymentInfo::~OAIUpdatePaymentInfo() {}

void OAIUpdatePaymentInfo::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_save_as_corporate_primary_isSet = false;
    m_save_as_corporate_primary_isValid = false;

    m_share_with_corporate_users_isSet = false;
    m_share_with_corporate_users_isValid = false;

    m_stripe_token_isSet = false;
    m_stripe_token_isValid = false;
}

void OAIUpdatePaymentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePaymentInfo::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_save_as_corporate_primary_isValid = ::OpenAPI::fromJsonValue(m_save_as_corporate_primary, json[QString("save_as_corporate_primary")]);
    m_save_as_corporate_primary_isSet = !json[QString("save_as_corporate_primary")].isNull() && m_save_as_corporate_primary_isValid;

    m_share_with_corporate_users_isValid = ::OpenAPI::fromJsonValue(m_share_with_corporate_users, json[QString("share_with_corporate_users")]);
    m_share_with_corporate_users_isSet = !json[QString("share_with_corporate_users")].isNull() && m_share_with_corporate_users_isValid;

    m_stripe_token_isValid = ::OpenAPI::fromJsonValue(m_stripe_token, json[QString("stripeToken")]);
    m_stripe_token_isSet = !json[QString("stripeToken")].isNull() && m_stripe_token_isValid;
}

QString OAIUpdatePaymentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePaymentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_save_as_corporate_primary_isSet) {
        obj.insert(QString("save_as_corporate_primary"), ::OpenAPI::toJsonValue(m_save_as_corporate_primary));
    }
    if (m_share_with_corporate_users_isSet) {
        obj.insert(QString("share_with_corporate_users"), ::OpenAPI::toJsonValue(m_share_with_corporate_users));
    }
    if (m_stripe_token_isSet) {
        obj.insert(QString("stripeToken"), ::OpenAPI::toJsonValue(m_stripe_token));
    }
    return obj;
}

QString OAIUpdatePaymentInfo::getCity() const {
    return m_city;
}
void OAIUpdatePaymentInfo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUpdatePaymentInfo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUpdatePaymentInfo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUpdatePaymentInfo::getCountry() const {
    return m_country;
}
void OAIUpdatePaymentInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUpdatePaymentInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUpdatePaymentInfo::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIUpdatePaymentInfo::getPhone() const {
    return m_phone;
}
void OAIUpdatePaymentInfo::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUpdatePaymentInfo::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUpdatePaymentInfo::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUpdatePaymentInfo::getState() const {
    return m_state;
}
void OAIUpdatePaymentInfo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdatePaymentInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdatePaymentInfo::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUpdatePaymentInfo::getStreet() const {
    return m_street;
}
void OAIUpdatePaymentInfo::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIUpdatePaymentInfo::is_street_Set() const{
    return m_street_isSet;
}

bool OAIUpdatePaymentInfo::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIUpdatePaymentInfo::getZip() const {
    return m_zip;
}
void OAIUpdatePaymentInfo::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIUpdatePaymentInfo::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIUpdatePaymentInfo::is_zip_Valid() const{
    return m_zip_isValid;
}

QString OAIUpdatePaymentInfo::getBin() const {
    return m_bin;
}
void OAIUpdatePaymentInfo::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAIUpdatePaymentInfo::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAIUpdatePaymentInfo::is_bin_Valid() const{
    return m_bin_isValid;
}

bool OAIUpdatePaymentInfo::isSaveAsCorporatePrimary() const {
    return m_save_as_corporate_primary;
}
void OAIUpdatePaymentInfo::setSaveAsCorporatePrimary(const bool &save_as_corporate_primary) {
    m_save_as_corporate_primary = save_as_corporate_primary;
    m_save_as_corporate_primary_isSet = true;
}

bool OAIUpdatePaymentInfo::is_save_as_corporate_primary_Set() const{
    return m_save_as_corporate_primary_isSet;
}

bool OAIUpdatePaymentInfo::is_save_as_corporate_primary_Valid() const{
    return m_save_as_corporate_primary_isValid;
}

bool OAIUpdatePaymentInfo::isShareWithCorporateUsers() const {
    return m_share_with_corporate_users;
}
void OAIUpdatePaymentInfo::setShareWithCorporateUsers(const bool &share_with_corporate_users) {
    m_share_with_corporate_users = share_with_corporate_users;
    m_share_with_corporate_users_isSet = true;
}

bool OAIUpdatePaymentInfo::is_share_with_corporate_users_Set() const{
    return m_share_with_corporate_users_isSet;
}

bool OAIUpdatePaymentInfo::is_share_with_corporate_users_Valid() const{
    return m_share_with_corporate_users_isValid;
}

QString OAIUpdatePaymentInfo::getStripeToken() const {
    return m_stripe_token;
}
void OAIUpdatePaymentInfo::setStripeToken(const QString &stripe_token) {
    m_stripe_token = stripe_token;
    m_stripe_token_isSet = true;
}

bool OAIUpdatePaymentInfo::is_stripe_token_Set() const{
    return m_stripe_token_isSet;
}

bool OAIUpdatePaymentInfo::is_stripe_token_Valid() const{
    return m_stripe_token_isValid;
}

bool OAIUpdatePaymentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_save_as_corporate_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_with_corporate_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePaymentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
