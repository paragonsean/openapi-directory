/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarning::OAIEarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarning::OAIEarning() {
    this->initializeModel();
}

OAIEarning::~OAIEarning() {}

void OAIEarning::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;

    m_words_approved_isSet = false;
    m_words_approved_isValid = false;

    m_words_translated_isSet = false;
    m_words_translated_isValid = false;
}

void OAIEarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEarning::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;

    m_words_approved_isValid = ::OpenAPI::fromJsonValue(m_words_approved, json[QString("words_approved")]);
    m_words_approved_isSet = !json[QString("words_approved")].isNull() && m_words_approved_isValid;

    m_words_translated_isValid = ::OpenAPI::fromJsonValue(m_words_translated, json[QString("words_translated")]);
    m_words_translated_isSet = !json[QString("words_translated")].isNull() && m_words_translated_isValid;
}

QString OAIEarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEarning::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_words_isSet) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    if (m_words_approved_isSet) {
        obj.insert(QString("words_approved"), ::OpenAPI::toJsonValue(m_words_approved));
    }
    if (m_words_translated_isSet) {
        obj.insert(QString("words_translated"), ::OpenAPI::toJsonValue(m_words_translated));
    }
    return obj;
}

float OAIEarning::getAmount() const {
    return m_amount;
}
void OAIEarning::setAmount(const float &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIEarning::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIEarning::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIEarning::getCurrency() const {
    return m_currency;
}
void OAIEarning::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIEarning::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIEarning::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIEarning::getDueDate() const {
    return m_due_date;
}
void OAIEarning::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIEarning::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIEarning::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIEarning::getStatus() const {
    return m_status;
}
void OAIEarning::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEarning::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEarning::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIEarning::getWords() const {
    return m_words;
}
void OAIEarning::setWords(const qint64 &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAIEarning::is_words_Set() const{
    return m_words_isSet;
}

bool OAIEarning::is_words_Valid() const{
    return m_words_isValid;
}

qint64 OAIEarning::getWordsApproved() const {
    return m_words_approved;
}
void OAIEarning::setWordsApproved(const qint64 &words_approved) {
    m_words_approved = words_approved;
    m_words_approved_isSet = true;
}

bool OAIEarning::is_words_approved_Set() const{
    return m_words_approved_isSet;
}

bool OAIEarning::is_words_approved_Valid() const{
    return m_words_approved_isValid;
}

qint64 OAIEarning::getWordsTranslated() const {
    return m_words_translated;
}
void OAIEarning::setWordsTranslated(const qint64 &words_translated) {
    m_words_translated = words_translated;
    m_words_translated_isSet = true;
}

bool OAIEarning::is_words_translated_Set() const{
    return m_words_translated_isSet;
}

bool OAIEarning::is_words_translated_Valid() const{
    return m_words_translated_isValid;
}

bool OAIEarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words_translated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
