/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileSurvey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileSurvey::OAIProfileSurvey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileSurvey::OAIProfileSurvey() {
    this->initializeModel();
}

OAIProfileSurvey::~OAIProfileSurvey() {}

void OAIProfileSurvey::initializeModel() {

    m_current_services_isSet = false;
    m_current_services_isValid = false;

    m_daily_proofreading_capacity_isSet = false;
    m_daily_proofreading_capacity_isValid = false;

    m_daily_translation_capacity_isSet = false;
    m_daily_translation_capacity_isValid = false;

    m_dtp_software_isSet = false;
    m_dtp_software_isValid = false;

    m_experience_isSet = false;
    m_experience_isValid = false;

    m_is_certified_translator_isSet = false;
    m_is_certified_translator_isValid = false;

    m_is_sworn_translator_isSet = false;
    m_is_sworn_translator_isValid = false;

    m_memoq_isSet = false;
    m_memoq_isValid = false;

    m_memsource_isSet = false;
    m_memsource_isValid = false;

    m_omegat_isSet = false;
    m_omegat_isValid = false;

    m_proofreader_experience_isSet = false;
    m_proofreader_experience_isValid = false;

    m_provides_creative_writing_service_isSet = false;
    m_provides_creative_writing_service_isValid = false;

    m_provides_postedit_service_isSet = false;
    m_provides_postedit_service_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sdl_trados_isSet = false;
    m_sdl_trados_isValid = false;

    m_skype_id_isSet = false;
    m_skype_id_isValid = false;

    m_smartcat_isSet = false;
    m_smartcat_isValid = false;

    m_smartling_isSet = false;
    m_smartling_isValid = false;

    m_software_isSet = false;
    m_software_isValid = false;

    m_specialization_isSet = false;
    m_specialization_isValid = false;

    m_subtitle_edit_isSet = false;
    m_subtitle_edit_isValid = false;

    m_subtitle_workshop_isSet = false;
    m_subtitle_workshop_isValid = false;

    m_translator_association_isSet = false;
    m_translator_association_isValid = false;

    m_transsuite_2000_isSet = false;
    m_transsuite_2000_isValid = false;

    m_vendor_profile_lsp_isSet = false;
    m_vendor_profile_lsp_isValid = false;

    m_wordbee_isSet = false;
    m_wordbee_isValid = false;

    m_wordfast_isSet = false;
    m_wordfast_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;

    m_work_with_isSet = false;
    m_work_with_isValid = false;

    m_working_as_isSet = false;
    m_working_as_isValid = false;

    m_working_timezone_isSet = false;
    m_working_timezone_isValid = false;

    m_xbench_isSet = false;
    m_xbench_isValid = false;

    m_xtm_isSet = false;
    m_xtm_isValid = false;
}

void OAIProfileSurvey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileSurvey::fromJsonObject(QJsonObject json) {

    m_current_services_isValid = ::OpenAPI::fromJsonValue(m_current_services, json[QString("current_services")]);
    m_current_services_isSet = !json[QString("current_services")].isNull() && m_current_services_isValid;

    m_daily_proofreading_capacity_isValid = ::OpenAPI::fromJsonValue(m_daily_proofreading_capacity, json[QString("daily_proofreading_capacity")]);
    m_daily_proofreading_capacity_isSet = !json[QString("daily_proofreading_capacity")].isNull() && m_daily_proofreading_capacity_isValid;

    m_daily_translation_capacity_isValid = ::OpenAPI::fromJsonValue(m_daily_translation_capacity, json[QString("daily_translation_capacity")]);
    m_daily_translation_capacity_isSet = !json[QString("daily_translation_capacity")].isNull() && m_daily_translation_capacity_isValid;

    m_dtp_software_isValid = ::OpenAPI::fromJsonValue(m_dtp_software, json[QString("dtp_software")]);
    m_dtp_software_isSet = !json[QString("dtp_software")].isNull() && m_dtp_software_isValid;

    m_experience_isValid = ::OpenAPI::fromJsonValue(m_experience, json[QString("experience")]);
    m_experience_isSet = !json[QString("experience")].isNull() && m_experience_isValid;

    m_is_certified_translator_isValid = ::OpenAPI::fromJsonValue(m_is_certified_translator, json[QString("is_certified_translator")]);
    m_is_certified_translator_isSet = !json[QString("is_certified_translator")].isNull() && m_is_certified_translator_isValid;

    m_is_sworn_translator_isValid = ::OpenAPI::fromJsonValue(m_is_sworn_translator, json[QString("is_sworn_translator")]);
    m_is_sworn_translator_isSet = !json[QString("is_sworn_translator")].isNull() && m_is_sworn_translator_isValid;

    m_memoq_isValid = ::OpenAPI::fromJsonValue(m_memoq, json[QString("memoq")]);
    m_memoq_isSet = !json[QString("memoq")].isNull() && m_memoq_isValid;

    m_memsource_isValid = ::OpenAPI::fromJsonValue(m_memsource, json[QString("memsource")]);
    m_memsource_isSet = !json[QString("memsource")].isNull() && m_memsource_isValid;

    m_omegat_isValid = ::OpenAPI::fromJsonValue(m_omegat, json[QString("omegat")]);
    m_omegat_isSet = !json[QString("omegat")].isNull() && m_omegat_isValid;

    m_proofreader_experience_isValid = ::OpenAPI::fromJsonValue(m_proofreader_experience, json[QString("proofreader_experience")]);
    m_proofreader_experience_isSet = !json[QString("proofreader_experience")].isNull() && m_proofreader_experience_isValid;

    m_provides_creative_writing_service_isValid = ::OpenAPI::fromJsonValue(m_provides_creative_writing_service, json[QString("provides_creative_writing_service")]);
    m_provides_creative_writing_service_isSet = !json[QString("provides_creative_writing_service")].isNull() && m_provides_creative_writing_service_isValid;

    m_provides_postedit_service_isValid = ::OpenAPI::fromJsonValue(m_provides_postedit_service, json[QString("provides_postedit_service")]);
    m_provides_postedit_service_isSet = !json[QString("provides_postedit_service")].isNull() && m_provides_postedit_service_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sdl_trados_isValid = ::OpenAPI::fromJsonValue(m_sdl_trados, json[QString("sdl_trados")]);
    m_sdl_trados_isSet = !json[QString("sdl_trados")].isNull() && m_sdl_trados_isValid;

    m_skype_id_isValid = ::OpenAPI::fromJsonValue(m_skype_id, json[QString("skype_id")]);
    m_skype_id_isSet = !json[QString("skype_id")].isNull() && m_skype_id_isValid;

    m_smartcat_isValid = ::OpenAPI::fromJsonValue(m_smartcat, json[QString("smartcat")]);
    m_smartcat_isSet = !json[QString("smartcat")].isNull() && m_smartcat_isValid;

    m_smartling_isValid = ::OpenAPI::fromJsonValue(m_smartling, json[QString("smartling")]);
    m_smartling_isSet = !json[QString("smartling")].isNull() && m_smartling_isValid;

    m_software_isValid = ::OpenAPI::fromJsonValue(m_software, json[QString("software")]);
    m_software_isSet = !json[QString("software")].isNull() && m_software_isValid;

    m_specialization_isValid = ::OpenAPI::fromJsonValue(m_specialization, json[QString("specialization")]);
    m_specialization_isSet = !json[QString("specialization")].isNull() && m_specialization_isValid;

    m_subtitle_edit_isValid = ::OpenAPI::fromJsonValue(m_subtitle_edit, json[QString("subtitle_edit")]);
    m_subtitle_edit_isSet = !json[QString("subtitle_edit")].isNull() && m_subtitle_edit_isValid;

    m_subtitle_workshop_isValid = ::OpenAPI::fromJsonValue(m_subtitle_workshop, json[QString("subtitle_workshop")]);
    m_subtitle_workshop_isSet = !json[QString("subtitle_workshop")].isNull() && m_subtitle_workshop_isValid;

    m_translator_association_isValid = ::OpenAPI::fromJsonValue(m_translator_association, json[QString("translator_association")]);
    m_translator_association_isSet = !json[QString("translator_association")].isNull() && m_translator_association_isValid;

    m_transsuite_2000_isValid = ::OpenAPI::fromJsonValue(m_transsuite_2000, json[QString("transsuite_2000")]);
    m_transsuite_2000_isSet = !json[QString("transsuite_2000")].isNull() && m_transsuite_2000_isValid;

    m_vendor_profile_lsp_isValid = ::OpenAPI::fromJsonValue(m_vendor_profile_lsp, json[QString("vendor_profile_lsp")]);
    m_vendor_profile_lsp_isSet = !json[QString("vendor_profile_lsp")].isNull() && m_vendor_profile_lsp_isValid;

    m_wordbee_isValid = ::OpenAPI::fromJsonValue(m_wordbee, json[QString("wordbee")]);
    m_wordbee_isSet = !json[QString("wordbee")].isNull() && m_wordbee_isValid;

    m_wordfast_isValid = ::OpenAPI::fromJsonValue(m_wordfast, json[QString("wordfast")]);
    m_wordfast_isSet = !json[QString("wordfast")].isNull() && m_wordfast_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("work_type")]);
    m_work_type_isSet = !json[QString("work_type")].isNull() && m_work_type_isValid;

    m_work_with_isValid = ::OpenAPI::fromJsonValue(m_work_with, json[QString("work_with")]);
    m_work_with_isSet = !json[QString("work_with")].isNull() && m_work_with_isValid;

    m_working_as_isValid = ::OpenAPI::fromJsonValue(m_working_as, json[QString("working_as")]);
    m_working_as_isSet = !json[QString("working_as")].isNull() && m_working_as_isValid;

    m_working_timezone_isValid = ::OpenAPI::fromJsonValue(m_working_timezone, json[QString("working_timezone")]);
    m_working_timezone_isSet = !json[QString("working_timezone")].isNull() && m_working_timezone_isValid;

    m_xbench_isValid = ::OpenAPI::fromJsonValue(m_xbench, json[QString("xbench")]);
    m_xbench_isSet = !json[QString("xbench")].isNull() && m_xbench_isValid;

    m_xtm_isValid = ::OpenAPI::fromJsonValue(m_xtm, json[QString("xtm")]);
    m_xtm_isSet = !json[QString("xtm")].isNull() && m_xtm_isValid;
}

QString OAIProfileSurvey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileSurvey::asJsonObject() const {
    QJsonObject obj;
    if (m_current_services_isSet) {
        obj.insert(QString("current_services"), ::OpenAPI::toJsonValue(m_current_services));
    }
    if (m_daily_proofreading_capacity_isSet) {
        obj.insert(QString("daily_proofreading_capacity"), ::OpenAPI::toJsonValue(m_daily_proofreading_capacity));
    }
    if (m_daily_translation_capacity_isSet) {
        obj.insert(QString("daily_translation_capacity"), ::OpenAPI::toJsonValue(m_daily_translation_capacity));
    }
    if (m_dtp_software_isSet) {
        obj.insert(QString("dtp_software"), ::OpenAPI::toJsonValue(m_dtp_software));
    }
    if (m_experience_isSet) {
        obj.insert(QString("experience"), ::OpenAPI::toJsonValue(m_experience));
    }
    if (m_is_certified_translator_isSet) {
        obj.insert(QString("is_certified_translator"), ::OpenAPI::toJsonValue(m_is_certified_translator));
    }
    if (m_is_sworn_translator_isSet) {
        obj.insert(QString("is_sworn_translator"), ::OpenAPI::toJsonValue(m_is_sworn_translator));
    }
    if (m_memoq_isSet) {
        obj.insert(QString("memoq"), ::OpenAPI::toJsonValue(m_memoq));
    }
    if (m_memsource_isSet) {
        obj.insert(QString("memsource"), ::OpenAPI::toJsonValue(m_memsource));
    }
    if (m_omegat_isSet) {
        obj.insert(QString("omegat"), ::OpenAPI::toJsonValue(m_omegat));
    }
    if (m_proofreader_experience_isSet) {
        obj.insert(QString("proofreader_experience"), ::OpenAPI::toJsonValue(m_proofreader_experience));
    }
    if (m_provides_creative_writing_service_isSet) {
        obj.insert(QString("provides_creative_writing_service"), ::OpenAPI::toJsonValue(m_provides_creative_writing_service));
    }
    if (m_provides_postedit_service_isSet) {
        obj.insert(QString("provides_postedit_service"), ::OpenAPI::toJsonValue(m_provides_postedit_service));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sdl_trados_isSet) {
        obj.insert(QString("sdl_trados"), ::OpenAPI::toJsonValue(m_sdl_trados));
    }
    if (m_skype_id_isSet) {
        obj.insert(QString("skype_id"), ::OpenAPI::toJsonValue(m_skype_id));
    }
    if (m_smartcat_isSet) {
        obj.insert(QString("smartcat"), ::OpenAPI::toJsonValue(m_smartcat));
    }
    if (m_smartling_isSet) {
        obj.insert(QString("smartling"), ::OpenAPI::toJsonValue(m_smartling));
    }
    if (m_software_isSet) {
        obj.insert(QString("software"), ::OpenAPI::toJsonValue(m_software));
    }
    if (m_specialization_isSet) {
        obj.insert(QString("specialization"), ::OpenAPI::toJsonValue(m_specialization));
    }
    if (m_subtitle_edit_isSet) {
        obj.insert(QString("subtitle_edit"), ::OpenAPI::toJsonValue(m_subtitle_edit));
    }
    if (m_subtitle_workshop_isSet) {
        obj.insert(QString("subtitle_workshop"), ::OpenAPI::toJsonValue(m_subtitle_workshop));
    }
    if (m_translator_association_isSet) {
        obj.insert(QString("translator_association"), ::OpenAPI::toJsonValue(m_translator_association));
    }
    if (m_transsuite_2000_isSet) {
        obj.insert(QString("transsuite_2000"), ::OpenAPI::toJsonValue(m_transsuite_2000));
    }
    if (m_vendor_profile_lsp_isSet) {
        obj.insert(QString("vendor_profile_lsp"), ::OpenAPI::toJsonValue(m_vendor_profile_lsp));
    }
    if (m_wordbee_isSet) {
        obj.insert(QString("wordbee"), ::OpenAPI::toJsonValue(m_wordbee));
    }
    if (m_wordfast_isSet) {
        obj.insert(QString("wordfast"), ::OpenAPI::toJsonValue(m_wordfast));
    }
    if (m_work_type_isSet) {
        obj.insert(QString("work_type"), ::OpenAPI::toJsonValue(m_work_type));
    }
    if (m_work_with_isSet) {
        obj.insert(QString("work_with"), ::OpenAPI::toJsonValue(m_work_with));
    }
    if (m_working_as_isSet) {
        obj.insert(QString("working_as"), ::OpenAPI::toJsonValue(m_working_as));
    }
    if (m_working_timezone_isSet) {
        obj.insert(QString("working_timezone"), ::OpenAPI::toJsonValue(m_working_timezone));
    }
    if (m_xbench_isSet) {
        obj.insert(QString("xbench"), ::OpenAPI::toJsonValue(m_xbench));
    }
    if (m_xtm_isSet) {
        obj.insert(QString("xtm"), ::OpenAPI::toJsonValue(m_xtm));
    }
    return obj;
}

QString OAIProfileSurvey::getCurrentServices() const {
    return m_current_services;
}
void OAIProfileSurvey::setCurrentServices(const QString &current_services) {
    m_current_services = current_services;
    m_current_services_isSet = true;
}

bool OAIProfileSurvey::is_current_services_Set() const{
    return m_current_services_isSet;
}

bool OAIProfileSurvey::is_current_services_Valid() const{
    return m_current_services_isValid;
}

QString OAIProfileSurvey::getDailyProofreadingCapacity() const {
    return m_daily_proofreading_capacity;
}
void OAIProfileSurvey::setDailyProofreadingCapacity(const QString &daily_proofreading_capacity) {
    m_daily_proofreading_capacity = daily_proofreading_capacity;
    m_daily_proofreading_capacity_isSet = true;
}

bool OAIProfileSurvey::is_daily_proofreading_capacity_Set() const{
    return m_daily_proofreading_capacity_isSet;
}

bool OAIProfileSurvey::is_daily_proofreading_capacity_Valid() const{
    return m_daily_proofreading_capacity_isValid;
}

QString OAIProfileSurvey::getDailyTranslationCapacity() const {
    return m_daily_translation_capacity;
}
void OAIProfileSurvey::setDailyTranslationCapacity(const QString &daily_translation_capacity) {
    m_daily_translation_capacity = daily_translation_capacity;
    m_daily_translation_capacity_isSet = true;
}

bool OAIProfileSurvey::is_daily_translation_capacity_Set() const{
    return m_daily_translation_capacity_isSet;
}

bool OAIProfileSurvey::is_daily_translation_capacity_Valid() const{
    return m_daily_translation_capacity_isValid;
}

QString OAIProfileSurvey::getDtpSoftware() const {
    return m_dtp_software;
}
void OAIProfileSurvey::setDtpSoftware(const QString &dtp_software) {
    m_dtp_software = dtp_software;
    m_dtp_software_isSet = true;
}

bool OAIProfileSurvey::is_dtp_software_Set() const{
    return m_dtp_software_isSet;
}

bool OAIProfileSurvey::is_dtp_software_Valid() const{
    return m_dtp_software_isValid;
}

QString OAIProfileSurvey::getExperience() const {
    return m_experience;
}
void OAIProfileSurvey::setExperience(const QString &experience) {
    m_experience = experience;
    m_experience_isSet = true;
}

bool OAIProfileSurvey::is_experience_Set() const{
    return m_experience_isSet;
}

bool OAIProfileSurvey::is_experience_Valid() const{
    return m_experience_isValid;
}

QString OAIProfileSurvey::getIsCertifiedTranslator() const {
    return m_is_certified_translator;
}
void OAIProfileSurvey::setIsCertifiedTranslator(const QString &is_certified_translator) {
    m_is_certified_translator = is_certified_translator;
    m_is_certified_translator_isSet = true;
}

bool OAIProfileSurvey::is_is_certified_translator_Set() const{
    return m_is_certified_translator_isSet;
}

bool OAIProfileSurvey::is_is_certified_translator_Valid() const{
    return m_is_certified_translator_isValid;
}

QString OAIProfileSurvey::getIsSwornTranslator() const {
    return m_is_sworn_translator;
}
void OAIProfileSurvey::setIsSwornTranslator(const QString &is_sworn_translator) {
    m_is_sworn_translator = is_sworn_translator;
    m_is_sworn_translator_isSet = true;
}

bool OAIProfileSurvey::is_is_sworn_translator_Set() const{
    return m_is_sworn_translator_isSet;
}

bool OAIProfileSurvey::is_is_sworn_translator_Valid() const{
    return m_is_sworn_translator_isValid;
}

QString OAIProfileSurvey::getMemoq() const {
    return m_memoq;
}
void OAIProfileSurvey::setMemoq(const QString &memoq) {
    m_memoq = memoq;
    m_memoq_isSet = true;
}

bool OAIProfileSurvey::is_memoq_Set() const{
    return m_memoq_isSet;
}

bool OAIProfileSurvey::is_memoq_Valid() const{
    return m_memoq_isValid;
}

QString OAIProfileSurvey::getMemsource() const {
    return m_memsource;
}
void OAIProfileSurvey::setMemsource(const QString &memsource) {
    m_memsource = memsource;
    m_memsource_isSet = true;
}

bool OAIProfileSurvey::is_memsource_Set() const{
    return m_memsource_isSet;
}

bool OAIProfileSurvey::is_memsource_Valid() const{
    return m_memsource_isValid;
}

QString OAIProfileSurvey::getOmegat() const {
    return m_omegat;
}
void OAIProfileSurvey::setOmegat(const QString &omegat) {
    m_omegat = omegat;
    m_omegat_isSet = true;
}

bool OAIProfileSurvey::is_omegat_Set() const{
    return m_omegat_isSet;
}

bool OAIProfileSurvey::is_omegat_Valid() const{
    return m_omegat_isValid;
}

QString OAIProfileSurvey::getProofreaderExperience() const {
    return m_proofreader_experience;
}
void OAIProfileSurvey::setProofreaderExperience(const QString &proofreader_experience) {
    m_proofreader_experience = proofreader_experience;
    m_proofreader_experience_isSet = true;
}

bool OAIProfileSurvey::is_proofreader_experience_Set() const{
    return m_proofreader_experience_isSet;
}

bool OAIProfileSurvey::is_proofreader_experience_Valid() const{
    return m_proofreader_experience_isValid;
}

QString OAIProfileSurvey::getProvidesCreativeWritingService() const {
    return m_provides_creative_writing_service;
}
void OAIProfileSurvey::setProvidesCreativeWritingService(const QString &provides_creative_writing_service) {
    m_provides_creative_writing_service = provides_creative_writing_service;
    m_provides_creative_writing_service_isSet = true;
}

bool OAIProfileSurvey::is_provides_creative_writing_service_Set() const{
    return m_provides_creative_writing_service_isSet;
}

bool OAIProfileSurvey::is_provides_creative_writing_service_Valid() const{
    return m_provides_creative_writing_service_isValid;
}

QString OAIProfileSurvey::getProvidesPosteditService() const {
    return m_provides_postedit_service;
}
void OAIProfileSurvey::setProvidesPosteditService(const QString &provides_postedit_service) {
    m_provides_postedit_service = provides_postedit_service;
    m_provides_postedit_service_isSet = true;
}

bool OAIProfileSurvey::is_provides_postedit_service_Set() const{
    return m_provides_postedit_service_isSet;
}

bool OAIProfileSurvey::is_provides_postedit_service_Valid() const{
    return m_provides_postedit_service_isValid;
}

QString OAIProfileSurvey::getReference() const {
    return m_reference;
}
void OAIProfileSurvey::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIProfileSurvey::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIProfileSurvey::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIProfileSurvey::getSdlTrados() const {
    return m_sdl_trados;
}
void OAIProfileSurvey::setSdlTrados(const QString &sdl_trados) {
    m_sdl_trados = sdl_trados;
    m_sdl_trados_isSet = true;
}

bool OAIProfileSurvey::is_sdl_trados_Set() const{
    return m_sdl_trados_isSet;
}

bool OAIProfileSurvey::is_sdl_trados_Valid() const{
    return m_sdl_trados_isValid;
}

QString OAIProfileSurvey::getSkypeId() const {
    return m_skype_id;
}
void OAIProfileSurvey::setSkypeId(const QString &skype_id) {
    m_skype_id = skype_id;
    m_skype_id_isSet = true;
}

bool OAIProfileSurvey::is_skype_id_Set() const{
    return m_skype_id_isSet;
}

bool OAIProfileSurvey::is_skype_id_Valid() const{
    return m_skype_id_isValid;
}

QString OAIProfileSurvey::getSmartcat() const {
    return m_smartcat;
}
void OAIProfileSurvey::setSmartcat(const QString &smartcat) {
    m_smartcat = smartcat;
    m_smartcat_isSet = true;
}

bool OAIProfileSurvey::is_smartcat_Set() const{
    return m_smartcat_isSet;
}

bool OAIProfileSurvey::is_smartcat_Valid() const{
    return m_smartcat_isValid;
}

QString OAIProfileSurvey::getSmartling() const {
    return m_smartling;
}
void OAIProfileSurvey::setSmartling(const QString &smartling) {
    m_smartling = smartling;
    m_smartling_isSet = true;
}

bool OAIProfileSurvey::is_smartling_Set() const{
    return m_smartling_isSet;
}

bool OAIProfileSurvey::is_smartling_Valid() const{
    return m_smartling_isValid;
}

QString OAIProfileSurvey::getSoftware() const {
    return m_software;
}
void OAIProfileSurvey::setSoftware(const QString &software) {
    m_software = software;
    m_software_isSet = true;
}

bool OAIProfileSurvey::is_software_Set() const{
    return m_software_isSet;
}

bool OAIProfileSurvey::is_software_Valid() const{
    return m_software_isValid;
}

QString OAIProfileSurvey::getSpecialization() const {
    return m_specialization;
}
void OAIProfileSurvey::setSpecialization(const QString &specialization) {
    m_specialization = specialization;
    m_specialization_isSet = true;
}

bool OAIProfileSurvey::is_specialization_Set() const{
    return m_specialization_isSet;
}

bool OAIProfileSurvey::is_specialization_Valid() const{
    return m_specialization_isValid;
}

QString OAIProfileSurvey::getSubtitleEdit() const {
    return m_subtitle_edit;
}
void OAIProfileSurvey::setSubtitleEdit(const QString &subtitle_edit) {
    m_subtitle_edit = subtitle_edit;
    m_subtitle_edit_isSet = true;
}

bool OAIProfileSurvey::is_subtitle_edit_Set() const{
    return m_subtitle_edit_isSet;
}

bool OAIProfileSurvey::is_subtitle_edit_Valid() const{
    return m_subtitle_edit_isValid;
}

QString OAIProfileSurvey::getSubtitleWorkshop() const {
    return m_subtitle_workshop;
}
void OAIProfileSurvey::setSubtitleWorkshop(const QString &subtitle_workshop) {
    m_subtitle_workshop = subtitle_workshop;
    m_subtitle_workshop_isSet = true;
}

bool OAIProfileSurvey::is_subtitle_workshop_Set() const{
    return m_subtitle_workshop_isSet;
}

bool OAIProfileSurvey::is_subtitle_workshop_Valid() const{
    return m_subtitle_workshop_isValid;
}

QString OAIProfileSurvey::getTranslatorAssociation() const {
    return m_translator_association;
}
void OAIProfileSurvey::setTranslatorAssociation(const QString &translator_association) {
    m_translator_association = translator_association;
    m_translator_association_isSet = true;
}

bool OAIProfileSurvey::is_translator_association_Set() const{
    return m_translator_association_isSet;
}

bool OAIProfileSurvey::is_translator_association_Valid() const{
    return m_translator_association_isValid;
}

QString OAIProfileSurvey::getTranssuite2000() const {
    return m_transsuite_2000;
}
void OAIProfileSurvey::setTranssuite2000(const QString &transsuite_2000) {
    m_transsuite_2000 = transsuite_2000;
    m_transsuite_2000_isSet = true;
}

bool OAIProfileSurvey::is_transsuite_2000_Set() const{
    return m_transsuite_2000_isSet;
}

bool OAIProfileSurvey::is_transsuite_2000_Valid() const{
    return m_transsuite_2000_isValid;
}

QString OAIProfileSurvey::getVendorProfileLsp() const {
    return m_vendor_profile_lsp;
}
void OAIProfileSurvey::setVendorProfileLsp(const QString &vendor_profile_lsp) {
    m_vendor_profile_lsp = vendor_profile_lsp;
    m_vendor_profile_lsp_isSet = true;
}

bool OAIProfileSurvey::is_vendor_profile_lsp_Set() const{
    return m_vendor_profile_lsp_isSet;
}

bool OAIProfileSurvey::is_vendor_profile_lsp_Valid() const{
    return m_vendor_profile_lsp_isValid;
}

QString OAIProfileSurvey::getWordbee() const {
    return m_wordbee;
}
void OAIProfileSurvey::setWordbee(const QString &wordbee) {
    m_wordbee = wordbee;
    m_wordbee_isSet = true;
}

bool OAIProfileSurvey::is_wordbee_Set() const{
    return m_wordbee_isSet;
}

bool OAIProfileSurvey::is_wordbee_Valid() const{
    return m_wordbee_isValid;
}

QString OAIProfileSurvey::getWordfast() const {
    return m_wordfast;
}
void OAIProfileSurvey::setWordfast(const QString &wordfast) {
    m_wordfast = wordfast;
    m_wordfast_isSet = true;
}

bool OAIProfileSurvey::is_wordfast_Set() const{
    return m_wordfast_isSet;
}

bool OAIProfileSurvey::is_wordfast_Valid() const{
    return m_wordfast_isValid;
}

QString OAIProfileSurvey::getWorkType() const {
    return m_work_type;
}
void OAIProfileSurvey::setWorkType(const QString &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIProfileSurvey::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIProfileSurvey::is_work_type_Valid() const{
    return m_work_type_isValid;
}

QString OAIProfileSurvey::getWorkWith() const {
    return m_work_with;
}
void OAIProfileSurvey::setWorkWith(const QString &work_with) {
    m_work_with = work_with;
    m_work_with_isSet = true;
}

bool OAIProfileSurvey::is_work_with_Set() const{
    return m_work_with_isSet;
}

bool OAIProfileSurvey::is_work_with_Valid() const{
    return m_work_with_isValid;
}

QString OAIProfileSurvey::getWorkingAs() const {
    return m_working_as;
}
void OAIProfileSurvey::setWorkingAs(const QString &working_as) {
    m_working_as = working_as;
    m_working_as_isSet = true;
}

bool OAIProfileSurvey::is_working_as_Set() const{
    return m_working_as_isSet;
}

bool OAIProfileSurvey::is_working_as_Valid() const{
    return m_working_as_isValid;
}

QString OAIProfileSurvey::getWorkingTimezone() const {
    return m_working_timezone;
}
void OAIProfileSurvey::setWorkingTimezone(const QString &working_timezone) {
    m_working_timezone = working_timezone;
    m_working_timezone_isSet = true;
}

bool OAIProfileSurvey::is_working_timezone_Set() const{
    return m_working_timezone_isSet;
}

bool OAIProfileSurvey::is_working_timezone_Valid() const{
    return m_working_timezone_isValid;
}

QString OAIProfileSurvey::getXbench() const {
    return m_xbench;
}
void OAIProfileSurvey::setXbench(const QString &xbench) {
    m_xbench = xbench;
    m_xbench_isSet = true;
}

bool OAIProfileSurvey::is_xbench_Set() const{
    return m_xbench_isSet;
}

bool OAIProfileSurvey::is_xbench_Valid() const{
    return m_xbench_isValid;
}

QString OAIProfileSurvey::getXtm() const {
    return m_xtm;
}
void OAIProfileSurvey::setXtm(const QString &xtm) {
    m_xtm = xtm;
    m_xtm_isSet = true;
}

bool OAIProfileSurvey::is_xtm_Set() const{
    return m_xtm_isSet;
}

bool OAIProfileSurvey::is_xtm_Valid() const{
    return m_xtm_isValid;
}

bool OAIProfileSurvey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_proofreading_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_translation_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtp_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sworn_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memoq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memsource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omegat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proofreader_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provides_creative_writing_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provides_postedit_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdl_trados_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smartcat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smartling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_workshop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translator_association_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transsuite_2000_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_profile_lsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wordbee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wordfast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xbench_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xtm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileSurvey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
