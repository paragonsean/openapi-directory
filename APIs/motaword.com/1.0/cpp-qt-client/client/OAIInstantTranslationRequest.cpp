/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstantTranslationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstantTranslationRequest::OAIInstantTranslationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstantTranslationRequest::OAIInstantTranslationRequest() {
    this->initializeModel();
}

OAIInstantTranslationRequest::~OAIInstantTranslationRequest() {}

void OAIInstantTranslationRequest::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIInstantTranslationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstantTranslationRequest::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIInstantTranslationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstantTranslationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

QList<QString> OAIInstantTranslationRequest::getContents() const {
    return m_contents;
}
void OAIInstantTranslationRequest::setContents(const QList<QString> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIInstantTranslationRequest::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIInstantTranslationRequest::is_contents_Valid() const{
    return m_contents_isValid;
}

QList<OAIFileAsData> OAIInstantTranslationRequest::getDocuments() const {
    return m_documents;
}
void OAIInstantTranslationRequest::setDocuments(const QList<OAIFileAsData> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIInstantTranslationRequest::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIInstantTranslationRequest::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIInstantTranslationFilter OAIInstantTranslationRequest::getFilters() const {
    return m_filters;
}
void OAIInstantTranslationRequest::setFilters(const OAIInstantTranslationFilter &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIInstantTranslationRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIInstantTranslationRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIObject OAIInstantTranslationRequest::getMeta() const {
    return m_meta;
}
void OAIInstantTranslationRequest::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIInstantTranslationRequest::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIInstantTranslationRequest::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIInstantTranslationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstantTranslationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
