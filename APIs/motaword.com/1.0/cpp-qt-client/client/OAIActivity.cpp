/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_activity_at_isSet = false;
    m_activity_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_source_text_isSet = false;
    m_source_text_isValid = false;

    m_target_text_isSet = false;
    m_target_text_isValid = false;

    m_translator_isSet = false;
    m_translator_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_activity_at_isValid = ::OpenAPI::fromJsonValue(m_activity_at, json[QString("activity_at")]);
    m_activity_at_isSet = !json[QString("activity_at")].isNull() && m_activity_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_source_text_isValid = ::OpenAPI::fromJsonValue(m_source_text, json[QString("source_text")]);
    m_source_text_isSet = !json[QString("source_text")].isNull() && m_source_text_isValid;

    m_target_text_isValid = ::OpenAPI::fromJsonValue(m_target_text, json[QString("target_text")]);
    m_target_text_isSet = !json[QString("target_text")].isNull() && m_target_text_isValid;

    m_translator_isValid = ::OpenAPI::fromJsonValue(m_translator, json[QString("translator")]);
    m_translator_isSet = !json[QString("translator")].isNull() && m_translator_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_at_isSet) {
        obj.insert(QString("activity_at"), ::OpenAPI::toJsonValue(m_activity_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_source_text_isSet) {
        obj.insert(QString("source_text"), ::OpenAPI::toJsonValue(m_source_text));
    }
    if (m_target_text_isSet) {
        obj.insert(QString("target_text"), ::OpenAPI::toJsonValue(m_target_text));
    }
    if (m_translator_isSet) {
        obj.insert(QString("translator"), ::OpenAPI::toJsonValue(m_translator));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIActivity::getActivityAt() const {
    return m_activity_at;
}
void OAIActivity::setActivityAt(const qint64 &activity_at) {
    m_activity_at = activity_at;
    m_activity_at_isSet = true;
}

bool OAIActivity::is_activity_at_Set() const{
    return m_activity_at_isSet;
}

bool OAIActivity::is_activity_at_Valid() const{
    return m_activity_at_isValid;
}

qint64 OAIActivity::getId() const {
    return m_id;
}
void OAIActivity::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    return m_id_isValid;
}

OAIActivityLinks OAIActivity::getLinks() const {
    return m_links;
}
void OAIActivity::setLinks(const OAIActivityLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIActivity::is_links_Set() const{
    return m_links_isSet;
}

bool OAIActivity::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIActivity::getSourceText() const {
    return m_source_text;
}
void OAIActivity::setSourceText(const QString &source_text) {
    m_source_text = source_text;
    m_source_text_isSet = true;
}

bool OAIActivity::is_source_text_Set() const{
    return m_source_text_isSet;
}

bool OAIActivity::is_source_text_Valid() const{
    return m_source_text_isValid;
}

QString OAIActivity::getTargetText() const {
    return m_target_text;
}
void OAIActivity::setTargetText(const QString &target_text) {
    m_target_text = target_text;
    m_target_text_isSet = true;
}

bool OAIActivity::is_target_text_Set() const{
    return m_target_text_isSet;
}

bool OAIActivity::is_target_text_Valid() const{
    return m_target_text_isValid;
}

qint64 OAIActivity::getTranslator() const {
    return m_translator;
}
void OAIActivity::setTranslator(const qint64 &translator) {
    m_translator = translator;
    m_translator_isSet = true;
}

bool OAIActivity::is_translator_Set() const{
    return m_translator_isSet;
}

bool OAIActivity::is_translator_Valid() const{
    return m_translator_isValid;
}

QString OAIActivity::getType() const {
    return m_type;
}
void OAIActivity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
