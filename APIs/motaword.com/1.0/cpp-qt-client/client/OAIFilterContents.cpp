/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterContents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterContents::OAIFilterContents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterContents::OAIFilterContents() {
    this->initializeModel();
}

OAIFilterContents::~OAIFilterContents() {}

void OAIFilterContents::initializeModel() {

    m_budget_codes_isSet = false;
    m_budget_codes_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_severities_isSet = false;
    m_severities_isValid = false;

    m_source_languages_isSet = false;
    m_source_languages_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_vendors_isSet = false;
    m_vendors_isValid = false;
}

void OAIFilterContents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterContents::fromJsonObject(QJsonObject json) {

    m_budget_codes_isValid = ::OpenAPI::fromJsonValue(m_budget_codes, json[QString("budget_codes")]);
    m_budget_codes_isSet = !json[QString("budget_codes")].isNull() && m_budget_codes_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_severities_isValid = ::OpenAPI::fromJsonValue(m_severities, json[QString("severities")]);
    m_severities_isSet = !json[QString("severities")].isNull() && m_severities_isValid;

    m_source_languages_isValid = ::OpenAPI::fromJsonValue(m_source_languages, json[QString("source_languages")]);
    m_source_languages_isSet = !json[QString("source_languages")].isNull() && m_source_languages_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages")]);
    m_target_languages_isSet = !json[QString("target_languages")].isNull() && m_target_languages_isValid;

    m_vendors_isValid = ::OpenAPI::fromJsonValue(m_vendors, json[QString("vendors")]);
    m_vendors_isSet = !json[QString("vendors")].isNull() && m_vendors_isValid;
}

QString OAIFilterContents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterContents::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_codes.size() > 0) {
        obj.insert(QString("budget_codes"), ::OpenAPI::toJsonValue(m_budget_codes));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_severities.size() > 0) {
        obj.insert(QString("severities"), ::OpenAPI::toJsonValue(m_severities));
    }
    if (m_source_languages.size() > 0) {
        obj.insert(QString("source_languages"), ::OpenAPI::toJsonValue(m_source_languages));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_vendors.size() > 0) {
        obj.insert(QString("vendors"), ::OpenAPI::toJsonValue(m_vendors));
    }
    return obj;
}

QList<QString> OAIFilterContents::getBudgetCodes() const {
    return m_budget_codes;
}
void OAIFilterContents::setBudgetCodes(const QList<QString> &budget_codes) {
    m_budget_codes = budget_codes;
    m_budget_codes_isSet = true;
}

bool OAIFilterContents::is_budget_codes_Set() const{
    return m_budget_codes_isSet;
}

bool OAIFilterContents::is_budget_codes_Valid() const{
    return m_budget_codes_isValid;
}

QList<QString> OAIFilterContents::getCategories() const {
    return m_categories;
}
void OAIFilterContents::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIFilterContents::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIFilterContents::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<OAISimpleModel> OAIFilterContents::getClients() const {
    return m_clients;
}
void OAIFilterContents::setClients(const QList<OAISimpleModel> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIFilterContents::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIFilterContents::is_clients_Valid() const{
    return m_clients_isValid;
}

QList<OAISimpleModel> OAIFilterContents::getDocuments() const {
    return m_documents;
}
void OAIFilterContents::setDocuments(const QList<OAISimpleModel> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIFilterContents::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIFilterContents::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAISimpleModel> OAIFilterContents::getProjects() const {
    return m_projects;
}
void OAIFilterContents::setProjects(const QList<OAISimpleModel> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIFilterContents::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIFilterContents::is_projects_Valid() const{
    return m_projects_isValid;
}

QList<QString> OAIFilterContents::getSeverities() const {
    return m_severities;
}
void OAIFilterContents::setSeverities(const QList<QString> &severities) {
    m_severities = severities;
    m_severities_isSet = true;
}

bool OAIFilterContents::is_severities_Set() const{
    return m_severities_isSet;
}

bool OAIFilterContents::is_severities_Valid() const{
    return m_severities_isValid;
}

QList<QString> OAIFilterContents::getSourceLanguages() const {
    return m_source_languages;
}
void OAIFilterContents::setSourceLanguages(const QList<QString> &source_languages) {
    m_source_languages = source_languages;
    m_source_languages_isSet = true;
}

bool OAIFilterContents::is_source_languages_Set() const{
    return m_source_languages_isSet;
}

bool OAIFilterContents::is_source_languages_Valid() const{
    return m_source_languages_isValid;
}

QList<QString> OAIFilterContents::getSubjects() const {
    return m_subjects;
}
void OAIFilterContents::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIFilterContents::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIFilterContents::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QList<QString> OAIFilterContents::getTargetLanguages() const {
    return m_target_languages;
}
void OAIFilterContents::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIFilterContents::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIFilterContents::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

QList<OAISimpleModel> OAIFilterContents::getVendors() const {
    return m_vendors;
}
void OAIFilterContents::setVendors(const QList<OAISimpleModel> &vendors) {
    m_vendors = vendors;
    m_vendors_isSet = true;
}

bool OAIFilterContents::is_vendors_Set() const{
    return m_vendors_isSet;
}

bool OAIFilterContents::is_vendors_Valid() const{
    return m_vendors_isValid;
}

bool OAIFilterContents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterContents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
