/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentUpdates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentUpdates::OAIDocumentUpdates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentUpdates::OAIDocumentUpdates() {
    this->initializeModel();
}

OAIDocumentUpdates::~OAIDocumentUpdates() {}

void OAIDocumentUpdates::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_schemes_isSet = false;
    m_schemes_isValid = false;

    m_source_links_isSet = false;
    m_source_links_isValid = false;
}

void OAIDocumentUpdates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentUpdates::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents[]")]);
    m_documents_isSet = !json[QString("documents[]")].isNull() && m_documents_isValid;

    m_schemes_isValid = ::OpenAPI::fromJsonValue(m_schemes, json[QString("schemes[]")]);
    m_schemes_isSet = !json[QString("schemes[]")].isNull() && m_schemes_isValid;

    m_source_links_isValid = ::OpenAPI::fromJsonValue(m_source_links, json[QString("source-links[]")]);
    m_source_links_isSet = !json[QString("source-links[]")].isNull() && m_source_links_isValid;
}

QString OAIDocumentUpdates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentUpdates::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents[]"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_schemes_isSet) {
        obj.insert(QString("schemes[]"), ::OpenAPI::toJsonValue(m_schemes));
    }
    if (m_source_links.size() > 0) {
        obj.insert(QString("source-links[]"), ::OpenAPI::toJsonValue(m_source_links));
    }
    return obj;
}

QList<OAIHttpFileElement> OAIDocumentUpdates::getDocuments() const {
    return m_documents;
}
void OAIDocumentUpdates::setDocuments(const QList<OAIHttpFileElement> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIDocumentUpdates::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIDocumentUpdates::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIDocumentUpdates::getSchemes() const {
    return m_schemes;
}
void OAIDocumentUpdates::setSchemes(const QString &schemes) {
    m_schemes = schemes;
    m_schemes_isSet = true;
}

bool OAIDocumentUpdates::is_schemes_Set() const{
    return m_schemes_isSet;
}

bool OAIDocumentUpdates::is_schemes_Valid() const{
    return m_schemes_isValid;
}

QList<OAILinkedSourceDocument> OAIDocumentUpdates::getSourceLinks() const {
    return m_source_links;
}
void OAIDocumentUpdates::setSourceLinks(const QList<OAILinkedSourceDocument> &source_links) {
    m_source_links = source_links;
    m_source_links_isSet = true;
}

bool OAIDocumentUpdates::is_source_links_Set() const{
    return m_source_links_isSet;
}

bool OAIDocumentUpdates::is_source_links_Valid() const{
    return m_source_links_isValid;
}

bool OAIDocumentUpdates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentUpdates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
