/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientStats::OAIClientStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientStats::OAIClientStats() {
    this->initializeModel();
}

OAIClientStats::~OAIClientStats() {}

void OAIClientStats::initializeModel() {

    m_document_count_isSet = false;
    m_document_count_isValid = false;

    m_nps_isSet = false;
    m_nps_isValid = false;

    m_started_project_count_isSet = false;
    m_started_project_count_isValid = false;

    m_total_discounted_isSet = false;
    m_total_discounted_isValid = false;

    m_total_project_count_isSet = false;
    m_total_project_count_isValid = false;

    m_total_spending_isSet = false;
    m_total_spending_isValid = false;

    m_translator_count_isSet = false;
    m_translator_count_isValid = false;
}

void OAIClientStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientStats::fromJsonObject(QJsonObject json) {

    m_document_count_isValid = ::OpenAPI::fromJsonValue(m_document_count, json[QString("document_count")]);
    m_document_count_isSet = !json[QString("document_count")].isNull() && m_document_count_isValid;

    m_nps_isValid = ::OpenAPI::fromJsonValue(m_nps, json[QString("nps")]);
    m_nps_isSet = !json[QString("nps")].isNull() && m_nps_isValid;

    m_started_project_count_isValid = ::OpenAPI::fromJsonValue(m_started_project_count, json[QString("started_project_count")]);
    m_started_project_count_isSet = !json[QString("started_project_count")].isNull() && m_started_project_count_isValid;

    m_total_discounted_isValid = ::OpenAPI::fromJsonValue(m_total_discounted, json[QString("total_discounted")]);
    m_total_discounted_isSet = !json[QString("total_discounted")].isNull() && m_total_discounted_isValid;

    m_total_project_count_isValid = ::OpenAPI::fromJsonValue(m_total_project_count, json[QString("total_project_count")]);
    m_total_project_count_isSet = !json[QString("total_project_count")].isNull() && m_total_project_count_isValid;

    m_total_spending_isValid = ::OpenAPI::fromJsonValue(m_total_spending, json[QString("total_spending")]);
    m_total_spending_isSet = !json[QString("total_spending")].isNull() && m_total_spending_isValid;

    m_translator_count_isValid = ::OpenAPI::fromJsonValue(m_translator_count, json[QString("translator_count")]);
    m_translator_count_isSet = !json[QString("translator_count")].isNull() && m_translator_count_isValid;
}

QString OAIClientStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientStats::asJsonObject() const {
    QJsonObject obj;
    if (m_document_count_isSet) {
        obj.insert(QString("document_count"), ::OpenAPI::toJsonValue(m_document_count));
    }
    if (m_nps_isSet) {
        obj.insert(QString("nps"), ::OpenAPI::toJsonValue(m_nps));
    }
    if (m_started_project_count_isSet) {
        obj.insert(QString("started_project_count"), ::OpenAPI::toJsonValue(m_started_project_count));
    }
    if (m_total_discounted.isSet()) {
        obj.insert(QString("total_discounted"), ::OpenAPI::toJsonValue(m_total_discounted));
    }
    if (m_total_project_count_isSet) {
        obj.insert(QString("total_project_count"), ::OpenAPI::toJsonValue(m_total_project_count));
    }
    if (m_total_spending_isSet) {
        obj.insert(QString("total_spending"), ::OpenAPI::toJsonValue(m_total_spending));
    }
    if (m_translator_count_isSet) {
        obj.insert(QString("translator_count"), ::OpenAPI::toJsonValue(m_translator_count));
    }
    return obj;
}

qint64 OAIClientStats::getDocumentCount() const {
    return m_document_count;
}
void OAIClientStats::setDocumentCount(const qint64 &document_count) {
    m_document_count = document_count;
    m_document_count_isSet = true;
}

bool OAIClientStats::is_document_count_Set() const{
    return m_document_count_isSet;
}

bool OAIClientStats::is_document_count_Valid() const{
    return m_document_count_isValid;
}

float OAIClientStats::getNps() const {
    return m_nps;
}
void OAIClientStats::setNps(const float &nps) {
    m_nps = nps;
    m_nps_isSet = true;
}

bool OAIClientStats::is_nps_Set() const{
    return m_nps_isSet;
}

bool OAIClientStats::is_nps_Valid() const{
    return m_nps_isValid;
}

qint64 OAIClientStats::getStartedProjectCount() const {
    return m_started_project_count;
}
void OAIClientStats::setStartedProjectCount(const qint64 &started_project_count) {
    m_started_project_count = started_project_count;
    m_started_project_count_isSet = true;
}

bool OAIClientStats::is_started_project_count_Set() const{
    return m_started_project_count_isSet;
}

bool OAIClientStats::is_started_project_count_Valid() const{
    return m_started_project_count_isValid;
}

OAIMonetary OAIClientStats::getTotalDiscounted() const {
    return m_total_discounted;
}
void OAIClientStats::setTotalDiscounted(const OAIMonetary &total_discounted) {
    m_total_discounted = total_discounted;
    m_total_discounted_isSet = true;
}

bool OAIClientStats::is_total_discounted_Set() const{
    return m_total_discounted_isSet;
}

bool OAIClientStats::is_total_discounted_Valid() const{
    return m_total_discounted_isValid;
}

qint64 OAIClientStats::getTotalProjectCount() const {
    return m_total_project_count;
}
void OAIClientStats::setTotalProjectCount(const qint64 &total_project_count) {
    m_total_project_count = total_project_count;
    m_total_project_count_isSet = true;
}

bool OAIClientStats::is_total_project_count_Set() const{
    return m_total_project_count_isSet;
}

bool OAIClientStats::is_total_project_count_Valid() const{
    return m_total_project_count_isValid;
}

float OAIClientStats::getTotalSpending() const {
    return m_total_spending;
}
void OAIClientStats::setTotalSpending(const float &total_spending) {
    m_total_spending = total_spending;
    m_total_spending_isSet = true;
}

bool OAIClientStats::is_total_spending_Set() const{
    return m_total_spending_isSet;
}

bool OAIClientStats::is_total_spending_Valid() const{
    return m_total_spending_isValid;
}

qint64 OAIClientStats::getTranslatorCount() const {
    return m_translator_count;
}
void OAIClientStats::setTranslatorCount(const qint64 &translator_count) {
    m_translator_count = translator_count;
    m_translator_count_isSet = true;
}

bool OAIClientStats::is_translator_count_Set() const{
    return m_translator_count_isSet;
}

bool OAIClientStats::is_translator_count_Valid() const{
    return m_translator_count_isValid;
}

bool OAIClientStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_project_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discounted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_project_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_spending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translator_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
