/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICM.h"
#include "OAICallbackResult.h"
#include "OAICancelProjectRequest.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIInvoice.h"
#include "OAIListOrderType.h"
#include "OAINewProject.h"
#include "OAIOperationStatus.h"
#include "OAIPackage.h"
#include "OAIPackageStatus.h"
#include "OAIProgress.h"
#include "OAIProject.h"
#include "OAIProjectId.h"
#include "OAIProjectLaunchResponse.h"
#include "OAIProjectList.h"
#include "OAIProjectPayment.h"
#include "OAIProjectStatus.h"
#include "OAIProjectUpdate.h"
#include "OAIReportContent.h"
#include "OAIUserList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oaicm OAICM [optional]
    */
    virtual void assignCM(const qint64 &id, const ::OpenAPI::OptionalParam<OAICM> &oaicm = ::OpenAPI::OptionalParam<OAICM>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_cancel_project_request OAICancelProjectRequest [optional]
    */
    virtual void cancelProject(const qint64 &id, const ::OpenAPI::OptionalParam<OAICancelProjectRequest> &oai_cancel_project_request = ::OpenAPI::OptionalParam<OAICancelProjectRequest>());

    /**
    * @param[in]  oai_new_project OAINewProject [optional]
    */
    virtual void createProject(const ::OpenAPI::OptionalParam<OAINewProject> &oai_new_project = ::OpenAPI::OptionalParam<OAINewProject>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteProject(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deliverProject(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void download(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void downloadHtmlInvoice(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  language QString [required]
    */
    virtual void downloadLanguage(const qint64 &id, const QString &language);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void downloadPdfInvoice(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getInvoice(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  raw bool [optional]
    */
    virtual void getProgress(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getProject(const qint64 &id, const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getProjectVendors(const qint64 &project_id);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    * @param[in]  status QList<OAIProjectStatus> [optional]
    * @param[in]  with_pending bool [optional]
    * @param[in]  with_started bool [optional]
    * @param[in]  with_completed bool [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_type OAIListOrderType [optional]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getProjects(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<OAIProjectStatus>> &status = ::OpenAPI::OptionalParam<QList<OAIProjectStatus>>(), const ::OpenAPI::OptionalParam<bool> &with_pending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_started = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_completed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListOrderType> &order_type = ::OpenAPI::OptionalParam<OAIListOrderType>(), const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getQuoteIdFromInternalId(const qint64 &project_id);

    /**
    * @param[in]  joined bool [optional]
    * @param[in]  completed bool [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    */
    virtual void getVendorProjects(const ::OpenAPI::OptionalParam<bool> &joined = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &completed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  joined bool [optional]
    * @param[in]  completed bool [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    */
    virtual void getVendorProjectsByUserId(const qint64 &user_id, const ::OpenAPI::OptionalParam<bool> &joined = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &completed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_project_payment OAIProjectPayment [optional]
    */
    virtual void launchProject(const qint64 &id, const ::OpenAPI::OptionalParam<OAIProjectPayment> &oai_project_payment = ::OpenAPI::OptionalParam<OAIProjectPayment>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  async qint64 [optional]
    */
    virtual void package(const qint64 &id, const ::OpenAPI::OptionalParam<qint64> &async = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  language QString [required]
    * @param[in]  async qint64 [optional]
    */
    virtual void packageLanguage(const qint64 &id, const QString &language, const ::OpenAPI::OptionalParam<qint64> &async = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void recreateProject(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void sendQuoteEmail(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_report_content OAIReportContent [optional]
    */
    virtual void submitProjectReports(const qint64 &id, const ::OpenAPI::OptionalParam<OAIReportContent> &oai_report_content = ::OpenAPI::OptionalParam<OAIReportContent>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  key QString [optional]
    */
    virtual void trackPackage(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  action_type QString [required]
    */
    virtual void triggerCallback(const qint64 &id, const QString &action_type);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_project_update OAIProjectUpdate [optional]
    */
    virtual void updateProject(const qint64 &id, const ::OpenAPI::OptionalParam<OAIProjectUpdate> &oai_project_update = ::OpenAPI::OptionalParam<OAIProjectUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignCMCallback(OAIHttpRequestWorker *worker);
    void cancelProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void deliverProjectCallback(OAIHttpRequestWorker *worker);
    void downloadCallback(OAIHttpRequestWorker *worker);
    void downloadHtmlInvoiceCallback(OAIHttpRequestWorker *worker);
    void downloadLanguageCallback(OAIHttpRequestWorker *worker);
    void downloadPdfInvoiceCallback(OAIHttpRequestWorker *worker);
    void getInvoiceCallback(OAIHttpRequestWorker *worker);
    void getProgressCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectVendorsCallback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void getQuoteIdFromInternalIdCallback(OAIHttpRequestWorker *worker);
    void getVendorProjectsCallback(OAIHttpRequestWorker *worker);
    void getVendorProjectsByUserIdCallback(OAIHttpRequestWorker *worker);
    void launchProjectCallback(OAIHttpRequestWorker *worker);
    void packageCallback(OAIHttpRequestWorker *worker);
    void packageLanguageCallback(OAIHttpRequestWorker *worker);
    void recreateProjectCallback(OAIHttpRequestWorker *worker);
    void sendQuoteEmailCallback(OAIHttpRequestWorker *worker);
    void submitProjectReportsCallback(OAIHttpRequestWorker *worker);
    void trackPackageCallback(OAIHttpRequestWorker *worker);
    void triggerCallbackCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignCMSignal(OAIOperationStatus summary);
    void cancelProjectSignal(OAIOperationStatus summary);
    void createProjectSignal(OAIProject summary);
    void deleteProjectSignal(OAIOperationStatus summary);
    void deliverProjectSignal(OAIOperationStatus summary);
    void downloadSignal(OAIHttpFileElement summary);
    void downloadHtmlInvoiceSignal(QString summary);
    void downloadLanguageSignal(OAIHttpFileElement summary);
    void downloadPdfInvoiceSignal(OAIHttpFileElement summary);
    void getInvoiceSignal(OAIInvoice summary);
    void getProgressSignal(OAIProgress summary);
    void getProjectSignal(OAIProject summary);
    void getProjectVendorsSignal(OAIUserList summary);
    void getProjectsSignal(OAIProjectList summary);
    void getQuoteIdFromInternalIdSignal(OAIProjectId summary);
    void getVendorProjectsSignal(OAIProjectList summary);
    void getVendorProjectsByUserIdSignal(OAIProjectList summary);
    void launchProjectSignal(OAIProjectLaunchResponse summary);
    void packageSignal(OAIHttpFileElement summary);
    void packageLanguageSignal(OAIPackage summary);
    void recreateProjectSignal(OAIOperationStatus summary);
    void sendQuoteEmailSignal(OAIOperationStatus summary);
    void submitProjectReportsSignal(OAIOperationStatus summary);
    void trackPackageSignal(OAIPackageStatus summary);
    void triggerCallbackSignal(OAICallbackResult summary);
    void updateProjectSignal(OAIProject summary);


    void assignCMSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void cancelProjectSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void createProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void deliverProjectSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadHtmlInvoiceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void downloadLanguageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void downloadPdfInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIInvoice summary);
    void getProgressSignalFull(OAIHttpRequestWorker *worker, OAIProgress summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getProjectVendorsSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getQuoteIdFromInternalIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectId summary);
    void getVendorProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void getVendorProjectsByUserIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectList summary);
    void launchProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectLaunchResponse summary);
    void packageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void packageLanguageSignalFull(OAIHttpRequestWorker *worker, OAIPackage summary);
    void recreateProjectSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void sendQuoteEmailSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void submitProjectReportsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void trackPackageSignalFull(OAIHttpRequestWorker *worker, OAIPackageStatus summary);
    void triggerCallbackSignalFull(OAIHttpRequestWorker *worker, OAICallbackResult summary);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use assignCMSignalError() instead")
    void assignCMSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignCMSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelProjectSignalError() instead")
    void cancelProjectSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelProjectSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deliverProjectSignalError() instead")
    void deliverProjectSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deliverProjectSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadSignalError() instead")
    void downloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadHtmlInvoiceSignalError() instead")
    void downloadHtmlInvoiceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadHtmlInvoiceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadLanguageSignalError() instead")
    void downloadLanguageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadLanguageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadPdfInvoiceSignalError() instead")
    void downloadPdfInvoiceSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadPdfInvoiceSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalError() instead")
    void getInvoiceSignalE(OAIInvoice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalError(OAIInvoice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalError() instead")
    void getProgressSignalE(OAIProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalError(OAIProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVendorsSignalError() instead")
    void getProjectVendorsSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVendorsSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteIdFromInternalIdSignalError() instead")
    void getQuoteIdFromInternalIdSignalE(OAIProjectId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteIdFromInternalIdSignalError(OAIProjectId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorProjectsSignalError() instead")
    void getVendorProjectsSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorProjectsSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorProjectsByUserIdSignalError() instead")
    void getVendorProjectsByUserIdSignalE(OAIProjectList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorProjectsByUserIdSignalError(OAIProjectList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use launchProjectSignalError() instead")
    void launchProjectSignalE(OAIProjectLaunchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void launchProjectSignalError(OAIProjectLaunchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSignalError() instead")
    void packageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageLanguageSignalError() instead")
    void packageLanguageSignalE(OAIPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageLanguageSignalError(OAIPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recreateProjectSignalError() instead")
    void recreateProjectSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recreateProjectSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendQuoteEmailSignalError() instead")
    void sendQuoteEmailSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendQuoteEmailSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitProjectReportsSignalError() instead")
    void submitProjectReportsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitProjectReportsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trackPackageSignalError() instead")
    void trackPackageSignalE(OAIPackageStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void trackPackageSignalError(OAIPackageStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggerCallbackSignalError() instead")
    void triggerCallbackSignalE(OAICallbackResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void triggerCallbackSignalError(OAICallbackResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignCMSignalErrorFull() instead")
    void assignCMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignCMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelProjectSignalErrorFull() instead")
    void cancelProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deliverProjectSignalErrorFull() instead")
    void deliverProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deliverProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadSignalErrorFull() instead")
    void downloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadHtmlInvoiceSignalErrorFull() instead")
    void downloadHtmlInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadHtmlInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadLanguageSignalErrorFull() instead")
    void downloadLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadPdfInvoiceSignalErrorFull() instead")
    void downloadPdfInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadPdfInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvoiceSignalErrorFull() instead")
    void getInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalErrorFull() instead")
    void getProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVendorsSignalErrorFull() instead")
    void getProjectVendorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVendorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteIdFromInternalIdSignalErrorFull() instead")
    void getQuoteIdFromInternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteIdFromInternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorProjectsSignalErrorFull() instead")
    void getVendorProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorProjectsByUserIdSignalErrorFull() instead")
    void getVendorProjectsByUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorProjectsByUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use launchProjectSignalErrorFull() instead")
    void launchProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void launchProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSignalErrorFull() instead")
    void packageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageLanguageSignalErrorFull() instead")
    void packageLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recreateProjectSignalErrorFull() instead")
    void recreateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recreateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendQuoteEmailSignalErrorFull() instead")
    void sendQuoteEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendQuoteEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitProjectReportsSignalErrorFull() instead")
    void submitProjectReportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitProjectReportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trackPackageSignalErrorFull() instead")
    void trackPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trackPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triggerCallbackSignalErrorFull() instead")
    void triggerCallbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triggerCallbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
