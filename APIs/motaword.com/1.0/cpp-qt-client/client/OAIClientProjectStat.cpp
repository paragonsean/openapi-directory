/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientProjectStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientProjectStat::OAIClientProjectStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientProjectStat::OAIClientProjectStat() {
    this->initializeModel();
}

OAIClientProjectStat::~OAIClientProjectStat() {}

void OAIClientProjectStat::initializeModel() {

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_number_of_projects_isSet = false;
    m_number_of_projects_isValid = false;

    m_total_spending_isSet = false;
    m_total_spending_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIClientProjectStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientProjectStat::fromJsonObject(QJsonObject json) {

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_number_of_projects_isValid = ::OpenAPI::fromJsonValue(m_number_of_projects, json[QString("number_of_projects")]);
    m_number_of_projects_isSet = !json[QString("number_of_projects")].isNull() && m_number_of_projects_isValid;

    m_total_spending_isValid = ::OpenAPI::fromJsonValue(m_total_spending, json[QString("total_spending")]);
    m_total_spending_isSet = !json[QString("total_spending")].isNull() && m_total_spending_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIClientProjectStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientProjectStat::asJsonObject() const {
    QJsonObject obj;
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_number_of_projects_isSet) {
        obj.insert(QString("number_of_projects"), ::OpenAPI::toJsonValue(m_number_of_projects));
    }
    if (m_total_spending_isSet) {
        obj.insert(QString("total_spending"), ::OpenAPI::toJsonValue(m_total_spending));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QList<QString> OAIClientProjectStat::getLanguages() const {
    return m_languages;
}
void OAIClientProjectStat::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIClientProjectStat::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIClientProjectStat::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIClientProjectStat::getMonth() const {
    return m_month;
}
void OAIClientProjectStat::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIClientProjectStat::is_month_Set() const{
    return m_month_isSet;
}

bool OAIClientProjectStat::is_month_Valid() const{
    return m_month_isValid;
}

qint64 OAIClientProjectStat::getNumberOfProjects() const {
    return m_number_of_projects;
}
void OAIClientProjectStat::setNumberOfProjects(const qint64 &number_of_projects) {
    m_number_of_projects = number_of_projects;
    m_number_of_projects_isSet = true;
}

bool OAIClientProjectStat::is_number_of_projects_Set() const{
    return m_number_of_projects_isSet;
}

bool OAIClientProjectStat::is_number_of_projects_Valid() const{
    return m_number_of_projects_isValid;
}

float OAIClientProjectStat::getTotalSpending() const {
    return m_total_spending;
}
void OAIClientProjectStat::setTotalSpending(const float &total_spending) {
    m_total_spending = total_spending;
    m_total_spending_isSet = true;
}

bool OAIClientProjectStat::is_total_spending_Set() const{
    return m_total_spending_isSet;
}

bool OAIClientProjectStat::is_total_spending_Valid() const{
    return m_total_spending_isValid;
}

QString OAIClientProjectStat::getWeek() const {
    return m_week;
}
void OAIClientProjectStat::setWeek(const QString &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIClientProjectStat::is_week_Set() const{
    return m_week_isSet;
}

bool OAIClientProjectStat::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIClientProjectStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_spending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientProjectStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
