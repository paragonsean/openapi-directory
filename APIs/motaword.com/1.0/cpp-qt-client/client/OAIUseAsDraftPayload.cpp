/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUseAsDraftPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUseAsDraftPayload::OAIUseAsDraftPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUseAsDraftPayload::OAIUseAsDraftPayload() {
    this->initializeModel();
}

OAIUseAsDraftPayload::~OAIUseAsDraftPayload() {}

void OAIUseAsDraftPayload::initializeModel() {

    m_from_file_id_isSet = false;
    m_from_file_id_isValid = false;

    m_from_manual_translation_file_id_isSet = false;
    m_from_manual_translation_file_id_isValid = false;

    m_to_manual_translation_file_id_isSet = false;
    m_to_manual_translation_file_id_isValid = false;
}

void OAIUseAsDraftPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUseAsDraftPayload::fromJsonObject(QJsonObject json) {

    m_from_file_id_isValid = ::OpenAPI::fromJsonValue(m_from_file_id, json[QString("fromFileId")]);
    m_from_file_id_isSet = !json[QString("fromFileId")].isNull() && m_from_file_id_isValid;

    m_from_manual_translation_file_id_isValid = ::OpenAPI::fromJsonValue(m_from_manual_translation_file_id, json[QString("fromManualTranslationFileId")]);
    m_from_manual_translation_file_id_isSet = !json[QString("fromManualTranslationFileId")].isNull() && m_from_manual_translation_file_id_isValid;

    m_to_manual_translation_file_id_isValid = ::OpenAPI::fromJsonValue(m_to_manual_translation_file_id, json[QString("toManualTranslationFileId")]);
    m_to_manual_translation_file_id_isSet = !json[QString("toManualTranslationFileId")].isNull() && m_to_manual_translation_file_id_isValid;
}

QString OAIUseAsDraftPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUseAsDraftPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_from_file_id_isSet) {
        obj.insert(QString("fromFileId"), ::OpenAPI::toJsonValue(m_from_file_id));
    }
    if (m_from_manual_translation_file_id_isSet) {
        obj.insert(QString("fromManualTranslationFileId"), ::OpenAPI::toJsonValue(m_from_manual_translation_file_id));
    }
    if (m_to_manual_translation_file_id_isSet) {
        obj.insert(QString("toManualTranslationFileId"), ::OpenAPI::toJsonValue(m_to_manual_translation_file_id));
    }
    return obj;
}

double OAIUseAsDraftPayload::getFromFileId() const {
    return m_from_file_id;
}
void OAIUseAsDraftPayload::setFromFileId(const double &from_file_id) {
    m_from_file_id = from_file_id;
    m_from_file_id_isSet = true;
}

bool OAIUseAsDraftPayload::is_from_file_id_Set() const{
    return m_from_file_id_isSet;
}

bool OAIUseAsDraftPayload::is_from_file_id_Valid() const{
    return m_from_file_id_isValid;
}

double OAIUseAsDraftPayload::getFromManualTranslationFileId() const {
    return m_from_manual_translation_file_id;
}
void OAIUseAsDraftPayload::setFromManualTranslationFileId(const double &from_manual_translation_file_id) {
    m_from_manual_translation_file_id = from_manual_translation_file_id;
    m_from_manual_translation_file_id_isSet = true;
}

bool OAIUseAsDraftPayload::is_from_manual_translation_file_id_Set() const{
    return m_from_manual_translation_file_id_isSet;
}

bool OAIUseAsDraftPayload::is_from_manual_translation_file_id_Valid() const{
    return m_from_manual_translation_file_id_isValid;
}

double OAIUseAsDraftPayload::getToManualTranslationFileId() const {
    return m_to_manual_translation_file_id;
}
void OAIUseAsDraftPayload::setToManualTranslationFileId(const double &to_manual_translation_file_id) {
    m_to_manual_translation_file_id = to_manual_translation_file_id;
    m_to_manual_translation_file_id_isSet = true;
}

bool OAIUseAsDraftPayload::is_to_manual_translation_file_id_Set() const{
    return m_to_manual_translation_file_id_isSet;
}

bool OAIUseAsDraftPayload::is_to_manual_translation_file_id_Valid() const{
    return m_to_manual_translation_file_id_isValid;
}

bool OAIUseAsDraftPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_manual_translation_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_manual_translation_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUseAsDraftPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
