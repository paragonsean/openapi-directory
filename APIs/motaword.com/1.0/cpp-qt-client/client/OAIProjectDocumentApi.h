/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectDocumentApi_H
#define OAI_OAIProjectDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocument.h"
#include "OAIDocumentList.h"
#include "OAIDocumentUpdates.h"
#include "OAIDocumentUploadRequest.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIOperationStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIProjectDocumentApi(const int timeOut = 0);
    ~OAIProjectDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_document_updates OAIDocumentUpdates [optional]
    */
    virtual void createProjectDocument(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIDocumentUpdates> &oai_document_updates = ::OpenAPI::OptionalParam<OAIDocumentUpdates>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void deleteProjectDocument(const qint64 &project_id, const qint64 &document_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void downloadProjectDocument(const qint64 &project_id, const qint64 &document_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  language QString [required]
    * @param[in]  certified bool [optional]
    */
    virtual void downloadTranslatedDocumentForLanguage(const qint64 &project_id, const qint64 &document_id, const QString &language, const ::OpenAPI::OptionalParam<bool> &certified = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getProjectDocument(const qint64 &project_id, const qint64 &document_id, const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getProjectDocuments(const qint64 &project_id, const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  oai_document_upload_request OAIDocumentUploadRequest [optional]
    */
    virtual void updateProjectDocument(const qint64 &project_id, const qint64 &document_id, const ::OpenAPI::OptionalParam<OAIDocumentUploadRequest> &oai_document_upload_request = ::OpenAPI::OptionalParam<OAIDocumentUploadRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectDocumentCallback(OAIHttpRequestWorker *worker);
    void deleteProjectDocumentCallback(OAIHttpRequestWorker *worker);
    void downloadProjectDocumentCallback(OAIHttpRequestWorker *worker);
    void downloadTranslatedDocumentForLanguageCallback(OAIHttpRequestWorker *worker);
    void getProjectDocumentCallback(OAIHttpRequestWorker *worker);
    void getProjectDocumentsCallback(OAIHttpRequestWorker *worker);
    void updateProjectDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectDocumentSignal(OAIDocumentList summary);
    void deleteProjectDocumentSignal(OAIOperationStatus summary);
    void downloadProjectDocumentSignal(QString summary);
    void downloadTranslatedDocumentForLanguageSignal(OAIHttpFileElement summary);
    void getProjectDocumentSignal(OAIDocument summary);
    void getProjectDocumentsSignal(OAIDocumentList summary);
    void updateProjectDocumentSignal(OAIDocument summary);


    void createProjectDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void deleteProjectDocumentSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downloadProjectDocumentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void downloadTranslatedDocumentForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getProjectDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void getProjectDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void updateProjectDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);

    Q_DECL_DEPRECATED_X("Use createProjectDocumentSignalError() instead")
    void createProjectDocumentSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectDocumentSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectDocumentSignalError() instead")
    void deleteProjectDocumentSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectDocumentSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadProjectDocumentSignalError() instead")
    void downloadProjectDocumentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadProjectDocumentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadTranslatedDocumentForLanguageSignalError() instead")
    void downloadTranslatedDocumentForLanguageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadTranslatedDocumentForLanguageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDocumentSignalError() instead")
    void getProjectDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDocumentsSignalError() instead")
    void getProjectDocumentsSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDocumentsSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectDocumentSignalError() instead")
    void updateProjectDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectDocumentSignalErrorFull() instead")
    void createProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectDocumentSignalErrorFull() instead")
    void deleteProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadProjectDocumentSignalErrorFull() instead")
    void downloadProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadTranslatedDocumentForLanguageSignalErrorFull() instead")
    void downloadTranslatedDocumentForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadTranslatedDocumentForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDocumentSignalErrorFull() instead")
    void getProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectDocumentsSignalErrorFull() instead")
    void getProjectDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectDocumentSignalErrorFull() instead")
    void updateProjectDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
