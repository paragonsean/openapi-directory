/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenError::OAITokenError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenError::OAITokenError() {
    this->initializeModel();
}

OAITokenError::~OAITokenError() {}

void OAITokenError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_help_isSet = false;
    m_help_isValid = false;

    m_http_code_isSet = false;
    m_http_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;
}

void OAITokenError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_help_isValid = ::OpenAPI::fromJsonValue(m_help, json[QString("help")]);
    m_help_isSet = !json[QString("help")].isNull() && m_help_isValid;

    m_http_code_isValid = ::OpenAPI::fromJsonValue(m_http_code, json[QString("http_code")]);
    m_http_code_isSet = !json[QString("http_code")].isNull() && m_http_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("account_status")]);
    m_account_status_isSet = !json[QString("account_status")].isNull() && m_account_status_isValid;
}

QString OAITokenError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_help_isSet) {
        obj.insert(QString("help"), ::OpenAPI::toJsonValue(m_help));
    }
    if (m_http_code_isSet) {
        obj.insert(QString("http_code"), ::OpenAPI::toJsonValue(m_http_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("account_status"), ::OpenAPI::toJsonValue(m_account_status));
    }
    return obj;
}

QString OAITokenError::getCode() const {
    return m_code;
}
void OAITokenError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITokenError::is_code_Set() const{
    return m_code_isSet;
}

bool OAITokenError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAITokenError::getHelp() const {
    return m_help;
}
void OAITokenError::setHelp(const QString &help) {
    m_help = help;
    m_help_isSet = true;
}

bool OAITokenError::is_help_Set() const{
    return m_help_isSet;
}

bool OAITokenError::is_help_Valid() const{
    return m_help_isValid;
}

qint32 OAITokenError::getHttpCode() const {
    return m_http_code;
}
void OAITokenError::setHttpCode(const qint32 &http_code) {
    m_http_code = http_code;
    m_http_code_isSet = true;
}

bool OAITokenError::is_http_code_Set() const{
    return m_http_code_isSet;
}

bool OAITokenError::is_http_code_Valid() const{
    return m_http_code_isValid;
}

QString OAITokenError::getMessage() const {
    return m_message;
}
void OAITokenError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITokenError::is_message_Set() const{
    return m_message_isSet;
}

bool OAITokenError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITokenError::getAccountStatus() const {
    return m_account_status;
}
void OAITokenError::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAITokenError::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAITokenError::is_account_status_Valid() const{
    return m_account_status_isValid;
}

bool OAITokenError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
