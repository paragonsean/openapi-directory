/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlogArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlogArticle::OAIBlogArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlogArticle::OAIBlogArticle() {
    this->initializeModel();
}

OAIBlogArticle::~OAIBlogArticle() {}

void OAIBlogArticle::initializeModel() {

    m_announcement_type_isSet = false;
    m_announcement_type_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIBlogArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlogArticle::fromJsonObject(QJsonObject json) {

    m_announcement_type_isValid = ::OpenAPI::fromJsonValue(m_announcement_type, json[QString("announcement_type")]);
    m_announcement_type_isSet = !json[QString("announcement_type")].isNull() && m_announcement_type_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIBlogArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlogArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_announcement_type_isSet) {
        obj.insert(QString("announcement_type"), ::OpenAPI::toJsonValue(m_announcement_type));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAIBlogArticle::getAnnouncementType() const {
    return m_announcement_type;
}
void OAIBlogArticle::setAnnouncementType(const QString &announcement_type) {
    m_announcement_type = announcement_type;
    m_announcement_type_isSet = true;
}

bool OAIBlogArticle::is_announcement_type_Set() const{
    return m_announcement_type_isSet;
}

bool OAIBlogArticle::is_announcement_type_Valid() const{
    return m_announcement_type_isValid;
}

QString OAIBlogArticle::getAuthor() const {
    return m_author;
}
void OAIBlogArticle::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIBlogArticle::is_author_Set() const{
    return m_author_isSet;
}

bool OAIBlogArticle::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIBlogArticle::getContent() const {
    return m_content;
}
void OAIBlogArticle::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIBlogArticle::is_content_Set() const{
    return m_content_isSet;
}

bool OAIBlogArticle::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIBlogArticle::getCreatedAt() const {
    return m_created_at;
}
void OAIBlogArticle::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBlogArticle::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBlogArticle::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBlogArticle::getExcerpt() const {
    return m_excerpt;
}
void OAIBlogArticle::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIBlogArticle::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIBlogArticle::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

qint64 OAIBlogArticle::getId() const {
    return m_id;
}
void OAIBlogArticle::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBlogArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBlogArticle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBlogArticle::getLanguage() const {
    return m_language;
}
void OAIBlogArticle::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIBlogArticle::is_language_Set() const{
    return m_language_isSet;
}

bool OAIBlogArticle::is_language_Valid() const{
    return m_language_isValid;
}

OAIBlogArticleLinks OAIBlogArticle::getLinks() const {
    return m_links;
}
void OAIBlogArticle::setLinks(const OAIBlogArticleLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBlogArticle::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBlogArticle::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIBlogArticle::getSlug() const {
    return m_slug;
}
void OAIBlogArticle::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIBlogArticle::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIBlogArticle::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIBlogArticle::getTitle() const {
    return m_title;
}
void OAIBlogArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBlogArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBlogArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBlogArticle::getTopic() const {
    return m_topic;
}
void OAIBlogArticle::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIBlogArticle::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIBlogArticle::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIBlogArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_announcement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlogArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
