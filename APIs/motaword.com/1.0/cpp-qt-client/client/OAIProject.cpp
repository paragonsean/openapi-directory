/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_average_scores_isSet = false;
    m_average_scores_isValid = false;

    m_budget_code_isSet = false;
    m_budget_code_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_can_pam_manage_isSet = false;
    m_can_pam_manage_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_cm_id_isSet = false;
    m_cm_id_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_continuous_project_type_isSet = false;
    m_continuous_project_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_delivery_at_isSet = false;
    m_delivery_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_api_project_isSet = false;
    m_is_api_project_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_is_continuous_isSet = false;
    m_is_continuous_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_pairs_isSet = false;
    m_pairs_isValid = false;

    m_pivoted_projects_isSet = false;
    m_pivoted_projects_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_without_discount_isSet = false;
    m_price_without_discount_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_should_send_client_survey_isSet = false;
    m_should_send_client_survey_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_tms_name_isSet = false;
    m_tms_name_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;

    m_vendor_word_count_isSet = false;
    m_vendor_word_count_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;

    m_word_count_analysis_isSet = false;
    m_word_count_analysis_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_average_scores_isValid = ::OpenAPI::fromJsonValue(m_average_scores, json[QString("average_scores")]);
    m_average_scores_isSet = !json[QString("average_scores")].isNull() && m_average_scores_isValid;

    m_budget_code_isValid = ::OpenAPI::fromJsonValue(m_budget_code, json[QString("budget_code")]);
    m_budget_code_isSet = !json[QString("budget_code")].isNull() && m_budget_code_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_can_pam_manage_isValid = ::OpenAPI::fromJsonValue(m_can_pam_manage, json[QString("can_pam_manage")]);
    m_can_pam_manage_isSet = !json[QString("can_pam_manage")].isNull() && m_can_pam_manage_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_cm_id_isValid = ::OpenAPI::fromJsonValue(m_cm_id, json[QString("cm_id")]);
    m_cm_id_isSet = !json[QString("cm_id")].isNull() && m_cm_id_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("completed_on")]);
    m_completed_on_isSet = !json[QString("completed_on")].isNull() && m_completed_on_isValid;

    m_continuous_project_type_isValid = ::OpenAPI::fromJsonValue(m_continuous_project_type, json[QString("continuous_project_type")]);
    m_continuous_project_type_isSet = !json[QString("continuous_project_type")].isNull() && m_continuous_project_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_delivery_at_isValid = ::OpenAPI::fromJsonValue(m_delivery_at, json[QString("delivery_at")]);
    m_delivery_at_isSet = !json[QString("delivery_at")].isNull() && m_delivery_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_api_project_isValid = ::OpenAPI::fromJsonValue(m_is_api_project, json[QString("is_api_project")]);
    m_is_api_project_isSet = !json[QString("is_api_project")].isNull() && m_is_api_project_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("is_certified")]);
    m_is_certified_isSet = !json[QString("is_certified")].isNull() && m_is_certified_isValid;

    m_is_continuous_isValid = ::OpenAPI::fromJsonValue(m_is_continuous, json[QString("is_continuous")]);
    m_is_continuous_isSet = !json[QString("is_continuous")].isNull() && m_is_continuous_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("is_manual")]);
    m_is_manual_isSet = !json[QString("is_manual")].isNull() && m_is_manual_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_pairs_isValid = ::OpenAPI::fromJsonValue(m_pairs, json[QString("pairs")]);
    m_pairs_isSet = !json[QString("pairs")].isNull() && m_pairs_isValid;

    m_pivoted_projects_isValid = ::OpenAPI::fromJsonValue(m_pivoted_projects, json[QString("pivoted_projects")]);
    m_pivoted_projects_isSet = !json[QString("pivoted_projects")].isNull() && m_pivoted_projects_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_without_discount_isValid = ::OpenAPI::fromJsonValue(m_price_without_discount, json[QString("price_without_discount")]);
    m_price_without_discount_isSet = !json[QString("price_without_discount")].isNull() && m_price_without_discount_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_should_send_client_survey_isValid = ::OpenAPI::fromJsonValue(m_should_send_client_survey, json[QString("should_send_client_survey")]);
    m_should_send_client_survey_isSet = !json[QString("should_send_client_survey")].isNull() && m_should_send_client_survey_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages")]);
    m_target_languages_isSet = !json[QString("target_languages")].isNull() && m_target_languages_isValid;

    m_tms_name_isValid = ::OpenAPI::fromJsonValue(m_tms_name, json[QString("tms_name")]);
    m_tms_name_isSet = !json[QString("tms_name")].isNull() && m_tms_name_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("valid_until")]);
    m_valid_until_isSet = !json[QString("valid_until")].isNull() && m_valid_until_isValid;

    m_vendor_word_count_isValid = ::OpenAPI::fromJsonValue(m_vendor_word_count, json[QString("vendor_word_count")]);
    m_vendor_word_count_isSet = !json[QString("vendor_word_count")].isNull() && m_vendor_word_count_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;

    m_word_count_analysis_isValid = ::OpenAPI::fromJsonValue(m_word_count_analysis, json[QString("word_count_analysis")]);
    m_word_count_analysis_isSet = !json[QString("word_count_analysis")].isNull() && m_word_count_analysis_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_average_scores.size() > 0) {
        obj.insert(QString("average_scores"), ::OpenAPI::toJsonValue(m_average_scores));
    }
    if (m_budget_code_isSet) {
        obj.insert(QString("budget_code"), ::OpenAPI::toJsonValue(m_budget_code));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_can_pam_manage_isSet) {
        obj.insert(QString("can_pam_manage"), ::OpenAPI::toJsonValue(m_can_pam_manage));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_cm_id_isSet) {
        obj.insert(QString("cm_id"), ::OpenAPI::toJsonValue(m_cm_id));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("completed_on"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_continuous_project_type_isSet) {
        obj.insert(QString("continuous_project_type"), ::OpenAPI::toJsonValue(m_continuous_project_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_delivery_at_isSet) {
        obj.insert(QString("delivery_at"), ::OpenAPI::toJsonValue(m_delivery_at));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_api_project_isSet) {
        obj.insert(QString("is_api_project"), ::OpenAPI::toJsonValue(m_is_api_project));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("is_certified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_is_continuous_isSet) {
        obj.insert(QString("is_continuous"), ::OpenAPI::toJsonValue(m_is_continuous));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("is_manual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_pairs.size() > 0) {
        obj.insert(QString("pairs"), ::OpenAPI::toJsonValue(m_pairs));
    }
    if (m_pivoted_projects.size() > 0) {
        obj.insert(QString("pivoted_projects"), ::OpenAPI::toJsonValue(m_pivoted_projects));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_without_discount.isSet()) {
        obj.insert(QString("price_without_discount"), ::OpenAPI::toJsonValue(m_price_without_discount));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_should_send_client_survey_isSet) {
        obj.insert(QString("should_send_client_survey"), ::OpenAPI::toJsonValue(m_should_send_client_survey));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_tms_name_isSet) {
        obj.insert(QString("tms_name"), ::OpenAPI::toJsonValue(m_tms_name));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("valid_until"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    if (m_vendor_word_count_isSet) {
        obj.insert(QString("vendor_word_count"), ::OpenAPI::toJsonValue(m_vendor_word_count));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    if (m_word_count_analysis.isSet()) {
        obj.insert(QString("word_count_analysis"), ::OpenAPI::toJsonValue(m_word_count_analysis));
    }
    return obj;
}

QMap<QString, float> OAIProject::getAverageScores() const {
    return m_average_scores;
}
void OAIProject::setAverageScores(const QMap<QString, float> &average_scores) {
    m_average_scores = average_scores;
    m_average_scores_isSet = true;
}

bool OAIProject::is_average_scores_Set() const{
    return m_average_scores_isSet;
}

bool OAIProject::is_average_scores_Valid() const{
    return m_average_scores_isValid;
}

QString OAIProject::getBudgetCode() const {
    return m_budget_code;
}
void OAIProject::setBudgetCode(const QString &budget_code) {
    m_budget_code = budget_code;
    m_budget_code_isSet = true;
}

bool OAIProject::is_budget_code_Set() const{
    return m_budget_code_isSet;
}

bool OAIProject::is_budget_code_Valid() const{
    return m_budget_code_isValid;
}

QString OAIProject::getCallbackUrl() const {
    return m_callback_url;
}
void OAIProject::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIProject::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIProject::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

bool OAIProject::isCanPamManage() const {
    return m_can_pam_manage;
}
void OAIProject::setCanPamManage(const bool &can_pam_manage) {
    m_can_pam_manage = can_pam_manage;
    m_can_pam_manage_isSet = true;
}

bool OAIProject::is_can_pam_manage_Set() const{
    return m_can_pam_manage_isSet;
}

bool OAIProject::is_can_pam_manage_Valid() const{
    return m_can_pam_manage_isValid;
}

OAIUser OAIProject::getClient() const {
    return m_client;
}
void OAIProject::setClient(const OAIUser &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIProject::is_client_Set() const{
    return m_client_isSet;
}

bool OAIProject::is_client_Valid() const{
    return m_client_isValid;
}

qint64 OAIProject::getCmId() const {
    return m_cm_id;
}
void OAIProject::setCmId(const qint64 &cm_id) {
    m_cm_id = cm_id;
    m_cm_id_isSet = true;
}

bool OAIProject::is_cm_id_Set() const{
    return m_cm_id_isSet;
}

bool OAIProject::is_cm_id_Valid() const{
    return m_cm_id_isValid;
}

QDateTime OAIProject::getCompletedOn() const {
    return m_completed_on;
}
void OAIProject::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIProject::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIProject::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

QString OAIProject::getContinuousProjectType() const {
    return m_continuous_project_type;
}
void OAIProject::setContinuousProjectType(const QString &continuous_project_type) {
    m_continuous_project_type = continuous_project_type;
    m_continuous_project_type_isSet = true;
}

bool OAIProject::is_continuous_project_type_Set() const{
    return m_continuous_project_type_isSet;
}

bool OAIProject::is_continuous_project_type_Valid() const{
    return m_continuous_project_type_isValid;
}

qint64 OAIProject::getCreatedAt() const {
    return m_created_at;
}
void OAIProject::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProject::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProject::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIProject::getCustom() const {
    return m_custom;
}
void OAIProject::setCustom(const OAIObject &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIProject::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIProject::is_custom_Valid() const{
    return m_custom_isValid;
}

qint64 OAIProject::getDeliveryAt() const {
    return m_delivery_at;
}
void OAIProject::setDeliveryAt(const qint64 &delivery_at) {
    m_delivery_at = delivery_at;
    m_delivery_at_isSet = true;
}

bool OAIProject::is_delivery_at_Set() const{
    return m_delivery_at_isSet;
}

bool OAIProject::is_delivery_at_Valid() const{
    return m_delivery_at_isValid;
}

QList<OAIError> OAIProject::getErrors() const {
    return m_errors;
}
void OAIProject::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIProject::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIProject::is_errors_Valid() const{
    return m_errors_isValid;
}

qint64 OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProject::isIsApiProject() const {
    return m_is_api_project;
}
void OAIProject::setIsApiProject(const bool &is_api_project) {
    m_is_api_project = is_api_project;
    m_is_api_project_isSet = true;
}

bool OAIProject::is_is_api_project_Set() const{
    return m_is_api_project_isSet;
}

bool OAIProject::is_is_api_project_Valid() const{
    return m_is_api_project_isValid;
}

bool OAIProject::isIsCertified() const {
    return m_is_certified;
}
void OAIProject::setIsCertified(const bool &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAIProject::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAIProject::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

bool OAIProject::isIsContinuous() const {
    return m_is_continuous;
}
void OAIProject::setIsContinuous(const bool &is_continuous) {
    m_is_continuous = is_continuous;
    m_is_continuous_isSet = true;
}

bool OAIProject::is_is_continuous_Set() const{
    return m_is_continuous_isSet;
}

bool OAIProject::is_is_continuous_Valid() const{
    return m_is_continuous_isValid;
}

bool OAIProject::isIsManual() const {
    return m_is_manual;
}
void OAIProject::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAIProject::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAIProject::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

OAIProjectLinks OAIProject::getLinks() const {
    return m_links;
}
void OAIProject::setLinks(const OAIProjectLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProject::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProject::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIVendorProjectPair> OAIProject::getPairs() const {
    return m_pairs;
}
void OAIProject::setPairs(const QList<OAIVendorProjectPair> &pairs) {
    m_pairs = pairs;
    m_pairs_isSet = true;
}

bool OAIProject::is_pairs_Set() const{
    return m_pairs_isSet;
}

bool OAIProject::is_pairs_Valid() const{
    return m_pairs_isValid;
}

QList<qint64> OAIProject::getPivotedProjects() const {
    return m_pivoted_projects;
}
void OAIProject::setPivotedProjects(const QList<qint64> &pivoted_projects) {
    m_pivoted_projects = pivoted_projects;
    m_pivoted_projects_isSet = true;
}

bool OAIProject::is_pivoted_projects_Set() const{
    return m_pivoted_projects_isSet;
}

bool OAIProject::is_pivoted_projects_Valid() const{
    return m_pivoted_projects_isValid;
}

OAIProject_price OAIProject::getPrice() const {
    return m_price;
}
void OAIProject::setPrice(const OAIProject_price &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProject::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProject::is_price_Valid() const{
    return m_price_isValid;
}

OAIProject_price OAIProject::getPriceWithoutDiscount() const {
    return m_price_without_discount;
}
void OAIProject::setPriceWithoutDiscount(const OAIProject_price &price_without_discount) {
    m_price_without_discount = price_without_discount;
    m_price_without_discount_isSet = true;
}

bool OAIProject::is_price_without_discount_Set() const{
    return m_price_without_discount_isSet;
}

bool OAIProject::is_price_without_discount_Valid() const{
    return m_price_without_discount_isValid;
}

OAIVendorProjectRole OAIProject::getRole() const {
    return m_role;
}
void OAIProject::setRole(const OAIVendorProjectRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIProject::is_role_Set() const{
    return m_role_isSet;
}

bool OAIProject::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIProject::isShouldSendClientSurvey() const {
    return m_should_send_client_survey;
}
void OAIProject::setShouldSendClientSurvey(const bool &should_send_client_survey) {
    m_should_send_client_survey = should_send_client_survey;
    m_should_send_client_survey_isSet = true;
}

bool OAIProject::is_should_send_client_survey_Set() const{
    return m_should_send_client_survey_isSet;
}

bool OAIProject::is_should_send_client_survey_Valid() const{
    return m_should_send_client_survey_isValid;
}

OAIProjectSource OAIProject::getSource() const {
    return m_source;
}
void OAIProject::setSource(const OAIProjectSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIProject::is_source_Set() const{
    return m_source_isSet;
}

bool OAIProject::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIProject::getSourceLanguage() const {
    return m_source_language;
}
void OAIProject::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIProject::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIProject::is_source_language_Valid() const{
    return m_source_language_isValid;
}

OAIProjectStatus OAIProject::getStatus() const {
    return m_status;
}
void OAIProject::setStatus(const OAIProjectStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProject::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIProject::getSubjects() const {
    return m_subjects;
}
void OAIProject::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIProject::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIProject::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QList<QString> OAIProject::getTargetLanguages() const {
    return m_target_languages;
}
void OAIProject::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIProject::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIProject::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

QString OAIProject::getTmsName() const {
    return m_tms_name;
}
void OAIProject::setTmsName(const QString &tms_name) {
    m_tms_name = tms_name;
    m_tms_name_isSet = true;
}

bool OAIProject::is_tms_name_Set() const{
    return m_tms_name_isSet;
}

bool OAIProject::is_tms_name_Valid() const{
    return m_tms_name_isValid;
}

qint64 OAIProject::getValidUntil() const {
    return m_valid_until;
}
void OAIProject::setValidUntil(const qint64 &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAIProject::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAIProject::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

qint64 OAIProject::getVendorWordCount() const {
    return m_vendor_word_count;
}
void OAIProject::setVendorWordCount(const qint64 &vendor_word_count) {
    m_vendor_word_count = vendor_word_count;
    m_vendor_word_count_isSet = true;
}

bool OAIProject::is_vendor_word_count_Set() const{
    return m_vendor_word_count_isSet;
}

bool OAIProject::is_vendor_word_count_Valid() const{
    return m_vendor_word_count_isValid;
}

qint64 OAIProject::getWordCount() const {
    return m_word_count;
}
void OAIProject::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIProject::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIProject::is_word_count_Valid() const{
    return m_word_count_isValid;
}

OAIProject_word_count_analysis OAIProject::getWordCountAnalysis() const {
    return m_word_count_analysis;
}
void OAIProject::setWordCountAnalysis(const OAIProject_word_count_analysis &word_count_analysis) {
    m_word_count_analysis = word_count_analysis;
    m_word_count_analysis_isSet = true;
}

bool OAIProject::is_word_count_analysis_Set() const{
    return m_word_count_analysis_isSet;
}

bool OAIProject::is_word_count_analysis_Valid() const{
    return m_word_count_analysis_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_pam_manage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_project_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_api_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_continuous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivoted_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_without_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_send_client_survey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tms_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
