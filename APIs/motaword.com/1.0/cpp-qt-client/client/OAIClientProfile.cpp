/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientProfile::OAIClientProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientProfile::OAIClientProfile() {
    this->initializeModel();
}

OAIClientProfile::~OAIClientProfile() {}

void OAIClientProfile::initializeModel() {

    m_account_creation_date_isSet = false;
    m_account_creation_date_isValid = false;

    m_client_project_count_isSet = false;
    m_client_project_count_isValid = false;

    m_corporate_isSet = false;
    m_corporate_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_corporate_user_count_isSet = false;
    m_corporate_user_count_isValid = false;

    m_frequent_file_extension_isSet = false;
    m_frequent_file_extension_isValid = false;

    m_frequent_language_pairs_isSet = false;
    m_frequent_language_pairs_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_growth_isSet = false;
    m_growth_isValid = false;

    m_is_complex_isSet = false;
    m_is_complex_isValid = false;

    m_last_12_months_spending_isSet = false;
    m_last_12_months_spending_isValid = false;

    m_last_project_isSet = false;
    m_last_project_isValid = false;

    m_last_project_time_isSet = false;
    m_last_project_time_isValid = false;

    m_last_proofreaders_isSet = false;
    m_last_proofreaders_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_nps_isSet = false;
    m_nps_isValid = false;

    m_user_rank_in_project_count_isSet = false;
    m_user_rank_in_project_count_isValid = false;

    m_user_rank_in_spending_isSet = false;
    m_user_rank_in_spending_isValid = false;
}

void OAIClientProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientProfile::fromJsonObject(QJsonObject json) {

    m_account_creation_date_isValid = ::OpenAPI::fromJsonValue(m_account_creation_date, json[QString("account_creation_date")]);
    m_account_creation_date_isSet = !json[QString("account_creation_date")].isNull() && m_account_creation_date_isValid;

    m_client_project_count_isValid = ::OpenAPI::fromJsonValue(m_client_project_count, json[QString("client_project_count")]);
    m_client_project_count_isSet = !json[QString("client_project_count")].isNull() && m_client_project_count_isValid;

    m_corporate_isValid = ::OpenAPI::fromJsonValue(m_corporate, json[QString("corporate")]);
    m_corporate_isSet = !json[QString("corporate")].isNull() && m_corporate_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporate_id")]);
    m_corporate_id_isSet = !json[QString("corporate_id")].isNull() && m_corporate_id_isValid;

    m_corporate_user_count_isValid = ::OpenAPI::fromJsonValue(m_corporate_user_count, json[QString("corporate_user_count")]);
    m_corporate_user_count_isSet = !json[QString("corporate_user_count")].isNull() && m_corporate_user_count_isValid;

    m_frequent_file_extension_isValid = ::OpenAPI::fromJsonValue(m_frequent_file_extension, json[QString("frequent_file_extension")]);
    m_frequent_file_extension_isSet = !json[QString("frequent_file_extension")].isNull() && m_frequent_file_extension_isValid;

    m_frequent_language_pairs_isValid = ::OpenAPI::fromJsonValue(m_frequent_language_pairs, json[QString("frequent_language_pairs")]);
    m_frequent_language_pairs_isSet = !json[QString("frequent_language_pairs")].isNull() && m_frequent_language_pairs_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_growth_isValid = ::OpenAPI::fromJsonValue(m_growth, json[QString("growth")]);
    m_growth_isSet = !json[QString("growth")].isNull() && m_growth_isValid;

    m_is_complex_isValid = ::OpenAPI::fromJsonValue(m_is_complex, json[QString("is_complex")]);
    m_is_complex_isSet = !json[QString("is_complex")].isNull() && m_is_complex_isValid;

    m_last_12_months_spending_isValid = ::OpenAPI::fromJsonValue(m_last_12_months_spending, json[QString("last_12_months_spending")]);
    m_last_12_months_spending_isSet = !json[QString("last_12_months_spending")].isNull() && m_last_12_months_spending_isValid;

    m_last_project_isValid = ::OpenAPI::fromJsonValue(m_last_project, json[QString("last_project")]);
    m_last_project_isSet = !json[QString("last_project")].isNull() && m_last_project_isValid;

    m_last_project_time_isValid = ::OpenAPI::fromJsonValue(m_last_project_time, json[QString("last_project_time")]);
    m_last_project_time_isSet = !json[QString("last_project_time")].isNull() && m_last_project_time_isValid;

    m_last_proofreaders_isValid = ::OpenAPI::fromJsonValue(m_last_proofreaders, json[QString("last_proofreaders")]);
    m_last_proofreaders_isSet = !json[QString("last_proofreaders")].isNull() && m_last_proofreaders_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_nps_isValid = ::OpenAPI::fromJsonValue(m_nps, json[QString("nps")]);
    m_nps_isSet = !json[QString("nps")].isNull() && m_nps_isValid;

    m_user_rank_in_project_count_isValid = ::OpenAPI::fromJsonValue(m_user_rank_in_project_count, json[QString("user_rank_in_project_count")]);
    m_user_rank_in_project_count_isSet = !json[QString("user_rank_in_project_count")].isNull() && m_user_rank_in_project_count_isValid;

    m_user_rank_in_spending_isValid = ::OpenAPI::fromJsonValue(m_user_rank_in_spending, json[QString("user_rank_in_spending")]);
    m_user_rank_in_spending_isSet = !json[QString("user_rank_in_spending")].isNull() && m_user_rank_in_spending_isValid;
}

QString OAIClientProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_account_creation_date_isSet) {
        obj.insert(QString("account_creation_date"), ::OpenAPI::toJsonValue(m_account_creation_date));
    }
    if (m_client_project_count_isSet) {
        obj.insert(QString("client_project_count"), ::OpenAPI::toJsonValue(m_client_project_count));
    }
    if (m_corporate_isSet) {
        obj.insert(QString("corporate"), ::OpenAPI::toJsonValue(m_corporate));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporate_id"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_corporate_user_count_isSet) {
        obj.insert(QString("corporate_user_count"), ::OpenAPI::toJsonValue(m_corporate_user_count));
    }
    if (m_frequent_file_extension_isSet) {
        obj.insert(QString("frequent_file_extension"), ::OpenAPI::toJsonValue(m_frequent_file_extension));
    }
    if (m_frequent_language_pairs.size() > 0) {
        obj.insert(QString("frequent_language_pairs"), ::OpenAPI::toJsonValue(m_frequent_language_pairs));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_growth_isSet) {
        obj.insert(QString("growth"), ::OpenAPI::toJsonValue(m_growth));
    }
    if (m_is_complex_isSet) {
        obj.insert(QString("is_complex"), ::OpenAPI::toJsonValue(m_is_complex));
    }
    if (m_last_12_months_spending_isSet) {
        obj.insert(QString("last_12_months_spending"), ::OpenAPI::toJsonValue(m_last_12_months_spending));
    }
    if (m_last_project_isSet) {
        obj.insert(QString("last_project"), ::OpenAPI::toJsonValue(m_last_project));
    }
    if (m_last_project_time_isSet) {
        obj.insert(QString("last_project_time"), ::OpenAPI::toJsonValue(m_last_project_time));
    }
    if (m_last_proofreaders.size() > 0) {
        obj.insert(QString("last_proofreaders"), ::OpenAPI::toJsonValue(m_last_proofreaders));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_nps.isSet()) {
        obj.insert(QString("nps"), ::OpenAPI::toJsonValue(m_nps));
    }
    if (m_user_rank_in_project_count_isSet) {
        obj.insert(QString("user_rank_in_project_count"), ::OpenAPI::toJsonValue(m_user_rank_in_project_count));
    }
    if (m_user_rank_in_spending_isSet) {
        obj.insert(QString("user_rank_in_spending"), ::OpenAPI::toJsonValue(m_user_rank_in_spending));
    }
    return obj;
}

QDateTime OAIClientProfile::getAccountCreationDate() const {
    return m_account_creation_date;
}
void OAIClientProfile::setAccountCreationDate(const QDateTime &account_creation_date) {
    m_account_creation_date = account_creation_date;
    m_account_creation_date_isSet = true;
}

bool OAIClientProfile::is_account_creation_date_Set() const{
    return m_account_creation_date_isSet;
}

bool OAIClientProfile::is_account_creation_date_Valid() const{
    return m_account_creation_date_isValid;
}

double OAIClientProfile::getClientProjectCount() const {
    return m_client_project_count;
}
void OAIClientProfile::setClientProjectCount(const double &client_project_count) {
    m_client_project_count = client_project_count;
    m_client_project_count_isSet = true;
}

bool OAIClientProfile::is_client_project_count_Set() const{
    return m_client_project_count_isSet;
}

bool OAIClientProfile::is_client_project_count_Valid() const{
    return m_client_project_count_isValid;
}

QString OAIClientProfile::getCorporate() const {
    return m_corporate;
}
void OAIClientProfile::setCorporate(const QString &corporate) {
    m_corporate = corporate;
    m_corporate_isSet = true;
}

bool OAIClientProfile::is_corporate_Set() const{
    return m_corporate_isSet;
}

bool OAIClientProfile::is_corporate_Valid() const{
    return m_corporate_isValid;
}

double OAIClientProfile::getCorporateId() const {
    return m_corporate_id;
}
void OAIClientProfile::setCorporateId(const double &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAIClientProfile::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAIClientProfile::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

double OAIClientProfile::getCorporateUserCount() const {
    return m_corporate_user_count;
}
void OAIClientProfile::setCorporateUserCount(const double &corporate_user_count) {
    m_corporate_user_count = corporate_user_count;
    m_corporate_user_count_isSet = true;
}

bool OAIClientProfile::is_corporate_user_count_Set() const{
    return m_corporate_user_count_isSet;
}

bool OAIClientProfile::is_corporate_user_count_Valid() const{
    return m_corporate_user_count_isValid;
}

QString OAIClientProfile::getFrequentFileExtension() const {
    return m_frequent_file_extension;
}
void OAIClientProfile::setFrequentFileExtension(const QString &frequent_file_extension) {
    m_frequent_file_extension = frequent_file_extension;
    m_frequent_file_extension_isSet = true;
}

bool OAIClientProfile::is_frequent_file_extension_Set() const{
    return m_frequent_file_extension_isSet;
}

bool OAIClientProfile::is_frequent_file_extension_Valid() const{
    return m_frequent_file_extension_isValid;
}

QList<QString> OAIClientProfile::getFrequentLanguagePairs() const {
    return m_frequent_language_pairs;
}
void OAIClientProfile::setFrequentLanguagePairs(const QList<QString> &frequent_language_pairs) {
    m_frequent_language_pairs = frequent_language_pairs;
    m_frequent_language_pairs_isSet = true;
}

bool OAIClientProfile::is_frequent_language_pairs_Set() const{
    return m_frequent_language_pairs_isSet;
}

bool OAIClientProfile::is_frequent_language_pairs_Valid() const{
    return m_frequent_language_pairs_isValid;
}

QString OAIClientProfile::getFullName() const {
    return m_full_name;
}
void OAIClientProfile::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIClientProfile::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIClientProfile::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIClientProfile::isGrowth() const {
    return m_growth;
}
void OAIClientProfile::setGrowth(const bool &growth) {
    m_growth = growth;
    m_growth_isSet = true;
}

bool OAIClientProfile::is_growth_Set() const{
    return m_growth_isSet;
}

bool OAIClientProfile::is_growth_Valid() const{
    return m_growth_isValid;
}

bool OAIClientProfile::isIsComplex() const {
    return m_is_complex;
}
void OAIClientProfile::setIsComplex(const bool &is_complex) {
    m_is_complex = is_complex;
    m_is_complex_isSet = true;
}

bool OAIClientProfile::is_is_complex_Set() const{
    return m_is_complex_isSet;
}

bool OAIClientProfile::is_is_complex_Valid() const{
    return m_is_complex_isValid;
}

float OAIClientProfile::getLast12MonthsSpending() const {
    return m_last_12_months_spending;
}
void OAIClientProfile::setLast12MonthsSpending(const float &last_12_months_spending) {
    m_last_12_months_spending = last_12_months_spending;
    m_last_12_months_spending_isSet = true;
}

bool OAIClientProfile::is_last_12_months_spending_Set() const{
    return m_last_12_months_spending_isSet;
}

bool OAIClientProfile::is_last_12_months_spending_Valid() const{
    return m_last_12_months_spending_isValid;
}

double OAIClientProfile::getLastProject() const {
    return m_last_project;
}
void OAIClientProfile::setLastProject(const double &last_project) {
    m_last_project = last_project;
    m_last_project_isSet = true;
}

bool OAIClientProfile::is_last_project_Set() const{
    return m_last_project_isSet;
}

bool OAIClientProfile::is_last_project_Valid() const{
    return m_last_project_isValid;
}

QDateTime OAIClientProfile::getLastProjectTime() const {
    return m_last_project_time;
}
void OAIClientProfile::setLastProjectTime(const QDateTime &last_project_time) {
    m_last_project_time = last_project_time;
    m_last_project_time_isSet = true;
}

bool OAIClientProfile::is_last_project_time_Set() const{
    return m_last_project_time_isSet;
}

bool OAIClientProfile::is_last_project_time_Valid() const{
    return m_last_project_time_isValid;
}

QList<OAIProofreaderWithLanguage> OAIClientProfile::getLastProofreaders() const {
    return m_last_proofreaders;
}
void OAIClientProfile::setLastProofreaders(const QList<OAIProofreaderWithLanguage> &last_proofreaders) {
    m_last_proofreaders = last_proofreaders;
    m_last_proofreaders_isSet = true;
}

bool OAIClientProfile::is_last_proofreaders_Set() const{
    return m_last_proofreaders_isSet;
}

bool OAIClientProfile::is_last_proofreaders_Valid() const{
    return m_last_proofreaders_isValid;
}

QList<QString> OAIClientProfile::getNotes() const {
    return m_notes;
}
void OAIClientProfile::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIClientProfile::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIClientProfile::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIClientProfile_nps OAIClientProfile::getNps() const {
    return m_nps;
}
void OAIClientProfile::setNps(const OAIClientProfile_nps &nps) {
    m_nps = nps;
    m_nps_isSet = true;
}

bool OAIClientProfile::is_nps_Set() const{
    return m_nps_isSet;
}

bool OAIClientProfile::is_nps_Valid() const{
    return m_nps_isValid;
}

double OAIClientProfile::getUserRankInProjectCount() const {
    return m_user_rank_in_project_count;
}
void OAIClientProfile::setUserRankInProjectCount(const double &user_rank_in_project_count) {
    m_user_rank_in_project_count = user_rank_in_project_count;
    m_user_rank_in_project_count_isSet = true;
}

bool OAIClientProfile::is_user_rank_in_project_count_Set() const{
    return m_user_rank_in_project_count_isSet;
}

bool OAIClientProfile::is_user_rank_in_project_count_Valid() const{
    return m_user_rank_in_project_count_isValid;
}

double OAIClientProfile::getUserRankInSpending() const {
    return m_user_rank_in_spending;
}
void OAIClientProfile::setUserRankInSpending(const double &user_rank_in_spending) {
    m_user_rank_in_spending = user_rank_in_spending;
    m_user_rank_in_spending_isSet = true;
}

bool OAIClientProfile::is_user_rank_in_spending_Set() const{
    return m_user_rank_in_spending_isSet;
}

bool OAIClientProfile::is_user_rank_in_spending_Valid() const{
    return m_user_rank_in_spending_isValid;
}

bool OAIClientProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_project_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequent_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequent_language_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_complex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_12_months_spending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_project_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_proofreaders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_rank_in_project_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_rank_in_spending_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
