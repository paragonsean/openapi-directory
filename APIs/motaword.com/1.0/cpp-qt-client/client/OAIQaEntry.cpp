/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQaEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQaEntry::OAIQaEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQaEntry::OAIQaEntry() {
    this->initializeModel();
}

OAIQaEntry::~OAIQaEntry() {}

void OAIQaEntry::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_editor_link_isSet = false;
    m_editor_link_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_in_source_isSet = false;
    m_in_source_isValid = false;

    m_is_current_isSet = false;
    m_is_current_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_language_isSet = false;
    m_target_language_isValid = false;

    m_translation_isSet = false;
    m_translation_isValid = false;

    m_unique_key_isSet = false;
    m_unique_key_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIQaEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQaEntry::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("docId")]);
    m_doc_id_isSet = !json[QString("docId")].isNull() && m_doc_id_isValid;

    m_editor_link_isValid = ::OpenAPI::fromJsonValue(m_editor_link, json[QString("editorLink")]);
    m_editor_link_isSet = !json[QString("editorLink")].isNull() && m_editor_link_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_in_source_isValid = ::OpenAPI::fromJsonValue(m_in_source, json[QString("inSource")]);
    m_in_source_isSet = !json[QString("inSource")].isNull() && m_in_source_isValid;

    m_is_current_isValid = ::OpenAPI::fromJsonValue(m_is_current, json[QString("isCurrent")]);
    m_is_current_isSet = !json[QString("isCurrent")].isNull() && m_is_current_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("sourceLanguage")]);
    m_source_language_isSet = !json[QString("sourceLanguage")].isNull() && m_source_language_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_language_isValid = ::OpenAPI::fromJsonValue(m_target_language, json[QString("targetLanguage")]);
    m_target_language_isSet = !json[QString("targetLanguage")].isNull() && m_target_language_isValid;

    m_translation_isValid = ::OpenAPI::fromJsonValue(m_translation, json[QString("translation")]);
    m_translation_isSet = !json[QString("translation")].isNull() && m_translation_isValid;

    m_unique_key_isValid = ::OpenAPI::fromJsonValue(m_unique_key, json[QString("uniqueKey")]);
    m_unique_key_isSet = !json[QString("uniqueKey")].isNull() && m_unique_key_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIQaEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQaEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_doc_id_isSet) {
        obj.insert(QString("docId"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_editor_link_isSet) {
        obj.insert(QString("editorLink"), ::OpenAPI::toJsonValue(m_editor_link));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_in_source_isSet) {
        obj.insert(QString("inSource"), ::OpenAPI::toJsonValue(m_in_source));
    }
    if (m_is_current_isSet) {
        obj.insert(QString("isCurrent"), ::OpenAPI::toJsonValue(m_is_current));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_project_id.isSet()) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_language.isSet()) {
        obj.insert(QString("sourceLanguage"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_language.isSet()) {
        obj.insert(QString("targetLanguage"), ::OpenAPI::toJsonValue(m_target_language));
    }
    if (m_translation_isSet) {
        obj.insert(QString("translation"), ::OpenAPI::toJsonValue(m_translation));
    }
    if (m_unique_key_isSet) {
        obj.insert(QString("uniqueKey"), ::OpenAPI::toJsonValue(m_unique_key));
    }
    if (m_vendor.isSet()) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIQaEntry::getCategory() const {
    return m_category;
}
void OAIQaEntry::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIQaEntry::is_category_Set() const{
    return m_category_isSet;
}

bool OAIQaEntry::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIQaEntry::getComment() const {
    return m_comment;
}
void OAIQaEntry::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIQaEntry::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIQaEntry::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIQaEntry::getDocId() const {
    return m_doc_id;
}
void OAIQaEntry::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAIQaEntry::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAIQaEntry::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

QString OAIQaEntry::getEditorLink() const {
    return m_editor_link;
}
void OAIQaEntry::setEditorLink(const QString &editor_link) {
    m_editor_link = editor_link;
    m_editor_link_isSet = true;
}

bool OAIQaEntry::is_editor_link_Set() const{
    return m_editor_link_isSet;
}

bool OAIQaEntry::is_editor_link_Valid() const{
    return m_editor_link_isValid;
}

qint64 OAIQaEntry::getEnd() const {
    return m_end;
}
void OAIQaEntry::setEnd(const qint64 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIQaEntry::is_end_Set() const{
    return m_end_isSet;
}

bool OAIQaEntry::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIQaEntry::isInSource() const {
    return m_in_source;
}
void OAIQaEntry::setInSource(const bool &in_source) {
    m_in_source = in_source;
    m_in_source_isSet = true;
}

bool OAIQaEntry::is_in_source_Set() const{
    return m_in_source_isSet;
}

bool OAIQaEntry::is_in_source_Valid() const{
    return m_in_source_isValid;
}

bool OAIQaEntry::isIsCurrent() const {
    return m_is_current;
}
void OAIQaEntry::setIsCurrent(const bool &is_current) {
    m_is_current = is_current;
    m_is_current_isSet = true;
}

bool OAIQaEntry::is_is_current_Set() const{
    return m_is_current_isSet;
}

bool OAIQaEntry::is_is_current_Valid() const{
    return m_is_current_isValid;
}

QString OAIQaEntry::getModule() const {
    return m_module;
}
void OAIQaEntry::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIQaEntry::is_module_Set() const{
    return m_module_isSet;
}

bool OAIQaEntry::is_module_Valid() const{
    return m_module_isValid;
}

OAISimpleModel OAIQaEntry::getProjectId() const {
    return m_project_id;
}
void OAIQaEntry::setProjectId(const OAISimpleModel &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIQaEntry::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIQaEntry::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIQaEntry::getSeverity() const {
    return m_severity;
}
void OAIQaEntry::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIQaEntry::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIQaEntry::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIQaEntry::getSource() const {
    return m_source;
}
void OAIQaEntry::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIQaEntry::is_source_Set() const{
    return m_source_isSet;
}

bool OAIQaEntry::is_source_Valid() const{
    return m_source_isValid;
}

OAISimpleModel OAIQaEntry::getSourceLanguage() const {
    return m_source_language;
}
void OAIQaEntry::setSourceLanguage(const OAISimpleModel &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIQaEntry::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIQaEntry::is_source_language_Valid() const{
    return m_source_language_isValid;
}

qint64 OAIQaEntry::getStart() const {
    return m_start;
}
void OAIQaEntry::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIQaEntry::is_start_Set() const{
    return m_start_isSet;
}

bool OAIQaEntry::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIQaEntry::getState() const {
    return m_state;
}
void OAIQaEntry::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQaEntry::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQaEntry::is_state_Valid() const{
    return m_state_isValid;
}

OAISimpleModel OAIQaEntry::getTargetLanguage() const {
    return m_target_language;
}
void OAIQaEntry::setTargetLanguage(const OAISimpleModel &target_language) {
    m_target_language = target_language;
    m_target_language_isSet = true;
}

bool OAIQaEntry::is_target_language_Set() const{
    return m_target_language_isSet;
}

bool OAIQaEntry::is_target_language_Valid() const{
    return m_target_language_isValid;
}

QString OAIQaEntry::getTranslation() const {
    return m_translation;
}
void OAIQaEntry::setTranslation(const QString &translation) {
    m_translation = translation;
    m_translation_isSet = true;
}

bool OAIQaEntry::is_translation_Set() const{
    return m_translation_isSet;
}

bool OAIQaEntry::is_translation_Valid() const{
    return m_translation_isValid;
}

QString OAIQaEntry::getUniqueKey() const {
    return m_unique_key;
}
void OAIQaEntry::setUniqueKey(const QString &unique_key) {
    m_unique_key = unique_key;
    m_unique_key_isSet = true;
}

bool OAIQaEntry::is_unique_key_Set() const{
    return m_unique_key_isSet;
}

bool OAIQaEntry::is_unique_key_Valid() const{
    return m_unique_key_isValid;
}

OAISimpleModel OAIQaEntry::getVendor() const {
    return m_vendor;
}
void OAIQaEntry::setVendor(const OAISimpleModel &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIQaEntry::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIQaEntry::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIQaEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQaEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
