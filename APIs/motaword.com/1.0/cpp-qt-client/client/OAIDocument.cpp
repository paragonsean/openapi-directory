/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_has_custom_package_isSet = false;
    m_has_custom_package_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_manual_files_isSet = false;
    m_manual_files_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_review_in_manual_editor_isSet = false;
    m_review_in_manual_editor_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_search_score_isSet = false;
    m_search_score_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("file_type")]);
    m_file_type_isSet = !json[QString("file_type")].isNull() && m_file_type_isValid;

    m_has_custom_package_isValid = ::OpenAPI::fromJsonValue(m_has_custom_package, json[QString("has_custom_package")]);
    m_has_custom_package_isSet = !json[QString("has_custom_package")].isNull() && m_has_custom_package_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_manual_files_isValid = ::OpenAPI::fromJsonValue(m_manual_files, json[QString("manual_files")]);
    m_manual_files_isSet = !json[QString("manual_files")].isNull() && m_manual_files_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_review_in_manual_editor_isValid = ::OpenAPI::fromJsonValue(m_review_in_manual_editor, json[QString("review_in_manual_editor")]);
    m_review_in_manual_editor_isSet = !json[QString("review_in_manual_editor")].isNull() && m_review_in_manual_editor_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_search_score_isValid = ::OpenAPI::fromJsonValue(m_search_score, json[QString("search_score")]);
    m_search_score_isSet = !json[QString("search_score")].isNull() && m_search_score_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages")]);
    m_target_languages_isSet = !json[QString("target_languages")].isNull() && m_target_languages_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_file_type_isSet) {
        obj.insert(QString("file_type"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_has_custom_package_isSet) {
        obj.insert(QString("has_custom_package"), ::OpenAPI::toJsonValue(m_has_custom_package));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_manual_files.size() > 0) {
        obj.insert(QString("manual_files"), ::OpenAPI::toJsonValue(m_manual_files));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_review_in_manual_editor_isSet) {
        obj.insert(QString("review_in_manual_editor"), ::OpenAPI::toJsonValue(m_review_in_manual_editor));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_search_score_isSet) {
        obj.insert(QString("search_score"), ::OpenAPI::toJsonValue(m_search_score));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

QString OAIDocument::getFileType() const {
    return m_file_type;
}
void OAIDocument::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIDocument::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIDocument::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAIDocument::isHasCustomPackage() const {
    return m_has_custom_package;
}
void OAIDocument::setHasCustomPackage(const bool &has_custom_package) {
    m_has_custom_package = has_custom_package;
    m_has_custom_package_isSet = true;
}

bool OAIDocument::is_has_custom_package_Set() const{
    return m_has_custom_package_isSet;
}

bool OAIDocument::is_has_custom_package_Valid() const{
    return m_has_custom_package_isValid;
}

qint64 OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentLinks OAIDocument::getLinks() const {
    return m_links;
}
void OAIDocument::setLinks(const OAIDocumentLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDocument::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDocument::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIManualFile> OAIDocument::getManualFiles() const {
    return m_manual_files;
}
void OAIDocument::setManualFiles(const QList<OAIManualFile> &manual_files) {
    m_manual_files = manual_files;
    m_manual_files_isSet = true;
}

bool OAIDocument::is_manual_files_Set() const{
    return m_manual_files_isSet;
}

bool OAIDocument::is_manual_files_Valid() const{
    return m_manual_files_isValid;
}

QString OAIDocument::getName() const {
    return m_name;
}
void OAIDocument::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocument::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocument::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIDocument::getProjectId() const {
    return m_project_id;
}
void OAIDocument::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIDocument::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIDocument::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIDocument::isReviewInManualEditor() const {
    return m_review_in_manual_editor;
}
void OAIDocument::setReviewInManualEditor(const bool &review_in_manual_editor) {
    m_review_in_manual_editor = review_in_manual_editor;
    m_review_in_manual_editor_isSet = true;
}

bool OAIDocument::is_review_in_manual_editor_Set() const{
    return m_review_in_manual_editor_isSet;
}

bool OAIDocument::is_review_in_manual_editor_Valid() const{
    return m_review_in_manual_editor_isValid;
}

OAIObject OAIDocument::getScheme() const {
    return m_scheme;
}
void OAIDocument::setScheme(const OAIObject &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIDocument::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIDocument::is_scheme_Valid() const{
    return m_scheme_isValid;
}

float OAIDocument::getSearchScore() const {
    return m_search_score;
}
void OAIDocument::setSearchScore(const float &search_score) {
    m_search_score = search_score;
    m_search_score_isSet = true;
}

bool OAIDocument::is_search_score_Set() const{
    return m_search_score_isSet;
}

bool OAIDocument::is_search_score_Valid() const{
    return m_search_score_isValid;
}

QString OAIDocument::getSourceLanguage() const {
    return m_source_language;
}
void OAIDocument::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIDocument::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIDocument::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QString OAIDocument::getSubject() const {
    return m_subject;
}
void OAIDocument::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIDocument::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIDocument::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIDocument::getTargetLanguages() const {
    return m_target_languages;
}
void OAIDocument::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIDocument::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIDocument::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

qint64 OAIDocument::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIDocument::setUploadedAt(const qint64 &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIDocument::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIDocument::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

qint64 OAIDocument::getWordCount() const {
    return m_word_count;
}
void OAIDocument::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIDocument::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIDocument::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_in_manual_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
