/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorStats::OAIVendorStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorStats::OAIVendorStats() {
    this->initializeModel();
}

OAIVendorStats::~OAIVendorStats() {}

void OAIVendorStats::initializeModel() {

    m_earnings_isSet = false;
    m_earnings_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;
}

void OAIVendorStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorStats::fromJsonObject(QJsonObject json) {

    m_earnings_isValid = ::OpenAPI::fromJsonValue(m_earnings, json[QString("earnings")]);
    m_earnings_isSet = !json[QString("earnings")].isNull() && m_earnings_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;
}

QString OAIVendorStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorStats::asJsonObject() const {
    QJsonObject obj;
    if (m_earnings.isSet()) {
        obj.insert(QString("earnings"), ::OpenAPI::toJsonValue(m_earnings));
    }
    if (m_projects.isSet()) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_words.isSet()) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    return obj;
}

OAIVendorEarningStats OAIVendorStats::getEarnings() const {
    return m_earnings;
}
void OAIVendorStats::setEarnings(const OAIVendorEarningStats &earnings) {
    m_earnings = earnings;
    m_earnings_isSet = true;
}

bool OAIVendorStats::is_earnings_Set() const{
    return m_earnings_isSet;
}

bool OAIVendorStats::is_earnings_Valid() const{
    return m_earnings_isValid;
}

OAIVendorProjectStats OAIVendorStats::getProjects() const {
    return m_projects;
}
void OAIVendorStats::setProjects(const OAIVendorProjectStats &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIVendorStats::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIVendorStats::is_projects_Valid() const{
    return m_projects_isValid;
}

OAIVendorWordStats OAIVendorStats::getWords() const {
    return m_words;
}
void OAIVendorStats::setWords(const OAIVendorWordStats &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAIVendorStats::is_words_Set() const{
    return m_words_isSet;
}

bool OAIVendorStats::is_words_Valid() const{
    return m_words_isValid;
}

bool OAIVendorStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_words.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
