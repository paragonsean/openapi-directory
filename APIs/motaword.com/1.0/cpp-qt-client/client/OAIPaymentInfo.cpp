/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInfo::OAIPaymentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInfo::OAIPaymentInfo() {
    this->initializeModel();
}

OAIPaymentInfo::~OAIPaymentInfo() {}

void OAIPaymentInfo::initializeModel() {

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_cards_isSet = false;
    m_cards_isValid = false;

    m_corporate_isSet = false;
    m_corporate_isValid = false;

    m_shared_card_isSet = false;
    m_shared_card_isValid = false;
}

void OAIPaymentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInfo::fromJsonObject(QJsonObject json) {

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;

    m_corporate_isValid = ::OpenAPI::fromJsonValue(m_corporate, json[QString("corporate")]);
    m_corporate_isSet = !json[QString("corporate")].isNull() && m_corporate_isValid;

    m_shared_card_isValid = ::OpenAPI::fromJsonValue(m_shared_card, json[QString("shared_card")]);
    m_shared_card_isSet = !json[QString("shared_card")].isNull() && m_shared_card_isValid;
}

QString OAIPaymentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_cards.size() > 0) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    if (m_corporate.isSet()) {
        obj.insert(QString("corporate"), ::OpenAPI::toJsonValue(m_corporate));
    }
    if (m_shared_card.isSet()) {
        obj.insert(QString("shared_card"), ::OpenAPI::toJsonValue(m_shared_card));
    }
    return obj;
}

OAIBillingAddress OAIPaymentInfo::getBilling() const {
    return m_billing;
}
void OAIPaymentInfo::setBilling(const OAIBillingAddress &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAIPaymentInfo::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAIPaymentInfo::is_billing_Valid() const{
    return m_billing_isValid;
}

OAICreditCard OAIPaymentInfo::getCard() const {
    return m_card;
}
void OAIPaymentInfo::setCard(const OAICreditCard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIPaymentInfo::is_card_Set() const{
    return m_card_isSet;
}

bool OAIPaymentInfo::is_card_Valid() const{
    return m_card_isValid;
}

QList<OAICreditCard> OAIPaymentInfo::getCards() const {
    return m_cards;
}
void OAIPaymentInfo::setCards(const QList<OAICreditCard> &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAIPaymentInfo::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAIPaymentInfo::is_cards_Valid() const{
    return m_cards_isValid;
}

OAIPaymentInfo_corporate OAIPaymentInfo::getCorporate() const {
    return m_corporate;
}
void OAIPaymentInfo::setCorporate(const OAIPaymentInfo_corporate &corporate) {
    m_corporate = corporate;
    m_corporate_isSet = true;
}

bool OAIPaymentInfo::is_corporate_Set() const{
    return m_corporate_isSet;
}

bool OAIPaymentInfo::is_corporate_Valid() const{
    return m_corporate_isValid;
}

OAICreditCard OAIPaymentInfo::getSharedCard() const {
    return m_shared_card;
}
void OAIPaymentInfo::setSharedCard(const OAICreditCard &shared_card) {
    m_shared_card = shared_card;
    m_shared_card_isSet = true;
}

bool OAIPaymentInfo::is_shared_card_Set() const{
    return m_shared_card_isSet;
}

bool OAIPaymentInfo::is_shared_card_Valid() const{
    return m_shared_card_isValid;
}

bool OAIPaymentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_card.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
