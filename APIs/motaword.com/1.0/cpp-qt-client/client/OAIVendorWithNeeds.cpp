/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorWithNeeds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorWithNeeds::OAIVendorWithNeeds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorWithNeeds::OAIVendorWithNeeds() {
    this->initializeModel();
}

OAIVendorWithNeeds::~OAIVendorWithNeeds() {}

void OAIVendorWithNeeds::initializeModel() {

    m_matched_needs_isSet = false;
    m_matched_needs_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIVendorWithNeeds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorWithNeeds::fromJsonObject(QJsonObject json) {

    m_matched_needs_isValid = ::OpenAPI::fromJsonValue(m_matched_needs, json[QString("matchedNeeds")]);
    m_matched_needs_isSet = !json[QString("matchedNeeds")].isNull() && m_matched_needs_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIVendorWithNeeds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorWithNeeds::asJsonObject() const {
    QJsonObject obj;
    if (m_matched_needs.size() > 0) {
        obj.insert(QString("matchedNeeds"), ::OpenAPI::toJsonValue(m_matched_needs));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<OAIFileNeedsVendor> OAIVendorWithNeeds::getMatchedNeeds() const {
    return m_matched_needs;
}
void OAIVendorWithNeeds::setMatchedNeeds(const QList<OAIFileNeedsVendor> &matched_needs) {
    m_matched_needs = matched_needs;
    m_matched_needs_isSet = true;
}

bool OAIVendorWithNeeds::is_matched_needs_Set() const{
    return m_matched_needs_isSet;
}

bool OAIVendorWithNeeds::is_matched_needs_Valid() const{
    return m_matched_needs_isValid;
}

qint64 OAIVendorWithNeeds::getUserId() const {
    return m_user_id;
}
void OAIVendorWithNeeds::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIVendorWithNeeds::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIVendorWithNeeds::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIVendorWithNeeds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matched_needs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorWithNeeds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
