/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_client.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_client::OAIUser_client(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_client::OAIUser_client() {
    this->initializeModel();
}

OAIUser_client::~OAIUser_client() {}

void OAIUser_client::initializeModel() {

    m_corporate_isSet = false;
    m_corporate_isValid = false;

    m_nps_isSet = false;
    m_nps_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;
}

void OAIUser_client::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_client::fromJsonObject(QJsonObject json) {

    m_corporate_isValid = ::OpenAPI::fromJsonValue(m_corporate, json[QString("corporate")]);
    m_corporate_isSet = !json[QString("corporate")].isNull() && m_corporate_isValid;

    m_nps_isValid = ::OpenAPI::fromJsonValue(m_nps, json[QString("nps")]);
    m_nps_isSet = !json[QString("nps")].isNull() && m_nps_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;
}

QString OAIUser_client::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_client::asJsonObject() const {
    QJsonObject obj;
    if (m_corporate.isSet()) {
        obj.insert(QString("corporate"), ::OpenAPI::toJsonValue(m_corporate));
    }
    if (m_nps_isSet) {
        obj.insert(QString("nps"), ::OpenAPI::toJsonValue(m_nps));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    return obj;
}

OAIUser_client_corporate OAIUser_client::getCorporate() const {
    return m_corporate;
}
void OAIUser_client::setCorporate(const OAIUser_client_corporate &corporate) {
    m_corporate = corporate;
    m_corporate_isSet = true;
}

bool OAIUser_client::is_corporate_Set() const{
    return m_corporate_isSet;
}

bool OAIUser_client::is_corporate_Valid() const{
    return m_corporate_isValid;
}

float OAIUser_client::getNps() const {
    return m_nps;
}
void OAIUser_client::setNps(const float &nps) {
    m_nps = nps;
    m_nps_isSet = true;
}

bool OAIUser_client::is_nps_Set() const{
    return m_nps_isSet;
}

bool OAIUser_client::is_nps_Valid() const{
    return m_nps_isValid;
}

QMap<QString, qint64> OAIUser_client::getSubjects() const {
    return m_subjects;
}
void OAIUser_client::setSubjects(const QMap<QString, qint64> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIUser_client::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIUser_client::is_subjects_Valid() const{
    return m_subjects_isValid;
}

bool OAIUser_client::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_client::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
