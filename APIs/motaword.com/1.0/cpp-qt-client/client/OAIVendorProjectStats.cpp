/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorProjectStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorProjectStats::OAIVendorProjectStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorProjectStats::OAIVendorProjectStats() {
    this->initializeModel();
}

OAIVendorProjectStats::~OAIVendorProjectStats() {}

void OAIVendorProjectStats::initializeModel() {

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_worked_isSet = false;
    m_worked_isValid = false;
}

void OAIVendorProjectStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorProjectStats::fromJsonObject(QJsonObject json) {

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_worked_isValid = ::OpenAPI::fromJsonValue(m_worked, json[QString("worked")]);
    m_worked_isSet = !json[QString("worked")].isNull() && m_worked_isValid;
}

QString OAIVendorProjectStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorProjectStats::asJsonObject() const {
    QJsonObject obj;
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_worked_isSet) {
        obj.insert(QString("worked"), ::OpenAPI::toJsonValue(m_worked));
    }
    return obj;
}

qint64 OAIVendorProjectStats::getInvited() const {
    return m_invited;
}
void OAIVendorProjectStats::setInvited(const qint64 &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIVendorProjectStats::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIVendorProjectStats::is_invited_Valid() const{
    return m_invited_isValid;
}

qint64 OAIVendorProjectStats::getTotal() const {
    return m_total;
}
void OAIVendorProjectStats::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIVendorProjectStats::is_total_Set() const{
    return m_total_isSet;
}

bool OAIVendorProjectStats::is_total_Valid() const{
    return m_total_isValid;
}

qint64 OAIVendorProjectStats::getWorked() const {
    return m_worked;
}
void OAIVendorProjectStats::setWorked(const qint64 &worked) {
    m_worked = worked;
    m_worked_isSet = true;
}

bool OAIVendorProjectStats::is_worked_Set() const{
    return m_worked_isSet;
}

bool OAIVendorProjectStats::is_worked_Valid() const{
    return m_worked_isValid;
}

bool OAIVendorProjectStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorProjectStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
