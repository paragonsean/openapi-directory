/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveWidget.h"
#include "OAIClientProjectStats.h"
#include "OAIEarnings.h"
#include "OAIEmail.h"
#include "OAIError.h"
#include "OAIFilterVendorRequest.h"
#include "OAILocationUpdateContent.h"
#include "OAINotificationSubscription.h"
#include "OAIOperationStatus.h"
#include "OAIPasswordUpdateContent.h"
#include "OAIPaymentInfo.h"
#include "OAIPermissionList.h"
#include "OAIPopularLanguagePairs.h"
#include "OAIProfilePictureUpload.h"
#include "OAIResponsivityList.h"
#include "OAISendEmailConfirmation_200_response.h"
#include "OAISendUserEmailConfirmation_200_response.h"
#include "OAISendUserEmailConfirmation_202_response.h"
#include "OAIStats.h"
#include "OAISuspendUserRequest.h"
#include "OAIUpdatePaymentInfo.h"
#include "OAIUser.h"
#include "OAIUserGroupList.h"
#include "OAIUserList.h"
#include "OAIUserUpdateContent.h"
#include "OAIVendorTag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void approveVendorApplication(const qint64 &user_id);

    /**
    * @param[in]  notify bool [optional]
    * @param[in]  oai_user OAIUser [optional]
    */
    virtual void createUser(const ::OpenAPI::OptionalParam<bool> &notify = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIUser> &oai_user = ::OpenAPI::OptionalParam<OAIUser>());


    virtual void deleteAccount();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void deleteUserAccount(const qint64 &user_id);


    virtual void downgradeProofreader();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void downgradeUserProofreader(const qint64 &user_id);


    virtual void freezeAccount();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void freezeUserAccount(const qint64 &user_id);


    virtual void getAllVendorTags();


    virtual void getEarnings();

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  oai_filter_vendor_request OAIFilterVendorRequest [optional]
    */
    virtual void getFilteredVendors(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFilterVendorRequest> &oai_filter_vendor_request = ::OpenAPI::OptionalParam<OAIFilterVendorRequest>());


    virtual void getMe();


    virtual void getPaymentInfo();


    virtual void getPermissions();

    /**
    * @param[in]  period QString [optional]
    */
    virtual void getResponsivity(const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>());


    virtual void getStats();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getThisUserGroups(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUser(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserEarnings(const qint64 &user_id);


    virtual void getUserGroups();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserPaymentInfo(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserPermissions(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserPopularPairs(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserProjectStats(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  period QString [optional]
    */
    virtual void getUserResponsivity(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getUserStats(const qint64 &user_id);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    * @param[in]  user_type QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  email QString [optional]
    */
    virtual void getUsers(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &user_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_location_update_content OAILocationUpdateContent [optional]
    */
    virtual void logLocation(const ::OpenAPI::OptionalParam<OAILocationUpdateContent> &oai_location_update_content = ::OpenAPI::OptionalParam<OAILocationUpdateContent>());


    virtual void makeProofreader();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void makeUserProofreader(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void rejectVendorApplication(const qint64 &user_id);


    virtual void sendEmailConfirmation();

    /**
    * @param[in]  oai_email OAIEmail [optional]
    */
    virtual void sendPasswordReminder(const ::OpenAPI::OptionalParam<OAIEmail> &oai_email = ::OpenAPI::OptionalParam<OAIEmail>());

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void sendUserEmailConfirmation(const qint64 &user_id);

    /**
    * @param[in]  oai_notification_subscription OAINotificationSubscription [optional]
    */
    virtual void subscribeNotification(const ::OpenAPI::OptionalParam<OAINotificationSubscription> &oai_notification_subscription = ::OpenAPI::OptionalParam<OAINotificationSubscription>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_notification_subscription OAINotificationSubscription [optional]
    */
    virtual void subscribeUserNotification(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAINotificationSubscription> &oai_notification_subscription = ::OpenAPI::OptionalParam<OAINotificationSubscription>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_suspend_user_request OAISuspendUserRequest [optional]
    */
    virtual void suspendUser(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAISuspendUserRequest> &oai_suspend_user_request = ::OpenAPI::OptionalParam<OAISuspendUserRequest>());


    virtual void unfreezeAccount();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void unfreezeUserAccount(const qint64 &user_id);

    /**
    * @param[in]  oai_notification_subscription OAINotificationSubscription [optional]
    */
    virtual void unsubscribeNotification(const ::OpenAPI::OptionalParam<OAINotificationSubscription> &oai_notification_subscription = ::OpenAPI::OptionalParam<OAINotificationSubscription>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_notification_subscription OAINotificationSubscription [optional]
    */
    virtual void unsubscribeUserNotification(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAINotificationSubscription> &oai_notification_subscription = ::OpenAPI::OptionalParam<OAINotificationSubscription>());

    /**
    * @param[in]  oai_user_update_content OAIUserUpdateContent [optional]
    */
    virtual void updateMe(const ::OpenAPI::OptionalParam<OAIUserUpdateContent> &oai_user_update_content = ::OpenAPI::OptionalParam<OAIUserUpdateContent>());

    /**
    * @param[in]  oai_password_update_content OAIPasswordUpdateContent [optional]
    */
    virtual void updatePassword(const ::OpenAPI::OptionalParam<OAIPasswordUpdateContent> &oai_password_update_content = ::OpenAPI::OptionalParam<OAIPasswordUpdateContent>());

    /**
    * @param[in]  oai_update_payment_info OAIUpdatePaymentInfo [optional]
    */
    virtual void updatePaymentInfo(const ::OpenAPI::OptionalParam<OAIUpdatePaymentInfo> &oai_update_payment_info = ::OpenAPI::OptionalParam<OAIUpdatePaymentInfo>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_user_update_content OAIUserUpdateContent [optional]
    */
    virtual void updateUser(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAIUserUpdateContent> &oai_user_update_content = ::OpenAPI::OptionalParam<OAIUserUpdateContent>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_active_widget OAIActiveWidget [optional]
    */
    virtual void updateUserGroup(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAIActiveWidget> &oai_active_widget = ::OpenAPI::OptionalParam<OAIActiveWidget>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_payment_info OAIPaymentInfo [optional]
    */
    virtual void updateUserPaymentInfo(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAIPaymentInfo> &oai_payment_info = ::OpenAPI::OptionalParam<OAIPaymentInfo>());

    /**
    * @param[in]  oai_profile_picture_upload OAIProfilePictureUpload [optional]
    */
    virtual void uploadProfilePicture(const ::OpenAPI::OptionalParam<OAIProfilePictureUpload> &oai_profile_picture_upload = ::OpenAPI::OptionalParam<OAIProfilePictureUpload>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_profile_picture_upload OAIProfilePictureUpload [optional]
    */
    virtual void uploadUserProfilePicture(const qint64 &user_id, const ::OpenAPI::OptionalParam<OAIProfilePictureUpload> &oai_profile_picture_upload = ::OpenAPI::OptionalParam<OAIProfilePictureUpload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void approveVendorApplicationCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void deleteUserAccountCallback(OAIHttpRequestWorker *worker);
    void downgradeProofreaderCallback(OAIHttpRequestWorker *worker);
    void downgradeUserProofreaderCallback(OAIHttpRequestWorker *worker);
    void freezeAccountCallback(OAIHttpRequestWorker *worker);
    void freezeUserAccountCallback(OAIHttpRequestWorker *worker);
    void getAllVendorTagsCallback(OAIHttpRequestWorker *worker);
    void getEarningsCallback(OAIHttpRequestWorker *worker);
    void getFilteredVendorsCallback(OAIHttpRequestWorker *worker);
    void getMeCallback(OAIHttpRequestWorker *worker);
    void getPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void getPermissionsCallback(OAIHttpRequestWorker *worker);
    void getResponsivityCallback(OAIHttpRequestWorker *worker);
    void getStatsCallback(OAIHttpRequestWorker *worker);
    void getThisUserGroupsCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserEarningsCallback(OAIHttpRequestWorker *worker);
    void getUserGroupsCallback(OAIHttpRequestWorker *worker);
    void getUserPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void getUserPermissionsCallback(OAIHttpRequestWorker *worker);
    void getUserPopularPairsCallback(OAIHttpRequestWorker *worker);
    void getUserProjectStatsCallback(OAIHttpRequestWorker *worker);
    void getUserResponsivityCallback(OAIHttpRequestWorker *worker);
    void getUserStatsCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void logLocationCallback(OAIHttpRequestWorker *worker);
    void makeProofreaderCallback(OAIHttpRequestWorker *worker);
    void makeUserProofreaderCallback(OAIHttpRequestWorker *worker);
    void rejectVendorApplicationCallback(OAIHttpRequestWorker *worker);
    void sendEmailConfirmationCallback(OAIHttpRequestWorker *worker);
    void sendPasswordReminderCallback(OAIHttpRequestWorker *worker);
    void sendUserEmailConfirmationCallback(OAIHttpRequestWorker *worker);
    void subscribeNotificationCallback(OAIHttpRequestWorker *worker);
    void subscribeUserNotificationCallback(OAIHttpRequestWorker *worker);
    void suspendUserCallback(OAIHttpRequestWorker *worker);
    void unfreezeAccountCallback(OAIHttpRequestWorker *worker);
    void unfreezeUserAccountCallback(OAIHttpRequestWorker *worker);
    void unsubscribeNotificationCallback(OAIHttpRequestWorker *worker);
    void unsubscribeUserNotificationCallback(OAIHttpRequestWorker *worker);
    void updateMeCallback(OAIHttpRequestWorker *worker);
    void updatePasswordCallback(OAIHttpRequestWorker *worker);
    void updatePaymentInfoCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUserGroupCallback(OAIHttpRequestWorker *worker);
    void updateUserPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void uploadProfilePictureCallback(OAIHttpRequestWorker *worker);
    void uploadUserProfilePictureCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void approveVendorApplicationSignal(OAIOperationStatus summary);
    void createUserSignal(OAIUser summary);
    void deleteAccountSignal(OAIOperationStatus summary);
    void deleteUserAccountSignal(OAIOperationStatus summary);
    void downgradeProofreaderSignal(OAIOperationStatus summary);
    void downgradeUserProofreaderSignal(OAIOperationStatus summary);
    void freezeAccountSignal(OAIOperationStatus summary);
    void freezeUserAccountSignal(OAIOperationStatus summary);
    void getAllVendorTagsSignal(QList<OAIVendorTag> summary);
    void getEarningsSignal(OAIEarnings summary);
    void getFilteredVendorsSignal(OAIUserList summary);
    void getMeSignal(OAIUser summary);
    void getPaymentInfoSignal(OAIPaymentInfo summary);
    void getPermissionsSignal(OAIPermissionList summary);
    void getResponsivitySignal(OAIResponsivityList summary);
    void getStatsSignal(OAIStats summary);
    void getThisUserGroupsSignal(OAIUserGroupList summary);
    void getUserSignal(OAIUser summary);
    void getUserEarningsSignal(OAIEarnings summary);
    void getUserGroupsSignal(OAIUserGroupList summary);
    void getUserPaymentInfoSignal(OAIPaymentInfo summary);
    void getUserPermissionsSignal(OAIPermissionList summary);
    void getUserPopularPairsSignal(OAIPopularLanguagePairs summary);
    void getUserProjectStatsSignal(OAIClientProjectStats summary);
    void getUserResponsivitySignal(OAIResponsivityList summary);
    void getUserStatsSignal(OAIStats summary);
    void getUsersSignal(OAIUserList summary);
    void logLocationSignal(OAIOperationStatus summary);
    void makeProofreaderSignal(OAIOperationStatus summary);
    void makeUserProofreaderSignal(OAIOperationStatus summary);
    void rejectVendorApplicationSignal(OAIOperationStatus summary);
    void sendEmailConfirmationSignal(OAISendEmailConfirmation_200_response summary);
    void sendPasswordReminderSignal(OAIOperationStatus summary);
    void sendUserEmailConfirmationSignal(OAISendUserEmailConfirmation_200_response summary);
    void subscribeNotificationSignal(OAIOperationStatus summary);
    void subscribeUserNotificationSignal(OAIOperationStatus summary);
    void suspendUserSignal(OAIOperationStatus summary);
    void unfreezeAccountSignal(OAIOperationStatus summary);
    void unfreezeUserAccountSignal(OAIOperationStatus summary);
    void unsubscribeNotificationSignal(OAIOperationStatus summary);
    void unsubscribeUserNotificationSignal(OAIOperationStatus summary);
    void updateMeSignal(OAIUser summary);
    void updatePasswordSignal(OAIOperationStatus summary);
    void updatePaymentInfoSignal(OAIPaymentInfo summary);
    void updateUserSignal(OAIUser summary);
    void updateUserGroupSignal(OAIUserGroupList summary);
    void updateUserPaymentInfoSignal(OAIOperationStatus summary);
    void uploadProfilePictureSignal(OAIOperationStatus summary);
    void uploadUserProfilePictureSignal(OAIOperationStatus summary);


    void approveVendorApplicationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void deleteUserAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downgradeProofreaderSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void downgradeUserProofreaderSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void freezeAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void freezeUserAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void getAllVendorTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVendorTag> summary);
    void getEarningsSignalFull(OAIHttpRequestWorker *worker, OAIEarnings summary);
    void getFilteredVendorsSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void getMeSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getPaymentInfoSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInfo summary);
    void getPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionList summary);
    void getResponsivitySignalFull(OAIHttpRequestWorker *worker, OAIResponsivityList summary);
    void getStatsSignalFull(OAIHttpRequestWorker *worker, OAIStats summary);
    void getThisUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserEarningsSignalFull(OAIHttpRequestWorker *worker, OAIEarnings summary);
    void getUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void getUserPaymentInfoSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInfo summary);
    void getUserPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionList summary);
    void getUserPopularPairsSignalFull(OAIHttpRequestWorker *worker, OAIPopularLanguagePairs summary);
    void getUserProjectStatsSignalFull(OAIHttpRequestWorker *worker, OAIClientProjectStats summary);
    void getUserResponsivitySignalFull(OAIHttpRequestWorker *worker, OAIResponsivityList summary);
    void getUserStatsSignalFull(OAIHttpRequestWorker *worker, OAIStats summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void logLocationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void makeProofreaderSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void makeUserProofreaderSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void rejectVendorApplicationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void sendEmailConfirmationSignalFull(OAIHttpRequestWorker *worker, OAISendEmailConfirmation_200_response summary);
    void sendPasswordReminderSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void sendUserEmailConfirmationSignalFull(OAIHttpRequestWorker *worker, OAISendUserEmailConfirmation_200_response summary);
    void subscribeNotificationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void subscribeUserNotificationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void suspendUserSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void unfreezeAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void unfreezeUserAccountSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void unsubscribeNotificationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void unsubscribeUserNotificationSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void updateMeSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void updatePasswordSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void updatePaymentInfoSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInfo summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void updateUserGroupSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void updateUserPaymentInfoSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void uploadProfilePictureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void uploadUserProfilePictureSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);

    Q_DECL_DEPRECATED_X("Use approveVendorApplicationSignalError() instead")
    void approveVendorApplicationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void approveVendorApplicationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountSignalError() instead")
    void deleteUserAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downgradeProofreaderSignalError() instead")
    void downgradeProofreaderSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downgradeProofreaderSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downgradeUserProofreaderSignalError() instead")
    void downgradeUserProofreaderSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downgradeUserProofreaderSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freezeAccountSignalError() instead")
    void freezeAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void freezeAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freezeUserAccountSignalError() instead")
    void freezeUserAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void freezeUserAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllVendorTagsSignalError() instead")
    void getAllVendorTagsSignalE(QList<OAIVendorTag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllVendorTagsSignalError(QList<OAIVendorTag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEarningsSignalError() instead")
    void getEarningsSignalE(OAIEarnings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEarningsSignalError(OAIEarnings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilteredVendorsSignalError() instead")
    void getFilteredVendorsSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilteredVendorsSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalError() instead")
    void getMeSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentInfoSignalError() instead")
    void getPaymentInfoSignalE(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentInfoSignalError(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalError() instead")
    void getPermissionsSignalE(OAIPermissionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalError(OAIPermissionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResponsivitySignalError() instead")
    void getResponsivitySignalE(OAIResponsivityList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResponsivitySignalError(OAIResponsivityList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsSignalError() instead")
    void getStatsSignalE(OAIStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsSignalError(OAIStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThisUserGroupsSignalError() instead")
    void getThisUserGroupsSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getThisUserGroupsSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEarningsSignalError() instead")
    void getUserEarningsSignalE(OAIEarnings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEarningsSignalError(OAIEarnings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalError() instead")
    void getUserGroupsSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPaymentInfoSignalError() instead")
    void getUserPaymentInfoSignalE(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPaymentInfoSignalError(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalError() instead")
    void getUserPermissionsSignalE(OAIPermissionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalError(OAIPermissionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPopularPairsSignalError() instead")
    void getUserPopularPairsSignalE(OAIPopularLanguagePairs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPopularPairsSignalError(OAIPopularLanguagePairs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProjectStatsSignalError() instead")
    void getUserProjectStatsSignalE(OAIClientProjectStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProjectStatsSignalError(OAIClientProjectStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserResponsivitySignalError() instead")
    void getUserResponsivitySignalE(OAIResponsivityList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserResponsivitySignalError(OAIResponsivityList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserStatsSignalError() instead")
    void getUserStatsSignalE(OAIStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserStatsSignalError(OAIStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logLocationSignalError() instead")
    void logLocationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logLocationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makeProofreaderSignalError() instead")
    void makeProofreaderSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void makeProofreaderSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makeUserProofreaderSignalError() instead")
    void makeUserProofreaderSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void makeUserProofreaderSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectVendorApplicationSignalError() instead")
    void rejectVendorApplicationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectVendorApplicationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailConfirmationSignalError() instead")
    void sendEmailConfirmationSignalE(OAISendEmailConfirmation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailConfirmationSignalError(OAISendEmailConfirmation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPasswordReminderSignalError() instead")
    void sendPasswordReminderSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPasswordReminderSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendUserEmailConfirmationSignalError() instead")
    void sendUserEmailConfirmationSignalE(OAISendUserEmailConfirmation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendUserEmailConfirmationSignalError(OAISendUserEmailConfirmation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeNotificationSignalError() instead")
    void subscribeNotificationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeNotificationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUserNotificationSignalError() instead")
    void subscribeUserNotificationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUserNotificationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalError() instead")
    void suspendUserSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfreezeAccountSignalError() instead")
    void unfreezeAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unfreezeAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfreezeUserAccountSignalError() instead")
    void unfreezeUserAccountSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unfreezeUserAccountSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeNotificationSignalError() instead")
    void unsubscribeNotificationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeNotificationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeUserNotificationSignalError() instead")
    void unsubscribeUserNotificationSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeUserNotificationSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeSignalError() instead")
    void updateMeSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePasswordSignalError() instead")
    void updatePasswordSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePasswordSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentInfoSignalError() instead")
    void updatePaymentInfoSignalE(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentInfoSignalError(OAIPaymentInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserGroupSignalError() instead")
    void updateUserGroupSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPaymentInfoSignalError() instead")
    void updateUserPaymentInfoSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPaymentInfoSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadProfilePictureSignalError() instead")
    void uploadProfilePictureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadProfilePictureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadUserProfilePictureSignalError() instead")
    void uploadUserProfilePictureSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadUserProfilePictureSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use approveVendorApplicationSignalErrorFull() instead")
    void approveVendorApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void approveVendorApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountSignalErrorFull() instead")
    void deleteUserAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downgradeProofreaderSignalErrorFull() instead")
    void downgradeProofreaderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downgradeProofreaderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downgradeUserProofreaderSignalErrorFull() instead")
    void downgradeUserProofreaderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downgradeUserProofreaderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freezeAccountSignalErrorFull() instead")
    void freezeAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void freezeAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freezeUserAccountSignalErrorFull() instead")
    void freezeUserAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void freezeUserAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllVendorTagsSignalErrorFull() instead")
    void getAllVendorTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllVendorTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEarningsSignalErrorFull() instead")
    void getEarningsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEarningsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilteredVendorsSignalErrorFull() instead")
    void getFilteredVendorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilteredVendorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalErrorFull() instead")
    void getMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentInfoSignalErrorFull() instead")
    void getPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalErrorFull() instead")
    void getPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResponsivitySignalErrorFull() instead")
    void getResponsivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResponsivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatsSignalErrorFull() instead")
    void getStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getThisUserGroupsSignalErrorFull() instead")
    void getThisUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getThisUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEarningsSignalErrorFull() instead")
    void getUserEarningsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEarningsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalErrorFull() instead")
    void getUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPaymentInfoSignalErrorFull() instead")
    void getUserPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalErrorFull() instead")
    void getUserPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPopularPairsSignalErrorFull() instead")
    void getUserPopularPairsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPopularPairsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserProjectStatsSignalErrorFull() instead")
    void getUserProjectStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserProjectStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserResponsivitySignalErrorFull() instead")
    void getUserResponsivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserResponsivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserStatsSignalErrorFull() instead")
    void getUserStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logLocationSignalErrorFull() instead")
    void logLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makeProofreaderSignalErrorFull() instead")
    void makeProofreaderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void makeProofreaderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makeUserProofreaderSignalErrorFull() instead")
    void makeUserProofreaderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void makeUserProofreaderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectVendorApplicationSignalErrorFull() instead")
    void rejectVendorApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectVendorApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEmailConfirmationSignalErrorFull() instead")
    void sendEmailConfirmationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEmailConfirmationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPasswordReminderSignalErrorFull() instead")
    void sendPasswordReminderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPasswordReminderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendUserEmailConfirmationSignalErrorFull() instead")
    void sendUserEmailConfirmationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendUserEmailConfirmationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeNotificationSignalErrorFull() instead")
    void subscribeNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUserNotificationSignalErrorFull() instead")
    void subscribeUserNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUserNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalErrorFull() instead")
    void suspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfreezeAccountSignalErrorFull() instead")
    void unfreezeAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfreezeAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfreezeUserAccountSignalErrorFull() instead")
    void unfreezeUserAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfreezeUserAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeNotificationSignalErrorFull() instead")
    void unsubscribeNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeUserNotificationSignalErrorFull() instead")
    void unsubscribeUserNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeUserNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeSignalErrorFull() instead")
    void updateMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePasswordSignalErrorFull() instead")
    void updatePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentInfoSignalErrorFull() instead")
    void updatePaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserGroupSignalErrorFull() instead")
    void updateUserGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserPaymentInfoSignalErrorFull() instead")
    void updateUserPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadProfilePictureSignalErrorFull() instead")
    void uploadProfilePictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadProfilePictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadUserProfilePictureSignalErrorFull() instead")
    void uploadUserProfilePictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadUserProfilePictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
