/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterVendorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterVendorRequest::OAIFilterVendorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterVendorRequest::OAIFilterVendorRequest() {
    this->initializeModel();
}

OAIFilterVendorRequest::~OAIFilterVendorRequest() {}

void OAIFilterVendorRequest::initializeModel() {

    m_clients_isSet = false;
    m_clients_isValid = false;

    m_communication_channel_isSet = false;
    m_communication_channel_isValid = false;

    m_corporate_ids_for_auth_isSet = false;
    m_corporate_ids_for_auth_isValid = false;

    m_corporates_isSet = false;
    m_corporates_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_services_isSet = false;
    m_current_services_isValid = false;

    m_daily_proofreading_capacity_isSet = false;
    m_daily_proofreading_capacity_isValid = false;

    m_daily_translation_capacity_isSet = false;
    m_daily_translation_capacity_isValid = false;

    m_destination_languages_isSet = false;
    m_destination_languages_isValid = false;

    m_dtp_software_isSet = false;
    m_dtp_software_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_experience_isSet = false;
    m_experience_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_certified_translator_isSet = false;
    m_is_certified_translator_isValid = false;

    m_is_sworn_translator_isSet = false;
    m_is_sworn_translator_isValid = false;

    m_language_pairs_isSet = false;
    m_language_pairs_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_online_isSet = false;
    m_last_online_isValid = false;

    m_last_worked_isSet = false;
    m_last_worked_isValid = false;

    m_memoq_isSet = false;
    m_memoq_isValid = false;

    m_memsource_isSet = false;
    m_memsource_isValid = false;

    m_min_tqs_isSet = false;
    m_min_tqs_isValid = false;

    m_omegat_isSet = false;
    m_omegat_isValid = false;

    m_project_count_isSet = false;
    m_project_count_isValid = false;

    m_proofreader_experience_isSet = false;
    m_proofreader_experience_isValid = false;

    m_provides_creative_writing_service_isSet = false;
    m_provides_creative_writing_service_isValid = false;

    m_provides_postedit_service_isSet = false;
    m_provides_postedit_service_isValid = false;

    m_quote_file_subjects_isSet = false;
    m_quote_file_subjects_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sdl_trados_isSet = false;
    m_sdl_trados_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_skype_id_isSet = false;
    m_skype_id_isValid = false;

    m_smartcat_isSet = false;
    m_smartcat_isValid = false;

    m_smartling_isSet = false;
    m_smartling_isValid = false;

    m_source_languages_isSet = false;
    m_source_languages_isValid = false;

    m_specialization_isSet = false;
    m_specialization_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subtitle_edit_isSet = false;
    m_subtitle_edit_isValid = false;

    m_subtitle_workshop_isSet = false;
    m_subtitle_workshop_isValid = false;

    m_translator_association_isSet = false;
    m_translator_association_isValid = false;

    m_transsuite_2000_isSet = false;
    m_transsuite_2000_isValid = false;

    m_user_working_timezone_isSet = false;
    m_user_working_timezone_isValid = false;

    m_vendor_profile_lsp_isSet = false;
    m_vendor_profile_lsp_isValid = false;

    m_vendor_tags_isSet = false;
    m_vendor_tags_isValid = false;

    m_vendor_type_isSet = false;
    m_vendor_type_isValid = false;

    m_vendor_working_timezone_isSet = false;
    m_vendor_working_timezone_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;

    m_wordbee_isSet = false;
    m_wordbee_isValid = false;

    m_wordfast_isSet = false;
    m_wordfast_isValid = false;

    m_work_type_isSet = false;
    m_work_type_isValid = false;

    m_work_with_isSet = false;
    m_work_with_isValid = false;

    m_working_as_isSet = false;
    m_working_as_isValid = false;

    m_xbench_isSet = false;
    m_xbench_isValid = false;

    m_xtm_isSet = false;
    m_xtm_isValid = false;
}

void OAIFilterVendorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterVendorRequest::fromJsonObject(QJsonObject json) {

    m_clients_isValid = ::OpenAPI::fromJsonValue(m_clients, json[QString("clients")]);
    m_clients_isSet = !json[QString("clients")].isNull() && m_clients_isValid;

    m_communication_channel_isValid = ::OpenAPI::fromJsonValue(m_communication_channel, json[QString("communication_channel")]);
    m_communication_channel_isSet = !json[QString("communication_channel")].isNull() && m_communication_channel_isValid;

    m_corporate_ids_for_auth_isValid = ::OpenAPI::fromJsonValue(m_corporate_ids_for_auth, json[QString("corporate_ids_for_auth")]);
    m_corporate_ids_for_auth_isSet = !json[QString("corporate_ids_for_auth")].isNull() && m_corporate_ids_for_auth_isValid;

    m_corporates_isValid = ::OpenAPI::fromJsonValue(m_corporates, json[QString("corporates")]);
    m_corporates_isSet = !json[QString("corporates")].isNull() && m_corporates_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_services_isValid = ::OpenAPI::fromJsonValue(m_current_services, json[QString("current_services")]);
    m_current_services_isSet = !json[QString("current_services")].isNull() && m_current_services_isValid;

    m_daily_proofreading_capacity_isValid = ::OpenAPI::fromJsonValue(m_daily_proofreading_capacity, json[QString("daily_proofreading_capacity")]);
    m_daily_proofreading_capacity_isSet = !json[QString("daily_proofreading_capacity")].isNull() && m_daily_proofreading_capacity_isValid;

    m_daily_translation_capacity_isValid = ::OpenAPI::fromJsonValue(m_daily_translation_capacity, json[QString("daily_translation_capacity")]);
    m_daily_translation_capacity_isSet = !json[QString("daily_translation_capacity")].isNull() && m_daily_translation_capacity_isValid;

    m_destination_languages_isValid = ::OpenAPI::fromJsonValue(m_destination_languages, json[QString("destination_languages")]);
    m_destination_languages_isSet = !json[QString("destination_languages")].isNull() && m_destination_languages_isValid;

    m_dtp_software_isValid = ::OpenAPI::fromJsonValue(m_dtp_software, json[QString("dtp_software")]);
    m_dtp_software_isSet = !json[QString("dtp_software")].isNull() && m_dtp_software_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_experience_isValid = ::OpenAPI::fromJsonValue(m_experience, json[QString("experience")]);
    m_experience_isSet = !json[QString("experience")].isNull() && m_experience_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_certified_translator_isValid = ::OpenAPI::fromJsonValue(m_is_certified_translator, json[QString("is_certified_translator")]);
    m_is_certified_translator_isSet = !json[QString("is_certified_translator")].isNull() && m_is_certified_translator_isValid;

    m_is_sworn_translator_isValid = ::OpenAPI::fromJsonValue(m_is_sworn_translator, json[QString("is_sworn_translator")]);
    m_is_sworn_translator_isSet = !json[QString("is_sworn_translator")].isNull() && m_is_sworn_translator_isValid;

    if(json["language_pairs"].isArray()){
        auto arr = json["language_pairs"].toArray();
        m_language_pairs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<qint32> item;
                m_language_pairs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_language_pairs_isSet = !jval.isNull() && m_language_pairs_isValid;
                m_language_pairs.push_back(item);
            }
        }
    }

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_last_online_isValid = ::OpenAPI::fromJsonValue(m_last_online, json[QString("last_online")]);
    m_last_online_isSet = !json[QString("last_online")].isNull() && m_last_online_isValid;

    m_last_worked_isValid = ::OpenAPI::fromJsonValue(m_last_worked, json[QString("last_worked")]);
    m_last_worked_isSet = !json[QString("last_worked")].isNull() && m_last_worked_isValid;

    m_memoq_isValid = ::OpenAPI::fromJsonValue(m_memoq, json[QString("memoq")]);
    m_memoq_isSet = !json[QString("memoq")].isNull() && m_memoq_isValid;

    m_memsource_isValid = ::OpenAPI::fromJsonValue(m_memsource, json[QString("memsource")]);
    m_memsource_isSet = !json[QString("memsource")].isNull() && m_memsource_isValid;

    m_min_tqs_isValid = ::OpenAPI::fromJsonValue(m_min_tqs, json[QString("min_tqs")]);
    m_min_tqs_isSet = !json[QString("min_tqs")].isNull() && m_min_tqs_isValid;

    m_omegat_isValid = ::OpenAPI::fromJsonValue(m_omegat, json[QString("omegat")]);
    m_omegat_isSet = !json[QString("omegat")].isNull() && m_omegat_isValid;

    m_project_count_isValid = ::OpenAPI::fromJsonValue(m_project_count, json[QString("project_count")]);
    m_project_count_isSet = !json[QString("project_count")].isNull() && m_project_count_isValid;

    m_proofreader_experience_isValid = ::OpenAPI::fromJsonValue(m_proofreader_experience, json[QString("proofreader_experience")]);
    m_proofreader_experience_isSet = !json[QString("proofreader_experience")].isNull() && m_proofreader_experience_isValid;

    m_provides_creative_writing_service_isValid = ::OpenAPI::fromJsonValue(m_provides_creative_writing_service, json[QString("provides_creative_writing_service")]);
    m_provides_creative_writing_service_isSet = !json[QString("provides_creative_writing_service")].isNull() && m_provides_creative_writing_service_isValid;

    m_provides_postedit_service_isValid = ::OpenAPI::fromJsonValue(m_provides_postedit_service, json[QString("provides_postedit_service")]);
    m_provides_postedit_service_isSet = !json[QString("provides_postedit_service")].isNull() && m_provides_postedit_service_isValid;

    m_quote_file_subjects_isValid = ::OpenAPI::fromJsonValue(m_quote_file_subjects, json[QString("quote_file_subjects")]);
    m_quote_file_subjects_isSet = !json[QString("quote_file_subjects")].isNull() && m_quote_file_subjects_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sdl_trados_isValid = ::OpenAPI::fromJsonValue(m_sdl_trados, json[QString("sdl_trados")]);
    m_sdl_trados_isSet = !json[QString("sdl_trados")].isNull() && m_sdl_trados_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_skype_id_isValid = ::OpenAPI::fromJsonValue(m_skype_id, json[QString("skype_id")]);
    m_skype_id_isSet = !json[QString("skype_id")].isNull() && m_skype_id_isValid;

    m_smartcat_isValid = ::OpenAPI::fromJsonValue(m_smartcat, json[QString("smartcat")]);
    m_smartcat_isSet = !json[QString("smartcat")].isNull() && m_smartcat_isValid;

    m_smartling_isValid = ::OpenAPI::fromJsonValue(m_smartling, json[QString("smartling")]);
    m_smartling_isSet = !json[QString("smartling")].isNull() && m_smartling_isValid;

    m_source_languages_isValid = ::OpenAPI::fromJsonValue(m_source_languages, json[QString("source_languages")]);
    m_source_languages_isSet = !json[QString("source_languages")].isNull() && m_source_languages_isValid;

    m_specialization_isValid = ::OpenAPI::fromJsonValue(m_specialization, json[QString("specialization")]);
    m_specialization_isSet = !json[QString("specialization")].isNull() && m_specialization_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subtitle_edit_isValid = ::OpenAPI::fromJsonValue(m_subtitle_edit, json[QString("subtitle_edit")]);
    m_subtitle_edit_isSet = !json[QString("subtitle_edit")].isNull() && m_subtitle_edit_isValid;

    m_subtitle_workshop_isValid = ::OpenAPI::fromJsonValue(m_subtitle_workshop, json[QString("subtitle_workshop")]);
    m_subtitle_workshop_isSet = !json[QString("subtitle_workshop")].isNull() && m_subtitle_workshop_isValid;

    m_translator_association_isValid = ::OpenAPI::fromJsonValue(m_translator_association, json[QString("translator_association")]);
    m_translator_association_isSet = !json[QString("translator_association")].isNull() && m_translator_association_isValid;

    m_transsuite_2000_isValid = ::OpenAPI::fromJsonValue(m_transsuite_2000, json[QString("transsuite_2000")]);
    m_transsuite_2000_isSet = !json[QString("transsuite_2000")].isNull() && m_transsuite_2000_isValid;

    m_user_working_timezone_isValid = ::OpenAPI::fromJsonValue(m_user_working_timezone, json[QString("user_working_timezone")]);
    m_user_working_timezone_isSet = !json[QString("user_working_timezone")].isNull() && m_user_working_timezone_isValid;

    m_vendor_profile_lsp_isValid = ::OpenAPI::fromJsonValue(m_vendor_profile_lsp, json[QString("vendor_profile_lsp")]);
    m_vendor_profile_lsp_isSet = !json[QString("vendor_profile_lsp")].isNull() && m_vendor_profile_lsp_isValid;

    m_vendor_tags_isValid = ::OpenAPI::fromJsonValue(m_vendor_tags, json[QString("vendor_tags")]);
    m_vendor_tags_isSet = !json[QString("vendor_tags")].isNull() && m_vendor_tags_isValid;

    m_vendor_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_type, json[QString("vendor_type")]);
    m_vendor_type_isSet = !json[QString("vendor_type")].isNull() && m_vendor_type_isValid;

    m_vendor_working_timezone_isValid = ::OpenAPI::fromJsonValue(m_vendor_working_timezone, json[QString("vendor_working_timezone")]);
    m_vendor_working_timezone_isSet = !json[QString("vendor_working_timezone")].isNull() && m_vendor_working_timezone_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;

    m_wordbee_isValid = ::OpenAPI::fromJsonValue(m_wordbee, json[QString("wordbee")]);
    m_wordbee_isSet = !json[QString("wordbee")].isNull() && m_wordbee_isValid;

    m_wordfast_isValid = ::OpenAPI::fromJsonValue(m_wordfast, json[QString("wordfast")]);
    m_wordfast_isSet = !json[QString("wordfast")].isNull() && m_wordfast_isValid;

    m_work_type_isValid = ::OpenAPI::fromJsonValue(m_work_type, json[QString("work_type")]);
    m_work_type_isSet = !json[QString("work_type")].isNull() && m_work_type_isValid;

    m_work_with_isValid = ::OpenAPI::fromJsonValue(m_work_with, json[QString("work_with")]);
    m_work_with_isSet = !json[QString("work_with")].isNull() && m_work_with_isValid;

    m_working_as_isValid = ::OpenAPI::fromJsonValue(m_working_as, json[QString("working_as")]);
    m_working_as_isSet = !json[QString("working_as")].isNull() && m_working_as_isValid;

    m_xbench_isValid = ::OpenAPI::fromJsonValue(m_xbench, json[QString("xbench")]);
    m_xbench_isSet = !json[QString("xbench")].isNull() && m_xbench_isValid;

    m_xtm_isValid = ::OpenAPI::fromJsonValue(m_xtm, json[QString("xtm")]);
    m_xtm_isSet = !json[QString("xtm")].isNull() && m_xtm_isValid;
}

QString OAIFilterVendorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterVendorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_clients.size() > 0) {
        obj.insert(QString("clients"), ::OpenAPI::toJsonValue(m_clients));
    }
    if (m_communication_channel.size() > 0) {
        obj.insert(QString("communication_channel"), ::OpenAPI::toJsonValue(m_communication_channel));
    }
    if (m_corporate_ids_for_auth.size() > 0) {
        obj.insert(QString("corporate_ids_for_auth"), ::OpenAPI::toJsonValue(m_corporate_ids_for_auth));
    }
    if (m_corporates.size() > 0) {
        obj.insert(QString("corporates"), ::OpenAPI::toJsonValue(m_corporates));
    }
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_services.size() > 0) {
        obj.insert(QString("current_services"), ::OpenAPI::toJsonValue(m_current_services));
    }
    if (m_daily_proofreading_capacity_isSet) {
        obj.insert(QString("daily_proofreading_capacity"), ::OpenAPI::toJsonValue(m_daily_proofreading_capacity));
    }
    if (m_daily_translation_capacity_isSet) {
        obj.insert(QString("daily_translation_capacity"), ::OpenAPI::toJsonValue(m_daily_translation_capacity));
    }
    if (m_destination_languages.size() > 0) {
        obj.insert(QString("destination_languages"), ::OpenAPI::toJsonValue(m_destination_languages));
    }
    if (m_dtp_software.size() > 0) {
        obj.insert(QString("dtp_software"), ::OpenAPI::toJsonValue(m_dtp_software));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_experience.size() > 0) {
        obj.insert(QString("experience"), ::OpenAPI::toJsonValue(m_experience));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_certified_translator_isSet) {
        obj.insert(QString("is_certified_translator"), ::OpenAPI::toJsonValue(m_is_certified_translator));
    }
    if (m_is_sworn_translator_isSet) {
        obj.insert(QString("is_sworn_translator"), ::OpenAPI::toJsonValue(m_is_sworn_translator));
    }
    if (m_language_pairs.size() > 0) {
        
        obj.insert(QString("language_pairs"), toJsonValue(m_language_pairs));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_online_isSet) {
        obj.insert(QString("last_online"), ::OpenAPI::toJsonValue(m_last_online));
    }
    if (m_last_worked_isSet) {
        obj.insert(QString("last_worked"), ::OpenAPI::toJsonValue(m_last_worked));
    }
    if (m_memoq_isSet) {
        obj.insert(QString("memoq"), ::OpenAPI::toJsonValue(m_memoq));
    }
    if (m_memsource_isSet) {
        obj.insert(QString("memsource"), ::OpenAPI::toJsonValue(m_memsource));
    }
    if (m_min_tqs_isSet) {
        obj.insert(QString("min_tqs"), ::OpenAPI::toJsonValue(m_min_tqs));
    }
    if (m_omegat_isSet) {
        obj.insert(QString("omegat"), ::OpenAPI::toJsonValue(m_omegat));
    }
    if (m_project_count_isSet) {
        obj.insert(QString("project_count"), ::OpenAPI::toJsonValue(m_project_count));
    }
    if (m_proofreader_experience_isSet) {
        obj.insert(QString("proofreader_experience"), ::OpenAPI::toJsonValue(m_proofreader_experience));
    }
    if (m_provides_creative_writing_service_isSet) {
        obj.insert(QString("provides_creative_writing_service"), ::OpenAPI::toJsonValue(m_provides_creative_writing_service));
    }
    if (m_provides_postedit_service_isSet) {
        obj.insert(QString("provides_postedit_service"), ::OpenAPI::toJsonValue(m_provides_postedit_service));
    }
    if (m_quote_file_subjects.size() > 0) {
        obj.insert(QString("quote_file_subjects"), ::OpenAPI::toJsonValue(m_quote_file_subjects));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sdl_trados_isSet) {
        obj.insert(QString("sdl_trados"), ::OpenAPI::toJsonValue(m_sdl_trados));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_skype_id_isSet) {
        obj.insert(QString("skype_id"), ::OpenAPI::toJsonValue(m_skype_id));
    }
    if (m_smartcat_isSet) {
        obj.insert(QString("smartcat"), ::OpenAPI::toJsonValue(m_smartcat));
    }
    if (m_smartling_isSet) {
        obj.insert(QString("smartling"), ::OpenAPI::toJsonValue(m_smartling));
    }
    if (m_source_languages.size() > 0) {
        obj.insert(QString("source_languages"), ::OpenAPI::toJsonValue(m_source_languages));
    }
    if (m_specialization.size() > 0) {
        obj.insert(QString("specialization"), ::OpenAPI::toJsonValue(m_specialization));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subtitle_edit_isSet) {
        obj.insert(QString("subtitle_edit"), ::OpenAPI::toJsonValue(m_subtitle_edit));
    }
    if (m_subtitle_workshop_isSet) {
        obj.insert(QString("subtitle_workshop"), ::OpenAPI::toJsonValue(m_subtitle_workshop));
    }
    if (m_translator_association_isSet) {
        obj.insert(QString("translator_association"), ::OpenAPI::toJsonValue(m_translator_association));
    }
    if (m_transsuite_2000_isSet) {
        obj.insert(QString("transsuite_2000"), ::OpenAPI::toJsonValue(m_transsuite_2000));
    }
    if (m_user_working_timezone.size() > 0) {
        obj.insert(QString("user_working_timezone"), ::OpenAPI::toJsonValue(m_user_working_timezone));
    }
    if (m_vendor_profile_lsp_isSet) {
        obj.insert(QString("vendor_profile_lsp"), ::OpenAPI::toJsonValue(m_vendor_profile_lsp));
    }
    if (m_vendor_tags.size() > 0) {
        obj.insert(QString("vendor_tags"), ::OpenAPI::toJsonValue(m_vendor_tags));
    }
    if (m_vendor_type.size() > 0) {
        obj.insert(QString("vendor_type"), ::OpenAPI::toJsonValue(m_vendor_type));
    }
    if (m_vendor_working_timezone.size() > 0) {
        obj.insert(QString("vendor_working_timezone"), ::OpenAPI::toJsonValue(m_vendor_working_timezone));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    if (m_wordbee_isSet) {
        obj.insert(QString("wordbee"), ::OpenAPI::toJsonValue(m_wordbee));
    }
    if (m_wordfast_isSet) {
        obj.insert(QString("wordfast"), ::OpenAPI::toJsonValue(m_wordfast));
    }
    if (m_work_type_isSet) {
        obj.insert(QString("work_type"), ::OpenAPI::toJsonValue(m_work_type));
    }
    if (m_work_with_isSet) {
        obj.insert(QString("work_with"), ::OpenAPI::toJsonValue(m_work_with));
    }
    if (m_working_as.size() > 0) {
        obj.insert(QString("working_as"), ::OpenAPI::toJsonValue(m_working_as));
    }
    if (m_xbench_isSet) {
        obj.insert(QString("xbench"), ::OpenAPI::toJsonValue(m_xbench));
    }
    if (m_xtm_isSet) {
        obj.insert(QString("xtm"), ::OpenAPI::toJsonValue(m_xtm));
    }
    return obj;
}

QList<qint32> OAIFilterVendorRequest::getClients() const {
    return m_clients;
}
void OAIFilterVendorRequest::setClients(const QList<qint32> &clients) {
    m_clients = clients;
    m_clients_isSet = true;
}

bool OAIFilterVendorRequest::is_clients_Set() const{
    return m_clients_isSet;
}

bool OAIFilterVendorRequest::is_clients_Valid() const{
    return m_clients_isValid;
}

QList<QString> OAIFilterVendorRequest::getCommunicationChannel() const {
    return m_communication_channel;
}
void OAIFilterVendorRequest::setCommunicationChannel(const QList<QString> &communication_channel) {
    m_communication_channel = communication_channel;
    m_communication_channel_isSet = true;
}

bool OAIFilterVendorRequest::is_communication_channel_Set() const{
    return m_communication_channel_isSet;
}

bool OAIFilterVendorRequest::is_communication_channel_Valid() const{
    return m_communication_channel_isValid;
}

QList<qint32> OAIFilterVendorRequest::getCorporateIdsForAuth() const {
    return m_corporate_ids_for_auth;
}
void OAIFilterVendorRequest::setCorporateIdsForAuth(const QList<qint32> &corporate_ids_for_auth) {
    m_corporate_ids_for_auth = corporate_ids_for_auth;
    m_corporate_ids_for_auth_isSet = true;
}

bool OAIFilterVendorRequest::is_corporate_ids_for_auth_Set() const{
    return m_corporate_ids_for_auth_isSet;
}

bool OAIFilterVendorRequest::is_corporate_ids_for_auth_Valid() const{
    return m_corporate_ids_for_auth_isValid;
}

QList<qint32> OAIFilterVendorRequest::getCorporates() const {
    return m_corporates;
}
void OAIFilterVendorRequest::setCorporates(const QList<qint32> &corporates) {
    m_corporates = corporates;
    m_corporates_isSet = true;
}

bool OAIFilterVendorRequest::is_corporates_Set() const{
    return m_corporates_isSet;
}

bool OAIFilterVendorRequest::is_corporates_Valid() const{
    return m_corporates_isValid;
}

QList<QString> OAIFilterVendorRequest::getCountry() const {
    return m_country;
}
void OAIFilterVendorRequest::setCountry(const QList<QString> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIFilterVendorRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAIFilterVendorRequest::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIFilterVendorRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIFilterVendorRequest::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFilterVendorRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFilterVendorRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIFilterVendorRequest::getCurrentServices() const {
    return m_current_services;
}
void OAIFilterVendorRequest::setCurrentServices(const QList<QString> &current_services) {
    m_current_services = current_services;
    m_current_services_isSet = true;
}

bool OAIFilterVendorRequest::is_current_services_Set() const{
    return m_current_services_isSet;
}

bool OAIFilterVendorRequest::is_current_services_Valid() const{
    return m_current_services_isValid;
}

qint32 OAIFilterVendorRequest::getDailyProofreadingCapacity() const {
    return m_daily_proofreading_capacity;
}
void OAIFilterVendorRequest::setDailyProofreadingCapacity(const qint32 &daily_proofreading_capacity) {
    m_daily_proofreading_capacity = daily_proofreading_capacity;
    m_daily_proofreading_capacity_isSet = true;
}

bool OAIFilterVendorRequest::is_daily_proofreading_capacity_Set() const{
    return m_daily_proofreading_capacity_isSet;
}

bool OAIFilterVendorRequest::is_daily_proofreading_capacity_Valid() const{
    return m_daily_proofreading_capacity_isValid;
}

qint32 OAIFilterVendorRequest::getDailyTranslationCapacity() const {
    return m_daily_translation_capacity;
}
void OAIFilterVendorRequest::setDailyTranslationCapacity(const qint32 &daily_translation_capacity) {
    m_daily_translation_capacity = daily_translation_capacity;
    m_daily_translation_capacity_isSet = true;
}

bool OAIFilterVendorRequest::is_daily_translation_capacity_Set() const{
    return m_daily_translation_capacity_isSet;
}

bool OAIFilterVendorRequest::is_daily_translation_capacity_Valid() const{
    return m_daily_translation_capacity_isValid;
}

QList<qint32> OAIFilterVendorRequest::getDestinationLanguages() const {
    return m_destination_languages;
}
void OAIFilterVendorRequest::setDestinationLanguages(const QList<qint32> &destination_languages) {
    m_destination_languages = destination_languages;
    m_destination_languages_isSet = true;
}

bool OAIFilterVendorRequest::is_destination_languages_Set() const{
    return m_destination_languages_isSet;
}

bool OAIFilterVendorRequest::is_destination_languages_Valid() const{
    return m_destination_languages_isValid;
}

QList<QString> OAIFilterVendorRequest::getDtpSoftware() const {
    return m_dtp_software;
}
void OAIFilterVendorRequest::setDtpSoftware(const QList<QString> &dtp_software) {
    m_dtp_software = dtp_software;
    m_dtp_software_isSet = true;
}

bool OAIFilterVendorRequest::is_dtp_software_Set() const{
    return m_dtp_software_isSet;
}

bool OAIFilterVendorRequest::is_dtp_software_Valid() const{
    return m_dtp_software_isValid;
}

QString OAIFilterVendorRequest::getEmailAddress() const {
    return m_email_address;
}
void OAIFilterVendorRequest::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIFilterVendorRequest::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIFilterVendorRequest::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QList<QString> OAIFilterVendorRequest::getExperience() const {
    return m_experience;
}
void OAIFilterVendorRequest::setExperience(const QList<QString> &experience) {
    m_experience = experience;
    m_experience_isSet = true;
}

bool OAIFilterVendorRequest::is_experience_Set() const{
    return m_experience_isSet;
}

bool OAIFilterVendorRequest::is_experience_Valid() const{
    return m_experience_isValid;
}

QString OAIFilterVendorRequest::getFirstName() const {
    return m_first_name;
}
void OAIFilterVendorRequest::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIFilterVendorRequest::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIFilterVendorRequest::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QList<qint32> OAIFilterVendorRequest::getId() const {
    return m_id;
}
void OAIFilterVendorRequest::setId(const QList<qint32> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFilterVendorRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFilterVendorRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFilterVendorRequest::isIsCertifiedTranslator() const {
    return m_is_certified_translator;
}
void OAIFilterVendorRequest::setIsCertifiedTranslator(const bool &is_certified_translator) {
    m_is_certified_translator = is_certified_translator;
    m_is_certified_translator_isSet = true;
}

bool OAIFilterVendorRequest::is_is_certified_translator_Set() const{
    return m_is_certified_translator_isSet;
}

bool OAIFilterVendorRequest::is_is_certified_translator_Valid() const{
    return m_is_certified_translator_isValid;
}

bool OAIFilterVendorRequest::isIsSwornTranslator() const {
    return m_is_sworn_translator;
}
void OAIFilterVendorRequest::setIsSwornTranslator(const bool &is_sworn_translator) {
    m_is_sworn_translator = is_sworn_translator;
    m_is_sworn_translator_isSet = true;
}

bool OAIFilterVendorRequest::is_is_sworn_translator_Set() const{
    return m_is_sworn_translator_isSet;
}

bool OAIFilterVendorRequest::is_is_sworn_translator_Valid() const{
    return m_is_sworn_translator_isValid;
}

QList<QList<qint32>> OAIFilterVendorRequest::getLanguagePairs() const {
    return m_language_pairs;
}
void OAIFilterVendorRequest::setLanguagePairs(const QList<QList<qint32>> &language_pairs) {
    m_language_pairs = language_pairs;
    m_language_pairs_isSet = true;
}

bool OAIFilterVendorRequest::is_language_pairs_Set() const{
    return m_language_pairs_isSet;
}

bool OAIFilterVendorRequest::is_language_pairs_Valid() const{
    return m_language_pairs_isValid;
}

QString OAIFilterVendorRequest::getLastName() const {
    return m_last_name;
}
void OAIFilterVendorRequest::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIFilterVendorRequest::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIFilterVendorRequest::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIFilterVendorRequest::getLastOnline() const {
    return m_last_online;
}
void OAIFilterVendorRequest::setLastOnline(const QString &last_online) {
    m_last_online = last_online;
    m_last_online_isSet = true;
}

bool OAIFilterVendorRequest::is_last_online_Set() const{
    return m_last_online_isSet;
}

bool OAIFilterVendorRequest::is_last_online_Valid() const{
    return m_last_online_isValid;
}

QString OAIFilterVendorRequest::getLastWorked() const {
    return m_last_worked;
}
void OAIFilterVendorRequest::setLastWorked(const QString &last_worked) {
    m_last_worked = last_worked;
    m_last_worked_isSet = true;
}

bool OAIFilterVendorRequest::is_last_worked_Set() const{
    return m_last_worked_isSet;
}

bool OAIFilterVendorRequest::is_last_worked_Valid() const{
    return m_last_worked_isValid;
}

qint32 OAIFilterVendorRequest::getMemoq() const {
    return m_memoq;
}
void OAIFilterVendorRequest::setMemoq(const qint32 &memoq) {
    m_memoq = memoq;
    m_memoq_isSet = true;
}

bool OAIFilterVendorRequest::is_memoq_Set() const{
    return m_memoq_isSet;
}

bool OAIFilterVendorRequest::is_memoq_Valid() const{
    return m_memoq_isValid;
}

qint32 OAIFilterVendorRequest::getMemsource() const {
    return m_memsource;
}
void OAIFilterVendorRequest::setMemsource(const qint32 &memsource) {
    m_memsource = memsource;
    m_memsource_isSet = true;
}

bool OAIFilterVendorRequest::is_memsource_Set() const{
    return m_memsource_isSet;
}

bool OAIFilterVendorRequest::is_memsource_Valid() const{
    return m_memsource_isValid;
}

double OAIFilterVendorRequest::getMinTqs() const {
    return m_min_tqs;
}
void OAIFilterVendorRequest::setMinTqs(const double &min_tqs) {
    m_min_tqs = min_tqs;
    m_min_tqs_isSet = true;
}

bool OAIFilterVendorRequest::is_min_tqs_Set() const{
    return m_min_tqs_isSet;
}

bool OAIFilterVendorRequest::is_min_tqs_Valid() const{
    return m_min_tqs_isValid;
}

qint32 OAIFilterVendorRequest::getOmegat() const {
    return m_omegat;
}
void OAIFilterVendorRequest::setOmegat(const qint32 &omegat) {
    m_omegat = omegat;
    m_omegat_isSet = true;
}

bool OAIFilterVendorRequest::is_omegat_Set() const{
    return m_omegat_isSet;
}

bool OAIFilterVendorRequest::is_omegat_Valid() const{
    return m_omegat_isValid;
}

qint32 OAIFilterVendorRequest::getProjectCount() const {
    return m_project_count;
}
void OAIFilterVendorRequest::setProjectCount(const qint32 &project_count) {
    m_project_count = project_count;
    m_project_count_isSet = true;
}

bool OAIFilterVendorRequest::is_project_count_Set() const{
    return m_project_count_isSet;
}

bool OAIFilterVendorRequest::is_project_count_Valid() const{
    return m_project_count_isValid;
}

qint32 OAIFilterVendorRequest::getProofreaderExperience() const {
    return m_proofreader_experience;
}
void OAIFilterVendorRequest::setProofreaderExperience(const qint32 &proofreader_experience) {
    m_proofreader_experience = proofreader_experience;
    m_proofreader_experience_isSet = true;
}

bool OAIFilterVendorRequest::is_proofreader_experience_Set() const{
    return m_proofreader_experience_isSet;
}

bool OAIFilterVendorRequest::is_proofreader_experience_Valid() const{
    return m_proofreader_experience_isValid;
}

bool OAIFilterVendorRequest::isProvidesCreativeWritingService() const {
    return m_provides_creative_writing_service;
}
void OAIFilterVendorRequest::setProvidesCreativeWritingService(const bool &provides_creative_writing_service) {
    m_provides_creative_writing_service = provides_creative_writing_service;
    m_provides_creative_writing_service_isSet = true;
}

bool OAIFilterVendorRequest::is_provides_creative_writing_service_Set() const{
    return m_provides_creative_writing_service_isSet;
}

bool OAIFilterVendorRequest::is_provides_creative_writing_service_Valid() const{
    return m_provides_creative_writing_service_isValid;
}

bool OAIFilterVendorRequest::isProvidesPosteditService() const {
    return m_provides_postedit_service;
}
void OAIFilterVendorRequest::setProvidesPosteditService(const bool &provides_postedit_service) {
    m_provides_postedit_service = provides_postedit_service;
    m_provides_postedit_service_isSet = true;
}

bool OAIFilterVendorRequest::is_provides_postedit_service_Set() const{
    return m_provides_postedit_service_isSet;
}

bool OAIFilterVendorRequest::is_provides_postedit_service_Valid() const{
    return m_provides_postedit_service_isValid;
}

QList<QString> OAIFilterVendorRequest::getQuoteFileSubjects() const {
    return m_quote_file_subjects;
}
void OAIFilterVendorRequest::setQuoteFileSubjects(const QList<QString> &quote_file_subjects) {
    m_quote_file_subjects = quote_file_subjects;
    m_quote_file_subjects_isSet = true;
}

bool OAIFilterVendorRequest::is_quote_file_subjects_Set() const{
    return m_quote_file_subjects_isSet;
}

bool OAIFilterVendorRequest::is_quote_file_subjects_Valid() const{
    return m_quote_file_subjects_isValid;
}

QString OAIFilterVendorRequest::getReference() const {
    return m_reference;
}
void OAIFilterVendorRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIFilterVendorRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIFilterVendorRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

qint32 OAIFilterVendorRequest::getSdlTrados() const {
    return m_sdl_trados;
}
void OAIFilterVendorRequest::setSdlTrados(const qint32 &sdl_trados) {
    m_sdl_trados = sdl_trados;
    m_sdl_trados_isSet = true;
}

bool OAIFilterVendorRequest::is_sdl_trados_Set() const{
    return m_sdl_trados_isSet;
}

bool OAIFilterVendorRequest::is_sdl_trados_Valid() const{
    return m_sdl_trados_isValid;
}

QString OAIFilterVendorRequest::getSearch() const {
    return m_search;
}
void OAIFilterVendorRequest::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIFilterVendorRequest::is_search_Set() const{
    return m_search_isSet;
}

bool OAIFilterVendorRequest::is_search_Valid() const{
    return m_search_isValid;
}

QString OAIFilterVendorRequest::getSkypeId() const {
    return m_skype_id;
}
void OAIFilterVendorRequest::setSkypeId(const QString &skype_id) {
    m_skype_id = skype_id;
    m_skype_id_isSet = true;
}

bool OAIFilterVendorRequest::is_skype_id_Set() const{
    return m_skype_id_isSet;
}

bool OAIFilterVendorRequest::is_skype_id_Valid() const{
    return m_skype_id_isValid;
}

qint32 OAIFilterVendorRequest::getSmartcat() const {
    return m_smartcat;
}
void OAIFilterVendorRequest::setSmartcat(const qint32 &smartcat) {
    m_smartcat = smartcat;
    m_smartcat_isSet = true;
}

bool OAIFilterVendorRequest::is_smartcat_Set() const{
    return m_smartcat_isSet;
}

bool OAIFilterVendorRequest::is_smartcat_Valid() const{
    return m_smartcat_isValid;
}

qint32 OAIFilterVendorRequest::getSmartling() const {
    return m_smartling;
}
void OAIFilterVendorRequest::setSmartling(const qint32 &smartling) {
    m_smartling = smartling;
    m_smartling_isSet = true;
}

bool OAIFilterVendorRequest::is_smartling_Set() const{
    return m_smartling_isSet;
}

bool OAIFilterVendorRequest::is_smartling_Valid() const{
    return m_smartling_isValid;
}

QList<qint32> OAIFilterVendorRequest::getSourceLanguages() const {
    return m_source_languages;
}
void OAIFilterVendorRequest::setSourceLanguages(const QList<qint32> &source_languages) {
    m_source_languages = source_languages;
    m_source_languages_isSet = true;
}

bool OAIFilterVendorRequest::is_source_languages_Set() const{
    return m_source_languages_isSet;
}

bool OAIFilterVendorRequest::is_source_languages_Valid() const{
    return m_source_languages_isValid;
}

QList<QString> OAIFilterVendorRequest::getSpecialization() const {
    return m_specialization;
}
void OAIFilterVendorRequest::setSpecialization(const QList<QString> &specialization) {
    m_specialization = specialization;
    m_specialization_isSet = true;
}

bool OAIFilterVendorRequest::is_specialization_Set() const{
    return m_specialization_isSet;
}

bool OAIFilterVendorRequest::is_specialization_Valid() const{
    return m_specialization_isValid;
}

QList<QString> OAIFilterVendorRequest::getStatus() const {
    return m_status;
}
void OAIFilterVendorRequest::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFilterVendorRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFilterVendorRequest::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIFilterVendorRequest::getSubtitleEdit() const {
    return m_subtitle_edit;
}
void OAIFilterVendorRequest::setSubtitleEdit(const qint32 &subtitle_edit) {
    m_subtitle_edit = subtitle_edit;
    m_subtitle_edit_isSet = true;
}

bool OAIFilterVendorRequest::is_subtitle_edit_Set() const{
    return m_subtitle_edit_isSet;
}

bool OAIFilterVendorRequest::is_subtitle_edit_Valid() const{
    return m_subtitle_edit_isValid;
}

qint32 OAIFilterVendorRequest::getSubtitleWorkshop() const {
    return m_subtitle_workshop;
}
void OAIFilterVendorRequest::setSubtitleWorkshop(const qint32 &subtitle_workshop) {
    m_subtitle_workshop = subtitle_workshop;
    m_subtitle_workshop_isSet = true;
}

bool OAIFilterVendorRequest::is_subtitle_workshop_Set() const{
    return m_subtitle_workshop_isSet;
}

bool OAIFilterVendorRequest::is_subtitle_workshop_Valid() const{
    return m_subtitle_workshop_isValid;
}

QString OAIFilterVendorRequest::getTranslatorAssociation() const {
    return m_translator_association;
}
void OAIFilterVendorRequest::setTranslatorAssociation(const QString &translator_association) {
    m_translator_association = translator_association;
    m_translator_association_isSet = true;
}

bool OAIFilterVendorRequest::is_translator_association_Set() const{
    return m_translator_association_isSet;
}

bool OAIFilterVendorRequest::is_translator_association_Valid() const{
    return m_translator_association_isValid;
}

qint32 OAIFilterVendorRequest::getTranssuite2000() const {
    return m_transsuite_2000;
}
void OAIFilterVendorRequest::setTranssuite2000(const qint32 &transsuite_2000) {
    m_transsuite_2000 = transsuite_2000;
    m_transsuite_2000_isSet = true;
}

bool OAIFilterVendorRequest::is_transsuite_2000_Set() const{
    return m_transsuite_2000_isSet;
}

bool OAIFilterVendorRequest::is_transsuite_2000_Valid() const{
    return m_transsuite_2000_isValid;
}

QList<QString> OAIFilterVendorRequest::getUserWorkingTimezone() const {
    return m_user_working_timezone;
}
void OAIFilterVendorRequest::setUserWorkingTimezone(const QList<QString> &user_working_timezone) {
    m_user_working_timezone = user_working_timezone;
    m_user_working_timezone_isSet = true;
}

bool OAIFilterVendorRequest::is_user_working_timezone_Set() const{
    return m_user_working_timezone_isSet;
}

bool OAIFilterVendorRequest::is_user_working_timezone_Valid() const{
    return m_user_working_timezone_isValid;
}

QString OAIFilterVendorRequest::getVendorProfileLsp() const {
    return m_vendor_profile_lsp;
}
void OAIFilterVendorRequest::setVendorProfileLsp(const QString &vendor_profile_lsp) {
    m_vendor_profile_lsp = vendor_profile_lsp;
    m_vendor_profile_lsp_isSet = true;
}

bool OAIFilterVendorRequest::is_vendor_profile_lsp_Set() const{
    return m_vendor_profile_lsp_isSet;
}

bool OAIFilterVendorRequest::is_vendor_profile_lsp_Valid() const{
    return m_vendor_profile_lsp_isValid;
}

QList<QString> OAIFilterVendorRequest::getVendorTags() const {
    return m_vendor_tags;
}
void OAIFilterVendorRequest::setVendorTags(const QList<QString> &vendor_tags) {
    m_vendor_tags = vendor_tags;
    m_vendor_tags_isSet = true;
}

bool OAIFilterVendorRequest::is_vendor_tags_Set() const{
    return m_vendor_tags_isSet;
}

bool OAIFilterVendorRequest::is_vendor_tags_Valid() const{
    return m_vendor_tags_isValid;
}

QList<QString> OAIFilterVendorRequest::getVendorType() const {
    return m_vendor_type;
}
void OAIFilterVendorRequest::setVendorType(const QList<QString> &vendor_type) {
    m_vendor_type = vendor_type;
    m_vendor_type_isSet = true;
}

bool OAIFilterVendorRequest::is_vendor_type_Set() const{
    return m_vendor_type_isSet;
}

bool OAIFilterVendorRequest::is_vendor_type_Valid() const{
    return m_vendor_type_isValid;
}

QList<QString> OAIFilterVendorRequest::getVendorWorkingTimezone() const {
    return m_vendor_working_timezone;
}
void OAIFilterVendorRequest::setVendorWorkingTimezone(const QList<QString> &vendor_working_timezone) {
    m_vendor_working_timezone = vendor_working_timezone;
    m_vendor_working_timezone_isSet = true;
}

bool OAIFilterVendorRequest::is_vendor_working_timezone_Set() const{
    return m_vendor_working_timezone_isSet;
}

bool OAIFilterVendorRequest::is_vendor_working_timezone_Valid() const{
    return m_vendor_working_timezone_isValid;
}

qint32 OAIFilterVendorRequest::getWordCount() const {
    return m_word_count;
}
void OAIFilterVendorRequest::setWordCount(const qint32 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIFilterVendorRequest::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIFilterVendorRequest::is_word_count_Valid() const{
    return m_word_count_isValid;
}

qint32 OAIFilterVendorRequest::getWordbee() const {
    return m_wordbee;
}
void OAIFilterVendorRequest::setWordbee(const qint32 &wordbee) {
    m_wordbee = wordbee;
    m_wordbee_isSet = true;
}

bool OAIFilterVendorRequest::is_wordbee_Set() const{
    return m_wordbee_isSet;
}

bool OAIFilterVendorRequest::is_wordbee_Valid() const{
    return m_wordbee_isValid;
}

qint32 OAIFilterVendorRequest::getWordfast() const {
    return m_wordfast;
}
void OAIFilterVendorRequest::setWordfast(const qint32 &wordfast) {
    m_wordfast = wordfast;
    m_wordfast_isSet = true;
}

bool OAIFilterVendorRequest::is_wordfast_Set() const{
    return m_wordfast_isSet;
}

bool OAIFilterVendorRequest::is_wordfast_Valid() const{
    return m_wordfast_isValid;
}

QString OAIFilterVendorRequest::getWorkType() const {
    return m_work_type;
}
void OAIFilterVendorRequest::setWorkType(const QString &work_type) {
    m_work_type = work_type;
    m_work_type_isSet = true;
}

bool OAIFilterVendorRequest::is_work_type_Set() const{
    return m_work_type_isSet;
}

bool OAIFilterVendorRequest::is_work_type_Valid() const{
    return m_work_type_isValid;
}

QString OAIFilterVendorRequest::getWorkWith() const {
    return m_work_with;
}
void OAIFilterVendorRequest::setWorkWith(const QString &work_with) {
    m_work_with = work_with;
    m_work_with_isSet = true;
}

bool OAIFilterVendorRequest::is_work_with_Set() const{
    return m_work_with_isSet;
}

bool OAIFilterVendorRequest::is_work_with_Valid() const{
    return m_work_with_isValid;
}

QList<QString> OAIFilterVendorRequest::getWorkingAs() const {
    return m_working_as;
}
void OAIFilterVendorRequest::setWorkingAs(const QList<QString> &working_as) {
    m_working_as = working_as;
    m_working_as_isSet = true;
}

bool OAIFilterVendorRequest::is_working_as_Set() const{
    return m_working_as_isSet;
}

bool OAIFilterVendorRequest::is_working_as_Valid() const{
    return m_working_as_isValid;
}

qint32 OAIFilterVendorRequest::getXbench() const {
    return m_xbench;
}
void OAIFilterVendorRequest::setXbench(const qint32 &xbench) {
    m_xbench = xbench;
    m_xbench_isSet = true;
}

bool OAIFilterVendorRequest::is_xbench_Set() const{
    return m_xbench_isSet;
}

bool OAIFilterVendorRequest::is_xbench_Valid() const{
    return m_xbench_isValid;
}

qint32 OAIFilterVendorRequest::getXtm() const {
    return m_xtm;
}
void OAIFilterVendorRequest::setXtm(const qint32 &xtm) {
    m_xtm = xtm;
    m_xtm_isSet = true;
}

bool OAIFilterVendorRequest::is_xtm_Set() const{
    return m_xtm_isSet;
}

bool OAIFilterVendorRequest::is_xtm_Valid() const{
    return m_xtm_isValid;
}

bool OAIFilterVendorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_channel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_ids_for_auth.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_proofreading_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_translation_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtp_software.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sworn_translator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_worked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memoq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memsource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_tqs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omegat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proofreader_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provides_creative_writing_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provides_postedit_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_file_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdl_trados_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smartcat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smartling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_workshop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translator_association_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transsuite_2000_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_working_timezone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_profile_lsp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_working_timezone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wordbee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wordfast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_as.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_xbench_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xtm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterVendorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
