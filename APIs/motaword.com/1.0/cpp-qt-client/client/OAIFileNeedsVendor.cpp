/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileNeedsVendor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileNeedsVendor::OAIFileNeedsVendor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileNeedsVendor::OAIFileNeedsVendor() {
    this->initializeModel();
}

OAIFileNeedsVendor::~OAIFileNeedsVendor() {}

void OAIFileNeedsVendor::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_target_language_isSet = false;
    m_target_language_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;
}

void OAIFileNeedsVendor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileNeedsVendor::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_target_language_isValid = ::OpenAPI::fromJsonValue(m_target_language, json[QString("targetLanguage")]);
    m_target_language_isSet = !json[QString("targetLanguage")].isNull() && m_target_language_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("taskType")]);
    m_task_type_isSet = !json[QString("taskType")].isNull() && m_task_type_isValid;
}

QString OAIFileNeedsVendor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileNeedsVendor::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_target_language.size() > 0) {
        obj.insert(QString("targetLanguage"), ::OpenAPI::toJsonValue(m_target_language));
    }
    if (m_task_type.size() > 0) {
        obj.insert(QString("taskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    return obj;
}

qint64 OAIFileNeedsVendor::getFileId() const {
    return m_file_id;
}
void OAIFileNeedsVendor::setFileId(const qint64 &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIFileNeedsVendor::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIFileNeedsVendor::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIFileNeedsVendor::getGuid() const {
    return m_guid;
}
void OAIFileNeedsVendor::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIFileNeedsVendor::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIFileNeedsVendor::is_guid_Valid() const{
    return m_guid_isValid;
}

qint64 OAIFileNeedsVendor::getProjectId() const {
    return m_project_id;
}
void OAIFileNeedsVendor::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIFileNeedsVendor::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIFileNeedsVendor::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIFileNeedsVendor::getReason() const {
    return m_reason;
}
void OAIFileNeedsVendor::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIFileNeedsVendor::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIFileNeedsVendor::is_reason_Valid() const{
    return m_reason_isValid;
}

QList<QString> OAIFileNeedsVendor::getTargetLanguage() const {
    return m_target_language;
}
void OAIFileNeedsVendor::setTargetLanguage(const QList<QString> &target_language) {
    m_target_language = target_language;
    m_target_language_isSet = true;
}

bool OAIFileNeedsVendor::is_target_language_Set() const{
    return m_target_language_isSet;
}

bool OAIFileNeedsVendor::is_target_language_Valid() const{
    return m_target_language_isValid;
}

QList<QString> OAIFileNeedsVendor::getTaskType() const {
    return m_task_type;
}
void OAIFileNeedsVendor::setTaskType(const QList<QString> &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAIFileNeedsVendor::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAIFileNeedsVendor::is_task_type_Valid() const{
    return m_task_type_isValid;
}

bool OAIFileNeedsVendor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileNeedsVendor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
