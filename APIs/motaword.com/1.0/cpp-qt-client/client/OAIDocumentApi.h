/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentApi_H
#define OAI_OAIDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContinuousProjectDocument.h"
#include "OAIDocumentList.h"
#include "OAIDocumentSubjects.h"
#include "OAIError.h"
#include "OAIListOrderType.h"
#include "OAIOperationStatus.h"
#include "OAIProgress.h"
#include "OAIRegeneratePreviewResponse.h"
#include "OAIUseAsDraftPayload.h"
#include "OAIUseAsRegularPayload.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentApi(const int timeOut = 0);
    ~OAIDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAllDocumentSubjects();

    /**
    * @param[in]  document_id QString [required]
    */
    virtual void getDocument(const QString &document_id);

    /**
    * @param[in]  document_id double [required]
    */
    virtual void getDocumentProgress(const double &document_id);

    /**
    * @param[in]  recent bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  type_filter QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_type OAIListOrderType [optional]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getDocuments(const ::OpenAPI::OptionalParam<bool> &recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListOrderType> &order_type = ::OpenAPI::OptionalParam<OAIListOrderType>(), const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  document_id qint64 [required]
    * @param[in]  per_page qint64 [optional]
    * @param[in]  with QList<QString> [optional]
    */
    virtual void getSimilarDocuments(const qint64 &document_id, const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &with = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  recent bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  type_filter QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_type OAIListOrderType [optional]
    */
    virtual void getUserDocuments(const qint64 &user_id, const ::OpenAPI::OptionalParam<bool> &recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListOrderType> &order_type = ::OpenAPI::OptionalParam<OAIListOrderType>());

    /**
    * @param[in]  document_id qint64 [required]
    */
    virtual void regeneratePreview(const qint64 &document_id);

    /**
    * @param[in]  document_id qint64 [required]
    * @param[in]  oai_use_as_draft_payload OAIUseAsDraftPayload [optional]
    */
    virtual void useAsDraft(const qint64 &document_id, const ::OpenAPI::OptionalParam<OAIUseAsDraftPayload> &oai_use_as_draft_payload = ::OpenAPI::OptionalParam<OAIUseAsDraftPayload>());

    /**
    * @param[in]  document_id qint64 [required]
    * @param[in]  oai_use_as_regular_payload OAIUseAsRegularPayload [optional]
    */
    virtual void useAsRegular(const qint64 &document_id, const ::OpenAPI::OptionalParam<OAIUseAsRegularPayload> &oai_use_as_regular_payload = ::OpenAPI::OptionalParam<OAIUseAsRegularPayload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllDocumentSubjectsCallback(OAIHttpRequestWorker *worker);
    void getDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentProgressCallback(OAIHttpRequestWorker *worker);
    void getDocumentsCallback(OAIHttpRequestWorker *worker);
    void getSimilarDocumentsCallback(OAIHttpRequestWorker *worker);
    void getUserDocumentsCallback(OAIHttpRequestWorker *worker);
    void regeneratePreviewCallback(OAIHttpRequestWorker *worker);
    void useAsDraftCallback(OAIHttpRequestWorker *worker);
    void useAsRegularCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllDocumentSubjectsSignal(QList<OAIDocumentSubjects> summary);
    void getDocumentSignal(OAIContinuousProjectDocument summary);
    void getDocumentProgressSignal(OAIProgress summary);
    void getDocumentsSignal(OAIDocumentList summary);
    void getSimilarDocumentsSignal(OAIDocumentList summary);
    void getUserDocumentsSignal(OAIDocumentList summary);
    void regeneratePreviewSignal(OAIRegeneratePreviewResponse summary);
    void useAsDraftSignal(OAIOperationStatus summary);
    void useAsRegularSignal(OAIOperationStatus summary);


    void getAllDocumentSubjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocumentSubjects> summary);
    void getDocumentSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectDocument summary);
    void getDocumentProgressSignalFull(OAIHttpRequestWorker *worker, OAIProgress summary);
    void getDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void getSimilarDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void getUserDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void regeneratePreviewSignalFull(OAIHttpRequestWorker *worker, OAIRegeneratePreviewResponse summary);
    void useAsDraftSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void useAsRegularSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);

    Q_DECL_DEPRECATED_X("Use getAllDocumentSubjectsSignalError() instead")
    void getAllDocumentSubjectsSignalE(QList<OAIDocumentSubjects> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDocumentSubjectsSignalError(QList<OAIDocumentSubjects> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalError() instead")
    void getDocumentSignalE(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalError(OAIContinuousProjectDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentProgressSignalError() instead")
    void getDocumentProgressSignalE(OAIProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentProgressSignalError(OAIProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsSignalError() instead")
    void getDocumentsSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarDocumentsSignalError() instead")
    void getSimilarDocumentsSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarDocumentsSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserDocumentsSignalError() instead")
    void getUserDocumentsSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserDocumentsSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regeneratePreviewSignalError() instead")
    void regeneratePreviewSignalE(OAIRegeneratePreviewResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regeneratePreviewSignalError(OAIRegeneratePreviewResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useAsDraftSignalError() instead")
    void useAsDraftSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void useAsDraftSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useAsRegularSignalError() instead")
    void useAsRegularSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void useAsRegularSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllDocumentSubjectsSignalErrorFull() instead")
    void getAllDocumentSubjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDocumentSubjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalErrorFull() instead")
    void getDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentProgressSignalErrorFull() instead")
    void getDocumentProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsSignalErrorFull() instead")
    void getDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarDocumentsSignalErrorFull() instead")
    void getSimilarDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserDocumentsSignalErrorFull() instead")
    void getUserDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regeneratePreviewSignalErrorFull() instead")
    void regeneratePreviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regeneratePreviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useAsDraftSignalErrorFull() instead")
    void useAsDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void useAsDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useAsRegularSignalErrorFull() instead")
    void useAsRegularSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void useAsRegularSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
