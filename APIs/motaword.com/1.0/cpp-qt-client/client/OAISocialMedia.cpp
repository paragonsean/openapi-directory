/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocialMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISocialMedia::OAISocialMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISocialMedia::OAISocialMedia() {
    this->initializeModel();
}

OAISocialMedia::~OAISocialMedia() {}

void OAISocialMedia::initializeModel() {

    m_facebook_url_isSet = false;
    m_facebook_url_isValid = false;

    m_linked_in_url_isSet = false;
    m_linked_in_url_isValid = false;

    m_twitter_url_isSet = false;
    m_twitter_url_isValid = false;
}

void OAISocialMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISocialMedia::fromJsonObject(QJsonObject json) {

    m_facebook_url_isValid = ::OpenAPI::fromJsonValue(m_facebook_url, json[QString("facebook_url")]);
    m_facebook_url_isSet = !json[QString("facebook_url")].isNull() && m_facebook_url_isValid;

    m_linked_in_url_isValid = ::OpenAPI::fromJsonValue(m_linked_in_url, json[QString("linkedIn_url")]);
    m_linked_in_url_isSet = !json[QString("linkedIn_url")].isNull() && m_linked_in_url_isValid;

    m_twitter_url_isValid = ::OpenAPI::fromJsonValue(m_twitter_url, json[QString("twitter_url")]);
    m_twitter_url_isSet = !json[QString("twitter_url")].isNull() && m_twitter_url_isValid;
}

QString OAISocialMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISocialMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_facebook_url_isSet) {
        obj.insert(QString("facebook_url"), ::OpenAPI::toJsonValue(m_facebook_url));
    }
    if (m_linked_in_url_isSet) {
        obj.insert(QString("linkedIn_url"), ::OpenAPI::toJsonValue(m_linked_in_url));
    }
    if (m_twitter_url_isSet) {
        obj.insert(QString("twitter_url"), ::OpenAPI::toJsonValue(m_twitter_url));
    }
    return obj;
}

QString OAISocialMedia::getFacebookUrl() const {
    return m_facebook_url;
}
void OAISocialMedia::setFacebookUrl(const QString &facebook_url) {
    m_facebook_url = facebook_url;
    m_facebook_url_isSet = true;
}

bool OAISocialMedia::is_facebook_url_Set() const{
    return m_facebook_url_isSet;
}

bool OAISocialMedia::is_facebook_url_Valid() const{
    return m_facebook_url_isValid;
}

QString OAISocialMedia::getLinkedInUrl() const {
    return m_linked_in_url;
}
void OAISocialMedia::setLinkedInUrl(const QString &linked_in_url) {
    m_linked_in_url = linked_in_url;
    m_linked_in_url_isSet = true;
}

bool OAISocialMedia::is_linked_in_url_Set() const{
    return m_linked_in_url_isSet;
}

bool OAISocialMedia::is_linked_in_url_Valid() const{
    return m_linked_in_url_isValid;
}

QString OAISocialMedia::getTwitterUrl() const {
    return m_twitter_url;
}
void OAISocialMedia::setTwitterUrl(const QString &twitter_url) {
    m_twitter_url = twitter_url;
    m_twitter_url_isSet = true;
}

bool OAISocialMedia::is_twitter_url_Set() const{
    return m_twitter_url_isSet;
}

bool OAISocialMedia::is_twitter_url_Valid() const{
    return m_twitter_url_isValid;
}

bool OAISocialMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facebook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_in_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISocialMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
