/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPamMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPamMessage::OAIPamMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPamMessage::OAIPamMessage() {
    this->initializeModel();
}

OAIPamMessage::~OAIPamMessage() {}

void OAIPamMessage::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_thread_id_isSet = false;
    m_thread_id_isValid = false;

    m_thread_key_isSet = false;
    m_thread_key_isValid = false;
}

void OAIPamMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPamMessage::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_thread_id_isValid = ::OpenAPI::fromJsonValue(m_thread_id, json[QString("thread_id")]);
    m_thread_id_isSet = !json[QString("thread_id")].isNull() && m_thread_id_isValid;

    m_thread_key_isValid = ::OpenAPI::fromJsonValue(m_thread_key, json[QString("thread_key")]);
    m_thread_key_isSet = !json[QString("thread_key")].isNull() && m_thread_key_isValid;
}

QString OAIPamMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPamMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_r_slots.size() > 0) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_thread_id_isSet) {
        obj.insert(QString("thread_id"), ::OpenAPI::toJsonValue(m_thread_id));
    }
    if (m_thread_key_isSet) {
        obj.insert(QString("thread_key"), ::OpenAPI::toJsonValue(m_thread_key));
    }
    return obj;
}

QString OAIPamMessage::getMessage() const {
    return m_message;
}
void OAIPamMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPamMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPamMessage::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIPamMessage::getRecipients() const {
    return m_recipients;
}
void OAIPamMessage::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIPamMessage::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIPamMessage::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QList<QString> OAIPamMessage::getRSlots() const {
    return m_r_slots;
}
void OAIPamMessage::setRSlots(const QList<QString> &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIPamMessage::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIPamMessage::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QString OAIPamMessage::getThreadId() const {
    return m_thread_id;
}
void OAIPamMessage::setThreadId(const QString &thread_id) {
    m_thread_id = thread_id;
    m_thread_id_isSet = true;
}

bool OAIPamMessage::is_thread_id_Set() const{
    return m_thread_id_isSet;
}

bool OAIPamMessage::is_thread_id_Valid() const{
    return m_thread_id_isValid;
}

QString OAIPamMessage::getThreadKey() const {
    return m_thread_key;
}
void OAIPamMessage::setThreadKey(const QString &thread_key) {
    m_thread_key = thread_key;
    m_thread_key_isSet = true;
}

bool OAIPamMessage::is_thread_key_Set() const{
    return m_thread_key_isSet;
}

bool OAIPamMessage::is_thread_key_Valid() const{
    return m_thread_key_isValid;
}

bool OAIPamMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPamMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
