/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEarningWithTQS.h
 *
 * 
 */

#ifndef OAIEarningWithTQS_H
#define OAIEarningWithTQS_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEarningWithTQS : public OAIObject {
public:
    OAIEarningWithTQS();
    OAIEarningWithTQS(QString json);
    ~OAIEarningWithTQS() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAmount() const;
    void setAmount(const float &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QDateTime getDueDate() const;
    void setDueDate(const QDateTime &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint64 getWords() const;
    void setWords(const qint64 &words);
    bool is_words_Set() const;
    bool is_words_Valid() const;

    qint64 getWordsApproved() const;
    void setWordsApproved(const qint64 &words_approved);
    bool is_words_approved_Set() const;
    bool is_words_approved_Valid() const;

    qint64 getWordsTranslated() const;
    void setWordsTranslated(const qint64 &words_translated);
    bool is_words_translated_Set() const;
    bool is_words_translated_Valid() const;

    bool isIsAboveAverage() const;
    void setIsAboveAverage(const bool &is_above_average);
    bool is_is_above_average_Set() const;
    bool is_is_above_average_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    qint64 getStringsEdited() const;
    void setStringsEdited(const qint64 &strings_edited);
    bool is_strings_edited_Set() const;
    bool is_strings_edited_Valid() const;

    qint64 getStringsTranslated() const;
    void setStringsTranslated(const qint64 &strings_translated);
    bool is_strings_translated_Set() const;
    bool is_strings_translated_Valid() const;

    qint64 getProjectId() const;
    void setProjectId(const qint64 &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QDateTime m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint64 m_words;
    bool m_words_isSet;
    bool m_words_isValid;

    qint64 m_words_approved;
    bool m_words_approved_isSet;
    bool m_words_approved_isValid;

    qint64 m_words_translated;
    bool m_words_translated_isSet;
    bool m_words_translated_isValid;

    bool m_is_above_average;
    bool m_is_above_average_isSet;
    bool m_is_above_average_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    qint64 m_strings_edited;
    bool m_strings_edited_isSet;
    bool m_strings_edited_isValid;

    qint64 m_strings_translated;
    bool m_strings_translated_isSet;
    bool m_strings_translated_isValid;

    qint64 m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEarningWithTQS)

#endif // OAIEarningWithTQS_H
