/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICorporateApi_H
#define OAI_OAICorporateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICorporateAccount.h"
#include "OAIPermissionList.h"
#include "OAIUser.h"
#include "OAIUserGroup.h"
#include "OAIUserGroupList.h"
#include "OAIUserList.h"
#include "OAIUserUpdateContent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICorporateApi : public QObject {
    Q_OBJECT

public:
    OAICorporateApi(const int timeOut = 0);
    ~OAICorporateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAvailableCorporatePermissions();

    /**
    * @param[in]  corporate_id qint64 [required]
    */
    virtual void getAvailableCorporatePermissionsById(const qint64 &corporate_id);


    virtual void getCorporate();

    /**
    * @param[in]  corporate_id qint64 [required]
    */
    virtual void getCorporateById(const qint64 &corporate_id);


    virtual void getCorporateUserGroups();

    /**
    * @param[in]  corporate_id qint64 [required]
    */
    virtual void getCorporateUserGroupsById(const qint64 &corporate_id);


    virtual void getCorporateUsers();

    /**
    * @param[in]  corporate_id qint64 [required]
    */
    virtual void getCorporateUsersById(const qint64 &corporate_id);


    virtual void getCorporatesList();

    /**
    * @param[in]  oai_user_update_content OAIUserUpdateContent [required]
    */
    virtual void saveCorporateUser(const OAIUserUpdateContent &oai_user_update_content);

    /**
    * @param[in]  oai_user_group OAIUserGroup [required]
    */
    virtual void saveCorporateUserGroup(const OAIUserGroup &oai_user_group);

    /**
    * @param[in]  corporate_id qint64 [required]
    * @param[in]  oai_user_group OAIUserGroup [required]
    */
    virtual void saveCorporateUserGroupById(const qint64 &corporate_id, const OAIUserGroup &oai_user_group);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAvailableCorporatePermissionsCallback(OAIHttpRequestWorker *worker);
    void getAvailableCorporatePermissionsByIdCallback(OAIHttpRequestWorker *worker);
    void getCorporateCallback(OAIHttpRequestWorker *worker);
    void getCorporateByIdCallback(OAIHttpRequestWorker *worker);
    void getCorporateUserGroupsCallback(OAIHttpRequestWorker *worker);
    void getCorporateUserGroupsByIdCallback(OAIHttpRequestWorker *worker);
    void getCorporateUsersCallback(OAIHttpRequestWorker *worker);
    void getCorporateUsersByIdCallback(OAIHttpRequestWorker *worker);
    void getCorporatesListCallback(OAIHttpRequestWorker *worker);
    void saveCorporateUserCallback(OAIHttpRequestWorker *worker);
    void saveCorporateUserGroupCallback(OAIHttpRequestWorker *worker);
    void saveCorporateUserGroupByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAvailableCorporatePermissionsSignal(OAIPermissionList summary);
    void getAvailableCorporatePermissionsByIdSignal(OAIPermissionList summary);
    void getCorporateSignal(OAICorporateAccount summary);
    void getCorporateByIdSignal(OAICorporateAccount summary);
    void getCorporateUserGroupsSignal(OAIUserGroupList summary);
    void getCorporateUserGroupsByIdSignal(OAIUserGroupList summary);
    void getCorporateUsersSignal(OAIUserList summary);
    void getCorporateUsersByIdSignal(OAIUserList summary);
    void getCorporatesListSignal(QList<OAICorporateAccount> summary);
    void saveCorporateUserSignal(OAIUser summary);
    void saveCorporateUserGroupSignal(OAIUserGroup summary);
    void saveCorporateUserGroupByIdSignal(OAIUserGroup summary);


    void getAvailableCorporatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionList summary);
    void getAvailableCorporatePermissionsByIdSignalFull(OAIHttpRequestWorker *worker, OAIPermissionList summary);
    void getCorporateSignalFull(OAIHttpRequestWorker *worker, OAICorporateAccount summary);
    void getCorporateByIdSignalFull(OAIHttpRequestWorker *worker, OAICorporateAccount summary);
    void getCorporateUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void getCorporateUserGroupsByIdSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void getCorporateUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void getCorporateUsersByIdSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void getCorporatesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICorporateAccount> summary);
    void saveCorporateUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void saveCorporateUserGroupSignalFull(OAIHttpRequestWorker *worker, OAIUserGroup summary);
    void saveCorporateUserGroupByIdSignalFull(OAIHttpRequestWorker *worker, OAIUserGroup summary);

    Q_DECL_DEPRECATED_X("Use getAvailableCorporatePermissionsSignalError() instead")
    void getAvailableCorporatePermissionsSignalE(OAIPermissionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableCorporatePermissionsSignalError(OAIPermissionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableCorporatePermissionsByIdSignalError() instead")
    void getAvailableCorporatePermissionsByIdSignalE(OAIPermissionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableCorporatePermissionsByIdSignalError(OAIPermissionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateSignalError() instead")
    void getCorporateSignalE(OAICorporateAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateSignalError(OAICorporateAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateByIdSignalError() instead")
    void getCorporateByIdSignalE(OAICorporateAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateByIdSignalError(OAICorporateAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUserGroupsSignalError() instead")
    void getCorporateUserGroupsSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUserGroupsSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUserGroupsByIdSignalError() instead")
    void getCorporateUserGroupsByIdSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUserGroupsByIdSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUsersSignalError() instead")
    void getCorporateUsersSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUsersSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUsersByIdSignalError() instead")
    void getCorporateUsersByIdSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUsersByIdSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporatesListSignalError() instead")
    void getCorporatesListSignalE(QList<OAICorporateAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporatesListSignalError(QList<OAICorporateAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserSignalError() instead")
    void saveCorporateUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserGroupSignalError() instead")
    void saveCorporateUserGroupSignalE(OAIUserGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserGroupSignalError(OAIUserGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserGroupByIdSignalError() instead")
    void saveCorporateUserGroupByIdSignalE(OAIUserGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserGroupByIdSignalError(OAIUserGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAvailableCorporatePermissionsSignalErrorFull() instead")
    void getAvailableCorporatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableCorporatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableCorporatePermissionsByIdSignalErrorFull() instead")
    void getAvailableCorporatePermissionsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableCorporatePermissionsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateSignalErrorFull() instead")
    void getCorporateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateByIdSignalErrorFull() instead")
    void getCorporateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUserGroupsSignalErrorFull() instead")
    void getCorporateUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUserGroupsByIdSignalErrorFull() instead")
    void getCorporateUserGroupsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUserGroupsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUsersSignalErrorFull() instead")
    void getCorporateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporateUsersByIdSignalErrorFull() instead")
    void getCorporateUsersByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporateUsersByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorporatesListSignalErrorFull() instead")
    void getCorporatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorporatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserSignalErrorFull() instead")
    void saveCorporateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserGroupSignalErrorFull() instead")
    void saveCorporateUserGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveCorporateUserGroupByIdSignalErrorFull() instead")
    void saveCorporateUserGroupByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveCorporateUserGroupByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
