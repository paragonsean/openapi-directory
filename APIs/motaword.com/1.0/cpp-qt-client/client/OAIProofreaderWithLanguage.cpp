/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProofreaderWithLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProofreaderWithLanguage::OAIProofreaderWithLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProofreaderWithLanguage::OAIProofreaderWithLanguage() {
    this->initializeModel();
}

OAIProofreaderWithLanguage::~OAIProofreaderWithLanguage() {}

void OAIProofreaderWithLanguage::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_vendor_link_isSet = false;
    m_vendor_link_isValid = false;
}

void OAIProofreaderWithLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProofreaderWithLanguage::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_vendor_link_isValid = ::OpenAPI::fromJsonValue(m_vendor_link, json[QString("vendor_link")]);
    m_vendor_link_isSet = !json[QString("vendor_link")].isNull() && m_vendor_link_isValid;
}

QString OAIProofreaderWithLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProofreaderWithLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_vendor_link_isSet) {
        obj.insert(QString("vendor_link"), ::OpenAPI::toJsonValue(m_vendor_link));
    }
    return obj;
}

QString OAIProofreaderWithLanguage::getFullName() const {
    return m_full_name;
}
void OAIProofreaderWithLanguage::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIProofreaderWithLanguage::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIProofreaderWithLanguage::is_full_name_Valid() const{
    return m_full_name_isValid;
}

double OAIProofreaderWithLanguage::getId() const {
    return m_id;
}
void OAIProofreaderWithLanguage::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProofreaderWithLanguage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProofreaderWithLanguage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProofreaderWithLanguage::getLanguage() const {
    return m_language;
}
void OAIProofreaderWithLanguage::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIProofreaderWithLanguage::is_language_Set() const{
    return m_language_isSet;
}

bool OAIProofreaderWithLanguage::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIProofreaderWithLanguage::getVendorLink() const {
    return m_vendor_link;
}
void OAIProofreaderWithLanguage::setVendorLink(const QString &vendor_link) {
    m_vendor_link = vendor_link;
    m_vendor_link_isSet = true;
}

bool OAIProofreaderWithLanguage::is_vendor_link_Set() const{
    return m_vendor_link_isSet;
}

bool OAIProofreaderWithLanguage::is_vendor_link_Valid() const{
    return m_vendor_link_isValid;
}

bool OAIProofreaderWithLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProofreaderWithLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
