/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguagePair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguagePair::OAILanguagePair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguagePair::OAILanguagePair() {
    this->initializeModel();
}

OAILanguagePair::~OAILanguagePair() {}

void OAILanguagePair::initializeModel() {

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_target_language_isSet = false;
    m_target_language_isValid = false;
}

void OAILanguagePair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguagePair::fromJsonObject(QJsonObject json) {

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_target_language_isValid = ::OpenAPI::fromJsonValue(m_target_language, json[QString("target_language")]);
    m_target_language_isSet = !json[QString("target_language")].isNull() && m_target_language_isValid;
}

QString OAILanguagePair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguagePair::asJsonObject() const {
    QJsonObject obj;
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_target_language_isSet) {
        obj.insert(QString("target_language"), ::OpenAPI::toJsonValue(m_target_language));
    }
    return obj;
}

QString OAILanguagePair::getSourceLanguage() const {
    return m_source_language;
}
void OAILanguagePair::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAILanguagePair::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAILanguagePair::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QString OAILanguagePair::getTargetLanguage() const {
    return m_target_language;
}
void OAILanguagePair::setTargetLanguage(const QString &target_language) {
    m_target_language = target_language;
    m_target_language_isSet = true;
}

bool OAILanguagePair::is_target_language_Set() const{
    return m_target_language_isSet;
}

bool OAILanguagePair::is_target_language_Valid() const{
    return m_target_language_isValid;
}

bool OAILanguagePair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguagePair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
