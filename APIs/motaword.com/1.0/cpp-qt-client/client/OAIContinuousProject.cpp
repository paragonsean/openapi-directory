/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProject::OAIContinuousProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProject::OAIContinuousProject() {
    this->initializeModel();
}

OAIContinuousProject::~OAIContinuousProject() {}

void OAIContinuousProject::initializeModel() {

    m_analytics_enabled_isSet = false;
    m_analytics_enabled_isValid = false;

    m_auto_start_postedit_isSet = false;
    m_auto_start_postedit_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_last_activity_at_isSet = false;
    m_last_activity_at_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mt_enabled_isSet = false;
    m_mt_enabled_isValid = false;

    m_mt_engine_isSet = false;
    m_mt_engine_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postedit_enabled_isSet = false;
    m_postedit_enabled_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_target_languages_isSet = false;
    m_target_languages_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIContinuousProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProject::fromJsonObject(QJsonObject json) {

    m_analytics_enabled_isValid = ::OpenAPI::fromJsonValue(m_analytics_enabled, json[QString("analytics_enabled")]);
    m_analytics_enabled_isSet = !json[QString("analytics_enabled")].isNull() && m_analytics_enabled_isValid;

    m_auto_start_postedit_isValid = ::OpenAPI::fromJsonValue(m_auto_start_postedit, json[QString("auto_start_postedit")]);
    m_auto_start_postedit_isSet = !json[QString("auto_start_postedit")].isNull() && m_auto_start_postedit_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("is_enabled")]);
    m_is_enabled_isSet = !json[QString("is_enabled")].isNull() && m_is_enabled_isValid;

    m_last_activity_at_isValid = ::OpenAPI::fromJsonValue(m_last_activity_at, json[QString("last_activity_at")]);
    m_last_activity_at_isSet = !json[QString("last_activity_at")].isNull() && m_last_activity_at_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mt_enabled_isValid = ::OpenAPI::fromJsonValue(m_mt_enabled, json[QString("mt_enabled")]);
    m_mt_enabled_isSet = !json[QString("mt_enabled")].isNull() && m_mt_enabled_isValid;

    m_mt_engine_isValid = ::OpenAPI::fromJsonValue(m_mt_engine, json[QString("mt_engine")]);
    m_mt_engine_isSet = !json[QString("mt_engine")].isNull() && m_mt_engine_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postedit_enabled_isValid = ::OpenAPI::fromJsonValue(m_postedit_enabled, json[QString("postedit_enabled")]);
    m_postedit_enabled_isSet = !json[QString("postedit_enabled")].isNull() && m_postedit_enabled_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_target_languages_isValid = ::OpenAPI::fromJsonValue(m_target_languages, json[QString("target_languages")]);
    m_target_languages_isSet = !json[QString("target_languages")].isNull() && m_target_languages_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIContinuousProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProject::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics_enabled_isSet) {
        obj.insert(QString("analytics_enabled"), ::OpenAPI::toJsonValue(m_analytics_enabled));
    }
    if (m_auto_start_postedit_isSet) {
        obj.insert(QString("auto_start_postedit"), ::OpenAPI::toJsonValue(m_auto_start_postedit));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("is_enabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_last_activity_at_isSet) {
        obj.insert(QString("last_activity_at"), ::OpenAPI::toJsonValue(m_last_activity_at));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mt_enabled_isSet) {
        obj.insert(QString("mt_enabled"), ::OpenAPI::toJsonValue(m_mt_enabled));
    }
    if (m_mt_engine_isSet) {
        obj.insert(QString("mt_engine"), ::OpenAPI::toJsonValue(m_mt_engine));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postedit_enabled_isSet) {
        obj.insert(QString("postedit_enabled"), ::OpenAPI::toJsonValue(m_postedit_enabled));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_target_languages.size() > 0) {
        obj.insert(QString("target_languages"), ::OpenAPI::toJsonValue(m_target_languages));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

bool OAIContinuousProject::isAnalyticsEnabled() const {
    return m_analytics_enabled;
}
void OAIContinuousProject::setAnalyticsEnabled(const bool &analytics_enabled) {
    m_analytics_enabled = analytics_enabled;
    m_analytics_enabled_isSet = true;
}

bool OAIContinuousProject::is_analytics_enabled_Set() const{
    return m_analytics_enabled_isSet;
}

bool OAIContinuousProject::is_analytics_enabled_Valid() const{
    return m_analytics_enabled_isValid;
}

bool OAIContinuousProject::isAutoStartPostedit() const {
    return m_auto_start_postedit;
}
void OAIContinuousProject::setAutoStartPostedit(const bool &auto_start_postedit) {
    m_auto_start_postedit = auto_start_postedit;
    m_auto_start_postedit_isSet = true;
}

bool OAIContinuousProject::is_auto_start_postedit_Set() const{
    return m_auto_start_postedit_isSet;
}

bool OAIContinuousProject::is_auto_start_postedit_Valid() const{
    return m_auto_start_postedit_isValid;
}

QDateTime OAIContinuousProject::getCreatedAt() const {
    return m_created_at;
}
void OAIContinuousProject::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIContinuousProject::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIContinuousProject::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIContinuousProject::getId() const {
    return m_id;
}
void OAIContinuousProject::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContinuousProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContinuousProject::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIContinuousProject::isIsEnabled() const {
    return m_is_enabled;
}
void OAIContinuousProject::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIContinuousProject::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIContinuousProject::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QDateTime OAIContinuousProject::getLastActivityAt() const {
    return m_last_activity_at;
}
void OAIContinuousProject::setLastActivityAt(const QDateTime &last_activity_at) {
    m_last_activity_at = last_activity_at;
    m_last_activity_at_isSet = true;
}

bool OAIContinuousProject::is_last_activity_at_Set() const{
    return m_last_activity_at_isSet;
}

bool OAIContinuousProject::is_last_activity_at_Valid() const{
    return m_last_activity_at_isValid;
}

OAIContinuousProjectLinks OAIContinuousProject::getLinks() const {
    return m_links;
}
void OAIContinuousProject::setLinks(const OAIContinuousProjectLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIContinuousProject::is_links_Set() const{
    return m_links_isSet;
}

bool OAIContinuousProject::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIContinuousProject::isMtEnabled() const {
    return m_mt_enabled;
}
void OAIContinuousProject::setMtEnabled(const bool &mt_enabled) {
    m_mt_enabled = mt_enabled;
    m_mt_enabled_isSet = true;
}

bool OAIContinuousProject::is_mt_enabled_Set() const{
    return m_mt_enabled_isSet;
}

bool OAIContinuousProject::is_mt_enabled_Valid() const{
    return m_mt_enabled_isValid;
}

QString OAIContinuousProject::getMtEngine() const {
    return m_mt_engine;
}
void OAIContinuousProject::setMtEngine(const QString &mt_engine) {
    m_mt_engine = mt_engine;
    m_mt_engine_isSet = true;
}

bool OAIContinuousProject::is_mt_engine_Set() const{
    return m_mt_engine_isSet;
}

bool OAIContinuousProject::is_mt_engine_Valid() const{
    return m_mt_engine_isValid;
}

QString OAIContinuousProject::getName() const {
    return m_name;
}
void OAIContinuousProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContinuousProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContinuousProject::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIContinuousProject::isPosteditEnabled() const {
    return m_postedit_enabled;
}
void OAIContinuousProject::setPosteditEnabled(const bool &postedit_enabled) {
    m_postedit_enabled = postedit_enabled;
    m_postedit_enabled_isSet = true;
}

bool OAIContinuousProject::is_postedit_enabled_Set() const{
    return m_postedit_enabled_isSet;
}

bool OAIContinuousProject::is_postedit_enabled_Valid() const{
    return m_postedit_enabled_isValid;
}

QString OAIContinuousProject::getSourceLanguage() const {
    return m_source_language;
}
void OAIContinuousProject::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIContinuousProject::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIContinuousProject::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QString OAIContinuousProject::getStatus() const {
    return m_status;
}
void OAIContinuousProject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIContinuousProject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIContinuousProject::is_status_Valid() const{
    return m_status_isValid;
}

OAISubscription OAIContinuousProject::getSubscription() const {
    return m_subscription;
}
void OAIContinuousProject::setSubscription(const OAISubscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIContinuousProject::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIContinuousProject::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QList<QString> OAIContinuousProject::getTargetLanguages() const {
    return m_target_languages;
}
void OAIContinuousProject::setTargetLanguages(const QList<QString> &target_languages) {
    m_target_languages = target_languages;
    m_target_languages_isSet = true;
}

bool OAIContinuousProject::is_target_languages_Set() const{
    return m_target_languages_isSet;
}

bool OAIContinuousProject::is_target_languages_Valid() const{
    return m_target_languages_isValid;
}

QString OAIContinuousProject::getType() const {
    return m_type;
}
void OAIContinuousProject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContinuousProject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContinuousProject::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIContinuousProject::getWordCount() const {
    return m_word_count;
}
void OAIContinuousProject::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIContinuousProject::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIContinuousProject::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIContinuousProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_start_postedit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mt_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mt_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postedit_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
