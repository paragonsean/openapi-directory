/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_vendor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_vendor::OAIUser_vendor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_vendor::OAIUser_vendor() {
    this->initializeModel();
}

OAIUser_vendor::~OAIUser_vendor() {}

void OAIUser_vendor::initializeModel() {

    m_can_work_manual_files_isSet = false;
    m_can_work_manual_files_isValid = false;

    m_email_open_rate_isSet = false;
    m_email_open_rate_isValid = false;

    m_is_frozen_isSet = false;
    m_is_frozen_isValid = false;

    m_is_proofreader_isSet = false;
    m_is_proofreader_isValid = false;

    m_language_pairs_isSet = false;
    m_language_pairs_isValid = false;

    m_native_language_isSet = false;
    m_native_language_isValid = false;

    m_pam_tqs_isSet = false;
    m_pam_tqs_isValid = false;

    m_paypal_email_isSet = false;
    m_paypal_email_isValid = false;

    m_profile_survey_isSet = false;
    m_profile_survey_isValid = false;

    m_require_1099_isSet = false;
    m_require_1099_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tms_user_name_isSet = false;
    m_tms_user_name_isValid = false;

    m_vendor_type_isSet = false;
    m_vendor_type_isValid = false;
}

void OAIUser_vendor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_vendor::fromJsonObject(QJsonObject json) {

    m_can_work_manual_files_isValid = ::OpenAPI::fromJsonValue(m_can_work_manual_files, json[QString("can_work_manual_files")]);
    m_can_work_manual_files_isSet = !json[QString("can_work_manual_files")].isNull() && m_can_work_manual_files_isValid;

    m_email_open_rate_isValid = ::OpenAPI::fromJsonValue(m_email_open_rate, json[QString("email_open_rate")]);
    m_email_open_rate_isSet = !json[QString("email_open_rate")].isNull() && m_email_open_rate_isValid;

    m_is_frozen_isValid = ::OpenAPI::fromJsonValue(m_is_frozen, json[QString("is_frozen")]);
    m_is_frozen_isSet = !json[QString("is_frozen")].isNull() && m_is_frozen_isValid;

    m_is_proofreader_isValid = ::OpenAPI::fromJsonValue(m_is_proofreader, json[QString("is_proofreader")]);
    m_is_proofreader_isSet = !json[QString("is_proofreader")].isNull() && m_is_proofreader_isValid;

    m_language_pairs_isValid = ::OpenAPI::fromJsonValue(m_language_pairs, json[QString("language_pairs")]);
    m_language_pairs_isSet = !json[QString("language_pairs")].isNull() && m_language_pairs_isValid;

    m_native_language_isValid = ::OpenAPI::fromJsonValue(m_native_language, json[QString("native_language")]);
    m_native_language_isSet = !json[QString("native_language")].isNull() && m_native_language_isValid;

    m_pam_tqs_isValid = ::OpenAPI::fromJsonValue(m_pam_tqs, json[QString("pam_tqs")]);
    m_pam_tqs_isSet = !json[QString("pam_tqs")].isNull() && m_pam_tqs_isValid;

    m_paypal_email_isValid = ::OpenAPI::fromJsonValue(m_paypal_email, json[QString("paypal_email")]);
    m_paypal_email_isSet = !json[QString("paypal_email")].isNull() && m_paypal_email_isValid;

    m_profile_survey_isValid = ::OpenAPI::fromJsonValue(m_profile_survey, json[QString("profile_survey")]);
    m_profile_survey_isSet = !json[QString("profile_survey")].isNull() && m_profile_survey_isValid;

    m_require_1099_isValid = ::OpenAPI::fromJsonValue(m_require_1099, json[QString("require_1099")]);
    m_require_1099_isSet = !json[QString("require_1099")].isNull() && m_require_1099_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tms_user_name_isValid = ::OpenAPI::fromJsonValue(m_tms_user_name, json[QString("tms_user_name")]);
    m_tms_user_name_isSet = !json[QString("tms_user_name")].isNull() && m_tms_user_name_isValid;

    m_vendor_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_type, json[QString("vendor_type")]);
    m_vendor_type_isSet = !json[QString("vendor_type")].isNull() && m_vendor_type_isValid;
}

QString OAIUser_vendor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_vendor::asJsonObject() const {
    QJsonObject obj;
    if (m_can_work_manual_files_isSet) {
        obj.insert(QString("can_work_manual_files"), ::OpenAPI::toJsonValue(m_can_work_manual_files));
    }
    if (m_email_open_rate_isSet) {
        obj.insert(QString("email_open_rate"), ::OpenAPI::toJsonValue(m_email_open_rate));
    }
    if (m_is_frozen_isSet) {
        obj.insert(QString("is_frozen"), ::OpenAPI::toJsonValue(m_is_frozen));
    }
    if (m_is_proofreader_isSet) {
        obj.insert(QString("is_proofreader"), ::OpenAPI::toJsonValue(m_is_proofreader));
    }
    if (m_language_pairs.size() > 0) {
        obj.insert(QString("language_pairs"), ::OpenAPI::toJsonValue(m_language_pairs));
    }
    if (m_native_language_isSet) {
        obj.insert(QString("native_language"), ::OpenAPI::toJsonValue(m_native_language));
    }
    if (m_pam_tqs_isSet) {
        obj.insert(QString("pam_tqs"), ::OpenAPI::toJsonValue(m_pam_tqs));
    }
    if (m_paypal_email_isSet) {
        obj.insert(QString("paypal_email"), ::OpenAPI::toJsonValue(m_paypal_email));
    }
    if (m_profile_survey_isSet) {
        obj.insert(QString("profile_survey"), ::OpenAPI::toJsonValue(m_profile_survey));
    }
    if (m_require_1099_isSet) {
        obj.insert(QString("require_1099"), ::OpenAPI::toJsonValue(m_require_1099));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tms_user_name_isSet) {
        obj.insert(QString("tms_user_name"), ::OpenAPI::toJsonValue(m_tms_user_name));
    }
    if (m_vendor_type_isSet) {
        obj.insert(QString("vendor_type"), ::OpenAPI::toJsonValue(m_vendor_type));
    }
    return obj;
}

bool OAIUser_vendor::isCanWorkManualFiles() const {
    return m_can_work_manual_files;
}
void OAIUser_vendor::setCanWorkManualFiles(const bool &can_work_manual_files) {
    m_can_work_manual_files = can_work_manual_files;
    m_can_work_manual_files_isSet = true;
}

bool OAIUser_vendor::is_can_work_manual_files_Set() const{
    return m_can_work_manual_files_isSet;
}

bool OAIUser_vendor::is_can_work_manual_files_Valid() const{
    return m_can_work_manual_files_isValid;
}

float OAIUser_vendor::getEmailOpenRate() const {
    return m_email_open_rate;
}
void OAIUser_vendor::setEmailOpenRate(const float &email_open_rate) {
    m_email_open_rate = email_open_rate;
    m_email_open_rate_isSet = true;
}

bool OAIUser_vendor::is_email_open_rate_Set() const{
    return m_email_open_rate_isSet;
}

bool OAIUser_vendor::is_email_open_rate_Valid() const{
    return m_email_open_rate_isValid;
}

bool OAIUser_vendor::isIsFrozen() const {
    return m_is_frozen;
}
void OAIUser_vendor::setIsFrozen(const bool &is_frozen) {
    m_is_frozen = is_frozen;
    m_is_frozen_isSet = true;
}

bool OAIUser_vendor::is_is_frozen_Set() const{
    return m_is_frozen_isSet;
}

bool OAIUser_vendor::is_is_frozen_Valid() const{
    return m_is_frozen_isValid;
}

bool OAIUser_vendor::isIsProofreader() const {
    return m_is_proofreader;
}
void OAIUser_vendor::setIsProofreader(const bool &is_proofreader) {
    m_is_proofreader = is_proofreader;
    m_is_proofreader_isSet = true;
}

bool OAIUser_vendor::is_is_proofreader_Set() const{
    return m_is_proofreader_isSet;
}

bool OAIUser_vendor::is_is_proofreader_Valid() const{
    return m_is_proofreader_isValid;
}

QList<OAILanguagePair> OAIUser_vendor::getLanguagePairs() const {
    return m_language_pairs;
}
void OAIUser_vendor::setLanguagePairs(const QList<OAILanguagePair> &language_pairs) {
    m_language_pairs = language_pairs;
    m_language_pairs_isSet = true;
}

bool OAIUser_vendor::is_language_pairs_Set() const{
    return m_language_pairs_isSet;
}

bool OAIUser_vendor::is_language_pairs_Valid() const{
    return m_language_pairs_isValid;
}

QString OAIUser_vendor::getNativeLanguage() const {
    return m_native_language;
}
void OAIUser_vendor::setNativeLanguage(const QString &native_language) {
    m_native_language = native_language;
    m_native_language_isSet = true;
}

bool OAIUser_vendor::is_native_language_Set() const{
    return m_native_language_isSet;
}

bool OAIUser_vendor::is_native_language_Valid() const{
    return m_native_language_isValid;
}

float OAIUser_vendor::getPamTqs() const {
    return m_pam_tqs;
}
void OAIUser_vendor::setPamTqs(const float &pam_tqs) {
    m_pam_tqs = pam_tqs;
    m_pam_tqs_isSet = true;
}

bool OAIUser_vendor::is_pam_tqs_Set() const{
    return m_pam_tqs_isSet;
}

bool OAIUser_vendor::is_pam_tqs_Valid() const{
    return m_pam_tqs_isValid;
}

QString OAIUser_vendor::getPaypalEmail() const {
    return m_paypal_email;
}
void OAIUser_vendor::setPaypalEmail(const QString &paypal_email) {
    m_paypal_email = paypal_email;
    m_paypal_email_isSet = true;
}

bool OAIUser_vendor::is_paypal_email_Set() const{
    return m_paypal_email_isSet;
}

bool OAIUser_vendor::is_paypal_email_Valid() const{
    return m_paypal_email_isValid;
}

OAIProfileSurvey OAIUser_vendor::getProfileSurvey() const {
    return m_profile_survey;
}
void OAIUser_vendor::setProfileSurvey(const OAIProfileSurvey &profile_survey) {
    m_profile_survey = profile_survey;
    m_profile_survey_isSet = true;
}

bool OAIUser_vendor::is_profile_survey_Set() const{
    return m_profile_survey_isSet;
}

bool OAIUser_vendor::is_profile_survey_Valid() const{
    return m_profile_survey_isValid;
}

bool OAIUser_vendor::isRequire1099() const {
    return m_require_1099;
}
void OAIUser_vendor::setRequire1099(const bool &require_1099) {
    m_require_1099 = require_1099;
    m_require_1099_isSet = true;
}

bool OAIUser_vendor::is_require_1099_Set() const{
    return m_require_1099_isSet;
}

bool OAIUser_vendor::is_require_1099_Valid() const{
    return m_require_1099_isValid;
}

QList<QString> OAIUser_vendor::getTags() const {
    return m_tags;
}
void OAIUser_vendor::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUser_vendor::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUser_vendor::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIUser_vendor::getTmsUserName() const {
    return m_tms_user_name;
}
void OAIUser_vendor::setTmsUserName(const QString &tms_user_name) {
    m_tms_user_name = tms_user_name;
    m_tms_user_name_isSet = true;
}

bool OAIUser_vendor::is_tms_user_name_Set() const{
    return m_tms_user_name_isSet;
}

bool OAIUser_vendor::is_tms_user_name_Valid() const{
    return m_tms_user_name_isValid;
}

QString OAIUser_vendor::getVendorType() const {
    return m_vendor_type;
}
void OAIUser_vendor::setVendorType(const QString &vendor_type) {
    m_vendor_type = vendor_type;
    m_vendor_type_isSet = true;
}

bool OAIUser_vendor::is_vendor_type_Set() const{
    return m_vendor_type_isSet;
}

bool OAIUser_vendor::is_vendor_type_Valid() const{
    return m_vendor_type_isValid;
}

bool OAIUser_vendor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_work_manual_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_open_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proofreader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pam_tqs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paypal_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_survey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_1099_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tms_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_vendor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
