/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectPayment::OAIProjectPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectPayment::OAIProjectPayment() {
    this->initializeModel();
}

OAIProjectPayment::~OAIProjectPayment() {}

void OAIProjectPayment::initializeModel() {

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_budget_code_isSet = false;
    m_budget_code_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_payment_code_isSet = false;
    m_payment_code_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_stripe_token_isSet = false;
    m_stripe_token_isValid = false;
}

void OAIProjectPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectPayment::fromJsonObject(QJsonObject json) {

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_budget_code_isValid = ::OpenAPI::fromJsonValue(m_budget_code, json[QString("budget_code")]);
    m_budget_code_isSet = !json[QString("budget_code")].isNull() && m_budget_code_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_payment_code_isValid = ::OpenAPI::fromJsonValue(m_payment_code, json[QString("payment_code")]);
    m_payment_code_isSet = !json[QString("payment_code")].isNull() && m_payment_code_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_stripe_token_isValid = ::OpenAPI::fromJsonValue(m_stripe_token, json[QString("stripe_token")]);
    m_stripe_token_isSet = !json[QString("stripe_token")].isNull() && m_stripe_token_isValid;
}

QString OAIProjectPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_budget_code_isSet) {
        obj.insert(QString("budget_code"), ::OpenAPI::toJsonValue(m_budget_code));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_payment_code_isSet) {
        obj.insert(QString("payment_code"), ::OpenAPI::toJsonValue(m_payment_code));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_stripe_token_isSet) {
        obj.insert(QString("stripe_token"), ::OpenAPI::toJsonValue(m_stripe_token));
    }
    return obj;
}

QString OAIProjectPayment::getBin() const {
    return m_bin;
}
void OAIProjectPayment::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAIProjectPayment::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAIProjectPayment::is_bin_Valid() const{
    return m_bin_isValid;
}

QString OAIProjectPayment::getBudgetCode() const {
    return m_budget_code;
}
void OAIProjectPayment::setBudgetCode(const QString &budget_code) {
    m_budget_code = budget_code;
    m_budget_code_isSet = true;
}

bool OAIProjectPayment::is_budget_code_Set() const{
    return m_budget_code_isSet;
}

bool OAIProjectPayment::is_budget_code_Valid() const{
    return m_budget_code_isValid;
}

qint64 OAIProjectPayment::getCardId() const {
    return m_card_id;
}
void OAIProjectPayment::setCardId(const qint64 &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIProjectPayment::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIProjectPayment::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIProjectPayment::getPaymentCode() const {
    return m_payment_code;
}
void OAIProjectPayment::setPaymentCode(const QString &payment_code) {
    m_payment_code = payment_code;
    m_payment_code_isSet = true;
}

bool OAIProjectPayment::is_payment_code_Set() const{
    return m_payment_code_isSet;
}

bool OAIProjectPayment::is_payment_code_Valid() const{
    return m_payment_code_isValid;
}

QString OAIProjectPayment::getPaymentMethod() const {
    return m_payment_method;
}
void OAIProjectPayment::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIProjectPayment::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIProjectPayment::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIProjectPayment::getStripeToken() const {
    return m_stripe_token;
}
void OAIProjectPayment::setStripeToken(const QString &stripe_token) {
    m_stripe_token = stripe_token;
    m_stripe_token_isSet = true;
}

bool OAIProjectPayment::is_stripe_token_Set() const{
    return m_stripe_token_isSet;
}

bool OAIProjectPayment::is_stripe_token_Valid() const{
    return m_stripe_token_isValid;
}

bool OAIProjectPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
