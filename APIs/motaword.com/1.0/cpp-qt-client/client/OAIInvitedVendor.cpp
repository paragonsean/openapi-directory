/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvitedVendor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvitedVendor::OAIInvitedVendor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvitedVendor::OAIInvitedVendor() {
    this->initializeModel();
}

OAIInvitedVendor::~OAIInvitedVendor() {}

void OAIInvitedVendor::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_email_open_rate_isSet = false;
    m_email_open_rate_isValid = false;

    m_is_entered_isSet = false;
    m_is_entered_isValid = false;

    m_is_get_paid_isSet = false;
    m_is_get_paid_isValid = false;

    m_is_worked_isSet = false;
    m_is_worked_isValid = false;

    m_is_worked_in_any_project_isSet = false;
    m_is_worked_in_any_project_isValid = false;

    m_last_project_date_isSet = false;
    m_last_project_date_isValid = false;

    m_project_status_when_interacted_isSet = false;
    m_project_status_when_interacted_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_responsiveness_isSet = false;
    m_responsiveness_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_vendor_name_isSet = false;
    m_vendor_name_isValid = false;

    m_vendor_type_isSet = false;
    m_vendor_type_isValid = false;
}

void OAIInvitedVendor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvitedVendor::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_email_open_rate_isValid = ::OpenAPI::fromJsonValue(m_email_open_rate, json[QString("email_open_rate")]);
    m_email_open_rate_isSet = !json[QString("email_open_rate")].isNull() && m_email_open_rate_isValid;

    m_is_entered_isValid = ::OpenAPI::fromJsonValue(m_is_entered, json[QString("is_entered")]);
    m_is_entered_isSet = !json[QString("is_entered")].isNull() && m_is_entered_isValid;

    m_is_get_paid_isValid = ::OpenAPI::fromJsonValue(m_is_get_paid, json[QString("is_get_paid")]);
    m_is_get_paid_isSet = !json[QString("is_get_paid")].isNull() && m_is_get_paid_isValid;

    m_is_worked_isValid = ::OpenAPI::fromJsonValue(m_is_worked, json[QString("is_worked")]);
    m_is_worked_isSet = !json[QString("is_worked")].isNull() && m_is_worked_isValid;

    m_is_worked_in_any_project_isValid = ::OpenAPI::fromJsonValue(m_is_worked_in_any_project, json[QString("is_worked_in_any_project")]);
    m_is_worked_in_any_project_isSet = !json[QString("is_worked_in_any_project")].isNull() && m_is_worked_in_any_project_isValid;

    m_last_project_date_isValid = ::OpenAPI::fromJsonValue(m_last_project_date, json[QString("last_project_date")]);
    m_last_project_date_isSet = !json[QString("last_project_date")].isNull() && m_last_project_date_isValid;

    m_project_status_when_interacted_isValid = ::OpenAPI::fromJsonValue(m_project_status_when_interacted, json[QString("project_status_when_interacted")]);
    m_project_status_when_interacted_isSet = !json[QString("project_status_when_interacted")].isNull() && m_project_status_when_interacted_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registration_date")]);
    m_registration_date_isSet = !json[QString("registration_date")].isNull() && m_registration_date_isValid;

    m_responsiveness_isValid = ::OpenAPI::fromJsonValue(m_responsiveness, json[QString("responsiveness")]);
    m_responsiveness_isSet = !json[QString("responsiveness")].isNull() && m_responsiveness_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_vendor_name_isValid = ::OpenAPI::fromJsonValue(m_vendor_name, json[QString("vendor_name")]);
    m_vendor_name_isSet = !json[QString("vendor_name")].isNull() && m_vendor_name_isValid;

    m_vendor_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_type, json[QString("vendor_type")]);
    m_vendor_type_isSet = !json[QString("vendor_type")].isNull() && m_vendor_type_isValid;
}

QString OAIInvitedVendor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvitedVendor::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_email_open_rate_isSet) {
        obj.insert(QString("email_open_rate"), ::OpenAPI::toJsonValue(m_email_open_rate));
    }
    if (m_is_entered_isSet) {
        obj.insert(QString("is_entered"), ::OpenAPI::toJsonValue(m_is_entered));
    }
    if (m_is_get_paid_isSet) {
        obj.insert(QString("is_get_paid"), ::OpenAPI::toJsonValue(m_is_get_paid));
    }
    if (m_is_worked_isSet) {
        obj.insert(QString("is_worked"), ::OpenAPI::toJsonValue(m_is_worked));
    }
    if (m_is_worked_in_any_project_isSet) {
        obj.insert(QString("is_worked_in_any_project"), ::OpenAPI::toJsonValue(m_is_worked_in_any_project));
    }
    if (m_last_project_date_isSet) {
        obj.insert(QString("last_project_date"), ::OpenAPI::toJsonValue(m_last_project_date));
    }
    if (m_project_status_when_interacted_isSet) {
        obj.insert(QString("project_status_when_interacted"), ::OpenAPI::toJsonValue(m_project_status_when_interacted));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registration_date"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_responsiveness_isSet) {
        obj.insert(QString("responsiveness"), ::OpenAPI::toJsonValue(m_responsiveness));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_vendor_name_isSet) {
        obj.insert(QString("vendor_name"), ::OpenAPI::toJsonValue(m_vendor_name));
    }
    if (m_vendor_type_isSet) {
        obj.insert(QString("vendor_type"), ::OpenAPI::toJsonValue(m_vendor_type));
    }
    return obj;
}

QString OAIInvitedVendor::getAction() const {
    return m_action;
}
void OAIInvitedVendor::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIInvitedVendor::is_action_Set() const{
    return m_action_isSet;
}

bool OAIInvitedVendor::is_action_Valid() const{
    return m_action_isValid;
}

double OAIInvitedVendor::getEmailOpenRate() const {
    return m_email_open_rate;
}
void OAIInvitedVendor::setEmailOpenRate(const double &email_open_rate) {
    m_email_open_rate = email_open_rate;
    m_email_open_rate_isSet = true;
}

bool OAIInvitedVendor::is_email_open_rate_Set() const{
    return m_email_open_rate_isSet;
}

bool OAIInvitedVendor::is_email_open_rate_Valid() const{
    return m_email_open_rate_isValid;
}

bool OAIInvitedVendor::isIsEntered() const {
    return m_is_entered;
}
void OAIInvitedVendor::setIsEntered(const bool &is_entered) {
    m_is_entered = is_entered;
    m_is_entered_isSet = true;
}

bool OAIInvitedVendor::is_is_entered_Set() const{
    return m_is_entered_isSet;
}

bool OAIInvitedVendor::is_is_entered_Valid() const{
    return m_is_entered_isValid;
}

bool OAIInvitedVendor::isIsGetPaid() const {
    return m_is_get_paid;
}
void OAIInvitedVendor::setIsGetPaid(const bool &is_get_paid) {
    m_is_get_paid = is_get_paid;
    m_is_get_paid_isSet = true;
}

bool OAIInvitedVendor::is_is_get_paid_Set() const{
    return m_is_get_paid_isSet;
}

bool OAIInvitedVendor::is_is_get_paid_Valid() const{
    return m_is_get_paid_isValid;
}

bool OAIInvitedVendor::isIsWorked() const {
    return m_is_worked;
}
void OAIInvitedVendor::setIsWorked(const bool &is_worked) {
    m_is_worked = is_worked;
    m_is_worked_isSet = true;
}

bool OAIInvitedVendor::is_is_worked_Set() const{
    return m_is_worked_isSet;
}

bool OAIInvitedVendor::is_is_worked_Valid() const{
    return m_is_worked_isValid;
}

bool OAIInvitedVendor::isIsWorkedInAnyProject() const {
    return m_is_worked_in_any_project;
}
void OAIInvitedVendor::setIsWorkedInAnyProject(const bool &is_worked_in_any_project) {
    m_is_worked_in_any_project = is_worked_in_any_project;
    m_is_worked_in_any_project_isSet = true;
}

bool OAIInvitedVendor::is_is_worked_in_any_project_Set() const{
    return m_is_worked_in_any_project_isSet;
}

bool OAIInvitedVendor::is_is_worked_in_any_project_Valid() const{
    return m_is_worked_in_any_project_isValid;
}

QDate OAIInvitedVendor::getLastProjectDate() const {
    return m_last_project_date;
}
void OAIInvitedVendor::setLastProjectDate(const QDate &last_project_date) {
    m_last_project_date = last_project_date;
    m_last_project_date_isSet = true;
}

bool OAIInvitedVendor::is_last_project_date_Set() const{
    return m_last_project_date_isSet;
}

bool OAIInvitedVendor::is_last_project_date_Valid() const{
    return m_last_project_date_isValid;
}

double OAIInvitedVendor::getProjectStatusWhenInteracted() const {
    return m_project_status_when_interacted;
}
void OAIInvitedVendor::setProjectStatusWhenInteracted(const double &project_status_when_interacted) {
    m_project_status_when_interacted = project_status_when_interacted;
    m_project_status_when_interacted_isSet = true;
}

bool OAIInvitedVendor::is_project_status_when_interacted_Set() const{
    return m_project_status_when_interacted_isSet;
}

bool OAIInvitedVendor::is_project_status_when_interacted_Valid() const{
    return m_project_status_when_interacted_isValid;
}

QDate OAIInvitedVendor::getRegistrationDate() const {
    return m_registration_date;
}
void OAIInvitedVendor::setRegistrationDate(const QDate &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIInvitedVendor::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIInvitedVendor::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

double OAIInvitedVendor::getResponsiveness() const {
    return m_responsiveness;
}
void OAIInvitedVendor::setResponsiveness(const double &responsiveness) {
    m_responsiveness = responsiveness;
    m_responsiveness_isSet = true;
}

bool OAIInvitedVendor::is_responsiveness_Set() const{
    return m_responsiveness_isSet;
}

bool OAIInvitedVendor::is_responsiveness_Valid() const{
    return m_responsiveness_isValid;
}

double OAIInvitedVendor::getUserId() const {
    return m_user_id;
}
void OAIInvitedVendor::setUserId(const double &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIInvitedVendor::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIInvitedVendor::is_user_id_Valid() const{
    return m_user_id_isValid;
}

double OAIInvitedVendor::getVendorId() const {
    return m_vendor_id;
}
void OAIInvitedVendor::setVendorId(const double &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIInvitedVendor::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIInvitedVendor::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

QString OAIInvitedVendor::getVendorName() const {
    return m_vendor_name;
}
void OAIInvitedVendor::setVendorName(const QString &vendor_name) {
    m_vendor_name = vendor_name;
    m_vendor_name_isSet = true;
}

bool OAIInvitedVendor::is_vendor_name_Set() const{
    return m_vendor_name_isSet;
}

bool OAIInvitedVendor::is_vendor_name_Valid() const{
    return m_vendor_name_isValid;
}

QString OAIInvitedVendor::getVendorType() const {
    return m_vendor_type;
}
void OAIInvitedVendor::setVendorType(const QString &vendor_type) {
    m_vendor_type = vendor_type;
    m_vendor_type_isSet = true;
}

bool OAIInvitedVendor::is_vendor_type_Set() const{
    return m_vendor_type_isSet;
}

bool OAIInvitedVendor::is_vendor_type_Valid() const{
    return m_vendor_type_isValid;
}

bool OAIInvitedVendor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_open_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_get_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_worked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_worked_in_any_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_project_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_when_interacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvitedVendor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
