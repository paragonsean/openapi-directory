/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsCollection::OAIAnalyticsCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsCollection::OAIAnalyticsCollection() {
    this->initializeModel();
}

OAIAnalyticsCollection::~OAIAnalyticsCollection() {}

void OAIAnalyticsCollection::initializeModel() {

    m_anonymous_id_isSet = false;
    m_anonymous_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAnalyticsCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyticsCollection::fromJsonObject(QJsonObject json) {

    m_anonymous_id_isValid = ::OpenAPI::fromJsonValue(m_anonymous_id, json[QString("anonymousId")]);
    m_anonymous_id_isSet = !json[QString("anonymousId")].isNull() && m_anonymous_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAnalyticsCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyticsCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_anonymous_id_isSet) {
        obj.insert(QString("anonymousId"), ::OpenAPI::toJsonValue(m_anonymous_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAnalyticsCollection::getAnonymousId() const {
    return m_anonymous_id;
}
void OAIAnalyticsCollection::setAnonymousId(const QString &anonymous_id) {
    m_anonymous_id = anonymous_id;
    m_anonymous_id_isSet = true;
}

bool OAIAnalyticsCollection::is_anonymous_id_Set() const{
    return m_anonymous_id_isSet;
}

bool OAIAnalyticsCollection::is_anonymous_id_Valid() const{
    return m_anonymous_id_isValid;
}

QMap<QString, QString> OAIAnalyticsCollection::getProperties() const {
    return m_properties;
}
void OAIAnalyticsCollection::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAnalyticsCollection::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAnalyticsCollection::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIAnalyticsCollection::getSessionId() const {
    return m_session_id;
}
void OAIAnalyticsCollection::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIAnalyticsCollection::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIAnalyticsCollection::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIAnalyticsCollection::getType() const {
    return m_type;
}
void OAIAnalyticsCollection::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnalyticsCollection::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnalyticsCollection::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAnalyticsCollection::getUserId() const {
    return m_user_id;
}
void OAIAnalyticsCollection::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAnalyticsCollection::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAnalyticsCollection::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAnalyticsCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anonymous_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyticsCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
