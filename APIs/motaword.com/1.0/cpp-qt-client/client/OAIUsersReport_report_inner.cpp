/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersReport_report_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsersReport_report_inner::OAIUsersReport_report_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsersReport_report_inner::OAIUsersReport_report_inner() {
    this->initializeModel();
}

OAIUsersReport_report_inner::~OAIUsersReport_report_inner() {}

void OAIUsersReport_report_inner::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_spending_isSet = false;
    m_spending_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_word_count_isSet = false;
    m_word_count_isValid = false;
}

void OAIUsersReport_report_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsersReport_report_inner::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_spending_isValid = ::OpenAPI::fromJsonValue(m_spending, json[QString("spending")]);
    m_spending_isSet = !json[QString("spending")].isNull() && m_spending_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_word_count_isValid = ::OpenAPI::fromJsonValue(m_word_count, json[QString("word_count")]);
    m_word_count_isSet = !json[QString("word_count")].isNull() && m_word_count_isValid;
}

QString OAIUsersReport_report_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsersReport_report_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_spending_isSet) {
        obj.insert(QString("spending"), ::OpenAPI::toJsonValue(m_spending));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_word_count_isSet) {
        obj.insert(QString("word_count"), ::OpenAPI::toJsonValue(m_word_count));
    }
    return obj;
}

QString OAIUsersReport_report_inner::getCurrency() const {
    return m_currency;
}
void OAIUsersReport_report_inner::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUsersReport_report_inner::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUsersReport_report_inner::is_currency_Valid() const{
    return m_currency_isValid;
}

float OAIUsersReport_report_inner::getSpending() const {
    return m_spending;
}
void OAIUsersReport_report_inner::setSpending(const float &spending) {
    m_spending = spending;
    m_spending_isSet = true;
}

bool OAIUsersReport_report_inner::is_spending_Set() const{
    return m_spending_isSet;
}

bool OAIUsersReport_report_inner::is_spending_Valid() const{
    return m_spending_isValid;
}

OAIUser OAIUsersReport_report_inner::getUser() const {
    return m_user;
}
void OAIUsersReport_report_inner::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUsersReport_report_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUsersReport_report_inner::is_user_Valid() const{
    return m_user_isValid;
}

qint64 OAIUsersReport_report_inner::getWordCount() const {
    return m_word_count;
}
void OAIUsersReport_report_inner::setWordCount(const qint64 &word_count) {
    m_word_count = word_count;
    m_word_count_isSet = true;
}

bool OAIUsersReport_report_inner::is_word_count_Set() const{
    return m_word_count_isSet;
}

bool OAIUsersReport_report_inner::is_word_count_Valid() const{
    return m_word_count_isValid;
}

bool OAIUsersReport_report_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsersReport_report_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
