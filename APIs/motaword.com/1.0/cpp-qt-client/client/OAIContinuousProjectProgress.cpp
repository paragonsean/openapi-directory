/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinuousProjectProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinuousProjectProgress::OAIContinuousProjectProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinuousProjectProgress::OAIContinuousProjectProgress() {
    this->initializeModel();
}

OAIContinuousProjectProgress::~OAIContinuousProjectProgress() {}

void OAIContinuousProjectProgress::initializeModel() {

    m_costs_isSet = false;
    m_costs_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_word_counts_isSet = false;
    m_word_counts_isValid = false;
}

void OAIContinuousProjectProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinuousProjectProgress::fromJsonObject(QJsonObject json) {

    m_costs_isValid = ::OpenAPI::fromJsonValue(m_costs, json[QString("costs")]);
    m_costs_isSet = !json[QString("costs")].isNull() && m_costs_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_word_counts_isValid = ::OpenAPI::fromJsonValue(m_word_counts, json[QString("word_counts")]);
    m_word_counts_isSet = !json[QString("word_counts")].isNull() && m_word_counts_isValid;
}

QString OAIContinuousProjectProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinuousProjectProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_costs.isSet()) {
        obj.insert(QString("costs"), ::OpenAPI::toJsonValue(m_costs));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_word_counts.isSet()) {
        obj.insert(QString("word_counts"), ::OpenAPI::toJsonValue(m_word_counts));
    }
    return obj;
}

OAIContinuousProjectCosts OAIContinuousProjectProgress::getCosts() const {
    return m_costs;
}
void OAIContinuousProjectProgress::setCosts(const OAIContinuousProjectCosts &costs) {
    m_costs = costs;
    m_costs_isSet = true;
}

bool OAIContinuousProjectProgress::is_costs_Set() const{
    return m_costs_isSet;
}

bool OAIContinuousProjectProgress::is_costs_Valid() const{
    return m_costs_isValid;
}

OAIProgress OAIContinuousProjectProgress::getProgress() const {
    return m_progress;
}
void OAIContinuousProjectProgress::setProgress(const OAIProgress &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIContinuousProjectProgress::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIContinuousProjectProgress::is_progress_Valid() const{
    return m_progress_isValid;
}

OAIContinuousProjectWordCounts OAIContinuousProjectProgress::getWordCounts() const {
    return m_word_counts;
}
void OAIContinuousProjectProgress::setWordCounts(const OAIContinuousProjectWordCounts &word_counts) {
    m_word_counts = word_counts;
    m_word_counts_isSet = true;
}

bool OAIContinuousProjectProgress::is_word_counts_Set() const{
    return m_word_counts_isSet;
}

bool OAIContinuousProjectProgress::is_word_counts_Valid() const{
    return m_word_counts_isValid;
}

bool OAIContinuousProjectProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_costs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinuousProjectProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
