/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenRequest::OAITokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenRequest::OAITokenRequest() {
    this->initializeModel();
}

OAITokenRequest::~OAITokenRequest() {}

void OAITokenRequest::initializeModel() {

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAITokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenRequest::fromJsonObject(QJsonObject json) {

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAITokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAITokenRequest::getGrantType() const {
    return m_grant_type;
}
void OAITokenRequest::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAITokenRequest::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAITokenRequest::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAITokenRequest::getPassword() const {
    return m_password;
}
void OAITokenRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAITokenRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAITokenRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAITokenRequest::getRefreshToken() const {
    return m_refresh_token;
}
void OAITokenRequest::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAITokenRequest::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAITokenRequest::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAITokenRequest::getScope() const {
    return m_scope;
}
void OAITokenRequest::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAITokenRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAITokenRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

qint64 OAITokenRequest::getUserId() const {
    return m_user_id;
}
void OAITokenRequest::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITokenRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITokenRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITokenRequest::getUsername() const {
    return m_username;
}
void OAITokenRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAITokenRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAITokenRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAITokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_type_isValid && m_scope_isValid && true;
}

} // namespace OpenAPI
