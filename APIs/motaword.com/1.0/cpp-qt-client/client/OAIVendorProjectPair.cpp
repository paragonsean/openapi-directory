/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorProjectPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorProjectPair::OAIVendorProjectPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorProjectPair::OAIVendorProjectPair() {
    this->initializeModel();
}

OAIVendorProjectPair::~OAIVendorProjectPair() {}

void OAIVendorProjectPair::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_is_proofreader_isSet = false;
    m_is_proofreader_isValid = false;

    m_proofreader_isSet = false;
    m_proofreader_isValid = false;

    m_proofreading_rate_isSet = false;
    m_proofreading_rate_isValid = false;

    m_source_language_isSet = false;
    m_source_language_isValid = false;

    m_target_language_isSet = false;
    m_target_language_isValid = false;

    m_translation_rate_isSet = false;
    m_translation_rate_isValid = false;
}

void OAIVendorProjectPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorProjectPair::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_is_proofreader_isValid = ::OpenAPI::fromJsonValue(m_is_proofreader, json[QString("is_proofreader")]);
    m_is_proofreader_isSet = !json[QString("is_proofreader")].isNull() && m_is_proofreader_isValid;

    m_proofreader_isValid = ::OpenAPI::fromJsonValue(m_proofreader, json[QString("proofreader")]);
    m_proofreader_isSet = !json[QString("proofreader")].isNull() && m_proofreader_isValid;

    m_proofreading_rate_isValid = ::OpenAPI::fromJsonValue(m_proofreading_rate, json[QString("proofreading_rate")]);
    m_proofreading_rate_isSet = !json[QString("proofreading_rate")].isNull() && m_proofreading_rate_isValid;

    m_source_language_isValid = ::OpenAPI::fromJsonValue(m_source_language, json[QString("source_language")]);
    m_source_language_isSet = !json[QString("source_language")].isNull() && m_source_language_isValid;

    m_target_language_isValid = ::OpenAPI::fromJsonValue(m_target_language, json[QString("target_language")]);
    m_target_language_isSet = !json[QString("target_language")].isNull() && m_target_language_isValid;

    m_translation_rate_isValid = ::OpenAPI::fromJsonValue(m_translation_rate, json[QString("translation_rate")]);
    m_translation_rate_isSet = !json[QString("translation_rate")].isNull() && m_translation_rate_isValid;
}

QString OAIVendorProjectPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorProjectPair::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_is_proofreader_isSet) {
        obj.insert(QString("is_proofreader"), ::OpenAPI::toJsonValue(m_is_proofreader));
    }
    if (m_proofreader.isSet()) {
        obj.insert(QString("proofreader"), ::OpenAPI::toJsonValue(m_proofreader));
    }
    if (m_proofreading_rate_isSet) {
        obj.insert(QString("proofreading_rate"), ::OpenAPI::toJsonValue(m_proofreading_rate));
    }
    if (m_source_language_isSet) {
        obj.insert(QString("source_language"), ::OpenAPI::toJsonValue(m_source_language));
    }
    if (m_target_language_isSet) {
        obj.insert(QString("target_language"), ::OpenAPI::toJsonValue(m_target_language));
    }
    if (m_translation_rate_isSet) {
        obj.insert(QString("translation_rate"), ::OpenAPI::toJsonValue(m_translation_rate));
    }
    return obj;
}

QString OAIVendorProjectPair::getCurrency() const {
    return m_currency;
}
void OAIVendorProjectPair::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIVendorProjectPair::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIVendorProjectPair::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAIVendorProjectPair::isIsProofreader() const {
    return m_is_proofreader;
}
void OAIVendorProjectPair::setIsProofreader(const bool &is_proofreader) {
    m_is_proofreader = is_proofreader;
    m_is_proofreader_isSet = true;
}

bool OAIVendorProjectPair::is_is_proofreader_Set() const{
    return m_is_proofreader_isSet;
}

bool OAIVendorProjectPair::is_is_proofreader_Valid() const{
    return m_is_proofreader_isValid;
}

OAIUser OAIVendorProjectPair::getProofreader() const {
    return m_proofreader;
}
void OAIVendorProjectPair::setProofreader(const OAIUser &proofreader) {
    m_proofreader = proofreader;
    m_proofreader_isSet = true;
}

bool OAIVendorProjectPair::is_proofreader_Set() const{
    return m_proofreader_isSet;
}

bool OAIVendorProjectPair::is_proofreader_Valid() const{
    return m_proofreader_isValid;
}

float OAIVendorProjectPair::getProofreadingRate() const {
    return m_proofreading_rate;
}
void OAIVendorProjectPair::setProofreadingRate(const float &proofreading_rate) {
    m_proofreading_rate = proofreading_rate;
    m_proofreading_rate_isSet = true;
}

bool OAIVendorProjectPair::is_proofreading_rate_Set() const{
    return m_proofreading_rate_isSet;
}

bool OAIVendorProjectPair::is_proofreading_rate_Valid() const{
    return m_proofreading_rate_isValid;
}

QString OAIVendorProjectPair::getSourceLanguage() const {
    return m_source_language;
}
void OAIVendorProjectPair::setSourceLanguage(const QString &source_language) {
    m_source_language = source_language;
    m_source_language_isSet = true;
}

bool OAIVendorProjectPair::is_source_language_Set() const{
    return m_source_language_isSet;
}

bool OAIVendorProjectPair::is_source_language_Valid() const{
    return m_source_language_isValid;
}

QString OAIVendorProjectPair::getTargetLanguage() const {
    return m_target_language;
}
void OAIVendorProjectPair::setTargetLanguage(const QString &target_language) {
    m_target_language = target_language;
    m_target_language_isSet = true;
}

bool OAIVendorProjectPair::is_target_language_Set() const{
    return m_target_language_isSet;
}

bool OAIVendorProjectPair::is_target_language_Valid() const{
    return m_target_language_isValid;
}

float OAIVendorProjectPair::getTranslationRate() const {
    return m_translation_rate;
}
void OAIVendorProjectPair::setTranslationRate(const float &translation_rate) {
    m_translation_rate = translation_rate;
    m_translation_rate_isSet = true;
}

bool OAIVendorProjectPair::is_translation_rate_Set() const{
    return m_translation_rate_isSet;
}

bool OAIVendorProjectPair::is_translation_rate_Valid() const{
    return m_translation_rate_isValid;
}

bool OAIVendorProjectPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proofreader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proofreader.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proofreading_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorProjectPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
