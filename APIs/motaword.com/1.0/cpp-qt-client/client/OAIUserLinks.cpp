/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserLinks::OAIUserLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserLinks::OAIUserLinks() {
    this->initializeModel();
}

OAIUserLinks::~OAIUserLinks() {}

void OAIUserLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_login_as_isSet = false;
    m_login_as_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_responsivity_isSet = false;
    m_responsivity_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIUserLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_login_as_isValid = ::OpenAPI::fromJsonValue(m_login_as, json[QString("login_as")]);
    m_login_as_isSet = !json[QString("login_as")].isNull() && m_login_as_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_responsivity_isValid = ::OpenAPI::fromJsonValue(m_responsivity, json[QString("responsivity")]);
    m_responsivity_isSet = !json[QString("responsivity")].isNull() && m_responsivity_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIUserLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_login_as.isSet()) {
        obj.insert(QString("login_as"), ::OpenAPI::toJsonValue(m_login_as));
    }
    if (m_projects.isSet()) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_responsivity.isSet()) {
        obj.insert(QString("responsivity"), ::OpenAPI::toJsonValue(m_responsivity));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

OAIHref OAIUserLinks::getSelf() const {
    return m_self;
}
void OAIUserLinks::setSelf(const OAIHref &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIUserLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIUserLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAIHref OAIUserLinks::getLoginAs() const {
    return m_login_as;
}
void OAIUserLinks::setLoginAs(const OAIHref &login_as) {
    m_login_as = login_as;
    m_login_as_isSet = true;
}

bool OAIUserLinks::is_login_as_Set() const{
    return m_login_as_isSet;
}

bool OAIUserLinks::is_login_as_Valid() const{
    return m_login_as_isValid;
}

OAIHref OAIUserLinks::getProjects() const {
    return m_projects;
}
void OAIUserLinks::setProjects(const OAIHref &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIUserLinks::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIUserLinks::is_projects_Valid() const{
    return m_projects_isValid;
}

OAIHref OAIUserLinks::getResponsivity() const {
    return m_responsivity;
}
void OAIUserLinks::setResponsivity(const OAIHref &responsivity) {
    m_responsivity = responsivity;
    m_responsivity_isSet = true;
}

bool OAIUserLinks::is_responsivity_Set() const{
    return m_responsivity_isSet;
}

bool OAIUserLinks::is_responsivity_Valid() const{
    return m_responsivity_isValid;
}

OAIHref OAIUserLinks::getStats() const {
    return m_stats;
}
void OAIUserLinks::setStats(const OAIHref &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIUserLinks::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIUserLinks::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIUserLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_as.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
