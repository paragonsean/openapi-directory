/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStringsApi_H
#define OAI_OAIStringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAsyncOperationStatus.h"
#include "OAIClientStrings.h"
#include "OAIContinuousProjectCache.h"
#include "OAIContinuousProjectDocumentStringsBody.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include "OAIOperationStatus.h"
#include "OAIStringList.h"
#include "OAITranslationMemoryUnit.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStringsApi : public QObject {
    Q_OBJECT

public:
    OAIStringsApi(const int timeOut = 0);
    ~OAIStringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  locale QString [optional]
    * @param[in]  file_id qint64 [optional]
    */
    virtual void clearTranslationCache(const qint64 &project_id, const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &file_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void getContinuousProjectFileStrings(const qint64 &project_id, const qint64 &document_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getContinuousProjectStrings(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    */
    virtual void getDocumentTranslations(const qint64 &project_id, const qint64 &document_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  document_id qint64 [required]
    * @param[in]  language QString [required]
    */
    virtual void getDocumentTranslationsForLanguage(const qint64 &project_id, const qint64 &document_id, const QString &language);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void getProjectStrings(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language QString [required]
    */
    virtual void getProjectStringsForLanguage(const qint64 &project_id, const QString &language);

    /**
    * @param[in]  project_id qint64 [required]
    */
    Q_DECL_DEPRECATED virtual void getProjectTranslations(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language QString [required]
    */
    Q_DECL_DEPRECATED virtual void getProjectTranslationsForLanguage(const qint64 &project_id, const QString &language);

    /**
    * @param[in]  source_language QString [optional]
    * @param[in]  page qint64 [optional]
    */
    virtual void getStrings(const ::OpenAPI::OptionalParam<QString> &source_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  flatten bool [optional]
    */
    virtual void getTranslationCache(const qint64 &project_id, const ::OpenAPI::OptionalParam<bool> &flatten = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  async qint64 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void packageProjectTranslationMemory(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint64> &async = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language_code QString [required]
    * @param[in]  async qint64 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void packageProjectTranslationMemoryForLanguage(const qint64 &project_id, const QString &language_code, const ::OpenAPI::OptionalParam<qint64> &async = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language_code QString [required]
    * @param[in]  async_request_key QString [required]
    */
    virtual void packageProjectTranslationMemoryForLanguageStatus(const qint64 &project_id, const QString &language_code, const QString &async_request_key);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  async_request_key QString [required]
    */
    virtual void packageProjectTranslationMemoryStatus(const qint64 &project_id, const QString &async_request_key);

    /**
    * @param[in]  language_code QString [required]
    * @param[in]  async qint64 [optional]
    * @param[in]  email qint64 [optional]
    */
    virtual void packageUserTranslationMemory(const QString &language_code, const ::OpenAPI::OptionalParam<qint64> &async = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &email = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  language_code QString [required]
    * @param[in]  async_request_key QString [required]
    */
    virtual void packageUserTranslationMemoryForLanguageStatus(const QString &language_code, const QString &async_request_key);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_continuous_project_document_strings_body OAIContinuousProjectDocumentStringsBody [optional]
    */
    virtual void postContinuousProjectFileStrings(const qint64 &project_id, const ::OpenAPI::OptionalParam<OAIContinuousProjectDocumentStringsBody> &oai_continuous_project_document_strings_body = ::OpenAPI::OptionalParam<OAIContinuousProjectDocumentStringsBody>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  locale QString [optional]
    * @param[in]  file_id qint64 [optional]
    */
    virtual void recacheTranslations(const qint64 &project_id, const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &file_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_translation_memory_unit OAITranslationMemoryUnit [optional]
    */
    virtual void updateTranslationMemoryUnit(const ::OpenAPI::OptionalParam<OAITranslationMemoryUnit> &oai_translation_memory_unit = ::OpenAPI::OptionalParam<OAITranslationMemoryUnit>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clearTranslationCacheCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectFileStringsCallback(OAIHttpRequestWorker *worker);
    void getContinuousProjectStringsCallback(OAIHttpRequestWorker *worker);
    void getDocumentTranslationsCallback(OAIHttpRequestWorker *worker);
    void getDocumentTranslationsForLanguageCallback(OAIHttpRequestWorker *worker);
    void getProjectStringsCallback(OAIHttpRequestWorker *worker);
    void getProjectStringsForLanguageCallback(OAIHttpRequestWorker *worker);
    void getProjectTranslationsCallback(OAIHttpRequestWorker *worker);
    void getProjectTranslationsForLanguageCallback(OAIHttpRequestWorker *worker);
    void getStringsCallback(OAIHttpRequestWorker *worker);
    void getTranslationCacheCallback(OAIHttpRequestWorker *worker);
    void packageProjectTranslationMemoryCallback(OAIHttpRequestWorker *worker);
    void packageProjectTranslationMemoryForLanguageCallback(OAIHttpRequestWorker *worker);
    void packageProjectTranslationMemoryForLanguageStatusCallback(OAIHttpRequestWorker *worker);
    void packageProjectTranslationMemoryStatusCallback(OAIHttpRequestWorker *worker);
    void packageUserTranslationMemoryCallback(OAIHttpRequestWorker *worker);
    void packageUserTranslationMemoryForLanguageStatusCallback(OAIHttpRequestWorker *worker);
    void postContinuousProjectFileStringsCallback(OAIHttpRequestWorker *worker);
    void recacheTranslationsCallback(OAIHttpRequestWorker *worker);
    void updateTranslationMemoryUnitCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clearTranslationCacheSignal(OAIOperationStatus summary);
    void getContinuousProjectFileStringsSignal(OAIStringList summary);
    void getContinuousProjectStringsSignal(OAIStringList summary);
    void getDocumentTranslationsSignal(OAIStringList summary);
    void getDocumentTranslationsForLanguageSignal(OAIStringList summary);
    void getProjectStringsSignal(OAIStringList summary);
    void getProjectStringsForLanguageSignal(OAIStringList summary);
    void getProjectTranslationsSignal(OAIStringList summary);
    void getProjectTranslationsForLanguageSignal(OAIStringList summary);
    void getStringsSignal(OAIClientStrings summary);
    void getTranslationCacheSignal(OAIContinuousProjectCache summary);
    void packageProjectTranslationMemorySignal(OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryForLanguageSignal(OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryForLanguageStatusSignal(OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryStatusSignal(OAIAsyncOperationStatus summary);
    void packageUserTranslationMemorySignal(OAIAsyncOperationStatus summary);
    void packageUserTranslationMemoryForLanguageStatusSignal(OAIAsyncOperationStatus summary);
    void postContinuousProjectFileStringsSignal(OAIStringList summary);
    void recacheTranslationsSignal(OAIOperationStatus summary);
    void updateTranslationMemoryUnitSignal(OAIOperationStatus summary);


    void clearTranslationCacheSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void getContinuousProjectFileStringsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getContinuousProjectStringsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getDocumentTranslationsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getDocumentTranslationsForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getProjectStringsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getProjectStringsForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getProjectTranslationsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getProjectTranslationsForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void getStringsSignalFull(OAIHttpRequestWorker *worker, OAIClientStrings summary);
    void getTranslationCacheSignalFull(OAIHttpRequestWorker *worker, OAIContinuousProjectCache summary);
    void packageProjectTranslationMemorySignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryForLanguageSignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryForLanguageStatusSignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void packageProjectTranslationMemoryStatusSignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void packageUserTranslationMemorySignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void packageUserTranslationMemoryForLanguageStatusSignalFull(OAIHttpRequestWorker *worker, OAIAsyncOperationStatus summary);
    void postContinuousProjectFileStringsSignalFull(OAIHttpRequestWorker *worker, OAIStringList summary);
    void recacheTranslationsSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void updateTranslationMemoryUnitSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);

    Q_DECL_DEPRECATED_X("Use clearTranslationCacheSignalError() instead")
    void clearTranslationCacheSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clearTranslationCacheSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectFileStringsSignalError() instead")
    void getContinuousProjectFileStringsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectFileStringsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectStringsSignalError() instead")
    void getContinuousProjectStringsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectStringsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTranslationsSignalError() instead")
    void getDocumentTranslationsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTranslationsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTranslationsForLanguageSignalError() instead")
    void getDocumentTranslationsForLanguageSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTranslationsForLanguageSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStringsSignalError() instead")
    void getProjectStringsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStringsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStringsForLanguageSignalError() instead")
    void getProjectStringsForLanguageSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStringsForLanguageSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTranslationsSignalError() instead")
    void getProjectTranslationsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTranslationsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTranslationsForLanguageSignalError() instead")
    void getProjectTranslationsForLanguageSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTranslationsForLanguageSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStringsSignalError() instead")
    void getStringsSignalE(OAIClientStrings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStringsSignalError(OAIClientStrings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTranslationCacheSignalError() instead")
    void getTranslationCacheSignalE(OAIContinuousProjectCache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTranslationCacheSignalError(OAIContinuousProjectCache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemorySignalError() instead")
    void packageProjectTranslationMemorySignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemorySignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryForLanguageSignalError() instead")
    void packageProjectTranslationMemoryForLanguageSignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryForLanguageSignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryForLanguageStatusSignalError() instead")
    void packageProjectTranslationMemoryForLanguageStatusSignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryForLanguageStatusSignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryStatusSignalError() instead")
    void packageProjectTranslationMemoryStatusSignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryStatusSignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUserTranslationMemorySignalError() instead")
    void packageUserTranslationMemorySignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUserTranslationMemorySignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUserTranslationMemoryForLanguageStatusSignalError() instead")
    void packageUserTranslationMemoryForLanguageStatusSignalE(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUserTranslationMemoryForLanguageStatusSignalError(OAIAsyncOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postContinuousProjectFileStringsSignalError() instead")
    void postContinuousProjectFileStringsSignalE(OAIStringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postContinuousProjectFileStringsSignalError(OAIStringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recacheTranslationsSignalError() instead")
    void recacheTranslationsSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recacheTranslationsSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranslationMemoryUnitSignalError() instead")
    void updateTranslationMemoryUnitSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranslationMemoryUnitSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clearTranslationCacheSignalErrorFull() instead")
    void clearTranslationCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clearTranslationCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectFileStringsSignalErrorFull() instead")
    void getContinuousProjectFileStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectFileStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinuousProjectStringsSignalErrorFull() instead")
    void getContinuousProjectStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinuousProjectStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTranslationsSignalErrorFull() instead")
    void getDocumentTranslationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTranslationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTranslationsForLanguageSignalErrorFull() instead")
    void getDocumentTranslationsForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTranslationsForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStringsSignalErrorFull() instead")
    void getProjectStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStringsForLanguageSignalErrorFull() instead")
    void getProjectStringsForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStringsForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTranslationsSignalErrorFull() instead")
    void getProjectTranslationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTranslationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectTranslationsForLanguageSignalErrorFull() instead")
    void getProjectTranslationsForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectTranslationsForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStringsSignalErrorFull() instead")
    void getStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTranslationCacheSignalErrorFull() instead")
    void getTranslationCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTranslationCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemorySignalErrorFull() instead")
    void packageProjectTranslationMemorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryForLanguageSignalErrorFull() instead")
    void packageProjectTranslationMemoryForLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryForLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryForLanguageStatusSignalErrorFull() instead")
    void packageProjectTranslationMemoryForLanguageStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryForLanguageStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageProjectTranslationMemoryStatusSignalErrorFull() instead")
    void packageProjectTranslationMemoryStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageProjectTranslationMemoryStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUserTranslationMemorySignalErrorFull() instead")
    void packageUserTranslationMemorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUserTranslationMemorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUserTranslationMemoryForLanguageStatusSignalErrorFull() instead")
    void packageUserTranslationMemoryForLanguageStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUserTranslationMemoryForLanguageStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postContinuousProjectFileStringsSignalErrorFull() instead")
    void postContinuousProjectFileStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postContinuousProjectFileStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recacheTranslationsSignalErrorFull() instead")
    void recacheTranslationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recacheTranslationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranslationMemoryUnitSignalErrorFull() instead")
    void updateTranslationMemoryUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranslationMemoryUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
