/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_can_work_manual_files_isSet = false;
    m_can_work_manual_files_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_corporate_id_isSet = false;
    m_corporate_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_do_not_contact_isSet = false;
    m_do_not_contact_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_has_pwd_isSet = false;
    m_has_pwd_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_client_isSet = false;
    m_is_client_isValid = false;

    m_is_developer_isSet = false;
    m_is_developer_isValid = false;

    m_is_proofreader_isSet = false;
    m_is_proofreader_isValid = false;

    m_is_prospect_isSet = false;
    m_is_prospect_isValid = false;

    m_is_sales_person_isSet = false;
    m_is_sales_person_isValid = false;

    m_is_vendor_isSet = false;
    m_is_vendor_isValid = false;

    m_language_pairs_isSet = false;
    m_language_pairs_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_seen_online_at_isSet = false;
    m_last_seen_online_at_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_mailing_isSet = false;
    m_mailing_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_native_language_isSet = false;
    m_native_language_isValid = false;

    m_nps_isSet = false;
    m_nps_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_profile_picture_path_isSet = false;
    m_profile_picture_path_isValid = false;

    m_social_media_isSet = false;
    m_social_media_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_tms_user_name_isSet = false;
    m_tms_user_name_isValid = false;

    m_user_groups_isSet = false;
    m_user_groups_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_can_work_manual_files_isValid = ::OpenAPI::fromJsonValue(m_can_work_manual_files, json[QString("can_work_manual_files")]);
    m_can_work_manual_files_isSet = !json[QString("can_work_manual_files")].isNull() && m_can_work_manual_files_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_corporate_id_isValid = ::OpenAPI::fromJsonValue(m_corporate_id, json[QString("corporate_id")]);
    m_corporate_id_isSet = !json[QString("corporate_id")].isNull() && m_corporate_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_do_not_contact_isValid = ::OpenAPI::fromJsonValue(m_do_not_contact, json[QString("do_not_contact")]);
    m_do_not_contact_isSet = !json[QString("do_not_contact")].isNull() && m_do_not_contact_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_has_pwd_isValid = ::OpenAPI::fromJsonValue(m_has_pwd, json[QString("has_pwd")]);
    m_has_pwd_isSet = !json[QString("has_pwd")].isNull() && m_has_pwd_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_client_isValid = ::OpenAPI::fromJsonValue(m_is_client, json[QString("is_client")]);
    m_is_client_isSet = !json[QString("is_client")].isNull() && m_is_client_isValid;

    m_is_developer_isValid = ::OpenAPI::fromJsonValue(m_is_developer, json[QString("is_developer")]);
    m_is_developer_isSet = !json[QString("is_developer")].isNull() && m_is_developer_isValid;

    m_is_proofreader_isValid = ::OpenAPI::fromJsonValue(m_is_proofreader, json[QString("is_proofreader")]);
    m_is_proofreader_isSet = !json[QString("is_proofreader")].isNull() && m_is_proofreader_isValid;

    m_is_prospect_isValid = ::OpenAPI::fromJsonValue(m_is_prospect, json[QString("is_prospect")]);
    m_is_prospect_isSet = !json[QString("is_prospect")].isNull() && m_is_prospect_isValid;

    m_is_sales_person_isValid = ::OpenAPI::fromJsonValue(m_is_sales_person, json[QString("is_sales_person")]);
    m_is_sales_person_isSet = !json[QString("is_sales_person")].isNull() && m_is_sales_person_isValid;

    m_is_vendor_isValid = ::OpenAPI::fromJsonValue(m_is_vendor, json[QString("is_vendor")]);
    m_is_vendor_isSet = !json[QString("is_vendor")].isNull() && m_is_vendor_isValid;

    m_language_pairs_isValid = ::OpenAPI::fromJsonValue(m_language_pairs, json[QString("language_pairs")]);
    m_language_pairs_isSet = !json[QString("language_pairs")].isNull() && m_language_pairs_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_last_seen_online_at_isValid = ::OpenAPI::fromJsonValue(m_last_seen_online_at, json[QString("last_seen_online_at")]);
    m_last_seen_online_at_isSet = !json[QString("last_seen_online_at")].isNull() && m_last_seen_online_at_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_mailing_isValid = ::OpenAPI::fromJsonValue(m_mailing, json[QString("mailing")]);
    m_mailing_isSet = !json[QString("mailing")].isNull() && m_mailing_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_native_language_isValid = ::OpenAPI::fromJsonValue(m_native_language, json[QString("native_language")]);
    m_native_language_isSet = !json[QString("native_language")].isNull() && m_native_language_isValid;

    m_nps_isValid = ::OpenAPI::fromJsonValue(m_nps, json[QString("nps")]);
    m_nps_isSet = !json[QString("nps")].isNull() && m_nps_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_profile_picture_path_isValid = ::OpenAPI::fromJsonValue(m_profile_picture_path, json[QString("profile_picture_path")]);
    m_profile_picture_path_isSet = !json[QString("profile_picture_path")].isNull() && m_profile_picture_path_isValid;

    m_social_media_isValid = ::OpenAPI::fromJsonValue(m_social_media, json[QString("social_media")]);
    m_social_media_isSet = !json[QString("social_media")].isNull() && m_social_media_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_tms_user_name_isValid = ::OpenAPI::fromJsonValue(m_tms_user_name, json[QString("tms_user_name")]);
    m_tms_user_name_isSet = !json[QString("tms_user_name")].isNull() && m_tms_user_name_isValid;

    m_user_groups_isValid = ::OpenAPI::fromJsonValue(m_user_groups, json[QString("user_groups")]);
    m_user_groups_isSet = !json[QString("user_groups")].isNull() && m_user_groups_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_can_work_manual_files_isSet) {
        obj.insert(QString("can_work_manual_files"), ::OpenAPI::toJsonValue(m_can_work_manual_files));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_corporate_id_isSet) {
        obj.insert(QString("corporate_id"), ::OpenAPI::toJsonValue(m_corporate_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_do_not_contact_isSet) {
        obj.insert(QString("do_not_contact"), ::OpenAPI::toJsonValue(m_do_not_contact));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_has_pwd_isSet) {
        obj.insert(QString("has_pwd"), ::OpenAPI::toJsonValue(m_has_pwd));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_client_isSet) {
        obj.insert(QString("is_client"), ::OpenAPI::toJsonValue(m_is_client));
    }
    if (m_is_developer_isSet) {
        obj.insert(QString("is_developer"), ::OpenAPI::toJsonValue(m_is_developer));
    }
    if (m_is_proofreader_isSet) {
        obj.insert(QString("is_proofreader"), ::OpenAPI::toJsonValue(m_is_proofreader));
    }
    if (m_is_prospect_isSet) {
        obj.insert(QString("is_prospect"), ::OpenAPI::toJsonValue(m_is_prospect));
    }
    if (m_is_sales_person_isSet) {
        obj.insert(QString("is_sales_person"), ::OpenAPI::toJsonValue(m_is_sales_person));
    }
    if (m_is_vendor_isSet) {
        obj.insert(QString("is_vendor"), ::OpenAPI::toJsonValue(m_is_vendor));
    }
    if (m_language_pairs.size() > 0) {
        obj.insert(QString("language_pairs"), ::OpenAPI::toJsonValue(m_language_pairs));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_seen_online_at_isSet) {
        obj.insert(QString("last_seen_online_at"), ::OpenAPI::toJsonValue(m_last_seen_online_at));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_mailing.isSet()) {
        obj.insert(QString("mailing"), ::OpenAPI::toJsonValue(m_mailing));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_native_language_isSet) {
        obj.insert(QString("native_language"), ::OpenAPI::toJsonValue(m_native_language));
    }
    if (m_nps_isSet) {
        obj.insert(QString("nps"), ::OpenAPI::toJsonValue(m_nps));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_profile_picture_path_isSet) {
        obj.insert(QString("profile_picture_path"), ::OpenAPI::toJsonValue(m_profile_picture_path));
    }
    if (m_social_media.isSet()) {
        obj.insert(QString("social_media"), ::OpenAPI::toJsonValue(m_social_media));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_tms_user_name_isSet) {
        obj.insert(QString("tms_user_name"), ::OpenAPI::toJsonValue(m_tms_user_name));
    }
    if (m_user_groups.size() > 0) {
        obj.insert(QString("user_groups"), ::OpenAPI::toJsonValue(m_user_groups));
    }
    if (m_vendor.isSet()) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

OAIBillingAddress OAIUser::getBilling() const {
    return m_billing;
}
void OAIUser::setBilling(const OAIBillingAddress &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAIUser::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAIUser::is_billing_Valid() const{
    return m_billing_isValid;
}

QDate OAIUser::getBirthday() const {
    return m_birthday;
}
void OAIUser::setBirthday(const QDate &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIUser::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIUser::is_birthday_Valid() const{
    return m_birthday_isValid;
}

bool OAIUser::isCanWorkManualFiles() const {
    return m_can_work_manual_files;
}
void OAIUser::setCanWorkManualFiles(const bool &can_work_manual_files) {
    m_can_work_manual_files = can_work_manual_files;
    m_can_work_manual_files_isSet = true;
}

bool OAIUser::is_can_work_manual_files_Set() const{
    return m_can_work_manual_files_isSet;
}

bool OAIUser::is_can_work_manual_files_Valid() const{
    return m_can_work_manual_files_isValid;
}

QString OAIUser::getCity() const {
    return m_city;
}
void OAIUser::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUser::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUser::is_city_Valid() const{
    return m_city_isValid;
}

OAIUser_client OAIUser::getClient() const {
    return m_client;
}
void OAIUser::setClient(const OAIUser_client &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIUser::is_client_Set() const{
    return m_client_isSet;
}

bool OAIUser::is_client_Valid() const{
    return m_client_isValid;
}

qint64 OAIUser::getCorporateId() const {
    return m_corporate_id;
}
void OAIUser::setCorporateId(const qint64 &corporate_id) {
    m_corporate_id = corporate_id;
    m_corporate_id_isSet = true;
}

bool OAIUser::is_corporate_id_Set() const{
    return m_corporate_id_isSet;
}

bool OAIUser::is_corporate_id_Valid() const{
    return m_corporate_id_isValid;
}

QString OAIUser::getCountry() const {
    return m_country;
}
void OAIUser::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUser::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUser::is_country_Valid() const{
    return m_country_isValid;
}

qint64 OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const qint64 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIUser::isDoNotContact() const {
    return m_do_not_contact;
}
void OAIUser::setDoNotContact(const bool &do_not_contact) {
    m_do_not_contact = do_not_contact;
    m_do_not_contact_isSet = true;
}

bool OAIUser::is_do_not_contact_Set() const{
    return m_do_not_contact_isSet;
}

bool OAIUser::is_do_not_contact_Valid() const{
    return m_do_not_contact_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAIUser::isHasPwd() const {
    return m_has_pwd;
}
void OAIUser::setHasPwd(const bool &has_pwd) {
    m_has_pwd = has_pwd;
    m_has_pwd_isSet = true;
}

bool OAIUser::is_has_pwd_Set() const{
    return m_has_pwd_isSet;
}

bool OAIUser::is_has_pwd_Valid() const{
    return m_has_pwd_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isIsClient() const {
    return m_is_client;
}
void OAIUser::setIsClient(const bool &is_client) {
    m_is_client = is_client;
    m_is_client_isSet = true;
}

bool OAIUser::is_is_client_Set() const{
    return m_is_client_isSet;
}

bool OAIUser::is_is_client_Valid() const{
    return m_is_client_isValid;
}

bool OAIUser::isIsDeveloper() const {
    return m_is_developer;
}
void OAIUser::setIsDeveloper(const bool &is_developer) {
    m_is_developer = is_developer;
    m_is_developer_isSet = true;
}

bool OAIUser::is_is_developer_Set() const{
    return m_is_developer_isSet;
}

bool OAIUser::is_is_developer_Valid() const{
    return m_is_developer_isValid;
}

bool OAIUser::isIsProofreader() const {
    return m_is_proofreader;
}
void OAIUser::setIsProofreader(const bool &is_proofreader) {
    m_is_proofreader = is_proofreader;
    m_is_proofreader_isSet = true;
}

bool OAIUser::is_is_proofreader_Set() const{
    return m_is_proofreader_isSet;
}

bool OAIUser::is_is_proofreader_Valid() const{
    return m_is_proofreader_isValid;
}

bool OAIUser::isIsProspect() const {
    return m_is_prospect;
}
void OAIUser::setIsProspect(const bool &is_prospect) {
    m_is_prospect = is_prospect;
    m_is_prospect_isSet = true;
}

bool OAIUser::is_is_prospect_Set() const{
    return m_is_prospect_isSet;
}

bool OAIUser::is_is_prospect_Valid() const{
    return m_is_prospect_isValid;
}

bool OAIUser::isIsSalesPerson() const {
    return m_is_sales_person;
}
void OAIUser::setIsSalesPerson(const bool &is_sales_person) {
    m_is_sales_person = is_sales_person;
    m_is_sales_person_isSet = true;
}

bool OAIUser::is_is_sales_person_Set() const{
    return m_is_sales_person_isSet;
}

bool OAIUser::is_is_sales_person_Valid() const{
    return m_is_sales_person_isValid;
}

bool OAIUser::isIsVendor() const {
    return m_is_vendor;
}
void OAIUser::setIsVendor(const bool &is_vendor) {
    m_is_vendor = is_vendor;
    m_is_vendor_isSet = true;
}

bool OAIUser::is_is_vendor_Set() const{
    return m_is_vendor_isSet;
}

bool OAIUser::is_is_vendor_Valid() const{
    return m_is_vendor_isValid;
}

QList<OAILanguagePair> OAIUser::getLanguagePairs() const {
    return m_language_pairs;
}
void OAIUser::setLanguagePairs(const QList<OAILanguagePair> &language_pairs) {
    m_language_pairs = language_pairs;
    m_language_pairs_isSet = true;
}

bool OAIUser::is_language_pairs_Set() const{
    return m_language_pairs_isSet;
}

bool OAIUser::is_language_pairs_Valid() const{
    return m_language_pairs_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint64 OAIUser::getLastSeenOnlineAt() const {
    return m_last_seen_online_at;
}
void OAIUser::setLastSeenOnlineAt(const qint64 &last_seen_online_at) {
    m_last_seen_online_at = last_seen_online_at;
    m_last_seen_online_at_isSet = true;
}

bool OAIUser::is_last_seen_online_at_Set() const{
    return m_last_seen_online_at_isSet;
}

bool OAIUser::is_last_seen_online_at_Valid() const{
    return m_last_seen_online_at_isValid;
}

OAIUserLinks OAIUser::getLinks() const {
    return m_links;
}
void OAIUser::setLinks(const OAIUserLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIUser::is_links_Set() const{
    return m_links_isSet;
}

bool OAIUser::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIUser::getLocale() const {
    return m_locale;
}
void OAIUser::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUser::is_locale_Valid() const{
    return m_locale_isValid;
}

OAIAddress OAIUser::getMailing() const {
    return m_mailing;
}
void OAIUser::setMailing(const OAIAddress &mailing) {
    m_mailing = mailing;
    m_mailing_isSet = true;
}

bool OAIUser::is_mailing_Set() const{
    return m_mailing_isSet;
}

bool OAIUser::is_mailing_Valid() const{
    return m_mailing_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getNativeLanguage() const {
    return m_native_language;
}
void OAIUser::setNativeLanguage(const QString &native_language) {
    m_native_language = native_language;
    m_native_language_isSet = true;
}

bool OAIUser::is_native_language_Set() const{
    return m_native_language_isSet;
}

bool OAIUser::is_native_language_Valid() const{
    return m_native_language_isValid;
}

float OAIUser::getNps() const {
    return m_nps;
}
void OAIUser::setNps(const float &nps) {
    m_nps = nps;
    m_nps_isSet = true;
}

bool OAIUser::is_nps_Set() const{
    return m_nps_isSet;
}

bool OAIUser::is_nps_Valid() const{
    return m_nps_isValid;
}

QString OAIUser::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUser::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUser::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUser::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIUser::getProfilePicturePath() const {
    return m_profile_picture_path;
}
void OAIUser::setProfilePicturePath(const QString &profile_picture_path) {
    m_profile_picture_path = profile_picture_path;
    m_profile_picture_path_isSet = true;
}

bool OAIUser::is_profile_picture_path_Set() const{
    return m_profile_picture_path_isSet;
}

bool OAIUser::is_profile_picture_path_Valid() const{
    return m_profile_picture_path_isValid;
}

OAISocialMedia OAIUser::getSocialMedia() const {
    return m_social_media;
}
void OAIUser::setSocialMedia(const OAISocialMedia &social_media) {
    m_social_media = social_media;
    m_social_media_isSet = true;
}

bool OAIUser::is_social_media_Set() const{
    return m_social_media_isSet;
}

bool OAIUser::is_social_media_Valid() const{
    return m_social_media_isValid;
}

QString OAIUser::getState() const {
    return m_state;
}
void OAIUser::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUser::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUser::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUser::getStatus() const {
    return m_status;
}
void OAIUser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUser::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUser::getStreet() const {
    return m_street;
}
void OAIUser::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIUser::is_street_Set() const{
    return m_street_isSet;
}

bool OAIUser::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIUser::getTimezone() const {
    return m_timezone;
}
void OAIUser::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUser::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUser::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIUser::getTmsUserName() const {
    return m_tms_user_name;
}
void OAIUser::setTmsUserName(const QString &tms_user_name) {
    m_tms_user_name = tms_user_name;
    m_tms_user_name_isSet = true;
}

bool OAIUser::is_tms_user_name_Set() const{
    return m_tms_user_name_isSet;
}

bool OAIUser::is_tms_user_name_Valid() const{
    return m_tms_user_name_isValid;
}

QList<OAIUserGroup> OAIUser::getUserGroups() const {
    return m_user_groups;
}
void OAIUser::setUserGroups(const QList<OAIUserGroup> &user_groups) {
    m_user_groups = user_groups;
    m_user_groups_isSet = true;
}

bool OAIUser::is_user_groups_Set() const{
    return m_user_groups_isSet;
}

bool OAIUser::is_user_groups_Valid() const{
    return m_user_groups_isValid;
}

OAIUser_vendor OAIUser::getVendor() const {
    return m_vendor;
}
void OAIUser::setVendor(const OAIUser_vendor &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIUser::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIUser::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QString OAIUser::getZipCode() const {
    return m_zip_code;
}
void OAIUser::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIUser::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIUser::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_work_manual_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pwd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_developer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proofreader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_prospect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sales_person_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_pairs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_online_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tms_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
