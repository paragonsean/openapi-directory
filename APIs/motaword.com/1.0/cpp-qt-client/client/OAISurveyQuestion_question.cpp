/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISurveyQuestion_question.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISurveyQuestion_question::OAISurveyQuestion_question(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISurveyQuestion_question::OAISurveyQuestion_question() {
    this->initializeModel();
}

OAISurveyQuestion_question::~OAISurveyQuestion_question() {}

void OAISurveyQuestion_question::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISurveyQuestion_question::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISurveyQuestion_question::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAISurveyQuestion_question::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISurveyQuestion_question::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

bool OAISurveyQuestion_question::isEnabled() const {
    return m_enabled;
}
void OAISurveyQuestion_question::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISurveyQuestion_question::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISurveyQuestion_question::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISurveyQuestion_question::getFormat() const {
    return m_format;
}
void OAISurveyQuestion_question::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISurveyQuestion_question::is_format_Set() const{
    return m_format_isSet;
}

bool OAISurveyQuestion_question::is_format_Valid() const{
    return m_format_isValid;
}

qint64 OAISurveyQuestion_question::getId() const {
    return m_id;
}
void OAISurveyQuestion_question::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISurveyQuestion_question::is_id_Set() const{
    return m_id_isSet;
}

bool OAISurveyQuestion_question::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISurveyQuestion_question::getQuestion() const {
    return m_question;
}
void OAISurveyQuestion_question::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAISurveyQuestion_question::is_question_Set() const{
    return m_question_isSet;
}

bool OAISurveyQuestion_question::is_question_Valid() const{
    return m_question_isValid;
}

QString OAISurveyQuestion_question::getText() const {
    return m_text;
}
void OAISurveyQuestion_question::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISurveyQuestion_question::is_text_Set() const{
    return m_text_isSet;
}

bool OAISurveyQuestion_question::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISurveyQuestion_question::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISurveyQuestion_question::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
