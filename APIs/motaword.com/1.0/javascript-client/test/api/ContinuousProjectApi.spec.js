/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MotaWordApi);
  }
}(this, function(expect, MotaWordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MotaWordApi.ContinuousProjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContinuousProjectApi', function() {
    describe('addDocument', function() {
      it('should call addDocument successfully', function(done) {
        //uncomment below and update the code to test addDocument
        //instance.addDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectAnalytics', function() {
      it('should call collectAnalytics successfully', function(done) {
        //uncomment below and update the code to test collectAnalytics
        //instance.collectAnalytics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('complete', function() {
      it('should call complete successfully', function(done) {
        //uncomment below and update the code to test complete
        //instance.complete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeContinuousDocument', function() {
      it('should call completeContinuousDocument successfully', function(done) {
        //uncomment below and update the code to test completeContinuousDocument
        //instance.completeContinuousDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeLanguage', function() {
      it('should call completeLanguage successfully', function(done) {
        //uncomment below and update the code to test completeLanguage
        //instance.completeLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createActiveWidget', function() {
      it('should call createActiveWidget successfully', function(done) {
        //uncomment below and update the code to test createActiveWidget
        //instance.createActiveWidget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContinuousProject', function() {
      it('should call createContinuousProject successfully', function(done) {
        //uncomment below and update the code to test createContinuousProject
        //instance.createContinuousProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubscription', function() {
      it('should call createSubscription successfully', function(done) {
        //uncomment below and update the code to test createSubscription
        //instance.createSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteActiveWidget', function() {
      it('should call deleteActiveWidget successfully', function(done) {
        //uncomment below and update the code to test deleteActiveWidget
        //instance.deleteActiveWidget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContinuousProject', function() {
      it('should call deleteContinuousProject successfully', function(done) {
        //uncomment below and update the code to test deleteContinuousProject
        //instance.deleteContinuousProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubscription', function() {
      it('should call deleteSubscription successfully', function(done) {
        //uncomment below and update the code to test deleteSubscription
        //instance.deleteSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActiveWidget', function() {
      it('should call getActiveWidget successfully', function(done) {
        //uncomment below and update the code to test getActiveWidget
        //instance.getActiveWidget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getActiveWidgets', function() {
      it('should call getActiveWidgets successfully', function(done) {
        //uncomment below and update the code to test getActiveWidgets
        //instance.getActiveWidgets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnalyticsToken', function() {
      it('should call getAnalyticsToken successfully', function(done) {
        //uncomment below and update the code to test getAnalyticsToken
        //instance.getAnalyticsToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProject', function() {
      it('should call getContinuousProject successfully', function(done) {
        //uncomment below and update the code to test getContinuousProject
        //instance.getContinuousProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectDocument', function() {
      it('should call getContinuousProjectDocument successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectDocument
        //instance.getContinuousProjectDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectDocumentProgress', function() {
      it('should call getContinuousProjectDocumentProgress successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectDocumentProgress
        //instance.getContinuousProjectDocumentProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectDocuments', function() {
      it('should call getContinuousProjectDocuments successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectDocuments
        //instance.getContinuousProjectDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectInvoices', function() {
      it('should call getContinuousProjectInvoices successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectInvoices
        //instance.getContinuousProjectInvoices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectProgress', function() {
      it('should call getContinuousProjectProgress successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectProgress
        //instance.getContinuousProjectProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjects', function() {
      it('should call getContinuousProjects successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjects
        //instance.getContinuousProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuoteForDocument', function() {
      it('should call getQuoteForDocument successfully', function(done) {
        //uncomment below and update the code to test getQuoteForDocument
        //instance.getQuoteForDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuoteForDocuments', function() {
      it('should call getQuoteForDocuments successfully', function(done) {
        //uncomment below and update the code to test getQuoteForDocuments
        //instance.getQuoteForDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuoteForLanguage', function() {
      it('should call getQuoteForLanguage successfully', function(done) {
        //uncomment below and update the code to test getQuoteForLanguage
        //instance.getQuoteForLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuoteForLanguages', function() {
      it('should call getQuoteForLanguages successfully', function(done) {
        //uncomment below and update the code to test getQuoteForLanguages
        //instance.getQuoteForLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubscription', function() {
      it('should call getSubscription successfully', function(done) {
        //uncomment below and update the code to test getSubscription
        //instance.getSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postContinuousProjectDocumentProgress', function() {
      it('should call postContinuousProjectDocumentProgress successfully', function(done) {
        //uncomment below and update the code to test postContinuousProjectDocumentProgress
        //instance.postContinuousProjectDocumentProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetActiveWidgetToken', function() {
      it('should call resetActiveWidgetToken successfully', function(done) {
        //uncomment below and update the code to test resetActiveWidgetToken
        //instance.resetActiveWidgetToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('translate', function() {
      it('should call translate successfully', function(done) {
        //uncomment below and update the code to test translate
        //instance.translate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateActiveWidget', function() {
      it('should call updateActiveWidget successfully', function(done) {
        //uncomment below and update the code to test updateActiveWidget
        //instance.updateActiveWidget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContinuousProject', function() {
      it('should call updateContinuousProject successfully', function(done) {
        //uncomment below and update the code to test updateContinuousProject
        //instance.updateContinuousProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDocument', function() {
      it('should call updateDocument successfully', function(done) {
        //uncomment below and update the code to test updateDocument
        //instance.updateDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscription', function() {
      it('should call updateSubscription successfully', function(done) {
        //uncomment below and update the code to test updateSubscription
        //instance.updateSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscriptionPaymentMethod', function() {
      it('should call updateSubscriptionPaymentMethod successfully', function(done) {
        //uncomment below and update the code to test updateSubscriptionPaymentMethod
        //instance.updateSubscriptionPaymentMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
