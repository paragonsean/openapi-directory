/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MotaWordApi);
  }
}(this, function(expect, MotaWordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MotaWordApi.DocumentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DocumentApi', function() {
    describe('getAllDocumentSubjects', function() {
      it('should call getAllDocumentSubjects successfully', function(done) {
        //uncomment below and update the code to test getAllDocumentSubjects
        //instance.getAllDocumentSubjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocument', function() {
      it('should call getDocument successfully', function(done) {
        //uncomment below and update the code to test getDocument
        //instance.getDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocumentProgress', function() {
      it('should call getDocumentProgress successfully', function(done) {
        //uncomment below and update the code to test getDocumentProgress
        //instance.getDocumentProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocuments', function() {
      it('should call getDocuments successfully', function(done) {
        //uncomment below and update the code to test getDocuments
        //instance.getDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSimilarDocuments', function() {
      it('should call getSimilarDocuments successfully', function(done) {
        //uncomment below and update the code to test getSimilarDocuments
        //instance.getSimilarDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserDocuments', function() {
      it('should call getUserDocuments successfully', function(done) {
        //uncomment below and update the code to test getUserDocuments
        //instance.getUserDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regeneratePreview', function() {
      it('should call regeneratePreview successfully', function(done) {
        //uncomment below and update the code to test regeneratePreview
        //instance.regeneratePreview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('useAsDraft', function() {
      it('should call useAsDraft successfully', function(done) {
        //uncomment below and update the code to test useAsDraft
        //instance.useAsDraft(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('useAsRegular', function() {
      it('should call useAsRegular successfully', function(done) {
        //uncomment below and update the code to test useAsRegular
        //instance.useAsRegular(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
