/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MotaWordApi);
  }
}(this, function(expect, MotaWordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MotaWordApi.StringsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StringsApi', function() {
    describe('clearTranslationCache', function() {
      it('should call clearTranslationCache successfully', function(done) {
        //uncomment below and update the code to test clearTranslationCache
        //instance.clearTranslationCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectFileStrings', function() {
      it('should call getContinuousProjectFileStrings successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectFileStrings
        //instance.getContinuousProjectFileStrings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinuousProjectStrings', function() {
      it('should call getContinuousProjectStrings successfully', function(done) {
        //uncomment below and update the code to test getContinuousProjectStrings
        //instance.getContinuousProjectStrings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocumentTranslations', function() {
      it('should call getDocumentTranslations successfully', function(done) {
        //uncomment below and update the code to test getDocumentTranslations
        //instance.getDocumentTranslations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocumentTranslationsForLanguage', function() {
      it('should call getDocumentTranslationsForLanguage successfully', function(done) {
        //uncomment below and update the code to test getDocumentTranslationsForLanguage
        //instance.getDocumentTranslationsForLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectStrings', function() {
      it('should call getProjectStrings successfully', function(done) {
        //uncomment below and update the code to test getProjectStrings
        //instance.getProjectStrings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectStringsForLanguage', function() {
      it('should call getProjectStringsForLanguage successfully', function(done) {
        //uncomment below and update the code to test getProjectStringsForLanguage
        //instance.getProjectStringsForLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectTranslations', function() {
      it('should call getProjectTranslations successfully', function(done) {
        //uncomment below and update the code to test getProjectTranslations
        //instance.getProjectTranslations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectTranslationsForLanguage', function() {
      it('should call getProjectTranslationsForLanguage successfully', function(done) {
        //uncomment below and update the code to test getProjectTranslationsForLanguage
        //instance.getProjectTranslationsForLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStrings', function() {
      it('should call getStrings successfully', function(done) {
        //uncomment below and update the code to test getStrings
        //instance.getStrings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTranslationCache', function() {
      it('should call getTranslationCache successfully', function(done) {
        //uncomment below and update the code to test getTranslationCache
        //instance.getTranslationCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageProjectTranslationMemory', function() {
      it('should call packageProjectTranslationMemory successfully', function(done) {
        //uncomment below and update the code to test packageProjectTranslationMemory
        //instance.packageProjectTranslationMemory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageProjectTranslationMemoryForLanguage', function() {
      it('should call packageProjectTranslationMemoryForLanguage successfully', function(done) {
        //uncomment below and update the code to test packageProjectTranslationMemoryForLanguage
        //instance.packageProjectTranslationMemoryForLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageProjectTranslationMemoryForLanguageStatus', function() {
      it('should call packageProjectTranslationMemoryForLanguageStatus successfully', function(done) {
        //uncomment below and update the code to test packageProjectTranslationMemoryForLanguageStatus
        //instance.packageProjectTranslationMemoryForLanguageStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageProjectTranslationMemoryStatus', function() {
      it('should call packageProjectTranslationMemoryStatus successfully', function(done) {
        //uncomment below and update the code to test packageProjectTranslationMemoryStatus
        //instance.packageProjectTranslationMemoryStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageUserTranslationMemory', function() {
      it('should call packageUserTranslationMemory successfully', function(done) {
        //uncomment below and update the code to test packageUserTranslationMemory
        //instance.packageUserTranslationMemory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageUserTranslationMemoryForLanguageStatus', function() {
      it('should call packageUserTranslationMemoryForLanguageStatus successfully', function(done) {
        //uncomment below and update the code to test packageUserTranslationMemoryForLanguageStatus
        //instance.packageUserTranslationMemoryForLanguageStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postContinuousProjectFileStrings', function() {
      it('should call postContinuousProjectFileStrings successfully', function(done) {
        //uncomment below and update the code to test postContinuousProjectFileStrings
        //instance.postContinuousProjectFileStrings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recacheTranslations', function() {
      it('should call recacheTranslations successfully', function(done) {
        //uncomment below and update the code to test recacheTranslations
        //instance.recacheTranslations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTranslationMemoryUnit', function() {
      it('should call updateTranslationMemoryUnit successfully', function(done) {
        //uncomment below and update the code to test updateTranslationMemoryUnit
        //instance.updateTranslationMemoryUnit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
