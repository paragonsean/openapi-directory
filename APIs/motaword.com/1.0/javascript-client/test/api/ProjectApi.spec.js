/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MotaWordApi);
  }
}(this, function(expect, MotaWordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MotaWordApi.ProjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectApi', function() {
    describe('assignCM', function() {
      it('should call assignCM successfully', function(done) {
        //uncomment below and update the code to test assignCM
        //instance.assignCM(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callPackage', function() {
      it('should call callPackage successfully', function(done) {
        //uncomment below and update the code to test callPackage
        //instance.callPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelProject', function() {
      it('should call cancelProject successfully', function(done) {
        //uncomment below and update the code to test cancelProject
        //instance.cancelProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deliverProject', function() {
      it('should call deliverProject successfully', function(done) {
        //uncomment below and update the code to test deliverProject
        //instance.deliverProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('download', function() {
      it('should call download successfully', function(done) {
        //uncomment below and update the code to test download
        //instance.download(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadHtmlInvoice', function() {
      it('should call downloadHtmlInvoice successfully', function(done) {
        //uncomment below and update the code to test downloadHtmlInvoice
        //instance.downloadHtmlInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadLanguage', function() {
      it('should call downloadLanguage successfully', function(done) {
        //uncomment below and update the code to test downloadLanguage
        //instance.downloadLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadPdfInvoice', function() {
      it('should call downloadPdfInvoice successfully', function(done) {
        //uncomment below and update the code to test downloadPdfInvoice
        //instance.downloadPdfInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInvoice', function() {
      it('should call getInvoice successfully', function(done) {
        //uncomment below and update the code to test getInvoice
        //instance.getInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProgress', function() {
      it('should call getProgress successfully', function(done) {
        //uncomment below and update the code to test getProgress
        //instance.getProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectVendors', function() {
      it('should call getProjectVendors successfully', function(done) {
        //uncomment below and update the code to test getProjectVendors
        //instance.getProjectVendors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjects', function() {
      it('should call getProjects successfully', function(done) {
        //uncomment below and update the code to test getProjects
        //instance.getProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuoteIdFromInternalId', function() {
      it('should call getQuoteIdFromInternalId successfully', function(done) {
        //uncomment below and update the code to test getQuoteIdFromInternalId
        //instance.getQuoteIdFromInternalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVendorProjects', function() {
      it('should call getVendorProjects successfully', function(done) {
        //uncomment below and update the code to test getVendorProjects
        //instance.getVendorProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVendorProjectsByUserId', function() {
      it('should call getVendorProjectsByUserId successfully', function(done) {
        //uncomment below and update the code to test getVendorProjectsByUserId
        //instance.getVendorProjectsByUserId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('launchProject', function() {
      it('should call launchProject successfully', function(done) {
        //uncomment below and update the code to test launchProject
        //instance.launchProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('packageLanguage', function() {
      it('should call packageLanguage successfully', function(done) {
        //uncomment below and update the code to test packageLanguage
        //instance.packageLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recreateProject', function() {
      it('should call recreateProject successfully', function(done) {
        //uncomment below and update the code to test recreateProject
        //instance.recreateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendQuoteEmail', function() {
      it('should call sendQuoteEmail successfully', function(done) {
        //uncomment below and update the code to test sendQuoteEmail
        //instance.sendQuoteEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitProjectReports', function() {
      it('should call submitProjectReports successfully', function(done) {
        //uncomment below and update the code to test submitProjectReports
        //instance.submitProjectReports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trackPackage', function() {
      it('should call trackPackage successfully', function(done) {
        //uncomment below and update the code to test trackPackage
        //instance.trackPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerCallback', function() {
      it('should call triggerCallback successfully', function(done) {
        //uncomment below and update the code to test triggerCallback
        //instance.triggerCallback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
