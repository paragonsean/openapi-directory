/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CorporateAccount from '../model/CorporateAccount';
import PermissionList from '../model/PermissionList';
import User from '../model/User';
import UserGroup from '../model/UserGroup';
import UserGroupList from '../model/UserGroupList';
import UserList from '../model/UserList';
import UserUpdateContent from '../model/UserUpdateContent';

/**
* Corporate service.
* @module api/CorporateApi
* @version 1.0
*/
export default class CorporateApi {

    /**
    * Constructs a new CorporateApi. 
    * @alias module:api/CorporateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAvailableCorporatePermissions operation.
     * @callback module:api/CorporateApi~getAvailableCorporatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View available permissions
     * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
     * @param {module:api/CorporateApi~getAvailableCorporatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionList}
     */
    getAvailableCorporatePermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/corporate/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableCorporatePermissionsById operation.
     * @callback module:api/CorporateApi~getAvailableCorporatePermissionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * @param {Number} corporateId Corporate ID
     * @param {module:api/CorporateApi~getAvailableCorporatePermissionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionList}
     */
    getAvailableCorporatePermissionsById(corporateId, callback) {
      let postBody = null;
      // verify the required parameter 'corporateId' is set
      if (corporateId === undefined || corporateId === null) {
        throw new Error("Missing the required parameter 'corporateId' when calling getAvailableCorporatePermissionsById");
      }

      let pathParams = {
        'corporateId': corporateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/corporates/{corporateId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporate operation.
     * @callback module:api/CorporateApi~getCorporateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CorporateAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your corporate account
     * View the details of the corporate account that your user account belongs to.
     * @param {module:api/CorporateApi~getCorporateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CorporateAccount}
     */
    getCorporate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CorporateAccount;
      return this.apiClient.callApi(
        '/corporate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporateById operation.
     * @callback module:api/CorporateApi~getCorporateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CorporateAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of this corporate account
     * Get details of this corporate account
     * @param {Number} corporateId Corporate ID
     * @param {module:api/CorporateApi~getCorporateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CorporateAccount}
     */
    getCorporateById(corporateId, callback) {
      let postBody = null;
      // verify the required parameter 'corporateId' is set
      if (corporateId === undefined || corporateId === null) {
        throw new Error("Missing the required parameter 'corporateId' when calling getCorporateById");
      }

      let pathParams = {
        'corporateId': corporateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CorporateAccount;
      return this.apiClient.callApi(
        '/corporates/{corporateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporateUserGroups operation.
     * @callback module:api/CorporateApi~getCorporateUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View user groups
     * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
     * @param {module:api/CorporateApi~getCorporateUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupList}
     */
    getCorporateUserGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupList;
      return this.apiClient.callApi(
        '/corporate/user-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporateUserGroupsById operation.
     * @callback module:api/CorporateApi~getCorporateUserGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of user groups for this corporate account
     * Get a list of user groups for this corporate account
     * @param {Number} corporateId Corporate ID
     * @param {module:api/CorporateApi~getCorporateUserGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupList}
     */
    getCorporateUserGroupsById(corporateId, callback) {
      let postBody = null;
      // verify the required parameter 'corporateId' is set
      if (corporateId === undefined || corporateId === null) {
        throw new Error("Missing the required parameter 'corporateId' when calling getCorporateUserGroupsById");
      }

      let pathParams = {
        'corporateId': corporateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupList;
      return this.apiClient.callApi(
        '/corporates/{corporateId}/user-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporateUsers operation.
     * @callback module:api/CorporateApi~getCorporateUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View users
     * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
     * @param {module:api/CorporateApi~getCorporateUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    getCorporateUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/corporate/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporateUsersById operation.
     * @callback module:api/CorporateApi~getCorporateUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of users for this corporate account
     * Get a list of users for this corporate account
     * @param {Number} corporateId Corporate ID
     * @param {module:api/CorporateApi~getCorporateUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    getCorporateUsersById(corporateId, callback) {
      let postBody = null;
      // verify the required parameter 'corporateId' is set
      if (corporateId === undefined || corporateId === null) {
        throw new Error("Missing the required parameter 'corporateId' when calling getCorporateUsersById");
      }

      let pathParams = {
        'corporateId': corporateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/corporates/{corporateId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporatesList operation.
     * @callback module:api/CorporateApi~getCorporatesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CorporateAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of corporate accounts
     * Get a list of corporate accounts
     * @param {module:api/CorporateApi~getCorporatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CorporateAccount>}
     */
    getCorporatesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CorporateAccount];
      return this.apiClient.callApi(
        '/corporates/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCorporateUser operation.
     * @callback module:api/CorporateApi~saveCorporateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a user
     * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
     * @param {module:model/UserUpdateContent} userUpdateContent 
     * @param {module:api/CorporateApi~saveCorporateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    saveCorporateUser(userUpdateContent, callback) {
      let postBody = userUpdateContent;
      // verify the required parameter 'userUpdateContent' is set
      if (userUpdateContent === undefined || userUpdateContent === null) {
        throw new Error("Missing the required parameter 'userUpdateContent' when calling saveCorporateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/corporate/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCorporateUserGroup operation.
     * @callback module:api/CorporateApi~saveCorporateUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a corporate user group
     * Create or update a corporate user group
     * @param {module:model/UserGroup} userGroup 
     * @param {module:api/CorporateApi~saveCorporateUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    saveCorporateUserGroup(userGroup, callback) {
      let postBody = userGroup;
      // verify the required parameter 'userGroup' is set
      if (userGroup === undefined || userGroup === null) {
        throw new Error("Missing the required parameter 'userGroup' when calling saveCorporateUserGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserGroup;
      return this.apiClient.callApi(
        '/corporate/user-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCorporateUserGroupById operation.
     * @callback module:api/CorporateApi~saveCorporateUserGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a corporate user group for this corporate account
     * Create or update a corporate user group for this corporate account
     * @param {Number} corporateId Corporate ID
     * @param {module:model/UserGroup} userGroup 
     * @param {module:api/CorporateApi~saveCorporateUserGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroup}
     */
    saveCorporateUserGroupById(corporateId, userGroup, callback) {
      let postBody = userGroup;
      // verify the required parameter 'corporateId' is set
      if (corporateId === undefined || corporateId === null) {
        throw new Error("Missing the required parameter 'corporateId' when calling saveCorporateUserGroupById");
      }
      // verify the required parameter 'userGroup' is set
      if (userGroup === undefined || userGroup === null) {
        throw new Error("Missing the required parameter 'userGroup' when calling saveCorporateUserGroupById");
      }

      let pathParams = {
        'corporateId': corporateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserGroup;
      return this.apiClient.callApi(
        '/corporates/{corporateId}/user-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
