/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveWidget from '../model/ActiveWidget';
import ActiveWidgetList from '../model/ActiveWidgetList';
import AddOrUpdateDocumentRequest from '../model/AddOrUpdateDocumentRequest';
import AnalyticsCollection from '../model/AnalyticsCollection';
import AnalyticsToken from '../model/AnalyticsToken';
import ContinuousProject from '../model/ContinuousProject';
import ContinuousProjectDocument from '../model/ContinuousProjectDocument';
import ContinuousProjectDocumentList from '../model/ContinuousProjectDocumentList';
import ContinuousProjectDocumentProgressBody from '../model/ContinuousProjectDocumentProgressBody';
import ContinuousProjectInvoices from '../model/ContinuousProjectInvoices';
import ContinuousProjectProgress from '../model/ContinuousProjectProgress';
import ContinuousProjectUpdateContent from '../model/ContinuousProjectUpdateContent';
import ContinuousProjectsList from '../model/ContinuousProjectsList';
import Error from '../model/Error';
import GetQuotesForDocumentsBody from '../model/GetQuotesForDocumentsBody';
import GetQuotesForLanguagesBody from '../model/GetQuotesForLanguagesBody';
import InstantTranslationRequest from '../model/InstantTranslationRequest';
import InstantTranslationResult from '../model/InstantTranslationResult';
import OperationStatus from '../model/OperationStatus';
import Progress from '../model/Progress';
import ProjectList from '../model/ProjectList';
import Subscription from '../model/Subscription';

/**
* ContinuousProject service.
* @module api/ContinuousProjectApi
* @version 1.0
*/
export default class ContinuousProjectApi {

    /**
    * Constructs a new ContinuousProjectApi. 
    * @alias module:api/ContinuousProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDocument operation.
     * @callback module:api/ContinuousProjectApi~addDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new document to your continuous project
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param {Number} projectId Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrUpdateDocumentRequest} [addOrUpdateDocumentRequest] 
     * @param {module:api/ContinuousProjectApi~addDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectDocument}
     */
    addDocument(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrUpdateDocumentRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addDocument");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectDocument;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectAnalytics operation.
     * @callback module:api/ContinuousProjectApi~collectAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save/collect analytics data from Active widget
     * Save/collect analytics data from Active widget
     * @param {Number} id Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/AnalyticsCollection} [analyticsCollection] 
     * @param {module:api/ContinuousProjectApi~collectAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    collectAnalytics(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['analyticsCollection'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling collectAnalytics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/collect-analytics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the complete operation.
     * @callback module:api/ContinuousProjectApi~completeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete continuous project
     * Complete continuous project
     * @param {Number} id Continuous project ID
     * @param {module:api/ContinuousProjectApi~completeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    complete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling complete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeContinuousDocument operation.
     * @callback module:api/ContinuousProjectApi~completeContinuousDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a continuous project document
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param {Number} id Continuous project ID
     * @param {Number} documentId Document ID
     * @param {module:api/ContinuousProjectApi~completeContinuousDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    completeContinuousDocument(id, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeContinuousDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling completeContinuousDocument");
      }

      let pathParams = {
        'id': id,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/documents/{documentId}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeLanguage operation.
     * @callback module:api/ContinuousProjectApi~completeLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete continuous project language
     * Complete continuous project language
     * @param {Number} id Continuous project ID
     * @param {String} targetLanguage Target language that you want to complete
     * @param {module:api/ContinuousProjectApi~completeLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    completeLanguage(id, targetLanguage, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeLanguage");
      }
      // verify the required parameter 'targetLanguage' is set
      if (targetLanguage === undefined || targetLanguage === null) {
        throw new Error("Missing the required parameter 'targetLanguage' when calling completeLanguage");
      }

      let pathParams = {
        'id': id,
        'targetLanguage': targetLanguage
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/languages/{targetLanguage}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createActiveWidget operation.
     * @callback module:api/ContinuousProjectApi~createActiveWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveWidget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Active widget
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     * @param {Number} projectId Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ActiveWidget} [activeWidget] 
     * @param {module:api/ContinuousProjectApi~createActiveWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveWidget}
     */
    createActiveWidget(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['activeWidget'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createActiveWidget");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActiveWidget;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContinuousProject operation.
     * @callback module:api/ContinuousProjectApi~createContinuousProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a continuous project
     * Create a new continuous project for your software, website, CI/CD translation needs.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContinuousProject} [continuousProject] 
     * @param {module:api/ContinuousProjectApi~createContinuousProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProject}
     */
    createContinuousProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['continuousProject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContinuousProject;
      return this.apiClient.callApi(
        '/continuous_projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/ContinuousProjectApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create subscription for continuous project
     * Create subscription for continuous project
     * @param {Number} id Continuous project ID
     * @param {module:model/Subscription} subscription 
     * @param {module:api/ContinuousProjectApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    createSubscription(id, subscription, callback) {
      let postBody = subscription;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createSubscription");
      }
      // verify the required parameter 'subscription' is set
      if (subscription === undefined || subscription === null) {
        throw new Error("Missing the required parameter 'subscription' when calling createSubscription");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActiveWidget operation.
     * @callback module:api/ContinuousProjectApi~deleteActiveWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single widget for this Active project
     * Delete a single widget for this Active project
     * @param {Number} projectId Continuous Project ID
     * @param {Number} widgetId Active widget ID belonging to this Continuous Project
     * @param {module:api/ContinuousProjectApi~deleteActiveWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteActiveWidget(projectId, widgetId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteActiveWidget");
      }
      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling deleteActiveWidget");
      }

      let pathParams = {
        'projectId': projectId,
        'widgetId': widgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets/{widgetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContinuousProject operation.
     * @callback module:api/ContinuousProjectApi~deleteContinuousProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a continuous project
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     * @param {Number} id Continuous project ID
     * @param {module:api/ContinuousProjectApi~deleteContinuousProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteContinuousProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContinuousProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscription operation.
     * @callback module:api/ContinuousProjectApi~deleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete subscription for continuous project
     * Delete subscription for continuous project
     * @param {Number} id Continuous project ID
     * @param {module:api/ContinuousProjectApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    deleteSubscription(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSubscription");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveWidget operation.
     * @callback module:api/ContinuousProjectApi~getActiveWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveWidget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View an Active widget
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     * @param {Number} projectId Continuous Project ID
     * @param {Number} widgetId Active widget ID belonging to this Continuous Project
     * @param {module:api/ContinuousProjectApi~getActiveWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveWidget}
     */
    getActiveWidget(projectId, widgetId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActiveWidget");
      }
      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling getActiveWidget");
      }

      let pathParams = {
        'projectId': projectId,
        'widgetId': widgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveWidget;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets/{widgetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveWidgets operation.
     * @callback module:api/ContinuousProjectApi~getActiveWidgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveWidgetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View Active widgets
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     * @param {Number} projectId Continuous Project ID
     * @param {module:api/ContinuousProjectApi~getActiveWidgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveWidgetList}
     */
    getActiveWidgets(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActiveWidgets");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveWidgetList;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalyticsToken operation.
     * @callback module:api/ContinuousProjectApi~getAnalyticsTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get JWT token to be used in analytics dashboards
     * Get JWT token to be used in analytics dashboards
     * @param {Number} id Continuous project ID
     * @param {module:api/ContinuousProjectApi~getAnalyticsTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsToken}
     */
    getAnalyticsToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnalyticsToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsToken;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/analytics-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProject operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a continuous project
     * View the details of a continuous project.
     * @param {Number} id Continuous Project ID
     * @param {module:api/ContinuousProjectApi~getContinuousProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProject}
     */
    getContinuousProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContinuousProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProject;
      return this.apiClient.callApi(
        '/continuous_projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectDocument operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a continuous document
     * View the details of a source document in continuous translation project.
     * @param {Number} projectId Continuous project ID
     * @param {Number} documentId Document ID/Name
     * @param {module:api/ContinuousProjectApi~getContinuousProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectDocument}
     */
    getContinuousProjectDocument(projectId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getContinuousProjectDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectDocument;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectDocumentProgress operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectDocumentProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Progress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Monitor progress of a continuous document
     * Monitor the translation progress of a document in a continuous project in real-time.
     * @param {Number} projectId Continuous project ID
     * @param {Number} documentId Document ID/Name
     * @param {Object} opts Optional parameters
     * @param {String} [filterByLanguage] 
     * @param {module:api/ContinuousProjectApi~getContinuousProjectDocumentProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Progress}
     */
    getContinuousProjectDocumentProgress(projectId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectDocumentProgress");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getContinuousProjectDocumentProgress");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
        'filterByLanguage': opts['filterByLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Progress;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/{documentId}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectDocuments operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View continuous documents
     * View the documents under this continuous project
     * @param {Number} projectId Continuous Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [filterByLanguage] 
     * @param {module:api/ContinuousProjectApi~getContinuousProjectDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectDocumentList}
     */
    getContinuousProjectDocuments(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectDocuments");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'filterByLanguage': opts['filterByLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectDocumentList;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectInvoices operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectInvoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invoices of a continuous project
     * Get real-time access to a continuous project's invoices.
     * @param {Number} projectId Project ID
     * @param {module:api/ContinuousProjectApi~getContinuousProjectInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectInvoices}
     */
    getContinuousProjectInvoices(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectInvoices");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectInvoices;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectProgress operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Monitor progress and status of a continous project
     * Monitor the translation progress of an ongoing continuous project in real-time.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [filterByLanguage] 
     * @param {module:api/ContinuousProjectApi~getContinuousProjectProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectProgress}
     */
    getContinuousProjectProgress(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectProgress");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'filterByLanguage': opts['filterByLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectProgress;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjects operation.
     * @callback module:api/ContinuousProjectApi~getContinuousProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View continuous projects
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'active')] Type of continuous project.
     * @param {module:api/ContinuousProjectApi~getContinuousProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectsList}
     */
    getContinuousProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectsList;
      return this.apiClient.callApi(
        '/continuous_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteForDocument operation.
     * @callback module:api/ContinuousProjectApi~getQuoteForDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a quote for a continuous project document
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param {Number} id Continuous project ID
     * @param {Number} documentId Document ID
     * @param {module:api/ContinuousProjectApi~getQuoteForDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getQuoteForDocument(id, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuoteForDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getQuoteForDocument");
      }

      let pathParams = {
        'id': id,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/documents/{documentId}/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteForDocuments operation.
     * @callback module:api/ContinuousProjectApi~getQuoteForDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quote for documents
     * Get a new quote for provided documents in continuous project
     * @param {Number} id Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/GetQuotesForDocumentsBody} [getQuotesForDocumentsBody] 
     * @param {module:api/ContinuousProjectApi~getQuoteForDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getQuoteForDocuments(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['getQuotesForDocumentsBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuoteForDocuments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/documents/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteForLanguage operation.
     * @callback module:api/ContinuousProjectApi~getQuoteForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quote for language
     * Get a new quote for provided target language in continuous project
     * @param {Number} id Continuous project ID
     * @param {String} targetLanguage Target language that you want to complete
     * @param {module:api/ContinuousProjectApi~getQuoteForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getQuoteForLanguage(id, targetLanguage, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuoteForLanguage");
      }
      // verify the required parameter 'targetLanguage' is set
      if (targetLanguage === undefined || targetLanguage === null) {
        throw new Error("Missing the required parameter 'targetLanguage' when calling getQuoteForLanguage");
      }

      let pathParams = {
        'id': id,
        'targetLanguage': targetLanguage
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/languages/{targetLanguage}/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteForLanguages operation.
     * @callback module:api/ContinuousProjectApi~getQuoteForLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quote for languages
     * Get a new quote for provided target languages in continuous project
     * @param {Number} id Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/GetQuotesForLanguagesBody} [getQuotesForLanguagesBody] 
     * @param {module:api/ContinuousProjectApi~getQuoteForLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getQuoteForLanguages(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['getQuotesForLanguagesBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuoteForLanguages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/languages/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscription operation.
     * @callback module:api/ContinuousProjectApi~getSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subscription for continuous project
     * Get subscription for continuous project
     * @param {Number} id Continuous project ID
     * @param {module:api/ContinuousProjectApi~getSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    getSubscription(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSubscription");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postContinuousProjectDocumentProgress operation.
     * @callback module:api/ContinuousProjectApi~postContinuousProjectDocumentProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Progress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get continuous project document progress for multiple IDs
     * Get continuous project document progress for multiple IDs
     * @param {Number} projectId Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ContinuousProjectDocumentProgressBody} [continuousProjectDocumentProgressBody] 
     * @param {module:api/ContinuousProjectApi~postContinuousProjectDocumentProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Progress}
     */
    postContinuousProjectDocumentProgress(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['continuousProjectDocumentProgressBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postContinuousProjectDocumentProgress");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Progress;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetActiveWidgetToken operation.
     * @callback module:api/ContinuousProjectApi~resetActiveWidgetTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveWidget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Active widget token
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     * @param {Number} projectId Continuous Project ID
     * @param {Number} widgetId Active widget ID belonging to this Continuous Project
     * @param {module:api/ContinuousProjectApi~resetActiveWidgetTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveWidget}
     */
    resetActiveWidgetToken(projectId, widgetId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling resetActiveWidgetToken");
      }
      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling resetActiveWidgetToken");
      }

      let pathParams = {
        'projectId': projectId,
        'widgetId': widgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveWidget;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets/{widgetId}/reset-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translate operation.
     * @callback module:api/ContinuousProjectApi~translateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstantTranslationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instantly translate your content
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     * @param {Number} id Continuous project ID
     * @param {String} targetLanguage Target language that you want to instantly translate your file into.
     * @param {Object} opts Optional parameters
     * @param {module:model/InstantTranslationRequest} [instantTranslationRequest] 
     * @param {module:api/ContinuousProjectApi~translateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstantTranslationResult}
     */
    translate(id, targetLanguage, opts, callback) {
      opts = opts || {};
      let postBody = opts['instantTranslationRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling translate");
      }
      // verify the required parameter 'targetLanguage' is set
      if (targetLanguage === undefined || targetLanguage === null) {
        throw new Error("Missing the required parameter 'targetLanguage' when calling translate");
      }

      let pathParams = {
        'id': id,
        'targetLanguage': targetLanguage
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstantTranslationResult;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/translate/{targetLanguage}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActiveWidget operation.
     * @callback module:api/ContinuousProjectApi~updateActiveWidgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveWidget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Active widget settings.
     * Update Active widget settings.
     * @param {Number} projectId Continuous Project ID
     * @param {Number} widgetId Active widget ID belonging to this Continuous Project
     * @param {Object} opts Optional parameters
     * @param {module:model/ActiveWidget} [activeWidget] 
     * @param {module:api/ContinuousProjectApi~updateActiveWidgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveWidget}
     */
    updateActiveWidget(projectId, widgetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['activeWidget'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateActiveWidget");
      }
      // verify the required parameter 'widgetId' is set
      if (widgetId === undefined || widgetId === null) {
        throw new Error("Missing the required parameter 'widgetId' when calling updateActiveWidget");
      }

      let pathParams = {
        'projectId': projectId,
        'widgetId': widgetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActiveWidget;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/widgets/{widgetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContinuousProject operation.
     * @callback module:api/ContinuousProjectApi~updateContinuousProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a continuous project
     * Update the details and settings of continuous project.
     * @param {Number} id Continuous project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ContinuousProjectUpdateContent} [continuousProjectUpdateContent] 
     * @param {module:api/ContinuousProjectApi~updateContinuousProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProject}
     */
    updateContinuousProject(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['continuousProjectUpdateContent'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateContinuousProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContinuousProject;
      return this.apiClient.callApi(
        '/continuous_projects/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocument operation.
     * @callback module:api/ContinuousProjectApi~updateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the document
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param {Number} projectId Continuous project ID
     * @param {Number} documentId Continuous project document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrUpdateDocumentRequest} [addOrUpdateDocumentRequest] 
     * @param {module:api/ContinuousProjectApi~updateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectDocument}
     */
    updateDocument(projectId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrUpdateDocumentRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectDocument;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/{documentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscription operation.
     * @callback module:api/ContinuousProjectApi~updateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update subscription for continuous project
     * Update subscription for continuous project
     * @param {Number} id Continuous project ID
     * @param {module:model/Subscription} subscription 
     * @param {module:api/ContinuousProjectApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    updateSubscription(id, subscription, callback) {
      let postBody = subscription;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSubscription");
      }
      // verify the required parameter 'subscription' is set
      if (subscription === undefined || subscription === null) {
        throw new Error("Missing the required parameter 'subscription' when calling updateSubscription");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/subscription', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriptionPaymentMethod operation.
     * @callback module:api/ContinuousProjectApi~updateSubscriptionPaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update subscription payment method for continuous project
     * Update subscription payment method for continuous project
     * @param {Number} id Continuous project ID
     * @param {module:model/Subscription} subscription 
     * @param {module:api/ContinuousProjectApi~updateSubscriptionPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    updateSubscriptionPaymentMethod(id, subscription, callback) {
      let postBody = subscription;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSubscriptionPaymentMethod");
      }
      // verify the required parameter 'subscription' is set
      if (subscription === undefined || subscription === null) {
        throw new Error("Missing the required parameter 'subscription' when calling updateSubscriptionPaymentMethod");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/continuous_projects/{id}/subscription/payment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
