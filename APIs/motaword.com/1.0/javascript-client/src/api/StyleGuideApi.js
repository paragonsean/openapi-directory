/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountStyleGuideUploadRequest from '../model/AccountStyleGuideUploadRequest';
import Error from '../model/Error';
import OperationStatus from '../model/OperationStatus';
import StyleGuide from '../model/StyleGuide';
import StyleGuideList from '../model/StyleGuideList';
import StyleGuideUploadRequest from '../model/StyleGuideUploadRequest';

/**
* StyleGuide service.
* @module api/StyleGuideApi
* @version 1.0
*/
export default class StyleGuideApi {

    /**
    * Constructs a new StyleGuideApi. 
    * @alias module:api/StyleGuideApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStyleGuide operation.
     * @callback module:api/StyleGuideApi~createStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StyleGuideList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a new style guide
     * Upload a new style guide
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/StyleGuideUploadRequest} [styleGuideUploadRequest] 
     * @param {module:api/StyleGuideApi~createStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StyleGuideList}
     */
    createStyleGuide(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['styleGuideUploadRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createStyleGuide");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StyleGuideList;
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStyleGuide operation.
     * @callback module:api/StyleGuideApi~deleteStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a style guide
     * Delete the existing style guide from the project.
     * @param {Number} projectId Project ID
     * @param {Number} styleGuideId Style Guide ID
     * @param {module:api/StyleGuideApi~deleteStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteStyleGuide(projectId, styleGuideId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteStyleGuide");
      }
      // verify the required parameter 'styleGuideId' is set
      if (styleGuideId === undefined || styleGuideId === null) {
        throw new Error("Missing the required parameter 'styleGuideId' when calling deleteStyleGuide");
      }

      let pathParams = {
        'projectId': projectId,
        'styleGuideId': styleGuideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides/{styleGuideId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadGlobalStyleGuide operation.
     * @callback module:api/StyleGuideApi~downloadGlobalStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download account style guide
     * Download your account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param {module:api/StyleGuideApi~downloadGlobalStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadGlobalStyleGuide(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/styleguide', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadStyleGuide operation.
     * @callback module:api/StyleGuideApi~downloadStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a style guide
     * Download a previously uploaded style guide file.
     * @param {Number} projectId Project ID
     * @param {Number} styleGuideId Style Guide ID
     * @param {module:api/StyleGuideApi~downloadStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadStyleGuide(projectId, styleGuideId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadStyleGuide");
      }
      // verify the required parameter 'styleGuideId' is set
      if (styleGuideId === undefined || styleGuideId === null) {
        throw new Error("Missing the required parameter 'styleGuideId' when calling downloadStyleGuide");
      }

      let pathParams = {
        'projectId': projectId,
        'styleGuideId': styleGuideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides/{styleGuideId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStyleGuide operation.
     * @callback module:api/StyleGuideApi~getStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StyleGuide} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a style guide
     * View the details of a style guide uploaded to a project
     * @param {Number} projectId Project ID
     * @param {Number} styleGuideId Style Guide ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/StyleGuideApi~getStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StyleGuide}
     */
    getStyleGuide(projectId, styleGuideId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getStyleGuide");
      }
      // verify the required parameter 'styleGuideId' is set
      if (styleGuideId === undefined || styleGuideId === null) {
        throw new Error("Missing the required parameter 'styleGuideId' when calling getStyleGuide");
      }

      let pathParams = {
        'projectId': projectId,
        'styleGuideId': styleGuideId
      };
      let queryParams = {
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StyleGuide;
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides/{styleGuideId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStyleGuides operation.
     * @callback module:api/StyleGuideApi~getStyleGuidesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StyleGuideList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View style guides
     * View a list of style guides in your project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/StyleGuideApi~getStyleGuidesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StyleGuideList}
     */
    getStyleGuides(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getStyleGuides");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StyleGuideList;
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalStyleGuide operation.
     * @callback module:api/StyleGuideApi~updateGlobalStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the account style guide
     * Update your corporate account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountStyleGuideUploadRequest} [accountStyleGuideUploadRequest] 
     * @param {module:api/StyleGuideApi~updateGlobalStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    updateGlobalStyleGuide(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountStyleGuideUploadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/styleguide', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStyleGuide operation.
     * @callback module:api/StyleGuideApi~updateStyleGuideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StyleGuide} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a style guide
     * Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
     * @param {Number} projectId Project ID
     * @param {Number} styleGuideId Style guide ID
     * @param {Object} opts Optional parameters
     * @param {module:model/StyleGuideUploadRequest} [styleGuideUploadRequest] 
     * @param {module:api/StyleGuideApi~updateStyleGuideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StyleGuide}
     */
    updateStyleGuide(projectId, styleGuideId, opts, callback) {
      opts = opts || {};
      let postBody = opts['styleGuideUploadRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateStyleGuide");
      }
      // verify the required parameter 'styleGuideId' is set
      if (styleGuideId === undefined || styleGuideId === null) {
        throw new Error("Missing the required parameter 'styleGuideId' when calling updateStyleGuide");
      }

      let pathParams = {
        'projectId': projectId,
        'styleGuideId': styleGuideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StyleGuide;
      return this.apiClient.callApi(
        '/projects/{projectId}/styleguides/{styleGuideId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
