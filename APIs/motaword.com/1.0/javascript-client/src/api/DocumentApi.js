/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContinuousProjectDocument from '../model/ContinuousProjectDocument';
import DocumentList from '../model/DocumentList';
import DocumentSubjects from '../model/DocumentSubjects';
import Error from '../model/Error';
import ListOrderType from '../model/ListOrderType';
import OperationStatus from '../model/OperationStatus';
import Progress from '../model/Progress';
import RegeneratePreviewResponse from '../model/RegeneratePreviewResponse';
import UseAsDraftPayload from '../model/UseAsDraftPayload';
import UseAsRegularPayload from '../model/UseAsRegularPayload';

/**
* Document service.
* @module api/DocumentApi
* @version 1.0
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllDocumentSubjects operation.
     * @callback module:api/DocumentApi~getAllDocumentSubjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentSubjects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of subjects of projects
     * Get a list of subjects of projects
     * @param {module:api/DocumentApi~getAllDocumentSubjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentSubjects>}
     */
    getAllDocumentSubjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DocumentSubjects];
      return this.apiClient.callApi(
        '/documents/subjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/DocumentApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a single document
     * View a single document from your MotaWord account with its translation info.
     * @param {String} documentId Document ID or filename
     * @param {module:api/DocumentApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectDocument}
     */
    getDocument(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectDocument;
      return this.apiClient.callApi(
        '/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentProgress operation.
     * @callback module:api/DocumentApi~getDocumentProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Progress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a document translation progress
     * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
     * @param {Number} documentId Document ID
     * @param {module:api/DocumentApi~getDocumentProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Progress}
     */
    getDocumentProgress(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentProgress");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Progress;
      return this.apiClient.callApi(
        '/documents/{documentId}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocuments operation.
     * @callback module:api/DocumentApi~getDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your documents
     * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recent] When true, this will return the most 4 recent active documents.
     * @param {String} [search] 
     * @param {module:model/String} [typeFilter = 'ALL')] 
     * @param {String} [languageCode] searches in source language of documents, in source and target languages of document's quote
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:model/String} [orderBy = 'updated_at')] 
     * @param {module:model/ListOrderType} [orderType] 
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/DocumentApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    getDocuments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'recent': opts['recent'],
        'search': opts['search'],
        'type_filter': opts['typeFilter'],
        'language_code': opts['languageCode'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_type': opts['orderType'],
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarDocuments operation.
     * @callback module:api/DocumentApi~getSimilarDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find documents similar to this document.
     * Find documents similar to this document. Optionally, include translation information.
     * @param {Number} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 1)] Determines the number of similar documents to return.
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/DocumentApi~getSimilarDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    getSimilarDocuments(documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getSimilarDocuments");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/documents/{documentId}/similars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserDocuments operation.
     * @callback module:api/DocumentApi~getUserDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of your documents
     * Get a list of your documents
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recent] When true, this will return the most 4 recent active documents.
     * @param {String} [search] 
     * @param {module:model/String} [typeFilter = 'ALL')] 
     * @param {String} [languageCode] searches in source language of documents, in source and target languages of document's quote
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:model/String} [orderBy = 'updated_at')] 
     * @param {module:model/ListOrderType} [orderType] 
     * @param {module:api/DocumentApi~getUserDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    getUserDocuments(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserDocuments");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'recent': opts['recent'],
        'search': opts['search'],
        'type_filter': opts['typeFilter'],
        'language_code': opts['languageCode'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_type': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/{userId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regeneratePreview operation.
     * @callback module:api/DocumentApi~regeneratePreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegeneratePreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate preview and return preview URL for given file
     * Regenerate preview and return preview URL for given file
     * @param {Number} documentId Document ID
     * @param {module:api/DocumentApi~regeneratePreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegeneratePreviewResponse}
     */
    regeneratePreview(documentId, callback) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling regeneratePreview");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegeneratePreviewResponse;
      return this.apiClient.callApi(
        '/documents/{documentId}/regenerate_preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the useAsDraft operation.
     * @callback module:api/DocumentApi~useAsDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the translation of given source manual document as manual draft source for the given target document.
     * Use the translation of given source manual document as manual draft source for the given target document.
     * @param {Number} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UseAsDraftPayload} [useAsDraftPayload] 
     * @param {module:api/DocumentApi~useAsDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    useAsDraft(documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['useAsDraftPayload'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling useAsDraft");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/documents/{documentId}/use_as_draft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the useAsRegular operation.
     * @callback module:api/DocumentApi~useAsRegularCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the translation of the given manual document as a regular file.
     * Use the translation of the given manual document as a regular file.
     * @param {Number} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UseAsRegularPayload} [useAsRegularPayload] 
     * @param {module:api/DocumentApi~useAsRegularCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    useAsRegular(documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['useAsRegularPayload'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling useAsRegular");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/documents/{documentId}/use_as_regular', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
