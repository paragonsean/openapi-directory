/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Document from '../model/Document';
import DocumentList from '../model/DocumentList';
import DocumentUpdates from '../model/DocumentUpdates';
import DocumentUploadRequest from '../model/DocumentUploadRequest';
import Error from '../model/Error';
import OperationStatus from '../model/OperationStatus';

/**
* ProjectDocument service.
* @module api/ProjectDocumentApi
* @version 1.0
*/
export default class ProjectDocumentApi {

    /**
    * Constructs a new ProjectDocumentApi. 
    * @alias module:api/ProjectDocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectDocument operation.
     * @callback module:api/ProjectDocumentApi~createProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a new document
     * Upload a new document
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentUpdates} [documentUpdates] 
     * @param {module:api/ProjectDocumentApi~createProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    createProjectDocument(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['documentUpdates'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createProjectDocument");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectDocument operation.
     * @callback module:api/ProjectDocumentApi~deleteProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the document
     * Delete the document
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {module:api/ProjectDocumentApi~deleteProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteProjectDocument(projectId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProjectDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteProjectDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadProjectDocument operation.
     * @callback module:api/ProjectDocumentApi~downloadProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a project source document
     * Download an actual source file you uploaded to be translated in your project.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {module:api/ProjectDocumentApi~downloadProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadProjectDocument(projectId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadProjectDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling downloadProjectDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadTranslatedDocumentForLanguage operation.
     * @callback module:api/ProjectDocumentApi~downloadTranslatedDocumentForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download translated document
     * Download translated document in the given target language.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {String} language Target language code.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [certified] Download certified translation
     * @param {module:api/ProjectDocumentApi~downloadTranslatedDocumentForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadTranslatedDocumentForLanguage(projectId, documentId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadTranslatedDocumentForLanguage");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling downloadTranslatedDocumentForLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling downloadTranslatedDocumentForLanguage");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId,
        'language': language
      };
      let queryParams = {
        'certified': opts['certified']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}/translations/download/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectDocument operation.
     * @callback module:api/ProjectDocumentApi~getProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a project source document
     * View the details of a source file you uploaded to be translated in your project.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/ProjectDocumentApi~getProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getProjectDocument(projectId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getProjectDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectDocuments operation.
     * @callback module:api/ProjectDocumentApi~getProjectDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project source documents
     * Get a list of source files you uploaded to be translated in your project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [_with] Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.
     * @param {module:api/ProjectDocumentApi~getProjectDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    getProjectDocuments(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectDocuments");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectDocument operation.
     * @callback module:api/ProjectDocumentApi~updateProjectDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the document.
     * Update the document. File name and contents will replaced with the new one.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentUploadRequest} [documentUploadRequest] 
     * @param {module:api/ProjectDocumentApi~updateProjectDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    updateProjectDocument(projectId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['documentUploadRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProjectDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateProjectDocument");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
