/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AsyncOperationStatus from '../model/AsyncOperationStatus';
import ClientStrings from '../model/ClientStrings';
import ContinuousProjectCache from '../model/ContinuousProjectCache';
import ContinuousProjectDocumentStringsBody from '../model/ContinuousProjectDocumentStringsBody';
import Error from '../model/Error';
import OperationStatus from '../model/OperationStatus';
import StringList from '../model/StringList';
import TranslationMemoryUnit from '../model/TranslationMemoryUnit';

/**
* Strings service.
* @module api/StringsApi
* @version 1.0
*/
export default class StringsApi {

    /**
    * Constructs a new StringsApi. 
    * @alias module:api/StringsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearTranslationCache operation.
     * @callback module:api/StringsApi~clearTranslationCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear translation cache
     * Clear/delete continuous project translation cache.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [locale] Locale
     * @param {Number} [fileId] Continuous Project File ID
     * @param {module:api/StringsApi~clearTranslationCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    clearTranslationCache(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling clearTranslationCache");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'locale': opts['locale'],
        'file_id': opts['fileId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/strings/cached', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectFileStrings operation.
     * @callback module:api/StringsApi~getContinuousProjectFileStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View strings their translations in a continuous document
     * View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID/Name
     * @param {module:api/StringsApi~getContinuousProjectFileStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getContinuousProjectFileStrings(projectId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectFileStrings");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getContinuousProjectFileStrings");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/{documentId}/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinuousProjectStrings operation.
     * @callback module:api/StringsApi~getContinuousProjectStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View strings and translations in continuous project
     * View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {module:api/StringsApi~getContinuousProjectStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getContinuousProjectStrings(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContinuousProjectStrings");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentTranslations operation.
     * @callback module:api/StringsApi~getDocumentTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View strings and translations of a document
     * View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {module:api/StringsApi~getDocumentTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getDocumentTranslations(projectId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDocumentTranslations");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentTranslations");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}/translations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentTranslationsForLanguage operation.
     * @callback module:api/StringsApi~getDocumentTranslationsForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View strings and translations of a document for target language
     * View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {Number} documentId Document ID
     * @param {String} language Target language code.
     * @param {module:api/StringsApi~getDocumentTranslationsForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getDocumentTranslationsForLanguage(projectId, documentId, language, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDocumentTranslationsForLanguage");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentTranslationsForLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getDocumentTranslationsForLanguage");
      }

      let pathParams = {
        'projectId': projectId,
        'documentId': documentId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/documents/{documentId}/translations/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectStrings operation.
     * @callback module:api/StringsApi~getProjectStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project strings and translations
     * View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {module:api/StringsApi~getProjectStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getProjectStrings(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectStrings");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectStringsForLanguage operation.
     * @callback module:api/StringsApi~getProjectStringsForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View strings and translations for target language
     * View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param {Number} projectId Project ID
     * @param {String} language Target language code
     * @param {module:api/StringsApi~getProjectStringsForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getProjectStringsForLanguage(projectId, language, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectStringsForLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getProjectStringsForLanguage");
      }

      let pathParams = {
        'projectId': projectId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectTranslations operation.
     * @callback module:api/StringsApi~getProjectTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated. Use /projects/{projectId}/strings instead.
     * @param {Number} projectId Project ID
     * @param {module:api/StringsApi~getProjectTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getProjectTranslations(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectTranslations");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/translations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectTranslationsForLanguage operation.
     * @callback module:api/StringsApi~getProjectTranslationsForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated. use /projects/{projectId}/strings/{language} instead.
     * @param {Number} projectId Project ID
     * @param {String} language Target language code
     * @param {module:api/StringsApi~getProjectTranslationsForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    getProjectTranslationsForLanguage(projectId, language, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectTranslationsForLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getProjectTranslationsForLanguage");
      }

      let pathParams = {
        'projectId': projectId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/projects/{projectId}/translations/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStrings operation.
     * @callback module:api/StringsApi~getStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientStrings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View account strings (translation memory)
     * Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
     * @param {Object} opts Optional parameters
     * @param {String} [sourceLanguage] Source Language Code
     * @param {Number} [page = 0)] Requested page
     * @param {module:api/StringsApi~getStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientStrings}
     */
    getStrings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source_language': opts['sourceLanguage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientStrings;
      return this.apiClient.callApi(
        '/strings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranslationCache operation.
     * @callback module:api/StringsApi~getTranslationCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinuousProjectCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View cached strings translations in continuous project
     * MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [flatten] Flatten cache results and ignore document keys
     * @param {module:api/StringsApi~getTranslationCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinuousProjectCache}
     */
    getTranslationCache(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTranslationCache");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'flatten': opts['flatten']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinuousProjectCache;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/strings/cached', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageProjectTranslationMemory operation.
     * @callback module:api/StringsApi~packageProjectTranslationMemoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download project translation memory
     * Package and download project translation memory in TMX format
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [async = 0)] If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.
     * @param {String} [format = 'tmx')] Translation Memory file format
     * @param {module:api/StringsApi~packageProjectTranslationMemoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageProjectTranslationMemory(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling packageProjectTranslationMemory");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'async': opts['async'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageProjectTranslationMemoryForLanguage operation.
     * @callback module:api/StringsApi~packageProjectTranslationMemoryForLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download language-specific project translation memory
     * Package and download project translation memory in TMX format for a specific target language.
     * @param {Number} projectId Project ID
     * @param {String} languageCode Language Code
     * @param {Object} opts Optional parameters
     * @param {Number} [async = 0)] If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.
     * @param {String} [format = 'tmx')] Translation Memory file format
     * @param {module:api/StringsApi~packageProjectTranslationMemoryForLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageProjectTranslationMemoryForLanguage(projectId, languageCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryForLanguage");
      }
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling packageProjectTranslationMemoryForLanguage");
      }

      let pathParams = {
        'projectId': projectId,
        'languageCode': languageCode
      };
      let queryParams = {
        'async': opts['async'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings/{languageCode}/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageProjectTranslationMemoryForLanguageStatus operation.
     * @callback module:api/StringsApi~packageProjectTranslationMemoryForLanguageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check language-specific translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param {Number} projectId Project ID
     * @param {String} languageCode Language Code
     * @param {String} asyncRequestKey Async operation key
     * @param {module:api/StringsApi~packageProjectTranslationMemoryForLanguageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageProjectTranslationMemoryForLanguageStatus(projectId, languageCode, asyncRequestKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryForLanguageStatus");
      }
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling packageProjectTranslationMemoryForLanguageStatus");
      }
      // verify the required parameter 'asyncRequestKey' is set
      if (asyncRequestKey === undefined || asyncRequestKey === null) {
        throw new Error("Missing the required parameter 'asyncRequestKey' when calling packageProjectTranslationMemoryForLanguageStatus");
      }

      let pathParams = {
        'projectId': projectId,
        'languageCode': languageCode
      };
      let queryParams = {
        'async_request_key': asyncRequestKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings/{languageCode}/package/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageProjectTranslationMemoryStatus operation.
     * @callback module:api/StringsApi~packageProjectTranslationMemoryStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param {Number} projectId Project ID
     * @param {String} asyncRequestKey Async operation key
     * @param {module:api/StringsApi~packageProjectTranslationMemoryStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageProjectTranslationMemoryStatus(projectId, asyncRequestKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryStatus");
      }
      // verify the required parameter 'asyncRequestKey' is set
      if (asyncRequestKey === undefined || asyncRequestKey === null) {
        throw new Error("Missing the required parameter 'asyncRequestKey' when calling packageProjectTranslationMemoryStatus");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'async_request_key': asyncRequestKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/strings/package/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageUserTranslationMemory operation.
     * @callback module:api/StringsApi~packageUserTranslationMemoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download account translation memory
     * Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
     * @param {String} languageCode Source Language Code
     * @param {Object} opts Optional parameters
     * @param {Number} [async = 0)] If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.
     * @param {Number} [email = 1)] If you don't need us to email the TMX, set this to '0'. Default is 1.
     * @param {module:api/StringsApi~packageUserTranslationMemoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageUserTranslationMemory(languageCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling packageUserTranslationMemory");
      }

      let pathParams = {
        'languageCode': languageCode
      };
      let queryParams = {
        'async': opts['async'],
        'email': opts['email']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/strings/{languageCode}/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageUserTranslationMemoryForLanguageStatus operation.
     * @callback module:api/StringsApi~packageUserTranslationMemoryForLanguageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check account translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param {String} languageCode Language Code
     * @param {String} asyncRequestKey Async operation key
     * @param {module:api/StringsApi~packageUserTranslationMemoryForLanguageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    packageUserTranslationMemoryForLanguageStatus(languageCode, asyncRequestKey, callback) {
      let postBody = null;
      // verify the required parameter 'languageCode' is set
      if (languageCode === undefined || languageCode === null) {
        throw new Error("Missing the required parameter 'languageCode' when calling packageUserTranslationMemoryForLanguageStatus");
      }
      // verify the required parameter 'asyncRequestKey' is set
      if (asyncRequestKey === undefined || asyncRequestKey === null) {
        throw new Error("Missing the required parameter 'asyncRequestKey' when calling packageUserTranslationMemoryForLanguageStatus");
      }

      let pathParams = {
        'languageCode': languageCode
      };
      let queryParams = {
        'async_request_key': asyncRequestKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/strings/{languageCode}/package/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postContinuousProjectFileStrings operation.
     * @callback module:api/StringsApi~postContinuousProjectFileStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of strings and its translations in the project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ContinuousProjectDocumentStringsBody} [continuousProjectDocumentStringsBody] 
     * @param {module:api/StringsApi~postContinuousProjectFileStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringList}
     */
    postContinuousProjectFileStrings(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['continuousProjectDocumentStringsBody'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postContinuousProjectFileStrings");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StringList;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/documents/strings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recacheTranslations operation.
     * @callback module:api/StringsApi~recacheTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recache translations
     * Recache translations for the continuous project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [locale] Locale
     * @param {Number} [fileId] Continuous Project File ID
     * @param {module:api/StringsApi~recacheTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    recacheTranslations(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling recacheTranslations");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'locale': opts['locale'],
        'file_id': opts['fileId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/continuous_projects/{projectId}/strings/recache-tms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranslationMemoryUnit operation.
     * @callback module:api/StringsApi~updateTranslationMemoryUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update string translation
     * Update the translation of a string from your account strings/translation memory.
     * @param {Object} opts Optional parameters
     * @param {module:model/TranslationMemoryUnit} [translationMemoryUnit] 
     * @param {module:api/StringsApi~updateTranslationMemoryUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    updateTranslationMemoryUnit(opts, callback) {
      opts = opts || {};
      let postBody = opts['translationMemoryUnit'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/strings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
