/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountGlossaryUploadRequest from '../model/AccountGlossaryUploadRequest';
import Error from '../model/Error';
import Glossary from '../model/Glossary';
import GlossaryList from '../model/GlossaryList';
import GlossaryUploadRequest from '../model/GlossaryUploadRequest';
import OperationStatus from '../model/OperationStatus';

/**
* Glossary service.
* @module api/GlossaryApi
* @version 1.0
*/
export default class GlossaryApi {

    /**
    * Constructs a new GlossaryApi. 
    * @alias module:api/GlossaryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGlossary operation.
     * @callback module:api/GlossaryApi~createGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Glossary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a glossary file
     * Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/GlossaryUploadRequest} [glossaryUploadRequest] 
     * @param {module:api/GlossaryApi~createGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Glossary}
     */
    createGlossary(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['glossaryUploadRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createGlossary");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Glossary;
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlossary operation.
     * @callback module:api/GlossaryApi~deleteGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a glossary
     * Delete the existing glossary from the project.
     * @param {Number} projectId Project ID
     * @param {Number} glossaryId Glossary ID
     * @param {module:api/GlossaryApi~deleteGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteGlossary(projectId, glossaryId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteGlossary");
      }
      // verify the required parameter 'glossaryId' is set
      if (glossaryId === undefined || glossaryId === null) {
        throw new Error("Missing the required parameter 'glossaryId' when calling deleteGlossary");
      }

      let pathParams = {
        'projectId': projectId,
        'glossaryId': glossaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries/{glossaryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadGlobalGlossary operation.
     * @callback module:api/GlossaryApi~downloadGlobalGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download account glossary.
     * Download your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param {module:api/GlossaryApi~downloadGlobalGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadGlobalGlossary(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/glossary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadGlossary operation.
     * @callback module:api/GlossaryApi~downloadGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a glossary
     * Download a previously uploaded glossary file.
     * @param {Number} projectId Project ID
     * @param {Number} glossaryId Glossary ID
     * @param {module:api/GlossaryApi~downloadGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadGlossary(projectId, glossaryId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadGlossary");
      }
      // verify the required parameter 'glossaryId' is set
      if (glossaryId === undefined || glossaryId === null) {
        throw new Error("Missing the required parameter 'glossaryId' when calling downloadGlossary");
      }

      let pathParams = {
        'projectId': projectId,
        'glossaryId': glossaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries/{glossaryId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlossaries operation.
     * @callback module:api/GlossaryApi~getGlossariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlossaryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View glossaries
     * View a list of glossaries previously uploaded to the project.
     * @param {Number} projectId Project ID
     * @param {module:api/GlossaryApi~getGlossariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlossaryList}
     */
    getGlossaries(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getGlossaries");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlossaryList;
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlossary operation.
     * @callback module:api/GlossaryApi~getGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Glossary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a glossary
     * View the details of a glossary file uploaded to a project.
     * @param {Number} projectId Project ID
     * @param {Number} glossaryId Glossary ID
     * @param {module:api/GlossaryApi~getGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Glossary}
     */
    getGlossary(projectId, glossaryId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getGlossary");
      }
      // verify the required parameter 'glossaryId' is set
      if (glossaryId === undefined || glossaryId === null) {
        throw new Error("Missing the required parameter 'glossaryId' when calling getGlossary");
      }

      let pathParams = {
        'projectId': projectId,
        'glossaryId': glossaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Glossary;
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries/{glossaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalGlossary operation.
     * @callback module:api/GlossaryApi~updateGlobalGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the account glossary
     * Update your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountGlossaryUploadRequest} [accountGlossaryUploadRequest] 
     * @param {module:api/GlossaryApi~updateGlobalGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    updateGlobalGlossary(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountGlossaryUploadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/glossary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlossary operation.
     * @callback module:api/GlossaryApi~updateGlossaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Glossary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a glossary
     * Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
     * @param {Number} projectId Project ID
     * @param {Number} glossaryId Glossary ID
     * @param {Object} opts Optional parameters
     * @param {module:model/GlossaryUploadRequest} [glossaryUploadRequest] 
     * @param {module:api/GlossaryApi~updateGlossaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Glossary}
     */
    updateGlossary(projectId, glossaryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['glossaryUploadRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateGlossary");
      }
      // verify the required parameter 'glossaryId' is set
      if (glossaryId === undefined || glossaryId === null) {
        throw new Error("Missing the required parameter 'glossaryId' when calling updateGlossary");
      }

      let pathParams = {
        'projectId': projectId,
        'glossaryId': glossaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Glossary;
      return this.apiClient.callApi(
        '/projects/{projectId}/glossaries/{glossaryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
