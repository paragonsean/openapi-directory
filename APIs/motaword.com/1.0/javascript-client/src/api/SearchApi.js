/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AsyncOperationStatus from '../model/AsyncOperationStatus';
import SearchEverywhereResult from '../model/SearchEverywhereResult';

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkDocumentsReindex operation.
     * @callback module:api/SearchApi~checkDocumentsReindexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check reindex status of the client source and translation documents.
     * @param {String} asyncRequestKey Async operation key
     * @param {module:api/SearchApi~checkDocumentsReindexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    checkDocumentsReindex(asyncRequestKey, callback) {
      let postBody = null;
      // verify the required parameter 'asyncRequestKey' is set
      if (asyncRequestKey === undefined || asyncRequestKey === null) {
        throw new Error("Missing the required parameter 'asyncRequestKey' when calling checkDocumentsReindex");
      }

      let pathParams = {
      };
      let queryParams = {
        'async_request_key': asyncRequestKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/search/documents/reindex/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexDocuments operation.
     * @callback module:api/SearchApi~reindexDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reindex for search all of the client source and translation documents.
     * @param {module:api/SearchApi~reindexDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    reindexDocuments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/search/documents/reindex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEverywhere operation.
     * @callback module:api/SearchApi~searchEverywhereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchEverywhereResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search everything in your account
     * Search through everything in your account, from projects to documents, from source strings to translations...
     * @param {String} query Search query term
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [include] Search in these entities. Current oprions are projects, documents, strings. Can be multiple. When not provided, we'll search through all entities.
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:api/SearchApi~searchEverywhereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchEverywhereResult}
     */
    searchEverywhere(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchEverywhere");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'include[]': this.apiClient.buildCollectionParam(opts['include'], 'multi'),
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchEverywhereResult;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
