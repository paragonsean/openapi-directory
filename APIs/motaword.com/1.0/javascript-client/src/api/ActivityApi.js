/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activity from '../model/Activity';
import ActivityList from '../model/ActivityList';
import Comment from '../model/Comment';
import CommentList from '../model/CommentList';
import Error from '../model/Error';
import NewSalesActivity from '../model/NewSalesActivity';
import OperationStatus from '../model/OperationStatus';
import SalesActivities from '../model/SalesActivities';
import SalesActivityType from '../model/SalesActivityType';

/**
* Activity service.
* @module api/ActivityApi
* @version 1.0
*/
export default class ActivityApi {

    /**
    * Constructs a new ActivityApi. 
    * @alias module:api/ActivityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActivities operation.
     * @callback module:api/ActivityApi~getActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Monitor project activities
     * Get a list of real-time activities in the project, such as translation suggestion and translation approval.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:api/ActivityApi~getActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityList}
     */
    getActivities(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActivities");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityList;
      return this.apiClient.callApi(
        '/projects/{projectId}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivity operation.
     * @callback module:api/ActivityApi~getActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View an activity
     * View the details of an activity in the project.
     * @param {Number} projectId Project ID
     * @param {Number} activityId Activity ID
     * @param {module:api/ActivityApi~getActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    getActivity(projectId, activityId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActivity");
      }
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling getActivity");
      }

      let pathParams = {
        'projectId': projectId,
        'activityId': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/projects/{projectId}/activities/{activityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivityComments operation.
     * @callback module:api/ActivityApi~getActivityCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View activity comments
     * View a list of comments added to this activity.
     * @param {Number} projectId Project ID
     * @param {Number} activityId Activity ID
     * @param {module:api/ActivityApi~getActivityCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentList}
     */
    getActivityComments(projectId, activityId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActivityComments");
      }
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling getActivityComments");
      }

      let pathParams = {
        'projectId': projectId,
        'activityId': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentList;
      return this.apiClient.callApi(
        '/projects/{projectId}/activities/{activityId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/ActivityApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all project comments
     * View a list of activity comments in the project.
     * @param {Number} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:api/ActivityApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentList}
     */
    getComments(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getComments");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentList;
      return this.apiClient.callApi(
        '/projects/{projectId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesActivities operation.
     * @callback module:api/ActivityApi~getSalesActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesActivities} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sales activities for a project
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [excludeOwner] 
     * @param {module:model/SalesActivityType} [type] 
     * @param {module:api/ActivityApi~getSalesActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesActivities}
     */
    getSalesActivities(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSalesActivities");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'excludeOwner': opts['excludeOwner'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SalesActivities;
      return this.apiClient.callApi(
        '/projects/{id}/sales/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertSalesActivity operation.
     * @callback module:api/ActivityApi~insertSalesActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert sales activity for a project
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/NewSalesActivity} [newSalesActivity] 
     * @param {module:api/ActivityApi~insertSalesActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    insertSalesActivity(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['newSalesActivity'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling insertSalesActivity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/sales/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitComment operation.
     * @callback module:api/ActivityApi~submitCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit comment to an activity
     * Submit a comment to an activity in the project, such as translation or editing.
     * @param {Number} projectId Project ID
     * @param {Number} activityId Activity ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Comment} [comment] 
     * @param {module:api/ActivityApi~submitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    submitComment(projectId, activityId, opts, callback) {
      opts = opts || {};
      let postBody = opts['comment'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling submitComment");
      }
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling submitComment");
      }

      let pathParams = {
        'projectId': projectId,
        'activityId': activityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/projects/{projectId}/activities/{activityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
