/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import OperationStatus from '../model/OperationStatus';
import SurveyAnswers from '../model/SurveyAnswers';
import SurveyQuestion from '../model/SurveyQuestion';

/**
* Surveys service.
* @module api/SurveysApi
* @version 1.0
*/
export default class SurveysApi {

    /**
    * Constructs a new SurveysApi. 
    * @alias module:api/SurveysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQuestions operation.
     * @callback module:api/SurveysApi~getQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SurveyQuestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey questions in given scope and type
     * Get survey questions in given scope and type
     * @param {String} scope Scope
     * @param {String} type Type
     * @param {Object} opts Optional parameters
     * @param {Number} [attachAnswersForProject] Project ID
     * @param {module:api/SurveysApi~getQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SurveyQuestion>}
     */
    getQuestions(scope, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling getQuestions");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getQuestions");
      }

      let pathParams = {
        'scope': scope,
        'type': type
      };
      let queryParams = {
        'attach_answers_for_project': opts['attachAnswersForProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SurveyQuestion];
      return this.apiClient.callApi(
        '/surveys/{scope}/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitAnswers operation.
     * @callback module:api/SurveysApi~submitAnswersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post survey answers for scope and type
     * Post survey answers for scope and type
     * @param {String} scope Scope
     * @param {String} type Type
     * @param {Object} opts Optional parameters
     * @param {module:model/SurveyAnswers} [surveyAnswers] 
     * @param {module:api/SurveysApi~submitAnswersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    submitAnswers(scope, type, opts, callback) {
      opts = opts || {};
      let postBody = opts['surveyAnswers'];
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling submitAnswers");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling submitAnswers");
      }

      let pathParams = {
        'scope': scope,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/surveys/{scope}/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
