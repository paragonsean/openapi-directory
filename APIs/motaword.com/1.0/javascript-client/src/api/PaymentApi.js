/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreditCard from '../model/CreditCard';
import Error from '../model/Error';
import OperationStatus from '../model/OperationStatus';

/**
* Payment service.
* @module api/PaymentApi
* @version 1.0
*/
export default class PaymentApi {

    /**
    * Constructs a new PaymentApi. 
    * @alias module:api/PaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCreditCard operation.
     * @callback module:api/PaymentApi~deleteCreditCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credit card
     * @param {Number} cardId Credit Card ID
     * @param {module:api/PaymentApi~deleteCreditCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteCreditCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling deleteCreditCard");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/payment/{cardId}/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCard operation.
     * @callback module:api/PaymentApi~getCreditCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View saved credit card
     * @param {Number} cardId Credit Card ID
     * @param {module:api/PaymentApi~getCreditCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    getCreditCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getCreditCard");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditCard;
      return this.apiClient.callApi(
        '/payment/{cardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetCardPaymentCode operation.
     * @callback module:api/PaymentApi~resetCardPaymentCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset credit card payment code
     * Reset the payment code used to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param {Number} cardId Credit Card ID
     * @param {module:api/PaymentApi~resetCardPaymentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    resetCardPaymentCode(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling resetCardPaymentCode");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditCard;
      return this.apiClient.callApi(
        '/payment/{cardId}/reset-payment-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetCorporatePaymentCode operation.
     * @callback module:api/PaymentApi~resetCorporatePaymentCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset payment code
     * Reset your corporate account's payment code to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param {module:api/PaymentApi~resetCorporatePaymentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCard}
     */
    resetCorporatePaymentCode(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditCard;
      return this.apiClient.callApi(
        '/payment/reset-corporate-payment-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleCorporateAutoCharge operation.
     * @callback module:api/PaymentApi~toggleCorporateAutoChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage automatic charges on your credit card
     * Toggle (enable/disable) automatic charges on the credit card on file.
     * @param {module:api/PaymentApi~toggleCorporateAutoChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    toggleCorporateAutoCharge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/payment/toggle-corporate-auto-charge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
