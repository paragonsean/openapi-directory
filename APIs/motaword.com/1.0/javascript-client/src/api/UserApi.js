/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveWidget from '../model/ActiveWidget';
import ClientProjectStats from '../model/ClientProjectStats';
import Earnings from '../model/Earnings';
import Email from '../model/Email';
import Error from '../model/Error';
import FilterVendorRequest from '../model/FilterVendorRequest';
import LocationUpdateContent from '../model/LocationUpdateContent';
import NotificationSubscription from '../model/NotificationSubscription';
import OperationStatus from '../model/OperationStatus';
import PasswordUpdateContent from '../model/PasswordUpdateContent';
import PaymentInfo from '../model/PaymentInfo';
import PermissionList from '../model/PermissionList';
import PopularLanguagePairs from '../model/PopularLanguagePairs';
import ProfilePictureUpload from '../model/ProfilePictureUpload';
import ResponsivityList from '../model/ResponsivityList';
import SendEmailConfirmation200Response from '../model/SendEmailConfirmation200Response';
import SendUserEmailConfirmation200Response from '../model/SendUserEmailConfirmation200Response';
import SendUserEmailConfirmation202Response from '../model/SendUserEmailConfirmation202Response';
import Stats from '../model/Stats';
import SuspendUserRequest from '../model/SuspendUserRequest';
import UpdatePaymentInfo from '../model/UpdatePaymentInfo';
import User from '../model/User';
import UserGroupList from '../model/UserGroupList';
import UserList from '../model/UserList';
import UserUpdateContent from '../model/UserUpdateContent';
import VendorTag from '../model/VendorTag';

/**
* User service.
* @module api/UserApi
* @version 1.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the approveVendorApplication operation.
     * @callback module:api/UserApi~approveVendorApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {module:api/UserApi~approveVendorApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    approveVendorApplication(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling approveVendorApplication");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * Create a new platform user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notify] Send a welcome email to the user
     * @param {module:model/User} [user] 
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];

      let pathParams = {
      };
      let queryParams = {
        'notify': opts['notify']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/UserApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete your account
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     * @param {module:api/UserApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteAccount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/delete-account', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAccount operation.
     * @callback module:api/UserApi~deleteUserAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete requester account
     * @param {Number} userId User ID
     * @param {module:api/UserApi~deleteUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteUserAccount(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserAccount");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/delete-account', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downgradeProofreader operation.
     * @callback module:api/UserApi~downgradeProofreaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserApi~downgradeProofreaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    downgradeProofreader(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/downgrade-proofreader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downgradeUserProofreader operation.
     * @callback module:api/UserApi~downgradeUserProofreaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {module:api/UserApi~downgradeUserProofreaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    downgradeUserProofreader(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downgradeUserProofreader");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/downgrade-proofreader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the freezeAccount operation.
     * @callback module:api/UserApi~freezeAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freeze account
     * Freeze your account temporarily, especially to stop receiving project notifications.
     * @param {module:api/UserApi~freezeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    freezeAccount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/freeze-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the freezeUserAccount operation.
     * @callback module:api/UserApi~freezeUserAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freeze requester account for project notifications
     * @param {Number} userId User ID
     * @param {module:api/UserApi~freezeUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    freezeUserAccount(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling freezeUserAccount");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/freeze-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllVendorTags operation.
     * @callback module:api/UserApi~getAllVendorTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VendorTag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all vendor tags for vendors filter
     * Returns all vendor tags for vendors filter
     * @param {module:api/UserApi~getAllVendorTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VendorTag>}
     */
    getAllVendorTags(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VendorTag];
      return this.apiClient.callApi(
        '/users/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEarnings operation.
     * @callback module:api/UserApi~getEarningsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Earnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your vendor earnings
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     * @param {module:api/UserApi~getEarningsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Earnings}
     */
    getEarnings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Earnings;
      return this.apiClient.callApi(
        '/earnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilteredVendors operation.
     * @callback module:api/UserApi~getFilteredVendorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter vendors based on provided parameters
     * Get a list of vendors available for the criteria given
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number
     * @param {Number} [perPage] The number of items per page
     * @param {String} [orderBy] The field to order the results by
     * @param {String} [order] The order to sort the results by (ascending or descending)
     * @param {module:model/FilterVendorRequest} [filterVendorRequest] 
     * @param {module:api/UserApi~getFilteredVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    getFilteredVendors(opts, callback) {
      opts = opts || {};
      let postBody = opts['filterVendorRequest'];

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/users/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMe operation.
     * @callback module:api/UserApi~getMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your account info
     * Get your user information, including client, corporate account and vendor account information.
     * @param {module:api/UserApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getMe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentInfo operation.
     * @callback module:api/UserApi~getPaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present & allowed.
     * @param {module:api/UserApi~getPaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInfo}
     */
    getPaymentInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentInfo;
      return this.apiClient.callApi(
        '/payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/UserApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your permissions
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     * @param {module:api/UserApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionList}
     */
    getPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResponsivity operation.
     * @callback module:api/UserApi~getResponsivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsivityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your vendor responsiveness
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period = 'monthly')] Time period to calculate your responsiveness
     * @param {module:api/UserApi~getResponsivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsivityList}
     */
    getResponsivity(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'period': opts['period']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsivityList;
      return this.apiClient.callApi(
        '/responsivity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStats operation.
     * @callback module:api/UserApi~getStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your account statistics
     * View your client and vendor statistics.
     * @param {module:api/UserApi~getStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stats}
     */
    getStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stats;
      return this.apiClient.callApi(
        '/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThisUserGroups operation.
     * @callback module:api/UserApi~getThisUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of user groups that this user belongs to.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getThisUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupList}
     */
    getThisUserGroups(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getThisUserGroups");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupList;
      return this.apiClient.callApi(
        '/{userId}/user-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information, including client or vendor specific info.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserEarnings operation.
     * @callback module:api/UserApi~getUserEarningsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Earnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserEarningsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Earnings}
     */
    getUserEarnings(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserEarnings");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Earnings;
      return this.apiClient.callApi(
        '/{userId}/earnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroups operation.
     * @callback module:api/UserApi~getUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your user groups
     * View the user groups that your user account belongs to. This is typically configured by your account administator's dashboard.
     * @param {module:api/UserApi~getUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupList}
     */
    getUserGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserGroupList;
      return this.apiClient.callApi(
        '/user-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPaymentInfo operation.
     * @callback module:api/UserApi~getUserPaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View user's payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present & allowed.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserPaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInfo}
     */
    getUserPaymentInfo(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPaymentInfo");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentInfo;
      return this.apiClient.callApi(
        '/{userId}/payment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPermissions operation.
     * @callback module:api/UserApi~getUserPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of permissions that this user is authorized for.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionList}
     */
    getUserPermissions(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPermissions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/{userId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPopularPairs operation.
     * @callback module:api/UserApi~getUserPopularPairsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopularLanguagePairs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the language pairs that the user has ordered most.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserPopularPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopularLanguagePairs}
     */
    getUserPopularPairs(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPopularPairs");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopularLanguagePairs;
      return this.apiClient.callApi(
        '/{userId}/stats/popular-pairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProjectStats operation.
     * @callback module:api/UserApi~getUserProjectStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientProjectStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's project statistics.
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserProjectStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientProjectStats}
     */
    getUserProjectStats(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserProjectStats");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientProjectStats;
      return this.apiClient.callApi(
        '/{userId}/stats/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserResponsivity operation.
     * @callback module:api/UserApi~getUserResponsivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsivityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's vendor responsivity stats
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [period = 'monthly')] Period for calcualtion.
     * @param {module:api/UserApi~getUserResponsivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsivityList}
     */
    getUserResponsivity(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserResponsivity");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'period': opts['period']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsivityList;
      return this.apiClient.callApi(
        '/{userId}/responsivity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserStats operation.
     * @callback module:api/UserApi~getUserStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's client and vendor statistics. This used to be called \"summary\" (\\@deprecated).
     * @param {Number} userId User ID
     * @param {module:api/UserApi~getUserStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stats}
     */
    getUserStats(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserStats");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stats;
      return this.apiClient.callApi(
        '/{userId}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UserApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of platform users
     * Get a list of platform users
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:model/String} [userType = 'all')] 
     * @param {String} [search] 
     * @param {String} [email] 
     * @param {module:api/UserApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'user_type': opts['userType'],
        'search': opts['search'],
        'email': opts['email']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logLocation operation.
     * @callback module:api/UserApi~logLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log user's current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
     * @param {Object} opts Optional parameters
     * @param {module:model/LocationUpdateContent} [locationUpdateContent] 
     * @param {module:api/UserApi~logLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    logLocation(opts, callback) {
      opts = opts || {};
      let postBody = opts['locationUpdateContent'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/location', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the makeProofreader operation.
     * @callback module:api/UserApi~makeProofreaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserApi~makeProofreaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    makeProofreader(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/make-proofreader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the makeUserProofreader operation.
     * @callback module:api/UserApi~makeUserProofreaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {module:api/UserApi~makeUserProofreaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    makeUserProofreader(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling makeUserProofreader");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/make-proofreader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectVendorApplication operation.
     * @callback module:api/UserApi~rejectVendorApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {module:api/UserApi~rejectVendorApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    rejectVendorApplication(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling rejectVendorApplication");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailConfirmation operation.
     * @callback module:api/UserApi~sendEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailConfirmation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends email confirmation email for current user
     * @param {module:api/UserApi~sendEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailConfirmation200Response}
     */
    sendEmailConfirmation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SendEmailConfirmation200Response;
      return this.apiClient.callApi(
        '/resend-email-confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPasswordReminder operation.
     * @callback module:api/UserApi~sendPasswordReminderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends password reset email to the user's registered email address
     * @param {Object} opts Optional parameters
     * @param {module:model/Email} [email] 
     * @param {module:api/UserApi~sendPasswordReminderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    sendPasswordReminder(opts, callback) {
      opts = opts || {};
      let postBody = opts['email'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/users/send-password-reminder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendUserEmailConfirmation operation.
     * @callback module:api/UserApi~sendUserEmailConfirmationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendUserEmailConfirmation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends email confirmation email for a user
     * @param {Number} userId User ID
     * @param {module:api/UserApi~sendUserEmailConfirmationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendUserEmailConfirmation200Response}
     */
    sendUserEmailConfirmation(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling sendUserEmailConfirmation");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SendUserEmailConfirmation200Response;
      return this.apiClient.callApi(
        '/{userId}/resend-email-confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeNotification operation.
     * @callback module:api/UserApi~subscribeNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to push notifications
     * Subscribe to push notifications to receive project and platform notifications.
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSubscription} [notificationSubscription] 
     * @param {module:api/UserApi~subscribeNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    subscribeNotification(opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSubscription'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/notifications/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeUserNotification operation.
     * @callback module:api/UserApi~subscribeUserNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSubscription} [notificationSubscription] 
     * @param {module:api/UserApi~subscribeUserNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    subscribeUserNotification(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSubscription'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling subscribeUserNotification");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/notifications/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suspendUser operation.
     * @callback module:api/UserApi~suspendUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspendUserRequest} [suspendUserRequest] 
     * @param {module:api/UserApi~suspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    suspendUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['suspendUserRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling suspendUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfreezeAccount operation.
     * @callback module:api/UserApi~unfreezeAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Defreeze your account
     * Reactive your account to start receiving notifications.
     * @param {module:api/UserApi~unfreezeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    unfreezeAccount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/unfreeze-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfreezeUserAccount operation.
     * @callback module:api/UserApi~unfreezeUserAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfreeze requester account for project notifications
     * @param {Number} userId User ID
     * @param {module:api/UserApi~unfreezeUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    unfreezeUserAccount(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unfreezeUserAccount");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/unfreeze-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeNotification operation.
     * @callback module:api/UserApi~unsubscribeNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSubscription} [notificationSubscription] 
     * @param {module:api/UserApi~unsubscribeNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    unsubscribeNotification(opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSubscription'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/notifications/unsubscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeUserNotification operation.
     * @callback module:api/UserApi~unsubscribeUserNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationSubscription} [notificationSubscription] 
     * @param {module:api/UserApi~unsubscribeUserNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    unsubscribeUserNotification(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['notificationSubscription'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unsubscribeUserNotification");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/notifications/unsubscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMe operation.
     * @callback module:api/UserApi~updateMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your account info
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdateContent} [userUpdateContent] 
     * @param {module:api/UserApi~updateMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateMe(opts, callback) {
      opts = opts || {};
      let postBody = opts['userUpdateContent'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/me', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePassword operation.
     * @callback module:api/UserApi~updatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your account password
     * Password should contain at least one uppercase, lowercase character and one number
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordUpdateContent} [passwordUpdateContent] 
     * @param {module:api/UserApi~updatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    updatePassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['passwordUpdateContent'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentInfo operation.
     * @callback module:api/UserApi~updatePaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update payment info
     * Update your billing and saved credit card information
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentInfo} [updatePaymentInfo] 
     * @param {module:api/UserApi~updatePaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInfo}
     */
    updatePaymentInfo(opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePaymentInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInfo;
      return this.apiClient.callApi(
        '/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUpdateContent} [userUpdateContent] 
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['userUpdateContent'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserGroup operation.
     * @callback module:api/UserApi~updateUserGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ActiveWidget} [activeWidget] 
     * @param {module:api/UserApi~updateUserGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserGroupList}
     */
    updateUserGroup(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['activeWidget'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserGroup");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserGroupList;
      return this.apiClient.callApi(
        '/{userId}/user-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserPaymentInfo operation.
     * @callback module:api/UserApi~updateUserPaymentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user payment info
     * Update user's billing and saved credit card information
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentInfo} [paymentInfo] 
     * @param {module:api/UserApi~updateUserPaymentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    updateUserPaymentInfo(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentInfo'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserPaymentInfo");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadProfilePicture operation.
     * @callback module:api/UserApi~uploadProfilePictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload profile picture
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProfilePictureUpload} [profilePictureUpload] 
     * @param {module:api/UserApi~uploadProfilePictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    uploadProfilePicture(opts, callback) {
      opts = opts || {};
      let postBody = opts['profilePictureUpload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/profile-picture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadUserProfilePicture operation.
     * @callback module:api/UserApi~uploadUserProfilePictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ProfilePictureUpload} [profilePictureUpload] 
     * @param {module:api/UserApi~uploadUserProfilePictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    uploadUserProfilePicture(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['profilePictureUpload'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadUserProfilePicture");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/{userId}/profile-picture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
