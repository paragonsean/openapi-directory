/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CM from '../model/CM';
import CallbackResult from '../model/CallbackResult';
import CancelProjectRequest from '../model/CancelProjectRequest';
import Error from '../model/Error';
import Invoice from '../model/Invoice';
import ListOrderType from '../model/ListOrderType';
import NewProject from '../model/NewProject';
import OperationStatus from '../model/OperationStatus';
import Package from '../model/Package';
import PackageStatus from '../model/PackageStatus';
import Progress from '../model/Progress';
import Project from '../model/Project';
import ProjectId from '../model/ProjectId';
import ProjectLaunchResponse from '../model/ProjectLaunchResponse';
import ProjectList from '../model/ProjectList';
import ProjectPayment from '../model/ProjectPayment';
import ProjectStatus from '../model/ProjectStatus';
import ProjectUpdate from '../model/ProjectUpdate';
import ReportContent from '../model/ReportContent';
import UserList from '../model/UserList';

/**
* Project service.
* @module api/ProjectApi
* @version 1.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignCM operation.
     * @callback module:api/ProjectApi~assignCMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a CM to the project
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CM} [CM] 
     * @param {module:api/ProjectApi~assignCMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    assignCM(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['CM'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling assignCM");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/assign-cm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callPackage operation.
     * @callback module:api/ProjectApi~callPackageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Package your translated project
     * Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [async = 0)] If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.
     * @param {module:api/ProjectApi~callPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    callPackage(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callPackage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'async': opts['async']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{id}/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelProject operation.
     * @callback module:api/ProjectApi~cancelProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel your translation project
     * If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelProjectRequest} [cancelProjectRequest] 
     * @param {module:api/ProjectApi~cancelProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    cancelProject(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelProjectRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project
     * Create a new translation project. Projects are not launched (you are not charged) until you `/launch` the created project.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewProject} [newProject] 
     * @param {module:api/ProjectApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    createProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['newProject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete your translation project
     * If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deleteProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deliverProject operation.
     * @callback module:api/ProjectApi~deliverProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deliver project
     * Deliver project to the owner of the project. You can also download your translations in `/package` and `/download` endpoints.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~deliverProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    deliverProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deliverProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/deliver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the download operation.
     * @callback module:api/ProjectApi~downloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download your translated project
     * Download the latest translation package. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~downloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    download(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling download");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadHtmlInvoice operation.
     * @callback module:api/ProjectApi~downloadHtmlInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download project invoice (HTML)
     * Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~downloadHtmlInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadHtmlInvoice(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadHtmlInvoice");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{id}/invoice.html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadLanguage operation.
     * @callback module:api/ProjectApi~downloadLanguageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download your translated project language
     * Download the latest translation package for your target language. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
     * @param {Number} id Project ID
     * @param {String} language Language code. You can download the translation of only a specific language.
     * @param {module:api/ProjectApi~downloadLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadLanguage(id, language, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling downloadLanguage");
      }

      let pathParams = {
        'id': id,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{id}/download/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadPdfInvoice operation.
     * @callback module:api/ProjectApi~downloadPdfInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download project invoice (PDF)
     * Download your project invoice as PDF. Your invoice may be in \"unpaid\" status, in which case youn can see the payment instructions in the PDF file.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~downloadPdfInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadPdfInvoice(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadPdfInvoice");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/projects/{id}/invoice.pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoice operation.
     * @callback module:api/ProjectApi~getInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project invoice
     * View your invoice details for your translation project.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~getInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoice}
     */
    getInvoice(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvoice");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoice;
      return this.apiClient.callApi(
        '/projects/{id}/invoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgress operation.
     * @callback module:api/ProjectApi~getProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Progress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View progress of a project
     * Monitor the translation progress of an already launched project in real-time.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [raw = false)] This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%.
     * @param {module:api/ProjectApi~getProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Progress}
     */
    getProgress(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgress");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'raw': opts['raw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Progress;
      return this.apiClient.callApi(
        '/projects/{id}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a translation project
     * View the details of a translation project in your account.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [_with] Include detailed information. Possible values 'client', 'vendor', 'score'
     * @param {module:api/ProjectApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getProject(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectVendors operation.
     * @callback module:api/ProjectApi~getProjectVendorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of vendors.
     * Get a list of vendors.
     * @param {Number} projectId Project ID
     * @param {module:api/ProjectApi~getProjectVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    getProjectVendors(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectVendors");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/projects/{projectId}/vendors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your translation projects
     * View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {Array.<module:model/ProjectStatus>} [status] Filter projects by status. Accepts multiple statuses. Possible values 'pending', 'started', 'completed'
     * @param {Boolean} [withPending = true)] deprecated. use `status[]` param.
     * @param {Boolean} [withStarted = true)] deprecated. use `status[]` param.
     * @param {Boolean} [withCompleted = true)] deprecated. use `status[]` param.
     * @param {module:model/String} [orderBy = 'id')] 
     * @param {module:model/ListOrderType} [orderType] 
     * @param {Array.<module:model/String>} [_with] Include detailed information. Possible values 'client', 'vendor'
     * @param {module:api/ProjectApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'status[]': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'with_pending': opts['withPending'],
        'with_started': opts['withStarted'],
        'with_completed': opts['withCompleted'],
        'order_by': opts['orderBy'],
        'order_type': opts['orderType'],
        'with[]': this.apiClient.buildCollectionParam(opts['_with'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteIdFromInternalId operation.
     * @callback module:api/ProjectApi~getQuoteIdFromInternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Quote Id
     * Get Quote Id
     * @param {Number} projectId Project ID
     * @param {module:api/ProjectApi~getQuoteIdFromInternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectId}
     */
    getQuoteIdFromInternalId(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getQuoteIdFromInternalId");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectId;
      return this.apiClient.callApi(
        '/projects/from-internal-id/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorProjects operation.
     * @callback module:api/ProjectApi~getVendorProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects as a vendor
     * Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [joined] Return only projects that this user has already joined
     * @param {Boolean} [completed] Return only projects that have been completed. When `true`, this makes `joined` true as well.
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:api/ProjectApi~getVendorProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getVendorProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'joined': opts['joined'],
        'completed': opts['completed'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/projects/vendor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVendorProjectsByUserId operation.
     * @callback module:api/ProjectApi~getVendorProjectsByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of user/vendor projects
     * Get a list of user/vendor projects
     * @param {Number} userId User ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [joined] Return only projects that this user has already joined
     * @param {Boolean} [completed] Return only projects that have been completed. When `true`, this makes `joined` true as well.
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 10)] 
     * @param {module:api/ProjectApi~getVendorProjectsByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getVendorProjectsByUserId(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getVendorProjectsByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'joined': opts['joined'],
        'completed': opts['completed'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/{userId}/projects/vendor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the launchProject operation.
     * @callback module:api/ProjectApi~launchProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launch your translation project
     * Launch your translation project so MotaWord can actually start working on your translation.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPayment} [projectPayment] 
     * @param {module:api/ProjectApi~launchProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectLaunchResponse}
     */
    launchProject(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPayment'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling launchProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{id}/launch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLanguage operation.
     * @callback module:api/ProjectApi~packageLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Package} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Package your translated project language
     * Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
     * @param {Number} id Project ID
     * @param {String} language Language code. You can package the translation of only a specific language.
     * @param {Object} opts Optional parameters
     * @param {Number} [async = 0)] If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.
     * @param {module:api/ProjectApi~packageLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Package}
     */
    packageLanguage(id, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling packageLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling packageLanguage");
      }

      let pathParams = {
        'id': id,
        'language': language
      };
      let queryParams = {
        'async': opts['async']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Package;
      return this.apiClient.callApi(
        '/projects/{id}/package/{language}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recreateProject operation.
     * @callback module:api/ProjectApi~recreateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recreate your translation project from scratch. This is a risky action, you will lose current translations.
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~recreateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    recreateProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recreateProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/recreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendQuoteEmail operation.
     * @callback module:api/ProjectApi~sendQuoteEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a quote email
     * Send a quote email
     * @param {Number} id Project ID
     * @param {module:api/ProjectApi~sendQuoteEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    sendQuoteEmail(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendQuoteEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/email-quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitProjectReports operation.
     * @callback module:api/ProjectApi~submitProjectReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit feedback report for a project
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportContent} [reportContent] 
     * @param {module:api/ProjectApi~submitProjectReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    submitProjectReports(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['reportContent'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitProjectReports");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/projects/{id}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the trackPackage operation.
     * @callback module:api/ProjectApi~trackPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track translation packaging status
     * Track the packaging status of your translations, by using the `key` from packaging request. Once packaging is completed, you can download your translations via `/download` endpoints.
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {String} [key] This is the package tracking key provided in the response of a /package call.
     * @param {module:api/ProjectApi~trackPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageStatus}
     */
    trackPackage(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trackPackage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageStatus;
      return this.apiClient.callApi(
        '/projects/{id}/package/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerCallback operation.
     * @callback module:api/ProjectApi~triggerCallbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallbackResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a call to your callback URL related to this project.
     * Trigger a call to your callback URL related to this project.
     * @param {Number} id Project ID
     * @param {module:model/String} actionType Callback type
     * @param {module:api/ProjectApi~triggerCallbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallbackResult}
     */
    triggerCallback(id, actionType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerCallback");
      }
      // verify the required parameter 'actionType' is set
      if (actionType === undefined || actionType === null) {
        throw new Error("Missing the required parameter 'actionType' when calling triggerCallback");
      }

      let pathParams = {
        'id': id,
        'actionType': actionType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallbackResult;
      return this.apiClient.callApi(
        '/projects/{id}/callback/{actionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project info and settings
     * @param {Number} id Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectUpdate} [projectUpdate] 
     * @param {module:api/ProjectApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    updateProject(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mwoAuth', 'mwoAuth', 'mwoAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
