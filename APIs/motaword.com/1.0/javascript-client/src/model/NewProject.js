/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewProject model module.
 * @module model/NewProject
 * @version 1.0
 */
class NewProject {
    /**
     * Constructs a new <code>NewProject</code>.
     * @alias module:model/NewProject
     */
    constructor() { 
        
        NewProject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewProject} obj Optional instance to populate.
     * @return {module:model/NewProject} The populated <code>NewProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewProject();

            if (data.hasOwnProperty('callback_url')) {
                obj['callback_url'] = ApiClient.convertToType(data['callback_url'], 'String');
            }
            if (data.hasOwnProperty('coupon_code')) {
                obj['coupon_code'] = ApiClient.convertToType(data['coupon_code'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], ['String']);
            }
            if (data.hasOwnProperty('documents[]')) {
                obj['documents[]'] = ApiClient.convertToType(data['documents[]'], File);
            }
            if (data.hasOwnProperty('glossaries[]')) {
                obj['glossaries[]'] = ApiClient.convertToType(data['glossaries[]'], File);
            }
            if (data.hasOwnProperty('source_language')) {
                obj['source_language'] = ApiClient.convertToType(data['source_language'], 'String');
            }
            if (data.hasOwnProperty('styleguides[]')) {
                obj['styleguides[]'] = ApiClient.convertToType(data['styleguides[]'], File);
            }
            if (data.hasOwnProperty('target_languages[]')) {
                obj['target_languages[]'] = ApiClient.convertToType(data['target_languages[]'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewProject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['callback_url'] && !(typeof data['callback_url'] === 'string' || data['callback_url'] instanceof String)) {
            throw new Error("Expected the field `callback_url` to be a primitive type in the JSON string but got " + data['callback_url']);
        }
        // ensure the json data is a string
        if (data['coupon_code'] && !(typeof data['coupon_code'] === 'string' || data['coupon_code'] instanceof String)) {
            throw new Error("Expected the field `coupon_code` to be a primitive type in the JSON string but got " + data['coupon_code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['custom'])) {
            throw new Error("Expected the field `custom` to be an array in the JSON data but got " + data['custom']);
        }
        // ensure the json data is a string
        if (data['source_language'] && !(typeof data['source_language'] === 'string' || data['source_language'] instanceof String)) {
            throw new Error("Expected the field `source_language` to be a primitive type in the JSON string but got " + data['source_language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_languages[]'])) {
            throw new Error("Expected the field `target_languages[]` to be an array in the JSON data but got " + data['target_languages[]']);
        }

        return true;
    }


}



/**
 * Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
 * @member {String} callback_url
 */
NewProject.prototype['callback_url'] = undefined;

/**
 * Coupon code to redeem
 * @member {String} coupon_code
 */
NewProject.prototype['coupon_code'] = undefined;

/**
 * Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.
 * @member {Array.<String>} custom
 */
NewProject.prototype['custom'] = undefined;

/**
 * Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.
 * @member {File} documents[]
 */
NewProject.prototype['documents[]'] = undefined;

/**
 * Optional. Only one glossary is supported at the moment.
 * @member {File} glossaries[]
 */
NewProject.prototype['glossaries[]'] = undefined;

/**
 * @member {String} source_language
 */
NewProject.prototype['source_language'] = undefined;

/**
 * Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.
 * @member {File} styleguides[]
 */
NewProject.prototype['styleguides[]'] = undefined;

/**
 * @member {Array.<String>} target_languages[]
 */
NewProject.prototype['target_languages[]'] = undefined;






export default NewProject;

