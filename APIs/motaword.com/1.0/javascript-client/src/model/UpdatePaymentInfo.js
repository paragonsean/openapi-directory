/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The UpdatePaymentInfo model module.
 * @module model/UpdatePaymentInfo
 * @version 1.0
 */
class UpdatePaymentInfo {
    /**
     * Constructs a new <code>UpdatePaymentInfo</code>.
     * @alias module:model/UpdatePaymentInfo
     * @implements module:model/Address
     */
    constructor() { 
        Address.initialize(this);
        UpdatePaymentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatePaymentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePaymentInfo} obj Optional instance to populate.
     * @return {module:model/UpdatePaymentInfo} The populated <code>UpdatePaymentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePaymentInfo();
            Address.constructFromObject(data, obj);

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('save_as_corporate_primary')) {
                obj['save_as_corporate_primary'] = ApiClient.convertToType(data['save_as_corporate_primary'], 'Boolean');
            }
            if (data.hasOwnProperty('share_with_corporate_users')) {
                obj['share_with_corporate_users'] = ApiClient.convertToType(data['share_with_corporate_users'], 'Boolean');
            }
            if (data.hasOwnProperty('stripeToken')) {
                obj['stripeToken'] = ApiClient.convertToType(data['stripeToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePaymentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePaymentInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['stripeToken'] && !(typeof data['stripeToken'] === 'string' || data['stripeToken'] instanceof String)) {
            throw new Error("Expected the field `stripeToken` to be a primitive type in the JSON string but got " + data['stripeToken']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
UpdatePaymentInfo.prototype['city'] = undefined;

/**
 * @member {String} country
 */
UpdatePaymentInfo.prototype['country'] = undefined;

/**
 * @member {String} phone
 */
UpdatePaymentInfo.prototype['phone'] = undefined;

/**
 * @member {String} state
 */
UpdatePaymentInfo.prototype['state'] = undefined;

/**
 * @member {String} street
 */
UpdatePaymentInfo.prototype['street'] = undefined;

/**
 * @member {String} zip
 */
UpdatePaymentInfo.prototype['zip'] = undefined;

/**
 * @member {String} bin
 */
UpdatePaymentInfo.prototype['bin'] = undefined;

/**
 * @member {Boolean} save_as_corporate_primary
 */
UpdatePaymentInfo.prototype['save_as_corporate_primary'] = undefined;

/**
 * @member {Boolean} share_with_corporate_users
 */
UpdatePaymentInfo.prototype['share_with_corporate_users'] = undefined;

/**
 * @member {String} stripeToken
 */
UpdatePaymentInfo.prototype['stripeToken'] = undefined;


// Implement Address interface:
/**
 * @member {String} city
 */
Address.prototype['city'] = undefined;
/**
 * @member {String} country
 */
Address.prototype['country'] = undefined;
/**
 * @member {String} phone
 */
Address.prototype['phone'] = undefined;
/**
 * @member {String} state
 */
Address.prototype['state'] = undefined;
/**
 * @member {String} street
 */
Address.prototype['street'] = undefined;
/**
 * @member {String} zip
 */
Address.prototype['zip'] = undefined;




export default UpdatePaymentInfo;

