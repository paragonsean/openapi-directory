/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import UserUpdateContentAllOfNotifications from './UserUpdateContentAllOfNotifications';

/**
 * The UserUpdateContent model module.
 * @module model/UserUpdateContent
 * @version 1.0
 */
class UserUpdateContent {
    /**
     * Constructs a new <code>UserUpdateContent</code>.
     * @alias module:model/UserUpdateContent
     * @implements module:model/Address
     */
    constructor() { 
        Address.initialize(this);
        UserUpdateContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserUpdateContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserUpdateContent} obj Optional instance to populate.
     * @return {module:model/UserUpdateContent} The populated <code>UserUpdateContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserUpdateContent();
            Address.constructFromObject(data, obj);

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = UserUpdateContentAllOfNotifications.constructFromObject(data['notifications']);
            }
            if (data.hasOwnProperty('notify')) {
                obj['notify'] = ApiClient.convertToType(data['notify'], 'Boolean');
            }
            if (data.hasOwnProperty('paypal_email')) {
                obj['paypal_email'] = ApiClient.convertToType(data['paypal_email'], 'String');
            }
            if (data.hasOwnProperty('require_1099')) {
                obj['require_1099'] = ApiClient.convertToType(data['require_1099'], 'Boolean');
            }
            if (data.hasOwnProperty('user_groups')) {
                obj['user_groups'] = ApiClient.convertToType(data['user_groups'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserUpdateContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserUpdateContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // validate the optional field `notifications`
        if (data['notifications']) { // data not null
          UserUpdateContentAllOfNotifications.validateJSON(data['notifications']);
        }
        // ensure the json data is a string
        if (data['paypal_email'] && !(typeof data['paypal_email'] === 'string' || data['paypal_email'] instanceof String)) {
            throw new Error("Expected the field `paypal_email` to be a primitive type in the JSON string but got " + data['paypal_email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['user_groups'])) {
            throw new Error("Expected the field `user_groups` to be an array in the JSON data but got " + data['user_groups']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
UserUpdateContent.prototype['city'] = undefined;

/**
 * @member {String} country
 */
UserUpdateContent.prototype['country'] = undefined;

/**
 * @member {String} phone
 */
UserUpdateContent.prototype['phone'] = undefined;

/**
 * @member {String} state
 */
UserUpdateContent.prototype['state'] = undefined;

/**
 * @member {String} street
 */
UserUpdateContent.prototype['street'] = undefined;

/**
 * @member {String} zip
 */
UserUpdateContent.prototype['zip'] = undefined;

/**
 * @member {Date} birthday
 */
UserUpdateContent.prototype['birthday'] = undefined;

/**
 * Optional. User e-mail.
 * @member {String} email
 */
UserUpdateContent.prototype['email'] = undefined;

/**
 * Optional. User first name.
 * @member {String} first_name
 */
UserUpdateContent.prototype['first_name'] = undefined;

/**
 * Optional. ID of the user being updated.
 * @member {Number} id
 */
UserUpdateContent.prototype['id'] = undefined;

/**
 * Optional. User last name.
 * @member {String} last_name
 */
UserUpdateContent.prototype['last_name'] = undefined;

/**
 * @member {module:model/UserUpdateContentAllOfNotifications} notifications
 */
UserUpdateContent.prototype['notifications'] = undefined;

/**
 * Notify new user account creation with login information and MotaWord introduction.
 * @member {Boolean} notify
 */
UserUpdateContent.prototype['notify'] = undefined;

/**
 * Optional. Vendor paypal e-mail
 * @member {String} paypal_email
 */
UserUpdateContent.prototype['paypal_email'] = undefined;

/**
 * Optional. Whether this vendor requires 1099 form in US for their earnings.
 * @member {Boolean} require_1099
 */
UserUpdateContent.prototype['require_1099'] = undefined;

/**
 * A list of user group IDs
 * @member {Array.<Number>} user_groups
 */
UserUpdateContent.prototype['user_groups'] = undefined;


// Implement Address interface:
/**
 * @member {String} city
 */
Address.prototype['city'] = undefined;
/**
 * @member {String} country
 */
Address.prototype['country'] = undefined;
/**
 * @member {String} phone
 */
Address.prototype['phone'] = undefined;
/**
 * @member {String} state
 */
Address.prototype['state'] = undefined;
/**
 * @member {String} street
 */
Address.prototype['street'] = undefined;
/**
 * @member {String} zip
 */
Address.prototype['zip'] = undefined;




export default UserUpdateContent;

