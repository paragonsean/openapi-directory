/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProofreaderWithLanguage model module.
 * @module model/ProofreaderWithLanguage
 * @version 1.0
 */
class ProofreaderWithLanguage {
    /**
     * Constructs a new <code>ProofreaderWithLanguage</code>.
     * @alias module:model/ProofreaderWithLanguage
     */
    constructor() { 
        
        ProofreaderWithLanguage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProofreaderWithLanguage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProofreaderWithLanguage} obj Optional instance to populate.
     * @return {module:model/ProofreaderWithLanguage} The populated <code>ProofreaderWithLanguage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProofreaderWithLanguage();

            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('vendor_link')) {
                obj['vendor_link'] = ApiClient.convertToType(data['vendor_link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProofreaderWithLanguage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProofreaderWithLanguage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['vendor_link'] && !(typeof data['vendor_link'] === 'string' || data['vendor_link'] instanceof String)) {
            throw new Error("Expected the field `vendor_link` to be a primitive type in the JSON string but got " + data['vendor_link']);
        }

        return true;
    }


}



/**
 * full name of the proofreader
 * @member {String} full_name
 */
ProofreaderWithLanguage.prototype['full_name'] = undefined;

/**
 * proofreader id
 * @member {Number} id
 */
ProofreaderWithLanguage.prototype['id'] = undefined;

/**
 * language code (i.e en-US)
 * @member {String} language
 */
ProofreaderWithLanguage.prototype['language'] = undefined;

/**
 * link to the vendor that can be only used in motaword admin application
 * @member {String} vendor_link
 */
ProofreaderWithLanguage.prototype['vendor_link'] = undefined;






export default ProofreaderWithLanguage;

