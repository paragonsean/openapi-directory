/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PamMessage model module.
 * @module model/PamMessage
 * @version 1.0
 */
class PamMessage {
    /**
     * Constructs a new <code>PamMessage</code>.
     * @alias module:model/PamMessage
     */
    constructor() { 
        
        PamMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PamMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PamMessage} obj Optional instance to populate.
     * @return {module:model/PamMessage} The populated <code>PamMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PamMessage();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], ['String']);
            }
            if (data.hasOwnProperty('slots')) {
                obj['slots'] = ApiClient.convertToType(data['slots'], ['String']);
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('thread_key')) {
                obj['thread_key'] = ApiClient.convertToType(data['thread_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PamMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PamMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recipients'])) {
            throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['slots'])) {
            throw new Error("Expected the field `slots` to be an array in the JSON data but got " + data['slots']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['thread_key'] && !(typeof data['thread_key'] === 'string' || data['thread_key'] instanceof String)) {
            throw new Error("Expected the field `thread_key` to be a primitive type in the JSON string but got " + data['thread_key']);
        }

        return true;
    }


}



/**
 * the message to be sent
 * @member {String} message
 */
PamMessage.prototype['message'] = undefined;

/**
 * name of the recipients in the channel
 * @member {Array.<String>} recipients
 */
PamMessage.prototype['recipients'] = undefined;

/**
 * contexts for next message
 * @member {Array.<String>} slots
 */
PamMessage.prototype['slots'] = undefined;

/**
 * id of the thread
 * @member {String} thread_id
 */
PamMessage.prototype['thread_id'] = undefined;

/**
 * the key for thread_id default is project
 * @member {String} thread_key
 */
PamMessage.prototype['thread_key'] = undefined;






export default PamMessage;

