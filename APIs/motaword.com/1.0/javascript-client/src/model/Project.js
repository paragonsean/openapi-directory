/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import ProjectLinks from './ProjectLinks';
import ProjectPrice from './ProjectPrice';
import ProjectSource from './ProjectSource';
import ProjectStatus from './ProjectStatus';
import ProjectWordCountAnalysis from './ProjectWordCountAnalysis';
import User from './User';
import VendorProjectPair from './VendorProjectPair';
import VendorProjectRole from './VendorProjectRole';

/**
 * The Project model module.
 * @module model/Project
 * @version 1.0
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * @alias module:model/Project
     */
    constructor() { 
        
        Project.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('average_scores')) {
                obj['average_scores'] = ApiClient.convertToType(data['average_scores'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('budget_code')) {
                obj['budget_code'] = ApiClient.convertToType(data['budget_code'], 'String');
            }
            if (data.hasOwnProperty('callback_url')) {
                obj['callback_url'] = ApiClient.convertToType(data['callback_url'], 'String');
            }
            if (data.hasOwnProperty('can_pam_manage')) {
                obj['can_pam_manage'] = ApiClient.convertToType(data['can_pam_manage'], 'Boolean');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = User.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('cm_id')) {
                obj['cm_id'] = ApiClient.convertToType(data['cm_id'], 'Number');
            }
            if (data.hasOwnProperty('completed_on')) {
                obj['completed_on'] = ApiClient.convertToType(data['completed_on'], 'Date');
            }
            if (data.hasOwnProperty('continuous_project_type')) {
                obj['continuous_project_type'] = ApiClient.convertToType(data['continuous_project_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], Object);
            }
            if (data.hasOwnProperty('delivery_at')) {
                obj['delivery_at'] = ApiClient.convertToType(data['delivery_at'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_api_project')) {
                obj['is_api_project'] = ApiClient.convertToType(data['is_api_project'], 'Boolean');
            }
            if (data.hasOwnProperty('is_certified')) {
                obj['is_certified'] = ApiClient.convertToType(data['is_certified'], 'Boolean');
            }
            if (data.hasOwnProperty('is_continuous')) {
                obj['is_continuous'] = ApiClient.convertToType(data['is_continuous'], 'Boolean');
            }
            if (data.hasOwnProperty('is_manual')) {
                obj['is_manual'] = ApiClient.convertToType(data['is_manual'], 'Boolean');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ProjectLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('pairs')) {
                obj['pairs'] = ApiClient.convertToType(data['pairs'], [VendorProjectPair]);
            }
            if (data.hasOwnProperty('pivoted_projects')) {
                obj['pivoted_projects'] = ApiClient.convertToType(data['pivoted_projects'], ['Number']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ProjectPrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('price_without_discount')) {
                obj['price_without_discount'] = ProjectPrice.constructFromObject(data['price_without_discount']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = VendorProjectRole.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('should_send_client_survey')) {
                obj['should_send_client_survey'] = ApiClient.convertToType(data['should_send_client_survey'], 'Boolean');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ProjectSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_language')) {
                obj['source_language'] = ApiClient.convertToType(data['source_language'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ProjectStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subjects')) {
                obj['subjects'] = ApiClient.convertToType(data['subjects'], ['String']);
            }
            if (data.hasOwnProperty('target_languages')) {
                obj['target_languages'] = ApiClient.convertToType(data['target_languages'], ['String']);
            }
            if (data.hasOwnProperty('tms_name')) {
                obj['tms_name'] = ApiClient.convertToType(data['tms_name'], 'String');
            }
            if (data.hasOwnProperty('valid_until')) {
                obj['valid_until'] = ApiClient.convertToType(data['valid_until'], 'Number');
            }
            if (data.hasOwnProperty('vendor_word_count')) {
                obj['vendor_word_count'] = ApiClient.convertToType(data['vendor_word_count'], 'Number');
            }
            if (data.hasOwnProperty('word_count')) {
                obj['word_count'] = ApiClient.convertToType(data['word_count'], 'Number');
            }
            if (data.hasOwnProperty('word_count_analysis')) {
                obj['word_count_analysis'] = ProjectWordCountAnalysis.constructFromObject(data['word_count_analysis']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Project</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Project</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['budget_code'] && !(typeof data['budget_code'] === 'string' || data['budget_code'] instanceof String)) {
            throw new Error("Expected the field `budget_code` to be a primitive type in the JSON string but got " + data['budget_code']);
        }
        // ensure the json data is a string
        if (data['callback_url'] && !(typeof data['callback_url'] === 'string' || data['callback_url'] instanceof String)) {
            throw new Error("Expected the field `callback_url` to be a primitive type in the JSON string but got " + data['callback_url']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          User.validateJSON(data['client']);
        }
        // ensure the json data is a string
        if (data['continuous_project_type'] && !(typeof data['continuous_project_type'] === 'string' || data['continuous_project_type'] instanceof String)) {
            throw new Error("Expected the field `continuous_project_type` to be a primitive type in the JSON string but got " + data['continuous_project_type']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ProjectLinks.validateJSON(data['links']);
        }
        if (data['pairs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pairs'])) {
                throw new Error("Expected the field `pairs` to be an array in the JSON data but got " + data['pairs']);
            }
            // validate the optional field `pairs` (array)
            for (const item of data['pairs']) {
                VendorProjectPair.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pivoted_projects'])) {
            throw new Error("Expected the field `pivoted_projects` to be an array in the JSON data but got " + data['pivoted_projects']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          ProjectPrice.validateJSON(data['price']);
        }
        // validate the optional field `price_without_discount`
        if (data['price_without_discount']) { // data not null
          ProjectPrice.validateJSON(data['price_without_discount']);
        }
        // ensure the json data is a string
        if (data['source_language'] && !(typeof data['source_language'] === 'string' || data['source_language'] instanceof String)) {
            throw new Error("Expected the field `source_language` to be a primitive type in the JSON string but got " + data['source_language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjects'])) {
            throw new Error("Expected the field `subjects` to be an array in the JSON data but got " + data['subjects']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_languages'])) {
            throw new Error("Expected the field `target_languages` to be an array in the JSON data but got " + data['target_languages']);
        }
        // ensure the json data is a string
        if (data['tms_name'] && !(typeof data['tms_name'] === 'string' || data['tms_name'] instanceof String)) {
            throw new Error("Expected the field `tms_name` to be a primitive type in the JSON string but got " + data['tms_name']);
        }
        // validate the optional field `word_count_analysis`
        if (data['word_count_analysis']) { // data not null
          ProjectWordCountAnalysis.validateJSON(data['word_count_analysis']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, Number>} average_scores
 */
Project.prototype['average_scores'] = undefined;

/**
 * @member {String} budget_code
 */
Project.prototype['budget_code'] = undefined;

/**
 * Callback URL to notify when project status changed.
 * @member {String} callback_url
 */
Project.prototype['callback_url'] = undefined;

/**
 * @member {Boolean} can_pam_manage
 */
Project.prototype['can_pam_manage'] = undefined;

/**
 * @member {module:model/User} client
 */
Project.prototype['client'] = undefined;

/**
 * Assigned admin's id
 * @member {Number} cm_id
 */
Project.prototype['cm_id'] = undefined;

/**
 * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
 * @member {Date} completed_on
 */
Project.prototype['completed_on'] = undefined;

/**
 * @member {String} continuous_project_type
 */
Project.prototype['continuous_project_type'] = undefined;

/**
 * Unix epoch time
 * @member {Number} created_at
 */
Project.prototype['created_at'] = undefined;

/**
 * Custom data provided while creating a new project.
 * @member {Object} custom
 */
Project.prototype['custom'] = undefined;

/**
 * Unix epoch time
 * @member {Number} delivery_at
 */
Project.prototype['delivery_at'] = undefined;

/**
 * A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.
 * @member {Array.<module:model/Error>} errors
 */
Project.prototype['errors'] = undefined;

/**
 * @member {Number} id
 */
Project.prototype['id'] = undefined;

/**
 * @member {Boolean} is_api_project
 */
Project.prototype['is_api_project'] = undefined;

/**
 * @member {Boolean} is_certified
 */
Project.prototype['is_certified'] = undefined;

/**
 * @member {Boolean} is_continuous
 */
Project.prototype['is_continuous'] = undefined;

/**
 * @member {Boolean} is_manual
 */
Project.prototype['is_manual'] = undefined;

/**
 * @member {module:model/ProjectLinks} links
 */
Project.prototype['links'] = undefined;

/**
 * Currently authed vendor's available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.
 * @member {Array.<module:model/VendorProjectPair>} pairs
 */
Project.prototype['pairs'] = undefined;

/**
 * Quote IDs of pivots
 * @member {Array.<Number>} pivoted_projects
 */
Project.prototype['pivoted_projects'] = undefined;

/**
 * @member {module:model/ProjectPrice} price
 */
Project.prototype['price'] = undefined;

/**
 * @member {module:model/ProjectPrice} price_without_discount
 */
Project.prototype['price_without_discount'] = undefined;

/**
 * @member {module:model/VendorProjectRole} role
 */
Project.prototype['role'] = undefined;

/**
 * @member {Boolean} should_send_client_survey
 */
Project.prototype['should_send_client_survey'] = undefined;

/**
 * @member {module:model/ProjectSource} source
 */
Project.prototype['source'] = undefined;

/**
 * @member {String} source_language
 */
Project.prototype['source_language'] = undefined;

/**
 * @member {module:model/ProjectStatus} status
 */
Project.prototype['status'] = undefined;

/**
 * @member {Array.<String>} subjects
 */
Project.prototype['subjects'] = undefined;

/**
 * @member {Array.<String>} target_languages
 */
Project.prototype['target_languages'] = undefined;

/**
 * TMS project name for this MW project. Requires privileged scope.
 * @member {String} tms_name
 */
Project.prototype['tms_name'] = undefined;

/**
 * Unix epoch time. Available only if status is `pending`.
 * @member {Number} valid_until
 */
Project.prototype['valid_until'] = undefined;

/**
 * @member {Number} vendor_word_count
 */
Project.prototype['vendor_word_count'] = undefined;

/**
 * @member {Number} word_count
 */
Project.prototype['word_count'] = undefined;

/**
 * @member {module:model/ProjectWordCountAnalysis} word_count_analysis
 */
Project.prototype['word_count_analysis'] = undefined;






export default Project;

