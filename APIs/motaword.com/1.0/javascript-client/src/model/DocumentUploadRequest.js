/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkedSourceDocument from './LinkedSourceDocument';

/**
 * The DocumentUploadRequest model module.
 * @module model/DocumentUploadRequest
 * @version 1.0
 */
class DocumentUploadRequest {
    /**
     * Constructs a new <code>DocumentUploadRequest</code>.
     * @alias module:model/DocumentUploadRequest
     */
    constructor() { 
        
        DocumentUploadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentUploadRequest} obj Optional instance to populate.
     * @return {module:model/DocumentUploadRequest} The populated <code>DocumentUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentUploadRequest();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], File);
            }
            if (data.hasOwnProperty('schemes')) {
                obj['schemes'] = ApiClient.convertToType(data['schemes'], 'String');
            }
            if (data.hasOwnProperty('source-link')) {
                obj['source-link'] = LinkedSourceDocument.constructFromObject(data['source-link']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentUploadRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['schemes'] && !(typeof data['schemes'] === 'string' || data['schemes'] instanceof String)) {
            throw new Error("Expected the field `schemes` to be a primitive type in the JSON string but got " + data['schemes']);
        }
        // validate the optional field `source-link`
        if (data['source-link']) { // data not null
          LinkedSourceDocument.validateJSON(data['source-link']);
        }

        return true;
    }


}



/**
 * Single file data. The name is plural to provide a consistent naming convention.
 * @member {File} documents
 */
DocumentUploadRequest.prototype['documents'] = undefined;

/**
 * JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.
 * @member {String} schemes
 */
DocumentUploadRequest.prototype['schemes'] = undefined;

/**
 * @member {module:model/LinkedSourceDocument} source-link
 */
DocumentUploadRequest.prototype['source-link'] = undefined;






export default DocumentUploadRequest;

