/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenRequest model module.
 * @module model/TokenRequest
 * @version 1.0
 */
class TokenRequest {
    /**
     * Constructs a new <code>TokenRequest</code>.
     * @alias module:model/TokenRequest
     * @param grantType {String} OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'.
     * @param scope {String} Authorization scope. Use 'privileged' for private endpoints.
     */
    constructor(grantType, scope) { 
        
        TokenRequest.initialize(this, grantType, scope);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, grantType, scope) { 
        obj['grant_type'] = grantType;
        obj['scope'] = scope;
    }

    /**
     * Constructs a <code>TokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenRequest} obj Optional instance to populate.
     * @return {module:model/TokenRequest} The populated <code>TokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenRequest();

            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

TokenRequest.RequiredProperties = ["grant_type", "scope"];

/**
 * OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'.
 * @member {String} grant_type
 */
TokenRequest.prototype['grant_type'] = undefined;

/**
 * MW Account password (to be used in password grant type)
 * @member {String} password
 */
TokenRequest.prototype['password'] = undefined;

/**
 * Refresh token value for refresh token flow.
 * @member {String} refresh_token
 */
TokenRequest.prototype['refresh_token'] = undefined;

/**
 * Authorization scope. Use 'privileged' for private endpoints.
 * @member {String} scope
 */
TokenRequest.prototype['scope'] = undefined;

/**
 * Value for user_id grant type flow.
 * @member {Number} user_id
 */
TokenRequest.prototype['user_id'] = undefined;

/**
 * MW Account email (to be used in password grant type)
 * @member {String} username
 */
TokenRequest.prototype['username'] = undefined;






export default TokenRequest;

