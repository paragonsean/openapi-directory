/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingAddress from './BillingAddress';
import CreditCard from './CreditCard';
import PaymentInfoCorporate from './PaymentInfoCorporate';

/**
 * The PaymentInfo model module.
 * @module model/PaymentInfo
 * @version 1.0
 */
class PaymentInfo {
    /**
     * Constructs a new <code>PaymentInfo</code>.
     * @alias module:model/PaymentInfo
     */
    constructor() { 
        
        PaymentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInfo} obj Optional instance to populate.
     * @return {module:model/PaymentInfo} The populated <code>PaymentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInfo();

            if (data.hasOwnProperty('billing')) {
                obj['billing'] = BillingAddress.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = CreditCard.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('cards')) {
                obj['cards'] = ApiClient.convertToType(data['cards'], [CreditCard]);
            }
            if (data.hasOwnProperty('corporate')) {
                obj['corporate'] = PaymentInfoCorporate.constructFromObject(data['corporate']);
            }
            if (data.hasOwnProperty('shared_card')) {
                obj['shared_card'] = CreditCard.constructFromObject(data['shared_card']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          BillingAddress.validateJSON(data['billing']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          CreditCard.validateJSON(data['card']);
        }
        if (data['cards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cards'])) {
                throw new Error("Expected the field `cards` to be an array in the JSON data but got " + data['cards']);
            }
            // validate the optional field `cards` (array)
            for (const item of data['cards']) {
                CreditCard.validateJSON(item);
            };
        }
        // validate the optional field `corporate`
        if (data['corporate']) { // data not null
          PaymentInfoCorporate.validateJSON(data['corporate']);
        }
        // validate the optional field `shared_card`
        if (data['shared_card']) { // data not null
          CreditCard.validateJSON(data['shared_card']);
        }

        return true;
    }


}



/**
 * @member {module:model/BillingAddress} billing
 */
PaymentInfo.prototype['billing'] = undefined;

/**
 * @member {module:model/CreditCard} card
 */
PaymentInfo.prototype['card'] = undefined;

/**
 * @member {Array.<module:model/CreditCard>} cards
 */
PaymentInfo.prototype['cards'] = undefined;

/**
 * @member {module:model/PaymentInfoCorporate} corporate
 */
PaymentInfo.prototype['corporate'] = undefined;

/**
 * @member {module:model/CreditCard} shared_card
 */
PaymentInfo.prototype['shared_card'] = undefined;






export default PaymentInfo;

