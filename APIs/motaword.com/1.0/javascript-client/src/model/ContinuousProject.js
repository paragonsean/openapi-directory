/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContinuousProjectLinks from './ContinuousProjectLinks';
import Subscription from './Subscription';

/**
 * The ContinuousProject model module.
 * @module model/ContinuousProject
 * @version 1.0
 */
class ContinuousProject {
    /**
     * Constructs a new <code>ContinuousProject</code>.
     * @alias module:model/ContinuousProject
     */
    constructor() { 
        
        ContinuousProject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContinuousProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContinuousProject} obj Optional instance to populate.
     * @return {module:model/ContinuousProject} The populated <code>ContinuousProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContinuousProject();

            if (data.hasOwnProperty('analytics_enabled')) {
                obj['analytics_enabled'] = ApiClient.convertToType(data['analytics_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_start_postedit')) {
                obj['auto_start_postedit'] = ApiClient.convertToType(data['auto_start_postedit'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_enabled')) {
                obj['is_enabled'] = ApiClient.convertToType(data['is_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('last_activity_at')) {
                obj['last_activity_at'] = ApiClient.convertToType(data['last_activity_at'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ContinuousProjectLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('mt_enabled')) {
                obj['mt_enabled'] = ApiClient.convertToType(data['mt_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('mt_engine')) {
                obj['mt_engine'] = ApiClient.convertToType(data['mt_engine'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postedit_enabled')) {
                obj['postedit_enabled'] = ApiClient.convertToType(data['postedit_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('source_language')) {
                obj['source_language'] = ApiClient.convertToType(data['source_language'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = Subscription.constructFromObject(data['subscription']);
            }
            if (data.hasOwnProperty('target_languages')) {
                obj['target_languages'] = ApiClient.convertToType(data['target_languages'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('word_count')) {
                obj['word_count'] = ApiClient.convertToType(data['word_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContinuousProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContinuousProject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `links`
        if (data['links']) { // data not null
          ContinuousProjectLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['mt_engine'] && !(typeof data['mt_engine'] === 'string' || data['mt_engine'] instanceof String)) {
            throw new Error("Expected the field `mt_engine` to be a primitive type in the JSON string but got " + data['mt_engine']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source_language'] && !(typeof data['source_language'] === 'string' || data['source_language'] instanceof String)) {
            throw new Error("Expected the field `source_language` to be a primitive type in the JSON string but got " + data['source_language']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `subscription`
        if (data['subscription']) { // data not null
          Subscription.validateJSON(data['subscription']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_languages'])) {
            throw new Error("Expected the field `target_languages` to be an array in the JSON data but got " + data['target_languages']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Should we collect analytics data from Active for this continuous project?
 * @member {Boolean} analytics_enabled
 */
ContinuousProject.prototype['analytics_enabled'] = undefined;

/**
 * Immediately start post-editing project for translation requests that are applied MT.
 * @member {Boolean} auto_start_postedit
 */
ContinuousProject.prototype['auto_start_postedit'] = undefined;

/**
 * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
 * @member {Date} created_at
 */
ContinuousProject.prototype['created_at'] = undefined;

/**
 * @member {Number} id
 */
ContinuousProject.prototype['id'] = undefined;

/**
 * @member {Boolean} is_enabled
 */
ContinuousProject.prototype['is_enabled'] = undefined;

/**
 * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
 * @member {Date} last_activity_at
 */
ContinuousProject.prototype['last_activity_at'] = undefined;

/**
 * @member {module:model/ContinuousProjectLinks} links
 */
ContinuousProject.prototype['links'] = undefined;

/**
 * Immediately apply MT on translation requests if they are missing from TM.
 * @member {Boolean} mt_enabled
 */
ContinuousProject.prototype['mt_enabled'] = undefined;

/**
 * One of \"MOTAWORD\", \"GOOGLE\", \"AMAZON\", \"MS\". Default is \"MOTAWORD\".
 * @member {String} mt_engine
 */
ContinuousProject.prototype['mt_engine'] = undefined;

/**
 * @member {String} name
 */
ContinuousProject.prototype['name'] = undefined;

/**
 * Get an instant quote for translation requests that are applied MT.
 * @member {Boolean} postedit_enabled
 */
ContinuousProject.prototype['postedit_enabled'] = undefined;

/**
 * @member {String} source_language
 */
ContinuousProject.prototype['source_language'] = undefined;

/**
 * One of \"a => ACTIVE\", \"i => INACTIVE\", \"d => DELETED\", \"c => SCHEDULED CANCELLATION\", \"p => SCHEDULED CHANGE\"
 * @member {String} status
 */
ContinuousProject.prototype['status'] = undefined;

/**
 * @member {module:model/Subscription} subscription
 */
ContinuousProject.prototype['subscription'] = undefined;

/**
 * @member {Array.<String>} target_languages
 */
ContinuousProject.prototype['target_languages'] = undefined;

/**
 * Continuous project type. We currently have only 2 types, NULL and \"active\".
 * @member {String} type
 */
ContinuousProject.prototype['type'] = undefined;

/**
 * @member {Number} word_count
 */
ContinuousProject.prototype['word_count'] = undefined;






export default ContinuousProject;

