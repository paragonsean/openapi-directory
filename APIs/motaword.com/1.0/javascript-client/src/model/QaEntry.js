/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleModel from './SimpleModel';

/**
 * The QaEntry model module.
 * @module model/QaEntry
 * @version 1.0
 */
class QaEntry {
    /**
     * Constructs a new <code>QaEntry</code>.
     * @alias module:model/QaEntry
     */
    constructor() { 
        
        QaEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QaEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QaEntry} obj Optional instance to populate.
     * @return {module:model/QaEntry} The populated <code>QaEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QaEntry();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('docId')) {
                obj['docId'] = ApiClient.convertToType(data['docId'], 'String');
            }
            if (data.hasOwnProperty('editorLink')) {
                obj['editorLink'] = ApiClient.convertToType(data['editorLink'], 'String');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('inSource')) {
                obj['inSource'] = ApiClient.convertToType(data['inSource'], 'Boolean');
            }
            if (data.hasOwnProperty('isCurrent')) {
                obj['isCurrent'] = ApiClient.convertToType(data['isCurrent'], 'Boolean');
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ApiClient.convertToType(data['module'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = SimpleModel.constructFromObject(data['projectId']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('sourceLanguage')) {
                obj['sourceLanguage'] = SimpleModel.constructFromObject(data['sourceLanguage']);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('targetLanguage')) {
                obj['targetLanguage'] = SimpleModel.constructFromObject(data['targetLanguage']);
            }
            if (data.hasOwnProperty('translation')) {
                obj['translation'] = ApiClient.convertToType(data['translation'], 'String');
            }
            if (data.hasOwnProperty('uniqueKey')) {
                obj['uniqueKey'] = ApiClient.convertToType(data['uniqueKey'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = SimpleModel.constructFromObject(data['vendor']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QaEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QaEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['docId'] && !(typeof data['docId'] === 'string' || data['docId'] instanceof String)) {
            throw new Error("Expected the field `docId` to be a primitive type in the JSON string but got " + data['docId']);
        }
        // ensure the json data is a string
        if (data['editorLink'] && !(typeof data['editorLink'] === 'string' || data['editorLink'] instanceof String)) {
            throw new Error("Expected the field `editorLink` to be a primitive type in the JSON string but got " + data['editorLink']);
        }
        // ensure the json data is a string
        if (data['module'] && !(typeof data['module'] === 'string' || data['module'] instanceof String)) {
            throw new Error("Expected the field `module` to be a primitive type in the JSON string but got " + data['module']);
        }
        // validate the optional field `projectId`
        if (data['projectId']) { // data not null
          SimpleModel.validateJSON(data['projectId']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // validate the optional field `sourceLanguage`
        if (data['sourceLanguage']) { // data not null
          SimpleModel.validateJSON(data['sourceLanguage']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `targetLanguage`
        if (data['targetLanguage']) { // data not null
          SimpleModel.validateJSON(data['targetLanguage']);
        }
        // ensure the json data is a string
        if (data['translation'] && !(typeof data['translation'] === 'string' || data['translation'] instanceof String)) {
            throw new Error("Expected the field `translation` to be a primitive type in the JSON string but got " + data['translation']);
        }
        // ensure the json data is a string
        if (data['uniqueKey'] && !(typeof data['uniqueKey'] === 'string' || data['uniqueKey'] instanceof String)) {
            throw new Error("Expected the field `uniqueKey` to be a primitive type in the JSON string but got " + data['uniqueKey']);
        }
        // validate the optional field `vendor`
        if (data['vendor']) { // data not null
          SimpleModel.validateJSON(data['vendor']);
        }

        return true;
    }


}



/**
 * @member {String} category
 */
QaEntry.prototype['category'] = undefined;

/**
 * @member {String} comment
 */
QaEntry.prototype['comment'] = undefined;

/**
 * @member {String} docId
 */
QaEntry.prototype['docId'] = undefined;

/**
 * @member {String} editorLink
 */
QaEntry.prototype['editorLink'] = undefined;

/**
 * @member {Number} end
 */
QaEntry.prototype['end'] = undefined;

/**
 * @member {Boolean} inSource
 */
QaEntry.prototype['inSource'] = undefined;

/**
 * @member {Boolean} isCurrent
 */
QaEntry.prototype['isCurrent'] = undefined;

/**
 * @member {String} module
 */
QaEntry.prototype['module'] = undefined;

/**
 * @member {module:model/SimpleModel} projectId
 */
QaEntry.prototype['projectId'] = undefined;

/**
 * @member {String} severity
 */
QaEntry.prototype['severity'] = undefined;

/**
 * @member {String} source
 */
QaEntry.prototype['source'] = undefined;

/**
 * @member {module:model/SimpleModel} sourceLanguage
 */
QaEntry.prototype['sourceLanguage'] = undefined;

/**
 * @member {Number} start
 */
QaEntry.prototype['start'] = undefined;

/**
 * @member {String} state
 */
QaEntry.prototype['state'] = undefined;

/**
 * @member {module:model/SimpleModel} targetLanguage
 */
QaEntry.prototype['targetLanguage'] = undefined;

/**
 * @member {String} translation
 */
QaEntry.prototype['translation'] = undefined;

/**
 * @member {String} uniqueKey
 */
QaEntry.prototype['uniqueKey'] = undefined;

/**
 * @member {module:model/SimpleModel} vendor
 */
QaEntry.prototype['vendor'] = undefined;






export default QaEntry;

