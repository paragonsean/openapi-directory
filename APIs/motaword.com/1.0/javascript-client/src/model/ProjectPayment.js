/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectPayment model module.
 * @module model/ProjectPayment
 * @version 1.0
 */
class ProjectPayment {
    /**
     * Constructs a new <code>ProjectPayment</code>.
     * @alias module:model/ProjectPayment
     */
    constructor() { 
        
        ProjectPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectPayment} obj Optional instance to populate.
     * @return {module:model/ProjectPayment} The populated <code>ProjectPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectPayment();

            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('budget_code')) {
                obj['budget_code'] = ApiClient.convertToType(data['budget_code'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'Number');
            }
            if (data.hasOwnProperty('payment_code')) {
                obj['payment_code'] = ApiClient.convertToType(data['payment_code'], 'String');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'String');
            }
            if (data.hasOwnProperty('stripe_token')) {
                obj['stripe_token'] = ApiClient.convertToType(data['stripe_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectPayment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['budget_code'] && !(typeof data['budget_code'] === 'string' || data['budget_code'] instanceof String)) {
            throw new Error("Expected the field `budget_code` to be a primitive type in the JSON string but got " + data['budget_code']);
        }
        // ensure the json data is a string
        if (data['payment_code'] && !(typeof data['payment_code'] === 'string' || data['payment_code'] instanceof String)) {
            throw new Error("Expected the field `payment_code` to be a primitive type in the JSON string but got " + data['payment_code']);
        }
        // ensure the json data is a string
        if (data['payment_method'] && !(typeof data['payment_method'] === 'string' || data['payment_method'] instanceof String)) {
            throw new Error("Expected the field `payment_method` to be a primitive type in the JSON string but got " + data['payment_method']);
        }
        // ensure the json data is a string
        if (data['stripe_token'] && !(typeof data['stripe_token'] === 'string' || data['stripe_token'] instanceof String)) {
            throw new Error("Expected the field `stripe_token` to be a primitive type in the JSON string but got " + data['stripe_token']);
        }

        return true;
    }


}



/**
 * Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.
 * @member {String} bin
 */
ProjectPayment.prototype['bin'] = undefined;

/**
 * Optional with corporate accounts. Not available for others.
 * @member {String} budget_code
 */
ProjectPayment.prototype['budget_code'] = undefined;

/**
 * Optional. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin.
 * @member {Number} card_id
 */
ProjectPayment.prototype['card_id'] = undefined;

/**
 * Optional. `corporate` payment method requires this.s
 * @member {String} payment_code
 */
ProjectPayment.prototype['payment_code'] = undefined;

/**
 * Optional. Determines which method to use for payment. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin. `corporate` method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate's primary card.
 * @member {module:model/ProjectPayment.PaymentMethodEnum} payment_method
 */
ProjectPayment.prototype['payment_method'] = undefined;

/**
 * This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with `stripe_token`, you must also provide `bin`, last 4 digits of the card.
 * @member {String} stripe_token
 */
ProjectPayment.prototype['stripe_token'] = undefined;





/**
 * Allowed values for the <code>payment_method</code> property.
 * @enum {String}
 * @readonly
 */
ProjectPayment['PaymentMethodEnum'] = {

    /**
     * value: "corporate"
     * @const
     */
    "corporate": "corporate",

    /**
     * value: "client"
     * @const
     */
    "client": "client",

    /**
     * value: "app"
     * @const
     */
    "app": "app",

    /**
     * value: "credit"
     * @const
     */
    "credit": "credit",

    /**
     * value: "corporate_card"
     * @const
     */
    "corporate_card": "corporate_card"
};



export default ProjectPayment;

