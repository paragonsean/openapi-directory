/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlogArticleLinks from './BlogArticleLinks';

/**
 * The BlogArticle model module.
 * @module model/BlogArticle
 * @version 1.0
 */
class BlogArticle {
    /**
     * Constructs a new <code>BlogArticle</code>.
     * @alias module:model/BlogArticle
     */
    constructor() { 
        
        BlogArticle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlogArticle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlogArticle} obj Optional instance to populate.
     * @return {module:model/BlogArticle} The populated <code>BlogArticle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlogArticle();

            if (data.hasOwnProperty('announcement_type')) {
                obj['announcement_type'] = ApiClient.convertToType(data['announcement_type'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('excerpt')) {
                obj['excerpt'] = ApiClient.convertToType(data['excerpt'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = BlogArticleLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlogArticle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlogArticle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['announcement_type'] && !(typeof data['announcement_type'] === 'string' || data['announcement_type'] instanceof String)) {
            throw new Error("Expected the field `announcement_type` to be a primitive type in the JSON string but got " + data['announcement_type']);
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['excerpt'] && !(typeof data['excerpt'] === 'string' || data['excerpt'] instanceof String)) {
            throw new Error("Expected the field `excerpt` to be a primitive type in the JSON string but got " + data['excerpt']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          BlogArticleLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * @member {module:model/BlogArticle.AnnouncementTypeEnum} announcement_type
 */
BlogArticle.prototype['announcement_type'] = undefined;

/**
 * @member {String} author
 */
BlogArticle.prototype['author'] = undefined;

/**
 * Article content
 * @member {String} content
 */
BlogArticle.prototype['content'] = undefined;

/**
 * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
 * @member {Date} created_at
 */
BlogArticle.prototype['created_at'] = undefined;

/**
 * Article excerpt
 * @member {String} excerpt
 */
BlogArticle.prototype['excerpt'] = undefined;

/**
 * @member {Number} id
 */
BlogArticle.prototype['id'] = undefined;

/**
 * language code
 * @member {String} language
 */
BlogArticle.prototype['language'] = undefined;

/**
 * @member {module:model/BlogArticleLinks} links
 */
BlogArticle.prototype['links'] = undefined;

/**
 * @member {String} slug
 */
BlogArticle.prototype['slug'] = undefined;

/**
 * @member {String} title
 */
BlogArticle.prototype['title'] = undefined;

/**
 * @member {String} topic
 */
BlogArticle.prototype['topic'] = undefined;





/**
 * Allowed values for the <code>announcement_type</code> property.
 * @enum {String}
 * @readonly
 */
BlogArticle['AnnouncementTypeEnum'] = {

    /**
     * value: "article"
     * @const
     */
    "article": "article",

    /**
     * value: "case"
     * @const
     */
    "case": "case",

    /**
     * value: "famous-translators"
     * @const
     */
    "famous-translators": "famous-translators",

    /**
     * value: "sales"
     * @const
     */
    "sales": "sales"
};



export default BlogArticle;

