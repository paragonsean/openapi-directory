/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Monetary from './Monetary';
import Project from './Project';

/**
 * The Commission model module.
 * @module model/Commission
 * @version 1.0
 */
class Commission {
    /**
     * Constructs a new <code>Commission</code>.
     * @alias module:model/Commission
     */
    constructor() { 
        
        Commission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Commission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commission} obj Optional instance to populate.
     * @return {module:model/Commission} The populated <code>Commission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commission();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Monetary.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = Project.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Commission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Commission</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Monetary.validateJSON(data['amount']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          Project.validateJSON(data['project']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/Monetary} amount
 */
Commission.prototype['amount'] = undefined;

/**
 * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
 * @member {Date} date
 */
Commission.prototype['date'] = undefined;

/**
 * @member {module:model/Project} project
 */
Commission.prototype['project'] = undefined;

/**
 * @member {module:model/Commission.StatusEnum} status
 */
Commission.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Commission['StatusEnum'] = {

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "unclaimed"
     * @const
     */
    "unclaimed": "unclaimed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "sent"
     * @const
     */
    "sent": "sent",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "waiting_invoice"
     * @const
     */
    "waiting_invoice": "waiting_invoice"
};



export default Commission;

