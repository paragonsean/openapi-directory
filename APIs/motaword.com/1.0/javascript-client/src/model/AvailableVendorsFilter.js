/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableVendorsFilter model module.
 * @module model/AvailableVendorsFilter
 * @version 1.0
 */
class AvailableVendorsFilter {
    /**
     * Constructs a new <code>AvailableVendorsFilter</code>.
     * @alias module:model/AvailableVendorsFilter
     */
    constructor() { 
        
        AvailableVendorsFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailableVendorsFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableVendorsFilter} obj Optional instance to populate.
     * @return {module:model/AvailableVendorsFilter} The populated <code>AvailableVendorsFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableVendorsFilter();

            if (data.hasOwnProperty('corporateId')) {
                obj['corporateId'] = ApiClient.convertToType(data['corporateId'], 'Number');
            }
            if (data.hasOwnProperty('manualWorkPermission')) {
                obj['manualWorkPermission'] = ApiClient.convertToType(data['manualWorkPermission'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceLanguage')) {
                obj['sourceLanguage'] = ApiClient.convertToType(data['sourceLanguage'], 'String');
            }
            if (data.hasOwnProperty('targetLanguages')) {
                obj['targetLanguages'] = ApiClient.convertToType(data['targetLanguages'], ['String']);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableVendorsFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableVendorsFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sourceLanguage'] && !(typeof data['sourceLanguage'] === 'string' || data['sourceLanguage'] instanceof String)) {
            throw new Error("Expected the field `sourceLanguage` to be a primitive type in the JSON string but got " + data['sourceLanguage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetLanguages'])) {
            throw new Error("Expected the field `targetLanguages` to be an array in the JSON data but got " + data['targetLanguages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * Corporate account ID to filter for vendor authorization
 * @member {Number} corporateId
 */
AvailableVendorsFilter.prototype['corporateId'] = undefined;

/**
 * Filter vendors for manual work permission
 * @member {Boolean} manualWorkPermission
 */
AvailableVendorsFilter.prototype['manualWorkPermission'] = undefined;

/**
 * Source language code
 * @member {String} sourceLanguage
 */
AvailableVendorsFilter.prototype['sourceLanguage'] = undefined;

/**
 * List of target language codes.
 * @member {Array.<String>} targetLanguages
 */
AvailableVendorsFilter.prototype['targetLanguages'] = undefined;

/**
 * List of vendor types
 * @member {Array.<module:model/AvailableVendorsFilter.TypesEnum>} types
 */
AvailableVendorsFilter.prototype['types'] = undefined;





/**
 * Allowed values for the <code>types</code> property.
 * @enum {String}
 * @readonly
 */
AvailableVendorsFilter['TypesEnum'] = {

    /**
     * value: "translator"
     * @const
     */
    "translator": "translator",

    /**
     * value: "proofreader"
     * @const
     */
    "proofreader": "proofreader",

    /**
     * value: "both"
     * @const
     */
    "both": "both"
};



export default AvailableVendorsFilter;

