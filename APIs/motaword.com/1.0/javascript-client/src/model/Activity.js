/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityLinks from './ActivityLinks';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 1.0
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('activity_at')) {
                obj['activity_at'] = ApiClient.convertToType(data['activity_at'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ActivityLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('source_text')) {
                obj['source_text'] = ApiClient.convertToType(data['source_text'], 'String');
            }
            if (data.hasOwnProperty('target_text')) {
                obj['target_text'] = ApiClient.convertToType(data['target_text'], 'String');
            }
            if (data.hasOwnProperty('translator')) {
                obj['translator'] = ApiClient.convertToType(data['translator'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `links`
        if (data['links']) { // data not null
          ActivityLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['source_text'] && !(typeof data['source_text'] === 'string' || data['source_text'] instanceof String)) {
            throw new Error("Expected the field `source_text` to be a primitive type in the JSON string but got " + data['source_text']);
        }
        // ensure the json data is a string
        if (data['target_text'] && !(typeof data['target_text'] === 'string' || data['target_text'] instanceof String)) {
            throw new Error("Expected the field `target_text` to be a primitive type in the JSON string but got " + data['target_text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Unix epoch time
 * @member {Number} activity_at
 */
Activity.prototype['activity_at'] = undefined;

/**
 * @member {Number} id
 */
Activity.prototype['id'] = undefined;

/**
 * @member {module:model/ActivityLinks} links
 */
Activity.prototype['links'] = undefined;

/**
 * Source text
 * @member {String} source_text
 */
Activity.prototype['source_text'] = undefined;

/**
 * Target text of the activity, which is actually the translation of the source text.
 * @member {String} target_text
 */
Activity.prototype['target_text'] = undefined;

/**
 * Unique identifier of the translator/proofreader of this activity.
 * @member {Number} translator
 */
Activity.prototype['translator'] = undefined;

/**
 * Currently there are two available activity types; 'translated', 'proofread'.
 * @member {module:model/Activity.TypeEnum} type
 */
Activity.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Activity['TypeEnum'] = {

    /**
     * value: "translated"
     * @const
     */
    "translated": "translated",

    /**
     * value: "proofread"
     * @const
     */
    "proofread": "proofread"
};



export default Activity;

