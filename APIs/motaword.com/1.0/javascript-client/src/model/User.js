/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BillingAddress from './BillingAddress';
import LanguagePair from './LanguagePair';
import SocialMedia from './SocialMedia';
import UserClient from './UserClient';
import UserGroup from './UserGroup';
import UserLinks from './UserLinks';
import UserVendor from './UserVendor';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('billing')) {
                obj['billing'] = BillingAddress.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'Date');
            }
            if (data.hasOwnProperty('can_work_manual_files')) {
                obj['can_work_manual_files'] = ApiClient.convertToType(data['can_work_manual_files'], 'Boolean');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = UserClient.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('corporate_id')) {
                obj['corporate_id'] = ApiClient.convertToType(data['corporate_id'], 'Number');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('do_not_contact')) {
                obj['do_not_contact'] = ApiClient.convertToType(data['do_not_contact'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('has_pwd')) {
                obj['has_pwd'] = ApiClient.convertToType(data['has_pwd'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_client')) {
                obj['is_client'] = ApiClient.convertToType(data['is_client'], 'Boolean');
            }
            if (data.hasOwnProperty('is_developer')) {
                obj['is_developer'] = ApiClient.convertToType(data['is_developer'], 'Boolean');
            }
            if (data.hasOwnProperty('is_proofreader')) {
                obj['is_proofreader'] = ApiClient.convertToType(data['is_proofreader'], 'Boolean');
            }
            if (data.hasOwnProperty('is_prospect')) {
                obj['is_prospect'] = ApiClient.convertToType(data['is_prospect'], 'Boolean');
            }
            if (data.hasOwnProperty('is_sales_person')) {
                obj['is_sales_person'] = ApiClient.convertToType(data['is_sales_person'], 'Boolean');
            }
            if (data.hasOwnProperty('is_vendor')) {
                obj['is_vendor'] = ApiClient.convertToType(data['is_vendor'], 'Boolean');
            }
            if (data.hasOwnProperty('language_pairs')) {
                obj['language_pairs'] = ApiClient.convertToType(data['language_pairs'], [LanguagePair]);
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('last_seen_online_at')) {
                obj['last_seen_online_at'] = ApiClient.convertToType(data['last_seen_online_at'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = UserLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('mailing')) {
                obj['mailing'] = Address.constructFromObject(data['mailing']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('native_language')) {
                obj['native_language'] = ApiClient.convertToType(data['native_language'], 'String');
            }
            if (data.hasOwnProperty('nps')) {
                obj['nps'] = ApiClient.convertToType(data['nps'], 'Number');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('profile_picture_path')) {
                obj['profile_picture_path'] = ApiClient.convertToType(data['profile_picture_path'], 'String');
            }
            if (data.hasOwnProperty('social_media')) {
                obj['social_media'] = SocialMedia.constructFromObject(data['social_media']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('tms_user_name')) {
                obj['tms_user_name'] = ApiClient.convertToType(data['tms_user_name'], 'String');
            }
            if (data.hasOwnProperty('user_groups')) {
                obj['user_groups'] = ApiClient.convertToType(data['user_groups'], [UserGroup]);
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = UserVendor.constructFromObject(data['vendor']);
            }
            if (data.hasOwnProperty('zip_code')) {
                obj['zip_code'] = ApiClient.convertToType(data['zip_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          BillingAddress.validateJSON(data['billing']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          UserClient.validateJSON(data['client']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        if (data['language_pairs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['language_pairs'])) {
                throw new Error("Expected the field `language_pairs` to be an array in the JSON data but got " + data['language_pairs']);
            }
            // validate the optional field `language_pairs` (array)
            for (const item of data['language_pairs']) {
                LanguagePair.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          UserLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // validate the optional field `mailing`
        if (data['mailing']) { // data not null
          Address.validateJSON(data['mailing']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['native_language'] && !(typeof data['native_language'] === 'string' || data['native_language'] instanceof String)) {
            throw new Error("Expected the field `native_language` to be a primitive type in the JSON string but got " + data['native_language']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['profile_picture_path'] && !(typeof data['profile_picture_path'] === 'string' || data['profile_picture_path'] instanceof String)) {
            throw new Error("Expected the field `profile_picture_path` to be a primitive type in the JSON string but got " + data['profile_picture_path']);
        }
        // validate the optional field `social_media`
        if (data['social_media']) { // data not null
          SocialMedia.validateJSON(data['social_media']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['tms_user_name'] && !(typeof data['tms_user_name'] === 'string' || data['tms_user_name'] instanceof String)) {
            throw new Error("Expected the field `tms_user_name` to be a primitive type in the JSON string but got " + data['tms_user_name']);
        }
        if (data['user_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['user_groups'])) {
                throw new Error("Expected the field `user_groups` to be an array in the JSON data but got " + data['user_groups']);
            }
            // validate the optional field `user_groups` (array)
            for (const item of data['user_groups']) {
                UserGroup.validateJSON(item);
            };
        }
        // validate the optional field `vendor`
        if (data['vendor']) { // data not null
          UserVendor.validateJSON(data['vendor']);
        }
        // ensure the json data is a string
        if (data['zip_code'] && !(typeof data['zip_code'] === 'string' || data['zip_code'] instanceof String)) {
            throw new Error("Expected the field `zip_code` to be a primitive type in the JSON string but got " + data['zip_code']);
        }

        return true;
    }


}



/**
 * @member {module:model/BillingAddress} billing
 */
User.prototype['billing'] = undefined;

/**
 * @member {Date} birthday
 */
User.prototype['birthday'] = undefined;

/**
 * \\@deprecated. use `vendor` key
 * @member {Boolean} can_work_manual_files
 */
User.prototype['can_work_manual_files'] = undefined;

/**
 * \\@deprecated. use mailing or billing key.
 * @member {String} city
 */
User.prototype['city'] = undefined;

/**
 * @member {module:model/UserClient} client
 */
User.prototype['client'] = undefined;

/**
 * @member {Number} corporate_id
 */
User.prototype['corporate_id'] = undefined;

/**
 * \\@deprecated. use mailing or billing key.
 * @member {String} country
 */
User.prototype['country'] = undefined;

/**
 * Unix epoch time
 * @member {Number} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * @member {Boolean} do_not_contact
 */
User.prototype['do_not_contact'] = undefined;

/**
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * @member {Boolean} has_pwd
 */
User.prototype['has_pwd'] = undefined;

/**
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * @member {Boolean} is_client
 */
User.prototype['is_client'] = undefined;

/**
 * @member {Boolean} is_developer
 */
User.prototype['is_developer'] = undefined;

/**
 * \\@deprecated. use `vendor` key
 * @member {Boolean} is_proofreader
 */
User.prototype['is_proofreader'] = undefined;

/**
 * @member {Boolean} is_prospect
 */
User.prototype['is_prospect'] = undefined;

/**
 * @member {Boolean} is_sales_person
 */
User.prototype['is_sales_person'] = undefined;

/**
 * @member {Boolean} is_vendor
 */
User.prototype['is_vendor'] = undefined;

/**
 * \\@deprecated. use `vendor` key
 * @member {Array.<module:model/LanguagePair>} language_pairs
 */
User.prototype['language_pairs'] = undefined;

/**
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * Unix epoch time
 * @member {Number} last_seen_online_at
 */
User.prototype['last_seen_online_at'] = undefined;

/**
 * @member {module:model/UserLinks} links
 */
User.prototype['links'] = undefined;

/**
 * User Locale
 * @member {String} locale
 */
User.prototype['locale'] = undefined;

/**
 * @member {module:model/Address} mailing
 */
User.prototype['mailing'] = undefined;

/**
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * \\@deprecated. Native language of user
 * @member {String} native_language
 */
User.prototype['native_language'] = undefined;

/**
 * \\@deprecated. use /stats endpoint for the current nps value.
 * @member {Number} nps
 */
User.prototype['nps'] = undefined;

/**
 * @member {String} phone_number
 */
User.prototype['phone_number'] = undefined;

/**
 * @member {String} profile_picture_path
 */
User.prototype['profile_picture_path'] = undefined;

/**
 * @member {module:model/SocialMedia} social_media
 */
User.prototype['social_media'] = undefined;

/**
 * \\@deprecated. use mailing or billing key.
 * @member {String} state
 */
User.prototype['state'] = undefined;

/**
 * @member {String} status
 */
User.prototype['status'] = undefined;

/**
 * \\@deprecated. use mailing or billing key.
 * @member {String} street
 */
User.prototype['street'] = undefined;

/**
 * @member {String} timezone
 */
User.prototype['timezone'] = undefined;

/**
 * \\@deprecated. use `vendor` key
 * @member {String} tms_user_name
 */
User.prototype['tms_user_name'] = undefined;

/**
 * @member {Array.<module:model/UserGroup>} user_groups
 */
User.prototype['user_groups'] = undefined;

/**
 * @member {module:model/UserVendor} vendor
 */
User.prototype['vendor'] = undefined;

/**
 * \\@deprecated. use mailing or billing key. new key name is \"zip\".
 * @member {String} zip_code
 */
User.prototype['zip_code'] = undefined;






export default User;

