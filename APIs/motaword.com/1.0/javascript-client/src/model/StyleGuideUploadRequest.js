/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StyleGuideUploadRequest model module.
 * @module model/StyleGuideUploadRequest
 * @version 1.0
 */
class StyleGuideUploadRequest {
    /**
     * Constructs a new <code>StyleGuideUploadRequest</code>.
     * @alias module:model/StyleGuideUploadRequest
     * @param styleguides {File} You can only add one style guide, even though the name suggests multiple style guides. This may be updated in the future to support multiple style guides.
     */
    constructor(styleguides) { 
        
        StyleGuideUploadRequest.initialize(this, styleguides);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, styleguides) { 
        obj['styleguides'] = styleguides;
    }

    /**
     * Constructs a <code>StyleGuideUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StyleGuideUploadRequest} obj Optional instance to populate.
     * @return {module:model/StyleGuideUploadRequest} The populated <code>StyleGuideUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StyleGuideUploadRequest();

            if (data.hasOwnProperty('styleguides')) {
                obj['styleguides'] = ApiClient.convertToType(data['styleguides'], File);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StyleGuideUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StyleGuideUploadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StyleGuideUploadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

StyleGuideUploadRequest.RequiredProperties = ["styleguides"];

/**
 * You can only add one style guide, even though the name suggests multiple style guides. This may be updated in the future to support multiple style guides.
 * @member {File} styleguides
 */
StyleGuideUploadRequest.prototype['styleguides'] = undefined;






export default StyleGuideUploadRequest;

