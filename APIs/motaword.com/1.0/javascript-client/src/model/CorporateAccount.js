/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingAddress from './BillingAddress';

/**
 * The CorporateAccount model module.
 * @module model/CorporateAccount
 * @version 1.0
 */
class CorporateAccount {
    /**
     * Constructs a new <code>CorporateAccount</code>.
     * @alias module:model/CorporateAccount
     */
    constructor() { 
        
        CorporateAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CorporateAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CorporateAccount} obj Optional instance to populate.
     * @return {module:model/CorporateAccount} The populated <code>CorporateAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CorporateAccount();

            if (data.hasOwnProperty('billing')) {
                obj['billing'] = BillingAddress.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('web_site')) {
                obj['web_site'] = ApiClient.convertToType(data['web_site'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CorporateAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CorporateAccount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          BillingAddress.validateJSON(data['billing']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['web_site'] && !(typeof data['web_site'] === 'string' || data['web_site'] instanceof String)) {
            throw new Error("Expected the field `web_site` to be a primitive type in the JSON string but got " + data['web_site']);
        }

        return true;
    }


}



/**
 * @member {module:model/BillingAddress} billing
 */
CorporateAccount.prototype['billing'] = undefined;

/**
 * @member {String} domain
 */
CorporateAccount.prototype['domain'] = undefined;

/**
 * @member {String} email
 */
CorporateAccount.prototype['email'] = undefined;

/**
 * @member {Number} id
 */
CorporateAccount.prototype['id'] = undefined;

/**
 * @member {String} logo
 */
CorporateAccount.prototype['logo'] = undefined;

/**
 * @member {String} name
 */
CorporateAccount.prototype['name'] = undefined;

/**
 * Deprecated, use `domain`.
 * @member {String} web_site
 */
CorporateAccount.prototype['web_site'] = undefined;






export default CorporateAccount;

