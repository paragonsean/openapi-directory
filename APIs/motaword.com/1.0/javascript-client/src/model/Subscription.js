/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 1.0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('downgrade')) {
                obj['downgrade'] = ApiClient.convertToType(data['downgrade'], ['String']);
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = ApiClient.convertToType(data['payment_method'], 'Number');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'Date');
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('plan_name')) {
                obj['plan_name'] = ApiClient.convertToType(data['plan_name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Object]);
            }
            if (data.hasOwnProperty('schedule_name')) {
                obj['schedule_name'] = ApiClient.convertToType(data['schedule_name'], 'String');
            }
            if (data.hasOwnProperty('schedule_start')) {
                obj['schedule_start'] = ApiClient.convertToType(data['schedule_start'], 'Date');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('upgrade')) {
                obj['upgrade'] = ApiClient.convertToType(data['upgrade'], ['String']);
            }
            if (data.hasOwnProperty('withTrial')) {
                obj['withTrial'] = ApiClient.convertToType(data['withTrial'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['downgrade'])) {
            throw new Error("Expected the field `downgrade` to be an array in the JSON data but got " + data['downgrade']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['plan_name'] && !(typeof data['plan_name'] === 'string' || data['plan_name'] instanceof String)) {
            throw new Error("Expected the field `plan_name` to be a primitive type in the JSON string but got " + data['plan_name']);
        }
        // ensure the json data is a string
        if (data['price'] && !(typeof data['price'] === 'string' || data['price'] instanceof String)) {
            throw new Error("Expected the field `price` to be a primitive type in the JSON string but got " + data['price']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is a string
        if (data['schedule_name'] && !(typeof data['schedule_name'] === 'string' || data['schedule_name'] instanceof String)) {
            throw new Error("Expected the field `schedule_name` to be a primitive type in the JSON string but got " + data['schedule_name']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upgrade'])) {
            throw new Error("Expected the field `upgrade` to be an array in the JSON data but got " + data['upgrade']);
        }

        return true;
    }


}



/**
 * Stripe downgradable plan
 * @member {Array.<String>} downgrade
 */
Subscription.prototype['downgrade'] = undefined;

/**
 * Stripe subscription plan payment card internal id
 * @member {Number} payment_method
 */
Subscription.prototype['payment_method'] = undefined;

/**
 * Stripe plan period end
 * @member {Date} period_end
 */
Subscription.prototype['period_end'] = undefined;

/**
 * Stripe subscription plan id
 * @member {String} plan_id
 */
Subscription.prototype['plan_id'] = undefined;

/**
 * Stripe subscription plan name
 * @member {String} plan_name
 */
Subscription.prototype['plan_name'] = undefined;

/**
 * Stripe plan price
 * @member {String} price
 */
Subscription.prototype['price'] = undefined;

/**
 * @member {Array.<Object>} products
 */
Subscription.prototype['products'] = undefined;

/**
 * Stripe Scheduled plan period end
 * @member {String} schedule_name
 */
Subscription.prototype['schedule_name'] = undefined;

/**
 * Stripe Scheduled start date
 * @member {Date} schedule_start
 */
Subscription.prototype['schedule_start'] = undefined;

/**
 * Stripe subscription id for this project
 * @member {String} subscription_id
 */
Subscription.prototype['subscription_id'] = undefined;

/**
 * Stripe upgradable plan
 * @member {Array.<String>} upgrade
 */
Subscription.prototype['upgrade'] = undefined;

/**
 * Stripe plan trial
 * @member {Object} withTrial
 */
Subscription.prototype['withTrial'] = undefined;






export default Subscription;

