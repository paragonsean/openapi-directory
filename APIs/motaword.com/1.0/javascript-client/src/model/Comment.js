/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentLinks from './CommentLinks';

/**
 * The Comment model module.
 * @module model/Comment
 * @version 1.0
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * @alias module:model/Comment
     * @param comment {String} Comment text.
     */
    constructor(comment) { 
        
        Comment.initialize(this, comment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comment) { 
        obj['comment'] = comment;
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('commented_at')) {
                obj['commented_at'] = ApiClient.convertToType(data['commented_at'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = CommentLinks.constructFromObject(data['links']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Comment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          CommentLinks.validateJSON(data['links']);
        }

        return true;
    }


}

Comment.RequiredProperties = ["comment"];

/**
 * Comment text.
 * @member {String} comment
 */
Comment.prototype['comment'] = undefined;

/**
 * Unix epoch time
 * @member {Number} commented_at
 */
Comment.prototype['commented_at'] = undefined;

/**
 * @member {Number} id
 */
Comment.prototype['id'] = undefined;

/**
 * @member {module:model/CommentLinks} links
 */
Comment.prototype['links'] = undefined;






export default Comment;

