/**
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkedSourceDocument from './LinkedSourceDocument';

/**
 * The DocumentUpdates model module.
 * @module model/DocumentUpdates
 * @version 1.0
 */
class DocumentUpdates {
    /**
     * Constructs a new <code>DocumentUpdates</code>.
     * @alias module:model/DocumentUpdates
     */
    constructor() { 
        
        DocumentUpdates.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentUpdates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentUpdates} obj Optional instance to populate.
     * @return {module:model/DocumentUpdates} The populated <code>DocumentUpdates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentUpdates();

            if (data.hasOwnProperty('documents[]')) {
                obj['documents[]'] = ApiClient.convertToType(data['documents[]'], [File]);
            }
            if (data.hasOwnProperty('schemes[]')) {
                obj['schemes[]'] = ApiClient.convertToType(data['schemes[]'], 'String');
            }
            if (data.hasOwnProperty('source-links[]')) {
                obj['source-links[]'] = ApiClient.convertToType(data['source-links[]'], [LinkedSourceDocument]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentUpdates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentUpdates</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['documents[]'])) {
            throw new Error("Expected the field `documents[]` to be an array in the JSON data but got " + data['documents[]']);
        }
        // ensure the json data is a string
        if (data['schemes[]'] && !(typeof data['schemes[]'] === 'string' || data['schemes[]'] instanceof String)) {
            throw new Error("Expected the field `schemes[]` to be a primitive type in the JSON string but got " + data['schemes[]']);
        }
        if (data['source-links[]']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['source-links[]'])) {
                throw new Error("Expected the field `source-links[]` to be an array in the JSON data but got " + data['source-links[]']);
            }
            // validate the optional field `source-links[]` (array)
            for (const item of data['source-links[]']) {
                LinkedSourceDocument.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * You can add as many files as you want in documents[] parameter.
 * @member {Array.<File>} documents[]
 */
DocumentUpdates.prototype['documents[]'] = undefined;

/**
 * JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.
 * @member {String} schemes[]
 */
DocumentUpdates.prototype['schemes[]'] = undefined;

/**
 * When provided, we will download the files from these URLs, in addition to files provded in `documents` parameter and then save as source documents
 * @member {Array.<module:model/LinkedSourceDocument>} source-links[]
 */
DocumentUpdates.prototype['source-links[]'] = undefined;






export default DocumentUpdates;

