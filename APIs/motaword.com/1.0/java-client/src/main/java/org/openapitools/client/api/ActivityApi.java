/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Activity;
import org.openapitools.client.model.ActivityList;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NewSalesActivity;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.SalesActivities;
import org.openapitools.client.model.SalesActivityType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActivities
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of activity models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivitiesCall(Long projectId, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/activities"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivitiesValidateBeforeCall(Long projectId, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getActivities(Async)");
        }

        return getActivitiesCall(projectId, page, perPage, _callback);

    }

    /**
     * Monitor project activities
     * Get a list of real-time activities in the project, such as translation suggestion and translation approval.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ActivityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of activity models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ActivityList getActivities(Long projectId, Long page, Long perPage) throws ApiException {
        ApiResponse<ActivityList> localVarResp = getActivitiesWithHttpInfo(projectId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Monitor project activities
     * Get a list of real-time activities in the project, such as translation suggestion and translation approval.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;ActivityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of activity models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityList> getActivitiesWithHttpInfo(Long projectId, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(projectId, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActivityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Monitor project activities (asynchronously)
     * Get a list of real-time activities in the project, such as translation suggestion and translation approval.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of activity models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivitiesAsync(Long projectId, Long page, Long perPage, final ApiCallback<ActivityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(projectId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActivityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActivity
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityCall(Long projectId, Long activityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/activities/{activityId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "activityId" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivityValidateBeforeCall(Long projectId, Long activityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getActivity(Async)");
        }

        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling getActivity(Async)");
        }

        return getActivityCall(projectId, activityId, _callback);

    }

    /**
     * View an activity
     * View the details of an activity in the project.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @return Activity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Activity getActivity(Long projectId, Long activityId) throws ApiException {
        ApiResponse<Activity> localVarResp = getActivityWithHttpInfo(projectId, activityId);
        return localVarResp.getData();
    }

    /**
     * View an activity
     * View the details of an activity in the project.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @return ApiResponse&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Activity> getActivityWithHttpInfo(Long projectId, Long activityId) throws ApiException {
        okhttp3.Call localVarCall = getActivityValidateBeforeCall(projectId, activityId, null);
        Type localVarReturnType = new TypeToken<Activity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View an activity (asynchronously)
     * View the details of an activity in the project.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityAsync(Long projectId, Long activityId, final ApiCallback<Activity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivityValidateBeforeCall(projectId, activityId, _callback);
        Type localVarReturnType = new TypeToken<Activity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActivityComments
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityCommentsCall(Long projectId, Long activityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/activities/{activityId}/comments"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "activityId" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivityCommentsValidateBeforeCall(Long projectId, Long activityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getActivityComments(Async)");
        }

        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling getActivityComments(Async)");
        }

        return getActivityCommentsCall(projectId, activityId, _callback);

    }

    /**
     * View activity comments
     * View a list of comments added to this activity.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @return CommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CommentList getActivityComments(Long projectId, Long activityId) throws ApiException {
        ApiResponse<CommentList> localVarResp = getActivityCommentsWithHttpInfo(projectId, activityId);
        return localVarResp.getData();
    }

    /**
     * View activity comments
     * View a list of comments added to this activity.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @return ApiResponse&lt;CommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentList> getActivityCommentsWithHttpInfo(Long projectId, Long activityId) throws ApiException {
        okhttp3.Call localVarCall = getActivityCommentsValidateBeforeCall(projectId, activityId, null);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View activity comments (asynchronously)
     * View a list of comments added to this activity.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivityCommentsAsync(Long projectId, Long activityId, final ApiCallback<CommentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivityCommentsValidateBeforeCall(projectId, activityId, _callback);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComments
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsCall(Long projectId, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/comments"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentsValidateBeforeCall(Long projectId, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getComments(Async)");
        }

        return getCommentsCall(projectId, page, perPage, _callback);

    }

    /**
     * View all project comments
     * View a list of activity comments in the project.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return CommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CommentList getComments(Long projectId, Long page, Long perPage) throws ApiException {
        ApiResponse<CommentList> localVarResp = getCommentsWithHttpInfo(projectId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * View all project comments
     * View a list of activity comments in the project.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;CommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentList> getCommentsWithHttpInfo(Long projectId, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(projectId, page, perPage, null);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View all project comments (asynchronously)
     * View a list of activity comments in the project.
     * @param projectId Project ID (required)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Comment models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommentsAsync(Long projectId, Long page, Long perPage, final ApiCallback<CommentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentsValidateBeforeCall(projectId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CommentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesActivities
     * @param id Project ID (required)
     * @param excludeOwner  (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities fetched successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesActivitiesCall(Long id, String excludeOwner, SalesActivityType type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/sales/activities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeOwner", excludeOwner));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesActivitiesValidateBeforeCall(Long id, String excludeOwner, SalesActivityType type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSalesActivities(Async)");
        }

        return getSalesActivitiesCall(id, excludeOwner, type, _callback);

    }

    /**
     * Get sales activities for a project
     * 
     * @param id Project ID (required)
     * @param excludeOwner  (optional)
     * @param type  (optional)
     * @return SalesActivities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities fetched successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public SalesActivities getSalesActivities(Long id, String excludeOwner, SalesActivityType type) throws ApiException {
        ApiResponse<SalesActivities> localVarResp = getSalesActivitiesWithHttpInfo(id, excludeOwner, type);
        return localVarResp.getData();
    }

    /**
     * Get sales activities for a project
     * 
     * @param id Project ID (required)
     * @param excludeOwner  (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;SalesActivities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities fetched successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesActivities> getSalesActivitiesWithHttpInfo(Long id, String excludeOwner, SalesActivityType type) throws ApiException {
        okhttp3.Call localVarCall = getSalesActivitiesValidateBeforeCall(id, excludeOwner, type, null);
        Type localVarReturnType = new TypeToken<SalesActivities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales activities for a project (asynchronously)
     * 
     * @param id Project ID (required)
     * @param excludeOwner  (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activities fetched successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesActivitiesAsync(Long id, String excludeOwner, SalesActivityType type, final ApiCallback<SalesActivities> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesActivitiesValidateBeforeCall(id, excludeOwner, type, _callback);
        Type localVarReturnType = new TypeToken<SalesActivities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertSalesActivity
     * @param id Project ID (required)
     * @param newSalesActivity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acvitity inserted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertSalesActivityCall(Long id, NewSalesActivity newSalesActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newSalesActivity;

        // create path and map variables
        String localVarPath = "/projects/{id}/sales/activities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertSalesActivityValidateBeforeCall(Long id, NewSalesActivity newSalesActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling insertSalesActivity(Async)");
        }

        return insertSalesActivityCall(id, newSalesActivity, _callback);

    }

    /**
     * Insert sales activity for a project
     * 
     * @param id Project ID (required)
     * @param newSalesActivity  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acvitity inserted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus insertSalesActivity(Long id, NewSalesActivity newSalesActivity) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = insertSalesActivityWithHttpInfo(id, newSalesActivity);
        return localVarResp.getData();
    }

    /**
     * Insert sales activity for a project
     * 
     * @param id Project ID (required)
     * @param newSalesActivity  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acvitity inserted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> insertSalesActivityWithHttpInfo(Long id, NewSalesActivity newSalesActivity) throws ApiException {
        okhttp3.Call localVarCall = insertSalesActivityValidateBeforeCall(id, newSalesActivity, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert sales activity for a project (asynchronously)
     * 
     * @param id Project ID (required)
     * @param newSalesActivity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acvitity inserted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertSalesActivityAsync(Long id, NewSalesActivity newSalesActivity, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertSalesActivityValidateBeforeCall(id, newSalesActivity, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitComment
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param comment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitCommentCall(Long projectId, Long activityId, Comment comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comment;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/activities/{activityId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "activityId" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitCommentValidateBeforeCall(Long projectId, Long activityId, Comment comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling submitComment(Async)");
        }

        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling submitComment(Async)");
        }

        return submitCommentCall(projectId, activityId, comment, _callback);

    }

    /**
     * Submit comment to an activity
     * Submit a comment to an activity in the project, such as translation or editing.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param comment  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Comment submitComment(Long projectId, Long activityId, Comment comment) throws ApiException {
        ApiResponse<Comment> localVarResp = submitCommentWithHttpInfo(projectId, activityId, comment);
        return localVarResp.getData();
    }

    /**
     * Submit comment to an activity
     * Submit a comment to an activity in the project, such as translation or editing.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param comment  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> submitCommentWithHttpInfo(Long projectId, Long activityId, Comment comment) throws ApiException {
        okhttp3.Call localVarCall = submitCommentValidateBeforeCall(projectId, activityId, comment, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit comment to an activity (asynchronously)
     * Submit a comment to an activity in the project, such as translation or editing.
     * @param projectId Project ID (required)
     * @param activityId Activity ID (required)
     * @param comment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comment model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectActivityNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitCommentAsync(Long projectId, Long activityId, Comment comment, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitCommentValidateBeforeCall(projectId, activityId, comment, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
