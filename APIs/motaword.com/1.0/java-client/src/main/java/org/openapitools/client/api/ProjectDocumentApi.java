/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentList;
import org.openapitools.client.model.DocumentUpdates;
import org.openapitools.client.model.DocumentUploadRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.OperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectDocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectDocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectDocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProjectDocument
     * @param projectId Project ID (required)
     * @param documentUpdates  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of successfully added new documents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectDocumentCall(Long projectId, DocumentUpdates documentUpdates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentUpdates;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectDocumentValidateBeforeCall(Long projectId, DocumentUpdates documentUpdates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectDocument(Async)");
        }

        return createProjectDocumentCall(projectId, documentUpdates, _callback);

    }

    /**
     * Upload a new document
     * Upload a new document
     * @param projectId Project ID (required)
     * @param documentUpdates  (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of successfully added new documents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList createProjectDocument(Long projectId, DocumentUpdates documentUpdates) throws ApiException {
        ApiResponse<DocumentList> localVarResp = createProjectDocumentWithHttpInfo(projectId, documentUpdates);
        return localVarResp.getData();
    }

    /**
     * Upload a new document
     * Upload a new document
     * @param projectId Project ID (required)
     * @param documentUpdates  (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of successfully added new documents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> createProjectDocumentWithHttpInfo(Long projectId, DocumentUpdates documentUpdates) throws ApiException {
        okhttp3.Call localVarCall = createProjectDocumentValidateBeforeCall(projectId, documentUpdates, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a new document (asynchronously)
     * Upload a new document
     * @param projectId Project ID (required)
     * @param documentUpdates  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of successfully added new documents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectDocumentAsync(Long projectId, DocumentUpdates documentUpdates, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectDocumentValidateBeforeCall(projectId, documentUpdates, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectDocument
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectDocumentCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectDocumentValidateBeforeCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteProjectDocument(Async)");
        }

        return deleteProjectDocumentCall(projectId, documentId, _callback);

    }

    /**
     * Delete the document
     * Delete the document
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteProjectDocument(Long projectId, Long documentId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteProjectDocumentWithHttpInfo(projectId, documentId);
        return localVarResp.getData();
    }

    /**
     * Delete the document
     * Delete the document
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteProjectDocumentWithHttpInfo(Long projectId, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectDocumentValidateBeforeCall(projectId, documentId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the document (asynchronously)
     * Delete the document
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectDocumentAsync(Long projectId, Long documentId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectDocumentValidateBeforeCall(projectId, documentId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadProjectDocument
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadProjectDocumentCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}/download"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadProjectDocumentValidateBeforeCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling downloadProjectDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadProjectDocument(Async)");
        }

        return downloadProjectDocumentCall(projectId, documentId, _callback);

    }

    /**
     * Download a project source document
     * Download an actual source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadProjectDocument(Long projectId, Long documentId) throws ApiException {
        ApiResponse<String> localVarResp = downloadProjectDocumentWithHttpInfo(projectId, documentId);
        return localVarResp.getData();
    }

    /**
     * Download a project source document
     * Download an actual source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadProjectDocumentWithHttpInfo(Long projectId, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadProjectDocumentValidateBeforeCall(projectId, documentId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a project source document (asynchronously)
     * Download an actual source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadProjectDocumentAsync(Long projectId, Long documentId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadProjectDocumentValidateBeforeCall(projectId, documentId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadTranslatedDocumentForLanguage
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param certified Download certified translation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTranslatedDocumentForLanguageCall(Long projectId, Long documentId, String language, Boolean certified, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}/translations/download/{language}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certified", certified));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadTranslatedDocumentForLanguageValidateBeforeCall(Long projectId, Long documentId, String language, Boolean certified, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling downloadTranslatedDocumentForLanguage(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadTranslatedDocumentForLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling downloadTranslatedDocumentForLanguage(Async)");
        }

        return downloadTranslatedDocumentForLanguageCall(projectId, documentId, language, certified, _callback);

    }

    /**
     * Download translated document
     * Download translated document in the given target language.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param certified Download certified translation (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public File downloadTranslatedDocumentForLanguage(Long projectId, Long documentId, String language, Boolean certified) throws ApiException {
        ApiResponse<File> localVarResp = downloadTranslatedDocumentForLanguageWithHttpInfo(projectId, documentId, language, certified);
        return localVarResp.getData();
    }

    /**
     * Download translated document
     * Download translated document in the given target language.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param certified Download certified translation (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadTranslatedDocumentForLanguageWithHttpInfo(Long projectId, Long documentId, String language, Boolean certified) throws ApiException {
        okhttp3.Call localVarCall = downloadTranslatedDocumentForLanguageValidateBeforeCall(projectId, documentId, language, certified, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download translated document (asynchronously)
     * Download translated document in the given target language.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param certified Download certified translation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadTranslatedDocumentForLanguageAsync(Long projectId, Long documentId, String language, Boolean certified, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadTranslatedDocumentForLanguageValidateBeforeCall(projectId, documentId, language, certified, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectDocument
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDocumentCall(Long projectId, Long documentId, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDocumentValidateBeforeCall(Long projectId, Long documentId, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getProjectDocument(Async)");
        }

        return getProjectDocumentCall(projectId, documentId, with, _callback);

    }

    /**
     * View a project source document
     * View the details of a source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Document getProjectDocument(Long projectId, Long documentId, List<String> with) throws ApiException {
        ApiResponse<Document> localVarResp = getProjectDocumentWithHttpInfo(projectId, documentId, with);
        return localVarResp.getData();
    }

    /**
     * View a project source document
     * View the details of a source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> getProjectDocumentWithHttpInfo(Long projectId, Long documentId, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getProjectDocumentValidateBeforeCall(projectId, documentId, with, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a project source document (asynchronously)
     * View the details of a source file you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDocumentAsync(Long projectId, Long documentId, List<String> with, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDocumentValidateBeforeCall(projectId, documentId, with, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectDocuments
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDocumentsCall(Long projectId, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectDocumentsValidateBeforeCall(Long projectId, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectDocuments(Async)");
        }

        return getProjectDocumentsCall(projectId, with, _callback);

    }

    /**
     * View project source documents
     * Get a list of source files you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList getProjectDocuments(Long projectId, List<String> with) throws ApiException {
        ApiResponse<DocumentList> localVarResp = getProjectDocumentsWithHttpInfo(projectId, with);
        return localVarResp.getData();
    }

    /**
     * View project source documents
     * Get a list of source files you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> getProjectDocumentsWithHttpInfo(Long projectId, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getProjectDocumentsValidateBeforeCall(projectId, with, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View project source documents (asynchronously)
     * Get a list of source files you uploaded to be translated in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectDocumentsAsync(Long projectId, List<String> with, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectDocumentsValidateBeforeCall(projectId, with, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProjectDocument
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param documentUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated document model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectDocumentCall(Long projectId, Long documentId, DocumentUploadRequest documentUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentUploadRequest;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectDocumentValidateBeforeCall(Long projectId, Long documentId, DocumentUploadRequest documentUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateProjectDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateProjectDocument(Async)");
        }

        return updateProjectDocumentCall(projectId, documentId, documentUploadRequest, _callback);

    }

    /**
     * Update the document.
     * Update the document. File name and contents will replaced with the new one.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param documentUploadRequest  (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated document model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public Document updateProjectDocument(Long projectId, Long documentId, DocumentUploadRequest documentUploadRequest) throws ApiException {
        ApiResponse<Document> localVarResp = updateProjectDocumentWithHttpInfo(projectId, documentId, documentUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Update the document.
     * Update the document. File name and contents will replaced with the new one.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param documentUploadRequest  (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated document model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> updateProjectDocumentWithHttpInfo(Long projectId, Long documentId, DocumentUploadRequest documentUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectDocumentValidateBeforeCall(projectId, documentId, documentUploadRequest, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the document. (asynchronously)
     * Update the document. File name and contents will replaced with the new one.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param documentUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated document model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> InvalidDocumentScheme </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectDocumentAsync(Long projectId, Long documentId, DocumentUploadRequest documentUploadRequest, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectDocumentValidateBeforeCall(projectId, documentId, documentUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
