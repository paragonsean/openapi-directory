/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Monetary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientStats {
  public static final String SERIALIZED_NAME_DOCUMENT_COUNT = "document_count";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_COUNT)
  private Long documentCount;

  public static final String SERIALIZED_NAME_NPS = "nps";
  @SerializedName(SERIALIZED_NAME_NPS)
  private Float nps;

  public static final String SERIALIZED_NAME_STARTED_PROJECT_COUNT = "started_project_count";
  @SerializedName(SERIALIZED_NAME_STARTED_PROJECT_COUNT)
  private Long startedProjectCount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNTED = "total_discounted";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNTED)
  private Monetary totalDiscounted;

  public static final String SERIALIZED_NAME_TOTAL_PROJECT_COUNT = "total_project_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROJECT_COUNT)
  private Long totalProjectCount;

  public static final String SERIALIZED_NAME_TOTAL_SPENDING = "total_spending";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPENDING)
  private Float totalSpending;

  public static final String SERIALIZED_NAME_TRANSLATOR_COUNT = "translator_count";
  @SerializedName(SERIALIZED_NAME_TRANSLATOR_COUNT)
  private Long translatorCount;

  public ClientStats() {
  }

  public ClientStats documentCount(Long documentCount) {
    this.documentCount = documentCount;
    return this;
  }

  /**
   * Get documentCount
   * @return documentCount
   */
  @javax.annotation.Nullable
  public Long getDocumentCount() {
    return documentCount;
  }

  public void setDocumentCount(Long documentCount) {
    this.documentCount = documentCount;
  }


  public ClientStats nps(Float nps) {
    this.nps = nps;
    return this;
  }

  /**
   * Get nps
   * @return nps
   */
  @javax.annotation.Nullable
  public Float getNps() {
    return nps;
  }

  public void setNps(Float nps) {
    this.nps = nps;
  }


  public ClientStats startedProjectCount(Long startedProjectCount) {
    this.startedProjectCount = startedProjectCount;
    return this;
  }

  /**
   * Get startedProjectCount
   * @return startedProjectCount
   */
  @javax.annotation.Nullable
  public Long getStartedProjectCount() {
    return startedProjectCount;
  }

  public void setStartedProjectCount(Long startedProjectCount) {
    this.startedProjectCount = startedProjectCount;
  }


  public ClientStats totalDiscounted(Monetary totalDiscounted) {
    this.totalDiscounted = totalDiscounted;
    return this;
  }

  /**
   * Get totalDiscounted
   * @return totalDiscounted
   */
  @javax.annotation.Nullable
  public Monetary getTotalDiscounted() {
    return totalDiscounted;
  }

  public void setTotalDiscounted(Monetary totalDiscounted) {
    this.totalDiscounted = totalDiscounted;
  }


  public ClientStats totalProjectCount(Long totalProjectCount) {
    this.totalProjectCount = totalProjectCount;
    return this;
  }

  /**
   * Get totalProjectCount
   * @return totalProjectCount
   */
  @javax.annotation.Nullable
  public Long getTotalProjectCount() {
    return totalProjectCount;
  }

  public void setTotalProjectCount(Long totalProjectCount) {
    this.totalProjectCount = totalProjectCount;
  }


  public ClientStats totalSpending(Float totalSpending) {
    this.totalSpending = totalSpending;
    return this;
  }

  /**
   * Get totalSpending
   * @return totalSpending
   */
  @javax.annotation.Nullable
  public Float getTotalSpending() {
    return totalSpending;
  }

  public void setTotalSpending(Float totalSpending) {
    this.totalSpending = totalSpending;
  }


  public ClientStats translatorCount(Long translatorCount) {
    this.translatorCount = translatorCount;
    return this;
  }

  /**
   * Get translatorCount
   * @return translatorCount
   */
  @javax.annotation.Nullable
  public Long getTranslatorCount() {
    return translatorCount;
  }

  public void setTranslatorCount(Long translatorCount) {
    this.translatorCount = translatorCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientStats clientStats = (ClientStats) o;
    return Objects.equals(this.documentCount, clientStats.documentCount) &&
        Objects.equals(this.nps, clientStats.nps) &&
        Objects.equals(this.startedProjectCount, clientStats.startedProjectCount) &&
        Objects.equals(this.totalDiscounted, clientStats.totalDiscounted) &&
        Objects.equals(this.totalProjectCount, clientStats.totalProjectCount) &&
        Objects.equals(this.totalSpending, clientStats.totalSpending) &&
        Objects.equals(this.translatorCount, clientStats.translatorCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentCount, nps, startedProjectCount, totalDiscounted, totalProjectCount, totalSpending, translatorCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientStats {\n");
    sb.append("    documentCount: ").append(toIndentedString(documentCount)).append("\n");
    sb.append("    nps: ").append(toIndentedString(nps)).append("\n");
    sb.append("    startedProjectCount: ").append(toIndentedString(startedProjectCount)).append("\n");
    sb.append("    totalDiscounted: ").append(toIndentedString(totalDiscounted)).append("\n");
    sb.append("    totalProjectCount: ").append(toIndentedString(totalProjectCount)).append("\n");
    sb.append("    totalSpending: ").append(toIndentedString(totalSpending)).append("\n");
    sb.append("    translatorCount: ").append(toIndentedString(translatorCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document_count");
    openapiFields.add("nps");
    openapiFields.add("started_project_count");
    openapiFields.add("total_discounted");
    openapiFields.add("total_project_count");
    openapiFields.add("total_spending");
    openapiFields.add("translator_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientStats is not found in the empty JSON string", ClientStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `total_discounted`
      if (jsonObj.get("total_discounted") != null && !jsonObj.get("total_discounted").isJsonNull()) {
        Monetary.validateJsonElement(jsonObj.get("total_discounted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientStats>() {
           @Override
           public void write(JsonWriter out, ClientStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientStats
   * @throws IOException if the JSON string is invalid with respect to ClientStats
   */
  public static ClientStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientStats.class);
  }

  /**
   * Convert an instance of ClientStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

