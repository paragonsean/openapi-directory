/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QaFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QaFilter {
  public static final String SERIALIZED_NAME_BUDGET_CODES = "budget_codes";
  @SerializedName(SERIALIZED_NAME_BUDGET_CODES)
  private List<String> budgetCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<BigDecimal> clients = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_FROM = "date_from";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "date_to";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<BigDecimal> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private List<BigDecimal> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List<String> severities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGES = "source_languages";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGES)
  private List<String> sourceLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "target_languages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<BigDecimal> vendors = new ArrayList<>();

  public QaFilter() {
  }

  public QaFilter budgetCodes(List<String> budgetCodes) {
    this.budgetCodes = budgetCodes;
    return this;
  }

  public QaFilter addBudgetCodesItem(String budgetCodesItem) {
    if (this.budgetCodes == null) {
      this.budgetCodes = new ArrayList<>();
    }
    this.budgetCodes.add(budgetCodesItem);
    return this;
  }

  /**
   * Get budgetCodes
   * @return budgetCodes
   */
  @javax.annotation.Nullable
  public List<String> getBudgetCodes() {
    return budgetCodes;
  }

  public void setBudgetCodes(List<String> budgetCodes) {
    this.budgetCodes = budgetCodes;
  }


  public QaFilter categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public QaFilter addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public QaFilter clients(List<BigDecimal> clients) {
    this.clients = clients;
    return this;
  }

  public QaFilter addClientsItem(BigDecimal clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getClients() {
    return clients;
  }

  public void setClients(List<BigDecimal> clients) {
    this.clients = clients;
  }


  public QaFilter dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public QaFilter dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return dateTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public QaFilter documents(List<BigDecimal> documents) {
    this.documents = documents;
    return this;
  }

  public QaFilter addDocumentsItem(BigDecimal documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getDocuments() {
    return documents;
  }

  public void setDocuments(List<BigDecimal> documents) {
    this.documents = documents;
  }


  public QaFilter projects(List<BigDecimal> projects) {
    this.projects = projects;
    return this;
  }

  public QaFilter addProjectsItem(BigDecimal projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getProjects() {
    return projects;
  }

  public void setProjects(List<BigDecimal> projects) {
    this.projects = projects;
  }


  public QaFilter severities(List<String> severities) {
    this.severities = severities;
    return this;
  }

  public QaFilter addSeveritiesItem(String severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

  /**
   * Get severities
   * @return severities
   */
  @javax.annotation.Nullable
  public List<String> getSeverities() {
    return severities;
  }

  public void setSeverities(List<String> severities) {
    this.severities = severities;
  }


  public QaFilter sourceLanguages(List<String> sourceLanguages) {
    this.sourceLanguages = sourceLanguages;
    return this;
  }

  public QaFilter addSourceLanguagesItem(String sourceLanguagesItem) {
    if (this.sourceLanguages == null) {
      this.sourceLanguages = new ArrayList<>();
    }
    this.sourceLanguages.add(sourceLanguagesItem);
    return this;
  }

  /**
   * Get sourceLanguages
   * @return sourceLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSourceLanguages() {
    return sourceLanguages;
  }

  public void setSourceLanguages(List<String> sourceLanguages) {
    this.sourceLanguages = sourceLanguages;
  }


  public QaFilter subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public QaFilter addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public QaFilter targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public QaFilter addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * Get targetLanguages
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public QaFilter vendors(List<BigDecimal> vendors) {
    this.vendors = vendors;
    return this;
  }

  public QaFilter addVendorsItem(BigDecimal vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * Get vendors
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getVendors() {
    return vendors;
  }

  public void setVendors(List<BigDecimal> vendors) {
    this.vendors = vendors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QaFilter qaFilter = (QaFilter) o;
    return Objects.equals(this.budgetCodes, qaFilter.budgetCodes) &&
        Objects.equals(this.categories, qaFilter.categories) &&
        Objects.equals(this.clients, qaFilter.clients) &&
        Objects.equals(this.dateFrom, qaFilter.dateFrom) &&
        Objects.equals(this.dateTo, qaFilter.dateTo) &&
        Objects.equals(this.documents, qaFilter.documents) &&
        Objects.equals(this.projects, qaFilter.projects) &&
        Objects.equals(this.severities, qaFilter.severities) &&
        Objects.equals(this.sourceLanguages, qaFilter.sourceLanguages) &&
        Objects.equals(this.subjects, qaFilter.subjects) &&
        Objects.equals(this.targetLanguages, qaFilter.targetLanguages) &&
        Objects.equals(this.vendors, qaFilter.vendors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetCodes, categories, clients, dateFrom, dateTo, documents, projects, severities, sourceLanguages, subjects, targetLanguages, vendors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QaFilter {\n");
    sb.append("    budgetCodes: ").append(toIndentedString(budgetCodes)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    sourceLanguages: ").append(toIndentedString(sourceLanguages)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budget_codes");
    openapiFields.add("categories");
    openapiFields.add("clients");
    openapiFields.add("date_from");
    openapiFields.add("date_to");
    openapiFields.add("documents");
    openapiFields.add("projects");
    openapiFields.add("severities");
    openapiFields.add("source_languages");
    openapiFields.add("subjects");
    openapiFields.add("target_languages");
    openapiFields.add("vendors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QaFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QaFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QaFilter is not found in the empty JSON string", QaFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QaFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QaFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("budget_codes") != null && !jsonObj.get("budget_codes").isJsonNull() && !jsonObj.get("budget_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_codes` to be an array in the JSON string but got `%s`", jsonObj.get("budget_codes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull() && !jsonObj.get("clients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull() && !jsonObj.get("documents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull() && !jsonObj.get("projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("severities") != null && !jsonObj.get("severities").isJsonNull() && !jsonObj.get("severities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("source_languages") != null && !jsonObj.get("source_languages").isJsonNull() && !jsonObj.get("source_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_languages` to be an array in the JSON string but got `%s`", jsonObj.get("source_languages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_languages") != null && !jsonObj.get("target_languages").isJsonNull() && !jsonObj.get("target_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_languages` to be an array in the JSON string but got `%s`", jsonObj.get("target_languages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull() && !jsonObj.get("vendors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QaFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QaFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QaFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QaFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<QaFilter>() {
           @Override
           public void write(JsonWriter out, QaFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QaFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QaFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QaFilter
   * @throws IOException if the JSON string is invalid with respect to QaFilter
   */
  public static QaFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QaFilter.class);
  }

  /**
   * Convert an instance of QaFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

