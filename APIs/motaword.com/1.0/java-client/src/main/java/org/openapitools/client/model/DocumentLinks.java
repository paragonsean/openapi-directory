/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Href;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentLinks {
  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Href self;

  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  private Map<String, Href> admins = new HashMap<>();

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Href download;

  public static final String SERIALIZED_NAME_EDITORS = "editors";
  @SerializedName(SERIALIZED_NAME_EDITORS)
  private Map<String, Href> editors = new HashMap<>();

  public static final String SERIALIZED_NAME_PREVIEW_BOX = "preview-box";
  @SerializedName(SERIALIZED_NAME_PREVIEW_BOX)
  private Href previewBox;

  public static final String SERIALIZED_NAME_PREVIEW_PDF = "preview-pdf";
  @SerializedName(SERIALIZED_NAME_PREVIEW_PDF)
  private Href previewPdf;

  public static final String SERIALIZED_NAME_PREVIEW_PDF_VIEWER = "preview-pdf-viewer";
  @SerializedName(SERIALIZED_NAME_PREVIEW_PDF_VIEWER)
  private Href previewPdfViewer;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Href progress;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private Href project;

  public static final String SERIALIZED_NAME_STRINGS = "strings";
  @SerializedName(SERIALIZED_NAME_STRINGS)
  private Href strings;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private Href thumbnail;

  public DocumentLinks() {
  }

  public DocumentLinks self(Href self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Href getSelf() {
    return self;
  }

  public void setSelf(Href self) {
    this.self = self;
  }


  public DocumentLinks admins(Map<String, Href> admins) {
    this.admins = admins;
    return this;
  }

  public DocumentLinks putAdminsItem(String key, Href adminsItem) {
    if (this.admins == null) {
      this.admins = new HashMap<>();
    }
    this.admins.put(key, adminsItem);
    return this;
  }

  /**
   * Get admins
   * @return admins
   */
  @javax.annotation.Nullable
  public Map<String, Href> getAdmins() {
    return admins;
  }

  public void setAdmins(Map<String, Href> admins) {
    this.admins = admins;
  }


  public DocumentLinks download(Href download) {
    this.download = download;
    return this;
  }

  /**
   * Get download
   * @return download
   */
  @javax.annotation.Nullable
  public Href getDownload() {
    return download;
  }

  public void setDownload(Href download) {
    this.download = download;
  }


  public DocumentLinks editors(Map<String, Href> editors) {
    this.editors = editors;
    return this;
  }

  public DocumentLinks putEditorsItem(String key, Href editorsItem) {
    if (this.editors == null) {
      this.editors = new HashMap<>();
    }
    this.editors.put(key, editorsItem);
    return this;
  }

  /**
   * Get editors
   * @return editors
   */
  @javax.annotation.Nullable
  public Map<String, Href> getEditors() {
    return editors;
  }

  public void setEditors(Map<String, Href> editors) {
    this.editors = editors;
  }


  public DocumentLinks previewBox(Href previewBox) {
    this.previewBox = previewBox;
    return this;
  }

  /**
   * Get previewBox
   * @return previewBox
   */
  @javax.annotation.Nullable
  public Href getPreviewBox() {
    return previewBox;
  }

  public void setPreviewBox(Href previewBox) {
    this.previewBox = previewBox;
  }


  public DocumentLinks previewPdf(Href previewPdf) {
    this.previewPdf = previewPdf;
    return this;
  }

  /**
   * Get previewPdf
   * @return previewPdf
   */
  @javax.annotation.Nullable
  public Href getPreviewPdf() {
    return previewPdf;
  }

  public void setPreviewPdf(Href previewPdf) {
    this.previewPdf = previewPdf;
  }


  public DocumentLinks previewPdfViewer(Href previewPdfViewer) {
    this.previewPdfViewer = previewPdfViewer;
    return this;
  }

  /**
   * Get previewPdfViewer
   * @return previewPdfViewer
   */
  @javax.annotation.Nullable
  public Href getPreviewPdfViewer() {
    return previewPdfViewer;
  }

  public void setPreviewPdfViewer(Href previewPdfViewer) {
    this.previewPdfViewer = previewPdfViewer;
  }


  public DocumentLinks progress(Href progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Href getProgress() {
    return progress;
  }

  public void setProgress(Href progress) {
    this.progress = progress;
  }


  public DocumentLinks project(Href project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public Href getProject() {
    return project;
  }

  public void setProject(Href project) {
    this.project = project;
  }


  public DocumentLinks strings(Href strings) {
    this.strings = strings;
    return this;
  }

  /**
   * Get strings
   * @return strings
   */
  @javax.annotation.Nullable
  public Href getStrings() {
    return strings;
  }

  public void setStrings(Href strings) {
    this.strings = strings;
  }


  public DocumentLinks thumbnail(Href thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Get thumbnail
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public Href getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(Href thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentLinks documentLinks = (DocumentLinks) o;
    return Objects.equals(this.self, documentLinks.self) &&
        Objects.equals(this.admins, documentLinks.admins) &&
        Objects.equals(this.download, documentLinks.download) &&
        Objects.equals(this.editors, documentLinks.editors) &&
        Objects.equals(this.previewBox, documentLinks.previewBox) &&
        Objects.equals(this.previewPdf, documentLinks.previewPdf) &&
        Objects.equals(this.previewPdfViewer, documentLinks.previewPdfViewer) &&
        Objects.equals(this.progress, documentLinks.progress) &&
        Objects.equals(this.project, documentLinks.project) &&
        Objects.equals(this.strings, documentLinks.strings) &&
        Objects.equals(this.thumbnail, documentLinks.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, admins, download, editors, previewBox, previewPdf, previewPdfViewer, progress, project, strings, thumbnail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentLinks {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    editors: ").append(toIndentedString(editors)).append("\n");
    sb.append("    previewBox: ").append(toIndentedString(previewBox)).append("\n");
    sb.append("    previewPdf: ").append(toIndentedString(previewPdf)).append("\n");
    sb.append("    previewPdfViewer: ").append(toIndentedString(previewPdfViewer)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    strings: ").append(toIndentedString(strings)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("self");
    openapiFields.add("admins");
    openapiFields.add("download");
    openapiFields.add("editors");
    openapiFields.add("preview-box");
    openapiFields.add("preview-pdf");
    openapiFields.add("preview-pdf-viewer");
    openapiFields.add("progress");
    openapiFields.add("project");
    openapiFields.add("strings");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentLinks is not found in the empty JSON string", DocumentLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `download`
      if (jsonObj.get("download") != null && !jsonObj.get("download").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("download"));
      }
      // validate the optional field `preview-box`
      if (jsonObj.get("preview-box") != null && !jsonObj.get("preview-box").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("preview-box"));
      }
      // validate the optional field `preview-pdf`
      if (jsonObj.get("preview-pdf") != null && !jsonObj.get("preview-pdf").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("preview-pdf"));
      }
      // validate the optional field `preview-pdf-viewer`
      if (jsonObj.get("preview-pdf-viewer") != null && !jsonObj.get("preview-pdf-viewer").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("preview-pdf-viewer"));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("progress"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `strings`
      if (jsonObj.get("strings") != null && !jsonObj.get("strings").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("strings"));
      }
      // validate the optional field `thumbnail`
      if (jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("thumbnail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentLinks>() {
           @Override
           public void write(JsonWriter out, DocumentLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentLinks
   * @throws IOException if the JSON string is invalid with respect to DocumentLinks
   */
  public static DocumentLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentLinks.class);
  }

  /**
   * Convert an instance of DocumentLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

