/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManualFile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManualFile {
  public static final String SERIALIZED_NAME_DRIVE_FILE_ID = "driveFileId";
  @SerializedName(SERIALIZED_NAME_DRIVE_FILE_ID)
  private Long driveFileId;

  public static final String SERIALIZED_NAME_IS_PROOFREAD = "isProofread";
  @SerializedName(SERIALIZED_NAME_IS_PROOFREAD)
  private Boolean isProofread;

  public static final String SERIALIZED_NAME_IS_TRANSLATED = "isTranslated";
  @SerializedName(SERIALIZED_NAME_IS_TRANSLATED)
  private Boolean isTranslated;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_PROOFREADING_FILE_ID = "proofreadingFileId";
  @SerializedName(SERIALIZED_NAME_PROOFREADING_FILE_ID)
  private Long proofreadingFileId;

  public static final String SERIALIZED_NAME_TRANSLATION_FILE_ID = "translationFileId";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_FILE_ID)
  private Long translationFileId;

  public ManualFile() {
  }

  public ManualFile driveFileId(Long driveFileId) {
    this.driveFileId = driveFileId;
    return this;
  }

  /**
   * Get driveFileId
   * @return driveFileId
   */
  @javax.annotation.Nullable
  public Long getDriveFileId() {
    return driveFileId;
  }

  public void setDriveFileId(Long driveFileId) {
    this.driveFileId = driveFileId;
  }


  public ManualFile isProofread(Boolean isProofread) {
    this.isProofread = isProofread;
    return this;
  }

  /**
   * Get isProofread
   * @return isProofread
   */
  @javax.annotation.Nullable
  public Boolean getIsProofread() {
    return isProofread;
  }

  public void setIsProofread(Boolean isProofread) {
    this.isProofread = isProofread;
  }


  public ManualFile isTranslated(Boolean isTranslated) {
    this.isTranslated = isTranslated;
    return this;
  }

  /**
   * Get isTranslated
   * @return isTranslated
   */
  @javax.annotation.Nullable
  public Boolean getIsTranslated() {
    return isTranslated;
  }

  public void setIsTranslated(Boolean isTranslated) {
    this.isTranslated = isTranslated;
  }


  public ManualFile language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public ManualFile proofreadingFileId(Long proofreadingFileId) {
    this.proofreadingFileId = proofreadingFileId;
    return this;
  }

  /**
   * Get proofreadingFileId
   * @return proofreadingFileId
   */
  @javax.annotation.Nullable
  public Long getProofreadingFileId() {
    return proofreadingFileId;
  }

  public void setProofreadingFileId(Long proofreadingFileId) {
    this.proofreadingFileId = proofreadingFileId;
  }


  public ManualFile translationFileId(Long translationFileId) {
    this.translationFileId = translationFileId;
    return this;
  }

  /**
   * Get translationFileId
   * @return translationFileId
   */
  @javax.annotation.Nullable
  public Long getTranslationFileId() {
    return translationFileId;
  }

  public void setTranslationFileId(Long translationFileId) {
    this.translationFileId = translationFileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualFile manualFile = (ManualFile) o;
    return Objects.equals(this.driveFileId, manualFile.driveFileId) &&
        Objects.equals(this.isProofread, manualFile.isProofread) &&
        Objects.equals(this.isTranslated, manualFile.isTranslated) &&
        Objects.equals(this.language, manualFile.language) &&
        Objects.equals(this.proofreadingFileId, manualFile.proofreadingFileId) &&
        Objects.equals(this.translationFileId, manualFile.translationFileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driveFileId, isProofread, isTranslated, language, proofreadingFileId, translationFileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualFile {\n");
    sb.append("    driveFileId: ").append(toIndentedString(driveFileId)).append("\n");
    sb.append("    isProofread: ").append(toIndentedString(isProofread)).append("\n");
    sb.append("    isTranslated: ").append(toIndentedString(isTranslated)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    proofreadingFileId: ").append(toIndentedString(proofreadingFileId)).append("\n");
    sb.append("    translationFileId: ").append(toIndentedString(translationFileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("driveFileId");
    openapiFields.add("isProofread");
    openapiFields.add("isTranslated");
    openapiFields.add("language");
    openapiFields.add("proofreadingFileId");
    openapiFields.add("translationFileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManualFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManualFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManualFile is not found in the empty JSON string", ManualFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManualFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManualFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManualFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManualFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManualFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManualFile.class));

       return (TypeAdapter<T>) new TypeAdapter<ManualFile>() {
           @Override
           public void write(JsonWriter out, ManualFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManualFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManualFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManualFile
   * @throws IOException if the JSON string is invalid with respect to ManualFile
   */
  public static ManualFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManualFile.class);
  }

  /**
   * Convert an instance of ManualFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

