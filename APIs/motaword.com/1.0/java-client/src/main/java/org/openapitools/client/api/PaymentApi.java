/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreditCard;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCreditCard
     * @param cardId Credit Card ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreditCardCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/{cardId}/delete"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCreditCardValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling deleteCreditCard(Async)");
        }

        return deleteCreditCardCall(cardId, _callback);

    }

    /**
     * Delete credit card
     * 
     * @param cardId Credit Card ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteCreditCard(Long cardId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteCreditCardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Delete credit card
     * 
     * @param cardId Credit Card ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteCreditCardWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = deleteCreditCardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete credit card (asynchronously)
     * 
     * @param cardId Credit Card ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCreditCardAsync(Long cardId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCreditCardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCreditCard
     * @param cardId Credit Card ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MissingCreditCard </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditCardCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/{cardId}"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditCardValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCreditCard(Async)");
        }

        return getCreditCardCall(cardId, _callback);

    }

    /**
     * View saved credit card
     * 
     * @param cardId Credit Card ID (required)
     * @return CreditCard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MissingCreditCard </td><td>  -  </td></tr>
     </table>
     */
    public CreditCard getCreditCard(Long cardId) throws ApiException {
        ApiResponse<CreditCard> localVarResp = getCreditCardWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * View saved credit card
     * 
     * @param cardId Credit Card ID (required)
     * @return ApiResponse&lt;CreditCard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MissingCreditCard </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditCard> getCreditCardWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = getCreditCardValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View saved credit card (asynchronously)
     * 
     * @param cardId Credit Card ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> MissingCreditCard </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditCardAsync(Long cardId, final ApiCallback<CreditCard> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditCardValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetCardPaymentCode
     * @param cardId Credit Card ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCardPaymentCodeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/{cardId}/reset-payment-code"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetCardPaymentCodeValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling resetCardPaymentCode(Async)");
        }

        return resetCardPaymentCodeCall(cardId, _callback);

    }

    /**
     * Reset credit card payment code
     * Reset the payment code used to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param cardId Credit Card ID (required)
     * @return CreditCard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public CreditCard resetCardPaymentCode(Long cardId) throws ApiException {
        ApiResponse<CreditCard> localVarResp = resetCardPaymentCodeWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Reset credit card payment code
     * Reset the payment code used to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param cardId Credit Card ID (required)
     * @return ApiResponse&lt;CreditCard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditCard> resetCardPaymentCodeWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = resetCardPaymentCodeValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset credit card payment code (asynchronously)
     * Reset the payment code used to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param cardId Credit Card ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound MissingCorporateAccount MissingParameter MissingCreditCard UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCardPaymentCodeAsync(Long cardId, final ApiCallback<CreditCard> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetCardPaymentCodeValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetCorporatePaymentCode
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCorporatePaymentCodeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/reset-corporate-payment-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetCorporatePaymentCodeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resetCorporatePaymentCodeCall(_callback);

    }

    /**
     * Reset payment code
     * Reset your corporate account&#39;s payment code to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @return CreditCard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public CreditCard resetCorporatePaymentCode() throws ApiException {
        ApiResponse<CreditCard> localVarResp = resetCorporatePaymentCodeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Reset payment code
     * Reset your corporate account&#39;s payment code to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @return ApiResponse&lt;CreditCard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditCard> resetCorporatePaymentCodeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetCorporatePaymentCodeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset payment code (asynchronously)
     * Reset your corporate account&#39;s payment code to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit card content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCorporatePaymentCodeAsync(final ApiCallback<CreditCard> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetCorporatePaymentCodeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreditCard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toggleCorporateAutoCharge
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleCorporateAutoChargeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/toggle-corporate-auto-charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleCorporateAutoChargeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toggleCorporateAutoChargeCall(_callback);

    }

    /**
     * Manage automatic charges on your credit card
     * Toggle (enable/disable) automatic charges on the credit card on file.
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus toggleCorporateAutoCharge() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = toggleCorporateAutoChargeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Manage automatic charges on your credit card
     * Toggle (enable/disable) automatic charges on the credit card on file.
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> toggleCorporateAutoChargeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toggleCorporateAutoChargeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manage automatic charges on your credit card (asynchronously)
     * Toggle (enable/disable) automatic charges on the credit card on file.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser MissingCorporateAccount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleCorporateAutoChargeAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleCorporateAutoChargeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
