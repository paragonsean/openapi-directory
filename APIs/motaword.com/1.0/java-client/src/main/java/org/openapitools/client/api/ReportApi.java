/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.FilterContents;
import org.openapitools.client.model.FilterDates;
import org.openapitools.client.model.LanguagePairsReport;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.QaFilter;
import org.openapitools.client.model.QaWarnings;
import org.openapitools.client.model.ReportFilter;
import org.openapitools.client.model.UsersReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateQAReport
     * @param qaFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QA entries </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateQAReportCall(QaFilter qaFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qaFilter;

        // create path and map variables
        String localVarPath = "/reports/qa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateQAReportValidateBeforeCall(QaFilter qaFilter, final ApiCallback _callback) throws ApiException {
        return generateQAReportCall(qaFilter, _callback);

    }

    /**
     * Generate a QA report for given filter
     * Generate a QA report for given filter
     * @param qaFilter  (optional)
     * @return QaWarnings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QA entries </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public QaWarnings generateQAReport(QaFilter qaFilter) throws ApiException {
        ApiResponse<QaWarnings> localVarResp = generateQAReportWithHttpInfo(qaFilter);
        return localVarResp.getData();
    }

    /**
     * Generate a QA report for given filter
     * Generate a QA report for given filter
     * @param qaFilter  (optional)
     * @return ApiResponse&lt;QaWarnings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QA entries </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QaWarnings> generateQAReportWithHttpInfo(QaFilter qaFilter) throws ApiException {
        okhttp3.Call localVarCall = generateQAReportValidateBeforeCall(qaFilter, null);
        Type localVarReturnType = new TypeToken<QaWarnings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a QA report for given filter (asynchronously)
     * Generate a QA report for given filter
     * @param qaFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of QA entries </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateQAReportAsync(QaFilter qaFilter, final ApiCallback<QaWarnings> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateQAReportValidateBeforeCall(qaFilter, _callback);
        Type localVarReturnType = new TypeToken<QaWarnings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilterContents
     * @param filterDates  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter contents </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterContentsCall(FilterDates filterDates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterDates;

        // create path and map variables
        String localVarPath = "/reports/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterContentsValidateBeforeCall(FilterDates filterDates, final ApiCallback _callback) throws ApiException {
        return getFilterContentsCall(filterDates, _callback);

    }

    /**
     * Returns available options for selected timeframe.
     * 
     * @param filterDates  (optional)
     * @return FilterContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter contents </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public FilterContents getFilterContents(FilterDates filterDates) throws ApiException {
        ApiResponse<FilterContents> localVarResp = getFilterContentsWithHttpInfo(filterDates);
        return localVarResp.getData();
    }

    /**
     * Returns available options for selected timeframe.
     * 
     * @param filterDates  (optional)
     * @return ApiResponse&lt;FilterContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter contents </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilterContents> getFilterContentsWithHttpInfo(FilterDates filterDates) throws ApiException {
        okhttp3.Call localVarCall = getFilterContentsValidateBeforeCall(filterDates, null);
        Type localVarReturnType = new TypeToken<FilterContents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns available options for selected timeframe. (asynchronously)
     * 
     * @param filterDates  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter contents </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterContentsAsync(FilterDates filterDates, final ApiCallback<FilterContents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterContentsValidateBeforeCall(filterDates, _callback);
        Type localVarReturnType = new TypeToken<FilterContents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLanguagePairsReport
     * @param reportFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language pairs stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagePairsReportCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportFilter;

        // create path and map variables
        String localVarPath = "/reports/language-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLanguagePairsReportValidateBeforeCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        return getLanguagePairsReportCall(reportFilter, _callback);

    }

    /**
     * Language pairs report
     * View translation reports for each language pair with translations under your account. You can view company-wide language pairs if you have the user permission.
     * @param reportFilter  (optional)
     * @return LanguagePairsReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language pairs stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public LanguagePairsReport getLanguagePairsReport(ReportFilter reportFilter) throws ApiException {
        ApiResponse<LanguagePairsReport> localVarResp = getLanguagePairsReportWithHttpInfo(reportFilter);
        return localVarResp.getData();
    }

    /**
     * Language pairs report
     * View translation reports for each language pair with translations under your account. You can view company-wide language pairs if you have the user permission.
     * @param reportFilter  (optional)
     * @return ApiResponse&lt;LanguagePairsReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language pairs stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LanguagePairsReport> getLanguagePairsReportWithHttpInfo(ReportFilter reportFilter) throws ApiException {
        okhttp3.Call localVarCall = getLanguagePairsReportValidateBeforeCall(reportFilter, null);
        Type localVarReturnType = new TypeToken<LanguagePairsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Language pairs report (asynchronously)
     * View translation reports for each language pair with translations under your account. You can view company-wide language pairs if you have the user permission.
     * @param reportFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Language pairs stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLanguagePairsReportAsync(ReportFilter reportFilter, final ApiCallback<LanguagePairsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLanguagePairsReportValidateBeforeCall(reportFilter, _callback);
        Type localVarReturnType = new TypeToken<LanguagePairsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectsReport
     * @param reportFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsReportCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportFilter;

        // create path and map variables
        String localVarPath = "/reports/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsReportValidateBeforeCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        return getProjectsReportCall(reportFilter, _callback);

    }

    /**
     * Projects report
     * View projects under your account, with advanced filtering. You can view company-wide projects if you have the user permission.
     * @param reportFilter  (optional)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getProjectsReport(ReportFilter reportFilter) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getProjectsReportWithHttpInfo(reportFilter);
        return localVarResp.getData();
    }

    /**
     * Projects report
     * View projects under your account, with advanced filtering. You can view company-wide projects if you have the user permission.
     * @param reportFilter  (optional)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getProjectsReportWithHttpInfo(ReportFilter reportFilter) throws ApiException {
        okhttp3.Call localVarCall = getProjectsReportValidateBeforeCall(reportFilter, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects report (asynchronously)
     * View projects under your account, with advanced filtering. You can view company-wide projects if you have the user permission.
     * @param reportFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsReportAsync(ReportFilter reportFilter, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsReportValidateBeforeCall(reportFilter, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersReport
     * @param reportFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersReportCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportFilter;

        // create path and map variables
        String localVarPath = "/reports/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersReportValidateBeforeCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        return getUsersReportCall(reportFilter, _callback);

    }

    /**
     * Company users report
     * View translation reports for each user under your company account. You need the permission to view users in your company.
     * @param reportFilter  (optional)
     * @return UsersReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public UsersReport getUsersReport(ReportFilter reportFilter) throws ApiException {
        ApiResponse<UsersReport> localVarResp = getUsersReportWithHttpInfo(reportFilter);
        return localVarResp.getData();
    }

    /**
     * Company users report
     * View translation reports for each user under your company account. You need the permission to view users in your company.
     * @param reportFilter  (optional)
     * @return ApiResponse&lt;UsersReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersReport> getUsersReportWithHttpInfo(ReportFilter reportFilter) throws ApiException {
        okhttp3.Call localVarCall = getUsersReportValidateBeforeCall(reportFilter, null);
        Type localVarReturnType = new TypeToken<UsersReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Company users report (asynchronously)
     * View translation reports for each user under your company account. You need the permission to view users in your company.
     * @param reportFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersReportAsync(ReportFilter reportFilter, final ApiCallback<UsersReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersReportValidateBeforeCall(reportFilter, _callback);
        Type localVarReturnType = new TypeToken<UsersReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
