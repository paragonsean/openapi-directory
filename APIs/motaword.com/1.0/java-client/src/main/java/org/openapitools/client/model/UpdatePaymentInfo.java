/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePaymentInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePaymentInfo {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_SAVE_AS_CORPORATE_PRIMARY = "save_as_corporate_primary";
  @SerializedName(SERIALIZED_NAME_SAVE_AS_CORPORATE_PRIMARY)
  private Boolean saveAsCorporatePrimary;

  public static final String SERIALIZED_NAME_SHARE_WITH_CORPORATE_USERS = "share_with_corporate_users";
  @SerializedName(SERIALIZED_NAME_SHARE_WITH_CORPORATE_USERS)
  private Boolean shareWithCorporateUsers;

  public static final String SERIALIZED_NAME_STRIPE_TOKEN = "stripeToken";
  @SerializedName(SERIALIZED_NAME_STRIPE_TOKEN)
  private String stripeToken;

  public UpdatePaymentInfo() {
  }

  public UpdatePaymentInfo city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public UpdatePaymentInfo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public UpdatePaymentInfo phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public UpdatePaymentInfo state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public UpdatePaymentInfo street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public UpdatePaymentInfo zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * Get zip
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }


  public UpdatePaymentInfo bin(String bin) {
    this.bin = bin;
    return this;
  }

  /**
   * Get bin
   * @return bin
   */
  @javax.annotation.Nullable
  public String getBin() {
    return bin;
  }

  public void setBin(String bin) {
    this.bin = bin;
  }


  public UpdatePaymentInfo saveAsCorporatePrimary(Boolean saveAsCorporatePrimary) {
    this.saveAsCorporatePrimary = saveAsCorporatePrimary;
    return this;
  }

  /**
   * Get saveAsCorporatePrimary
   * @return saveAsCorporatePrimary
   */
  @javax.annotation.Nullable
  public Boolean getSaveAsCorporatePrimary() {
    return saveAsCorporatePrimary;
  }

  public void setSaveAsCorporatePrimary(Boolean saveAsCorporatePrimary) {
    this.saveAsCorporatePrimary = saveAsCorporatePrimary;
  }


  public UpdatePaymentInfo shareWithCorporateUsers(Boolean shareWithCorporateUsers) {
    this.shareWithCorporateUsers = shareWithCorporateUsers;
    return this;
  }

  /**
   * Get shareWithCorporateUsers
   * @return shareWithCorporateUsers
   */
  @javax.annotation.Nullable
  public Boolean getShareWithCorporateUsers() {
    return shareWithCorporateUsers;
  }

  public void setShareWithCorporateUsers(Boolean shareWithCorporateUsers) {
    this.shareWithCorporateUsers = shareWithCorporateUsers;
  }


  public UpdatePaymentInfo stripeToken(String stripeToken) {
    this.stripeToken = stripeToken;
    return this;
  }

  /**
   * Get stripeToken
   * @return stripeToken
   */
  @javax.annotation.Nullable
  public String getStripeToken() {
    return stripeToken;
  }

  public void setStripeToken(String stripeToken) {
    this.stripeToken = stripeToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePaymentInfo updatePaymentInfo = (UpdatePaymentInfo) o;
    return Objects.equals(this.city, updatePaymentInfo.city) &&
        Objects.equals(this.country, updatePaymentInfo.country) &&
        Objects.equals(this.phone, updatePaymentInfo.phone) &&
        Objects.equals(this.state, updatePaymentInfo.state) &&
        Objects.equals(this.street, updatePaymentInfo.street) &&
        Objects.equals(this.zip, updatePaymentInfo.zip) &&
        Objects.equals(this.bin, updatePaymentInfo.bin) &&
        Objects.equals(this.saveAsCorporatePrimary, updatePaymentInfo.saveAsCorporatePrimary) &&
        Objects.equals(this.shareWithCorporateUsers, updatePaymentInfo.shareWithCorporateUsers) &&
        Objects.equals(this.stripeToken, updatePaymentInfo.stripeToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, phone, state, street, zip, bin, saveAsCorporatePrimary, shareWithCorporateUsers, stripeToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePaymentInfo {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    saveAsCorporatePrimary: ").append(toIndentedString(saveAsCorporatePrimary)).append("\n");
    sb.append("    shareWithCorporateUsers: ").append(toIndentedString(shareWithCorporateUsers)).append("\n");
    sb.append("    stripeToken: ").append(toIndentedString(stripeToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("phone");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("zip");
    openapiFields.add("bin");
    openapiFields.add("save_as_corporate_primary");
    openapiFields.add("share_with_corporate_users");
    openapiFields.add("stripeToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePaymentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePaymentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePaymentInfo is not found in the empty JSON string", UpdatePaymentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePaymentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePaymentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("stripeToken") != null && !jsonObj.get("stripeToken").isJsonNull()) && !jsonObj.get("stripeToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePaymentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePaymentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePaymentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePaymentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePaymentInfo>() {
           @Override
           public void write(JsonWriter out, UpdatePaymentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePaymentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePaymentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePaymentInfo
   * @throws IOException if the JSON string is invalid with respect to UpdatePaymentInfo
   */
  public static UpdatePaymentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePaymentInfo.class);
  }

  /**
   * Convert an instance of UpdatePaymentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

