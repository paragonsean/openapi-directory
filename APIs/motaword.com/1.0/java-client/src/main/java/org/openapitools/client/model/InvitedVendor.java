/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvitedVendor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvitedVendor {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_EMAIL_OPEN_RATE = "email_open_rate";
  @SerializedName(SERIALIZED_NAME_EMAIL_OPEN_RATE)
  private BigDecimal emailOpenRate;

  public static final String SERIALIZED_NAME_IS_ENTERED = "is_entered";
  @SerializedName(SERIALIZED_NAME_IS_ENTERED)
  private Boolean isEntered;

  public static final String SERIALIZED_NAME_IS_GET_PAID = "is_get_paid";
  @SerializedName(SERIALIZED_NAME_IS_GET_PAID)
  private Boolean isGetPaid;

  public static final String SERIALIZED_NAME_IS_WORKED = "is_worked";
  @SerializedName(SERIALIZED_NAME_IS_WORKED)
  private Boolean isWorked;

  public static final String SERIALIZED_NAME_IS_WORKED_IN_ANY_PROJECT = "is_worked_in_any_project";
  @SerializedName(SERIALIZED_NAME_IS_WORKED_IN_ANY_PROJECT)
  private Boolean isWorkedInAnyProject;

  public static final String SERIALIZED_NAME_LAST_PROJECT_DATE = "last_project_date";
  @SerializedName(SERIALIZED_NAME_LAST_PROJECT_DATE)
  private LocalDate lastProjectDate;

  public static final String SERIALIZED_NAME_PROJECT_STATUS_WHEN_INTERACTED = "project_status_when_interacted";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS_WHEN_INTERACTED)
  private BigDecimal projectStatusWhenInteracted;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "registration_date";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private LocalDate registrationDate;

  public static final String SERIALIZED_NAME_RESPONSIVENESS = "responsiveness";
  @SerializedName(SERIALIZED_NAME_RESPONSIVENESS)
  private BigDecimal responsiveness;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private BigDecimal userId;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private BigDecimal vendorId;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "vendor_name";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private String vendorName;

  public static final String SERIALIZED_NAME_VENDOR_TYPE = "vendor_type";
  @SerializedName(SERIALIZED_NAME_VENDOR_TYPE)
  private String vendorType;

  public InvitedVendor() {
  }

  public InvitedVendor action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Action to be taken
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public InvitedVendor emailOpenRate(BigDecimal emailOpenRate) {
    this.emailOpenRate = emailOpenRate;
    return this;
  }

  /**
   * Email opening rate of the vendor
   * @return emailOpenRate
   */
  @javax.annotation.Nullable
  public BigDecimal getEmailOpenRate() {
    return emailOpenRate;
  }

  public void setEmailOpenRate(BigDecimal emailOpenRate) {
    this.emailOpenRate = emailOpenRate;
  }


  public InvitedVendor isEntered(Boolean isEntered) {
    this.isEntered = isEntered;
    return this;
  }

  /**
   * Did the vendor enter the given project
   * @return isEntered
   */
  @javax.annotation.Nullable
  public Boolean getIsEntered() {
    return isEntered;
  }

  public void setIsEntered(Boolean isEntered) {
    this.isEntered = isEntered;
  }


  public InvitedVendor isGetPaid(Boolean isGetPaid) {
    this.isGetPaid = isGetPaid;
    return this;
  }

  /**
   * Is vendor get ever paid?
   * @return isGetPaid
   */
  @javax.annotation.Nullable
  public Boolean getIsGetPaid() {
    return isGetPaid;
  }

  public void setIsGetPaid(Boolean isGetPaid) {
    this.isGetPaid = isGetPaid;
  }


  public InvitedVendor isWorked(Boolean isWorked) {
    this.isWorked = isWorked;
    return this;
  }

  /**
   * Did the vendor work on the given project
   * @return isWorked
   */
  @javax.annotation.Nullable
  public Boolean getIsWorked() {
    return isWorked;
  }

  public void setIsWorked(Boolean isWorked) {
    this.isWorked = isWorked;
  }


  public InvitedVendor isWorkedInAnyProject(Boolean isWorkedInAnyProject) {
    this.isWorkedInAnyProject = isWorkedInAnyProject;
    return this;
  }

  /**
   * Vendors working status in any project
   * @return isWorkedInAnyProject
   */
  @javax.annotation.Nullable
  public Boolean getIsWorkedInAnyProject() {
    return isWorkedInAnyProject;
  }

  public void setIsWorkedInAnyProject(Boolean isWorkedInAnyProject) {
    this.isWorkedInAnyProject = isWorkedInAnyProject;
  }


  public InvitedVendor lastProjectDate(LocalDate lastProjectDate) {
    this.lastProjectDate = lastProjectDate;
    return this;
  }

  /**
   * Last project date
   * @return lastProjectDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastProjectDate() {
    return lastProjectDate;
  }

  public void setLastProjectDate(LocalDate lastProjectDate) {
    this.lastProjectDate = lastProjectDate;
  }


  public InvitedVendor projectStatusWhenInteracted(BigDecimal projectStatusWhenInteracted) {
    this.projectStatusWhenInteracted = projectStatusWhenInteracted;
    return this;
  }

  /**
   * Project translation percentage when interacted with the vendor
   * @return projectStatusWhenInteracted
   */
  @javax.annotation.Nullable
  public BigDecimal getProjectStatusWhenInteracted() {
    return projectStatusWhenInteracted;
  }

  public void setProjectStatusWhenInteracted(BigDecimal projectStatusWhenInteracted) {
    this.projectStatusWhenInteracted = projectStatusWhenInteracted;
  }


  public InvitedVendor registrationDate(LocalDate registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

  /**
   * Registration date
   * @return registrationDate
   */
  @javax.annotation.Nullable
  public LocalDate getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(LocalDate registrationDate) {
    this.registrationDate = registrationDate;
  }


  public InvitedVendor responsiveness(BigDecimal responsiveness) {
    this.responsiveness = responsiveness;
    return this;
  }

  /**
   * Responsiveness of the vendor
   * @return responsiveness
   */
  @javax.annotation.Nullable
  public BigDecimal getResponsiveness() {
    return responsiveness;
  }

  public void setResponsiveness(BigDecimal responsiveness) {
    this.responsiveness = responsiveness;
  }


  public InvitedVendor userId(BigDecimal userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Id in the Users
   * @return userId
   */
  @javax.annotation.Nullable
  public BigDecimal getUserId() {
    return userId;
  }

  public void setUserId(BigDecimal userId) {
    this.userId = userId;
  }


  public InvitedVendor vendorId(BigDecimal vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Id in the Vendors
   * @return vendorId
   */
  @javax.annotation.Nullable
  public BigDecimal getVendorId() {
    return vendorId;
  }

  public void setVendorId(BigDecimal vendorId) {
    this.vendorId = vendorId;
  }


  public InvitedVendor vendorName(String vendorName) {
    this.vendorName = vendorName;
    return this;
  }

  /**
   * The name of the vendor
   * @return vendorName
   */
  @javax.annotation.Nullable
  public String getVendorName() {
    return vendorName;
  }

  public void setVendorName(String vendorName) {
    this.vendorName = vendorName;
  }


  public InvitedVendor vendorType(String vendorType) {
    this.vendorType = vendorType;
    return this;
  }

  /**
   * Type of the vendor in the given project namely translator or proofreader
   * @return vendorType
   */
  @javax.annotation.Nullable
  public String getVendorType() {
    return vendorType;
  }

  public void setVendorType(String vendorType) {
    this.vendorType = vendorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitedVendor invitedVendor = (InvitedVendor) o;
    return Objects.equals(this.action, invitedVendor.action) &&
        Objects.equals(this.emailOpenRate, invitedVendor.emailOpenRate) &&
        Objects.equals(this.isEntered, invitedVendor.isEntered) &&
        Objects.equals(this.isGetPaid, invitedVendor.isGetPaid) &&
        Objects.equals(this.isWorked, invitedVendor.isWorked) &&
        Objects.equals(this.isWorkedInAnyProject, invitedVendor.isWorkedInAnyProject) &&
        Objects.equals(this.lastProjectDate, invitedVendor.lastProjectDate) &&
        Objects.equals(this.projectStatusWhenInteracted, invitedVendor.projectStatusWhenInteracted) &&
        Objects.equals(this.registrationDate, invitedVendor.registrationDate) &&
        Objects.equals(this.responsiveness, invitedVendor.responsiveness) &&
        Objects.equals(this.userId, invitedVendor.userId) &&
        Objects.equals(this.vendorId, invitedVendor.vendorId) &&
        Objects.equals(this.vendorName, invitedVendor.vendorName) &&
        Objects.equals(this.vendorType, invitedVendor.vendorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, emailOpenRate, isEntered, isGetPaid, isWorked, isWorkedInAnyProject, lastProjectDate, projectStatusWhenInteracted, registrationDate, responsiveness, userId, vendorId, vendorName, vendorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitedVendor {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    emailOpenRate: ").append(toIndentedString(emailOpenRate)).append("\n");
    sb.append("    isEntered: ").append(toIndentedString(isEntered)).append("\n");
    sb.append("    isGetPaid: ").append(toIndentedString(isGetPaid)).append("\n");
    sb.append("    isWorked: ").append(toIndentedString(isWorked)).append("\n");
    sb.append("    isWorkedInAnyProject: ").append(toIndentedString(isWorkedInAnyProject)).append("\n");
    sb.append("    lastProjectDate: ").append(toIndentedString(lastProjectDate)).append("\n");
    sb.append("    projectStatusWhenInteracted: ").append(toIndentedString(projectStatusWhenInteracted)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    responsiveness: ").append(toIndentedString(responsiveness)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("    vendorType: ").append(toIndentedString(vendorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("email_open_rate");
    openapiFields.add("is_entered");
    openapiFields.add("is_get_paid");
    openapiFields.add("is_worked");
    openapiFields.add("is_worked_in_any_project");
    openapiFields.add("last_project_date");
    openapiFields.add("project_status_when_interacted");
    openapiFields.add("registration_date");
    openapiFields.add("responsiveness");
    openapiFields.add("user_id");
    openapiFields.add("vendor_id");
    openapiFields.add("vendor_name");
    openapiFields.add("vendor_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitedVendor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitedVendor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitedVendor is not found in the empty JSON string", InvitedVendor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvitedVendor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitedVendor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("vendor_name") != null && !jsonObj.get("vendor_name").isJsonNull()) && !jsonObj.get("vendor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_name").toString()));
      }
      if ((jsonObj.get("vendor_type") != null && !jsonObj.get("vendor_type").isJsonNull()) && !jsonObj.get("vendor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitedVendor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitedVendor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitedVendor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitedVendor.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitedVendor>() {
           @Override
           public void write(JsonWriter out, InvitedVendor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitedVendor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitedVendor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitedVendor
   * @throws IOException if the JSON string is invalid with respect to InvitedVendor
   */
  public static InvitedVendor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitedVendor.class);
  }

  /**
   * Convert an instance of InvitedVendor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

