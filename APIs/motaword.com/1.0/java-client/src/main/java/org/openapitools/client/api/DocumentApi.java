/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ContinuousProjectDocument;
import org.openapitools.client.model.DocumentList;
import org.openapitools.client.model.DocumentSubjects;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListOrderType;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.Progress;
import org.openapitools.client.model.RegeneratePreviewResponse;
import org.openapitools.client.model.UseAsDraftPayload;
import org.openapitools.client.model.UseAsRegularPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllDocumentSubjects
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subjects of all projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllDocumentSubjectsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/subjects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDocumentSubjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllDocumentSubjectsCall(_callback);

    }

    /**
     * Get a list of subjects of projects
     * Get a list of subjects of projects
     * @return List&lt;DocumentSubjects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subjects of all projects. </td><td>  -  </td></tr>
     </table>
     */
    public List<DocumentSubjects> getAllDocumentSubjects() throws ApiException {
        ApiResponse<List<DocumentSubjects>> localVarResp = getAllDocumentSubjectsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of subjects of projects
     * Get a list of subjects of projects
     * @return ApiResponse&lt;List&lt;DocumentSubjects&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subjects of all projects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DocumentSubjects>> getAllDocumentSubjectsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllDocumentSubjectsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DocumentSubjects>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of subjects of projects (asynchronously)
     * Get a list of subjects of projects
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subjects of all projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllDocumentSubjectsAsync(final ApiCallback<List<DocumentSubjects>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDocumentSubjectsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DocumentSubjects>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocument
     * @param documentId Document ID or filename (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocument(Async)");
        }

        return getDocumentCall(documentId, _callback);

    }

    /**
     * View a single document
     * View a single document from your MotaWord account with its translation info.
     * @param documentId Document ID or filename (required)
     * @return ContinuousProjectDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectDocument getDocument(String documentId) throws ApiException {
        ApiResponse<ContinuousProjectDocument> localVarResp = getDocumentWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * View a single document
     * View a single document from your MotaWord account with its translation info.
     * @param documentId Document ID or filename (required)
     * @return ApiResponse&lt;ContinuousProjectDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectDocument> getDocumentWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a single document (asynchronously)
     * View a single document from your MotaWord account with its translation info.
     * @param documentId Document ID or filename (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAsync(String documentId, final ApiCallback<ContinuousProjectDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentProgress
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentProgressCall(BigDecimal documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}/progress"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentProgressValidateBeforeCall(BigDecimal documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentProgress(Async)");
        }

        return getDocumentProgressCall(documentId, _callback);

    }

    /**
     * View a document translation progress
     * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
     * @param documentId Document ID (required)
     * @return Progress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Progress getDocumentProgress(BigDecimal documentId) throws ApiException {
        ApiResponse<Progress> localVarResp = getDocumentProgressWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * View a document translation progress
     * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;Progress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Progress> getDocumentProgressWithHttpInfo(BigDecimal documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentProgressValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a document translation progress (asynchronously)
     * View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentProgressAsync(BigDecimal documentId, final ApiCallback<Progress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentProgressValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocuments
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsCall(Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (typeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_filter", typeFilter));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language_code", languageCode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_type", orderType));
        }

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsValidateBeforeCall(Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback _callback) throws ApiException {
        return getDocumentsCall(recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, with, _callback);

    }

    /**
     * View your documents
     * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList getDocuments(Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, List<String> with) throws ApiException {
        ApiResponse<DocumentList> localVarResp = getDocumentsWithHttpInfo(recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, with);
        return localVarResp.getData();
    }

    /**
     * View your documents
     * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> getDocumentsWithHttpInfo(Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, with, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your documents (asynchronously)
     * View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsAsync(Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, with, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarDocuments
     * @param documentId Document ID (required)
     * @param perPage Determines the number of similar documents to return. (optional, default to 1)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarDocumentsCall(Long documentId, Long perPage, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}/similars"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarDocumentsValidateBeforeCall(Long documentId, Long perPage, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getSimilarDocuments(Async)");
        }

        return getSimilarDocumentsCall(documentId, perPage, with, _callback);

    }

    /**
     * Find documents similar to this document.
     * Find documents similar to this document. Optionally, include translation information.
     * @param documentId Document ID (required)
     * @param perPage Determines the number of similar documents to return. (optional, default to 1)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList getSimilarDocuments(Long documentId, Long perPage, List<String> with) throws ApiException {
        ApiResponse<DocumentList> localVarResp = getSimilarDocumentsWithHttpInfo(documentId, perPage, with);
        return localVarResp.getData();
    }

    /**
     * Find documents similar to this document.
     * Find documents similar to this document. Optionally, include translation information.
     * @param documentId Document ID (required)
     * @param perPage Determines the number of similar documents to return. (optional, default to 1)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> getSimilarDocumentsWithHttpInfo(Long documentId, Long perPage, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getSimilarDocumentsValidateBeforeCall(documentId, perPage, with, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find documents similar to this document. (asynchronously)
     * Find documents similar to this document. Optionally, include translation information.
     * @param documentId Document ID (required)
     * @param perPage Determines the number of similar documents to return. (optional, default to 1)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarDocumentsAsync(Long documentId, Long perPage, List<String> with, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarDocumentsValidateBeforeCall(documentId, perPage, with, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserDocuments
     * @param userId User ID (required)
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDocumentsCall(Long userId, Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/documents"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recent", recent));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (typeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_filter", typeFilter));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language_code", languageCode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_type", orderType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDocumentsValidateBeforeCall(Long userId, Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserDocuments(Async)");
        }

        return getUserDocumentsCall(userId, recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, _callback);

    }

    /**
     * Get a list of your documents
     * Get a list of your documents
     * @param userId User ID (required)
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @return DocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public DocumentList getUserDocuments(Long userId, Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType) throws ApiException {
        ApiResponse<DocumentList> localVarResp = getUserDocumentsWithHttpInfo(userId, recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType);
        return localVarResp.getData();
    }

    /**
     * Get a list of your documents
     * Get a list of your documents
     * @param userId User ID (required)
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @return ApiResponse&lt;DocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentList> getUserDocumentsWithHttpInfo(Long userId, Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType) throws ApiException {
        okhttp3.Call localVarCall = getUserDocumentsValidateBeforeCall(userId, recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, null);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of your documents (asynchronously)
     * Get a list of your documents
     * @param userId User ID (required)
     * @param recent When true, this will return the most 4 recent active documents. (optional)
     * @param search  (optional)
     * @param typeFilter  (optional, default to ALL)
     * @param languageCode searches in source language of documents, in source and target languages of document&#39;s quote (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param orderBy  (optional, default to updated_at)
     * @param orderType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserDocumentsAsync(Long userId, Boolean recent, String search, String typeFilter, String languageCode, Long page, Long perPage, String orderBy, ListOrderType orderType, final ApiCallback<DocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDocumentsValidateBeforeCall(userId, recent, search, typeFilter, languageCode, page, perPage, orderBy, orderType, _callback);
        Type localVarReturnType = new TypeToken<DocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regeneratePreview
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RegeneratePreviewResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regeneratePreviewCall(Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/documents/{documentId}/regenerate_preview"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regeneratePreviewValidateBeforeCall(Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling regeneratePreview(Async)");
        }

        return regeneratePreviewCall(documentId, _callback);

    }

    /**
     * Regenerate preview and return preview URL for given file
     * Regenerate preview and return preview URL for given file
     * @param documentId Document ID (required)
     * @return RegeneratePreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RegeneratePreviewResponse </td><td>  -  </td></tr>
     </table>
     */
    public RegeneratePreviewResponse regeneratePreview(Long documentId) throws ApiException {
        ApiResponse<RegeneratePreviewResponse> localVarResp = regeneratePreviewWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Regenerate preview and return preview URL for given file
     * Regenerate preview and return preview URL for given file
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;RegeneratePreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RegeneratePreviewResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegeneratePreviewResponse> regeneratePreviewWithHttpInfo(Long documentId) throws ApiException {
        okhttp3.Call localVarCall = regeneratePreviewValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<RegeneratePreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate preview and return preview URL for given file (asynchronously)
     * Regenerate preview and return preview URL for given file
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RegeneratePreviewResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regeneratePreviewAsync(Long documentId, final ApiCallback<RegeneratePreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = regeneratePreviewValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<RegeneratePreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useAsDraft
     * @param documentId Document ID (required)
     * @param useAsDraftPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useAsDraftCall(Long documentId, UseAsDraftPayload useAsDraftPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = useAsDraftPayload;

        // create path and map variables
        String localVarPath = "/documents/{documentId}/use_as_draft"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useAsDraftValidateBeforeCall(Long documentId, UseAsDraftPayload useAsDraftPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling useAsDraft(Async)");
        }

        return useAsDraftCall(documentId, useAsDraftPayload, _callback);

    }

    /**
     * Use the translation of given source manual document as manual draft source for the given target document.
     * Use the translation of given source manual document as manual draft source for the given target document.
     * @param documentId Document ID (required)
     * @param useAsDraftPayload  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus useAsDraft(Long documentId, UseAsDraftPayload useAsDraftPayload) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = useAsDraftWithHttpInfo(documentId, useAsDraftPayload);
        return localVarResp.getData();
    }

    /**
     * Use the translation of given source manual document as manual draft source for the given target document.
     * Use the translation of given source manual document as manual draft source for the given target document.
     * @param documentId Document ID (required)
     * @param useAsDraftPayload  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> useAsDraftWithHttpInfo(Long documentId, UseAsDraftPayload useAsDraftPayload) throws ApiException {
        okhttp3.Call localVarCall = useAsDraftValidateBeforeCall(documentId, useAsDraftPayload, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use the translation of given source manual document as manual draft source for the given target document. (asynchronously)
     * Use the translation of given source manual document as manual draft source for the given target document.
     * @param documentId Document ID (required)
     * @param useAsDraftPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useAsDraftAsync(Long documentId, UseAsDraftPayload useAsDraftPayload, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = useAsDraftValidateBeforeCall(documentId, useAsDraftPayload, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for useAsRegular
     * @param documentId Document ID (required)
     * @param useAsRegularPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useAsRegularCall(Long documentId, UseAsRegularPayload useAsRegularPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = useAsRegularPayload;

        // create path and map variables
        String localVarPath = "/documents/{documentId}/use_as_regular"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call useAsRegularValidateBeforeCall(Long documentId, UseAsRegularPayload useAsRegularPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling useAsRegular(Async)");
        }

        return useAsRegularCall(documentId, useAsRegularPayload, _callback);

    }

    /**
     * Use the translation of the given manual document as a regular file.
     * Use the translation of the given manual document as a regular file.
     * @param documentId Document ID (required)
     * @param useAsRegularPayload  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus useAsRegular(Long documentId, UseAsRegularPayload useAsRegularPayload) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = useAsRegularWithHttpInfo(documentId, useAsRegularPayload);
        return localVarResp.getData();
    }

    /**
     * Use the translation of the given manual document as a regular file.
     * Use the translation of the given manual document as a regular file.
     * @param documentId Document ID (required)
     * @param useAsRegularPayload  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> useAsRegularWithHttpInfo(Long documentId, UseAsRegularPayload useAsRegularPayload) throws ApiException {
        okhttp3.Call localVarCall = useAsRegularValidateBeforeCall(documentId, useAsRegularPayload, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use the translation of the given manual document as a regular file. (asynchronously)
     * Use the translation of the given manual document as a regular file.
     * @param documentId Document ID (required)
     * @param useAsRegularPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call useAsRegularAsync(Long documentId, UseAsRegularPayload useAsRegularPayload, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = useAsRegularValidateBeforeCall(documentId, useAsRegularPayload, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
