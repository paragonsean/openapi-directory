/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientProjectStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientProjectStat {
  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_NUMBER_OF_PROJECTS = "number_of_projects";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PROJECTS)
  private Long numberOfProjects;

  public static final String SERIALIZED_NAME_TOTAL_SPENDING = "total_spending";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPENDING)
  private Float totalSpending;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private String week;

  public ClientProjectStat() {
  }

  public ClientProjectStat languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public ClientProjectStat addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * Get languages
   * @return languages
   */
  @javax.annotation.Nullable
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public ClientProjectStat month(String month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public String getMonth() {
    return month;
  }

  public void setMonth(String month) {
    this.month = month;
  }


  public ClientProjectStat numberOfProjects(Long numberOfProjects) {
    this.numberOfProjects = numberOfProjects;
    return this;
  }

  /**
   * Get numberOfProjects
   * @return numberOfProjects
   */
  @javax.annotation.Nullable
  public Long getNumberOfProjects() {
    return numberOfProjects;
  }

  public void setNumberOfProjects(Long numberOfProjects) {
    this.numberOfProjects = numberOfProjects;
  }


  public ClientProjectStat totalSpending(Float totalSpending) {
    this.totalSpending = totalSpending;
    return this;
  }

  /**
   * Get totalSpending
   * @return totalSpending
   */
  @javax.annotation.Nullable
  public Float getTotalSpending() {
    return totalSpending;
  }

  public void setTotalSpending(Float totalSpending) {
    this.totalSpending = totalSpending;
  }


  public ClientProjectStat week(String week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public String getWeek() {
    return week;
  }

  public void setWeek(String week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientProjectStat clientProjectStat = (ClientProjectStat) o;
    return Objects.equals(this.languages, clientProjectStat.languages) &&
        Objects.equals(this.month, clientProjectStat.month) &&
        Objects.equals(this.numberOfProjects, clientProjectStat.numberOfProjects) &&
        Objects.equals(this.totalSpending, clientProjectStat.totalSpending) &&
        Objects.equals(this.week, clientProjectStat.week);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languages, month, numberOfProjects, totalSpending, week);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientProjectStat {\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    numberOfProjects: ").append(toIndentedString(numberOfProjects)).append("\n");
    sb.append("    totalSpending: ").append(toIndentedString(totalSpending)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languages");
    openapiFields.add("month");
    openapiFields.add("number_of_projects");
    openapiFields.add("total_spending");
    openapiFields.add("week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientProjectStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientProjectStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientProjectStat is not found in the empty JSON string", ClientProjectStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientProjectStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientProjectStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull() && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if ((jsonObj.get("week") != null && !jsonObj.get("week").isJsonNull()) && !jsonObj.get("week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("week").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientProjectStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientProjectStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientProjectStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientProjectStat.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientProjectStat>() {
           @Override
           public void write(JsonWriter out, ClientProjectStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientProjectStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientProjectStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientProjectStat
   * @throws IOException if the JSON string is invalid with respect to ClientProjectStat
   */
  public static ClientProjectStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientProjectStat.class);
  }

  /**
   * Convert an instance of ClientProjectStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

