/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CM;
import org.openapitools.client.model.CallbackResult;
import org.openapitools.client.model.CancelProjectRequest;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.ListOrderType;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.NewProject;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PackageStatus;
import org.openapitools.client.model.Progress;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectId;
import org.openapitools.client.model.ProjectLaunchResponse;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.ProjectPayment;
import org.openapitools.client.model.ProjectStatus;
import org.openapitools.client.model.ProjectUpdate;
import org.openapitools.client.model.ReportContent;
import org.openapitools.client.model.UserList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignCM
     * @param id Project ID (required)
     * @param CM  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignCMCall(Long id, CM CM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = CM;

        // create path and map variables
        String localVarPath = "/projects/{id}/assign-cm"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignCMValidateBeforeCall(Long id, CM CM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignCM(Async)");
        }

        return assignCMCall(id, CM, _callback);

    }

    /**
     * Assign a CM to the project
     * 
     * @param id Project ID (required)
     * @param CM  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus assignCM(Long id, CM CM) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = assignCMWithHttpInfo(id, CM);
        return localVarResp.getData();
    }

    /**
     * Assign a CM to the project
     * 
     * @param id Project ID (required)
     * @param CM  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> assignCMWithHttpInfo(Long id, CM CM) throws ApiException {
        okhttp3.Call localVarCall = assignCMValidateBeforeCall(id, CM, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign a CM to the project (asynchronously)
     * 
     * @param id Project ID (required)
     * @param CM  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignCMAsync(Long id, CM CM, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignCMValidateBeforeCall(id, CM, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callPackage
     * @param id Project ID (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPackageCall(Long id, Long async, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/package"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callPackageValidateBeforeCall(Long id, Long async, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callPackage(Async)");
        }

        return callPackageCall(id, async, _callback);

    }

    /**
     * Package your translated project
     * Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
     * @param id Project ID (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public File callPackage(Long id, Long async) throws ApiException {
        ApiResponse<File> localVarResp = callPackageWithHttpInfo(id, async);
        return localVarResp.getData();
    }

    /**
     * Package your translated project
     * Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
     * @param id Project ID (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> callPackageWithHttpInfo(Long id, Long async) throws ApiException {
        okhttp3.Call localVarCall = callPackageValidateBeforeCall(id, async, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Package your translated project (asynchronously)
     * Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
     * @param id Project ID (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callPackageAsync(Long id, Long async, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = callPackageValidateBeforeCall(id, async, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelProject
     * @param id Project ID (required)
     * @param cancelProjectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelProjectCall(Long id, CancelProjectRequest cancelProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelProjectRequest;

        // create path and map variables
        String localVarPath = "/projects/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelProjectValidateBeforeCall(Long id, CancelProjectRequest cancelProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelProject(Async)");
        }

        return cancelProjectCall(id, cancelProjectRequest, _callback);

    }

    /**
     * Cancel your translation project
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @param cancelProjectRequest  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus cancelProject(Long id, CancelProjectRequest cancelProjectRequest) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = cancelProjectWithHttpInfo(id, cancelProjectRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel your translation project
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @param cancelProjectRequest  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> cancelProjectWithHttpInfo(Long id, CancelProjectRequest cancelProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelProjectValidateBeforeCall(id, cancelProjectRequest, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel your translation project (asynchronously)
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @param cancelProjectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelProjectAsync(Long id, CancelProjectRequest cancelProjectRequest, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelProjectValidateBeforeCall(id, cancelProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param newProject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(NewProject newProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newProject;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(NewProject newProject, final ApiCallback _callback) throws ApiException {
        return createProjectCall(newProject, _callback);

    }

    /**
     * Create a new project
     * Create a new translation project. Projects are not launched (you are not charged) until you &#x60;/launch&#x60; the created project.
     * @param newProject  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(NewProject newProject) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(newProject);
        return localVarResp.getData();
    }

    /**
     * Create a new project
     * Create a new translation project. Projects are not launched (you are not charged) until you &#x60;/launch&#x60; the created project.
     * @param newProject  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(NewProject newProject) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(newProject, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project (asynchronously)
     * Create a new translation project. Projects are not launched (you are not charged) until you &#x60;/launch&#x60; the created project.
     * @param newProject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(NewProject newProject, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(newProject, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProject(Async)");
        }

        return deleteProjectCall(id, _callback);

    }

    /**
     * Delete your translation project
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteProject(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteProjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete your translation project
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteProjectWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete your translation project (asynchronously)
     * If you haven&#39;t launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven&#39;t worked on yet.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project canceled successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deliverProject
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deliverProjectCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/deliver"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deliverProjectValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deliverProject(Async)");
        }

        return deliverProjectCall(id, _callback);

    }

    /**
     * Deliver project
     * Deliver project to the owner of the project. You can also download your translations in &#x60;/package&#x60; and &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deliverProject(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deliverProjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deliver project
     * Deliver project to the owner of the project. You can also download your translations in &#x60;/package&#x60; and &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deliverProjectWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deliverProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deliver project (asynchronously)
     * Deliver project to the owner of the project. You can also download your translations in &#x60;/package&#x60; and &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deliverProjectAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deliverProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for download
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/download"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling download(Async)");
        }

        return downloadCall(id, _callback);

    }

    /**
     * Download your translated project
     * Download the latest translation package. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public File download(Long id) throws ApiException {
        ApiResponse<File> localVarResp = downloadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Download your translated project
     * Download the latest translation package. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = downloadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download your translated project (asynchronously)
     * Download the latest translation package. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAsync(Long id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadHtmlInvoice
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadHtmlInvoiceCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/invoice.html"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadHtmlInvoiceValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadHtmlInvoice(Async)");
        }

        return downloadHtmlInvoiceCall(id, _callback);

    }

    /**
     * Download project invoice (HTML)
     * Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
     * @param id Project ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadHtmlInvoice(Long id) throws ApiException {
        ApiResponse<String> localVarResp = downloadHtmlInvoiceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Download project invoice (HTML)
     * Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
     * @param id Project ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadHtmlInvoiceWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = downloadHtmlInvoiceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download project invoice (HTML) (asynchronously)
     * Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadHtmlInvoiceAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadHtmlInvoiceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadLanguage
     * @param id Project ID (required)
     * @param language Language code. You can download the translation of only a specific language. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLanguageCall(Long id, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/download/{language}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLanguageValidateBeforeCall(Long id, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling downloadLanguage(Async)");
        }

        return downloadLanguageCall(id, language, _callback);

    }

    /**
     * Download your translated project language
     * Download the latest translation package for your target language. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @param language Language code. You can download the translation of only a specific language. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public File downloadLanguage(Long id, String language) throws ApiException {
        ApiResponse<File> localVarResp = downloadLanguageWithHttpInfo(id, language);
        return localVarResp.getData();
    }

    /**
     * Download your translated project language
     * Download the latest translation package for your target language. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @param language Language code. You can download the translation of only a specific language. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadLanguageWithHttpInfo(Long id, String language) throws ApiException {
        okhttp3.Call localVarCall = downloadLanguageValidateBeforeCall(id, language, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download your translated project language (asynchronously)
     * Download the latest translation package for your target language. You must have requested a &#x60;/package&#x60; call beforehand and wait until the packaging status is &#39;completed&#39;.
     * @param id Project ID (required)
     * @param language Language code. You can download the translation of only a specific language. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLanguageAsync(Long id, String language, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLanguageValidateBeforeCall(id, language, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadPdfInvoice
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadPdfInvoiceCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/invoice.pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadPdfInvoiceValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadPdfInvoice(Async)");
        }

        return downloadPdfInvoiceCall(id, _callback);

    }

    /**
     * Download project invoice (PDF)
     * Download your project invoice as PDF. Your invoice may be in \&quot;unpaid\&quot; status, in which case youn can see the payment instructions in the PDF file.
     * @param id Project ID (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public File downloadPdfInvoice(Long id) throws ApiException {
        ApiResponse<File> localVarResp = downloadPdfInvoiceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Download project invoice (PDF)
     * Download your project invoice as PDF. Your invoice may be in \&quot;unpaid\&quot; status, in which case youn can see the payment instructions in the PDF file.
     * @param id Project ID (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadPdfInvoiceWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = downloadPdfInvoiceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download project invoice (PDF) (asynchronously)
     * Download your project invoice as PDF. Your invoice may be in \&quot;unpaid\&quot; status, in which case youn can see the payment instructions in the PDF file.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadPdfInvoiceAsync(Long id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadPdfInvoiceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoice
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/invoice"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvoice(Async)");
        }

        return getInvoiceCall(id, _callback);

    }

    /**
     * View project invoice
     * View your invoice details for your translation project.
     * @param id Project ID (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Invoice getInvoice(Long id) throws ApiException {
        ApiResponse<Invoice> localVarResp = getInvoiceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * View project invoice
     * View your invoice details for your translation project.
     * @param id Project ID (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> getInvoiceWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View project invoice (asynchronously)
     * View your invoice details for your translation project.
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoice </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound or InvoiceNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsync(Long id, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgress
     * @param id Project ID (required)
     * @param raw This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgressCall(Long id, Boolean raw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/progress"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (raw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("raw", raw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgressValidateBeforeCall(Long id, Boolean raw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProgress(Async)");
        }

        return getProgressCall(id, raw, _callback);

    }

    /**
     * View progress of a project
     * Monitor the translation progress of an already launched project in real-time.
     * @param id Project ID (required)
     * @param raw This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%. (optional, default to false)
     * @return Progress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Progress getProgress(Long id, Boolean raw) throws ApiException {
        ApiResponse<Progress> localVarResp = getProgressWithHttpInfo(id, raw);
        return localVarResp.getData();
    }

    /**
     * View progress of a project
     * Monitor the translation progress of an already launched project in real-time.
     * @param id Project ID (required)
     * @param raw This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%. (optional, default to false)
     * @return ApiResponse&lt;Progress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Progress> getProgressWithHttpInfo(Long id, Boolean raw) throws ApiException {
        okhttp3.Call localVarCall = getProgressValidateBeforeCall(id, raw, null);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View progress of a project (asynchronously)
     * Monitor the translation progress of an already launched project in real-time.
     * @param id Project ID (required)
     * @param raw This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgressAsync(Long id, Boolean raw, final ApiCallback<Progress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgressValidateBeforeCall(id, raw, _callback);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param id Project ID (required)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39;, &#39;score&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(Long id, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(Long id, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProject(Async)");
        }

        return getProjectCall(id, with, _callback);

    }

    /**
     * View a translation project
     * View the details of a translation project in your account.
     * @param id Project ID (required)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39;, &#39;score&#39; (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Project getProject(Long id, List<String> with) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectWithHttpInfo(id, with);
        return localVarResp.getData();
    }

    /**
     * View a translation project
     * View the details of a translation project in your account.
     * @param id Project ID (required)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39;, &#39;score&#39; (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectWithHttpInfo(Long id, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(id, with, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a translation project (asynchronously)
     * View the details of a translation project in your account.
     * @param id Project ID (required)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39;, &#39;score&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(Long id, List<String> with, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(id, with, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectVendors
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVendorsCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/vendors"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVendorsValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectVendors(Async)");
        }

        return getProjectVendorsCall(projectId, _callback);

    }

    /**
     * Get a list of vendors.
     * Get a list of vendors.
     * @param projectId Project ID (required)
     * @return UserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public UserList getProjectVendors(Long projectId) throws ApiException {
        ApiResponse<UserList> localVarResp = getProjectVendorsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get a list of vendors.
     * Get a list of vendors.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;UserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserList> getProjectVendorsWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectVendorsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of vendors. (asynchronously)
     * Get a list of vendors.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVendorsAsync(Long projectId, final ApiCallback<UserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVendorsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param status Filter projects by status. Accepts multiple statuses. Possible values &#39;pending&#39;, &#39;started&#39;, &#39;completed&#39; (optional)
     * @param withPending deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withStarted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withCompleted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param orderBy  (optional, default to id)
     * @param orderType  (optional)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(Long page, Long perPage, List<ProjectStatus> status, Boolean withPending, Boolean withStarted, Boolean withCompleted, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status[]", status));
        }

        if (withPending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_pending", withPending));
        }

        if (withStarted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_started", withStarted));
        }

        if (withCompleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_completed", withCompleted));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_type", orderType));
        }

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(Long page, Long perPage, List<ProjectStatus> status, Boolean withPending, Boolean withStarted, Boolean withCompleted, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback _callback) throws ApiException {
        return getProjectsCall(page, perPage, status, withPending, withStarted, withCompleted, orderBy, orderType, with, _callback);

    }

    /**
     * View your translation projects
     * View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param status Filter projects by status. Accepts multiple statuses. Possible values &#39;pending&#39;, &#39;started&#39;, &#39;completed&#39; (optional)
     * @param withPending deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withStarted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withCompleted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param orderBy  (optional, default to id)
     * @param orderType  (optional)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39; (optional)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getProjects(Long page, Long perPage, List<ProjectStatus> status, Boolean withPending, Boolean withStarted, Boolean withCompleted, String orderBy, ListOrderType orderType, List<String> with) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getProjectsWithHttpInfo(page, perPage, status, withPending, withStarted, withCompleted, orderBy, orderType, with);
        return localVarResp.getData();
    }

    /**
     * View your translation projects
     * View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param status Filter projects by status. Accepts multiple statuses. Possible values &#39;pending&#39;, &#39;started&#39;, &#39;completed&#39; (optional)
     * @param withPending deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withStarted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withCompleted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param orderBy  (optional, default to id)
     * @param orderType  (optional)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39; (optional)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getProjectsWithHttpInfo(Long page, Long perPage, List<ProjectStatus> status, Boolean withPending, Boolean withStarted, Boolean withCompleted, String orderBy, ListOrderType orderType, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(page, perPage, status, withPending, withStarted, withCompleted, orderBy, orderType, with, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your translation projects (asynchronously)
     * View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param status Filter projects by status. Accepts multiple statuses. Possible values &#39;pending&#39;, &#39;started&#39;, &#39;completed&#39; (optional)
     * @param withPending deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withStarted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param withCompleted deprecated. use &#x60;status[]&#x60; param. (optional, default to true)
     * @param orderBy  (optional, default to id)
     * @param orderType  (optional)
     * @param with Include detailed information. Possible values &#39;client&#39;, &#39;vendor&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(Long page, Long perPage, List<ProjectStatus> status, Boolean withPending, Boolean withStarted, Boolean withCompleted, String orderBy, ListOrderType orderType, List<String> with, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(page, perPage, status, withPending, withStarted, withCompleted, orderBy, orderType, with, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteIdFromInternalId
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QuoteId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteIdFromInternalIdCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/from-internal-id/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteIdFromInternalIdValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQuoteIdFromInternalId(Async)");
        }

        return getQuoteIdFromInternalIdCall(projectId, _callback);

    }

    /**
     * Get Quote Id
     * Get Quote Id
     * @param projectId Project ID (required)
     * @return ProjectId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QuoteId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ProjectId getQuoteIdFromInternalId(Long projectId) throws ApiException {
        ApiResponse<ProjectId> localVarResp = getQuoteIdFromInternalIdWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get Quote Id
     * Get Quote Id
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;ProjectId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QuoteId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectId> getQuoteIdFromInternalIdWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getQuoteIdFromInternalIdValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Id (asynchronously)
     * Get Quote Id
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> QuoteId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteIdFromInternalIdAsync(Long projectId, final ApiCallback<ProjectId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteIdFromInternalIdValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVendorProjects
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorProjectsCall(Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/vendor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (joined != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("joined", joined));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorProjectsValidateBeforeCall(Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        return getVendorProjectsCall(joined, completed, page, perPage, _callback);

    }

    /**
     * List projects as a vendor
     * Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getVendorProjects(Boolean joined, Boolean completed, Long page, Long perPage) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getVendorProjectsWithHttpInfo(joined, completed, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List projects as a vendor
     * Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getVendorProjectsWithHttpInfo(Boolean joined, Boolean completed, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getVendorProjectsValidateBeforeCall(joined, completed, page, perPage, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List projects as a vendor (asynchronously)
     * Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorProjectsAsync(Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorProjectsValidateBeforeCall(joined, completed, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVendorProjectsByUserId
     * @param userId User ID (required)
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorProjectsByUserIdCall(Long userId, Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/projects/vendor"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (joined != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("joined", joined));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorProjectsByUserIdValidateBeforeCall(Long userId, Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getVendorProjectsByUserId(Async)");
        }

        return getVendorProjectsByUserIdCall(userId, joined, completed, page, perPage, _callback);

    }

    /**
     * Get a list of user/vendor projects
     * Get a list of user/vendor projects
     * @param userId User ID (required)
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getVendorProjectsByUserId(Long userId, Boolean joined, Boolean completed, Long page, Long perPage) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getVendorProjectsByUserIdWithHttpInfo(userId, joined, completed, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of user/vendor projects
     * Get a list of user/vendor projects
     * @param userId User ID (required)
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getVendorProjectsByUserIdWithHttpInfo(Long userId, Boolean joined, Boolean completed, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getVendorProjectsByUserIdValidateBeforeCall(userId, joined, completed, page, perPage, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of user/vendor projects (asynchronously)
     * Get a list of user/vendor projects
     * @param userId User ID (required)
     * @param joined Return only projects that this user has already joined (optional)
     * @param completed Return only projects that have been completed. When &#x60;true&#x60;, this makes &#x60;joined&#x60; true as well. (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor project list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorProjectsByUserIdAsync(Long userId, Boolean joined, Boolean completed, Long page, Long perPage, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorProjectsByUserIdValidateBeforeCall(userId, joined, completed, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for launchProject
     * @param id Project ID (required)
     * @param projectPayment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project launched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingPaymentCode MissingCorporateAccount MissingPaymentMethod </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call launchProjectCall(Long id, ProjectPayment projectPayment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectPayment;

        // create path and map variables
        String localVarPath = "/projects/{id}/launch"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call launchProjectValidateBeforeCall(Long id, ProjectPayment projectPayment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling launchProject(Async)");
        }

        return launchProjectCall(id, projectPayment, _callback);

    }

    /**
     * Launch your translation project
     * Launch your translation project so MotaWord can actually start working on your translation.
     * @param id Project ID (required)
     * @param projectPayment  (optional)
     * @return ProjectLaunchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project launched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingPaymentCode MissingCorporateAccount MissingPaymentMethod </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ProjectLaunchResponse launchProject(Long id, ProjectPayment projectPayment) throws ApiException {
        ApiResponse<ProjectLaunchResponse> localVarResp = launchProjectWithHttpInfo(id, projectPayment);
        return localVarResp.getData();
    }

    /**
     * Launch your translation project
     * Launch your translation project so MotaWord can actually start working on your translation.
     * @param id Project ID (required)
     * @param projectPayment  (optional)
     * @return ApiResponse&lt;ProjectLaunchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project launched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingPaymentCode MissingCorporateAccount MissingPaymentMethod </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectLaunchResponse> launchProjectWithHttpInfo(Long id, ProjectPayment projectPayment) throws ApiException {
        okhttp3.Call localVarCall = launchProjectValidateBeforeCall(id, projectPayment, null);
        Type localVarReturnType = new TypeToken<ProjectLaunchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Launch your translation project (asynchronously)
     * Launch your translation project so MotaWord can actually start working on your translation.
     * @param id Project ID (required)
     * @param projectPayment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project launched successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingPaymentCode MissingCorporateAccount MissingPaymentMethod </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call launchProjectAsync(Long id, ProjectPayment projectPayment, final ApiCallback<ProjectLaunchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = launchProjectValidateBeforeCall(id, projectPayment, _callback);
        Type localVarReturnType = new TypeToken<ProjectLaunchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageLanguage
     * @param id Project ID (required)
     * @param language Language code. You can package the translation of only a specific language. (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaging status and tracking code. With the package key, you can track the progress of translation packaging.Also packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageLanguageCall(Long id, String language, Long async, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/package/{language}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageLanguageValidateBeforeCall(Long id, String language, Long async, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling packageLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling packageLanguage(Async)");
        }

        return packageLanguageCall(id, language, async, _callback);

    }

    /**
     * Package your translated project language
     * Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
     * @param id Project ID (required)
     * @param language Language code. You can package the translation of only a specific language. (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @return ModelPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaging status and tracking code. With the package key, you can track the progress of translation packaging.Also packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ModelPackage packageLanguage(Long id, String language, Long async) throws ApiException {
        ApiResponse<ModelPackage> localVarResp = packageLanguageWithHttpInfo(id, language, async);
        return localVarResp.getData();
    }

    /**
     * Package your translated project language
     * Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
     * @param id Project ID (required)
     * @param language Language code. You can package the translation of only a specific language. (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @return ApiResponse&lt;ModelPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaging status and tracking code. With the package key, you can track the progress of translation packaging.Also packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelPackage> packageLanguageWithHttpInfo(Long id, String language, Long async) throws ApiException {
        okhttp3.Call localVarCall = packageLanguageValidateBeforeCall(id, language, async, null);
        Type localVarReturnType = new TypeToken<ModelPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Package your translated project language (asynchronously)
     * Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
     * @param id Project ID (required)
     * @param language Language code. You can package the translation of only a specific language. (required)
     * @param async If you want to package and download the translation synchronously, mark this parameter as &#39;0&#39;. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packaging status and tracking code. With the package key, you can track the progress of translation packaging.Also packaged translation streamed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> TranslationPackageNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageLanguageAsync(Long id, String language, Long async, final ApiCallback<ModelPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageLanguageValidateBeforeCall(id, language, async, _callback);
        Type localVarReturnType = new TypeToken<ModelPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recreateProject
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project recreation process started successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recreateProjectCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/recreate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recreateProjectValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recreateProject(Async)");
        }

        return recreateProjectCall(id, _callback);

    }

    /**
     * Recreate your translation project from scratch. This is a risky action, you will lose current translations.
     * 
     * @param id Project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project recreation process started successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus recreateProject(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = recreateProjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recreate your translation project from scratch. This is a risky action, you will lose current translations.
     * 
     * @param id Project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project recreation process started successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> recreateProjectWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = recreateProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recreate your translation project from scratch. This is a risky action, you will lose current translations. (asynchronously)
     * 
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project recreation process started successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recreateProjectAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = recreateProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendQuoteEmail
     * @param id Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendQuoteEmailCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/email-quote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendQuoteEmailValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendQuoteEmail(Async)");
        }

        return sendQuoteEmailCall(id, _callback);

    }

    /**
     * Send a quote email
     * Send a quote email
     * @param id Project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus sendQuoteEmail(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = sendQuoteEmailWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Send a quote email
     * Send a quote email
     * @param id Project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> sendQuoteEmailWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = sendQuoteEmailValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a quote email (asynchronously)
     * Send a quote email
     * @param id Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendQuoteEmailAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendQuoteEmailValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitProjectReports
     * @param id Project ID (required)
     * @param reportContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report submitted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingMessage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitProjectReportsCall(Long id, ReportContent reportContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportContent;

        // create path and map variables
        String localVarPath = "/projects/{id}/reports"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitProjectReportsValidateBeforeCall(Long id, ReportContent reportContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling submitProjectReports(Async)");
        }

        return submitProjectReportsCall(id, reportContent, _callback);

    }

    /**
     * Submit feedback report for a project
     * 
     * @param id Project ID (required)
     * @param reportContent  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report submitted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingMessage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus submitProjectReports(Long id, ReportContent reportContent) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = submitProjectReportsWithHttpInfo(id, reportContent);
        return localVarResp.getData();
    }

    /**
     * Submit feedback report for a project
     * 
     * @param id Project ID (required)
     * @param reportContent  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report submitted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingMessage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> submitProjectReportsWithHttpInfo(Long id, ReportContent reportContent) throws ApiException {
        okhttp3.Call localVarCall = submitProjectReportsValidateBeforeCall(id, reportContent, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit feedback report for a project (asynchronously)
     * 
     * @param id Project ID (required)
     * @param reportContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report submitted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingMessage </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitProjectReportsAsync(Long id, ReportContent reportContent, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitProjectReportsValidateBeforeCall(id, reportContent, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackPackage
     * @param id Project ID (required)
     * @param key This is the package tracking key provided in the response of a /package call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current status of packaging process. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PackagingStatusMissing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackPackageCall(Long id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/package/check"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPackageValidateBeforeCall(Long id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trackPackage(Async)");
        }

        return trackPackageCall(id, key, _callback);

    }

    /**
     * Track translation packaging status
     * Track the packaging status of your translations, by using the &#x60;key&#x60; from packaging request. Once packaging is completed, you can download your translations via &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @param key This is the package tracking key provided in the response of a /package call. (optional)
     * @return PackageStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current status of packaging process. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PackagingStatusMissing </td><td>  -  </td></tr>
     </table>
     */
    public PackageStatus trackPackage(Long id, String key) throws ApiException {
        ApiResponse<PackageStatus> localVarResp = trackPackageWithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * Track translation packaging status
     * Track the packaging status of your translations, by using the &#x60;key&#x60; from packaging request. Once packaging is completed, you can download your translations via &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @param key This is the package tracking key provided in the response of a /package call. (optional)
     * @return ApiResponse&lt;PackageStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current status of packaging process. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PackagingStatusMissing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageStatus> trackPackageWithHttpInfo(Long id, String key) throws ApiException {
        okhttp3.Call localVarCall = trackPackageValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<PackageStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Track translation packaging status (asynchronously)
     * Track the packaging status of your translations, by using the &#x60;key&#x60; from packaging request. Once packaging is completed, you can download your translations via &#x60;/download&#x60; endpoints.
     * @param id Project ID (required)
     * @param key This is the package tracking key provided in the response of a /package call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current status of packaging process. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> ProjectNotLaunchedYet </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> PackagingStatusMissing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackPackageAsync(Long id, String key, final ApiCallback<PackageStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPackageValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<PackageStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggerCallback
     * @param id Project ID (required)
     * @param actionType Callback type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Callback result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerCallbackCall(Long id, String actionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{id}/callback/{actionType}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "actionType" + "}", localVarApiClient.escapeString(actionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerCallbackValidateBeforeCall(Long id, String actionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling triggerCallback(Async)");
        }

        // verify the required parameter 'actionType' is set
        if (actionType == null) {
            throw new ApiException("Missing the required parameter 'actionType' when calling triggerCallback(Async)");
        }

        return triggerCallbackCall(id, actionType, _callback);

    }

    /**
     * Trigger a call to your callback URL related to this project.
     * Trigger a call to your callback URL related to this project.
     * @param id Project ID (required)
     * @param actionType Callback type (required)
     * @return CallbackResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Callback result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public CallbackResult triggerCallback(Long id, String actionType) throws ApiException {
        ApiResponse<CallbackResult> localVarResp = triggerCallbackWithHttpInfo(id, actionType);
        return localVarResp.getData();
    }

    /**
     * Trigger a call to your callback URL related to this project.
     * Trigger a call to your callback URL related to this project.
     * @param id Project ID (required)
     * @param actionType Callback type (required)
     * @return ApiResponse&lt;CallbackResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Callback result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallbackResult> triggerCallbackWithHttpInfo(Long id, String actionType) throws ApiException {
        okhttp3.Call localVarCall = triggerCallbackValidateBeforeCall(id, actionType, null);
        Type localVarReturnType = new TypeToken<CallbackResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger a call to your callback URL related to this project. (asynchronously)
     * Trigger a call to your callback URL related to this project.
     * @param id Project ID (required)
     * @param actionType Callback type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Callback result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerCallbackAsync(Long id, String actionType, final ApiCallback<CallbackResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerCallbackValidateBeforeCall(id, actionType, _callback);
        Type localVarReturnType = new TypeToken<CallbackResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProject
     * @param id Project ID (required)
     * @param projectUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectCall(Long id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUpdate;

        // create path and map variables
        String localVarPath = "/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectValidateBeforeCall(Long id, ProjectUpdate projectUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProject(Async)");
        }

        return updateProjectCall(id, projectUpdate, _callback);

    }

    /**
     * Update project info and settings
     * 
     * @param id Project ID (required)
     * @param projectUpdate  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage </td><td>  -  </td></tr>
     </table>
     */
    public Project updateProject(Long id, ProjectUpdate projectUpdate) throws ApiException {
        ApiResponse<Project> localVarResp = updateProjectWithHttpInfo(id, projectUpdate);
        return localVarResp.getData();
    }

    /**
     * Update project info and settings
     * 
     * @param id Project ID (required)
     * @param projectUpdate  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> updateProjectWithHttpInfo(Long id, ProjectUpdate projectUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(id, projectUpdate, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project info and settings (asynchronously)
     * 
     * @param id Project ID (required)
     * @param projectUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProjectAsync(Long id, ProjectUpdate projectUpdate, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectValidateBeforeCall(id, projectUpdate, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
