/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AsyncOperationStatus;
import org.openapitools.client.model.ClientStrings;
import org.openapitools.client.model.ContinuousProjectCache;
import org.openapitools.client.model.ContinuousProjectDocumentStringsBody;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.StringList;
import org.openapitools.client.model.TranslationMemoryUnit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StringsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StringsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StringsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clearTranslationCache
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearTranslationCacheCall(Long projectId, String locale, Long fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/strings/cached"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearTranslationCacheValidateBeforeCall(Long projectId, String locale, Long fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling clearTranslationCache(Async)");
        }

        return clearTranslationCacheCall(projectId, locale, fileId, _callback);

    }

    /**
     * Clear translation cache
     * Clear/delete continuous project translation cache.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus clearTranslationCache(Long projectId, String locale, Long fileId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = clearTranslationCacheWithHttpInfo(projectId, locale, fileId);
        return localVarResp.getData();
    }

    /**
     * Clear translation cache
     * Clear/delete continuous project translation cache.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> clearTranslationCacheWithHttpInfo(Long projectId, String locale, Long fileId) throws ApiException {
        okhttp3.Call localVarCall = clearTranslationCacheValidateBeforeCall(projectId, locale, fileId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear translation cache (asynchronously)
     * Clear/delete continuous project translation cache.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearTranslationCacheAsync(Long projectId, String locale, Long fileId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearTranslationCacheValidateBeforeCall(projectId, locale, fileId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectFileStrings
     * @param projectId Project ID (required)
     * @param documentId Document ID/Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectFileStringsCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/{documentId}/strings"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectFileStringsValidateBeforeCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectFileStrings(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getContinuousProjectFileStrings(Async)");
        }

        return getContinuousProjectFileStringsCall(projectId, documentId, _callback);

    }

    /**
     * View strings their translations in a continuous document
     * View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID/Name (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getContinuousProjectFileStrings(Long projectId, Long documentId) throws ApiException {
        ApiResponse<StringList> localVarResp = getContinuousProjectFileStringsWithHttpInfo(projectId, documentId);
        return localVarResp.getData();
    }

    /**
     * View strings their translations in a continuous document
     * View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID/Name (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getContinuousProjectFileStringsWithHttpInfo(Long projectId, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectFileStringsValidateBeforeCall(projectId, documentId, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View strings their translations in a continuous document (asynchronously)
     * View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID/Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectFileStringsAsync(Long projectId, Long documentId, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectFileStringsValidateBeforeCall(projectId, documentId, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectStrings
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectStringsCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/strings"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectStringsValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectStrings(Async)");
        }

        return getContinuousProjectStringsCall(projectId, _callback);

    }

    /**
     * View strings and translations in continuous project
     * View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getContinuousProjectStrings(Long projectId) throws ApiException {
        ApiResponse<StringList> localVarResp = getContinuousProjectStringsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * View strings and translations in continuous project
     * View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getContinuousProjectStringsWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectStringsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View strings and translations in continuous project (asynchronously)
     * View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectStringsAsync(Long projectId, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectStringsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentTranslations
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTranslationsCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}/translations"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentTranslationsValidateBeforeCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDocumentTranslations(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentTranslations(Async)");
        }

        return getDocumentTranslationsCall(projectId, documentId, _callback);

    }

    /**
     * View strings and translations of a document
     * View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getDocumentTranslations(Long projectId, Long documentId) throws ApiException {
        ApiResponse<StringList> localVarResp = getDocumentTranslationsWithHttpInfo(projectId, documentId);
        return localVarResp.getData();
    }

    /**
     * View strings and translations of a document
     * View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getDocumentTranslationsWithHttpInfo(Long projectId, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentTranslationsValidateBeforeCall(projectId, documentId, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View strings and translations of a document (asynchronously)
     * View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTranslationsAsync(Long projectId, Long documentId, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentTranslationsValidateBeforeCall(projectId, documentId, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentTranslationsForLanguage
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTranslationsForLanguageCall(Long projectId, Long documentId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/documents/{documentId}/translations/{language}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentTranslationsForLanguageValidateBeforeCall(Long projectId, Long documentId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDocumentTranslationsForLanguage(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentTranslationsForLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getDocumentTranslationsForLanguage(Async)");
        }

        return getDocumentTranslationsForLanguageCall(projectId, documentId, language, _callback);

    }

    /**
     * View strings and translations of a document for target language
     * View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getDocumentTranslationsForLanguage(Long projectId, Long documentId, String language) throws ApiException {
        ApiResponse<StringList> localVarResp = getDocumentTranslationsForLanguageWithHttpInfo(projectId, documentId, language);
        return localVarResp.getData();
    }

    /**
     * View strings and translations of a document for target language
     * View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getDocumentTranslationsForLanguageWithHttpInfo(Long projectId, Long documentId, String language) throws ApiException {
        okhttp3.Call localVarCall = getDocumentTranslationsForLanguageValidateBeforeCall(projectId, documentId, language, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View strings and translations of a document for target language (asynchronously)
     * View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param documentId Document ID (required)
     * @param language Target language code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTranslationsForLanguageAsync(Long projectId, Long documentId, String language, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentTranslationsForLanguageValidateBeforeCall(projectId, documentId, language, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectStrings
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStringsCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectStringsValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectStrings(Async)");
        }

        return getProjectStringsCall(projectId, _callback);

    }

    /**
     * View project strings and translations
     * View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getProjectStrings(Long projectId) throws ApiException {
        ApiResponse<StringList> localVarResp = getProjectStringsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * View project strings and translations
     * View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getProjectStringsWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectStringsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View project strings and translations (asynchronously)
     * View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStringsAsync(Long projectId, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectStringsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectStringsForLanguage
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStringsForLanguageCall(Long projectId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings/{language}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectStringsForLanguageValidateBeforeCall(Long projectId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectStringsForLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getProjectStringsForLanguage(Async)");
        }

        return getProjectStringsForLanguageCall(projectId, language, _callback);

    }

    /**
     * View strings and translations for target language
     * View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList getProjectStringsForLanguage(Long projectId, String language) throws ApiException {
        ApiResponse<StringList> localVarResp = getProjectStringsForLanguageWithHttpInfo(projectId, language);
        return localVarResp.getData();
    }

    /**
     * View strings and translations for target language
     * View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> getProjectStringsForLanguageWithHttpInfo(Long projectId, String language) throws ApiException {
        okhttp3.Call localVarCall = getProjectStringsForLanguageValidateBeforeCall(projectId, language, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View strings and translations for target language (asynchronously)
     * View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStringsForLanguageAsync(Long projectId, String language, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectStringsForLanguageValidateBeforeCall(projectId, language, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectTranslations
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectTranslationsCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/translations"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectTranslationsValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectTranslations(Async)");
        }

        return getProjectTranslationsCall(projectId, _callback);

    }

    /**
     * Deprecated. Use /projects/{projectId}/strings instead.
     * 
     * @param projectId Project ID (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public StringList getProjectTranslations(Long projectId) throws ApiException {
        ApiResponse<StringList> localVarResp = getProjectTranslationsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Deprecated. Use /projects/{projectId}/strings instead.
     * 
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<StringList> getProjectTranslationsWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectTranslationsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated. Use /projects/{projectId}/strings instead. (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectTranslationsAsync(Long projectId, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectTranslationsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectTranslationsForLanguage
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectTranslationsForLanguageCall(Long projectId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/translations/{language}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectTranslationsForLanguageValidateBeforeCall(Long projectId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectTranslationsForLanguage(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getProjectTranslationsForLanguage(Async)");
        }

        return getProjectTranslationsForLanguageCall(projectId, language, _callback);

    }

    /**
     * Deprecated. use /projects/{projectId}/strings/{language} instead.
     * 
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public StringList getProjectTranslationsForLanguage(Long projectId, String language) throws ApiException {
        ApiResponse<StringList> localVarResp = getProjectTranslationsForLanguageWithHttpInfo(projectId, language);
        return localVarResp.getData();
    }

    /**
     * Deprecated. use /projects/{projectId}/strings/{language} instead.
     * 
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<StringList> getProjectTranslationsForLanguageWithHttpInfo(Long projectId, String language) throws ApiException {
        okhttp3.Call localVarCall = getProjectTranslationsForLanguageValidateBeforeCall(projectId, language, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated. use /projects/{projectId}/strings/{language} instead. (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param language Target language code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProjectTranslationsForLanguageAsync(Long projectId, String language, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectTranslationsForLanguageValidateBeforeCall(projectId, language, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStrings
     * @param sourceLanguage Source Language Code (optional)
     * @param page Requested page (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of strings in JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStringsCall(String sourceLanguage, Long page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/strings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_language", sourceLanguage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStringsValidateBeforeCall(String sourceLanguage, Long page, final ApiCallback _callback) throws ApiException {
        return getStringsCall(sourceLanguage, page, _callback);

    }

    /**
     * View account strings (translation memory)
     * Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
     * @param sourceLanguage Source Language Code (optional)
     * @param page Requested page (optional, default to 0)
     * @return ClientStrings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of strings in JSON </td><td>  -  </td></tr>
     </table>
     */
    public ClientStrings getStrings(String sourceLanguage, Long page) throws ApiException {
        ApiResponse<ClientStrings> localVarResp = getStringsWithHttpInfo(sourceLanguage, page);
        return localVarResp.getData();
    }

    /**
     * View account strings (translation memory)
     * Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
     * @param sourceLanguage Source Language Code (optional)
     * @param page Requested page (optional, default to 0)
     * @return ApiResponse&lt;ClientStrings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of strings in JSON </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientStrings> getStringsWithHttpInfo(String sourceLanguage, Long page) throws ApiException {
        okhttp3.Call localVarCall = getStringsValidateBeforeCall(sourceLanguage, page, null);
        Type localVarReturnType = new TypeToken<ClientStrings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View account strings (translation memory) (asynchronously)
     * Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
     * @param sourceLanguage Source Language Code (optional)
     * @param page Requested page (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of strings in JSON </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStringsAsync(String sourceLanguage, Long page, final ApiCallback<ClientStrings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStringsValidateBeforeCall(sourceLanguage, page, _callback);
        Type localVarReturnType = new TypeToken<ClientStrings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTranslationCache
     * @param projectId Project ID (required)
     * @param flatten Flatten cache results and ignore document keys (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationCacheCall(Long projectId, Boolean flatten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/strings/cached"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flatten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flatten", flatten));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTranslationCacheValidateBeforeCall(Long projectId, Boolean flatten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTranslationCache(Async)");
        }

        return getTranslationCacheCall(projectId, flatten, _callback);

    }

    /**
     * View cached strings translations in continuous project
     * MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
     * @param projectId Project ID (required)
     * @param flatten Flatten cache results and ignore document keys (optional)
     * @return ContinuousProjectCache
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectCache getTranslationCache(Long projectId, Boolean flatten) throws ApiException {
        ApiResponse<ContinuousProjectCache> localVarResp = getTranslationCacheWithHttpInfo(projectId, flatten);
        return localVarResp.getData();
    }

    /**
     * View cached strings translations in continuous project
     * MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
     * @param projectId Project ID (required)
     * @param flatten Flatten cache results and ignore document keys (optional)
     * @return ApiResponse&lt;ContinuousProjectCache&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectCache> getTranslationCacheWithHttpInfo(Long projectId, Boolean flatten) throws ApiException {
        okhttp3.Call localVarCall = getTranslationCacheValidateBeforeCall(projectId, flatten, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectCache>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View cached strings translations in continuous project (asynchronously)
     * MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
     * @param projectId Project ID (required)
     * @param flatten Flatten cache results and ignore document keys (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTranslationCacheAsync(Long projectId, Boolean flatten, final ApiCallback<ContinuousProjectCache> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTranslationCacheValidateBeforeCall(projectId, flatten, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectCache>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageProjectTranslationMemory
     * @param projectId Project ID (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryCall(Long projectId, Long async, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings/package"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageProjectTranslationMemoryValidateBeforeCall(Long projectId, Long async, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling packageProjectTranslationMemory(Async)");
        }

        return packageProjectTranslationMemoryCall(projectId, async, format, _callback);

    }

    /**
     * Download project translation memory
     * Package and download project translation memory in TMX format
     * @param projectId Project ID (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageProjectTranslationMemory(Long projectId, Long async, String format) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageProjectTranslationMemoryWithHttpInfo(projectId, async, format);
        return localVarResp.getData();
    }

    /**
     * Download project translation memory
     * Package and download project translation memory in TMX format
     * @param projectId Project ID (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageProjectTranslationMemoryWithHttpInfo(Long projectId, Long async, String format) throws ApiException {
        okhttp3.Call localVarCall = packageProjectTranslationMemoryValidateBeforeCall(projectId, async, format, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download project translation memory (asynchronously)
     * Package and download project translation memory in TMX format
     * @param projectId Project ID (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryAsync(Long projectId, Long async, String format, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageProjectTranslationMemoryValidateBeforeCall(projectId, async, format, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageProjectTranslationMemoryForLanguage
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryForLanguageCall(Long projectId, String languageCode, Long async, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings/{languageCode}/package"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "languageCode" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageProjectTranslationMemoryForLanguageValidateBeforeCall(Long projectId, String languageCode, Long async, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryForLanguage(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling packageProjectTranslationMemoryForLanguage(Async)");
        }

        return packageProjectTranslationMemoryForLanguageCall(projectId, languageCode, async, format, _callback);

    }

    /**
     * Download language-specific project translation memory
     * Package and download project translation memory in TMX format for a specific target language.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageProjectTranslationMemoryForLanguage(Long projectId, String languageCode, Long async, String format) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageProjectTranslationMemoryForLanguageWithHttpInfo(projectId, languageCode, async, format);
        return localVarResp.getData();
    }

    /**
     * Download language-specific project translation memory
     * Package and download project translation memory in TMX format for a specific target language.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageProjectTranslationMemoryForLanguageWithHttpInfo(Long projectId, String languageCode, Long async, String format) throws ApiException {
        okhttp3.Call localVarCall = packageProjectTranslationMemoryForLanguageValidateBeforeCall(projectId, languageCode, async, format, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download language-specific project translation memory (asynchronously)
     * Package and download project translation memory in TMX format for a specific target language.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param format Translation Memory file format (optional, default to tmx)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryForLanguageAsync(Long projectId, String languageCode, Long async, String format, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageProjectTranslationMemoryForLanguageValidateBeforeCall(projectId, languageCode, async, format, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageProjectTranslationMemoryForLanguageStatus
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryForLanguageStatusCall(Long projectId, String languageCode, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings/{languageCode}/package/status"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "languageCode" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asyncRequestKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async_request_key", asyncRequestKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageProjectTranslationMemoryForLanguageStatusValidateBeforeCall(Long projectId, String languageCode, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryForLanguageStatus(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling packageProjectTranslationMemoryForLanguageStatus(Async)");
        }

        // verify the required parameter 'asyncRequestKey' is set
        if (asyncRequestKey == null) {
            throw new ApiException("Missing the required parameter 'asyncRequestKey' when calling packageProjectTranslationMemoryForLanguageStatus(Async)");
        }

        return packageProjectTranslationMemoryForLanguageStatusCall(projectId, languageCode, asyncRequestKey, _callback);

    }

    /**
     * Check language-specific translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageProjectTranslationMemoryForLanguageStatus(Long projectId, String languageCode, String asyncRequestKey) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageProjectTranslationMemoryForLanguageStatusWithHttpInfo(projectId, languageCode, asyncRequestKey);
        return localVarResp.getData();
    }

    /**
     * Check language-specific translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageProjectTranslationMemoryForLanguageStatusWithHttpInfo(Long projectId, String languageCode, String asyncRequestKey) throws ApiException {
        okhttp3.Call localVarCall = packageProjectTranslationMemoryForLanguageStatusValidateBeforeCall(projectId, languageCode, asyncRequestKey, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check language-specific translation memory packaging status (asynchronously)
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryForLanguageStatusAsync(Long projectId, String languageCode, String asyncRequestKey, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageProjectTranslationMemoryForLanguageStatusValidateBeforeCall(projectId, languageCode, asyncRequestKey, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageProjectTranslationMemoryStatus
     * @param projectId Project ID (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryStatusCall(Long projectId, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/strings/package/status"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asyncRequestKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async_request_key", asyncRequestKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageProjectTranslationMemoryStatusValidateBeforeCall(Long projectId, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling packageProjectTranslationMemoryStatus(Async)");
        }

        // verify the required parameter 'asyncRequestKey' is set
        if (asyncRequestKey == null) {
            throw new ApiException("Missing the required parameter 'asyncRequestKey' when calling packageProjectTranslationMemoryStatus(Async)");
        }

        return packageProjectTranslationMemoryStatusCall(projectId, asyncRequestKey, _callback);

    }

    /**
     * Check translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param asyncRequestKey Async operation key (required)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageProjectTranslationMemoryStatus(Long projectId, String asyncRequestKey) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageProjectTranslationMemoryStatusWithHttpInfo(projectId, asyncRequestKey);
        return localVarResp.getData();
    }

    /**
     * Check translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param asyncRequestKey Async operation key (required)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageProjectTranslationMemoryStatusWithHttpInfo(Long projectId, String asyncRequestKey) throws ApiException {
        okhttp3.Call localVarCall = packageProjectTranslationMemoryStatusValidateBeforeCall(projectId, asyncRequestKey, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check translation memory packaging status (asynchronously)
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param projectId Project ID (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageProjectTranslationMemoryStatusAsync(Long projectId, String asyncRequestKey, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageProjectTranslationMemoryStatusValidateBeforeCall(projectId, asyncRequestKey, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageUserTranslationMemory
     * @param languageCode Source Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param email If you don&#39;t need us to email the TMX, set this to &#39;0&#39;. Default is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUserTranslationMemoryCall(String languageCode, Long async, Long email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/strings/{languageCode}/package"
            .replace("{" + "languageCode" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageUserTranslationMemoryValidateBeforeCall(String languageCode, Long async, Long email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling packageUserTranslationMemory(Async)");
        }

        return packageUserTranslationMemoryCall(languageCode, async, email, _callback);

    }

    /**
     * Download account translation memory
     * Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
     * @param languageCode Source Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param email If you don&#39;t need us to email the TMX, set this to &#39;0&#39;. Default is 1. (optional, default to 1)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageUserTranslationMemory(String languageCode, Long async, Long email) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageUserTranslationMemoryWithHttpInfo(languageCode, async, email);
        return localVarResp.getData();
    }

    /**
     * Download account translation memory
     * Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
     * @param languageCode Source Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param email If you don&#39;t need us to email the TMX, set this to &#39;0&#39;. Default is 1. (optional, default to 1)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageUserTranslationMemoryWithHttpInfo(String languageCode, Long async, Long email) throws ApiException {
        okhttp3.Call localVarCall = packageUserTranslationMemoryValidateBeforeCall(languageCode, async, email, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download account translation memory (asynchronously)
     * Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
     * @param languageCode Source Language Code (required)
     * @param async If you want to package and download the translation memory synchronously, mark this parameter as &#39;0&#39;. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call. (optional, default to 0)
     * @param email If you don&#39;t need us to email the TMX, set this to &#39;0&#39;. Default is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response in TMX or async request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUserTranslationMemoryAsync(String languageCode, Long async, Long email, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageUserTranslationMemoryValidateBeforeCall(languageCode, async, email, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageUserTranslationMemoryForLanguageStatus
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUserTranslationMemoryForLanguageStatusCall(String languageCode, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/strings/{languageCode}/package/status"
            .replace("{" + "languageCode" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asyncRequestKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async_request_key", asyncRequestKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageUserTranslationMemoryForLanguageStatusValidateBeforeCall(String languageCode, String asyncRequestKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling packageUserTranslationMemoryForLanguageStatus(Async)");
        }

        // verify the required parameter 'asyncRequestKey' is set
        if (asyncRequestKey == null) {
            throw new ApiException("Missing the required parameter 'asyncRequestKey' when calling packageUserTranslationMemoryForLanguageStatus(Async)");
        }

        return packageUserTranslationMemoryForLanguageStatusCall(languageCode, asyncRequestKey, _callback);

    }

    /**
     * Check account translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @return AsyncOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public AsyncOperationStatus packageUserTranslationMemoryForLanguageStatus(String languageCode, String asyncRequestKey) throws ApiException {
        ApiResponse<AsyncOperationStatus> localVarResp = packageUserTranslationMemoryForLanguageStatusWithHttpInfo(languageCode, asyncRequestKey);
        return localVarResp.getData();
    }

    /**
     * Check account translation memory packaging status
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @return ApiResponse&lt;AsyncOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AsyncOperationStatus> packageUserTranslationMemoryForLanguageStatusWithHttpInfo(String languageCode, String asyncRequestKey) throws ApiException {
        okhttp3.Call localVarCall = packageUserTranslationMemoryForLanguageStatusValidateBeforeCall(languageCode, asyncRequestKey, null);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check account translation memory packaging status (asynchronously)
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * @param languageCode Language Code (required)
     * @param asyncRequestKey Async operation key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Async operation status. Use the key to query status of this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUserTranslationMemoryForLanguageStatusAsync(String languageCode, String asyncRequestKey, final ApiCallback<AsyncOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageUserTranslationMemoryForLanguageStatusValidateBeforeCall(languageCode, asyncRequestKey, _callback);
        Type localVarReturnType = new TypeToken<AsyncOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postContinuousProjectFileStrings
     * @param projectId Project ID (required)
     * @param continuousProjectDocumentStringsBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContinuousProjectFileStringsCall(Long projectId, ContinuousProjectDocumentStringsBody continuousProjectDocumentStringsBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = continuousProjectDocumentStringsBody;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/strings"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContinuousProjectFileStringsValidateBeforeCall(Long projectId, ContinuousProjectDocumentStringsBody continuousProjectDocumentStringsBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postContinuousProjectFileStrings(Async)");
        }

        return postContinuousProjectFileStringsCall(projectId, continuousProjectDocumentStringsBody, _callback);

    }

    /**
     * Get a list of strings and its translations in the project.
     * 
     * @param projectId Project ID (required)
     * @param continuousProjectDocumentStringsBody  (optional)
     * @return StringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public StringList postContinuousProjectFileStrings(Long projectId, ContinuousProjectDocumentStringsBody continuousProjectDocumentStringsBody) throws ApiException {
        ApiResponse<StringList> localVarResp = postContinuousProjectFileStringsWithHttpInfo(projectId, continuousProjectDocumentStringsBody);
        return localVarResp.getData();
    }

    /**
     * Get a list of strings and its translations in the project.
     * 
     * @param projectId Project ID (required)
     * @param continuousProjectDocumentStringsBody  (optional)
     * @return ApiResponse&lt;StringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringList> postContinuousProjectFileStringsWithHttpInfo(Long projectId, ContinuousProjectDocumentStringsBody continuousProjectDocumentStringsBody) throws ApiException {
        okhttp3.Call localVarCall = postContinuousProjectFileStringsValidateBeforeCall(projectId, continuousProjectDocumentStringsBody, null);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of strings and its translations in the project. (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param continuousProjectDocumentStringsBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for strings and their translations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContinuousProjectFileStringsAsync(Long projectId, ContinuousProjectDocumentStringsBody continuousProjectDocumentStringsBody, final ApiCallback<StringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContinuousProjectFileStringsValidateBeforeCall(projectId, continuousProjectDocumentStringsBody, _callback);
        Type localVarReturnType = new TypeToken<StringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recacheTranslations
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recacheTranslationsCall(Long projectId, String locale, Long fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/strings/recache-tms"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (fileId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_id", fileId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recacheTranslationsValidateBeforeCall(Long projectId, String locale, Long fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling recacheTranslations(Async)");
        }

        return recacheTranslationsCall(projectId, locale, fileId, _callback);

    }

    /**
     * Recache translations
     * Recache translations for the continuous project.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus recacheTranslations(Long projectId, String locale, Long fileId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = recacheTranslationsWithHttpInfo(projectId, locale, fileId);
        return localVarResp.getData();
    }

    /**
     * Recache translations
     * Recache translations for the continuous project.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> recacheTranslationsWithHttpInfo(Long projectId, String locale, Long fileId) throws ApiException {
        okhttp3.Call localVarCall = recacheTranslationsValidateBeforeCall(projectId, locale, fileId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recache translations (asynchronously)
     * Recache translations for the continuous project.
     * @param projectId Project ID (required)
     * @param locale Locale (optional)
     * @param fileId Continuous Project File ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recacheTranslationsAsync(Long projectId, String locale, Long fileId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = recacheTranslationsValidateBeforeCall(projectId, locale, fileId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTranslationMemoryUnit
     * @param translationMemoryUnit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation updated by adding new translation memory unit </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Corporate id, source language, target language, source string or target string is not provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source language or target language is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong and translation unit is not updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranslationMemoryUnitCall(TranslationMemoryUnit translationMemoryUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translationMemoryUnit;

        // create path and map variables
        String localVarPath = "/strings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTranslationMemoryUnitValidateBeforeCall(TranslationMemoryUnit translationMemoryUnit, final ApiCallback _callback) throws ApiException {
        return updateTranslationMemoryUnitCall(translationMemoryUnit, _callback);

    }

    /**
     * Update string translation
     * Update the translation of a string from your account strings/translation memory.
     * @param translationMemoryUnit  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation updated by adding new translation memory unit </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Corporate id, source language, target language, source string or target string is not provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source language or target language is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong and translation unit is not updated </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus updateTranslationMemoryUnit(TranslationMemoryUnit translationMemoryUnit) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = updateTranslationMemoryUnitWithHttpInfo(translationMemoryUnit);
        return localVarResp.getData();
    }

    /**
     * Update string translation
     * Update the translation of a string from your account strings/translation memory.
     * @param translationMemoryUnit  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation updated by adding new translation memory unit </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Corporate id, source language, target language, source string or target string is not provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source language or target language is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong and translation unit is not updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> updateTranslationMemoryUnitWithHttpInfo(TranslationMemoryUnit translationMemoryUnit) throws ApiException {
        okhttp3.Call localVarCall = updateTranslationMemoryUnitValidateBeforeCall(translationMemoryUnit, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update string translation (asynchronously)
     * Update the translation of a string from your account strings/translation memory.
     * @param translationMemoryUnit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation updated by adding new translation memory unit </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Corporate id, source language, target language, source string or target string is not provided </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Source language or target language is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Something went wrong and translation unit is not updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTranslationMemoryUnitAsync(TranslationMemoryUnit translationMemoryUnit, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTranslationMemoryUnitValidateBeforeCall(translationMemoryUnit, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
