/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguagePair;
import org.openapitools.client.model.ProfileSurvey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserVendor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserVendor {
  public static final String SERIALIZED_NAME_CAN_WORK_MANUAL_FILES = "can_work_manual_files";
  @SerializedName(SERIALIZED_NAME_CAN_WORK_MANUAL_FILES)
  private Boolean canWorkManualFiles;

  public static final String SERIALIZED_NAME_EMAIL_OPEN_RATE = "email_open_rate";
  @SerializedName(SERIALIZED_NAME_EMAIL_OPEN_RATE)
  private Float emailOpenRate;

  public static final String SERIALIZED_NAME_IS_FROZEN = "is_frozen";
  @SerializedName(SERIALIZED_NAME_IS_FROZEN)
  private Boolean isFrozen;

  public static final String SERIALIZED_NAME_IS_PROOFREADER = "is_proofreader";
  @SerializedName(SERIALIZED_NAME_IS_PROOFREADER)
  private Boolean isProofreader;

  public static final String SERIALIZED_NAME_LANGUAGE_PAIRS = "language_pairs";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_PAIRS)
  private List<LanguagePair> languagePairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NATIVE_LANGUAGE = "native_language";
  @SerializedName(SERIALIZED_NAME_NATIVE_LANGUAGE)
  private String nativeLanguage;

  public static final String SERIALIZED_NAME_PAM_TQS = "pam_tqs";
  @SerializedName(SERIALIZED_NAME_PAM_TQS)
  private Float pamTqs;

  public static final String SERIALIZED_NAME_PAYPAL_EMAIL = "paypal_email";
  @SerializedName(SERIALIZED_NAME_PAYPAL_EMAIL)
  private String paypalEmail;

  public static final String SERIALIZED_NAME_PROFILE_SURVEY = "profile_survey";
  @SerializedName(SERIALIZED_NAME_PROFILE_SURVEY)
  private ProfileSurvey profileSurvey;

  public static final String SERIALIZED_NAME_REQUIRE1099 = "require_1099";
  @SerializedName(SERIALIZED_NAME_REQUIRE1099)
  private Boolean require1099;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TMS_USER_NAME = "tms_user_name";
  @SerializedName(SERIALIZED_NAME_TMS_USER_NAME)
  private String tmsUserName;

  public static final String SERIALIZED_NAME_VENDOR_TYPE = "vendor_type";
  @SerializedName(SERIALIZED_NAME_VENDOR_TYPE)
  private String vendorType;

  public UserVendor() {
  }

  public UserVendor canWorkManualFiles(Boolean canWorkManualFiles) {
    this.canWorkManualFiles = canWorkManualFiles;
    return this;
  }

  /**
   * Get canWorkManualFiles
   * @return canWorkManualFiles
   */
  @javax.annotation.Nullable
  public Boolean getCanWorkManualFiles() {
    return canWorkManualFiles;
  }

  public void setCanWorkManualFiles(Boolean canWorkManualFiles) {
    this.canWorkManualFiles = canWorkManualFiles;
  }


  public UserVendor emailOpenRate(Float emailOpenRate) {
    this.emailOpenRate = emailOpenRate;
    return this;
  }

  /**
   * Get emailOpenRate
   * @return emailOpenRate
   */
  @javax.annotation.Nullable
  public Float getEmailOpenRate() {
    return emailOpenRate;
  }

  public void setEmailOpenRate(Float emailOpenRate) {
    this.emailOpenRate = emailOpenRate;
  }


  public UserVendor isFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

  /**
   * Get isFrozen
   * @return isFrozen
   */
  @javax.annotation.Nullable
  public Boolean getIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
  }


  public UserVendor isProofreader(Boolean isProofreader) {
    this.isProofreader = isProofreader;
    return this;
  }

  /**
   * Get isProofreader
   * @return isProofreader
   */
  @javax.annotation.Nullable
  public Boolean getIsProofreader() {
    return isProofreader;
  }

  public void setIsProofreader(Boolean isProofreader) {
    this.isProofreader = isProofreader;
  }


  public UserVendor languagePairs(List<LanguagePair> languagePairs) {
    this.languagePairs = languagePairs;
    return this;
  }

  public UserVendor addLanguagePairsItem(LanguagePair languagePairsItem) {
    if (this.languagePairs == null) {
      this.languagePairs = new ArrayList<>();
    }
    this.languagePairs.add(languagePairsItem);
    return this;
  }

  /**
   * Get languagePairs
   * @return languagePairs
   */
  @javax.annotation.Nullable
  public List<LanguagePair> getLanguagePairs() {
    return languagePairs;
  }

  public void setLanguagePairs(List<LanguagePair> languagePairs) {
    this.languagePairs = languagePairs;
  }


  public UserVendor nativeLanguage(String nativeLanguage) {
    this.nativeLanguage = nativeLanguage;
    return this;
  }

  /**
   * Native language of user
   * @return nativeLanguage
   */
  @javax.annotation.Nullable
  public String getNativeLanguage() {
    return nativeLanguage;
  }

  public void setNativeLanguage(String nativeLanguage) {
    this.nativeLanguage = nativeLanguage;
  }


  public UserVendor pamTqs(Float pamTqs) {
    this.pamTqs = pamTqs;
    return this;
  }

  /**
   * Get pamTqs
   * @return pamTqs
   */
  @javax.annotation.Nullable
  public Float getPamTqs() {
    return pamTqs;
  }

  public void setPamTqs(Float pamTqs) {
    this.pamTqs = pamTqs;
  }


  public UserVendor paypalEmail(String paypalEmail) {
    this.paypalEmail = paypalEmail;
    return this;
  }

  /**
   * Get paypalEmail
   * @return paypalEmail
   */
  @javax.annotation.Nullable
  public String getPaypalEmail() {
    return paypalEmail;
  }

  public void setPaypalEmail(String paypalEmail) {
    this.paypalEmail = paypalEmail;
  }


  public UserVendor profileSurvey(ProfileSurvey profileSurvey) {
    this.profileSurvey = profileSurvey;
    return this;
  }

  /**
   * Get profileSurvey
   * @return profileSurvey
   */
  @javax.annotation.Nullable
  public ProfileSurvey getProfileSurvey() {
    return profileSurvey;
  }

  public void setProfileSurvey(ProfileSurvey profileSurvey) {
    this.profileSurvey = profileSurvey;
  }


  public UserVendor require1099(Boolean require1099) {
    this.require1099 = require1099;
    return this;
  }

  /**
   * Get require1099
   * @return require1099
   */
  @javax.annotation.Nullable
  public Boolean getRequire1099() {
    return require1099;
  }

  public void setRequire1099(Boolean require1099) {
    this.require1099 = require1099;
  }


  public UserVendor tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UserVendor addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public UserVendor tmsUserName(String tmsUserName) {
    this.tmsUserName = tmsUserName;
    return this;
  }

  /**
   * Get tmsUserName
   * @return tmsUserName
   */
  @javax.annotation.Nullable
  public String getTmsUserName() {
    return tmsUserName;
  }

  public void setTmsUserName(String tmsUserName) {
    this.tmsUserName = tmsUserName;
  }


  public UserVendor vendorType(String vendorType) {
    this.vendorType = vendorType;
    return this;
  }

  /**
   * Get vendorType
   * @return vendorType
   */
  @javax.annotation.Nullable
  public String getVendorType() {
    return vendorType;
  }

  public void setVendorType(String vendorType) {
    this.vendorType = vendorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserVendor userVendor = (UserVendor) o;
    return Objects.equals(this.canWorkManualFiles, userVendor.canWorkManualFiles) &&
        Objects.equals(this.emailOpenRate, userVendor.emailOpenRate) &&
        Objects.equals(this.isFrozen, userVendor.isFrozen) &&
        Objects.equals(this.isProofreader, userVendor.isProofreader) &&
        Objects.equals(this.languagePairs, userVendor.languagePairs) &&
        Objects.equals(this.nativeLanguage, userVendor.nativeLanguage) &&
        Objects.equals(this.pamTqs, userVendor.pamTqs) &&
        Objects.equals(this.paypalEmail, userVendor.paypalEmail) &&
        Objects.equals(this.profileSurvey, userVendor.profileSurvey) &&
        Objects.equals(this.require1099, userVendor.require1099) &&
        Objects.equals(this.tags, userVendor.tags) &&
        Objects.equals(this.tmsUserName, userVendor.tmsUserName) &&
        Objects.equals(this.vendorType, userVendor.vendorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canWorkManualFiles, emailOpenRate, isFrozen, isProofreader, languagePairs, nativeLanguage, pamTqs, paypalEmail, profileSurvey, require1099, tags, tmsUserName, vendorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserVendor {\n");
    sb.append("    canWorkManualFiles: ").append(toIndentedString(canWorkManualFiles)).append("\n");
    sb.append("    emailOpenRate: ").append(toIndentedString(emailOpenRate)).append("\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    isProofreader: ").append(toIndentedString(isProofreader)).append("\n");
    sb.append("    languagePairs: ").append(toIndentedString(languagePairs)).append("\n");
    sb.append("    nativeLanguage: ").append(toIndentedString(nativeLanguage)).append("\n");
    sb.append("    pamTqs: ").append(toIndentedString(pamTqs)).append("\n");
    sb.append("    paypalEmail: ").append(toIndentedString(paypalEmail)).append("\n");
    sb.append("    profileSurvey: ").append(toIndentedString(profileSurvey)).append("\n");
    sb.append("    require1099: ").append(toIndentedString(require1099)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tmsUserName: ").append(toIndentedString(tmsUserName)).append("\n");
    sb.append("    vendorType: ").append(toIndentedString(vendorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_work_manual_files");
    openapiFields.add("email_open_rate");
    openapiFields.add("is_frozen");
    openapiFields.add("is_proofreader");
    openapiFields.add("language_pairs");
    openapiFields.add("native_language");
    openapiFields.add("pam_tqs");
    openapiFields.add("paypal_email");
    openapiFields.add("profile_survey");
    openapiFields.add("require_1099");
    openapiFields.add("tags");
    openapiFields.add("tms_user_name");
    openapiFields.add("vendor_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserVendor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserVendor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserVendor is not found in the empty JSON string", UserVendor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserVendor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserVendor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("language_pairs") != null && !jsonObj.get("language_pairs").isJsonNull()) {
        JsonArray jsonArraylanguagePairs = jsonObj.getAsJsonArray("language_pairs");
        if (jsonArraylanguagePairs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("language_pairs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `language_pairs` to be an array in the JSON string but got `%s`", jsonObj.get("language_pairs").toString()));
          }

          // validate the optional field `language_pairs` (array)
          for (int i = 0; i < jsonArraylanguagePairs.size(); i++) {
            LanguagePair.validateJsonElement(jsonArraylanguagePairs.get(i));
          };
        }
      }
      if ((jsonObj.get("native_language") != null && !jsonObj.get("native_language").isJsonNull()) && !jsonObj.get("native_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `native_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("native_language").toString()));
      }
      if ((jsonObj.get("paypal_email") != null && !jsonObj.get("paypal_email").isJsonNull()) && !jsonObj.get("paypal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paypal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paypal_email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("tms_user_name") != null && !jsonObj.get("tms_user_name").isJsonNull()) && !jsonObj.get("tms_user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tms_user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tms_user_name").toString()));
      }
      if ((jsonObj.get("vendor_type") != null && !jsonObj.get("vendor_type").isJsonNull()) && !jsonObj.get("vendor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserVendor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserVendor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserVendor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserVendor.class));

       return (TypeAdapter<T>) new TypeAdapter<UserVendor>() {
           @Override
           public void write(JsonWriter out, UserVendor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserVendor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserVendor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserVendor
   * @throws IOException if the JSON string is invalid with respect to UserVendor
   */
  public static UserVendor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserVendor.class);
  }

  /**
   * Convert an instance of UserVendor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

