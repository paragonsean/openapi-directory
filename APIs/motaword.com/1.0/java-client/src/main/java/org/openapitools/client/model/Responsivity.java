/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Responsivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Responsivity {
  public static final String SERIALIZED_NAME_INVITED = "invited";
  @SerializedName(SERIALIZED_NAME_INVITED)
  private Long invited;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_NOT_ENTERED = "notEntered";
  @SerializedName(SERIALIZED_NAME_NOT_ENTERED)
  private Long notEntered;

  public static final String SERIALIZED_NAME_ONLY_ENTERED = "onlyEntered";
  @SerializedName(SERIALIZED_NAME_ONLY_ENTERED)
  private Long onlyEntered;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private String week;

  public static final String SERIALIZED_NAME_WORKED = "worked";
  @SerializedName(SERIALIZED_NAME_WORKED)
  private Long worked;

  public Responsivity() {
  }

  public Responsivity invited(Long invited) {
    this.invited = invited;
    return this;
  }

  /**
   * Get invited
   * @return invited
   */
  @javax.annotation.Nullable
  public Long getInvited() {
    return invited;
  }

  public void setInvited(Long invited) {
    this.invited = invited;
  }


  public Responsivity month(String month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public String getMonth() {
    return month;
  }

  public void setMonth(String month) {
    this.month = month;
  }


  public Responsivity notEntered(Long notEntered) {
    this.notEntered = notEntered;
    return this;
  }

  /**
   * Get notEntered
   * @return notEntered
   */
  @javax.annotation.Nullable
  public Long getNotEntered() {
    return notEntered;
  }

  public void setNotEntered(Long notEntered) {
    this.notEntered = notEntered;
  }


  public Responsivity onlyEntered(Long onlyEntered) {
    this.onlyEntered = onlyEntered;
    return this;
  }

  /**
   * Get onlyEntered
   * @return onlyEntered
   */
  @javax.annotation.Nullable
  public Long getOnlyEntered() {
    return onlyEntered;
  }

  public void setOnlyEntered(Long onlyEntered) {
    this.onlyEntered = onlyEntered;
  }


  public Responsivity score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public Responsivity week(String week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public String getWeek() {
    return week;
  }

  public void setWeek(String week) {
    this.week = week;
  }


  public Responsivity worked(Long worked) {
    this.worked = worked;
    return this;
  }

  /**
   * Get worked
   * @return worked
   */
  @javax.annotation.Nullable
  public Long getWorked() {
    return worked;
  }

  public void setWorked(Long worked) {
    this.worked = worked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Responsivity responsivity = (Responsivity) o;
    return Objects.equals(this.invited, responsivity.invited) &&
        Objects.equals(this.month, responsivity.month) &&
        Objects.equals(this.notEntered, responsivity.notEntered) &&
        Objects.equals(this.onlyEntered, responsivity.onlyEntered) &&
        Objects.equals(this.score, responsivity.score) &&
        Objects.equals(this.week, responsivity.week) &&
        Objects.equals(this.worked, responsivity.worked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invited, month, notEntered, onlyEntered, score, week, worked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Responsivity {\n");
    sb.append("    invited: ").append(toIndentedString(invited)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    notEntered: ").append(toIndentedString(notEntered)).append("\n");
    sb.append("    onlyEntered: ").append(toIndentedString(onlyEntered)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    worked: ").append(toIndentedString(worked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invited");
    openapiFields.add("month");
    openapiFields.add("notEntered");
    openapiFields.add("onlyEntered");
    openapiFields.add("score");
    openapiFields.add("week");
    openapiFields.add("worked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Responsivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Responsivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Responsivity is not found in the empty JSON string", Responsivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Responsivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Responsivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if ((jsonObj.get("week") != null && !jsonObj.get("week").isJsonNull()) && !jsonObj.get("week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("week").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Responsivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Responsivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Responsivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Responsivity.class));

       return (TypeAdapter<T>) new TypeAdapter<Responsivity>() {
           @Override
           public void write(JsonWriter out, Responsivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Responsivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Responsivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Responsivity
   * @throws IOException if the JSON string is invalid with respect to Responsivity
   */
  public static Responsivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Responsivity.class);
  }

  /**
   * Convert an instance of Responsivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

