/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguageStringStat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientStringStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientStringStats {
  public static final String SERIALIZED_NAME_LANGUAGE_COUNTS = "language_counts";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COUNTS)
  private List<LanguageStringStat> languageCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_PROJECT_STRINGS_COUNT = "total_project_strings_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROJECT_STRINGS_COUNT)
  private Long totalProjectStringsCount;

  public static final String SERIALIZED_NAME_TOTAL_TM_STRINGS_COUNT = "total_tm_strings_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_TM_STRINGS_COUNT)
  private Long totalTmStringsCount;

  public ClientStringStats() {
  }

  public ClientStringStats languageCounts(List<LanguageStringStat> languageCounts) {
    this.languageCounts = languageCounts;
    return this;
  }

  public ClientStringStats addLanguageCountsItem(LanguageStringStat languageCountsItem) {
    if (this.languageCounts == null) {
      this.languageCounts = new ArrayList<>();
    }
    this.languageCounts.add(languageCountsItem);
    return this;
  }

  /**
   * Get languageCounts
   * @return languageCounts
   */
  @javax.annotation.Nullable
  public List<LanguageStringStat> getLanguageCounts() {
    return languageCounts;
  }

  public void setLanguageCounts(List<LanguageStringStat> languageCounts) {
    this.languageCounts = languageCounts;
  }


  public ClientStringStats totalProjectStringsCount(Long totalProjectStringsCount) {
    this.totalProjectStringsCount = totalProjectStringsCount;
    return this;
  }

  /**
   * Get totalProjectStringsCount
   * @return totalProjectStringsCount
   */
  @javax.annotation.Nullable
  public Long getTotalProjectStringsCount() {
    return totalProjectStringsCount;
  }

  public void setTotalProjectStringsCount(Long totalProjectStringsCount) {
    this.totalProjectStringsCount = totalProjectStringsCount;
  }


  public ClientStringStats totalTmStringsCount(Long totalTmStringsCount) {
    this.totalTmStringsCount = totalTmStringsCount;
    return this;
  }

  /**
   * Get totalTmStringsCount
   * @return totalTmStringsCount
   */
  @javax.annotation.Nullable
  public Long getTotalTmStringsCount() {
    return totalTmStringsCount;
  }

  public void setTotalTmStringsCount(Long totalTmStringsCount) {
    this.totalTmStringsCount = totalTmStringsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientStringStats clientStringStats = (ClientStringStats) o;
    return Objects.equals(this.languageCounts, clientStringStats.languageCounts) &&
        Objects.equals(this.totalProjectStringsCount, clientStringStats.totalProjectStringsCount) &&
        Objects.equals(this.totalTmStringsCount, clientStringStats.totalTmStringsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCounts, totalProjectStringsCount, totalTmStringsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientStringStats {\n");
    sb.append("    languageCounts: ").append(toIndentedString(languageCounts)).append("\n");
    sb.append("    totalProjectStringsCount: ").append(toIndentedString(totalProjectStringsCount)).append("\n");
    sb.append("    totalTmStringsCount: ").append(toIndentedString(totalTmStringsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language_counts");
    openapiFields.add("total_project_strings_count");
    openapiFields.add("total_tm_strings_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientStringStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientStringStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientStringStats is not found in the empty JSON string", ClientStringStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientStringStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientStringStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("language_counts") != null && !jsonObj.get("language_counts").isJsonNull()) {
        JsonArray jsonArraylanguageCounts = jsonObj.getAsJsonArray("language_counts");
        if (jsonArraylanguageCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("language_counts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `language_counts` to be an array in the JSON string but got `%s`", jsonObj.get("language_counts").toString()));
          }

          // validate the optional field `language_counts` (array)
          for (int i = 0; i < jsonArraylanguageCounts.size(); i++) {
            LanguageStringStat.validateJsonElement(jsonArraylanguageCounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientStringStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientStringStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientStringStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientStringStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientStringStats>() {
           @Override
           public void write(JsonWriter out, ClientStringStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientStringStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientStringStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientStringStats
   * @throws IOException if the JSON string is invalid with respect to ClientStringStats
   */
  public static ClientStringStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientStringStats.class);
  }

  /**
   * Convert an instance of ClientStringStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

