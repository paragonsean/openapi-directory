/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActiveWidget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveWidget {
  public static final String SERIALIZED_NAME_ADMIN_MODE = "admin_mode";
  @SerializedName(SERIALIZED_NAME_ADMIN_MODE)
  private Boolean adminMode;

  public static final String SERIALIZED_NAME_ALLOW_HASH_IN_URL = "allow_hash_in_url";
  @SerializedName(SERIALIZED_NAME_ALLOW_HASH_IN_URL)
  private Boolean allowHashInUrl;

  public static final String SERIALIZED_NAME_ALLOW_QUERY_IN_URL = "allow_query_in_url";
  @SerializedName(SERIALIZED_NAME_ALLOW_QUERY_IN_URL)
  private Boolean allowQueryInUrl;

  public static final String SERIALIZED_NAME_AUTO_DETECT_SOURCE_LANGUAGE = "auto_detect_source_language";
  @SerializedName(SERIALIZED_NAME_AUTO_DETECT_SOURCE_LANGUAGE)
  private Boolean autoDetectSourceLanguage;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEBUG_MODE = "debug_mode";
  @SerializedName(SERIALIZED_NAME_DEBUG_MODE)
  private Boolean debugMode;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private String elements;

  public static final String SERIALIZED_NAME_FOLLOW_USER = "follow_user";
  @SerializedName(SERIALIZED_NAME_FOLLOW_USER)
  private Boolean followUser;

  public static final String SERIALIZED_NAME_FORCE_CACHE_REFRESH_INTERVAL = "force_cache_refresh_interval";
  @SerializedName(SERIALIZED_NAME_FORCE_CACHE_REFRESH_INTERVAL)
  private Boolean forceCacheRefreshInterval;

  public static final String SERIALIZED_NAME_HIT_BACKEND_FOR_EXISTING = "hit_backend_for_existing";
  @SerializedName(SERIALIZED_NAME_HIT_BACKEND_FOR_EXISTING)
  private Boolean hitBackendForExisting;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LANGUAGE_MAPPINGS = "language_mappings";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_MAPPINGS)
  private String languageMappings;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private Boolean live;

  public static final String SERIALIZED_NAME_MODIFY_LINKS = "modify_links";
  @SerializedName(SERIALIZED_NAME_MODIFY_LINKS)
  private Boolean modifyLinks;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIMIZE_PER_PAGE = "optimize_per_page";
  @SerializedName(SERIALIZED_NAME_OPTIMIZE_PER_PAGE)
  private Boolean optimizePerPage;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private String pages;

  public static final String SERIALIZED_NAME_PATH_REGEX = "path_regex";
  @SerializedName(SERIALIZED_NAME_PATH_REGEX)
  private String pathRegex;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_QUERY_NAME = "query_name";
  @SerializedName(SERIALIZED_NAME_QUERY_NAME)
  private String queryName = "locale";

  public static final String SERIALIZED_NAME_REBOOT_ON_URL_CHANGE = "reboot_on_url_change";
  @SerializedName(SERIALIZED_NAME_REBOOT_ON_URL_CHANGE)
  private Boolean rebootOnUrlChange;

  public static final String SERIALIZED_NAME_RESTRICTED_DOMAINS = "restricted_domains";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_DOMAINS)
  private String restrictedDomains;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private String sections;

  public static final String SERIALIZED_NAME_TEST_MODE = "test_mode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private Boolean testMode;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_URL_CHANGE_MODE = "url_change_mode";
  @SerializedName(SERIALIZED_NAME_URL_CHANGE_MODE)
  private String urlChangeMode;

  public static final String SERIALIZED_NAME_URL_MODE = "url_mode";
  @SerializedName(SERIALIZED_NAME_URL_MODE)
  private String urlMode;

  public static final String SERIALIZED_NAME_USE_CACHE = "use_cache";
  @SerializedName(SERIALIZED_NAME_USE_CACHE)
  private Boolean useCache;

  public static final String SERIALIZED_NAME_USE_DUMMY_TRANSLATIONS = "use_dummy_translations";
  @SerializedName(SERIALIZED_NAME_USE_DUMMY_TRANSLATIONS)
  private Boolean useDummyTranslations;

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private String variables;

  public ActiveWidget() {
  }

  public ActiveWidget adminMode(Boolean adminMode) {
    this.adminMode = adminMode;
    return this;
  }

  /**
   * Is the Active Widget in admin mode? This changes a couple of behaviors in the widget to configure some rules like elements, sections, pages, etc.
   * @return adminMode
   */
  @javax.annotation.Nullable
  public Boolean getAdminMode() {
    return adminMode;
  }

  public void setAdminMode(Boolean adminMode) {
    this.adminMode = adminMode;
  }


  public ActiveWidget allowHashInUrl(Boolean allowHashInUrl) {
    this.allowHashInUrl = allowHashInUrl;
    return this;
  }

  /**
   * When true, hash params are included in filenames. When false, params are ignored.
   * @return allowHashInUrl
   */
  @javax.annotation.Nullable
  public Boolean getAllowHashInUrl() {
    return allowHashInUrl;
  }

  public void setAllowHashInUrl(Boolean allowHashInUrl) {
    this.allowHashInUrl = allowHashInUrl;
  }


  public ActiveWidget allowQueryInUrl(Boolean allowQueryInUrl) {
    this.allowQueryInUrl = allowQueryInUrl;
    return this;
  }

  /**
   * When true, query params are included in filenames. When false, params are ignored.
   * @return allowQueryInUrl
   */
  @javax.annotation.Nullable
  public Boolean getAllowQueryInUrl() {
    return allowQueryInUrl;
  }

  public void setAllowQueryInUrl(Boolean allowQueryInUrl) {
    this.allowQueryInUrl = allowQueryInUrl;
  }


  public ActiveWidget autoDetectSourceLanguage(Boolean autoDetectSourceLanguage) {
    this.autoDetectSourceLanguage = autoDetectSourceLanguage;
    return this;
  }

  /**
   * When true, we will ignore the source language of your project and try to automatically detect the source language of the given content. This is especially useful in environments with unpredictable source contents, such as a chat environment.
   * @return autoDetectSourceLanguage
   */
  @javax.annotation.Nullable
  public Boolean getAutoDetectSourceLanguage() {
    return autoDetectSourceLanguage;
  }

  public void setAutoDetectSourceLanguage(Boolean autoDetectSourceLanguage) {
    this.autoDetectSourceLanguage = autoDetectSourceLanguage;
  }


  public ActiveWidget createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ActiveWidget debugMode(Boolean debugMode) {
    this.debugMode = debugMode;
    return this;
  }

  /**
   * When true, Active ecosystem will print debug-level logs from all Active modules.
   * @return debugMode
   */
  @javax.annotation.Nullable
  public Boolean getDebugMode() {
    return debugMode;
  }

  public void setDebugMode(Boolean debugMode) {
    this.debugMode = debugMode;
  }


  public ActiveWidget elements(String elements) {
    this.elements = elements;
    return this;
  }

  /**
   * Continuous project exclusive elements and rules
   * @return elements
   */
  @javax.annotation.Nullable
  public String getElements() {
    return elements;
  }

  public void setElements(String elements) {
    this.elements = elements;
  }


  public ActiveWidget followUser(Boolean followUser) {
    this.followUser = followUser;
    return this;
  }

  /**
   * Specify whether we should follow the user around in your website and automatically translate pages.
   * @return followUser
   */
  @javax.annotation.Nullable
  public Boolean getFollowUser() {
    return followUser;
  }

  public void setFollowUser(Boolean followUser) {
    this.followUser = followUser;
  }


  public ActiveWidget forceCacheRefreshInterval(Boolean forceCacheRefreshInterval) {
    this.forceCacheRefreshInterval = forceCacheRefreshInterval;
    return this;
  }

  /**
   * Determines whether to force-refresh local browser cache of your translations in certain period of times, no matter if there is a new activity in the project.
   * @return forceCacheRefreshInterval
   */
  @javax.annotation.Nullable
  public Boolean getForceCacheRefreshInterval() {
    return forceCacheRefreshInterval;
  }

  public void setForceCacheRefreshInterval(Boolean forceCacheRefreshInterval) {
    this.forceCacheRefreshInterval = forceCacheRefreshInterval;
  }


  public ActiveWidget hitBackendForExisting(Boolean hitBackendForExisting) {
    this.hitBackendForExisting = hitBackendForExisting;
    return this;
  }

  /**
   * When true, Active ecosystem will collect all strings on TMS no matter if the translation is present in the cache.
   * @return hitBackendForExisting
   */
  @javax.annotation.Nullable
  public Boolean getHitBackendForExisting() {
    return hitBackendForExisting;
  }

  public void setHitBackendForExisting(Boolean hitBackendForExisting) {
    this.hitBackendForExisting = hitBackendForExisting;
  }


  public ActiveWidget id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ActiveWidget languageMappings(String languageMappings) {
    this.languageMappings = languageMappings;
    return this;
  }

  /**
   * Continuous project language mappings
   * @return languageMappings
   */
  @javax.annotation.Nullable
  public String getLanguageMappings() {
    return languageMappings;
  }

  public void setLanguageMappings(String languageMappings) {
    this.languageMappings = languageMappings;
  }


  public ActiveWidget live(Boolean live) {
    this.live = live;
    return this;
  }

  /**
   * Whether ActiveJS should be considered live in an embedded site. Use &#x60;false&#x60; if you are still testing Active. Go to your Active dashboard and follow links to your website to actually test Active.
   * @return live
   */
  @javax.annotation.Nullable
  public Boolean getLive() {
    return live;
  }

  public void setLive(Boolean live) {
    this.live = live;
  }


  public ActiveWidget modifyLinks(Boolean modifyLinks) {
    this.modifyLinks = modifyLinks;
    return this;
  }

  /**
   * We can automatically localize the same-domain URLs in your page. The way we localize the URL depends on urlMode configuration. We can either add/update the locale query parameter, or add/update the path of the URL.
   * @return modifyLinks
   */
  @javax.annotation.Nullable
  public Boolean getModifyLinks() {
    return modifyLinks;
  }

  public void setModifyLinks(Boolean modifyLinks) {
    this.modifyLinks = modifyLinks;
  }


  public ActiveWidget name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActiveWidget optimizePerPage(Boolean optimizePerPage) {
    this.optimizePerPage = optimizePerPage;
    return this;
  }

  /**
   * When true, Active ecosystem will optimize the script and data flows per page, rather than per project. This decreases the bandwidth usage per script, but makes translation publishing more complex and script serving per-page.
   * @return optimizePerPage
   */
  @javax.annotation.Nullable
  public Boolean getOptimizePerPage() {
    return optimizePerPage;
  }

  public void setOptimizePerPage(Boolean optimizePerPage) {
    this.optimizePerPage = optimizePerPage;
  }


  public ActiveWidget pages(String pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Continuous project page rules
   * @return pages
   */
  @javax.annotation.Nullable
  public String getPages() {
    return pages;
  }

  public void setPages(String pages) {
    this.pages = pages;
  }


  public ActiveWidget pathRegex(String pathRegex) {
    this.pathRegex = pathRegex;
    return this;
  }

  /**
   * Custom regex for path-type URL mode.
   * @return pathRegex
   */
  @javax.annotation.Nullable
  public String getPathRegex() {
    return pathRegex;
  }

  public void setPathRegex(String pathRegex) {
    this.pathRegex = pathRegex;
  }


  public ActiveWidget position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Options are \&quot;bottom-left\&quot;, \&quot;bottom-right\&quot;, \&quot;in-place\&quot;
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public ActiveWidget queryName(String queryName) {
    this.queryName = queryName;
    return this;
  }

  /**
   * Query parameter name to be used with query-type URL mode. Default is &#39;locale&#39;.
   * @return queryName
   */
  @javax.annotation.Nullable
  public String getQueryName() {
    return queryName;
  }

  public void setQueryName(String queryName) {
    this.queryName = queryName;
  }


  public ActiveWidget rebootOnUrlChange(Boolean rebootOnUrlChange) {
    this.rebootOnUrlChange = rebootOnUrlChange;
    return this;
  }

  /**
   * When true, Active ecosystem reboots itself when url changes.
   * @return rebootOnUrlChange
   */
  @javax.annotation.Nullable
  public Boolean getRebootOnUrlChange() {
    return rebootOnUrlChange;
  }

  public void setRebootOnUrlChange(Boolean rebootOnUrlChange) {
    this.rebootOnUrlChange = rebootOnUrlChange;
  }


  public ActiveWidget restrictedDomains(String restrictedDomains) {
    this.restrictedDomains = restrictedDomains;
    return this;
  }

  /**
   * JSON string for a list of domains that this widget&#39;s API interactions are limited to.
   * @return restrictedDomains
   */
  @javax.annotation.Nullable
  public String getRestrictedDomains() {
    return restrictedDomains;
  }

  public void setRestrictedDomains(String restrictedDomains) {
    this.restrictedDomains = restrictedDomains;
  }


  public ActiveWidget sections(String sections) {
    this.sections = sections;
    return this;
  }

  /**
   * Continuous project section rules
   * @return sections
   */
  @javax.annotation.Nullable
  public String getSections() {
    return sections;
  }

  public void setSections(String sections) {
    this.sections = sections;
  }


  public ActiveWidget testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

  /**
   * Is the Active Widget in test mode? This changes a couple behaviors in the widget to make it easier for you to test and develop your Active integration.
   * @return testMode
   */
  @javax.annotation.Nullable
  public Boolean getTestMode() {
    return testMode;
  }

  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }


  public ActiveWidget theme(String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * \\\&quot;light\\\&quot;, \\\&quot;dark\\\&quot; OR custom JSON.
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }


  public ActiveWidget token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Token that you should use when you are using this widget on your website.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public ActiveWidget urlChangeMode(String urlChangeMode) {
    this.urlChangeMode = urlChangeMode;
    return this;
  }

  /**
   * When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can do this by actually redirecting the user to the new page, or by simply changing the URL in the address bar via browser&#39;s History API. When NULL, we won&#39;t apply any URL changes.
   * @return urlChangeMode
   */
  @javax.annotation.Nullable
  public String getUrlChangeMode() {
    return urlChangeMode;
  }

  public void setUrlChangeMode(String urlChangeMode) {
    this.urlChangeMode = urlChangeMode;
  }


  public ActiveWidget urlMode(String urlMode) {
    this.urlMode = urlMode;
    return this;
  }

  /**
   * When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can either change the path of the URL to prefix it with the locale code, or we can add a query parameter to the URL. We also use this mode to detect the locale for the current page when a user directly loads a page. When NULL, locale detection from URL will be disabled (even then, if the user has selected a locale manually, and followUser is enabled, we will still automatically translate the page in user&#39;s locale.
   * @return urlMode
   */
  @javax.annotation.Nullable
  public String getUrlMode() {
    return urlMode;
  }

  public void setUrlMode(String urlMode) {
    this.urlMode = urlMode;
  }


  public ActiveWidget useCache(Boolean useCache) {
    this.useCache = useCache;
    return this;
  }

  /**
   * Should we make use of local browser cache for your visitors? We will refresh the cache when Active JS detects new activity in your project.
   * @return useCache
   */
  @javax.annotation.Nullable
  public Boolean getUseCache() {
    return useCache;
  }

  public void setUseCache(Boolean useCache) {
    this.useCache = useCache;
  }


  public ActiveWidget useDummyTranslations(Boolean useDummyTranslations) {
    this.useDummyTranslations = useDummyTranslations;
    return this;
  }

  /**
   * When enabled, we will translate your website with dummy content, rather than actually using MT/TM.
   * @return useDummyTranslations
   */
  @javax.annotation.Nullable
  public Boolean getUseDummyTranslations() {
    return useDummyTranslations;
  }

  public void setUseDummyTranslations(Boolean useDummyTranslations) {
    this.useDummyTranslations = useDummyTranslations;
  }


  public ActiveWidget variables(String variables) {
    this.variables = variables;
    return this;
  }

  /**
   * Continuous project variable definitions
   * @return variables
   */
  @javax.annotation.Nullable
  public String getVariables() {
    return variables;
  }

  public void setVariables(String variables) {
    this.variables = variables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveWidget activeWidget = (ActiveWidget) o;
    return Objects.equals(this.adminMode, activeWidget.adminMode) &&
        Objects.equals(this.allowHashInUrl, activeWidget.allowHashInUrl) &&
        Objects.equals(this.allowQueryInUrl, activeWidget.allowQueryInUrl) &&
        Objects.equals(this.autoDetectSourceLanguage, activeWidget.autoDetectSourceLanguage) &&
        Objects.equals(this.createdAt, activeWidget.createdAt) &&
        Objects.equals(this.debugMode, activeWidget.debugMode) &&
        Objects.equals(this.elements, activeWidget.elements) &&
        Objects.equals(this.followUser, activeWidget.followUser) &&
        Objects.equals(this.forceCacheRefreshInterval, activeWidget.forceCacheRefreshInterval) &&
        Objects.equals(this.hitBackendForExisting, activeWidget.hitBackendForExisting) &&
        Objects.equals(this.id, activeWidget.id) &&
        Objects.equals(this.languageMappings, activeWidget.languageMappings) &&
        Objects.equals(this.live, activeWidget.live) &&
        Objects.equals(this.modifyLinks, activeWidget.modifyLinks) &&
        Objects.equals(this.name, activeWidget.name) &&
        Objects.equals(this.optimizePerPage, activeWidget.optimizePerPage) &&
        Objects.equals(this.pages, activeWidget.pages) &&
        Objects.equals(this.pathRegex, activeWidget.pathRegex) &&
        Objects.equals(this.position, activeWidget.position) &&
        Objects.equals(this.queryName, activeWidget.queryName) &&
        Objects.equals(this.rebootOnUrlChange, activeWidget.rebootOnUrlChange) &&
        Objects.equals(this.restrictedDomains, activeWidget.restrictedDomains) &&
        Objects.equals(this.sections, activeWidget.sections) &&
        Objects.equals(this.testMode, activeWidget.testMode) &&
        Objects.equals(this.theme, activeWidget.theme) &&
        Objects.equals(this.token, activeWidget.token) &&
        Objects.equals(this.urlChangeMode, activeWidget.urlChangeMode) &&
        Objects.equals(this.urlMode, activeWidget.urlMode) &&
        Objects.equals(this.useCache, activeWidget.useCache) &&
        Objects.equals(this.useDummyTranslations, activeWidget.useDummyTranslations) &&
        Objects.equals(this.variables, activeWidget.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminMode, allowHashInUrl, allowQueryInUrl, autoDetectSourceLanguage, createdAt, debugMode, elements, followUser, forceCacheRefreshInterval, hitBackendForExisting, id, languageMappings, live, modifyLinks, name, optimizePerPage, pages, pathRegex, position, queryName, rebootOnUrlChange, restrictedDomains, sections, testMode, theme, token, urlChangeMode, urlMode, useCache, useDummyTranslations, variables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveWidget {\n");
    sb.append("    adminMode: ").append(toIndentedString(adminMode)).append("\n");
    sb.append("    allowHashInUrl: ").append(toIndentedString(allowHashInUrl)).append("\n");
    sb.append("    allowQueryInUrl: ").append(toIndentedString(allowQueryInUrl)).append("\n");
    sb.append("    autoDetectSourceLanguage: ").append(toIndentedString(autoDetectSourceLanguage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    debugMode: ").append(toIndentedString(debugMode)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    followUser: ").append(toIndentedString(followUser)).append("\n");
    sb.append("    forceCacheRefreshInterval: ").append(toIndentedString(forceCacheRefreshInterval)).append("\n");
    sb.append("    hitBackendForExisting: ").append(toIndentedString(hitBackendForExisting)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languageMappings: ").append(toIndentedString(languageMappings)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    modifyLinks: ").append(toIndentedString(modifyLinks)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optimizePerPage: ").append(toIndentedString(optimizePerPage)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    pathRegex: ").append(toIndentedString(pathRegex)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    queryName: ").append(toIndentedString(queryName)).append("\n");
    sb.append("    rebootOnUrlChange: ").append(toIndentedString(rebootOnUrlChange)).append("\n");
    sb.append("    restrictedDomains: ").append(toIndentedString(restrictedDomains)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    urlChangeMode: ").append(toIndentedString(urlChangeMode)).append("\n");
    sb.append("    urlMode: ").append(toIndentedString(urlMode)).append("\n");
    sb.append("    useCache: ").append(toIndentedString(useCache)).append("\n");
    sb.append("    useDummyTranslations: ").append(toIndentedString(useDummyTranslations)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin_mode");
    openapiFields.add("allow_hash_in_url");
    openapiFields.add("allow_query_in_url");
    openapiFields.add("auto_detect_source_language");
    openapiFields.add("created_at");
    openapiFields.add("debug_mode");
    openapiFields.add("elements");
    openapiFields.add("follow_user");
    openapiFields.add("force_cache_refresh_interval");
    openapiFields.add("hit_backend_for_existing");
    openapiFields.add("id");
    openapiFields.add("language_mappings");
    openapiFields.add("live");
    openapiFields.add("modify_links");
    openapiFields.add("name");
    openapiFields.add("optimize_per_page");
    openapiFields.add("pages");
    openapiFields.add("path_regex");
    openapiFields.add("position");
    openapiFields.add("query_name");
    openapiFields.add("reboot_on_url_change");
    openapiFields.add("restricted_domains");
    openapiFields.add("sections");
    openapiFields.add("test_mode");
    openapiFields.add("theme");
    openapiFields.add("token");
    openapiFields.add("url_change_mode");
    openapiFields.add("url_mode");
    openapiFields.add("use_cache");
    openapiFields.add("use_dummy_translations");
    openapiFields.add("variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveWidget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveWidget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveWidget is not found in the empty JSON string", ActiveWidget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveWidget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveWidget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull()) && !jsonObj.get("elements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elements").toString()));
      }
      if ((jsonObj.get("language_mappings") != null && !jsonObj.get("language_mappings").isJsonNull()) && !jsonObj.get("language_mappings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_mappings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_mappings").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) && !jsonObj.get("pages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
      if ((jsonObj.get("path_regex") != null && !jsonObj.get("path_regex").isJsonNull()) && !jsonObj.get("path_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_regex").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("query_name") != null && !jsonObj.get("query_name").isJsonNull()) && !jsonObj.get("query_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_name").toString()));
      }
      if ((jsonObj.get("restricted_domains") != null && !jsonObj.get("restricted_domains").isJsonNull()) && !jsonObj.get("restricted_domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restricted_domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restricted_domains").toString()));
      }
      if ((jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) && !jsonObj.get("sections").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sections` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sections").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("url_change_mode") != null && !jsonObj.get("url_change_mode").isJsonNull()) && !jsonObj.get("url_change_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_change_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_change_mode").toString()));
      }
      if ((jsonObj.get("url_mode") != null && !jsonObj.get("url_mode").isJsonNull()) && !jsonObj.get("url_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_mode").toString()));
      }
      if ((jsonObj.get("variables") != null && !jsonObj.get("variables").isJsonNull()) && !jsonObj.get("variables").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variables` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveWidget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveWidget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveWidget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveWidget.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveWidget>() {
           @Override
           public void write(JsonWriter out, ActiveWidget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveWidget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveWidget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveWidget
   * @throws IOException if the JSON string is invalid with respect to ActiveWidget
   */
  public static ActiveWidget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveWidget.class);
  }

  /**
   * Convert an instance of ActiveWidget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

