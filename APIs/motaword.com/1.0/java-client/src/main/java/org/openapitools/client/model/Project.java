/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ProjectLinks;
import org.openapitools.client.model.ProjectPrice;
import org.openapitools.client.model.ProjectSource;
import org.openapitools.client.model.ProjectStatus;
import org.openapitools.client.model.ProjectWordCountAnalysis;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VendorProjectPair;
import org.openapitools.client.model.VendorProjectRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Project {
  public static final String SERIALIZED_NAME_AVERAGE_SCORES = "average_scores";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SCORES)
  private Map<String, Float> averageScores = new HashMap<>();

  public static final String SERIALIZED_NAME_BUDGET_CODE = "budget_code";
  @SerializedName(SERIALIZED_NAME_BUDGET_CODE)
  private String budgetCode;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CAN_PAM_MANAGE = "can_pam_manage";
  @SerializedName(SERIALIZED_NAME_CAN_PAM_MANAGE)
  private Boolean canPamManage;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private User client;

  public static final String SERIALIZED_NAME_CM_ID = "cm_id";
  @SerializedName(SERIALIZED_NAME_CM_ID)
  private Long cmId;

  public static final String SERIALIZED_NAME_COMPLETED_ON = "completed_on";
  @SerializedName(SERIALIZED_NAME_COMPLETED_ON)
  private OffsetDateTime completedOn;

  public static final String SERIALIZED_NAME_CONTINUOUS_PROJECT_TYPE = "continuous_project_type";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_PROJECT_TYPE)
  private String continuousProjectType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Long createdAt;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Object custom;

  public static final String SERIALIZED_NAME_DELIVERY_AT = "delivery_at";
  @SerializedName(SERIALIZED_NAME_DELIVERY_AT)
  private Long deliveryAt;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_API_PROJECT = "is_api_project";
  @SerializedName(SERIALIZED_NAME_IS_API_PROJECT)
  private Boolean isApiProject;

  public static final String SERIALIZED_NAME_IS_CERTIFIED = "is_certified";
  @SerializedName(SERIALIZED_NAME_IS_CERTIFIED)
  private Boolean isCertified;

  public static final String SERIALIZED_NAME_IS_CONTINUOUS = "is_continuous";
  @SerializedName(SERIALIZED_NAME_IS_CONTINUOUS)
  private Boolean isContinuous;

  public static final String SERIALIZED_NAME_IS_MANUAL = "is_manual";
  @SerializedName(SERIALIZED_NAME_IS_MANUAL)
  private Boolean isManual;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ProjectLinks links;

  public static final String SERIALIZED_NAME_PAIRS = "pairs";
  @SerializedName(SERIALIZED_NAME_PAIRS)
  private List<VendorProjectPair> pairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIVOTED_PROJECTS = "pivoted_projects";
  @SerializedName(SERIALIZED_NAME_PIVOTED_PROJECTS)
  private List<Long> pivotedProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ProjectPrice price;

  public static final String SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT = "price_without_discount";
  @SerializedName(SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT)
  private ProjectPrice priceWithoutDiscount;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private VendorProjectRole role;

  public static final String SERIALIZED_NAME_SHOULD_SEND_CLIENT_SURVEY = "should_send_client_survey";
  @SerializedName(SERIALIZED_NAME_SHOULD_SEND_CLIENT_SURVEY)
  private Boolean shouldSendClientSurvey;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ProjectSource source;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "source_language";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private String sourceLanguage;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ProjectStatus status;

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "target_languages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_TMS_NAME = "tms_name";
  @SerializedName(SERIALIZED_NAME_TMS_NAME)
  private String tmsName;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "valid_until";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private Long validUntil;

  public static final String SERIALIZED_NAME_VENDOR_WORD_COUNT = "vendor_word_count";
  @SerializedName(SERIALIZED_NAME_VENDOR_WORD_COUNT)
  private Long vendorWordCount;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private Long wordCount;

  public static final String SERIALIZED_NAME_WORD_COUNT_ANALYSIS = "word_count_analysis";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT_ANALYSIS)
  private ProjectWordCountAnalysis wordCountAnalysis;

  public Project() {
  }

  public Project averageScores(Map<String, Float> averageScores) {
    this.averageScores = averageScores;
    return this;
  }

  public Project putAverageScoresItem(String key, Float averageScoresItem) {
    if (this.averageScores == null) {
      this.averageScores = new HashMap<>();
    }
    this.averageScores.put(key, averageScoresItem);
    return this;
  }

  /**
   * Get averageScores
   * @return averageScores
   */
  @javax.annotation.Nullable
  public Map<String, Float> getAverageScores() {
    return averageScores;
  }

  public void setAverageScores(Map<String, Float> averageScores) {
    this.averageScores = averageScores;
  }


  public Project budgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
    return this;
  }

  /**
   * Get budgetCode
   * @return budgetCode
   */
  @javax.annotation.Nullable
  public String getBudgetCode() {
    return budgetCode;
  }

  public void setBudgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
  }


  public Project callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Callback URL to notify when project status changed.
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public Project canPamManage(Boolean canPamManage) {
    this.canPamManage = canPamManage;
    return this;
  }

  /**
   * Get canPamManage
   * @return canPamManage
   */
  @javax.annotation.Nullable
  public Boolean getCanPamManage() {
    return canPamManage;
  }

  public void setCanPamManage(Boolean canPamManage) {
    this.canPamManage = canPamManage;
  }


  public Project client(User client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public User getClient() {
    return client;
  }

  public void setClient(User client) {
    this.client = client;
  }


  public Project cmId(Long cmId) {
    this.cmId = cmId;
    return this;
  }

  /**
   * Assigned admin&#39;s id
   * @return cmId
   */
  @javax.annotation.Nullable
  public Long getCmId() {
    return cmId;
  }

  public void setCmId(Long cmId) {
    this.cmId = cmId;
  }


  public Project completedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return completedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedOn() {
    return completedOn;
  }

  public void setCompletedOn(OffsetDateTime completedOn) {
    this.completedOn = completedOn;
  }


  public Project continuousProjectType(String continuousProjectType) {
    this.continuousProjectType = continuousProjectType;
    return this;
  }

  /**
   * Get continuousProjectType
   * @return continuousProjectType
   */
  @javax.annotation.Nullable
  public String getContinuousProjectType() {
    return continuousProjectType;
  }

  public void setContinuousProjectType(String continuousProjectType) {
    this.continuousProjectType = continuousProjectType;
  }


  public Project createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Unix epoch time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  public Project custom(Object custom) {
    this.custom = custom;
    return this;
  }

  /**
   * Custom data provided while creating a new project.
   * @return custom
   */
  @javax.annotation.Nullable
  public Object getCustom() {
    return custom;
  }

  public void setCustom(Object custom) {
    this.custom = custom;
  }


  public Project deliveryAt(Long deliveryAt) {
    this.deliveryAt = deliveryAt;
    return this;
  }

  /**
   * Unix epoch time
   * @return deliveryAt
   */
  @javax.annotation.Nullable
  public Long getDeliveryAt() {
    return deliveryAt;
  }

  public void setDeliveryAt(Long deliveryAt) {
    this.deliveryAt = deliveryAt;
  }


  public Project errors(List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public Project addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(List<Error> errors) {
    this.errors = errors;
  }


  public Project id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Project isApiProject(Boolean isApiProject) {
    this.isApiProject = isApiProject;
    return this;
  }

  /**
   * Get isApiProject
   * @return isApiProject
   */
  @javax.annotation.Nullable
  public Boolean getIsApiProject() {
    return isApiProject;
  }

  public void setIsApiProject(Boolean isApiProject) {
    this.isApiProject = isApiProject;
  }


  public Project isCertified(Boolean isCertified) {
    this.isCertified = isCertified;
    return this;
  }

  /**
   * Get isCertified
   * @return isCertified
   */
  @javax.annotation.Nullable
  public Boolean getIsCertified() {
    return isCertified;
  }

  public void setIsCertified(Boolean isCertified) {
    this.isCertified = isCertified;
  }


  public Project isContinuous(Boolean isContinuous) {
    this.isContinuous = isContinuous;
    return this;
  }

  /**
   * Get isContinuous
   * @return isContinuous
   */
  @javax.annotation.Nullable
  public Boolean getIsContinuous() {
    return isContinuous;
  }

  public void setIsContinuous(Boolean isContinuous) {
    this.isContinuous = isContinuous;
  }


  public Project isManual(Boolean isManual) {
    this.isManual = isManual;
    return this;
  }

  /**
   * Get isManual
   * @return isManual
   */
  @javax.annotation.Nullable
  public Boolean getIsManual() {
    return isManual;
  }

  public void setIsManual(Boolean isManual) {
    this.isManual = isManual;
  }


  public Project links(ProjectLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public ProjectLinks getLinks() {
    return links;
  }

  public void setLinks(ProjectLinks links) {
    this.links = links;
  }


  public Project pairs(List<VendorProjectPair> pairs) {
    this.pairs = pairs;
    return this;
  }

  public Project addPairsItem(VendorProjectPair pairsItem) {
    if (this.pairs == null) {
      this.pairs = new ArrayList<>();
    }
    this.pairs.add(pairsItem);
    return this;
  }

  /**
   * Currently authed vendor&#39;s available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.
   * @return pairs
   */
  @javax.annotation.Nullable
  public List<VendorProjectPair> getPairs() {
    return pairs;
  }

  public void setPairs(List<VendorProjectPair> pairs) {
    this.pairs = pairs;
  }


  public Project pivotedProjects(List<Long> pivotedProjects) {
    this.pivotedProjects = pivotedProjects;
    return this;
  }

  public Project addPivotedProjectsItem(Long pivotedProjectsItem) {
    if (this.pivotedProjects == null) {
      this.pivotedProjects = new ArrayList<>();
    }
    this.pivotedProjects.add(pivotedProjectsItem);
    return this;
  }

  /**
   * Quote IDs of pivots
   * @return pivotedProjects
   */
  @javax.annotation.Nullable
  public List<Long> getPivotedProjects() {
    return pivotedProjects;
  }

  public void setPivotedProjects(List<Long> pivotedProjects) {
    this.pivotedProjects = pivotedProjects;
  }


  public Project price(ProjectPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ProjectPrice getPrice() {
    return price;
  }

  public void setPrice(ProjectPrice price) {
    this.price = price;
  }


  public Project priceWithoutDiscount(ProjectPrice priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
    return this;
  }

  /**
   * Get priceWithoutDiscount
   * @return priceWithoutDiscount
   */
  @javax.annotation.Nullable
  public ProjectPrice getPriceWithoutDiscount() {
    return priceWithoutDiscount;
  }

  public void setPriceWithoutDiscount(ProjectPrice priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
  }


  public Project role(VendorProjectRole role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public VendorProjectRole getRole() {
    return role;
  }

  public void setRole(VendorProjectRole role) {
    this.role = role;
  }


  public Project shouldSendClientSurvey(Boolean shouldSendClientSurvey) {
    this.shouldSendClientSurvey = shouldSendClientSurvey;
    return this;
  }

  /**
   * Get shouldSendClientSurvey
   * @return shouldSendClientSurvey
   */
  @javax.annotation.Nullable
  public Boolean getShouldSendClientSurvey() {
    return shouldSendClientSurvey;
  }

  public void setShouldSendClientSurvey(Boolean shouldSendClientSurvey) {
    this.shouldSendClientSurvey = shouldSendClientSurvey;
  }


  public Project source(ProjectSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ProjectSource getSource() {
    return source;
  }

  public void setSource(ProjectSource source) {
    this.source = source;
  }


  public Project sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

  /**
   * Get sourceLanguage
   * @return sourceLanguage
   */
  @javax.annotation.Nullable
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public Project status(ProjectStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ProjectStatus getStatus() {
    return status;
  }

  public void setStatus(ProjectStatus status) {
    this.status = status;
  }


  public Project subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public Project addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public Project targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public Project addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * Get targetLanguages
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public Project tmsName(String tmsName) {
    this.tmsName = tmsName;
    return this;
  }

  /**
   * TMS project name for this MW project. Requires privileged scope.
   * @return tmsName
   */
  @javax.annotation.Nullable
  public String getTmsName() {
    return tmsName;
  }

  public void setTmsName(String tmsName) {
    this.tmsName = tmsName;
  }


  public Project validUntil(Long validUntil) {
    this.validUntil = validUntil;
    return this;
  }

  /**
   * Unix epoch time. Available only if status is &#x60;pending&#x60;.
   * @return validUntil
   */
  @javax.annotation.Nullable
  public Long getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(Long validUntil) {
    this.validUntil = validUntil;
  }


  public Project vendorWordCount(Long vendorWordCount) {
    this.vendorWordCount = vendorWordCount;
    return this;
  }

  /**
   * Get vendorWordCount
   * @return vendorWordCount
   */
  @javax.annotation.Nullable
  public Long getVendorWordCount() {
    return vendorWordCount;
  }

  public void setVendorWordCount(Long vendorWordCount) {
    this.vendorWordCount = vendorWordCount;
  }


  public Project wordCount(Long wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * Get wordCount
   * @return wordCount
   */
  @javax.annotation.Nullable
  public Long getWordCount() {
    return wordCount;
  }

  public void setWordCount(Long wordCount) {
    this.wordCount = wordCount;
  }


  public Project wordCountAnalysis(ProjectWordCountAnalysis wordCountAnalysis) {
    this.wordCountAnalysis = wordCountAnalysis;
    return this;
  }

  /**
   * Get wordCountAnalysis
   * @return wordCountAnalysis
   */
  @javax.annotation.Nullable
  public ProjectWordCountAnalysis getWordCountAnalysis() {
    return wordCountAnalysis;
  }

  public void setWordCountAnalysis(ProjectWordCountAnalysis wordCountAnalysis) {
    this.wordCountAnalysis = wordCountAnalysis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.averageScores, project.averageScores) &&
        Objects.equals(this.budgetCode, project.budgetCode) &&
        Objects.equals(this.callbackUrl, project.callbackUrl) &&
        Objects.equals(this.canPamManage, project.canPamManage) &&
        Objects.equals(this.client, project.client) &&
        Objects.equals(this.cmId, project.cmId) &&
        Objects.equals(this.completedOn, project.completedOn) &&
        Objects.equals(this.continuousProjectType, project.continuousProjectType) &&
        Objects.equals(this.createdAt, project.createdAt) &&
        Objects.equals(this.custom, project.custom) &&
        Objects.equals(this.deliveryAt, project.deliveryAt) &&
        Objects.equals(this.errors, project.errors) &&
        Objects.equals(this.id, project.id) &&
        Objects.equals(this.isApiProject, project.isApiProject) &&
        Objects.equals(this.isCertified, project.isCertified) &&
        Objects.equals(this.isContinuous, project.isContinuous) &&
        Objects.equals(this.isManual, project.isManual) &&
        Objects.equals(this.links, project.links) &&
        Objects.equals(this.pairs, project.pairs) &&
        Objects.equals(this.pivotedProjects, project.pivotedProjects) &&
        Objects.equals(this.price, project.price) &&
        Objects.equals(this.priceWithoutDiscount, project.priceWithoutDiscount) &&
        Objects.equals(this.role, project.role) &&
        Objects.equals(this.shouldSendClientSurvey, project.shouldSendClientSurvey) &&
        Objects.equals(this.source, project.source) &&
        Objects.equals(this.sourceLanguage, project.sourceLanguage) &&
        Objects.equals(this.status, project.status) &&
        Objects.equals(this.subjects, project.subjects) &&
        Objects.equals(this.targetLanguages, project.targetLanguages) &&
        Objects.equals(this.tmsName, project.tmsName) &&
        Objects.equals(this.validUntil, project.validUntil) &&
        Objects.equals(this.vendorWordCount, project.vendorWordCount) &&
        Objects.equals(this.wordCount, project.wordCount) &&
        Objects.equals(this.wordCountAnalysis, project.wordCountAnalysis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageScores, budgetCode, callbackUrl, canPamManage, client, cmId, completedOn, continuousProjectType, createdAt, custom, deliveryAt, errors, id, isApiProject, isCertified, isContinuous, isManual, links, pairs, pivotedProjects, price, priceWithoutDiscount, role, shouldSendClientSurvey, source, sourceLanguage, status, subjects, targetLanguages, tmsName, validUntil, vendorWordCount, wordCount, wordCountAnalysis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    averageScores: ").append(toIndentedString(averageScores)).append("\n");
    sb.append("    budgetCode: ").append(toIndentedString(budgetCode)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    canPamManage: ").append(toIndentedString(canPamManage)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    cmId: ").append(toIndentedString(cmId)).append("\n");
    sb.append("    completedOn: ").append(toIndentedString(completedOn)).append("\n");
    sb.append("    continuousProjectType: ").append(toIndentedString(continuousProjectType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    deliveryAt: ").append(toIndentedString(deliveryAt)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isApiProject: ").append(toIndentedString(isApiProject)).append("\n");
    sb.append("    isCertified: ").append(toIndentedString(isCertified)).append("\n");
    sb.append("    isContinuous: ").append(toIndentedString(isContinuous)).append("\n");
    sb.append("    isManual: ").append(toIndentedString(isManual)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    pairs: ").append(toIndentedString(pairs)).append("\n");
    sb.append("    pivotedProjects: ").append(toIndentedString(pivotedProjects)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceWithoutDiscount: ").append(toIndentedString(priceWithoutDiscount)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    shouldSendClientSurvey: ").append(toIndentedString(shouldSendClientSurvey)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    tmsName: ").append(toIndentedString(tmsName)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    vendorWordCount: ").append(toIndentedString(vendorWordCount)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("    wordCountAnalysis: ").append(toIndentedString(wordCountAnalysis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average_scores");
    openapiFields.add("budget_code");
    openapiFields.add("callback_url");
    openapiFields.add("can_pam_manage");
    openapiFields.add("client");
    openapiFields.add("cm_id");
    openapiFields.add("completed_on");
    openapiFields.add("continuous_project_type");
    openapiFields.add("created_at");
    openapiFields.add("custom");
    openapiFields.add("delivery_at");
    openapiFields.add("errors");
    openapiFields.add("id");
    openapiFields.add("is_api_project");
    openapiFields.add("is_certified");
    openapiFields.add("is_continuous");
    openapiFields.add("is_manual");
    openapiFields.add("links");
    openapiFields.add("pairs");
    openapiFields.add("pivoted_projects");
    openapiFields.add("price");
    openapiFields.add("price_without_discount");
    openapiFields.add("role");
    openapiFields.add("should_send_client_survey");
    openapiFields.add("source");
    openapiFields.add("source_language");
    openapiFields.add("status");
    openapiFields.add("subjects");
    openapiFields.add("target_languages");
    openapiFields.add("tms_name");
    openapiFields.add("valid_until");
    openapiFields.add("vendor_word_count");
    openapiFields.add("word_count");
    openapiFields.add("word_count_analysis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Project
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budget_code") != null && !jsonObj.get("budget_code").isJsonNull()) && !jsonObj.get("budget_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget_code").toString()));
      }
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("client"));
      }
      if ((jsonObj.get("continuous_project_type") != null && !jsonObj.get("continuous_project_type").isJsonNull()) && !jsonObj.get("continuous_project_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuous_project_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuous_project_type").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        ProjectLinks.validateJsonElement(jsonObj.get("links"));
      }
      if (jsonObj.get("pairs") != null && !jsonObj.get("pairs").isJsonNull()) {
        JsonArray jsonArraypairs = jsonObj.getAsJsonArray("pairs");
        if (jsonArraypairs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pairs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pairs` to be an array in the JSON string but got `%s`", jsonObj.get("pairs").toString()));
          }

          // validate the optional field `pairs` (array)
          for (int i = 0; i < jsonArraypairs.size(); i++) {
            VendorProjectPair.validateJsonElement(jsonArraypairs.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pivoted_projects") != null && !jsonObj.get("pivoted_projects").isJsonNull() && !jsonObj.get("pivoted_projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pivoted_projects` to be an array in the JSON string but got `%s`", jsonObj.get("pivoted_projects").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ProjectPrice.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `price_without_discount`
      if (jsonObj.get("price_without_discount") != null && !jsonObj.get("price_without_discount").isJsonNull()) {
        ProjectPrice.validateJsonElement(jsonObj.get("price_without_discount"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        VendorProjectRole.validateJsonElement(jsonObj.get("role"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ProjectSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("source_language") != null && !jsonObj.get("source_language").isJsonNull()) && !jsonObj.get("source_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_language").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ProjectStatus.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_languages") != null && !jsonObj.get("target_languages").isJsonNull() && !jsonObj.get("target_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_languages` to be an array in the JSON string but got `%s`", jsonObj.get("target_languages").toString()));
      }
      if ((jsonObj.get("tms_name") != null && !jsonObj.get("tms_name").isJsonNull()) && !jsonObj.get("tms_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tms_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tms_name").toString()));
      }
      // validate the optional field `word_count_analysis`
      if (jsonObj.get("word_count_analysis") != null && !jsonObj.get("word_count_analysis").isJsonNull()) {
        ProjectWordCountAnalysis.validateJsonElement(jsonObj.get("word_count_analysis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Project given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Project
   * @throws IOException if the JSON string is invalid with respect to Project
   */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

  /**
   * Convert an instance of Project to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

