/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectWordCountAnalysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectWordCountAnalysis {
  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private BigDecimal base;

  public static final String SERIALIZED_NAME_DUPLICATE = "duplicate";
  @SerializedName(SERIALIZED_NAME_DUPLICATE)
  private BigDecimal duplicate;

  public static final String SERIALIZED_NAME_EXCLUSION = "exclusion";
  @SerializedName(SERIALIZED_NAME_EXCLUSION)
  private BigDecimal exclusion;

  public static final String SERIALIZED_NAME_FINAL = "final";
  @SerializedName(SERIALIZED_NAME_FINAL)
  private BigDecimal _final;

  public static final String SERIALIZED_NAME_TM = "tm";
  @SerializedName(SERIALIZED_NAME_TM)
  private BigDecimal tm;

  public ProjectWordCountAnalysis() {
  }

  public ProjectWordCountAnalysis base(BigDecimal base) {
    this.base = base;
    return this;
  }

  /**
   * Get base
   * @return base
   */
  @javax.annotation.Nullable
  public BigDecimal getBase() {
    return base;
  }

  public void setBase(BigDecimal base) {
    this.base = base;
  }


  public ProjectWordCountAnalysis duplicate(BigDecimal duplicate) {
    this.duplicate = duplicate;
    return this;
  }

  /**
   * Get duplicate
   * @return duplicate
   */
  @javax.annotation.Nullable
  public BigDecimal getDuplicate() {
    return duplicate;
  }

  public void setDuplicate(BigDecimal duplicate) {
    this.duplicate = duplicate;
  }


  public ProjectWordCountAnalysis exclusion(BigDecimal exclusion) {
    this.exclusion = exclusion;
    return this;
  }

  /**
   * Get exclusion
   * @return exclusion
   */
  @javax.annotation.Nullable
  public BigDecimal getExclusion() {
    return exclusion;
  }

  public void setExclusion(BigDecimal exclusion) {
    this.exclusion = exclusion;
  }


  public ProjectWordCountAnalysis _final(BigDecimal _final) {
    this._final = _final;
    return this;
  }

  /**
   * Get _final
   * @return _final
   */
  @javax.annotation.Nullable
  public BigDecimal getFinal() {
    return _final;
  }

  public void setFinal(BigDecimal _final) {
    this._final = _final;
  }


  public ProjectWordCountAnalysis tm(BigDecimal tm) {
    this.tm = tm;
    return this;
  }

  /**
   * Get tm
   * @return tm
   */
  @javax.annotation.Nullable
  public BigDecimal getTm() {
    return tm;
  }

  public void setTm(BigDecimal tm) {
    this.tm = tm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectWordCountAnalysis projectWordCountAnalysis = (ProjectWordCountAnalysis) o;
    return Objects.equals(this.base, projectWordCountAnalysis.base) &&
        Objects.equals(this.duplicate, projectWordCountAnalysis.duplicate) &&
        Objects.equals(this.exclusion, projectWordCountAnalysis.exclusion) &&
        Objects.equals(this._final, projectWordCountAnalysis._final) &&
        Objects.equals(this.tm, projectWordCountAnalysis.tm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base, duplicate, exclusion, _final, tm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectWordCountAnalysis {\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    duplicate: ").append(toIndentedString(duplicate)).append("\n");
    sb.append("    exclusion: ").append(toIndentedString(exclusion)).append("\n");
    sb.append("    _final: ").append(toIndentedString(_final)).append("\n");
    sb.append("    tm: ").append(toIndentedString(tm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base");
    openapiFields.add("duplicate");
    openapiFields.add("exclusion");
    openapiFields.add("final");
    openapiFields.add("tm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectWordCountAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectWordCountAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectWordCountAnalysis is not found in the empty JSON string", ProjectWordCountAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectWordCountAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectWordCountAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectWordCountAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectWordCountAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectWordCountAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectWordCountAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectWordCountAnalysis>() {
           @Override
           public void write(JsonWriter out, ProjectWordCountAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectWordCountAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectWordCountAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectWordCountAnalysis
   * @throws IOException if the JSON string is invalid with respect to ProjectWordCountAnalysis
   */
  public static ProjectWordCountAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectWordCountAnalysis.class);
  }

  /**
   * Convert an instance of ProjectWordCountAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

