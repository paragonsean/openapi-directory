/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StringTranslationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StringInSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StringInSearch {
  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private Long fileId;

  public static final String SERIALIZED_NAME_INTERNAL_PROJECT_ID = "internal_project_id";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PROJECT_ID)
  private Long internalProjectId;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_SEARCH_SCORE = "search_score";
  @SerializedName(SERIALIZED_NAME_SEARCH_SCORE)
  private Float searchScore;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StringTranslationState status;

  public static final String SERIALIZED_NAME_STRING_ID = "string_id";
  @SerializedName(SERIALIZED_NAME_STRING_ID)
  private Long stringId;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<String> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_TM_NAME = "tm_name";
  @SerializedName(SERIALIZED_NAME_TM_NAME)
  private String tmName;

  /**
   * String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LOCAL_PROJECT("LOCAL_PROJECT"),
    
    IMPORTED_TM("IMPORTED_TM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public StringInSearch() {
  }

  public StringInSearch fileId(Long fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * Get fileId
   * @return fileId
   */
  @javax.annotation.Nullable
  public Long getFileId() {
    return fileId;
  }

  public void setFileId(Long fileId) {
    this.fileId = fileId;
  }


  public StringInSearch internalProjectId(Long internalProjectId) {
    this.internalProjectId = internalProjectId;
    return this;
  }

  /**
   * Get internalProjectId
   * @return internalProjectId
   */
  @javax.annotation.Nullable
  public Long getInternalProjectId() {
    return internalProjectId;
  }

  public void setInternalProjectId(Long internalProjectId) {
    this.internalProjectId = internalProjectId;
  }


  public StringInSearch lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public StringInSearch projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public StringInSearch searchScore(Float searchScore) {
    this.searchScore = searchScore;
    return this;
  }

  /**
   * Get searchScore
   * @return searchScore
   */
  @javax.annotation.Nullable
  public Float getSearchScore() {
    return searchScore;
  }

  public void setSearchScore(Float searchScore) {
    this.searchScore = searchScore;
  }


  public StringInSearch source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public StringInSearch status(StringTranslationState status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StringTranslationState getStatus() {
    return status;
  }

  public void setStatus(StringTranslationState status) {
    this.status = status;
  }


  public StringInSearch stringId(Long stringId) {
    this.stringId = stringId;
    return this;
  }

  /**
   * Get stringId
   * @return stringId
   */
  @javax.annotation.Nullable
  public Long getStringId() {
    return stringId;
  }

  public void setStringId(Long stringId) {
    this.stringId = stringId;
  }


  public StringInSearch target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public StringInSearch targets(List<String> targets) {
    this.targets = targets;
    return this;
  }

  public StringInSearch addTargetsItem(String targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List<String> getTargets() {
    return targets;
  }

  public void setTargets(List<String> targets) {
    this.targets = targets;
  }


  public StringInSearch tmName(String tmName) {
    this.tmName = tmName;
    return this;
  }

  /**
   * Get tmName
   * @return tmName
   */
  @javax.annotation.Nullable
  public String getTmName() {
    return tmName;
  }

  public void setTmName(String tmName) {
    this.tmName = tmName;
  }


  public StringInSearch type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringInSearch stringInSearch = (StringInSearch) o;
    return Objects.equals(this.fileId, stringInSearch.fileId) &&
        Objects.equals(this.internalProjectId, stringInSearch.internalProjectId) &&
        Objects.equals(this.lastUpdated, stringInSearch.lastUpdated) &&
        Objects.equals(this.projectId, stringInSearch.projectId) &&
        Objects.equals(this.searchScore, stringInSearch.searchScore) &&
        Objects.equals(this.source, stringInSearch.source) &&
        Objects.equals(this.status, stringInSearch.status) &&
        Objects.equals(this.stringId, stringInSearch.stringId) &&
        Objects.equals(this.target, stringInSearch.target) &&
        Objects.equals(this.targets, stringInSearch.targets) &&
        Objects.equals(this.tmName, stringInSearch.tmName) &&
        Objects.equals(this.type, stringInSearch.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, internalProjectId, lastUpdated, projectId, searchScore, source, status, stringId, target, targets, tmName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringInSearch {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    internalProjectId: ").append(toIndentedString(internalProjectId)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    searchScore: ").append(toIndentedString(searchScore)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stringId: ").append(toIndentedString(stringId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    tmName: ").append(toIndentedString(tmName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file_id");
    openapiFields.add("internal_project_id");
    openapiFields.add("last_updated");
    openapiFields.add("project_id");
    openapiFields.add("search_score");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("string_id");
    openapiFields.add("target");
    openapiFields.add("targets");
    openapiFields.add("tm_name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StringInSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StringInSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StringInSearch is not found in the empty JSON string", StringInSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StringInSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StringInSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StringTranslationState.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull() && !jsonObj.get("targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
      }
      if ((jsonObj.get("tm_name") != null && !jsonObj.get("tm_name").isJsonNull()) && !jsonObj.get("tm_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tm_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tm_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StringInSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StringInSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StringInSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StringInSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<StringInSearch>() {
           @Override
           public void write(JsonWriter out, StringInSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StringInSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StringInSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StringInSearch
   * @throws IOException if the JSON string is invalid with respect to StringInSearch
   */
  public static StringInSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StringInSearch.class);
  }

  /**
   * Convert an instance of StringInSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

