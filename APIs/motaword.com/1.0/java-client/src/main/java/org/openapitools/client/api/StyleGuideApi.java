/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountStyleGuideUploadRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.StyleGuide;
import org.openapitools.client.model.StyleGuideList;
import org.openapitools.client.model.StyleGuideUploadRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StyleGuideApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StyleGuideApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StyleGuideApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createStyleGuide
     * @param projectId Project ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created style guide model or a list of new style guide models </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStyleGuideCall(Long projectId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = styleGuideUploadRequest;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStyleGuideValidateBeforeCall(Long projectId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createStyleGuide(Async)");
        }

        return createStyleGuideCall(projectId, styleGuideUploadRequest, _callback);

    }

    /**
     * Upload a new style guide
     * Upload a new style guide
     * @param projectId Project ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @return StyleGuideList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created style guide model or a list of new style guide models </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public StyleGuideList createStyleGuide(Long projectId, StyleGuideUploadRequest styleGuideUploadRequest) throws ApiException {
        ApiResponse<StyleGuideList> localVarResp = createStyleGuideWithHttpInfo(projectId, styleGuideUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a new style guide
     * Upload a new style guide
     * @param projectId Project ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @return ApiResponse&lt;StyleGuideList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created style guide model or a list of new style guide models </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StyleGuideList> createStyleGuideWithHttpInfo(Long projectId, StyleGuideUploadRequest styleGuideUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createStyleGuideValidateBeforeCall(projectId, styleGuideUploadRequest, null);
        Type localVarReturnType = new TypeToken<StyleGuideList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a new style guide (asynchronously)
     * Upload a new style guide
     * @param projectId Project ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created style guide model or a list of new style guide models </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStyleGuideAsync(Long projectId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback<StyleGuideList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStyleGuideValidateBeforeCall(projectId, styleGuideUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<StyleGuideList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStyleGuide
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStyleGuideCall(Long projectId, Long styleGuideId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides/{styleGuideId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "styleGuideId" + "}", localVarApiClient.escapeString(styleGuideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStyleGuideValidateBeforeCall(Long projectId, Long styleGuideId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteStyleGuide(Async)");
        }

        // verify the required parameter 'styleGuideId' is set
        if (styleGuideId == null) {
            throw new ApiException("Missing the required parameter 'styleGuideId' when calling deleteStyleGuide(Async)");
        }

        return deleteStyleGuideCall(projectId, styleGuideId, _callback);

    }

    /**
     * Delete a style guide
     * Delete the existing style guide from the project.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteStyleGuide(Long projectId, Long styleGuideId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteStyleGuideWithHttpInfo(projectId, styleGuideId);
        return localVarResp.getData();
    }

    /**
     * Delete a style guide
     * Delete the existing style guide from the project.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteStyleGuideWithHttpInfo(Long projectId, Long styleGuideId) throws ApiException {
        okhttp3.Call localVarCall = deleteStyleGuideValidateBeforeCall(projectId, styleGuideId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a style guide (asynchronously)
     * Delete the existing style guide from the project.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStyleGuideAsync(Long projectId, Long styleGuideId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStyleGuideValidateBeforeCall(projectId, styleGuideId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadGlobalStyleGuide
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalStyleGuideCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/styleguide";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGlobalStyleGuideValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return downloadGlobalStyleGuideCall(_callback);

    }

    /**
     * Download account style guide
     * Download your account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadGlobalStyleGuide() throws ApiException {
        ApiResponse<String> localVarResp = downloadGlobalStyleGuideWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Download account style guide
     * Download your account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadGlobalStyleGuideWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = downloadGlobalStyleGuideValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download account style guide (asynchronously)
     * Download your account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalStyleGuideAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGlobalStyleGuideValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadStyleGuide
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadStyleGuideCall(Long projectId, Long styleGuideId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides/{styleGuideId}/download"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "styleGuideId" + "}", localVarApiClient.escapeString(styleGuideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadStyleGuideValidateBeforeCall(Long projectId, Long styleGuideId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling downloadStyleGuide(Async)");
        }

        // verify the required parameter 'styleGuideId' is set
        if (styleGuideId == null) {
            throw new ApiException("Missing the required parameter 'styleGuideId' when calling downloadStyleGuide(Async)");
        }

        return downloadStyleGuideCall(projectId, styleGuideId, _callback);

    }

    /**
     * Download a style guide
     * Download a previously uploaded style guide file.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadStyleGuide(Long projectId, Long styleGuideId) throws ApiException {
        ApiResponse<String> localVarResp = downloadStyleGuideWithHttpInfo(projectId, styleGuideId);
        return localVarResp.getData();
    }

    /**
     * Download a style guide
     * Download a previously uploaded style guide file.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadStyleGuideWithHttpInfo(Long projectId, Long styleGuideId) throws ApiException {
        okhttp3.Call localVarCall = downloadStyleGuideValidateBeforeCall(projectId, styleGuideId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a style guide (asynchronously)
     * Download a previously uploaded style guide file.
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadStyleGuideAsync(Long projectId, Long styleGuideId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadStyleGuideValidateBeforeCall(projectId, styleGuideId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStyleGuide
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStyleGuideCall(Long projectId, Long styleGuideId, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides/{styleGuideId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "styleGuideId" + "}", localVarApiClient.escapeString(styleGuideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStyleGuideValidateBeforeCall(Long projectId, Long styleGuideId, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStyleGuide(Async)");
        }

        // verify the required parameter 'styleGuideId' is set
        if (styleGuideId == null) {
            throw new ApiException("Missing the required parameter 'styleGuideId' when calling getStyleGuide(Async)");
        }

        return getStyleGuideCall(projectId, styleGuideId, with, _callback);

    }

    /**
     * View a style guide
     * View the details of a style guide uploaded to a project
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return StyleGuide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public StyleGuide getStyleGuide(Long projectId, Long styleGuideId, List<String> with) throws ApiException {
        ApiResponse<StyleGuide> localVarResp = getStyleGuideWithHttpInfo(projectId, styleGuideId, with);
        return localVarResp.getData();
    }

    /**
     * View a style guide
     * View the details of a style guide uploaded to a project
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;StyleGuide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StyleGuide> getStyleGuideWithHttpInfo(Long projectId, Long styleGuideId, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getStyleGuideValidateBeforeCall(projectId, styleGuideId, with, null);
        Type localVarReturnType = new TypeToken<StyleGuide>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a style guide (asynchronously)
     * View the details of a style guide uploaded to a project
     * @param projectId Project ID (required)
     * @param styleGuideId Style Guide ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style guide model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStyleGuideAsync(Long projectId, Long styleGuideId, List<String> with, final ApiCallback<StyleGuide> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStyleGuideValidateBeforeCall(projectId, styleGuideId, with, _callback);
        Type localVarReturnType = new TypeToken<StyleGuide>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStyleGuides
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of style guide models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStyleGuidesCall(Long projectId, List<String> with, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (with != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "with[]", with));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStyleGuidesValidateBeforeCall(Long projectId, List<String> with, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStyleGuides(Async)");
        }

        return getStyleGuidesCall(projectId, with, _callback);

    }

    /**
     * View style guides
     * View a list of style guides in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return StyleGuideList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of style guide models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public StyleGuideList getStyleGuides(Long projectId, List<String> with) throws ApiException {
        ApiResponse<StyleGuideList> localVarResp = getStyleGuidesWithHttpInfo(projectId, with);
        return localVarResp.getData();
    }

    /**
     * View style guides
     * View a list of style guides in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @return ApiResponse&lt;StyleGuideList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of style guide models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StyleGuideList> getStyleGuidesWithHttpInfo(Long projectId, List<String> with) throws ApiException {
        okhttp3.Call localVarCall = getStyleGuidesValidateBeforeCall(projectId, with, null);
        Type localVarReturnType = new TypeToken<StyleGuideList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View style guides (asynchronously)
     * View a list of style guides in your project.
     * @param projectId Project ID (required)
     * @param with Attach further information. Possible values &#39;preview&#39; to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]&#x3D;preview for single document/style guide calls. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of style guide models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStyleGuidesAsync(Long projectId, List<String> with, final ApiCallback<StyleGuideList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStyleGuidesValidateBeforeCall(projectId, with, _callback);
        Type localVarReturnType = new TypeToken<StyleGuideList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalStyleGuide
     * @param accountStyleGuideUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalStyleGuideCall(AccountStyleGuideUploadRequest accountStyleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountStyleGuideUploadRequest;

        // create path and map variables
        String localVarPath = "/styleguide";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalStyleGuideValidateBeforeCall(AccountStyleGuideUploadRequest accountStyleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        return updateGlobalStyleGuideCall(accountStyleGuideUploadRequest, _callback);

    }

    /**
     * Create or update the account style guide
     * Update your corporate account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param accountStyleGuideUploadRequest  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus updateGlobalStyleGuide(AccountStyleGuideUploadRequest accountStyleGuideUploadRequest) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = updateGlobalStyleGuideWithHttpInfo(accountStyleGuideUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update the account style guide
     * Update your corporate account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param accountStyleGuideUploadRequest  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> updateGlobalStyleGuideWithHttpInfo(AccountStyleGuideUploadRequest accountStyleGuideUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalStyleGuideValidateBeforeCall(accountStyleGuideUploadRequest, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update the account style guide (asynchronously)
     * Update your corporate account&#39;s global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
     * @param accountStyleGuideUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalStyleGuideAsync(AccountStyleGuideUploadRequest accountStyleGuideUploadRequest, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalStyleGuideValidateBeforeCall(accountStyleGuideUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStyleGuide
     * @param projectId Project ID (required)
     * @param styleGuideId Style guide ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated style guide model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStyleGuideCall(Long projectId, Long styleGuideId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = styleGuideUploadRequest;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/styleguides/{styleGuideId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "styleGuideId" + "}", localVarApiClient.escapeString(styleGuideId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStyleGuideValidateBeforeCall(Long projectId, Long styleGuideId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateStyleGuide(Async)");
        }

        // verify the required parameter 'styleGuideId' is set
        if (styleGuideId == null) {
            throw new ApiException("Missing the required parameter 'styleGuideId' when calling updateStyleGuide(Async)");
        }

        return updateStyleGuideCall(projectId, styleGuideId, styleGuideUploadRequest, _callback);

    }

    /**
     * Update a style guide
     * Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param styleGuideId Style guide ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @return StyleGuide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated style guide model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public StyleGuide updateStyleGuide(Long projectId, Long styleGuideId, StyleGuideUploadRequest styleGuideUploadRequest) throws ApiException {
        ApiResponse<StyleGuide> localVarResp = updateStyleGuideWithHttpInfo(projectId, styleGuideId, styleGuideUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Update a style guide
     * Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param styleGuideId Style guide ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @return ApiResponse&lt;StyleGuide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated style guide model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StyleGuide> updateStyleGuideWithHttpInfo(Long projectId, Long styleGuideId, StyleGuideUploadRequest styleGuideUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStyleGuideValidateBeforeCall(projectId, styleGuideId, styleGuideUploadRequest, null);
        Type localVarReturnType = new TypeToken<StyleGuide>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a style guide (asynchronously)
     * Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param styleGuideId Style guide ID (required)
     * @param styleGuideUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated style guide model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> StyleGuideNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedStyleGuideFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStyleGuideAsync(Long projectId, Long styleGuideId, StyleGuideUploadRequest styleGuideUploadRequest, final ApiCallback<StyleGuide> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStyleGuideValidateBeforeCall(projectId, styleGuideId, styleGuideUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<StyleGuide>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
