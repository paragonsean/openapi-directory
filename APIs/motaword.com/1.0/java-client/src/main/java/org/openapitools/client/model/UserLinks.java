/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Href;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserLinks {
  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Href self;

  public static final String SERIALIZED_NAME_LOGIN_AS = "login_as";
  @SerializedName(SERIALIZED_NAME_LOGIN_AS)
  private Href loginAs;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private Href projects;

  public static final String SERIALIZED_NAME_RESPONSIVITY = "responsivity";
  @SerializedName(SERIALIZED_NAME_RESPONSIVITY)
  private Href responsivity;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private Href stats;

  public UserLinks() {
  }

  public UserLinks self(Href self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Href getSelf() {
    return self;
  }

  public void setSelf(Href self) {
    this.self = self;
  }


  public UserLinks loginAs(Href loginAs) {
    this.loginAs = loginAs;
    return this;
  }

  /**
   * Get loginAs
   * @return loginAs
   */
  @javax.annotation.Nullable
  public Href getLoginAs() {
    return loginAs;
  }

  public void setLoginAs(Href loginAs) {
    this.loginAs = loginAs;
  }


  public UserLinks projects(Href projects) {
    this.projects = projects;
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public Href getProjects() {
    return projects;
  }

  public void setProjects(Href projects) {
    this.projects = projects;
  }


  public UserLinks responsivity(Href responsivity) {
    this.responsivity = responsivity;
    return this;
  }

  /**
   * Get responsivity
   * @return responsivity
   */
  @javax.annotation.Nullable
  public Href getResponsivity() {
    return responsivity;
  }

  public void setResponsivity(Href responsivity) {
    this.responsivity = responsivity;
  }


  public UserLinks stats(Href stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public Href getStats() {
    return stats;
  }

  public void setStats(Href stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserLinks userLinks = (UserLinks) o;
    return Objects.equals(this.self, userLinks.self) &&
        Objects.equals(this.loginAs, userLinks.loginAs) &&
        Objects.equals(this.projects, userLinks.projects) &&
        Objects.equals(this.responsivity, userLinks.responsivity) &&
        Objects.equals(this.stats, userLinks.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, loginAs, projects, responsivity, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserLinks {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    loginAs: ").append(toIndentedString(loginAs)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    responsivity: ").append(toIndentedString(responsivity)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("self");
    openapiFields.add("login_as");
    openapiFields.add("projects");
    openapiFields.add("responsivity");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserLinks is not found in the empty JSON string", UserLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `login_as`
      if (jsonObj.get("login_as") != null && !jsonObj.get("login_as").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("login_as"));
      }
      // validate the optional field `projects`
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("projects"));
      }
      // validate the optional field `responsivity`
      if (jsonObj.get("responsivity") != null && !jsonObj.get("responsivity").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("responsivity"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        Href.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<UserLinks>() {
           @Override
           public void write(JsonWriter out, UserLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserLinks
   * @throws IOException if the JSON string is invalid with respect to UserLinks
   */
  public static UserLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserLinks.class);
  }

  /**
   * Convert an instance of UserLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

