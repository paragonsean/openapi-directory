/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClientProfile;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PamMessage;
import org.openapitools.client.model.ProjectCompletionReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getClientProfileForPam
     * @param clientId Client ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client profile </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientProfileNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientProfileForPamCall(Long clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pam/profiles/client/{clientId}"
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientProfileForPamValidateBeforeCall(Long clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientProfileForPam(Async)");
        }

        return getClientProfileForPamCall(clientId, _callback);

    }

    /**
     * Get the Pam profile of a client for this client ID
     * Get the Pam  profile of a client for this client ID
     * @param clientId Client ID (required)
     * @return ClientProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client profile </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientProfileNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ClientProfile getClientProfileForPam(Long clientId) throws ApiException {
        ApiResponse<ClientProfile> localVarResp = getClientProfileForPamWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * Get the Pam profile of a client for this client ID
     * Get the Pam  profile of a client for this client ID
     * @param clientId Client ID (required)
     * @return ApiResponse&lt;ClientProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client profile </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientProfileNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientProfile> getClientProfileForPamWithHttpInfo(Long clientId) throws ApiException {
        okhttp3.Call localVarCall = getClientProfileForPamValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<ClientProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Pam profile of a client for this client ID (asynchronously)
     * Get the Pam  profile of a client for this client ID
     * @param clientId Client ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client profile </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientProfileNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientProfileForPamAsync(Long clientId, final ApiCallback<ClientProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientProfileForPamValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<ClientProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectCompletionReportForPam
     * @param projectId Quote ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project Completion Report </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCompletionReportForPamCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pam/projects/{projectId}/completion-report"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectCompletionReportForPamValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectCompletionReportForPam(Async)");
        }

        return getProjectCompletionReportForPamCall(projectId, _callback);

    }

    /**
     * Get completion report data of a project
     * Get completion report data of a project
     * @param projectId Quote ID (required)
     * @return ProjectCompletionReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project Completion Report </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ProjectCompletionReport getProjectCompletionReportForPam(Long projectId) throws ApiException {
        ApiResponse<ProjectCompletionReport> localVarResp = getProjectCompletionReportForPamWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get completion report data of a project
     * Get completion report data of a project
     * @param projectId Quote ID (required)
     * @return ApiResponse&lt;ProjectCompletionReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project Completion Report </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectCompletionReport> getProjectCompletionReportForPamWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectCompletionReportForPamValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectCompletionReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get completion report data of a project (asynchronously)
     * Get completion report data of a project
     * @param projectId Quote ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project Completion Report </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCompletionReportForPamAsync(Long projectId, final ApiCallback<ProjectCompletionReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectCompletionReportForPamValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectCompletionReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMessage
     * @param pamMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMessageCall(PamMessage pamMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pamMessage;

        // create path and map variables
        String localVarPath = "/pam/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMessageValidateBeforeCall(PamMessage pamMessage, final ApiCallback _callback) throws ApiException {
        return postMessageCall(pamMessage, _callback);

    }

    /**
     * Sends a message to chat
     * Sends a message to the channel.
     * @param pamMessage  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Parameter </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus postMessage(PamMessage pamMessage) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = postMessageWithHttpInfo(pamMessage);
        return localVarResp.getData();
    }

    /**
     * Sends a message to chat
     * Sends a message to the channel.
     * @param pamMessage  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> postMessageWithHttpInfo(PamMessage pamMessage) throws ApiException {
        okhttp3.Call localVarCall = postMessageValidateBeforeCall(pamMessage, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends a message to chat (asynchronously)
     * Sends a message to the channel.
     * @param pamMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMessageAsync(PamMessage pamMessage, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMessageValidateBeforeCall(pamMessage, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
