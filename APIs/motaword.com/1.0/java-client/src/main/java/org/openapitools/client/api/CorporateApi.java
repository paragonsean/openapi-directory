/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CorporateAccount;
import org.openapitools.client.model.PermissionList;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroup;
import org.openapitools.client.model.UserGroupList;
import org.openapitools.client.model.UserList;
import org.openapitools.client.model.UserUpdateContent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CorporateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CorporateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CorporateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAvailableCorporatePermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableCorporatePermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporate/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableCorporatePermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvailableCorporatePermissionsCall(_callback);

    }

    /**
     * View available permissions
     * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
     * @return PermissionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public PermissionList getAvailableCorporatePermissions() throws ApiException {
        ApiResponse<PermissionList> localVarResp = getAvailableCorporatePermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View available permissions
     * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
     * @return ApiResponse&lt;PermissionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionList> getAvailableCorporatePermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvailableCorporatePermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View available permissions (asynchronously)
     * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableCorporatePermissionsAsync(final ApiCallback<PermissionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableCorporatePermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableCorporatePermissionsById
     * @param corporateId Corporate ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableCorporatePermissionsByIdCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporates/{corporateId}/permissions"
            .replace("{" + "corporateId" + "}", localVarApiClient.escapeString(corporateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableCorporatePermissionsByIdValidateBeforeCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corporateId' is set
        if (corporateId == null) {
            throw new ApiException("Missing the required parameter 'corporateId' when calling getAvailableCorporatePermissionsById(Async)");
        }

        return getAvailableCorporatePermissionsByIdCall(corporateId, _callback);

    }

    /**
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * @param corporateId Corporate ID (required)
     * @return PermissionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public PermissionList getAvailableCorporatePermissionsById(Long corporateId) throws ApiException {
        ApiResponse<PermissionList> localVarResp = getAvailableCorporatePermissionsByIdWithHttpInfo(corporateId);
        return localVarResp.getData();
    }

    /**
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * @param corporateId Corporate ID (required)
     * @return ApiResponse&lt;PermissionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionList> getAvailableCorporatePermissionsByIdWithHttpInfo(Long corporateId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableCorporatePermissionsByIdValidateBeforeCall(corporateId, null);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users. (asynchronously)
     * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
     * @param corporateId Corporate ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableCorporatePermissionsByIdAsync(Long corporateId, final ApiCallback<PermissionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableCorporatePermissionsByIdValidateBeforeCall(corporateId, _callback);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCorporateCall(_callback);

    }

    /**
     * View your corporate account
     * View the details of the corporate account that your user account belongs to.
     * @return CorporateAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public CorporateAccount getCorporate() throws ApiException {
        ApiResponse<CorporateAccount> localVarResp = getCorporateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your corporate account
     * View the details of the corporate account that your user account belongs to.
     * @return ApiResponse&lt;CorporateAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CorporateAccount> getCorporateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCorporateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CorporateAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your corporate account (asynchronously)
     * View the details of the corporate account that your user account belongs to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateAsync(final ApiCallback<CorporateAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CorporateAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateById
     * @param corporateId Corporate ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateByIdCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporates/{corporateId}"
            .replace("{" + "corporateId" + "}", localVarApiClient.escapeString(corporateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateByIdValidateBeforeCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corporateId' is set
        if (corporateId == null) {
            throw new ApiException("Missing the required parameter 'corporateId' when calling getCorporateById(Async)");
        }

        return getCorporateByIdCall(corporateId, _callback);

    }

    /**
     * Get details of this corporate account
     * Get details of this corporate account
     * @param corporateId Corporate ID (required)
     * @return CorporateAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public CorporateAccount getCorporateById(Long corporateId) throws ApiException {
        ApiResponse<CorporateAccount> localVarResp = getCorporateByIdWithHttpInfo(corporateId);
        return localVarResp.getData();
    }

    /**
     * Get details of this corporate account
     * Get details of this corporate account
     * @param corporateId Corporate ID (required)
     * @return ApiResponse&lt;CorporateAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CorporateAccount> getCorporateByIdWithHttpInfo(Long corporateId) throws ApiException {
        okhttp3.Call localVarCall = getCorporateByIdValidateBeforeCall(corporateId, null);
        Type localVarReturnType = new TypeToken<CorporateAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of this corporate account (asynchronously)
     * Get details of this corporate account
     * @param corporateId Corporate ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateByIdAsync(Long corporateId, final ApiCallback<CorporateAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateByIdValidateBeforeCall(corporateId, _callback);
        Type localVarReturnType = new TypeToken<CorporateAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateUserGroups
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserGroupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporate/user-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateUserGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCorporateUserGroupsCall(_callback);

    }

    /**
     * View user groups
     * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
     * @return UserGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupList getCorporateUserGroups() throws ApiException {
        ApiResponse<UserGroupList> localVarResp = getCorporateUserGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View user groups
     * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
     * @return ApiResponse&lt;UserGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupList> getCorporateUserGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCorporateUserGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View user groups (asynchronously)
     * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserGroupsAsync(final ApiCallback<UserGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateUserGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateUserGroupsById
     * @param corporateId Corporate ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserGroupsByIdCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporates/{corporateId}/user-groups"
            .replace("{" + "corporateId" + "}", localVarApiClient.escapeString(corporateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateUserGroupsByIdValidateBeforeCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corporateId' is set
        if (corporateId == null) {
            throw new ApiException("Missing the required parameter 'corporateId' when calling getCorporateUserGroupsById(Async)");
        }

        return getCorporateUserGroupsByIdCall(corporateId, _callback);

    }

    /**
     * Get a list of user groups for this corporate account
     * Get a list of user groups for this corporate account
     * @param corporateId Corporate ID (required)
     * @return UserGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupList getCorporateUserGroupsById(Long corporateId) throws ApiException {
        ApiResponse<UserGroupList> localVarResp = getCorporateUserGroupsByIdWithHttpInfo(corporateId);
        return localVarResp.getData();
    }

    /**
     * Get a list of user groups for this corporate account
     * Get a list of user groups for this corporate account
     * @param corporateId Corporate ID (required)
     * @return ApiResponse&lt;UserGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupList> getCorporateUserGroupsByIdWithHttpInfo(Long corporateId) throws ApiException {
        okhttp3.Call localVarCall = getCorporateUserGroupsByIdValidateBeforeCall(corporateId, null);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of user groups for this corporate account (asynchronously)
     * Get a list of user groups for this corporate account
     * @param corporateId Corporate ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUserGroupsByIdAsync(Long corporateId, final ApiCallback<UserGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateUserGroupsByIdValidateBeforeCall(corporateId, _callback);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUsersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporate/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCorporateUsersCall(_callback);

    }

    /**
     * View users
     * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
     * @return UserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public UserList getCorporateUsers() throws ApiException {
        ApiResponse<UserList> localVarResp = getCorporateUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View users
     * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
     * @return ApiResponse&lt;UserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserList> getCorporateUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCorporateUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View users (asynchronously)
     * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUsersAsync(final ApiCallback<UserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporateUsersById
     * @param corporateId Corporate ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUsersByIdCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporates/{corporateId}/users"
            .replace("{" + "corporateId" + "}", localVarApiClient.escapeString(corporateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporateUsersByIdValidateBeforeCall(Long corporateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corporateId' is set
        if (corporateId == null) {
            throw new ApiException("Missing the required parameter 'corporateId' when calling getCorporateUsersById(Async)");
        }

        return getCorporateUsersByIdCall(corporateId, _callback);

    }

    /**
     * Get a list of users for this corporate account
     * Get a list of users for this corporate account
     * @param corporateId Corporate ID (required)
     * @return UserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public UserList getCorporateUsersById(Long corporateId) throws ApiException {
        ApiResponse<UserList> localVarResp = getCorporateUsersByIdWithHttpInfo(corporateId);
        return localVarResp.getData();
    }

    /**
     * Get a list of users for this corporate account
     * Get a list of users for this corporate account
     * @param corporateId Corporate ID (required)
     * @return ApiResponse&lt;UserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserList> getCorporateUsersByIdWithHttpInfo(Long corporateId) throws ApiException {
        okhttp3.Call localVarCall = getCorporateUsersByIdValidateBeforeCall(corporateId, null);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of users for this corporate account (asynchronously)
     * Get a list of users for this corporate account
     * @param corporateId Corporate ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporateUsersByIdAsync(Long corporateId, final ApiCallback<UserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporateUsersByIdValidateBeforeCall(corporateId, _callback);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorporatesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporatesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/corporates/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorporatesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCorporatesListCall(_callback);

    }

    /**
     * Get a list of corporate accounts
     * Get a list of corporate accounts
     * @return List&lt;CorporateAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account list </td><td>  -  </td></tr>
     </table>
     */
    public List<CorporateAccount> getCorporatesList() throws ApiException {
        ApiResponse<List<CorporateAccount>> localVarResp = getCorporatesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of corporate accounts
     * Get a list of corporate accounts
     * @return ApiResponse&lt;List&lt;CorporateAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CorporateAccount>> getCorporatesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCorporatesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CorporateAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of corporate accounts (asynchronously)
     * Get a list of corporate accounts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Corporate account list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorporatesListAsync(final ApiCallback<List<CorporateAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorporatesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CorporateAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCorporateUser
     * @param userUpdateContent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserCall(UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateContent;

        // create path and map variables
        String localVarPath = "/corporate/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCorporateUserValidateBeforeCall(UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userUpdateContent' is set
        if (userUpdateContent == null) {
            throw new ApiException("Missing the required parameter 'userUpdateContent' when calling saveCorporateUser(Async)");
        }

        return saveCorporateUserCall(userUpdateContent, _callback);

    }

    /**
     * Create or update a user
     * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
     * @param userUpdateContent  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated user </td><td>  -  </td></tr>
     </table>
     */
    public User saveCorporateUser(UserUpdateContent userUpdateContent) throws ApiException {
        ApiResponse<User> localVarResp = saveCorporateUserWithHttpInfo(userUpdateContent);
        return localVarResp.getData();
    }

    /**
     * Create or update a user
     * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
     * @param userUpdateContent  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> saveCorporateUserWithHttpInfo(UserUpdateContent userUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = saveCorporateUserValidateBeforeCall(userUpdateContent, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a user (asynchronously)
     * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
     * @param userUpdateContent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created or updated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserAsync(UserUpdateContent userUpdateContent, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCorporateUserValidateBeforeCall(userUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCorporateUserGroup
     * @param userGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserGroupCall(UserGroup userGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userGroup;

        // create path and map variables
        String localVarPath = "/corporate/user-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCorporateUserGroupValidateBeforeCall(UserGroup userGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGroup' is set
        if (userGroup == null) {
            throw new ApiException("Missing the required parameter 'userGroup' when calling saveCorporateUserGroup(Async)");
        }

        return saveCorporateUserGroupCall(userGroup, _callback);

    }

    /**
     * Create or update a corporate user group
     * Create or update a corporate user group
     * @param userGroup  (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup saveCorporateUserGroup(UserGroup userGroup) throws ApiException {
        ApiResponse<UserGroup> localVarResp = saveCorporateUserGroupWithHttpInfo(userGroup);
        return localVarResp.getData();
    }

    /**
     * Create or update a corporate user group
     * Create or update a corporate user group
     * @param userGroup  (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> saveCorporateUserGroupWithHttpInfo(UserGroup userGroup) throws ApiException {
        okhttp3.Call localVarCall = saveCorporateUserGroupValidateBeforeCall(userGroup, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a corporate user group (asynchronously)
     * Create or update a corporate user group
     * @param userGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserGroupAsync(UserGroup userGroup, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCorporateUserGroupValidateBeforeCall(userGroup, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCorporateUserGroupById
     * @param corporateId Corporate ID (required)
     * @param userGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserGroupByIdCall(Long corporateId, UserGroup userGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userGroup;

        // create path and map variables
        String localVarPath = "/corporates/{corporateId}/user-groups"
            .replace("{" + "corporateId" + "}", localVarApiClient.escapeString(corporateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCorporateUserGroupByIdValidateBeforeCall(Long corporateId, UserGroup userGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'corporateId' is set
        if (corporateId == null) {
            throw new ApiException("Missing the required parameter 'corporateId' when calling saveCorporateUserGroupById(Async)");
        }

        // verify the required parameter 'userGroup' is set
        if (userGroup == null) {
            throw new ApiException("Missing the required parameter 'userGroup' when calling saveCorporateUserGroupById(Async)");
        }

        return saveCorporateUserGroupByIdCall(corporateId, userGroup, _callback);

    }

    /**
     * Create or update a corporate user group for this corporate account
     * Create or update a corporate user group for this corporate account
     * @param corporateId Corporate ID (required)
     * @param userGroup  (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup saveCorporateUserGroupById(Long corporateId, UserGroup userGroup) throws ApiException {
        ApiResponse<UserGroup> localVarResp = saveCorporateUserGroupByIdWithHttpInfo(corporateId, userGroup);
        return localVarResp.getData();
    }

    /**
     * Create or update a corporate user group for this corporate account
     * Create or update a corporate user group for this corporate account
     * @param corporateId Corporate ID (required)
     * @param userGroup  (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> saveCorporateUserGroupByIdWithHttpInfo(Long corporateId, UserGroup userGroup) throws ApiException {
        okhttp3.Call localVarCall = saveCorporateUserGroupByIdValidateBeforeCall(corporateId, userGroup, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a corporate user group for this corporate account (asynchronously)
     * Create or update a corporate user group for this corporate account
     * @param corporateId Corporate ID (required)
     * @param userGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User group list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCorporateUserGroupByIdAsync(Long corporateId, UserGroup userGroup, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCorporateUserGroupByIdValidateBeforeCall(corporateId, userGroup, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
