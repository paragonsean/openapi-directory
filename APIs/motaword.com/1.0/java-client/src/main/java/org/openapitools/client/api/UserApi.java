/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActiveWidget;
import org.openapitools.client.model.ClientProjectStats;
import org.openapitools.client.model.Earnings;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FilterVendorRequest;
import org.openapitools.client.model.LocationUpdateContent;
import org.openapitools.client.model.NotificationSubscription;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PasswordUpdateContent;
import org.openapitools.client.model.PaymentInfo;
import org.openapitools.client.model.PermissionList;
import org.openapitools.client.model.PopularLanguagePairs;
import org.openapitools.client.model.ProfilePictureUpload;
import org.openapitools.client.model.ResponsivityList;
import org.openapitools.client.model.SendEmailConfirmation200Response;
import org.openapitools.client.model.SendUserEmailConfirmation200Response;
import org.openapitools.client.model.SendUserEmailConfirmation202Response;
import org.openapitools.client.model.Stats;
import org.openapitools.client.model.SuspendUserRequest;
import org.openapitools.client.model.UpdatePaymentInfo;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroupList;
import org.openapitools.client.model.UserList;
import org.openapitools.client.model.UserUpdateContent;
import org.openapitools.client.model.VendorTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for approveVendorApplication
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is approved. User is ready to work with us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveVendorApplicationCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/approve"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveVendorApplicationValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling approveVendorApplication(Async)");
        }

        return approveVendorApplicationCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is approved. User is ready to work with us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus approveVendorApplication(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = approveVendorApplicationWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is approved. User is ready to work with us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> approveVendorApplicationWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = approveVendorApplicationValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is approved. User is ready to work with us. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveVendorApplicationAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveVendorApplicationValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param notify Send a welcome email to the user (optional)
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information given for user! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(Boolean notify, User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(Boolean notify, User user, final ApiCallback _callback) throws ApiException {
        return createUserCall(notify, user, _callback);

    }

    /**
     * Create a new user
     * Create a new platform user
     * @param notify Send a welcome email to the user (optional)
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information given for user! </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(Boolean notify, User user) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(notify, user);
        return localVarResp.getData();
    }

    /**
     * Create a new user
     * Create a new platform user
     * @param notify Send a welcome email to the user (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information given for user! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(Boolean notify, User user) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(notify, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user (asynchronously)
     * Create a new platform user
     * @param notify Send a welcome email to the user (optional)
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid information given for user! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(Boolean notify, User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(notify, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delete-account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAccountCall(_callback);

    }

    /**
     * Delete your account
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteAccount() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteAccountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Delete your account
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteAccountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete your account (asynchronously)
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAccount
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccountCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/delete-account"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAccountValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserAccount(Async)");
        }

        return deleteUserAccountCall(userId, _callback);

    }

    /**
     * Delete requester account
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteUserAccount(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteUserAccountWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Delete requester account
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteUserAccountWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAccountValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete requester account (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccountAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAccountValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downgradeProofreader
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downgradeProofreaderCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/downgrade-proofreader";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downgradeProofreaderValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return downgradeProofreaderCall(_callback);

    }

    /**
     * 
     * 
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus downgradeProofreader() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = downgradeProofreaderWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> downgradeProofreaderWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = downgradeProofreaderValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downgradeProofreaderAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = downgradeProofreaderValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downgradeUserProofreader
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downgradeUserProofreaderCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/downgrade-proofreader"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downgradeUserProofreaderValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling downgradeUserProofreader(Async)");
        }

        return downgradeUserProofreaderCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus downgradeUserProofreader(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = downgradeUserProofreaderWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> downgradeUserProofreaderWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = downgradeUserProofreaderValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a translator </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downgradeUserProofreaderAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = downgradeUserProofreaderValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for freezeAccount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call freezeAccountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/freeze-account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call freezeAccountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return freezeAccountCall(_callback);

    }

    /**
     * Freeze account
     * Freeze your account temporarily, especially to stop receiving project notifications.
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus freezeAccount() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = freezeAccountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Freeze account
     * Freeze your account temporarily, especially to stop receiving project notifications.
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> freezeAccountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = freezeAccountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Freeze account (asynchronously)
     * Freeze your account temporarily, especially to stop receiving project notifications.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call freezeAccountAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = freezeAccountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for freezeUserAccount
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call freezeUserAccountCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/freeze-account"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call freezeUserAccountValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling freezeUserAccount(Async)");
        }

        return freezeUserAccountCall(userId, _callback);

    }

    /**
     * Freeze requester account for project notifications
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus freezeUserAccount(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = freezeUserAccountWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Freeze requester account for project notifications
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> freezeUserAccountWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = freezeUserAccountValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Freeze requester account for project notifications (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already frozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call freezeUserAccountAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = freezeUserAccountValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllVendorTags
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response tag list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVendorTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVendorTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllVendorTagsCall(_callback);

    }

    /**
     * Returns all vendor tags for vendors filter
     * Returns all vendor tags for vendors filter
     * @return List&lt;VendorTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response tag list </td><td>  -  </td></tr>
     </table>
     */
    public List<VendorTag> getAllVendorTags() throws ApiException {
        ApiResponse<List<VendorTag>> localVarResp = getAllVendorTagsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns all vendor tags for vendors filter
     * Returns all vendor tags for vendors filter
     * @return ApiResponse&lt;List&lt;VendorTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response tag list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VendorTag>> getAllVendorTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllVendorTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<VendorTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all vendor tags for vendors filter (asynchronously)
     * Returns all vendor tags for vendors filter
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response tag list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVendorTagsAsync(final ApiCallback<List<VendorTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVendorTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<VendorTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEarnings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEarningsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/earnings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEarningsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEarningsCall(_callback);

    }

    /**
     * View your vendor earnings
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     * @return Earnings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Earnings getEarnings() throws ApiException {
        ApiResponse<Earnings> localVarResp = getEarningsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your vendor earnings
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     * @return ApiResponse&lt;Earnings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Earnings> getEarningsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEarningsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Earnings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your vendor earnings (asynchronously)
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEarningsAsync(final ApiCallback<Earnings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEarningsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Earnings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilteredVendors
     * @param page The page number (optional)
     * @param perPage The number of items per page (optional)
     * @param orderBy The field to order the results by (optional)
     * @param order The order to sort the results by (ascending or descending) (optional)
     * @param filterVendorRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response User List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilteredVendorsCall(Integer page, Integer perPage, String orderBy, String order, FilterVendorRequest filterVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterVendorRequest;

        // create path and map variables
        String localVarPath = "/users/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredVendorsValidateBeforeCall(Integer page, Integer perPage, String orderBy, String order, FilterVendorRequest filterVendorRequest, final ApiCallback _callback) throws ApiException {
        return getFilteredVendorsCall(page, perPage, orderBy, order, filterVendorRequest, _callback);

    }

    /**
     * Filter vendors based on provided parameters
     * Get a list of vendors available for the criteria given
     * @param page The page number (optional)
     * @param perPage The number of items per page (optional)
     * @param orderBy The field to order the results by (optional)
     * @param order The order to sort the results by (ascending or descending) (optional)
     * @param filterVendorRequest  (optional)
     * @return UserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response User List </td><td>  -  </td></tr>
     </table>
     */
    public UserList getFilteredVendors(Integer page, Integer perPage, String orderBy, String order, FilterVendorRequest filterVendorRequest) throws ApiException {
        ApiResponse<UserList> localVarResp = getFilteredVendorsWithHttpInfo(page, perPage, orderBy, order, filterVendorRequest);
        return localVarResp.getData();
    }

    /**
     * Filter vendors based on provided parameters
     * Get a list of vendors available for the criteria given
     * @param page The page number (optional)
     * @param perPage The number of items per page (optional)
     * @param orderBy The field to order the results by (optional)
     * @param order The order to sort the results by (ascending or descending) (optional)
     * @param filterVendorRequest  (optional)
     * @return ApiResponse&lt;UserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response User List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserList> getFilteredVendorsWithHttpInfo(Integer page, Integer perPage, String orderBy, String order, FilterVendorRequest filterVendorRequest) throws ApiException {
        okhttp3.Call localVarCall = getFilteredVendorsValidateBeforeCall(page, perPage, orderBy, order, filterVendorRequest, null);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter vendors based on provided parameters (asynchronously)
     * Get a list of vendors available for the criteria given
     * @param page The page number (optional)
     * @param perPage The number of items per page (optional)
     * @param orderBy The field to order the results by (optional)
     * @param order The order to sort the results by (ascending or descending) (optional)
     * @param filterVendorRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response User List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilteredVendorsAsync(Integer page, Integer perPage, String orderBy, String order, FilterVendorRequest filterVendorRequest, final ApiCallback<UserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilteredVendorsValidateBeforeCall(page, perPage, orderBy, order, filterVendorRequest, _callback);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMe
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMeCall(_callback);

    }

    /**
     * View your account info
     * Get your user information, including client, corporate account and vendor account information.
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public User getMe() throws ApiException {
        ApiResponse<User> localVarResp = getMeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your account info
     * Get your user information, including client, corporate account and vendor account information.
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getMeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your account info (asynchronously)
     * Get your user information, including client, corporate account and vendor account information.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPaymentInfoCall(_callback);

    }

    /**
     * View your payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @return PaymentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public PaymentInfo getPaymentInfo() throws ApiException {
        ApiResponse<PaymentInfo> localVarResp = getPaymentInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @return ApiResponse&lt;PaymentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentInfo> getPaymentInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPaymentInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your payment and billing info (asynchronously)
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInfoAsync(final ApiCallback<PaymentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPermissionsCall(_callback);

    }

    /**
     * View your permissions
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     * @return PermissionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public PermissionList getPermissions() throws ApiException {
        ApiResponse<PermissionList> localVarResp = getPermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your permissions
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     * @return ApiResponse&lt;PermissionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionList> getPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your permissions (asynchronously)
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsAsync(final ApiCallback<PermissionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResponsivity
     * @param period Time period to calculate your responsiveness (optional, default to monthly)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponsivityCall(String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/responsivity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResponsivityValidateBeforeCall(String period, final ApiCallback _callback) throws ApiException {
        return getResponsivityCall(period, _callback);

    }

    /**
     * View your vendor responsiveness
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     * @param period Time period to calculate your responsiveness (optional, default to monthly)
     * @return ResponsivityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ResponsivityList getResponsivity(String period) throws ApiException {
        ApiResponse<ResponsivityList> localVarResp = getResponsivityWithHttpInfo(period);
        return localVarResp.getData();
    }

    /**
     * View your vendor responsiveness
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     * @param period Time period to calculate your responsiveness (optional, default to monthly)
     * @return ApiResponse&lt;ResponsivityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsivityList> getResponsivityWithHttpInfo(String period) throws ApiException {
        okhttp3.Call localVarCall = getResponsivityValidateBeforeCall(period, null);
        Type localVarReturnType = new TypeToken<ResponsivityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your vendor responsiveness (asynchronously)
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     * @param period Time period to calculate your responsiveness (optional, default to monthly)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResponsivityAsync(String period, final ApiCallback<ResponsivityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResponsivityValidateBeforeCall(period, _callback);
        Type localVarReturnType = new TypeToken<ResponsivityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client and vendor statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStatsCall(_callback);

    }

    /**
     * View your account statistics
     * View your client and vendor statistics.
     * @return Stats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client and vendor statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Stats getStats() throws ApiException {
        ApiResponse<Stats> localVarResp = getStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your account statistics
     * View your client and vendor statistics.
     * @return ApiResponse&lt;Stats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client and vendor statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stats> getStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your account statistics (asynchronously)
     * View your client and vendor statistics.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client and vendor statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsAsync(final ApiCallback<Stats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThisUserGroups
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThisUserGroupsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/user-groups"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThisUserGroupsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getThisUserGroups(Async)");
        }

        return getThisUserGroupsCall(userId, _callback);

    }

    /**
     * Returns a list of user groups that this user belongs to.
     * 
     * @param userId User ID (required)
     * @return UserGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupList getThisUserGroups(Long userId) throws ApiException {
        ApiResponse<UserGroupList> localVarResp = getThisUserGroupsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of user groups that this user belongs to.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;UserGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupList> getThisUserGroupsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getThisUserGroupsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of user groups that this user belongs to. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThisUserGroupsAsync(Long userId, final ApiCallback<UserGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThisUserGroupsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(userId, _callback);

    }

    /**
     * Get user information, including client or vendor specific info.
     * 
     * @param userId User ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(Long userId) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get user information, including client or vendor specific info.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user information, including client or vendor specific info. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User summary </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(Long userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserEarnings
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEarningsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/earnings"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserEarningsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserEarnings(Async)");
        }

        return getUserEarningsCall(userId, _callback);

    }

    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
     * 
     * @param userId User ID (required)
     * @return Earnings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Earnings getUserEarnings(Long userId) throws ApiException {
        ApiResponse<Earnings> localVarResp = getUserEarningsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;Earnings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Earnings> getUserEarningsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserEarningsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Earnings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Earnings for vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserEarningsAsync(Long userId, final ApiCallback<Earnings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserEarningsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Earnings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserGroups
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserGroupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserGroupsCall(_callback);

    }

    /**
     * View your user groups
     * View the user groups that your user account belongs to. This is typically configured by your account administator&#39;s dashboard.
     * @return UserGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupList getUserGroups() throws ApiException {
        ApiResponse<UserGroupList> localVarResp = getUserGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your user groups
     * View the user groups that your user account belongs to. This is typically configured by your account administator&#39;s dashboard.
     * @return ApiResponse&lt;UserGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupList> getUserGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your user groups (asynchronously)
     * View the user groups that your user account belongs to. This is typically configured by your account administator&#39;s dashboard.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserGroupsAsync(final ApiCallback<UserGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPaymentInfo
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPaymentInfoCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/payment"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPaymentInfoValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPaymentInfo(Async)");
        }

        return getUserPaymentInfoCall(userId, _callback);

    }

    /**
     * View user&#39;s payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @param userId User ID (required)
     * @return PaymentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public PaymentInfo getUserPaymentInfo(Long userId) throws ApiException {
        ApiResponse<PaymentInfo> localVarResp = getUserPaymentInfoWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * View user&#39;s payment and billing info
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @param userId User ID (required)
     * @return ApiResponse&lt;PaymentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentInfo> getUserPaymentInfoWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserPaymentInfoValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View user&#39;s payment and billing info (asynchronously)
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns billing and saved card information for user, and their corporate if present. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPaymentInfoAsync(Long userId, final ApiCallback<PaymentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPaymentInfoValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPermissions
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPermissionsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/permissions"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPermissionsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPermissions(Async)");
        }

        return getUserPermissionsCall(userId, _callback);

    }

    /**
     * Returns a list of permissions that this user is authorized for.
     * 
     * @param userId User ID (required)
     * @return PermissionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public PermissionList getUserPermissions(Long userId) throws ApiException {
        ApiResponse<PermissionList> localVarResp = getUserPermissionsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of permissions that this user is authorized for.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;PermissionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionList> getUserPermissionsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserPermissionsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of permissions that this user is authorized for. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of permission strings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPermissionsAsync(Long userId, final ApiCallback<PermissionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPermissionsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<PermissionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPopularPairs
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPopularPairsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/stats/popular-pairs"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPopularPairsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPopularPairs(Async)");
        }

        return getUserPopularPairsCall(userId, _callback);

    }

    /**
     * Returns the language pairs that the user has ordered most.
     * 
     * @param userId User ID (required)
     * @return PopularLanguagePairs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public PopularLanguagePairs getUserPopularPairs(Long userId) throws ApiException {
        ApiResponse<PopularLanguagePairs> localVarResp = getUserPopularPairsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns the language pairs that the user has ordered most.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;PopularLanguagePairs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PopularLanguagePairs> getUserPopularPairsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserPopularPairsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<PopularLanguagePairs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the language pairs that the user has ordered most. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPopularPairsAsync(Long userId, final ApiCallback<PopularLanguagePairs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPopularPairsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<PopularLanguagePairs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProjectStats
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProjectStatsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/stats/projects"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProjectStatsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserProjectStats(Async)");
        }

        return getUserProjectStatsCall(userId, _callback);

    }

    /**
     * Returns a user&#39;s project statistics.
     * 
     * @param userId User ID (required)
     * @return ClientProjectStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ClientProjectStats getUserProjectStats(Long userId) throws ApiException {
        ApiResponse<ClientProjectStats> localVarResp = getUserProjectStatsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns a user&#39;s project statistics.
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;ClientProjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientProjectStats> getUserProjectStatsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserProjectStatsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ClientProjectStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a user&#39;s project statistics. (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProjectStatsAsync(Long userId, final ApiCallback<ClientProjectStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProjectStatsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ClientProjectStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserResponsivity
     * @param userId User ID (required)
     * @param period Period for calcualtion. (optional, default to monthly)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserResponsivityCall(Long userId, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/responsivity"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserResponsivityValidateBeforeCall(Long userId, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserResponsivity(Async)");
        }

        return getUserResponsivityCall(userId, period, _callback);

    }

    /**
     * Returns a user&#39;s vendor responsivity stats
     * 
     * @param userId User ID (required)
     * @param period Period for calcualtion. (optional, default to monthly)
     * @return ResponsivityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ResponsivityList getUserResponsivity(Long userId, String period) throws ApiException {
        ApiResponse<ResponsivityList> localVarResp = getUserResponsivityWithHttpInfo(userId, period);
        return localVarResp.getData();
    }

    /**
     * Returns a user&#39;s vendor responsivity stats
     * 
     * @param userId User ID (required)
     * @param period Period for calcualtion. (optional, default to monthly)
     * @return ApiResponse&lt;ResponsivityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponsivityList> getUserResponsivityWithHttpInfo(Long userId, String period) throws ApiException {
        okhttp3.Call localVarCall = getUserResponsivityValidateBeforeCall(userId, period, null);
        Type localVarReturnType = new TypeToken<ResponsivityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a user&#39;s vendor responsivity stats (asynchronously)
     * 
     * @param userId User ID (required)
     * @param period Period for calcualtion. (optional, default to monthly)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor responsivity stats </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserResponsivityAsync(Long userId, String period, final ApiCallback<ResponsivityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserResponsivityValidateBeforeCall(userId, period, _callback);
        Type localVarReturnType = new TypeToken<ResponsivityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserStats
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserStatsCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/stats"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserStatsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserStats(Async)");
        }

        return getUserStatsCall(userId, _callback);

    }

    /**
     * Returns a user&#39;s client and vendor statistics. This used to be called \&quot;summary\&quot; (\\@deprecated).
     * 
     * @param userId User ID (required)
     * @return Stats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Stats getUserStats(Long userId) throws ApiException {
        ApiResponse<Stats> localVarResp = getUserStatsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Returns a user&#39;s client and vendor statistics. This used to be called \&quot;summary\&quot; (\\@deprecated).
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;Stats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stats> getUserStatsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserStatsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a user&#39;s client and vendor statistics. This used to be called \&quot;summary\&quot; (\\@deprecated). (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User stats for client and vendors </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserStatsAsync(Long userId, final ApiCallback<Stats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserStatsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param userType  (optional, default to all)
     * @param search  (optional)
     * @param email  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(Long page, Long perPage, String userType, String search, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_type", userType));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(Long page, Long perPage, String userType, String search, String email, final ApiCallback _callback) throws ApiException {
        return getUsersCall(page, perPage, userType, search, email, _callback);

    }

    /**
     * Get a list of platform users
     * Get a list of platform users
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param userType  (optional, default to all)
     * @param search  (optional)
     * @param email  (optional)
     * @return UserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public UserList getUsers(Long page, Long perPage, String userType, String search, String email) throws ApiException {
        ApiResponse<UserList> localVarResp = getUsersWithHttpInfo(page, perPage, userType, search, email);
        return localVarResp.getData();
    }

    /**
     * Get a list of platform users
     * Get a list of platform users
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param userType  (optional, default to all)
     * @param search  (optional)
     * @param email  (optional)
     * @return ApiResponse&lt;UserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserList> getUsersWithHttpInfo(Long page, Long perPage, String userType, String search, String email) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(page, perPage, userType, search, email, null);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of platform users (asynchronously)
     * Get a list of platform users
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 10)
     * @param userType  (optional, default to all)
     * @param search  (optional)
     * @param email  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(Long page, Long perPage, String userType, String search, String email, final ApiCallback<UserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(page, perPage, userType, search, email, _callback);
        Type localVarReturnType = new TypeToken<UserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logLocation
     * @param locationUpdateContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logLocationCall(LocationUpdateContent locationUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationUpdateContent;

        // create path and map variables
        String localVarPath = "/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logLocationValidateBeforeCall(LocationUpdateContent locationUpdateContent, final ApiCallback _callback) throws ApiException {
        return logLocationCall(locationUpdateContent, _callback);

    }

    /**
     * Log user&#39;s current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
     * 
     * @param locationUpdateContent  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus logLocation(LocationUpdateContent locationUpdateContent) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = logLocationWithHttpInfo(locationUpdateContent);
        return localVarResp.getData();
    }

    /**
     * Log user&#39;s current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
     * 
     * @param locationUpdateContent  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> logLocationWithHttpInfo(LocationUpdateContent locationUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = logLocationValidateBeforeCall(locationUpdateContent, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log user&#39;s current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation. (asynchronously)
     * 
     * @param locationUpdateContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logLocationAsync(LocationUpdateContent locationUpdateContent, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = logLocationValidateBeforeCall(locationUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeProofreader
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeProofreaderCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/make-proofreader";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeProofreaderValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return makeProofreaderCall(_callback);

    }

    /**
     * 
     * 
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus makeProofreader() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = makeProofreaderWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> makeProofreaderWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = makeProofreaderValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeProofreaderAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeProofreaderValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeUserProofreader
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeUserProofreaderCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/make-proofreader"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeUserProofreaderValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling makeUserProofreader(Async)");
        }

        return makeUserProofreaderCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus makeUserProofreader(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = makeUserProofreaderWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> makeUserProofreaderWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = makeUserProofreaderValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Vendor is already a proofreader </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeUserProofreaderAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeUserProofreaderValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectVendorApplication
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is rejected. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectVendorApplicationCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/reject"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectVendorApplicationValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling rejectVendorApplication(Async)");
        }

        return rejectVendorApplicationCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is rejected. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus rejectVendorApplication(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = rejectVendorApplicationWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is rejected. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> rejectVendorApplicationWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = rejectVendorApplicationValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vendor application of this user is rejected. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectVendorApplicationAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectVendorApplicationValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendEmailConfirmation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When confirmation email is sent, status is &#x60;success&#x60;, or &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailConfirmationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resend-email-confirmation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailConfirmationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sendEmailConfirmationCall(_callback);

    }

    /**
     * Sends email confirmation email for current user
     * 
     * @return SendEmailConfirmation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When confirmation email is sent, status is &#x60;success&#x60;, or &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailConfirmation200Response sendEmailConfirmation() throws ApiException {
        ApiResponse<SendEmailConfirmation200Response> localVarResp = sendEmailConfirmationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Sends email confirmation email for current user
     * 
     * @return ApiResponse&lt;SendEmailConfirmation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When confirmation email is sent, status is &#x60;success&#x60;, or &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendEmailConfirmation200Response> sendEmailConfirmationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sendEmailConfirmationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SendEmailConfirmation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends email confirmation email for current user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When confirmation email is sent, status is &#x60;success&#x60;, or &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendEmailConfirmationAsync(final ApiCallback<SendEmailConfirmation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailConfirmationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SendEmailConfirmation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPasswordReminder
     * @param email  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reminder already sent, wait for a while before new request! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPasswordReminderCall(Email email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = email;

        // create path and map variables
        String localVarPath = "/users/send-password-reminder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPasswordReminderValidateBeforeCall(Email email, final ApiCallback _callback) throws ApiException {
        return sendPasswordReminderCall(email, _callback);

    }

    /**
     * Sends password reset email to the user&#39;s registered email address
     * 
     * @param email  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reminder already sent, wait for a while before new request! </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus sendPasswordReminder(Email email) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = sendPasswordReminderWithHttpInfo(email);
        return localVarResp.getData();
    }

    /**
     * Sends password reset email to the user&#39;s registered email address
     * 
     * @param email  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reminder already sent, wait for a while before new request! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> sendPasswordReminderWithHttpInfo(Email email) throws ApiException {
        okhttp3.Call localVarCall = sendPasswordReminderValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends password reset email to the user&#39;s registered email address (asynchronously)
     * 
     * @param email  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Reminder already sent, wait for a while before new request! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPasswordReminderAsync(Email email, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPasswordReminderValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendUserEmailConfirmation
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmation email has been sent </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> status is &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendUserEmailConfirmationCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/resend-email-confirmation"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendUserEmailConfirmationValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling sendUserEmailConfirmation(Async)");
        }

        return sendUserEmailConfirmationCall(userId, _callback);

    }

    /**
     * Sends email confirmation email for a user
     * 
     * @param userId User ID (required)
     * @return SendUserEmailConfirmation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmation email has been sent </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> status is &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public SendUserEmailConfirmation200Response sendUserEmailConfirmation(Long userId) throws ApiException {
        ApiResponse<SendUserEmailConfirmation200Response> localVarResp = sendUserEmailConfirmationWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Sends email confirmation email for a user
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;SendUserEmailConfirmation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmation email has been sent </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> status is &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendUserEmailConfirmation200Response> sendUserEmailConfirmationWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = sendUserEmailConfirmationValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<SendUserEmailConfirmation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends email confirmation email for a user (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmation email has been sent </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> status is &#x60;already_confirmed&#x60; when user has already confirmed their email address. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VendorNotFound - this is not a vendor user account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendUserEmailConfirmationAsync(Long userId, final ApiCallback<SendUserEmailConfirmation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendUserEmailConfirmationValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<SendUserEmailConfirmation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeNotification
     * @param notificationSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeNotificationCall(NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSubscription;

        // create path and map variables
        String localVarPath = "/notifications/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeNotificationValidateBeforeCall(NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        return subscribeNotificationCall(notificationSubscription, _callback);

    }

    /**
     * Subscribe to push notifications
     * Subscribe to push notifications to receive project and platform notifications.
     * @param notificationSubscription  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus subscribeNotification(NotificationSubscription notificationSubscription) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = subscribeNotificationWithHttpInfo(notificationSubscription);
        return localVarResp.getData();
    }

    /**
     * Subscribe to push notifications
     * Subscribe to push notifications to receive project and platform notifications.
     * @param notificationSubscription  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> subscribeNotificationWithHttpInfo(NotificationSubscription notificationSubscription) throws ApiException {
        okhttp3.Call localVarCall = subscribeNotificationValidateBeforeCall(notificationSubscription, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to push notifications (asynchronously)
     * Subscribe to push notifications to receive project and platform notifications.
     * @param notificationSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeNotificationAsync(NotificationSubscription notificationSubscription, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeNotificationValidateBeforeCall(notificationSubscription, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeUserNotification
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeUserNotificationCall(Long userId, NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSubscription;

        // create path and map variables
        String localVarPath = "/{userId}/notifications/subscribe"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeUserNotificationValidateBeforeCall(Long userId, NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling subscribeUserNotification(Async)");
        }

        return subscribeUserNotificationCall(userId, notificationSubscription, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus subscribeUserNotification(Long userId, NotificationSubscription notificationSubscription) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = subscribeUserNotificationWithHttpInfo(userId, notificationSubscription);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> subscribeUserNotificationWithHttpInfo(Long userId, NotificationSubscription notificationSubscription) throws ApiException {
        okhttp3.Call localVarCall = subscribeUserNotificationValidateBeforeCall(userId, notificationSubscription, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to save subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeUserNotificationAsync(Long userId, NotificationSubscription notificationSubscription, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeUserNotificationValidateBeforeCall(userId, notificationSubscription, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suspendUser
     * @param userId User ID (required)
     * @param suspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suspended user account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendUserCall(Long userId, SuspendUserRequest suspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suspendUserRequest;

        // create path and map variables
        String localVarPath = "/{userId}/suspend"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendUserValidateBeforeCall(Long userId, SuspendUserRequest suspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling suspendUser(Async)");
        }

        return suspendUserCall(userId, suspendUserRequest, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param suspendUserRequest  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suspended user account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus suspendUser(Long userId, SuspendUserRequest suspendUserRequest) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = suspendUserWithHttpInfo(userId, suspendUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param suspendUserRequest  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suspended user account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> suspendUserWithHttpInfo(Long userId, SuspendUserRequest suspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = suspendUserValidateBeforeCall(userId, suspendUserRequest, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param suspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Suspended user account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suspendUserAsync(Long userId, SuspendUserRequest suspendUserRequest, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendUserValidateBeforeCall(userId, suspendUserRequest, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unfreezeAccount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfreezeAccountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unfreeze-account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfreezeAccountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return unfreezeAccountCall(_callback);

    }

    /**
     * Defreeze your account
     * Reactive your account to start receiving notifications.
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus unfreezeAccount() throws ApiException {
        ApiResponse<OperationStatus> localVarResp = unfreezeAccountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Defreeze your account
     * Reactive your account to start receiving notifications.
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> unfreezeAccountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = unfreezeAccountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Defreeze your account (asynchronously)
     * Reactive your account to start receiving notifications.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfreezeAccountAsync(final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfreezeAccountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unfreezeUserAccount
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfreezeUserAccountCall(Long userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{userId}/unfreeze-account"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unfreezeUserAccountValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unfreezeUserAccount(Async)");
        }

        return unfreezeUserAccountCall(userId, _callback);

    }

    /**
     * Unfreeze requester account for project notifications
     * 
     * @param userId User ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus unfreezeUserAccount(Long userId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = unfreezeUserAccountWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Unfreeze requester account for project notifications
     * 
     * @param userId User ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> unfreezeUserAccountWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = unfreezeUserAccountValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unfreeze requester account for project notifications (asynchronously)
     * 
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Account is already unfrozen for notifications </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unfreezeUserAccountAsync(Long userId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unfreezeUserAccountValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeNotification
     * @param notificationSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeNotificationCall(NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSubscription;

        // create path and map variables
        String localVarPath = "/notifications/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeNotificationValidateBeforeCall(NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        return unsubscribeNotificationCall(notificationSubscription, _callback);

    }

    /**
     * 
     * 
     * @param notificationSubscription  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus unsubscribeNotification(NotificationSubscription notificationSubscription) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = unsubscribeNotificationWithHttpInfo(notificationSubscription);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param notificationSubscription  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> unsubscribeNotificationWithHttpInfo(NotificationSubscription notificationSubscription) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeNotificationValidateBeforeCall(notificationSubscription, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param notificationSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeNotificationAsync(NotificationSubscription notificationSubscription, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeNotificationValidateBeforeCall(notificationSubscription, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeUserNotification
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeUserNotificationCall(Long userId, NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationSubscription;

        // create path and map variables
        String localVarPath = "/{userId}/notifications/unsubscribe"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeUserNotificationValidateBeforeCall(Long userId, NotificationSubscription notificationSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unsubscribeUserNotification(Async)");
        }

        return unsubscribeUserNotificationCall(userId, notificationSubscription, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus unsubscribeUserNotification(Long userId, NotificationSubscription notificationSubscription) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = unsubscribeUserNotificationWithHttpInfo(userId, notificationSubscription);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> unsubscribeUserNotificationWithHttpInfo(Long userId, NotificationSubscription notificationSubscription) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeUserNotificationValidateBeforeCall(userId, notificationSubscription, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param notificationSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted notification subscription information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter | Failed to delete subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeUserNotificationAsync(Long userId, NotificationSubscription notificationSubscription, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeUserNotificationValidateBeforeCall(userId, notificationSubscription, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMe
     * @param userUpdateContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UserNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeCall(UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateContent;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeValidateBeforeCall(UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        return updateMeCall(userUpdateContent, _callback);

    }

    /**
     * Update your account info
     * 
     * @param userUpdateContent  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UserNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public User updateMe(UserUpdateContent userUpdateContent) throws ApiException {
        ApiResponse<User> localVarResp = updateMeWithHttpInfo(userUpdateContent);
        return localVarResp.getData();
    }

    /**
     * Update your account info
     * 
     * @param userUpdateContent  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UserNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateMeWithHttpInfo(UserUpdateContent userUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = updateMeValidateBeforeCall(userUpdateContent, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update your account info (asynchronously)
     * 
     * @param userUpdateContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UserNotFound </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeAsync(UserUpdateContent userUpdateContent, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeValidateBeforeCall(userUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePassword
     * @param passwordUpdateContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePasswordCall(PasswordUpdateContent passwordUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordUpdateContent;

        // create path and map variables
        String localVarPath = "/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordValidateBeforeCall(PasswordUpdateContent passwordUpdateContent, final ApiCallback _callback) throws ApiException {
        return updatePasswordCall(passwordUpdateContent, _callback);

    }

    /**
     * Update your account password
     * Password should contain at least one uppercase, lowercase character and one number
     * @param passwordUpdateContent  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus updatePassword(PasswordUpdateContent passwordUpdateContent) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = updatePasswordWithHttpInfo(passwordUpdateContent);
        return localVarResp.getData();
    }

    /**
     * Update your account password
     * Password should contain at least one uppercase, lowercase character and one number
     * @param passwordUpdateContent  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> updatePasswordWithHttpInfo(PasswordUpdateContent passwordUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(passwordUpdateContent, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update your account password (asynchronously)
     * Password should contain at least one uppercase, lowercase character and one number
     * @param passwordUpdateContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePasswordAsync(PasswordUpdateContent passwordUpdateContent, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(passwordUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentInfo
     * @param updatePaymentInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentInfoCall(UpdatePaymentInfo updatePaymentInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePaymentInfo;

        // create path and map variables
        String localVarPath = "/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentInfoValidateBeforeCall(UpdatePaymentInfo updatePaymentInfo, final ApiCallback _callback) throws ApiException {
        return updatePaymentInfoCall(updatePaymentInfo, _callback);

    }

    /**
     * Update payment info
     * Update your billing and saved credit card information
     * @param updatePaymentInfo  (optional)
     * @return PaymentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public PaymentInfo updatePaymentInfo(UpdatePaymentInfo updatePaymentInfo) throws ApiException {
        ApiResponse<PaymentInfo> localVarResp = updatePaymentInfoWithHttpInfo(updatePaymentInfo);
        return localVarResp.getData();
    }

    /**
     * Update payment info
     * Update your billing and saved credit card information
     * @param updatePaymentInfo  (optional)
     * @return ApiResponse&lt;PaymentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentInfo> updatePaymentInfoWithHttpInfo(UpdatePaymentInfo updatePaymentInfo) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentInfoValidateBeforeCall(updatePaymentInfo, null);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update payment info (asynchronously)
     * Update your billing and saved credit card information
     * @param updatePaymentInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentInfoAsync(UpdatePaymentInfo updatePaymentInfo, final ApiCallback<PaymentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentInfoValidateBeforeCall(updatePaymentInfo, _callback);
        Type localVarReturnType = new TypeToken<PaymentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userId User ID (required)
     * @param userUpdateContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(Long userId, UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateContent;

        // create path and map variables
        String localVarPath = "/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(Long userId, UserUpdateContent userUpdateContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }

        return updateUserCall(userId, userUpdateContent, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param userUpdateContent  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(Long userId, UserUpdateContent userUpdateContent) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(userId, userUpdateContent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param userUpdateContent  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(Long userId, UserUpdateContent userUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateContent, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param userUpdateContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(Long userId, UserUpdateContent userUpdateContent, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserGroup
     * @param userId User ID (required)
     * @param activeWidget  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserGroupCall(Long userId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activeWidget;

        // create path and map variables
        String localVarPath = "/{userId}/user-groups"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserGroupValidateBeforeCall(Long userId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserGroup(Async)");
        }

        return updateUserGroupCall(userId, activeWidget, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param activeWidget  (optional)
     * @return UserGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameter </td><td>  -  </td></tr>
     </table>
     */
    public UserGroupList updateUserGroup(Long userId, ActiveWidget activeWidget) throws ApiException {
        ApiResponse<UserGroupList> localVarResp = updateUserGroupWithHttpInfo(userId, activeWidget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param activeWidget  (optional)
     * @return ApiResponse&lt;UserGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroupList> updateUserGroupWithHttpInfo(Long userId, ActiveWidget activeWidget) throws ApiException {
        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(userId, activeWidget, null);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param activeWidget  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of user groups </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserGroupAsync(Long userId, ActiveWidget activeWidget, final ApiCallback<UserGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(userId, activeWidget, _callback);
        Type localVarReturnType = new TypeToken<UserGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserPaymentInfo
     * @param userId User ID (required)
     * @param paymentInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPaymentInfoCall(Long userId, PaymentInfo paymentInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInfo;

        // create path and map variables
        String localVarPath = "/{userId}/payment"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserPaymentInfoValidateBeforeCall(Long userId, PaymentInfo paymentInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserPaymentInfo(Async)");
        }

        return updateUserPaymentInfoCall(userId, paymentInfo, _callback);

    }

    /**
     * Update user payment info
     * Update user&#39;s billing and saved credit card information
     * @param userId User ID (required)
     * @param paymentInfo  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus updateUserPaymentInfo(Long userId, PaymentInfo paymentInfo) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = updateUserPaymentInfoWithHttpInfo(userId, paymentInfo);
        return localVarResp.getData();
    }

    /**
     * Update user payment info
     * Update user&#39;s billing and saved credit card information
     * @param userId User ID (required)
     * @param paymentInfo  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> updateUserPaymentInfoWithHttpInfo(Long userId, PaymentInfo paymentInfo) throws ApiException {
        okhttp3.Call localVarCall = updateUserPaymentInfoValidateBeforeCall(userId, paymentInfo, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user payment info (asynchronously)
     * Update user&#39;s billing and saved credit card information
     * @param userId User ID (required)
     * @param paymentInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPaymentInfoAsync(Long userId, PaymentInfo paymentInfo, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserPaymentInfoValidateBeforeCall(userId, paymentInfo, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadProfilePicture
     * @param profilePictureUpload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProfilePictureCall(ProfilePictureUpload profilePictureUpload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profilePictureUpload;

        // create path and map variables
        String localVarPath = "/profile-picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadProfilePictureValidateBeforeCall(ProfilePictureUpload profilePictureUpload, final ApiCallback _callback) throws ApiException {
        return uploadProfilePictureCall(profilePictureUpload, _callback);

    }

    /**
     * Upload profile picture
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * @param profilePictureUpload  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus uploadProfilePicture(ProfilePictureUpload profilePictureUpload) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = uploadProfilePictureWithHttpInfo(profilePictureUpload);
        return localVarResp.getData();
    }

    /**
     * Upload profile picture
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * @param profilePictureUpload  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> uploadProfilePictureWithHttpInfo(ProfilePictureUpload profilePictureUpload) throws ApiException {
        okhttp3.Call localVarCall = uploadProfilePictureValidateBeforeCall(profilePictureUpload, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload profile picture (asynchronously)
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     * @param profilePictureUpload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email already exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProfilePictureAsync(ProfilePictureUpload profilePictureUpload, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadProfilePictureValidateBeforeCall(profilePictureUpload, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadUserProfilePicture
     * @param userId User ID (required)
     * @param profilePictureUpload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadUserProfilePictureCall(Long userId, ProfilePictureUpload profilePictureUpload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profilePictureUpload;

        // create path and map variables
        String localVarPath = "/{userId}/profile-picture"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadUserProfilePictureValidateBeforeCall(Long userId, ProfilePictureUpload profilePictureUpload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling uploadUserProfilePicture(Async)");
        }

        return uploadUserProfilePictureCall(userId, profilePictureUpload, _callback);

    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param profilePictureUpload  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus uploadUserProfilePicture(Long userId, ProfilePictureUpload profilePictureUpload) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = uploadUserProfilePictureWithHttpInfo(userId, profilePictureUpload);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId User ID (required)
     * @param profilePictureUpload  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> uploadUserProfilePictureWithHttpInfo(Long userId, ProfilePictureUpload profilePictureUpload) throws ApiException {
        okhttp3.Call localVarCall = uploadUserProfilePictureValidateBeforeCall(userId, profilePictureUpload, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId User ID (required)
     * @param profilePictureUpload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadUserProfilePictureAsync(Long userId, ProfilePictureUpload profilePictureUpload, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadUserProfilePictureValidateBeforeCall(userId, profilePictureUpload, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
