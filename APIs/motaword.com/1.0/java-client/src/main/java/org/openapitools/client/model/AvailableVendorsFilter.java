/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AvailableVendorsFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableVendorsFilter {
  public static final String SERIALIZED_NAME_CORPORATE_ID = "corporateId";
  @SerializedName(SERIALIZED_NAME_CORPORATE_ID)
  private BigDecimal corporateId;

  public static final String SERIALIZED_NAME_MANUAL_WORK_PERMISSION = "manualWorkPermission";
  @SerializedName(SERIALIZED_NAME_MANUAL_WORK_PERMISSION)
  private Boolean manualWorkPermission;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "sourceLanguage";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private String sourceLanguage;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "targetLanguages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  /**
   * Gets or Sets types
   */
  @JsonAdapter(TypesEnum.Adapter.class)
  public enum TypesEnum {
    TRANSLATOR("translator"),
    
    PROOFREADER("proofreader"),
    
    BOTH("both");

    private String value;

    TypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypesEnum fromValue(String value) {
      for (TypesEnum b : TypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<TypesEnum> types = new ArrayList<>();

  public AvailableVendorsFilter() {
  }

  public AvailableVendorsFilter corporateId(BigDecimal corporateId) {
    this.corporateId = corporateId;
    return this;
  }

  /**
   * Corporate account ID to filter for vendor authorization
   * @return corporateId
   */
  @javax.annotation.Nullable
  public BigDecimal getCorporateId() {
    return corporateId;
  }

  public void setCorporateId(BigDecimal corporateId) {
    this.corporateId = corporateId;
  }


  public AvailableVendorsFilter manualWorkPermission(Boolean manualWorkPermission) {
    this.manualWorkPermission = manualWorkPermission;
    return this;
  }

  /**
   * Filter vendors for manual work permission
   * @return manualWorkPermission
   */
  @javax.annotation.Nullable
  public Boolean getManualWorkPermission() {
    return manualWorkPermission;
  }

  public void setManualWorkPermission(Boolean manualWorkPermission) {
    this.manualWorkPermission = manualWorkPermission;
  }


  public AvailableVendorsFilter sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

  /**
   * Source language code
   * @return sourceLanguage
   */
  @javax.annotation.Nullable
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public AvailableVendorsFilter targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public AvailableVendorsFilter addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * List of target language codes.
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public AvailableVendorsFilter types(List<TypesEnum> types) {
    this.types = types;
    return this;
  }

  public AvailableVendorsFilter addTypesItem(TypesEnum typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * List of vendor types
   * @return types
   */
  @javax.annotation.Nullable
  public List<TypesEnum> getTypes() {
    return types;
  }

  public void setTypes(List<TypesEnum> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableVendorsFilter availableVendorsFilter = (AvailableVendorsFilter) o;
    return Objects.equals(this.corporateId, availableVendorsFilter.corporateId) &&
        Objects.equals(this.manualWorkPermission, availableVendorsFilter.manualWorkPermission) &&
        Objects.equals(this.sourceLanguage, availableVendorsFilter.sourceLanguage) &&
        Objects.equals(this.targetLanguages, availableVendorsFilter.targetLanguages) &&
        Objects.equals(this.types, availableVendorsFilter.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corporateId, manualWorkPermission, sourceLanguage, targetLanguages, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableVendorsFilter {\n");
    sb.append("    corporateId: ").append(toIndentedString(corporateId)).append("\n");
    sb.append("    manualWorkPermission: ").append(toIndentedString(manualWorkPermission)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corporateId");
    openapiFields.add("manualWorkPermission");
    openapiFields.add("sourceLanguage");
    openapiFields.add("targetLanguages");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableVendorsFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableVendorsFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableVendorsFilter is not found in the empty JSON string", AvailableVendorsFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableVendorsFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableVendorsFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceLanguage") != null && !jsonObj.get("sourceLanguage").isJsonNull()) && !jsonObj.get("sourceLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceLanguage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetLanguages") != null && !jsonObj.get("targetLanguages").isJsonNull() && !jsonObj.get("targetLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("targetLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableVendorsFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableVendorsFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableVendorsFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableVendorsFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableVendorsFilter>() {
           @Override
           public void write(JsonWriter out, AvailableVendorsFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableVendorsFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableVendorsFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableVendorsFilter
   * @throws IOException if the JSON string is invalid with respect to AvailableVendorsFilter
   */
  public static AvailableVendorsFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableVendorsFilter.class);
  }

  /**
   * Convert an instance of AvailableVendorsFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

