/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectPayment {
  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_BUDGET_CODE = "budget_code";
  @SerializedName(SERIALIZED_NAME_BUDGET_CODE)
  private String budgetCode;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private Long cardId;

  public static final String SERIALIZED_NAME_PAYMENT_CODE = "payment_code";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CODE)
  private String paymentCode;

  /**
   * Optional. Determines which method to use for payment. &#x60;client&#x60;, &#x60;app&#x60;, &#x60;corporate_card&#x60; methods require a credit card ID. &#x60;credit&#x60; method requires Stripe token and bin. &#x60;corporate&#x60; method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate&#39;s primary card.
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    CORPORATE("corporate"),
    
    CLIENT("client"),
    
    APP("app"),
    
    CREDIT("credit"),
    
    CORPORATE_CARD("corporate_card");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_STRIPE_TOKEN = "stripe_token";
  @SerializedName(SERIALIZED_NAME_STRIPE_TOKEN)
  private String stripeToken;

  public ProjectPayment() {
  }

  public ProjectPayment bin(String bin) {
    this.bin = bin;
    return this;
  }

  /**
   * Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.
   * @return bin
   */
  @javax.annotation.Nullable
  public String getBin() {
    return bin;
  }

  public void setBin(String bin) {
    this.bin = bin;
  }


  public ProjectPayment budgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
    return this;
  }

  /**
   * Optional with corporate accounts. Not available for others.
   * @return budgetCode
   */
  @javax.annotation.Nullable
  public String getBudgetCode() {
    return budgetCode;
  }

  public void setBudgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
  }


  public ProjectPayment cardId(Long cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * Optional. &#x60;client&#x60;, &#x60;app&#x60;, &#x60;corporate_card&#x60; methods require a credit card ID. &#x60;credit&#x60; method requires Stripe token and bin.
   * @return cardId
   */
  @javax.annotation.Nullable
  public Long getCardId() {
    return cardId;
  }

  public void setCardId(Long cardId) {
    this.cardId = cardId;
  }


  public ProjectPayment paymentCode(String paymentCode) {
    this.paymentCode = paymentCode;
    return this;
  }

  /**
   * Optional. &#x60;corporate&#x60; payment method requires this.s
   * @return paymentCode
   */
  @javax.annotation.Nullable
  public String getPaymentCode() {
    return paymentCode;
  }

  public void setPaymentCode(String paymentCode) {
    this.paymentCode = paymentCode;
  }


  public ProjectPayment paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Optional. Determines which method to use for payment. &#x60;client&#x60;, &#x60;app&#x60;, &#x60;corporate_card&#x60; methods require a credit card ID. &#x60;credit&#x60; method requires Stripe token and bin. &#x60;corporate&#x60; method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate&#39;s primary card.
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public ProjectPayment stripeToken(String stripeToken) {
    this.stripeToken = stripeToken;
    return this;
  }

  /**
   * This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with &#x60;stripe_token&#x60;, you must also provide &#x60;bin&#x60;, last 4 digits of the card.
   * @return stripeToken
   */
  @javax.annotation.Nullable
  public String getStripeToken() {
    return stripeToken;
  }

  public void setStripeToken(String stripeToken) {
    this.stripeToken = stripeToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectPayment projectPayment = (ProjectPayment) o;
    return Objects.equals(this.bin, projectPayment.bin) &&
        Objects.equals(this.budgetCode, projectPayment.budgetCode) &&
        Objects.equals(this.cardId, projectPayment.cardId) &&
        Objects.equals(this.paymentCode, projectPayment.paymentCode) &&
        Objects.equals(this.paymentMethod, projectPayment.paymentMethod) &&
        Objects.equals(this.stripeToken, projectPayment.stripeToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bin, budgetCode, cardId, paymentCode, paymentMethod, stripeToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectPayment {\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    budgetCode: ").append(toIndentedString(budgetCode)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    paymentCode: ").append(toIndentedString(paymentCode)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    stripeToken: ").append(toIndentedString(stripeToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin");
    openapiFields.add("budget_code");
    openapiFields.add("card_id");
    openapiFields.add("payment_code");
    openapiFields.add("payment_method");
    openapiFields.add("stripe_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectPayment is not found in the empty JSON string", ProjectPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("budget_code") != null && !jsonObj.get("budget_code").isJsonNull()) && !jsonObj.get("budget_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget_code").toString()));
      }
      if ((jsonObj.get("payment_code") != null && !jsonObj.get("payment_code").isJsonNull()) && !jsonObj.get("payment_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_code").toString()));
      }
      if ((jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      // validate the optional field `payment_method`
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("payment_method"));
      }
      if ((jsonObj.get("stripe_token") != null && !jsonObj.get("stripe_token").isJsonNull()) && !jsonObj.get("stripe_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectPayment>() {
           @Override
           public void write(JsonWriter out, ProjectPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectPayment
   * @throws IOException if the JSON string is invalid with respect to ProjectPayment
   */
  public static ProjectPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectPayment.class);
  }

  /**
   * Convert an instance of ProjectPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

