/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActiveWidget;
import org.openapitools.client.model.ActiveWidgetList;
import org.openapitools.client.model.AddOrUpdateDocumentRequest;
import org.openapitools.client.model.AnalyticsCollection;
import org.openapitools.client.model.AnalyticsToken;
import org.openapitools.client.model.ContinuousProject;
import org.openapitools.client.model.ContinuousProjectDocument;
import org.openapitools.client.model.ContinuousProjectDocumentList;
import org.openapitools.client.model.ContinuousProjectDocumentProgressBody;
import org.openapitools.client.model.ContinuousProjectInvoices;
import org.openapitools.client.model.ContinuousProjectProgress;
import org.openapitools.client.model.ContinuousProjectUpdateContent;
import org.openapitools.client.model.ContinuousProjectsList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetQuotesForDocumentsBody;
import org.openapitools.client.model.GetQuotesForLanguagesBody;
import org.openapitools.client.model.InstantTranslationRequest;
import org.openapitools.client.model.InstantTranslationResult;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.Progress;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.Subscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContinuousProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContinuousProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContinuousProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDocument
     * @param projectId Continuous project ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDocumentCall(Long projectId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addOrUpdateDocumentRequest;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDocumentValidateBeforeCall(Long projectId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addDocument(Async)");
        }

        return addDocumentCall(projectId, addOrUpdateDocumentRequest, _callback);

    }

    /**
     * Add a new document to your continuous project
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @return ContinuousProjectDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectDocument addDocument(Long projectId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest) throws ApiException {
        ApiResponse<ContinuousProjectDocument> localVarResp = addDocumentWithHttpInfo(projectId, addOrUpdateDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new document to your continuous project
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @return ApiResponse&lt;ContinuousProjectDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectDocument> addDocumentWithHttpInfo(Long projectId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = addDocumentValidateBeforeCall(projectId, addOrUpdateDocumentRequest, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new document to your continuous project (asynchronously)
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly added continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDocumentAsync(Long projectId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback<ContinuousProjectDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDocumentValidateBeforeCall(projectId, addOrUpdateDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectAnalytics
     * @param id Continuous project ID (required)
     * @param analyticsCollection  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analytics data collection result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectAnalyticsCall(Long id, AnalyticsCollection analyticsCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsCollection;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/collect-analytics"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectAnalyticsValidateBeforeCall(Long id, AnalyticsCollection analyticsCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling collectAnalytics(Async)");
        }

        return collectAnalyticsCall(id, analyticsCollection, _callback);

    }

    /**
     * Save/collect analytics data from Active widget
     * Save/collect analytics data from Active widget
     * @param id Continuous project ID (required)
     * @param analyticsCollection  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analytics data collection result </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus collectAnalytics(Long id, AnalyticsCollection analyticsCollection) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = collectAnalyticsWithHttpInfo(id, analyticsCollection);
        return localVarResp.getData();
    }

    /**
     * Save/collect analytics data from Active widget
     * Save/collect analytics data from Active widget
     * @param id Continuous project ID (required)
     * @param analyticsCollection  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analytics data collection result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> collectAnalyticsWithHttpInfo(Long id, AnalyticsCollection analyticsCollection) throws ApiException {
        okhttp3.Call localVarCall = collectAnalyticsValidateBeforeCall(id, analyticsCollection, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save/collect analytics data from Active widget (asynchronously)
     * Save/collect analytics data from Active widget
     * @param id Continuous project ID (required)
     * @param analyticsCollection  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Analytics data collection result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectAnalyticsAsync(Long id, AnalyticsCollection analyticsCollection, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectAnalyticsValidateBeforeCall(id, analyticsCollection, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for complete
     * @param id Continuous project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/complete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling complete(Async)");
        }

        return completeCall(id, _callback);

    }

    /**
     * Complete continuous project
     * Complete continuous project
     * @param id Continuous project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus complete(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = completeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Complete continuous project
     * Complete continuous project
     * @param id Continuous project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> completeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = completeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete continuous project (asynchronously)
     * Complete continuous project
     * @param id Continuous project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeContinuousDocument
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound FileNotFound DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeContinuousDocumentCall(Long id, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/documents/{documentId}/complete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeContinuousDocumentValidateBeforeCall(Long id, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling completeContinuousDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling completeContinuousDocument(Async)");
        }

        return completeContinuousDocumentCall(id, documentId, _callback);

    }

    /**
     * Complete a continuous project document
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound FileNotFound DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus completeContinuousDocument(Long id, Long documentId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = completeContinuousDocumentWithHttpInfo(id, documentId);
        return localVarResp.getData();
    }

    /**
     * Complete a continuous project document
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound FileNotFound DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> completeContinuousDocumentWithHttpInfo(Long id, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = completeContinuousDocumentValidateBeforeCall(id, documentId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete a continuous project document (asynchronously)
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound FileNotFound DocumentNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeContinuousDocumentAsync(Long id, Long documentId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeContinuousDocumentValidateBeforeCall(id, documentId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeLanguage
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeLanguageCall(Long id, String targetLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/languages/{targetLanguage}/complete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "targetLanguage" + "}", localVarApiClient.escapeString(targetLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeLanguageValidateBeforeCall(Long id, String targetLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling completeLanguage(Async)");
        }

        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling completeLanguage(Async)");
        }

        return completeLanguageCall(id, targetLanguage, _callback);

    }

    /**
     * Complete continuous project language
     * Complete continuous project language
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus completeLanguage(Long id, String targetLanguage) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = completeLanguageWithHttpInfo(id, targetLanguage);
        return localVarResp.getData();
    }

    /**
     * Complete continuous project language
     * Complete continuous project language
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> completeLanguageWithHttpInfo(Long id, String targetLanguage) throws ApiException {
        okhttp3.Call localVarCall = completeLanguageValidateBeforeCall(id, targetLanguage, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete continuous project language (asynchronously)
     * Complete continuous project language
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeLanguageAsync(Long id, String targetLanguage, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeLanguageValidateBeforeCall(id, targetLanguage, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createActiveWidget
     * @param projectId Continuous project ID (required)
     * @param activeWidget  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createActiveWidgetCall(Long projectId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activeWidget;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createActiveWidgetValidateBeforeCall(Long projectId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createActiveWidget(Async)");
        }

        return createActiveWidgetCall(projectId, activeWidget, _callback);

    }

    /**
     * Create a new Active widget
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     * @param projectId Continuous project ID (required)
     * @param activeWidget  (optional)
     * @return ActiveWidget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ActiveWidget createActiveWidget(Long projectId, ActiveWidget activeWidget) throws ApiException {
        ApiResponse<ActiveWidget> localVarResp = createActiveWidgetWithHttpInfo(projectId, activeWidget);
        return localVarResp.getData();
    }

    /**
     * Create a new Active widget
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     * @param projectId Continuous project ID (required)
     * @param activeWidget  (optional)
     * @return ApiResponse&lt;ActiveWidget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveWidget> createActiveWidgetWithHttpInfo(Long projectId, ActiveWidget activeWidget) throws ApiException {
        okhttp3.Call localVarCall = createActiveWidgetValidateBeforeCall(projectId, activeWidget, null);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Active widget (asynchronously)
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     * @param projectId Continuous project ID (required)
     * @param activeWidget  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createActiveWidgetAsync(Long projectId, ActiveWidget activeWidget, final ApiCallback<ActiveWidget> _callback) throws ApiException {

        okhttp3.Call localVarCall = createActiveWidgetValidateBeforeCall(projectId, activeWidget, _callback);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createContinuousProject
     * @param continuousProject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContinuousProjectCall(ContinuousProject continuousProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = continuousProject;

        // create path and map variables
        String localVarPath = "/continuous_projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContinuousProjectValidateBeforeCall(ContinuousProject continuousProject, final ApiCallback _callback) throws ApiException {
        return createContinuousProjectCall(continuousProject, _callback);

    }

    /**
     * Create a continuous project
     * Create a new continuous project for your software, website, CI/CD translation needs.
     * @param continuousProject  (optional)
     * @return ContinuousProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProject createContinuousProject(ContinuousProject continuousProject) throws ApiException {
        ApiResponse<ContinuousProject> localVarResp = createContinuousProjectWithHttpInfo(continuousProject);
        return localVarResp.getData();
    }

    /**
     * Create a continuous project
     * Create a new continuous project for your software, website, CI/CD translation needs.
     * @param continuousProject  (optional)
     * @return ApiResponse&lt;ContinuousProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProject> createContinuousProjectWithHttpInfo(ContinuousProject continuousProject) throws ApiException {
        okhttp3.Call localVarCall = createContinuousProjectValidateBeforeCall(continuousProject, null);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a continuous project (asynchronously)
     * Create a new continuous project for your software, website, CI/CD translation needs.
     * @param continuousProject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContinuousProjectAsync(ContinuousProject continuousProject, final ApiCallback<ContinuousProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContinuousProjectValidateBeforeCall(continuousProject, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubscription
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscription;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSubscription(Async)");
        }

        // verify the required parameter 'subscription' is set
        if (subscription == null) {
            throw new ApiException("Missing the required parameter 'subscription' when calling createSubscription(Async)");
        }

        return createSubscriptionCall(id, subscription, _callback);

    }

    /**
     * Create subscription for continuous project
     * Create subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Subscription createSubscription(Long id, Subscription subscription) throws ApiException {
        ApiResponse<Subscription> localVarResp = createSubscriptionWithHttpInfo(id, subscription);
        return localVarResp.getData();
    }

    /**
     * Create subscription for continuous project
     * Create subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> createSubscriptionWithHttpInfo(Long id, Subscription subscription) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(id, subscription, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create subscription for continuous project (asynchronously)
     * Create subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionAsync(Long id, Subscription subscription, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(id, subscription, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteActiveWidget
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete operation result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActiveWidgetCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets/{widgetId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "widgetId" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteActiveWidgetValidateBeforeCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteActiveWidget(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling deleteActiveWidget(Async)");
        }

        return deleteActiveWidgetCall(projectId, widgetId, _callback);

    }

    /**
     * Delete a single widget for this Active project
     * Delete a single widget for this Active project
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete operation result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteActiveWidget(Long projectId, Long widgetId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteActiveWidgetWithHttpInfo(projectId, widgetId);
        return localVarResp.getData();
    }

    /**
     * Delete a single widget for this Active project
     * Delete a single widget for this Active project
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete operation result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteActiveWidgetWithHttpInfo(Long projectId, Long widgetId) throws ApiException {
        okhttp3.Call localVarCall = deleteActiveWidgetValidateBeforeCall(projectId, widgetId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a single widget for this Active project (asynchronously)
     * Delete a single widget for this Active project
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete operation result </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActiveWidgetAsync(Long projectId, Long widgetId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteActiveWidgetValidateBeforeCall(projectId, widgetId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteContinuousProject
     * @param id Continuous project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Continuous project deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContinuousProjectCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContinuousProjectValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContinuousProject(Async)");
        }

        return deleteContinuousProjectCall(id, _callback);

    }

    /**
     * Delete a continuous project
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     * @param id Continuous project ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Continuous project deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteContinuousProject(Long id) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteContinuousProjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a continuous project
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     * @param id Continuous project ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Continuous project deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteContinuousProjectWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteContinuousProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a continuous project (asynchronously)
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     * @param id Continuous project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Continuous project deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteContinuousProjectAsync(Long id, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContinuousProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscription
     * @param id Continuous project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(id, _callback);

    }

    /**
     * Delete subscription for continuous project
     * Delete subscription for continuous project
     * @param id Continuous project ID (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Subscription deleteSubscription(Long id) throws ApiException {
        ApiResponse<Subscription> localVarResp = deleteSubscriptionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete subscription for continuous project
     * Delete subscription for continuous project
     * @param id Continuous project ID (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> deleteSubscriptionWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete subscription for continuous project (asynchronously)
     * Delete subscription for continuous project
     * @param id Continuous project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionAsync(Long id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveWidget
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Active widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWidgetCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets/{widgetId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "widgetId" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveWidgetValidateBeforeCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getActiveWidget(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling getActiveWidget(Async)");
        }

        return getActiveWidgetCall(projectId, widgetId, _callback);

    }

    /**
     * View an Active widget
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return ActiveWidget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Active widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ActiveWidget getActiveWidget(Long projectId, Long widgetId) throws ApiException {
        ApiResponse<ActiveWidget> localVarResp = getActiveWidgetWithHttpInfo(projectId, widgetId);
        return localVarResp.getData();
    }

    /**
     * View an Active widget
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return ApiResponse&lt;ActiveWidget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Active widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveWidget> getActiveWidgetWithHttpInfo(Long projectId, Long widgetId) throws ApiException {
        okhttp3.Call localVarCall = getActiveWidgetValidateBeforeCall(projectId, widgetId, null);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View an Active widget (asynchronously)
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Active widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWidgetAsync(Long projectId, Long widgetId, final ApiCallback<ActiveWidget> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveWidgetValidateBeforeCall(projectId, widgetId, _callback);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveWidgets
     * @param projectId Continuous Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of widgets </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWidgetsCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveWidgetsValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getActiveWidgets(Async)");
        }

        return getActiveWidgetsCall(projectId, _callback);

    }

    /**
     * View Active widgets
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @return ActiveWidgetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of widgets </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ActiveWidgetList getActiveWidgets(Long projectId) throws ApiException {
        ApiResponse<ActiveWidgetList> localVarResp = getActiveWidgetsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * View Active widgets
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @return ApiResponse&lt;ActiveWidgetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of widgets </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveWidgetList> getActiveWidgetsWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getActiveWidgetsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ActiveWidgetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View Active widgets (asynchronously)
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     * @param projectId Continuous Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of widgets </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWidgetsAsync(Long projectId, final ApiCallback<ActiveWidgetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveWidgetsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ActiveWidgetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsToken
     * @param id Continuous project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JWT token result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsTokenCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/analytics-token"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsTokenValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnalyticsToken(Async)");
        }

        return getAnalyticsTokenCall(id, _callback);

    }

    /**
     * Get JWT token to be used in analytics dashboards
     * Get JWT token to be used in analytics dashboards
     * @param id Continuous project ID (required)
     * @return AnalyticsToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JWT token result </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsToken getAnalyticsToken(Long id) throws ApiException {
        ApiResponse<AnalyticsToken> localVarResp = getAnalyticsTokenWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get JWT token to be used in analytics dashboards
     * Get JWT token to be used in analytics dashboards
     * @param id Continuous project ID (required)
     * @return ApiResponse&lt;AnalyticsToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JWT token result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsToken> getAnalyticsTokenWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsTokenValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AnalyticsToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JWT token to be used in analytics dashboards (asynchronously)
     * Get JWT token to be used in analytics dashboards
     * @param id Continuous project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JWT token result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsTokenAsync(Long id, final ApiCallback<AnalyticsToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsTokenValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProject
     * @param id Continuous Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContinuousProject model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContinuousProject(Async)");
        }

        return getContinuousProjectCall(id, _callback);

    }

    /**
     * View a continuous project
     * View the details of a continuous project.
     * @param id Continuous Project ID (required)
     * @return ContinuousProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContinuousProject model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProject getContinuousProject(Long id) throws ApiException {
        ApiResponse<ContinuousProject> localVarResp = getContinuousProjectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * View a continuous project
     * View the details of a continuous project.
     * @param id Continuous Project ID (required)
     * @return ApiResponse&lt;ContinuousProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContinuousProject model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProject> getContinuousProjectWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a continuous project (asynchronously)
     * View the details of a continuous project.
     * @param id Continuous Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ContinuousProject model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectAsync(Long id, final ApiCallback<ContinuousProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectDocument
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/{documentId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectDocumentValidateBeforeCall(Long projectId, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getContinuousProjectDocument(Async)");
        }

        return getContinuousProjectDocumentCall(projectId, documentId, _callback);

    }

    /**
     * View a continuous document
     * View the details of a source document in continuous translation project.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @return ContinuousProjectDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectDocument getContinuousProjectDocument(Long projectId, Long documentId) throws ApiException {
        ApiResponse<ContinuousProjectDocument> localVarResp = getContinuousProjectDocumentWithHttpInfo(projectId, documentId);
        return localVarResp.getData();
    }

    /**
     * View a continuous document
     * View the details of a source document in continuous translation project.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @return ApiResponse&lt;ContinuousProjectDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectDocument> getContinuousProjectDocumentWithHttpInfo(Long projectId, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectDocumentValidateBeforeCall(projectId, documentId, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a continuous document (asynchronously)
     * View the details of a source document in continuous translation project.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentAsync(Long projectId, Long documentId, final ApiCallback<ContinuousProjectDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectDocumentValidateBeforeCall(projectId, documentId, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectDocumentProgress
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param filterByLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentProgressCall(Long projectId, Long documentId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/{documentId}/progress"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterByLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterByLanguage", filterByLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectDocumentProgressValidateBeforeCall(Long projectId, Long documentId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectDocumentProgress(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getContinuousProjectDocumentProgress(Async)");
        }

        return getContinuousProjectDocumentProgressCall(projectId, documentId, filterByLanguage, _callback);

    }

    /**
     * Monitor progress of a continuous document
     * Monitor the translation progress of a document in a continuous project in real-time.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param filterByLanguage  (optional)
     * @return Progress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Progress getContinuousProjectDocumentProgress(Long projectId, Long documentId, String filterByLanguage) throws ApiException {
        ApiResponse<Progress> localVarResp = getContinuousProjectDocumentProgressWithHttpInfo(projectId, documentId, filterByLanguage);
        return localVarResp.getData();
    }

    /**
     * Monitor progress of a continuous document
     * Monitor the translation progress of a document in a continuous project in real-time.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param filterByLanguage  (optional)
     * @return ApiResponse&lt;Progress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Progress> getContinuousProjectDocumentProgressWithHttpInfo(Long projectId, Long documentId, String filterByLanguage) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectDocumentProgressValidateBeforeCall(projectId, documentId, filterByLanguage, null);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Monitor progress of a continuous document (asynchronously)
     * Monitor the translation progress of a document in a continuous project in real-time.
     * @param projectId Continuous project ID (required)
     * @param documentId Document ID/Name (required)
     * @param filterByLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentProgressAsync(Long projectId, Long documentId, String filterByLanguage, final ApiCallback<Progress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectDocumentProgressValidateBeforeCall(projectId, documentId, filterByLanguage, _callback);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectDocuments
     * @param projectId Continuous Project ID (required)
     * @param filterByLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of continuous project document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentsCall(Long projectId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterByLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterByLanguage", filterByLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectDocumentsValidateBeforeCall(Long projectId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectDocuments(Async)");
        }

        return getContinuousProjectDocumentsCall(projectId, filterByLanguage, _callback);

    }

    /**
     * View continuous documents
     * View the documents under this continuous project
     * @param projectId Continuous Project ID (required)
     * @param filterByLanguage  (optional)
     * @return ContinuousProjectDocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of continuous project document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectDocumentList getContinuousProjectDocuments(Long projectId, String filterByLanguage) throws ApiException {
        ApiResponse<ContinuousProjectDocumentList> localVarResp = getContinuousProjectDocumentsWithHttpInfo(projectId, filterByLanguage);
        return localVarResp.getData();
    }

    /**
     * View continuous documents
     * View the documents under this continuous project
     * @param projectId Continuous Project ID (required)
     * @param filterByLanguage  (optional)
     * @return ApiResponse&lt;ContinuousProjectDocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of continuous project document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectDocumentList> getContinuousProjectDocumentsWithHttpInfo(Long projectId, String filterByLanguage) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectDocumentsValidateBeforeCall(projectId, filterByLanguage, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View continuous documents (asynchronously)
     * View the documents under this continuous project
     * @param projectId Continuous Project ID (required)
     * @param filterByLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of continuous project document models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectDocumentsAsync(Long projectId, String filterByLanguage, final ApiCallback<ContinuousProjectDocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectDocumentsValidateBeforeCall(projectId, filterByLanguage, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectInvoices
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices List </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectInvoicesCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/invoices"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectInvoicesValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectInvoices(Async)");
        }

        return getContinuousProjectInvoicesCall(projectId, _callback);

    }

    /**
     * Invoices of a continuous project
     * Get real-time access to a continuous project&#39;s invoices.
     * @param projectId Project ID (required)
     * @return ContinuousProjectInvoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices List </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectInvoices getContinuousProjectInvoices(Long projectId) throws ApiException {
        ApiResponse<ContinuousProjectInvoices> localVarResp = getContinuousProjectInvoicesWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Invoices of a continuous project
     * Get real-time access to a continuous project&#39;s invoices.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;ContinuousProjectInvoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices List </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectInvoices> getContinuousProjectInvoicesWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectInvoicesValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectInvoices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invoices of a continuous project (asynchronously)
     * Get real-time access to a continuous project&#39;s invoices.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invoices List </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectInvoicesAsync(Long projectId, final ApiCallback<ContinuousProjectInvoices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectInvoicesValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectInvoices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjectProgress
     * @param projectId Project ID (required)
     * @param filterByLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectProgressCall(Long projectId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/progress"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterByLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterByLanguage", filterByLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectProgressValidateBeforeCall(Long projectId, String filterByLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContinuousProjectProgress(Async)");
        }

        return getContinuousProjectProgressCall(projectId, filterByLanguage, _callback);

    }

    /**
     * Monitor progress and status of a continous project
     * Monitor the translation progress of an ongoing continuous project in real-time.
     * @param projectId Project ID (required)
     * @param filterByLanguage  (optional)
     * @return ContinuousProjectProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectProgress getContinuousProjectProgress(Long projectId, String filterByLanguage) throws ApiException {
        ApiResponse<ContinuousProjectProgress> localVarResp = getContinuousProjectProgressWithHttpInfo(projectId, filterByLanguage);
        return localVarResp.getData();
    }

    /**
     * Monitor progress and status of a continous project
     * Monitor the translation progress of an ongoing continuous project in real-time.
     * @param projectId Project ID (required)
     * @param filterByLanguage  (optional)
     * @return ApiResponse&lt;ContinuousProjectProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectProgress> getContinuousProjectProgressWithHttpInfo(Long projectId, String filterByLanguage) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectProgressValidateBeforeCall(projectId, filterByLanguage, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectProgress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Monitor progress and status of a continous project (asynchronously)
     * Monitor the translation progress of an ongoing continuous project in real-time.
     * @param projectId Project ID (required)
     * @param filterByLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectProgressAsync(Long projectId, String filterByLanguage, final ApiCallback<ContinuousProjectProgress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectProgressValidateBeforeCall(projectId, filterByLanguage, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectProgress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinuousProjects
     * @param type Type of continuous project. (optional, default to active)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectsCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinuousProjectsValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return getContinuousProjectsCall(type, _callback);

    }

    /**
     * View continuous projects
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     * @param type Type of continuous project. (optional, default to active)
     * @return ContinuousProjectsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectsList getContinuousProjects(String type) throws ApiException {
        ApiResponse<ContinuousProjectsList> localVarResp = getContinuousProjectsWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * View continuous projects
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     * @param type Type of continuous project. (optional, default to active)
     * @return ApiResponse&lt;ContinuousProjectsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectsList> getContinuousProjectsWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getContinuousProjectsValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View continuous projects (asynchronously)
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     * @param type Type of continuous project. (optional, default to active)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created continuous project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinuousProjectsAsync(String type, final ApiCallback<ContinuousProjectsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinuousProjectsValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteForDocument
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForDocumentCall(Long id, Long documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/documents/{documentId}/quote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteForDocumentValidateBeforeCall(Long id, Long documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuoteForDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getQuoteForDocument(Async)");
        }

        return getQuoteForDocumentCall(id, documentId, _callback);

    }

    /**
     * Get a quote for a continuous project document
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getQuoteForDocument(Long id, Long documentId) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getQuoteForDocumentWithHttpInfo(id, documentId);
        return localVarResp.getData();
    }

    /**
     * Get a quote for a continuous project document
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getQuoteForDocumentWithHttpInfo(Long id, Long documentId) throws ApiException {
        okhttp3.Call localVarCall = getQuoteForDocumentValidateBeforeCall(id, documentId, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a quote for a continuous project document (asynchronously)
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     * @param id Continuous project ID (required)
     * @param documentId Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForDocumentAsync(Long id, Long documentId, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteForDocumentValidateBeforeCall(id, documentId, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteForDocuments
     * @param id Continuous project ID (required)
     * @param getQuotesForDocumentsBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForDocumentsCall(Long id, GetQuotesForDocumentsBody getQuotesForDocumentsBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getQuotesForDocumentsBody;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/documents/quote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteForDocumentsValidateBeforeCall(Long id, GetQuotesForDocumentsBody getQuotesForDocumentsBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuoteForDocuments(Async)");
        }

        return getQuoteForDocumentsCall(id, getQuotesForDocumentsBody, _callback);

    }

    /**
     * Get quote for documents
     * Get a new quote for provided documents in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForDocumentsBody  (optional)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getQuoteForDocuments(Long id, GetQuotesForDocumentsBody getQuotesForDocumentsBody) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getQuoteForDocumentsWithHttpInfo(id, getQuotesForDocumentsBody);
        return localVarResp.getData();
    }

    /**
     * Get quote for documents
     * Get a new quote for provided documents in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForDocumentsBody  (optional)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getQuoteForDocumentsWithHttpInfo(Long id, GetQuotesForDocumentsBody getQuotesForDocumentsBody) throws ApiException {
        okhttp3.Call localVarCall = getQuoteForDocumentsValidateBeforeCall(id, getQuotesForDocumentsBody, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get quote for documents (asynchronously)
     * Get a new quote for provided documents in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForDocumentsBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForDocumentsAsync(Long id, GetQuotesForDocumentsBody getQuotesForDocumentsBody, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteForDocumentsValidateBeforeCall(id, getQuotesForDocumentsBody, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteForLanguage
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForLanguageCall(Long id, String targetLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/languages/{targetLanguage}/quote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "targetLanguage" + "}", localVarApiClient.escapeString(targetLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteForLanguageValidateBeforeCall(Long id, String targetLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuoteForLanguage(Async)");
        }

        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling getQuoteForLanguage(Async)");
        }

        return getQuoteForLanguageCall(id, targetLanguage, _callback);

    }

    /**
     * Get quote for language
     * Get a new quote for provided target language in continuous project
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getQuoteForLanguage(Long id, String targetLanguage) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getQuoteForLanguageWithHttpInfo(id, targetLanguage);
        return localVarResp.getData();
    }

    /**
     * Get quote for language
     * Get a new quote for provided target language in continuous project
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getQuoteForLanguageWithHttpInfo(Long id, String targetLanguage) throws ApiException {
        okhttp3.Call localVarCall = getQuoteForLanguageValidateBeforeCall(id, targetLanguage, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get quote for language (asynchronously)
     * Get a new quote for provided target language in continuous project
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to complete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project(s) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForLanguageAsync(Long id, String targetLanguage, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteForLanguageValidateBeforeCall(id, targetLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteForLanguages
     * @param id Continuous project ID (required)
     * @param getQuotesForLanguagesBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForLanguagesCall(Long id, GetQuotesForLanguagesBody getQuotesForLanguagesBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getQuotesForLanguagesBody;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/languages/quote"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteForLanguagesValidateBeforeCall(Long id, GetQuotesForLanguagesBody getQuotesForLanguagesBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuoteForLanguages(Async)");
        }

        return getQuoteForLanguagesCall(id, getQuotesForLanguagesBody, _callback);

    }

    /**
     * Get quote for languages
     * Get a new quote for provided target languages in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForLanguagesBody  (optional)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getQuoteForLanguages(Long id, GetQuotesForLanguagesBody getQuotesForLanguagesBody) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getQuoteForLanguagesWithHttpInfo(id, getQuotesForLanguagesBody);
        return localVarResp.getData();
    }

    /**
     * Get quote for languages
     * Get a new quote for provided target languages in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForLanguagesBody  (optional)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getQuoteForLanguagesWithHttpInfo(Long id, GetQuotesForLanguagesBody getQuotesForLanguagesBody) throws ApiException {
        okhttp3.Call localVarCall = getQuoteForLanguagesValidateBeforeCall(id, getQuotesForLanguagesBody, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get quote for languages (asynchronously)
     * Get a new quote for provided target languages in continuous project
     * @param id Continuous project ID (required)
     * @param getQuotesForLanguagesBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall FileWasAlreadyUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ProjectInsertFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteForLanguagesAsync(Long id, GetQuotesForLanguagesBody getQuotesForLanguagesBody, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteForLanguagesValidateBeforeCall(id, getQuotesForLanguagesBody, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscription
     * @param id Continuous project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubscription(Async)");
        }

        return getSubscriptionCall(id, _callback);

    }

    /**
     * Get subscription for continuous project
     * Get subscription for continuous project
     * @param id Continuous project ID (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Subscription getSubscription(Long id) throws ApiException {
        ApiResponse<Subscription> localVarResp = getSubscriptionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get subscription for continuous project
     * Get subscription for continuous project
     * @param id Continuous project ID (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> getSubscriptionWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subscription for continuous project (asynchronously)
     * Get subscription for continuous project
     * @param id Continuous project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionAsync(Long id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postContinuousProjectDocumentProgress
     * @param projectId Continuous project ID (required)
     * @param continuousProjectDocumentProgressBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContinuousProjectDocumentProgressCall(Long projectId, ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = continuousProjectDocumentProgressBody;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/progress"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContinuousProjectDocumentProgressValidateBeforeCall(Long projectId, ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postContinuousProjectDocumentProgress(Async)");
        }

        return postContinuousProjectDocumentProgressCall(projectId, continuousProjectDocumentProgressBody, _callback);

    }

    /**
     * Get continuous project document progress for multiple IDs
     * Get continuous project document progress for multiple IDs
     * @param projectId Continuous project ID (required)
     * @param continuousProjectDocumentProgressBody  (optional)
     * @return Progress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Progress postContinuousProjectDocumentProgress(Long projectId, ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody) throws ApiException {
        ApiResponse<Progress> localVarResp = postContinuousProjectDocumentProgressWithHttpInfo(projectId, continuousProjectDocumentProgressBody);
        return localVarResp.getData();
    }

    /**
     * Get continuous project document progress for multiple IDs
     * Get continuous project document progress for multiple IDs
     * @param projectId Continuous project ID (required)
     * @param continuousProjectDocumentProgressBody  (optional)
     * @return ApiResponse&lt;Progress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Progress> postContinuousProjectDocumentProgressWithHttpInfo(Long projectId, ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody) throws ApiException {
        okhttp3.Call localVarCall = postContinuousProjectDocumentProgressValidateBeforeCall(projectId, continuousProjectDocumentProgressBody, null);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get continuous project document progress for multiple IDs (asynchronously)
     * Get continuous project document progress for multiple IDs
     * @param projectId Continuous project ID (required)
     * @param continuousProjectDocumentProgressBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Progress information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContinuousProjectDocumentProgressAsync(Long projectId, ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody, final ApiCallback<Progress> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContinuousProjectDocumentProgressValidateBeforeCall(projectId, continuousProjectDocumentProgressBody, _callback);
        Type localVarReturnType = new TypeToken<Progress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetActiveWidgetToken
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetActiveWidgetTokenCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets/{widgetId}/reset-token"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "widgetId" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetActiveWidgetTokenValidateBeforeCall(Long projectId, Long widgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling resetActiveWidgetToken(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling resetActiveWidgetToken(Async)");
        }

        return resetActiveWidgetTokenCall(projectId, widgetId, _callback);

    }

    /**
     * Reset Active widget token
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return ActiveWidget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ActiveWidget resetActiveWidgetToken(Long projectId, Long widgetId) throws ApiException {
        ApiResponse<ActiveWidget> localVarResp = resetActiveWidgetTokenWithHttpInfo(projectId, widgetId);
        return localVarResp.getData();
    }

    /**
     * Reset Active widget token
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @return ApiResponse&lt;ActiveWidget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveWidget> resetActiveWidgetTokenWithHttpInfo(Long projectId, Long widgetId) throws ApiException {
        okhttp3.Call localVarCall = resetActiveWidgetTokenValidateBeforeCall(projectId, widgetId, null);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset Active widget token (asynchronously)
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetActiveWidgetTokenAsync(Long projectId, Long widgetId, final ApiCallback<ActiveWidget> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetActiveWidgetTokenValidateBeforeCall(projectId, widgetId, _callback);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translate
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to instantly translate your file into. (required)
     * @param instantTranslationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instant translation result. It may return a list of translated strings, or a list of translated files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateCall(Long id, String targetLanguage, InstantTranslationRequest instantTranslationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instantTranslationRequest;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/translate/{targetLanguage}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "targetLanguage" + "}", localVarApiClient.escapeString(targetLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateValidateBeforeCall(Long id, String targetLanguage, InstantTranslationRequest instantTranslationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling translate(Async)");
        }

        // verify the required parameter 'targetLanguage' is set
        if (targetLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetLanguage' when calling translate(Async)");
        }

        return translateCall(id, targetLanguage, instantTranslationRequest, _callback);

    }

    /**
     * Instantly translate your content
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to instantly translate your file into. (required)
     * @param instantTranslationRequest  (optional)
     * @return InstantTranslationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instant translation result. It may return a list of translated strings, or a list of translated files. </td><td>  -  </td></tr>
     </table>
     */
    public InstantTranslationResult translate(Long id, String targetLanguage, InstantTranslationRequest instantTranslationRequest) throws ApiException {
        ApiResponse<InstantTranslationResult> localVarResp = translateWithHttpInfo(id, targetLanguage, instantTranslationRequest);
        return localVarResp.getData();
    }

    /**
     * Instantly translate your content
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to instantly translate your file into. (required)
     * @param instantTranslationRequest  (optional)
     * @return ApiResponse&lt;InstantTranslationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instant translation result. It may return a list of translated strings, or a list of translated files. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstantTranslationResult> translateWithHttpInfo(Long id, String targetLanguage, InstantTranslationRequest instantTranslationRequest) throws ApiException {
        okhttp3.Call localVarCall = translateValidateBeforeCall(id, targetLanguage, instantTranslationRequest, null);
        Type localVarReturnType = new TypeToken<InstantTranslationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Instantly translate your content (asynchronously)
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     * @param id Continuous project ID (required)
     * @param targetLanguage Target language that you want to instantly translate your file into. (required)
     * @param instantTranslationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instant translation result. It may return a list of translated strings, or a list of translated files. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateAsync(Long id, String targetLanguage, InstantTranslationRequest instantTranslationRequest, final ApiCallback<InstantTranslationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateValidateBeforeCall(id, targetLanguage, instantTranslationRequest, _callback);
        Type localVarReturnType = new TypeToken<InstantTranslationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateActiveWidget
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param activeWidget  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateActiveWidgetCall(Long projectId, Long widgetId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activeWidget;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/widgets/{widgetId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "widgetId" + "}", localVarApiClient.escapeString(widgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateActiveWidgetValidateBeforeCall(Long projectId, Long widgetId, ActiveWidget activeWidget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateActiveWidget(Async)");
        }

        // verify the required parameter 'widgetId' is set
        if (widgetId == null) {
            throw new ApiException("Missing the required parameter 'widgetId' when calling updateActiveWidget(Async)");
        }

        return updateActiveWidgetCall(projectId, widgetId, activeWidget, _callback);

    }

    /**
     * Update Active widget settings.
     * Update Active widget settings.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param activeWidget  (optional)
     * @return ActiveWidget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ActiveWidget updateActiveWidget(Long projectId, Long widgetId, ActiveWidget activeWidget) throws ApiException {
        ApiResponse<ActiveWidget> localVarResp = updateActiveWidgetWithHttpInfo(projectId, widgetId, activeWidget);
        return localVarResp.getData();
    }

    /**
     * Update Active widget settings.
     * Update Active widget settings.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param activeWidget  (optional)
     * @return ApiResponse&lt;ActiveWidget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveWidget> updateActiveWidgetWithHttpInfo(Long projectId, Long widgetId, ActiveWidget activeWidget) throws ApiException {
        okhttp3.Call localVarCall = updateActiveWidgetValidateBeforeCall(projectId, widgetId, activeWidget, null);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Active widget settings. (asynchronously)
     * Update Active widget settings.
     * @param projectId Continuous Project ID (required)
     * @param widgetId Active widget ID belonging to this Continuous Project (required)
     * @param activeWidget  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated widget details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound | ActiveWidgetNotFound | UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateActiveWidgetAsync(Long projectId, Long widgetId, ActiveWidget activeWidget, final ApiCallback<ActiveWidget> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateActiveWidgetValidateBeforeCall(projectId, widgetId, activeWidget, _callback);
        Type localVarReturnType = new TypeToken<ActiveWidget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContinuousProject
     * @param id Continuous project ID (required)
     * @param continuousProjectUpdateContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update continuous project operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousProjectCall(Long id, ContinuousProjectUpdateContent continuousProjectUpdateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = continuousProjectUpdateContent;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContinuousProjectValidateBeforeCall(Long id, ContinuousProjectUpdateContent continuousProjectUpdateContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContinuousProject(Async)");
        }

        return updateContinuousProjectCall(id, continuousProjectUpdateContent, _callback);

    }

    /**
     * Update a continuous project
     * Update the details and settings of continuous project.
     * @param id Continuous project ID (required)
     * @param continuousProjectUpdateContent  (optional)
     * @return ContinuousProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update continuous project operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProject updateContinuousProject(Long id, ContinuousProjectUpdateContent continuousProjectUpdateContent) throws ApiException {
        ApiResponse<ContinuousProject> localVarResp = updateContinuousProjectWithHttpInfo(id, continuousProjectUpdateContent);
        return localVarResp.getData();
    }

    /**
     * Update a continuous project
     * Update the details and settings of continuous project.
     * @param id Continuous project ID (required)
     * @param continuousProjectUpdateContent  (optional)
     * @return ApiResponse&lt;ContinuousProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update continuous project operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProject> updateContinuousProjectWithHttpInfo(Long id, ContinuousProjectUpdateContent continuousProjectUpdateContent) throws ApiException {
        okhttp3.Call localVarCall = updateContinuousProjectValidateBeforeCall(id, continuousProjectUpdateContent, null);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a continuous project (asynchronously)
     * Update the details and settings of continuous project.
     * @param id Continuous project ID (required)
     * @param continuousProjectUpdateContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update continuous project operation status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContinuousProjectAsync(Long id, ContinuousProjectUpdateContent continuousProjectUpdateContent, final ApiCallback<ContinuousProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContinuousProjectValidateBeforeCall(id, continuousProjectUpdateContent, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDocument
     * @param projectId Continuous project ID (required)
     * @param documentId Continuous project document ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentCall(Long projectId, Long documentId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addOrUpdateDocumentRequest;

        // create path and map variables
        String localVarPath = "/continuous_projects/{projectId}/documents/{documentId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentValidateBeforeCall(Long projectId, Long documentId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocument(Async)");
        }

        return updateDocumentCall(projectId, documentId, addOrUpdateDocumentRequest, _callback);

    }

    /**
     * Update the document
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param documentId Continuous project document ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @return ContinuousProjectDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public ContinuousProjectDocument updateDocument(Long projectId, Long documentId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest) throws ApiException {
        ApiResponse<ContinuousProjectDocument> localVarResp = updateDocumentWithHttpInfo(projectId, documentId, addOrUpdateDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Update the document
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param documentId Continuous project document ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @return ApiResponse&lt;ContinuousProjectDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinuousProjectDocument> updateDocumentWithHttpInfo(Long projectId, Long documentId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(projectId, documentId, addOrUpdateDocumentRequest, null);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the document (asynchronously)
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     * @param projectId Continuous project ID (required)
     * @param documentId Continuous project document ID (required)
     * @param addOrUpdateDocumentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated continuous project document object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentAsync(Long projectId, Long documentId, AddOrUpdateDocumentRequest addOrUpdateDocumentRequest, final ApiCallback<ContinuousProjectDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(projectId, documentId, addOrUpdateDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<ContinuousProjectDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscription
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscription;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSubscription(Async)");
        }

        // verify the required parameter 'subscription' is set
        if (subscription == null) {
            throw new ApiException("Missing the required parameter 'subscription' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(id, subscription, _callback);

    }

    /**
     * Update subscription for continuous project
     * Update subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Subscription updateSubscription(Long id, Subscription subscription) throws ApiException {
        ApiResponse<Subscription> localVarResp = updateSubscriptionWithHttpInfo(id, subscription);
        return localVarResp.getData();
    }

    /**
     * Update subscription for continuous project
     * Update subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> updateSubscriptionWithHttpInfo(Long id, Subscription subscription) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(id, subscription, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update subscription for continuous project (asynchronously)
     * Update subscription for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionAsync(Long id, Subscription subscription, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(id, subscription, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionPaymentMethod
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionPaymentMethodCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscription;

        // create path and map variables
        String localVarPath = "/continuous_projects/{id}/subscription/payment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionPaymentMethodValidateBeforeCall(Long id, Subscription subscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSubscriptionPaymentMethod(Async)");
        }

        // verify the required parameter 'subscription' is set
        if (subscription == null) {
            throw new ApiException("Missing the required parameter 'subscription' when calling updateSubscriptionPaymentMethod(Async)");
        }

        return updateSubscriptionPaymentMethodCall(id, subscription, _callback);

    }

    /**
     * Update subscription payment method for continuous project
     * Update subscription payment method for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Subscription updateSubscriptionPaymentMethod(Long id, Subscription subscription) throws ApiException {
        ApiResponse<Subscription> localVarResp = updateSubscriptionPaymentMethodWithHttpInfo(id, subscription);
        return localVarResp.getData();
    }

    /**
     * Update subscription payment method for continuous project
     * Update subscription payment method for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> updateSubscriptionPaymentMethodWithHttpInfo(Long id, Subscription subscription) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionPaymentMethodValidateBeforeCall(id, subscription, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update subscription payment method for continuous project (asynchronously)
     * Update subscription payment method for continuous project
     * @param id Continuous project ID (required)
     * @param subscription  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated continuous project subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionPaymentMethodAsync(Long id, Subscription subscription, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionPaymentMethodValidateBeforeCall(id, subscription, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
