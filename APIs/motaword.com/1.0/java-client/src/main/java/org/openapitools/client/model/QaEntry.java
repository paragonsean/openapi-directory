/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SimpleModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QaEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QaEntry {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DOC_ID = "docId";
  @SerializedName(SERIALIZED_NAME_DOC_ID)
  private String docId;

  public static final String SERIALIZED_NAME_EDITOR_LINK = "editorLink";
  @SerializedName(SERIALIZED_NAME_EDITOR_LINK)
  private String editorLink;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Long end;

  public static final String SERIALIZED_NAME_IN_SOURCE = "inSource";
  @SerializedName(SERIALIZED_NAME_IN_SOURCE)
  private Boolean inSource;

  public static final String SERIALIZED_NAME_IS_CURRENT = "isCurrent";
  @SerializedName(SERIALIZED_NAME_IS_CURRENT)
  private Boolean isCurrent;

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private String module;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private SimpleModel projectId;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "sourceLanguage";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private SimpleModel sourceLanguage;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE = "targetLanguage";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE)
  private SimpleModel targetLanguage;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  private String translation;

  public static final String SERIALIZED_NAME_UNIQUE_KEY = "uniqueKey";
  @SerializedName(SERIALIZED_NAME_UNIQUE_KEY)
  private String uniqueKey;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private SimpleModel vendor;

  public QaEntry() {
  }

  public QaEntry category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public QaEntry comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public QaEntry docId(String docId) {
    this.docId = docId;
    return this;
  }

  /**
   * Get docId
   * @return docId
   */
  @javax.annotation.Nullable
  public String getDocId() {
    return docId;
  }

  public void setDocId(String docId) {
    this.docId = docId;
  }


  public QaEntry editorLink(String editorLink) {
    this.editorLink = editorLink;
    return this;
  }

  /**
   * Get editorLink
   * @return editorLink
   */
  @javax.annotation.Nullable
  public String getEditorLink() {
    return editorLink;
  }

  public void setEditorLink(String editorLink) {
    this.editorLink = editorLink;
  }


  public QaEntry end(Long end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public Long getEnd() {
    return end;
  }

  public void setEnd(Long end) {
    this.end = end;
  }


  public QaEntry inSource(Boolean inSource) {
    this.inSource = inSource;
    return this;
  }

  /**
   * Get inSource
   * @return inSource
   */
  @javax.annotation.Nullable
  public Boolean getInSource() {
    return inSource;
  }

  public void setInSource(Boolean inSource) {
    this.inSource = inSource;
  }


  public QaEntry isCurrent(Boolean isCurrent) {
    this.isCurrent = isCurrent;
    return this;
  }

  /**
   * Get isCurrent
   * @return isCurrent
   */
  @javax.annotation.Nullable
  public Boolean getIsCurrent() {
    return isCurrent;
  }

  public void setIsCurrent(Boolean isCurrent) {
    this.isCurrent = isCurrent;
  }


  public QaEntry module(String module) {
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @javax.annotation.Nullable
  public String getModule() {
    return module;
  }

  public void setModule(String module) {
    this.module = module;
  }


  public QaEntry projectId(SimpleModel projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public SimpleModel getProjectId() {
    return projectId;
  }

  public void setProjectId(SimpleModel projectId) {
    this.projectId = projectId;
  }


  public QaEntry severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public QaEntry source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public QaEntry sourceLanguage(SimpleModel sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

  /**
   * Get sourceLanguage
   * @return sourceLanguage
   */
  @javax.annotation.Nullable
  public SimpleModel getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(SimpleModel sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public QaEntry start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }


  public QaEntry state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public QaEntry targetLanguage(SimpleModel targetLanguage) {
    this.targetLanguage = targetLanguage;
    return this;
  }

  /**
   * Get targetLanguage
   * @return targetLanguage
   */
  @javax.annotation.Nullable
  public SimpleModel getTargetLanguage() {
    return targetLanguage;
  }

  public void setTargetLanguage(SimpleModel targetLanguage) {
    this.targetLanguage = targetLanguage;
  }


  public QaEntry translation(String translation) {
    this.translation = translation;
    return this;
  }

  /**
   * Get translation
   * @return translation
   */
  @javax.annotation.Nullable
  public String getTranslation() {
    return translation;
  }

  public void setTranslation(String translation) {
    this.translation = translation;
  }


  public QaEntry uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

  /**
   * Get uniqueKey
   * @return uniqueKey
   */
  @javax.annotation.Nullable
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }


  public QaEntry vendor(SimpleModel vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Get vendor
   * @return vendor
   */
  @javax.annotation.Nullable
  public SimpleModel getVendor() {
    return vendor;
  }

  public void setVendor(SimpleModel vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QaEntry qaEntry = (QaEntry) o;
    return Objects.equals(this.category, qaEntry.category) &&
        Objects.equals(this.comment, qaEntry.comment) &&
        Objects.equals(this.docId, qaEntry.docId) &&
        Objects.equals(this.editorLink, qaEntry.editorLink) &&
        Objects.equals(this.end, qaEntry.end) &&
        Objects.equals(this.inSource, qaEntry.inSource) &&
        Objects.equals(this.isCurrent, qaEntry.isCurrent) &&
        Objects.equals(this.module, qaEntry.module) &&
        Objects.equals(this.projectId, qaEntry.projectId) &&
        Objects.equals(this.severity, qaEntry.severity) &&
        Objects.equals(this.source, qaEntry.source) &&
        Objects.equals(this.sourceLanguage, qaEntry.sourceLanguage) &&
        Objects.equals(this.start, qaEntry.start) &&
        Objects.equals(this.state, qaEntry.state) &&
        Objects.equals(this.targetLanguage, qaEntry.targetLanguage) &&
        Objects.equals(this.translation, qaEntry.translation) &&
        Objects.equals(this.uniqueKey, qaEntry.uniqueKey) &&
        Objects.equals(this.vendor, qaEntry.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, comment, docId, editorLink, end, inSource, isCurrent, module, projectId, severity, source, sourceLanguage, start, state, targetLanguage, translation, uniqueKey, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QaEntry {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    editorLink: ").append(toIndentedString(editorLink)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    inSource: ").append(toIndentedString(inSource)).append("\n");
    sb.append("    isCurrent: ").append(toIndentedString(isCurrent)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targetLanguage: ").append(toIndentedString(targetLanguage)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("comment");
    openapiFields.add("docId");
    openapiFields.add("editorLink");
    openapiFields.add("end");
    openapiFields.add("inSource");
    openapiFields.add("isCurrent");
    openapiFields.add("module");
    openapiFields.add("projectId");
    openapiFields.add("severity");
    openapiFields.add("source");
    openapiFields.add("sourceLanguage");
    openapiFields.add("start");
    openapiFields.add("state");
    openapiFields.add("targetLanguage");
    openapiFields.add("translation");
    openapiFields.add("uniqueKey");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QaEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QaEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QaEntry is not found in the empty JSON string", QaEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QaEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QaEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("docId") != null && !jsonObj.get("docId").isJsonNull()) && !jsonObj.get("docId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docId").toString()));
      }
      if ((jsonObj.get("editorLink") != null && !jsonObj.get("editorLink").isJsonNull()) && !jsonObj.get("editorLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorLink").toString()));
      }
      if ((jsonObj.get("module") != null && !jsonObj.get("module").isJsonNull()) && !jsonObj.get("module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module").toString()));
      }
      // validate the optional field `projectId`
      if (jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) {
        SimpleModel.validateJsonElement(jsonObj.get("projectId"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `sourceLanguage`
      if (jsonObj.get("sourceLanguage") != null && !jsonObj.get("sourceLanguage").isJsonNull()) {
        SimpleModel.validateJsonElement(jsonObj.get("sourceLanguage"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `targetLanguage`
      if (jsonObj.get("targetLanguage") != null && !jsonObj.get("targetLanguage").isJsonNull()) {
        SimpleModel.validateJsonElement(jsonObj.get("targetLanguage"));
      }
      if ((jsonObj.get("translation") != null && !jsonObj.get("translation").isJsonNull()) && !jsonObj.get("translation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `translation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("translation").toString()));
      }
      if ((jsonObj.get("uniqueKey") != null && !jsonObj.get("uniqueKey").isJsonNull()) && !jsonObj.get("uniqueKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueKey").toString()));
      }
      // validate the optional field `vendor`
      if (jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) {
        SimpleModel.validateJsonElement(jsonObj.get("vendor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QaEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QaEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QaEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QaEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<QaEntry>() {
           @Override
           public void write(JsonWriter out, QaEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QaEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QaEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QaEntry
   * @throws IOException if the JSON string is invalid with respect to QaEntry
   */
  public static QaEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QaEntry.class);
  }

  /**
   * Convert an instance of QaEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

