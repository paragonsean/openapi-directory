/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClientProfileNps;
import org.openapitools.client.model.ProofreaderWithLanguage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientProfile {
  public static final String SERIALIZED_NAME_ACCOUNT_CREATION_DATE = "account_creation_date";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CREATION_DATE)
  private OffsetDateTime accountCreationDate;

  public static final String SERIALIZED_NAME_CLIENT_PROJECT_COUNT = "client_project_count";
  @SerializedName(SERIALIZED_NAME_CLIENT_PROJECT_COUNT)
  private BigDecimal clientProjectCount;

  public static final String SERIALIZED_NAME_CORPORATE = "corporate";
  @SerializedName(SERIALIZED_NAME_CORPORATE)
  private String corporate;

  public static final String SERIALIZED_NAME_CORPORATE_ID = "corporate_id";
  @SerializedName(SERIALIZED_NAME_CORPORATE_ID)
  private BigDecimal corporateId;

  public static final String SERIALIZED_NAME_CORPORATE_USER_COUNT = "corporate_user_count";
  @SerializedName(SERIALIZED_NAME_CORPORATE_USER_COUNT)
  private BigDecimal corporateUserCount;

  public static final String SERIALIZED_NAME_FREQUENT_FILE_EXTENSION = "frequent_file_extension";
  @SerializedName(SERIALIZED_NAME_FREQUENT_FILE_EXTENSION)
  private String frequentFileExtension;

  public static final String SERIALIZED_NAME_FREQUENT_LANGUAGE_PAIRS = "frequent_language_pairs";
  @SerializedName(SERIALIZED_NAME_FREQUENT_LANGUAGE_PAIRS)
  private List<String> frequentLanguagePairs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GROWTH = "growth";
  @SerializedName(SERIALIZED_NAME_GROWTH)
  private Boolean growth;

  public static final String SERIALIZED_NAME_IS_COMPLEX = "is_complex";
  @SerializedName(SERIALIZED_NAME_IS_COMPLEX)
  private Boolean isComplex;

  public static final String SERIALIZED_NAME_LAST12_MONTHS_SPENDING = "last_12_months_spending";
  @SerializedName(SERIALIZED_NAME_LAST12_MONTHS_SPENDING)
  private Float last12MonthsSpending;

  public static final String SERIALIZED_NAME_LAST_PROJECT = "last_project";
  @SerializedName(SERIALIZED_NAME_LAST_PROJECT)
  private BigDecimal lastProject;

  public static final String SERIALIZED_NAME_LAST_PROJECT_TIME = "last_project_time";
  @SerializedName(SERIALIZED_NAME_LAST_PROJECT_TIME)
  private OffsetDateTime lastProjectTime;

  public static final String SERIALIZED_NAME_LAST_PROOFREADERS = "last_proofreaders";
  @SerializedName(SERIALIZED_NAME_LAST_PROOFREADERS)
  private List<ProofreaderWithLanguage> lastProofreaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NPS = "nps";
  @SerializedName(SERIALIZED_NAME_NPS)
  private ClientProfileNps nps;

  public static final String SERIALIZED_NAME_USER_RANK_IN_PROJECT_COUNT = "user_rank_in_project_count";
  @SerializedName(SERIALIZED_NAME_USER_RANK_IN_PROJECT_COUNT)
  private BigDecimal userRankInProjectCount;

  public static final String SERIALIZED_NAME_USER_RANK_IN_SPENDING = "user_rank_in_spending";
  @SerializedName(SERIALIZED_NAME_USER_RANK_IN_SPENDING)
  private BigDecimal userRankInSpending;

  public ClientProfile() {
  }

  public ClientProfile accountCreationDate(OffsetDateTime accountCreationDate) {
    this.accountCreationDate = accountCreationDate;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return accountCreationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccountCreationDate() {
    return accountCreationDate;
  }

  public void setAccountCreationDate(OffsetDateTime accountCreationDate) {
    this.accountCreationDate = accountCreationDate;
  }


  public ClientProfile clientProjectCount(BigDecimal clientProjectCount) {
    this.clientProjectCount = clientProjectCount;
    return this;
  }

  /**
   * total project count that this client sent
   * @return clientProjectCount
   */
  @javax.annotation.Nullable
  public BigDecimal getClientProjectCount() {
    return clientProjectCount;
  }

  public void setClientProjectCount(BigDecimal clientProjectCount) {
    this.clientProjectCount = clientProjectCount;
  }


  public ClientProfile corporate(String corporate) {
    this.corporate = corporate;
    return this;
  }

  /**
   * corporate name
   * @return corporate
   */
  @javax.annotation.Nullable
  public String getCorporate() {
    return corporate;
  }

  public void setCorporate(String corporate) {
    this.corporate = corporate;
  }


  public ClientProfile corporateId(BigDecimal corporateId) {
    this.corporateId = corporateId;
    return this;
  }

  /**
   * corporate id
   * @return corporateId
   */
  @javax.annotation.Nullable
  public BigDecimal getCorporateId() {
    return corporateId;
  }

  public void setCorporateId(BigDecimal corporateId) {
    this.corporateId = corporateId;
  }


  public ClientProfile corporateUserCount(BigDecimal corporateUserCount) {
    this.corporateUserCount = corporateUserCount;
    return this;
  }

  /**
   * total user count in a corporation
   * @return corporateUserCount
   */
  @javax.annotation.Nullable
  public BigDecimal getCorporateUserCount() {
    return corporateUserCount;
  }

  public void setCorporateUserCount(BigDecimal corporateUserCount) {
    this.corporateUserCount = corporateUserCount;
  }


  public ClientProfile frequentFileExtension(String frequentFileExtension) {
    this.frequentFileExtension = frequentFileExtension;
    return this;
  }

  /**
   * the file extension for the files that usually this client sent
   * @return frequentFileExtension
   */
  @javax.annotation.Nullable
  public String getFrequentFileExtension() {
    return frequentFileExtension;
  }

  public void setFrequentFileExtension(String frequentFileExtension) {
    this.frequentFileExtension = frequentFileExtension;
  }


  public ClientProfile frequentLanguagePairs(List<String> frequentLanguagePairs) {
    this.frequentLanguagePairs = frequentLanguagePairs;
    return this;
  }

  public ClientProfile addFrequentLanguagePairsItem(String frequentLanguagePairsItem) {
    if (this.frequentLanguagePairs == null) {
      this.frequentLanguagePairs = new ArrayList<>();
    }
    this.frequentLanguagePairs.add(frequentLanguagePairsItem);
    return this;
  }

  /**
   * frequent language pairs
   * @return frequentLanguagePairs
   */
  @javax.annotation.Nullable
  public List<String> getFrequentLanguagePairs() {
    return frequentLanguagePairs;
  }

  public void setFrequentLanguagePairs(List<String> frequentLanguagePairs) {
    this.frequentLanguagePairs = frequentLanguagePairs;
  }


  public ClientProfile fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * full name of the client
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public ClientProfile growth(Boolean growth) {
    this.growth = growth;
    return this;
  }

  /**
   * The answer for the question \&quot;Is there any growth for this corporate&#39;s spending\&quot;. The values can be true, false or null if the corporate is oour client for less than 6 months
   * @return growth
   */
  @javax.annotation.Nullable
  public Boolean getGrowth() {
    return growth;
  }

  public void setGrowth(Boolean growth) {
    this.growth = growth;
  }


  public ClientProfile isComplex(Boolean isComplex) {
    this.isComplex = isComplex;
    return this;
  }

  /**
   * the answer for the question \&quot;Is this client usually sent complex projects?\&quot;
   * @return isComplex
   */
  @javax.annotation.Nullable
  public Boolean getIsComplex() {
    return isComplex;
  }

  public void setIsComplex(Boolean isComplex) {
    this.isComplex = isComplex;
  }


  public ClientProfile last12MonthsSpending(Float last12MonthsSpending) {
    this.last12MonthsSpending = last12MonthsSpending;
    return this;
  }

  /**
   * corporate&#39;s spending in twelve months
   * @return last12MonthsSpending
   */
  @javax.annotation.Nullable
  public Float getLast12MonthsSpending() {
    return last12MonthsSpending;
  }

  public void setLast12MonthsSpending(Float last12MonthsSpending) {
    this.last12MonthsSpending = last12MonthsSpending;
  }


  public ClientProfile lastProject(BigDecimal lastProject) {
    this.lastProject = lastProject;
    return this;
  }

  /**
   * the quote number for the last project of this client
   * @return lastProject
   */
  @javax.annotation.Nullable
  public BigDecimal getLastProject() {
    return lastProject;
  }

  public void setLastProject(BigDecimal lastProject) {
    this.lastProject = lastProject;
  }


  public ClientProfile lastProjectTime(OffsetDateTime lastProjectTime) {
    this.lastProjectTime = lastProjectTime;
    return this;
  }

  /**
   * the creation date of the last project that is sent by this client
   * @return lastProjectTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastProjectTime() {
    return lastProjectTime;
  }

  public void setLastProjectTime(OffsetDateTime lastProjectTime) {
    this.lastProjectTime = lastProjectTime;
  }


  public ClientProfile lastProofreaders(List<ProofreaderWithLanguage> lastProofreaders) {
    this.lastProofreaders = lastProofreaders;
    return this;
  }

  public ClientProfile addLastProofreadersItem(ProofreaderWithLanguage lastProofreadersItem) {
    if (this.lastProofreaders == null) {
      this.lastProofreaders = new ArrayList<>();
    }
    this.lastProofreaders.add(lastProofreadersItem);
    return this;
  }

  /**
   * list of prooofreaders for the target languages of last project
   * @return lastProofreaders
   */
  @javax.annotation.Nullable
  public List<ProofreaderWithLanguage> getLastProofreaders() {
    return lastProofreaders;
  }

  public void setLastProofreaders(List<ProofreaderWithLanguage> lastProofreaders) {
    this.lastProofreaders = lastProofreaders;
  }


  public ClientProfile notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public ClientProfile addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * notes that is submited for this client and/or with her projects
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public ClientProfile nps(ClientProfileNps nps) {
    this.nps = nps;
    return this;
  }

  /**
   * Get nps
   * @return nps
   */
  @javax.annotation.Nullable
  public ClientProfileNps getNps() {
    return nps;
  }

  public void setNps(ClientProfileNps nps) {
    this.nps = nps;
  }


  public ClientProfile userRankInProjectCount(BigDecimal userRankInProjectCount) {
    this.userRankInProjectCount = userRankInProjectCount;
    return this;
  }

  /**
   * rank of the user in all corporate users for project count. If the user is the most active user foor sending projects her rank is 1
   * @return userRankInProjectCount
   */
  @javax.annotation.Nullable
  public BigDecimal getUserRankInProjectCount() {
    return userRankInProjectCount;
  }

  public void setUserRankInProjectCount(BigDecimal userRankInProjectCount) {
    this.userRankInProjectCount = userRankInProjectCount;
  }


  public ClientProfile userRankInSpending(BigDecimal userRankInSpending) {
    this.userRankInSpending = userRankInSpending;
    return this;
  }

  /**
   * rank of the user in all corporate users for total spending. If the user is the most active user for spending her rank is 1
   * @return userRankInSpending
   */
  @javax.annotation.Nullable
  public BigDecimal getUserRankInSpending() {
    return userRankInSpending;
  }

  public void setUserRankInSpending(BigDecimal userRankInSpending) {
    this.userRankInSpending = userRankInSpending;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientProfile clientProfile = (ClientProfile) o;
    return Objects.equals(this.accountCreationDate, clientProfile.accountCreationDate) &&
        Objects.equals(this.clientProjectCount, clientProfile.clientProjectCount) &&
        Objects.equals(this.corporate, clientProfile.corporate) &&
        Objects.equals(this.corporateId, clientProfile.corporateId) &&
        Objects.equals(this.corporateUserCount, clientProfile.corporateUserCount) &&
        Objects.equals(this.frequentFileExtension, clientProfile.frequentFileExtension) &&
        Objects.equals(this.frequentLanguagePairs, clientProfile.frequentLanguagePairs) &&
        Objects.equals(this.fullName, clientProfile.fullName) &&
        Objects.equals(this.growth, clientProfile.growth) &&
        Objects.equals(this.isComplex, clientProfile.isComplex) &&
        Objects.equals(this.last12MonthsSpending, clientProfile.last12MonthsSpending) &&
        Objects.equals(this.lastProject, clientProfile.lastProject) &&
        Objects.equals(this.lastProjectTime, clientProfile.lastProjectTime) &&
        Objects.equals(this.lastProofreaders, clientProfile.lastProofreaders) &&
        Objects.equals(this.notes, clientProfile.notes) &&
        Objects.equals(this.nps, clientProfile.nps) &&
        Objects.equals(this.userRankInProjectCount, clientProfile.userRankInProjectCount) &&
        Objects.equals(this.userRankInSpending, clientProfile.userRankInSpending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCreationDate, clientProjectCount, corporate, corporateId, corporateUserCount, frequentFileExtension, frequentLanguagePairs, fullName, growth, isComplex, last12MonthsSpending, lastProject, lastProjectTime, lastProofreaders, notes, nps, userRankInProjectCount, userRankInSpending);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientProfile {\n");
    sb.append("    accountCreationDate: ").append(toIndentedString(accountCreationDate)).append("\n");
    sb.append("    clientProjectCount: ").append(toIndentedString(clientProjectCount)).append("\n");
    sb.append("    corporate: ").append(toIndentedString(corporate)).append("\n");
    sb.append("    corporateId: ").append(toIndentedString(corporateId)).append("\n");
    sb.append("    corporateUserCount: ").append(toIndentedString(corporateUserCount)).append("\n");
    sb.append("    frequentFileExtension: ").append(toIndentedString(frequentFileExtension)).append("\n");
    sb.append("    frequentLanguagePairs: ").append(toIndentedString(frequentLanguagePairs)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    growth: ").append(toIndentedString(growth)).append("\n");
    sb.append("    isComplex: ").append(toIndentedString(isComplex)).append("\n");
    sb.append("    last12MonthsSpending: ").append(toIndentedString(last12MonthsSpending)).append("\n");
    sb.append("    lastProject: ").append(toIndentedString(lastProject)).append("\n");
    sb.append("    lastProjectTime: ").append(toIndentedString(lastProjectTime)).append("\n");
    sb.append("    lastProofreaders: ").append(toIndentedString(lastProofreaders)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    nps: ").append(toIndentedString(nps)).append("\n");
    sb.append("    userRankInProjectCount: ").append(toIndentedString(userRankInProjectCount)).append("\n");
    sb.append("    userRankInSpending: ").append(toIndentedString(userRankInSpending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_creation_date");
    openapiFields.add("client_project_count");
    openapiFields.add("corporate");
    openapiFields.add("corporate_id");
    openapiFields.add("corporate_user_count");
    openapiFields.add("frequent_file_extension");
    openapiFields.add("frequent_language_pairs");
    openapiFields.add("full_name");
    openapiFields.add("growth");
    openapiFields.add("is_complex");
    openapiFields.add("last_12_months_spending");
    openapiFields.add("last_project");
    openapiFields.add("last_project_time");
    openapiFields.add("last_proofreaders");
    openapiFields.add("notes");
    openapiFields.add("nps");
    openapiFields.add("user_rank_in_project_count");
    openapiFields.add("user_rank_in_spending");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientProfile is not found in the empty JSON string", ClientProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("corporate") != null && !jsonObj.get("corporate").isJsonNull()) && !jsonObj.get("corporate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporate").toString()));
      }
      if ((jsonObj.get("frequent_file_extension") != null && !jsonObj.get("frequent_file_extension").isJsonNull()) && !jsonObj.get("frequent_file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequent_file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequent_file_extension").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("frequent_language_pairs") != null && !jsonObj.get("frequent_language_pairs").isJsonNull() && !jsonObj.get("frequent_language_pairs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequent_language_pairs` to be an array in the JSON string but got `%s`", jsonObj.get("frequent_language_pairs").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (jsonObj.get("last_proofreaders") != null && !jsonObj.get("last_proofreaders").isJsonNull()) {
        JsonArray jsonArraylastProofreaders = jsonObj.getAsJsonArray("last_proofreaders");
        if (jsonArraylastProofreaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("last_proofreaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `last_proofreaders` to be an array in the JSON string but got `%s`", jsonObj.get("last_proofreaders").toString()));
          }

          // validate the optional field `last_proofreaders` (array)
          for (int i = 0; i < jsonArraylastProofreaders.size(); i++) {
            ProofreaderWithLanguage.validateJsonElement(jsonArraylastProofreaders.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull() && !jsonObj.get("notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `nps`
      if (jsonObj.get("nps") != null && !jsonObj.get("nps").isJsonNull()) {
        ClientProfileNps.validateJsonElement(jsonObj.get("nps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientProfile>() {
           @Override
           public void write(JsonWriter out, ClientProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientProfile
   * @throws IOException if the JSON string is invalid with respect to ClientProfile
   */
  public static ClientProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientProfile.class);
  }

  /**
   * Convert an instance of ClientProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

