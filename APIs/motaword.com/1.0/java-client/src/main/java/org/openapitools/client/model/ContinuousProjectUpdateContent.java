/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContinuousProjectLanguage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContinuousProjectUpdateContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContinuousProjectUpdateContent {
  public static final String SERIALIZED_NAME_ANALYTICS_ENABLED = "analytics_enabled";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ENABLED)
  private Boolean analyticsEnabled;

  public static final String SERIALIZED_NAME_AUTO_START_POSTEDIT = "auto_start_postedit";
  @SerializedName(SERIALIZED_NAME_AUTO_START_POSTEDIT)
  private Boolean autoStartPostedit;

  public static final String SERIALIZED_NAME_IS_ENABLED = "is_enabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<ContinuousProjectLanguage> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MT_ENABLED = "mt_enabled";
  @SerializedName(SERIALIZED_NAME_MT_ENABLED)
  private Boolean mtEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSTEDIT_ENABLED = "postedit_enabled";
  @SerializedName(SERIALIZED_NAME_POSTEDIT_ENABLED)
  private Boolean posteditEnabled;

  public ContinuousProjectUpdateContent() {
  }

  public ContinuousProjectUpdateContent analyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
    return this;
  }

  /**
   * Get analyticsEnabled
   * @return analyticsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnalyticsEnabled() {
    return analyticsEnabled;
  }

  public void setAnalyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
  }


  public ContinuousProjectUpdateContent autoStartPostedit(Boolean autoStartPostedit) {
    this.autoStartPostedit = autoStartPostedit;
    return this;
  }

  /**
   * Get autoStartPostedit
   * @return autoStartPostedit
   */
  @javax.annotation.Nullable
  public Boolean getAutoStartPostedit() {
    return autoStartPostedit;
  }

  public void setAutoStartPostedit(Boolean autoStartPostedit) {
    this.autoStartPostedit = autoStartPostedit;
  }


  public ContinuousProjectUpdateContent isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Get isEnabled
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ContinuousProjectUpdateContent languages(List<ContinuousProjectLanguage> languages) {
    this.languages = languages;
    return this;
  }

  public ContinuousProjectUpdateContent addLanguagesItem(ContinuousProjectLanguage languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * Get languages
   * @return languages
   */
  @javax.annotation.Nullable
  public List<ContinuousProjectLanguage> getLanguages() {
    return languages;
  }

  public void setLanguages(List<ContinuousProjectLanguage> languages) {
    this.languages = languages;
  }


  public ContinuousProjectUpdateContent mtEnabled(Boolean mtEnabled) {
    this.mtEnabled = mtEnabled;
    return this;
  }

  /**
   * Get mtEnabled
   * @return mtEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMtEnabled() {
    return mtEnabled;
  }

  public void setMtEnabled(Boolean mtEnabled) {
    this.mtEnabled = mtEnabled;
  }


  public ContinuousProjectUpdateContent name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContinuousProjectUpdateContent posteditEnabled(Boolean posteditEnabled) {
    this.posteditEnabled = posteditEnabled;
    return this;
  }

  /**
   * Get posteditEnabled
   * @return posteditEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPosteditEnabled() {
    return posteditEnabled;
  }

  public void setPosteditEnabled(Boolean posteditEnabled) {
    this.posteditEnabled = posteditEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinuousProjectUpdateContent continuousProjectUpdateContent = (ContinuousProjectUpdateContent) o;
    return Objects.equals(this.analyticsEnabled, continuousProjectUpdateContent.analyticsEnabled) &&
        Objects.equals(this.autoStartPostedit, continuousProjectUpdateContent.autoStartPostedit) &&
        Objects.equals(this.isEnabled, continuousProjectUpdateContent.isEnabled) &&
        Objects.equals(this.languages, continuousProjectUpdateContent.languages) &&
        Objects.equals(this.mtEnabled, continuousProjectUpdateContent.mtEnabled) &&
        Objects.equals(this.name, continuousProjectUpdateContent.name) &&
        Objects.equals(this.posteditEnabled, continuousProjectUpdateContent.posteditEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsEnabled, autoStartPostedit, isEnabled, languages, mtEnabled, name, posteditEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinuousProjectUpdateContent {\n");
    sb.append("    analyticsEnabled: ").append(toIndentedString(analyticsEnabled)).append("\n");
    sb.append("    autoStartPostedit: ").append(toIndentedString(autoStartPostedit)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    mtEnabled: ").append(toIndentedString(mtEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    posteditEnabled: ").append(toIndentedString(posteditEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics_enabled");
    openapiFields.add("auto_start_postedit");
    openapiFields.add("is_enabled");
    openapiFields.add("languages");
    openapiFields.add("mt_enabled");
    openapiFields.add("name");
    openapiFields.add("postedit_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinuousProjectUpdateContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinuousProjectUpdateContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinuousProjectUpdateContent is not found in the empty JSON string", ContinuousProjectUpdateContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinuousProjectUpdateContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinuousProjectUpdateContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull()) {
        JsonArray jsonArraylanguages = jsonObj.getAsJsonArray("languages");
        if (jsonArraylanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("languages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
          }

          // validate the optional field `languages` (array)
          for (int i = 0; i < jsonArraylanguages.size(); i++) {
            ContinuousProjectLanguage.validateJsonElement(jsonArraylanguages.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinuousProjectUpdateContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinuousProjectUpdateContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinuousProjectUpdateContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinuousProjectUpdateContent.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinuousProjectUpdateContent>() {
           @Override
           public void write(JsonWriter out, ContinuousProjectUpdateContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinuousProjectUpdateContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinuousProjectUpdateContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinuousProjectUpdateContent
   * @throws IOException if the JSON string is invalid with respect to ContinuousProjectUpdateContent
   */
  public static ContinuousProjectUpdateContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinuousProjectUpdateContent.class);
  }

  /**
   * Convert an instance of ContinuousProjectUpdateContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

