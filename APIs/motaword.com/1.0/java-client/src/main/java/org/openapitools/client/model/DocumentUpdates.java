/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinkedSourceDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentUpdates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentUpdates {
  public static final String SERIALIZED_NAME_DOCUMENTS = "documents[]";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<File> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMES = "schemes[]";
  @SerializedName(SERIALIZED_NAME_SCHEMES)
  private String schemes;

  public static final String SERIALIZED_NAME_SOURCE_LINKS = "source-links[]";
  @SerializedName(SERIALIZED_NAME_SOURCE_LINKS)
  private List<LinkedSourceDocument> sourceLinks = new ArrayList<>();

  public DocumentUpdates() {
  }

  public DocumentUpdates documents(List<File> documents) {
    this.documents = documents;
    return this;
  }

  public DocumentUpdates addDocumentsItem(File documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * You can add as many files as you want in documents[] parameter.
   * @return documents
   */
  @javax.annotation.Nullable
  public List<File> getDocuments() {
    return documents;
  }

  public void setDocuments(List<File> documents) {
    this.documents = documents;
  }


  public DocumentUpdates schemes(String schemes) {
    this.schemes = schemes;
    return this;
  }

  /**
   * JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for &#x60;schemes&#x60; parameter to specify their schemes. See &#x60;Document Schemes&#x60; title in the API documentation.
   * @return schemes
   */
  @javax.annotation.Nullable
  public String getSchemes() {
    return schemes;
  }

  public void setSchemes(String schemes) {
    this.schemes = schemes;
  }


  public DocumentUpdates sourceLinks(List<LinkedSourceDocument> sourceLinks) {
    this.sourceLinks = sourceLinks;
    return this;
  }

  public DocumentUpdates addSourceLinksItem(LinkedSourceDocument sourceLinksItem) {
    if (this.sourceLinks == null) {
      this.sourceLinks = new ArrayList<>();
    }
    this.sourceLinks.add(sourceLinksItem);
    return this;
  }

  /**
   * When provided, we will download the files from these URLs, in addition to files provded in &#x60;documents&#x60; parameter and then save as source documents
   * @return sourceLinks
   */
  @javax.annotation.Nullable
  public List<LinkedSourceDocument> getSourceLinks() {
    return sourceLinks;
  }

  public void setSourceLinks(List<LinkedSourceDocument> sourceLinks) {
    this.sourceLinks = sourceLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentUpdates documentUpdates = (DocumentUpdates) o;
    return Objects.equals(this.documents, documentUpdates.documents) &&
        Objects.equals(this.schemes, documentUpdates.schemes) &&
        Objects.equals(this.sourceLinks, documentUpdates.sourceLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, schemes, sourceLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentUpdates {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    schemes: ").append(toIndentedString(schemes)).append("\n");
    sb.append("    sourceLinks: ").append(toIndentedString(sourceLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documents[]");
    openapiFields.add("schemes[]");
    openapiFields.add("source-links[]");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentUpdates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentUpdates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentUpdates is not found in the empty JSON string", DocumentUpdates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentUpdates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentUpdates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("documents[]") != null && !jsonObj.get("documents[]").isJsonNull() && !jsonObj.get("documents[]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documents[]` to be an array in the JSON string but got `%s`", jsonObj.get("documents[]").toString()));
      }
      if ((jsonObj.get("schemes[]") != null && !jsonObj.get("schemes[]").isJsonNull()) && !jsonObj.get("schemes[]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemes[]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemes[]").toString()));
      }
      if (jsonObj.get("source-links[]") != null && !jsonObj.get("source-links[]").isJsonNull()) {
        JsonArray jsonArraysourceLinks = jsonObj.getAsJsonArray("source-links[]");
        if (jsonArraysourceLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("source-links[]").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `source-links[]` to be an array in the JSON string but got `%s`", jsonObj.get("source-links[]").toString()));
          }

          // validate the optional field `source-links[]` (array)
          for (int i = 0; i < jsonArraysourceLinks.size(); i++) {
            LinkedSourceDocument.validateJsonElement(jsonArraysourceLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentUpdates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentUpdates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentUpdates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentUpdates.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentUpdates>() {
           @Override
           public void write(JsonWriter out, DocumentUpdates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentUpdates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentUpdates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentUpdates
   * @throws IOException if the JSON string is invalid with respect to DocumentUpdates
   */
  public static DocumentUpdates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentUpdates.class);
  }

  /**
   * Convert an instance of DocumentUpdates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

