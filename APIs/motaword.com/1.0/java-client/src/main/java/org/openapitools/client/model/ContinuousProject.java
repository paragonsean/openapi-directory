/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContinuousProjectLinks;
import org.openapitools.client.model.Subscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContinuousProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContinuousProject {
  public static final String SERIALIZED_NAME_ANALYTICS_ENABLED = "analytics_enabled";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ENABLED)
  private Boolean analyticsEnabled;

  public static final String SERIALIZED_NAME_AUTO_START_POSTEDIT = "auto_start_postedit";
  @SerializedName(SERIALIZED_NAME_AUTO_START_POSTEDIT)
  private Boolean autoStartPostedit;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_ENABLED = "is_enabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_AT = "last_activity_at";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_AT)
  private OffsetDateTime lastActivityAt;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ContinuousProjectLinks links;

  public static final String SERIALIZED_NAME_MT_ENABLED = "mt_enabled";
  @SerializedName(SERIALIZED_NAME_MT_ENABLED)
  private Boolean mtEnabled;

  public static final String SERIALIZED_NAME_MT_ENGINE = "mt_engine";
  @SerializedName(SERIALIZED_NAME_MT_ENGINE)
  private String mtEngine;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSTEDIT_ENABLED = "postedit_enabled";
  @SerializedName(SERIALIZED_NAME_POSTEDIT_ENABLED)
  private Boolean posteditEnabled;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "source_language";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private String sourceLanguage;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private Subscription subscription;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "target_languages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private Long wordCount;

  public ContinuousProject() {
  }

  public ContinuousProject analyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
    return this;
  }

  /**
   * Should we collect analytics data from Active for this continuous project?
   * @return analyticsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnalyticsEnabled() {
    return analyticsEnabled;
  }

  public void setAnalyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
  }


  public ContinuousProject autoStartPostedit(Boolean autoStartPostedit) {
    this.autoStartPostedit = autoStartPostedit;
    return this;
  }

  /**
   * Immediately start post-editing project for translation requests that are applied MT.
   * @return autoStartPostedit
   */
  @javax.annotation.Nullable
  public Boolean getAutoStartPostedit() {
    return autoStartPostedit;
  }

  public void setAutoStartPostedit(Boolean autoStartPostedit) {
    this.autoStartPostedit = autoStartPostedit;
  }


  public ContinuousProject createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ContinuousProject id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ContinuousProject isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Get isEnabled
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ContinuousProject lastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    return this;
  }

  /**
   * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return lastActivityAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActivityAt() {
    return lastActivityAt;
  }

  public void setLastActivityAt(OffsetDateTime lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
  }


  public ContinuousProject links(ContinuousProjectLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public ContinuousProjectLinks getLinks() {
    return links;
  }

  public void setLinks(ContinuousProjectLinks links) {
    this.links = links;
  }


  public ContinuousProject mtEnabled(Boolean mtEnabled) {
    this.mtEnabled = mtEnabled;
    return this;
  }

  /**
   * Immediately apply MT on translation requests if they are missing from TM.
   * @return mtEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMtEnabled() {
    return mtEnabled;
  }

  public void setMtEnabled(Boolean mtEnabled) {
    this.mtEnabled = mtEnabled;
  }


  public ContinuousProject mtEngine(String mtEngine) {
    this.mtEngine = mtEngine;
    return this;
  }

  /**
   * One of \&quot;MOTAWORD\&quot;, \&quot;GOOGLE\&quot;, \&quot;AMAZON\&quot;, \&quot;MS\&quot;. Default is \&quot;MOTAWORD\&quot;.
   * @return mtEngine
   */
  @javax.annotation.Nullable
  public String getMtEngine() {
    return mtEngine;
  }

  public void setMtEngine(String mtEngine) {
    this.mtEngine = mtEngine;
  }


  public ContinuousProject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContinuousProject posteditEnabled(Boolean posteditEnabled) {
    this.posteditEnabled = posteditEnabled;
    return this;
  }

  /**
   * Get an instant quote for translation requests that are applied MT.
   * @return posteditEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPosteditEnabled() {
    return posteditEnabled;
  }

  public void setPosteditEnabled(Boolean posteditEnabled) {
    this.posteditEnabled = posteditEnabled;
  }


  public ContinuousProject sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

  /**
   * Get sourceLanguage
   * @return sourceLanguage
   */
  @javax.annotation.Nullable
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public ContinuousProject status(String status) {
    this.status = status;
    return this;
  }

  /**
   * One of \&quot;a &#x3D;&gt; ACTIVE\&quot;, \&quot;i &#x3D;&gt; INACTIVE\&quot;, \&quot;d &#x3D;&gt; DELETED\&quot;, \&quot;c &#x3D;&gt; SCHEDULED CANCELLATION\&quot;, \&quot;p &#x3D;&gt; SCHEDULED CHANGE\&quot;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ContinuousProject subscription(Subscription subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public Subscription getSubscription() {
    return subscription;
  }

  public void setSubscription(Subscription subscription) {
    this.subscription = subscription;
  }


  public ContinuousProject targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public ContinuousProject addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * Get targetLanguages
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public ContinuousProject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Continuous project type. We currently have only 2 types, NULL and \&quot;active\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ContinuousProject wordCount(Long wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * Get wordCount
   * @return wordCount
   */
  @javax.annotation.Nullable
  public Long getWordCount() {
    return wordCount;
  }

  public void setWordCount(Long wordCount) {
    this.wordCount = wordCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinuousProject continuousProject = (ContinuousProject) o;
    return Objects.equals(this.analyticsEnabled, continuousProject.analyticsEnabled) &&
        Objects.equals(this.autoStartPostedit, continuousProject.autoStartPostedit) &&
        Objects.equals(this.createdAt, continuousProject.createdAt) &&
        Objects.equals(this.id, continuousProject.id) &&
        Objects.equals(this.isEnabled, continuousProject.isEnabled) &&
        Objects.equals(this.lastActivityAt, continuousProject.lastActivityAt) &&
        Objects.equals(this.links, continuousProject.links) &&
        Objects.equals(this.mtEnabled, continuousProject.mtEnabled) &&
        Objects.equals(this.mtEngine, continuousProject.mtEngine) &&
        Objects.equals(this.name, continuousProject.name) &&
        Objects.equals(this.posteditEnabled, continuousProject.posteditEnabled) &&
        Objects.equals(this.sourceLanguage, continuousProject.sourceLanguage) &&
        Objects.equals(this.status, continuousProject.status) &&
        Objects.equals(this.subscription, continuousProject.subscription) &&
        Objects.equals(this.targetLanguages, continuousProject.targetLanguages) &&
        Objects.equals(this.type, continuousProject.type) &&
        Objects.equals(this.wordCount, continuousProject.wordCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsEnabled, autoStartPostedit, createdAt, id, isEnabled, lastActivityAt, links, mtEnabled, mtEngine, name, posteditEnabled, sourceLanguage, status, subscription, targetLanguages, type, wordCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinuousProject {\n");
    sb.append("    analyticsEnabled: ").append(toIndentedString(analyticsEnabled)).append("\n");
    sb.append("    autoStartPostedit: ").append(toIndentedString(autoStartPostedit)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    lastActivityAt: ").append(toIndentedString(lastActivityAt)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mtEnabled: ").append(toIndentedString(mtEnabled)).append("\n");
    sb.append("    mtEngine: ").append(toIndentedString(mtEngine)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    posteditEnabled: ").append(toIndentedString(posteditEnabled)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics_enabled");
    openapiFields.add("auto_start_postedit");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("is_enabled");
    openapiFields.add("last_activity_at");
    openapiFields.add("links");
    openapiFields.add("mt_enabled");
    openapiFields.add("mt_engine");
    openapiFields.add("name");
    openapiFields.add("postedit_enabled");
    openapiFields.add("source_language");
    openapiFields.add("status");
    openapiFields.add("subscription");
    openapiFields.add("target_languages");
    openapiFields.add("type");
    openapiFields.add("word_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinuousProject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinuousProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinuousProject is not found in the empty JSON string", ContinuousProject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinuousProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinuousProject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        ContinuousProjectLinks.validateJsonElement(jsonObj.get("links"));
      }
      if ((jsonObj.get("mt_engine") != null && !jsonObj.get("mt_engine").isJsonNull()) && !jsonObj.get("mt_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mt_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mt_engine").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_language") != null && !jsonObj.get("source_language").isJsonNull()) && !jsonObj.get("source_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_language").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        Subscription.validateJsonElement(jsonObj.get("subscription"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_languages") != null && !jsonObj.get("target_languages").isJsonNull() && !jsonObj.get("target_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_languages` to be an array in the JSON string but got `%s`", jsonObj.get("target_languages").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinuousProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinuousProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinuousProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinuousProject.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinuousProject>() {
           @Override
           public void write(JsonWriter out, ContinuousProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinuousProject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinuousProject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinuousProject
   * @throws IOException if the JSON string is invalid with respect to ContinuousProject
   */
  public static ContinuousProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinuousProject.class);
  }

  /**
   * Convert an instance of ContinuousProject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

