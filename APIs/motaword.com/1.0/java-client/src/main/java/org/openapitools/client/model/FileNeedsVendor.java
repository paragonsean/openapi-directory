/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FileNeedsVendor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileNeedsVendor {
  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private Long fileId;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE = "targetLanguage";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE)
  private List<String> targetLanguage = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private List<String> taskType = new ArrayList<>();

  public FileNeedsVendor() {
  }

  public FileNeedsVendor fileId(Long fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * Get fileId
   * @return fileId
   */
  @javax.annotation.Nullable
  public Long getFileId() {
    return fileId;
  }

  public void setFileId(Long fileId) {
    this.fileId = fileId;
  }


  public FileNeedsVendor guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Get guid
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public FileNeedsVendor projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public FileNeedsVendor reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public FileNeedsVendor targetLanguage(List<String> targetLanguage) {
    this.targetLanguage = targetLanguage;
    return this;
  }

  public FileNeedsVendor addTargetLanguageItem(String targetLanguageItem) {
    if (this.targetLanguage == null) {
      this.targetLanguage = new ArrayList<>();
    }
    this.targetLanguage.add(targetLanguageItem);
    return this;
  }

  /**
   * Get targetLanguage
   * @return targetLanguage
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguage() {
    return targetLanguage;
  }

  public void setTargetLanguage(List<String> targetLanguage) {
    this.targetLanguage = targetLanguage;
  }


  public FileNeedsVendor taskType(List<String> taskType) {
    this.taskType = taskType;
    return this;
  }

  public FileNeedsVendor addTaskTypeItem(String taskTypeItem) {
    if (this.taskType == null) {
      this.taskType = new ArrayList<>();
    }
    this.taskType.add(taskTypeItem);
    return this;
  }

  /**
   * Get taskType
   * @return taskType
   */
  @javax.annotation.Nullable
  public List<String> getTaskType() {
    return taskType;
  }

  public void setTaskType(List<String> taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileNeedsVendor fileNeedsVendor = (FileNeedsVendor) o;
    return Objects.equals(this.fileId, fileNeedsVendor.fileId) &&
        Objects.equals(this.guid, fileNeedsVendor.guid) &&
        Objects.equals(this.projectId, fileNeedsVendor.projectId) &&
        Objects.equals(this.reason, fileNeedsVendor.reason) &&
        Objects.equals(this.targetLanguage, fileNeedsVendor.targetLanguage) &&
        Objects.equals(this.taskType, fileNeedsVendor.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, guid, projectId, reason, targetLanguage, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileNeedsVendor {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    targetLanguage: ").append(toIndentedString(targetLanguage)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileId");
    openapiFields.add("guid");
    openapiFields.add("projectId");
    openapiFields.add("reason");
    openapiFields.add("targetLanguage");
    openapiFields.add("taskType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileNeedsVendor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileNeedsVendor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileNeedsVendor is not found in the empty JSON string", FileNeedsVendor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileNeedsVendor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileNeedsVendor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetLanguage") != null && !jsonObj.get("targetLanguage").isJsonNull() && !jsonObj.get("targetLanguage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLanguage` to be an array in the JSON string but got `%s`", jsonObj.get("targetLanguage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("taskType") != null && !jsonObj.get("taskType").isJsonNull() && !jsonObj.get("taskType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be an array in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileNeedsVendor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileNeedsVendor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileNeedsVendor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileNeedsVendor.class));

       return (TypeAdapter<T>) new TypeAdapter<FileNeedsVendor>() {
           @Override
           public void write(JsonWriter out, FileNeedsVendor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileNeedsVendor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileNeedsVendor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileNeedsVendor
   * @throws IOException if the JSON string is invalid with respect to FileNeedsVendor
   */
  public static FileNeedsVendor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileNeedsVendor.class);
  }

  /**
   * Convert an instance of FileNeedsVendor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

