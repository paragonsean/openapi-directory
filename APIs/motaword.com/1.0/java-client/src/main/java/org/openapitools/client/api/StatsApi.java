/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClientProjectStats;
import org.openapitools.client.model.ClientStringStats;
import org.openapitools.client.model.CommissionStats;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PopularLanguagePairs;
import org.openapitools.client.model.ReportFilter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCommissionStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommissionStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/commissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommissionStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCommissionStatsCall(_callback);

    }

    /**
     * Returns the total commissions stats.
     * 
     * @return CommissionStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public CommissionStats getCommissionStats() throws ApiException {
        ApiResponse<CommissionStats> localVarResp = getCommissionStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the total commissions stats.
     * 
     * @return ApiResponse&lt;CommissionStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommissionStats> getCommissionStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCommissionStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CommissionStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the total commissions stats. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommissionStatsAsync(final ApiCallback<CommissionStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommissionStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CommissionStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommissionStatsByFilter
     * @param reportFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommissionStatsByFilterCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportFilter;

        // create path and map variables
        String localVarPath = "/stats/commissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommissionStatsByFilterValidateBeforeCall(ReportFilter reportFilter, final ApiCallback _callback) throws ApiException {
        return getCommissionStatsByFilterCall(reportFilter, _callback);

    }

    /**
     * Returns the total commissions stats by report filter.
     * 
     * @param reportFilter  (optional)
     * @return CommissionStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public CommissionStats getCommissionStatsByFilter(ReportFilter reportFilter) throws ApiException {
        ApiResponse<CommissionStats> localVarResp = getCommissionStatsByFilterWithHttpInfo(reportFilter);
        return localVarResp.getData();
    }

    /**
     * Returns the total commissions stats by report filter.
     * 
     * @param reportFilter  (optional)
     * @return ApiResponse&lt;CommissionStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommissionStats> getCommissionStatsByFilterWithHttpInfo(ReportFilter reportFilter) throws ApiException {
        okhttp3.Call localVarCall = getCommissionStatsByFilterValidateBeforeCall(reportFilter, null);
        Type localVarReturnType = new TypeToken<CommissionStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the total commissions stats by report filter. (asynchronously)
     * 
     * @param reportFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User&#39;s commission stats </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UnauthorizedUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommissionStatsByFilterAsync(ReportFilter reportFilter, final ApiCallback<CommissionStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommissionStatsByFilterValidateBeforeCall(reportFilter, _callback);
        Type localVarReturnType = new TypeToken<CommissionStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPopularPairs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularPairsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/popular-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPopularPairsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPopularPairsCall(_callback);

    }

    /**
     * View your popular language pairs
     * 
     * @return PopularLanguagePairs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public PopularLanguagePairs getPopularPairs() throws ApiException {
        ApiResponse<PopularLanguagePairs> localVarResp = getPopularPairsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your popular language pairs
     * 
     * @return ApiResponse&lt;PopularLanguagePairs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PopularLanguagePairs> getPopularPairsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPopularPairsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PopularLanguagePairs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your popular language pairs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your most ordered language pairs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularPairsAsync(final ApiCallback<PopularLanguagePairs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPopularPairsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PopularLanguagePairs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProjectStatsCall(_callback);

    }

    /**
     * View your project statistics
     * 
     * @return ClientProjectStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ClientProjectStats getProjectStats() throws ApiException {
        ApiResponse<ClientProjectStats> localVarResp = getProjectStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your project statistics
     * 
     * @return ApiResponse&lt;ClientProjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientProjectStats> getProjectStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProjectStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClientProjectStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your project statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectStatsAsync(final ApiCallback<ClientProjectStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClientProjectStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStringStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStringStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/strings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStringStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStringStatsCall(_callback);

    }

    /**
     * View your translation statistics
     * 
     * @return ClientStringStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ClientStringStats getStringStats() throws ApiException {
        ApiResponse<ClientStringStats> localVarResp = getStringStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View your translation statistics
     * 
     * @return ApiResponse&lt;ClientStringStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientStringStats> getStringStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStringStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ClientStringStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View your translation statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Translation statistics for your account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStringStatsAsync(final ApiCallback<ClientStringStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStringStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ClientStringStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
