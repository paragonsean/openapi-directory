/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimpleModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FilterContents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterContents {
  public static final String SERIALIZED_NAME_BUDGET_CODES = "budget_codes";
  @SerializedName(SERIALIZED_NAME_BUDGET_CODES)
  private List<String> budgetCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  private List<SimpleModel> clients = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<SimpleModel> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private List<SimpleModel> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List<String> severities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGES = "source_languages";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGES)
  private List<String> sourceLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "target_languages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<SimpleModel> vendors = new ArrayList<>();

  public FilterContents() {
  }

  public FilterContents budgetCodes(List<String> budgetCodes) {
    this.budgetCodes = budgetCodes;
    return this;
  }

  public FilterContents addBudgetCodesItem(String budgetCodesItem) {
    if (this.budgetCodes == null) {
      this.budgetCodes = new ArrayList<>();
    }
    this.budgetCodes.add(budgetCodesItem);
    return this;
  }

  /**
   * Get budgetCodes
   * @return budgetCodes
   */
  @javax.annotation.Nullable
  public List<String> getBudgetCodes() {
    return budgetCodes;
  }

  public void setBudgetCodes(List<String> budgetCodes) {
    this.budgetCodes = budgetCodes;
  }


  public FilterContents categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public FilterContents addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public FilterContents clients(List<SimpleModel> clients) {
    this.clients = clients;
    return this;
  }

  public FilterContents addClientsItem(SimpleModel clientsItem) {
    if (this.clients == null) {
      this.clients = new ArrayList<>();
    }
    this.clients.add(clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public List<SimpleModel> getClients() {
    return clients;
  }

  public void setClients(List<SimpleModel> clients) {
    this.clients = clients;
  }


  public FilterContents documents(List<SimpleModel> documents) {
    this.documents = documents;
    return this;
  }

  public FilterContents addDocumentsItem(SimpleModel documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public List<SimpleModel> getDocuments() {
    return documents;
  }

  public void setDocuments(List<SimpleModel> documents) {
    this.documents = documents;
  }


  public FilterContents projects(List<SimpleModel> projects) {
    this.projects = projects;
    return this;
  }

  public FilterContents addProjectsItem(SimpleModel projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public List<SimpleModel> getProjects() {
    return projects;
  }

  public void setProjects(List<SimpleModel> projects) {
    this.projects = projects;
  }


  public FilterContents severities(List<String> severities) {
    this.severities = severities;
    return this;
  }

  public FilterContents addSeveritiesItem(String severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

  /**
   * Get severities
   * @return severities
   */
  @javax.annotation.Nullable
  public List<String> getSeverities() {
    return severities;
  }

  public void setSeverities(List<String> severities) {
    this.severities = severities;
  }


  public FilterContents sourceLanguages(List<String> sourceLanguages) {
    this.sourceLanguages = sourceLanguages;
    return this;
  }

  public FilterContents addSourceLanguagesItem(String sourceLanguagesItem) {
    if (this.sourceLanguages == null) {
      this.sourceLanguages = new ArrayList<>();
    }
    this.sourceLanguages.add(sourceLanguagesItem);
    return this;
  }

  /**
   * Get sourceLanguages
   * @return sourceLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSourceLanguages() {
    return sourceLanguages;
  }

  public void setSourceLanguages(List<String> sourceLanguages) {
    this.sourceLanguages = sourceLanguages;
  }


  public FilterContents subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public FilterContents addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Get subjects
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public FilterContents targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public FilterContents addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * Get targetLanguages
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public FilterContents vendors(List<SimpleModel> vendors) {
    this.vendors = vendors;
    return this;
  }

  public FilterContents addVendorsItem(SimpleModel vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * Get vendors
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<SimpleModel> getVendors() {
    return vendors;
  }

  public void setVendors(List<SimpleModel> vendors) {
    this.vendors = vendors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterContents filterContents = (FilterContents) o;
    return Objects.equals(this.budgetCodes, filterContents.budgetCodes) &&
        Objects.equals(this.categories, filterContents.categories) &&
        Objects.equals(this.clients, filterContents.clients) &&
        Objects.equals(this.documents, filterContents.documents) &&
        Objects.equals(this.projects, filterContents.projects) &&
        Objects.equals(this.severities, filterContents.severities) &&
        Objects.equals(this.sourceLanguages, filterContents.sourceLanguages) &&
        Objects.equals(this.subjects, filterContents.subjects) &&
        Objects.equals(this.targetLanguages, filterContents.targetLanguages) &&
        Objects.equals(this.vendors, filterContents.vendors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetCodes, categories, clients, documents, projects, severities, sourceLanguages, subjects, targetLanguages, vendors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterContents {\n");
    sb.append("    budgetCodes: ").append(toIndentedString(budgetCodes)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    sourceLanguages: ").append(toIndentedString(sourceLanguages)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budget_codes");
    openapiFields.add("categories");
    openapiFields.add("clients");
    openapiFields.add("documents");
    openapiFields.add("projects");
    openapiFields.add("severities");
    openapiFields.add("source_languages");
    openapiFields.add("subjects");
    openapiFields.add("target_languages");
    openapiFields.add("vendors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterContents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterContents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterContents is not found in the empty JSON string", FilterContents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterContents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterContents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("budget_codes") != null && !jsonObj.get("budget_codes").isJsonNull() && !jsonObj.get("budget_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_codes` to be an array in the JSON string but got `%s`", jsonObj.get("budget_codes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (jsonObj.get("clients") != null && !jsonObj.get("clients").isJsonNull()) {
        JsonArray jsonArrayclients = jsonObj.getAsJsonArray("clients");
        if (jsonArrayclients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clients` to be an array in the JSON string but got `%s`", jsonObj.get("clients").toString()));
          }

          // validate the optional field `clients` (array)
          for (int i = 0; i < jsonArrayclients.size(); i++) {
            SimpleModel.validateJsonElement(jsonArrayclients.get(i));
          };
        }
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            SimpleModel.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        JsonArray jsonArrayprojects = jsonObj.getAsJsonArray("projects");
        if (jsonArrayprojects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
          }

          // validate the optional field `projects` (array)
          for (int i = 0; i < jsonArrayprojects.size(); i++) {
            SimpleModel.validateJsonElement(jsonArrayprojects.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("severities") != null && !jsonObj.get("severities").isJsonNull() && !jsonObj.get("severities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("source_languages") != null && !jsonObj.get("source_languages").isJsonNull() && !jsonObj.get("source_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_languages` to be an array in the JSON string but got `%s`", jsonObj.get("source_languages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_languages") != null && !jsonObj.get("target_languages").isJsonNull() && !jsonObj.get("target_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_languages` to be an array in the JSON string but got `%s`", jsonObj.get("target_languages").toString()));
      }
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull()) {
        JsonArray jsonArrayvendors = jsonObj.getAsJsonArray("vendors");
        if (jsonArrayvendors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
          }

          // validate the optional field `vendors` (array)
          for (int i = 0; i < jsonArrayvendors.size(); i++) {
            SimpleModel.validateJsonElement(jsonArrayvendors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterContents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterContents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterContents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterContents.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterContents>() {
           @Override
           public void write(JsonWriter out, FilterContents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterContents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterContents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterContents
   * @throws IOException if the JSON string is invalid with respect to FilterContents
   */
  public static FilterContents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterContents.class);
  }

  /**
   * Convert an instance of FilterContents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

