/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_DOWNGRADE = "downgrade";
  @SerializedName(SERIALIZED_NAME_DOWNGRADE)
  private List<String> downgrade = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private Integer paymentMethod;

  public static final String SERIALIZED_NAME_PERIOD_END = "period_end";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private OffsetDateTime periodEnd;

  public static final String SERIALIZED_NAME_PLAN_ID = "plan_id";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PLAN_NAME = "plan_name";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Object> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE_NAME = "schedule_name";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_NAME)
  private String scheduleName;

  public static final String SERIALIZED_NAME_SCHEDULE_START = "schedule_start";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START)
  private OffsetDateTime scheduleStart;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_UPGRADE = "upgrade";
  @SerializedName(SERIALIZED_NAME_UPGRADE)
  private List<String> upgrade = new ArrayList<>();

  public static final String SERIALIZED_NAME_WITH_TRIAL = "withTrial";
  @SerializedName(SERIALIZED_NAME_WITH_TRIAL)
  private Object withTrial = null;

  public Subscription() {
  }

  public Subscription downgrade(List<String> downgrade) {
    this.downgrade = downgrade;
    return this;
  }

  public Subscription addDowngradeItem(String downgradeItem) {
    if (this.downgrade == null) {
      this.downgrade = new ArrayList<>();
    }
    this.downgrade.add(downgradeItem);
    return this;
  }

  /**
   * Stripe downgradable plan
   * @return downgrade
   */
  @javax.annotation.Nullable
  public List<String> getDowngrade() {
    return downgrade;
  }

  public void setDowngrade(List<String> downgrade) {
    this.downgrade = downgrade;
  }


  public Subscription paymentMethod(Integer paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Stripe subscription plan payment card internal id
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public Integer getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(Integer paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Subscription periodEnd(OffsetDateTime periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * Stripe plan period end
   * @return periodEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(OffsetDateTime periodEnd) {
    this.periodEnd = periodEnd;
  }


  public Subscription planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * Stripe subscription plan id
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public Subscription planName(String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * Stripe subscription plan name
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public Subscription price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Stripe plan price
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public Subscription products(List<Object> products) {
    this.products = products;
    return this;
  }

  public Subscription addProductsItem(Object productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public List<Object> getProducts() {
    return products;
  }

  public void setProducts(List<Object> products) {
    this.products = products;
  }


  public Subscription scheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
    return this;
  }

  /**
   * Stripe Scheduled plan period end
   * @return scheduleName
   */
  @javax.annotation.Nullable
  public String getScheduleName() {
    return scheduleName;
  }

  public void setScheduleName(String scheduleName) {
    this.scheduleName = scheduleName;
  }


  public Subscription scheduleStart(OffsetDateTime scheduleStart) {
    this.scheduleStart = scheduleStart;
    return this;
  }

  /**
   * Stripe Scheduled start date
   * @return scheduleStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduleStart() {
    return scheduleStart;
  }

  public void setScheduleStart(OffsetDateTime scheduleStart) {
    this.scheduleStart = scheduleStart;
  }


  public Subscription subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Stripe subscription id for this project
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Subscription upgrade(List<String> upgrade) {
    this.upgrade = upgrade;
    return this;
  }

  public Subscription addUpgradeItem(String upgradeItem) {
    if (this.upgrade == null) {
      this.upgrade = new ArrayList<>();
    }
    this.upgrade.add(upgradeItem);
    return this;
  }

  /**
   * Stripe upgradable plan
   * @return upgrade
   */
  @javax.annotation.Nullable
  public List<String> getUpgrade() {
    return upgrade;
  }

  public void setUpgrade(List<String> upgrade) {
    this.upgrade = upgrade;
  }


  public Subscription withTrial(Object withTrial) {
    this.withTrial = withTrial;
    return this;
  }

  /**
   * Stripe plan trial
   * @return withTrial
   */
  @javax.annotation.Nullable
  public Object getWithTrial() {
    return withTrial;
  }

  public void setWithTrial(Object withTrial) {
    this.withTrial = withTrial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.downgrade, subscription.downgrade) &&
        Objects.equals(this.paymentMethod, subscription.paymentMethod) &&
        Objects.equals(this.periodEnd, subscription.periodEnd) &&
        Objects.equals(this.planId, subscription.planId) &&
        Objects.equals(this.planName, subscription.planName) &&
        Objects.equals(this.price, subscription.price) &&
        Objects.equals(this.products, subscription.products) &&
        Objects.equals(this.scheduleName, subscription.scheduleName) &&
        Objects.equals(this.scheduleStart, subscription.scheduleStart) &&
        Objects.equals(this.subscriptionId, subscription.subscriptionId) &&
        Objects.equals(this.upgrade, subscription.upgrade) &&
        Objects.equals(this.withTrial, subscription.withTrial);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(downgrade, paymentMethod, periodEnd, planId, planName, price, products, scheduleName, scheduleStart, subscriptionId, upgrade, withTrial);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    downgrade: ").append(toIndentedString(downgrade)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    scheduleName: ").append(toIndentedString(scheduleName)).append("\n");
    sb.append("    scheduleStart: ").append(toIndentedString(scheduleStart)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    upgrade: ").append(toIndentedString(upgrade)).append("\n");
    sb.append("    withTrial: ").append(toIndentedString(withTrial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downgrade");
    openapiFields.add("payment_method");
    openapiFields.add("period_end");
    openapiFields.add("plan_id");
    openapiFields.add("plan_name");
    openapiFields.add("price");
    openapiFields.add("products");
    openapiFields.add("schedule_name");
    openapiFields.add("schedule_start");
    openapiFields.add("subscription_id");
    openapiFields.add("upgrade");
    openapiFields.add("withTrial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("downgrade") != null && !jsonObj.get("downgrade").isJsonNull() && !jsonObj.get("downgrade").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `downgrade` to be an array in the JSON string but got `%s`", jsonObj.get("downgrade").toString()));
      }
      if ((jsonObj.get("plan_id") != null && !jsonObj.get("plan_id").isJsonNull()) && !jsonObj.get("plan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_id").toString()));
      }
      if ((jsonObj.get("plan_name") != null && !jsonObj.get("plan_name").isJsonNull()) && !jsonObj.get("plan_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_name").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      if ((jsonObj.get("schedule_name") != null && !jsonObj.get("schedule_name").isJsonNull()) && !jsonObj.get("schedule_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_name").toString()));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upgrade") != null && !jsonObj.get("upgrade").isJsonNull() && !jsonObj.get("upgrade").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgrade` to be an array in the JSON string but got `%s`", jsonObj.get("upgrade").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

