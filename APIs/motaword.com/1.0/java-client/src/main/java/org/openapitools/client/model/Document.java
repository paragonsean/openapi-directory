/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentLinks;
import org.openapitools.client.model.ManualFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:52.387191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_PACKAGE = "has_custom_package";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_PACKAGE)
  private Boolean hasCustomPackage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private DocumentLinks links;

  public static final String SERIALIZED_NAME_MANUAL_FILES = "manual_files";
  @SerializedName(SERIALIZED_NAME_MANUAL_FILES)
  private List<ManualFile> manualFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_REVIEW_IN_MANUAL_EDITOR = "review_in_manual_editor";
  @SerializedName(SERIALIZED_NAME_REVIEW_IN_MANUAL_EDITOR)
  private Boolean reviewInManualEditor;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private Object scheme;

  public static final String SERIALIZED_NAME_SEARCH_SCORE = "search_score";
  @SerializedName(SERIALIZED_NAME_SEARCH_SCORE)
  private Float searchScore;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "source_language";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private String sourceLanguage;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES = "target_languages";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES)
  private List<String> targetLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private Long uploadedAt;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private Long wordCount;

  public Document() {
  }

  public Document fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Extension of the file
   * @return fileType
   */
  @javax.annotation.Nullable
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public Document hasCustomPackage(Boolean hasCustomPackage) {
    this.hasCustomPackage = hasCustomPackage;
    return this;
  }

  /**
   * Get hasCustomPackage
   * @return hasCustomPackage
   */
  @javax.annotation.Nullable
  public Boolean getHasCustomPackage() {
    return hasCustomPackage;
  }

  public void setHasCustomPackage(Boolean hasCustomPackage) {
    this.hasCustomPackage = hasCustomPackage;
  }


  public Document id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Document links(DocumentLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public DocumentLinks getLinks() {
    return links;
  }

  public void setLinks(DocumentLinks links) {
    this.links = links;
  }


  public Document manualFiles(List<ManualFile> manualFiles) {
    this.manualFiles = manualFiles;
    return this;
  }

  public Document addManualFilesItem(ManualFile manualFilesItem) {
    if (this.manualFiles == null) {
      this.manualFiles = new ArrayList<>();
    }
    this.manualFiles.add(manualFilesItem);
    return this;
  }

  /**
   * Get manualFiles
   * @return manualFiles
   */
  @javax.annotation.Nullable
  public List<ManualFile> getManualFiles() {
    return manualFiles;
  }

  public void setManualFiles(List<ManualFile> manualFiles) {
    this.manualFiles = manualFiles;
  }


  public Document name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Document projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public Document reviewInManualEditor(Boolean reviewInManualEditor) {
    this.reviewInManualEditor = reviewInManualEditor;
    return this;
  }

  /**
   * Get reviewInManualEditor
   * @return reviewInManualEditor
   */
  @javax.annotation.Nullable
  public Boolean getReviewInManualEditor() {
    return reviewInManualEditor;
  }

  public void setReviewInManualEditor(Boolean reviewInManualEditor) {
    this.reviewInManualEditor = reviewInManualEditor;
  }


  public Document scheme(Object scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * Get scheme
   * @return scheme
   */
  @javax.annotation.Nullable
  public Object getScheme() {
    return scheme;
  }

  public void setScheme(Object scheme) {
    this.scheme = scheme;
  }


  public Document searchScore(Float searchScore) {
    this.searchScore = searchScore;
    return this;
  }

  /**
   * Get searchScore
   * @return searchScore
   */
  @javax.annotation.Nullable
  public Float getSearchScore() {
    return searchScore;
  }

  public void setSearchScore(Float searchScore) {
    this.searchScore = searchScore;
  }


  public Document sourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    return this;
  }

  /**
   * Get sourceLanguage
   * @return sourceLanguage
   */
  @javax.annotation.Nullable
  public String getSourceLanguage() {
    return sourceLanguage;
  }

  public void setSourceLanguage(String sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public Document subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Document targetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
    return this;
  }

  public Document addTargetLanguagesItem(String targetLanguagesItem) {
    if (this.targetLanguages == null) {
      this.targetLanguages = new ArrayList<>();
    }
    this.targetLanguages.add(targetLanguagesItem);
    return this;
  }

  /**
   * Get targetLanguages
   * @return targetLanguages
   */
  @javax.annotation.Nullable
  public List<String> getTargetLanguages() {
    return targetLanguages;
  }

  public void setTargetLanguages(List<String> targetLanguages) {
    this.targetLanguages = targetLanguages;
  }


  public Document uploadedAt(Long uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * Unix epoch time
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public Long getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(Long uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public Document wordCount(Long wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * Get wordCount
   * @return wordCount
   */
  @javax.annotation.Nullable
  public Long getWordCount() {
    return wordCount;
  }

  public void setWordCount(Long wordCount) {
    this.wordCount = wordCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.fileType, document.fileType) &&
        Objects.equals(this.hasCustomPackage, document.hasCustomPackage) &&
        Objects.equals(this.id, document.id) &&
        Objects.equals(this.links, document.links) &&
        Objects.equals(this.manualFiles, document.manualFiles) &&
        Objects.equals(this.name, document.name) &&
        Objects.equals(this.projectId, document.projectId) &&
        Objects.equals(this.reviewInManualEditor, document.reviewInManualEditor) &&
        Objects.equals(this.scheme, document.scheme) &&
        Objects.equals(this.searchScore, document.searchScore) &&
        Objects.equals(this.sourceLanguage, document.sourceLanguage) &&
        Objects.equals(this.subject, document.subject) &&
        Objects.equals(this.targetLanguages, document.targetLanguages) &&
        Objects.equals(this.uploadedAt, document.uploadedAt) &&
        Objects.equals(this.wordCount, document.wordCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileType, hasCustomPackage, id, links, manualFiles, name, projectId, reviewInManualEditor, scheme, searchScore, sourceLanguage, subject, targetLanguages, uploadedAt, wordCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    hasCustomPackage: ").append(toIndentedString(hasCustomPackage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    manualFiles: ").append(toIndentedString(manualFiles)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    reviewInManualEditor: ").append(toIndentedString(reviewInManualEditor)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    searchScore: ").append(toIndentedString(searchScore)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    targetLanguages: ").append(toIndentedString(targetLanguages)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file_type");
    openapiFields.add("has_custom_package");
    openapiFields.add("id");
    openapiFields.add("links");
    openapiFields.add("manual_files");
    openapiFields.add("name");
    openapiFields.add("project_id");
    openapiFields.add("review_in_manual_editor");
    openapiFields.add("scheme");
    openapiFields.add("search_score");
    openapiFields.add("source_language");
    openapiFields.add("subject");
    openapiFields.add("target_languages");
    openapiFields.add("uploaded_at");
    openapiFields.add("word_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("file_type") != null && !jsonObj.get("file_type").isJsonNull()) && !jsonObj.get("file_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_type").toString()));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        DocumentLinks.validateJsonElement(jsonObj.get("links"));
      }
      if (jsonObj.get("manual_files") != null && !jsonObj.get("manual_files").isJsonNull()) {
        JsonArray jsonArraymanualFiles = jsonObj.getAsJsonArray("manual_files");
        if (jsonArraymanualFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manual_files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manual_files` to be an array in the JSON string but got `%s`", jsonObj.get("manual_files").toString()));
          }

          // validate the optional field `manual_files` (array)
          for (int i = 0; i < jsonArraymanualFiles.size(); i++) {
            ManualFile.validateJsonElement(jsonArraymanualFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_language") != null && !jsonObj.get("source_language").isJsonNull()) && !jsonObj.get("source_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_language").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_languages") != null && !jsonObj.get("target_languages").isJsonNull() && !jsonObj.get("target_languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_languages` to be an array in the JSON string but got `%s`", jsonObj.get("target_languages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

