/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountGlossaryUploadRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Glossary;
import org.openapitools.client.model.GlossaryList;
import org.openapitools.client.model.GlossaryUploadRequest;
import org.openapitools.client.model.OperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlossaryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlossaryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlossaryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGlossary
     * @param projectId Project ID (required)
     * @param glossaryUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created glossary model. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlossaryCall(Long projectId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = glossaryUploadRequest;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGlossaryValidateBeforeCall(Long projectId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createGlossary(Async)");
        }

        return createGlossaryCall(projectId, glossaryUploadRequest, _callback);

    }

    /**
     * Upload a glossary file
     * Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
     * @param projectId Project ID (required)
     * @param glossaryUploadRequest  (optional)
     * @return Glossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created glossary model. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public Glossary createGlossary(Long projectId, GlossaryUploadRequest glossaryUploadRequest) throws ApiException {
        ApiResponse<Glossary> localVarResp = createGlossaryWithHttpInfo(projectId, glossaryUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Upload a glossary file
     * Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
     * @param projectId Project ID (required)
     * @param glossaryUploadRequest  (optional)
     * @return ApiResponse&lt;Glossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created glossary model. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Glossary> createGlossaryWithHttpInfo(Long projectId, GlossaryUploadRequest glossaryUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createGlossaryValidateBeforeCall(projectId, glossaryUploadRequest, null);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a glossary file (asynchronously)
     * Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
     * @param projectId Project ID (required)
     * @param glossaryUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created glossary model. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> ProjectAlreadyHasGlossary </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlossaryAsync(Long projectId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback<Glossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGlossaryValidateBeforeCall(projectId, glossaryUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGlossary
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlossaryCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries/{glossaryId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "glossaryId" + "}", localVarApiClient.escapeString(glossaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGlossaryValidateBeforeCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteGlossary(Async)");
        }

        // verify the required parameter 'glossaryId' is set
        if (glossaryId == null) {
            throw new ApiException("Missing the required parameter 'glossaryId' when calling deleteGlossary(Async)");
        }

        return deleteGlossaryCall(projectId, glossaryId, _callback);

    }

    /**
     * Delete a glossary
     * Delete the existing glossary from the project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus deleteGlossary(Long projectId, Long glossaryId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = deleteGlossaryWithHttpInfo(projectId, glossaryId);
        return localVarResp.getData();
    }

    /**
     * Delete a glossary
     * Delete the existing glossary from the project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> deleteGlossaryWithHttpInfo(Long projectId, Long glossaryId) throws ApiException {
        okhttp3.Call localVarCall = deleteGlossaryValidateBeforeCall(projectId, glossaryId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a glossary (asynchronously)
     * Delete the existing glossary from the project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlossaryAsync(Long projectId, Long glossaryId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGlossaryValidateBeforeCall(projectId, glossaryId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadGlobalGlossary
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalGlossaryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/glossary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGlobalGlossaryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return downloadGlobalGlossaryCall(_callback);

    }

    /**
     * Download account glossary.
     * Download your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadGlobalGlossary() throws ApiException {
        ApiResponse<String> localVarResp = downloadGlobalGlossaryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Download account glossary.
     * Download your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadGlobalGlossaryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = downloadGlobalGlossaryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download account glossary. (asynchronously)
     * Download your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary file streamed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlobalGlossaryAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGlobalGlossaryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadGlossary
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlossaryCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries/{glossaryId}/download"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "glossaryId" + "}", localVarApiClient.escapeString(glossaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadGlossaryValidateBeforeCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling downloadGlossary(Async)");
        }

        // verify the required parameter 'glossaryId' is set
        if (glossaryId == null) {
            throw new ApiException("Missing the required parameter 'glossaryId' when calling downloadGlossary(Async)");
        }

        return downloadGlossaryCall(projectId, glossaryId, _callback);

    }

    /**
     * Download a glossary
     * Download a previously uploaded glossary file.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public String downloadGlossary(Long projectId, Long glossaryId) throws ApiException {
        ApiResponse<String> localVarResp = downloadGlossaryWithHttpInfo(projectId, glossaryId);
        return localVarResp.getData();
    }

    /**
     * Download a glossary
     * Download a previously uploaded glossary file.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadGlossaryWithHttpInfo(Long projectId, Long glossaryId) throws ApiException {
        okhttp3.Call localVarCall = downloadGlossaryValidateBeforeCall(projectId, glossaryId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a glossary (asynchronously)
     * Download a previously uploaded glossary file.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary streamed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadGlossaryAsync(Long projectId, Long glossaryId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadGlossaryValidateBeforeCall(projectId, glossaryId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlossaries
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of glossary models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlossariesCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlossariesValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getGlossaries(Async)");
        }

        return getGlossariesCall(projectId, _callback);

    }

    /**
     * View glossaries
     * View a list of glossaries previously uploaded to the project.
     * @param projectId Project ID (required)
     * @return GlossaryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of glossary models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public GlossaryList getGlossaries(Long projectId) throws ApiException {
        ApiResponse<GlossaryList> localVarResp = getGlossariesWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * View glossaries
     * View a list of glossaries previously uploaded to the project.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;GlossaryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of glossary models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlossaryList> getGlossariesWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getGlossariesValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<GlossaryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View glossaries (asynchronously)
     * View a list of glossaries previously uploaded to the project.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of glossary models </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ProjectNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlossariesAsync(Long projectId, final ApiCallback<GlossaryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlossariesValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<GlossaryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlossary
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlossaryCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries/{glossaryId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "glossaryId" + "}", localVarApiClient.escapeString(glossaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlossaryValidateBeforeCall(Long projectId, Long glossaryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getGlossary(Async)");
        }

        // verify the required parameter 'glossaryId' is set
        if (glossaryId == null) {
            throw new ApiException("Missing the required parameter 'glossaryId' when calling getGlossary(Async)");
        }

        return getGlossaryCall(projectId, glossaryId, _callback);

    }

    /**
     * View a glossary
     * View the details of a glossary file uploaded to a project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return Glossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public Glossary getGlossary(Long projectId, Long glossaryId) throws ApiException {
        ApiResponse<Glossary> localVarResp = getGlossaryWithHttpInfo(projectId, glossaryId);
        return localVarResp.getData();
    }

    /**
     * View a glossary
     * View the details of a glossary file uploaded to a project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @return ApiResponse&lt;Glossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Glossary> getGlossaryWithHttpInfo(Long projectId, Long glossaryId) throws ApiException {
        okhttp3.Call localVarCall = getGlossaryValidateBeforeCall(projectId, glossaryId, null);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a glossary (asynchronously)
     * View the details of a glossary file uploaded to a project.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Glossary model </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlossaryAsync(Long projectId, Long glossaryId, final ApiCallback<Glossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlossaryValidateBeforeCall(projectId, glossaryId, _callback);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalGlossary
     * @param accountGlossaryUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalGlossaryCall(AccountGlossaryUploadRequest accountGlossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountGlossaryUploadRequest;

        // create path and map variables
        String localVarPath = "/glossary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalGlossaryValidateBeforeCall(AccountGlossaryUploadRequest accountGlossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        return updateGlobalGlossaryCall(accountGlossaryUploadRequest, _callback);

    }

    /**
     * Create or update the account glossary
     * Update your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param accountGlossaryUploadRequest  (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus updateGlobalGlossary(AccountGlossaryUploadRequest accountGlossaryUploadRequest) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = updateGlobalGlossaryWithHttpInfo(accountGlossaryUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update the account glossary
     * Update your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param accountGlossaryUploadRequest  (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> updateGlobalGlossaryWithHttpInfo(AccountGlossaryUploadRequest accountGlossaryUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalGlossaryValidateBeforeCall(accountGlossaryUploadRequest, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update the account glossary (asynchronously)
     * Update your corporate account&#39;s global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
     * @param accountGlossaryUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge FileTooSmall NoFileUploaded </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalGlossaryAsync(AccountGlossaryUploadRequest accountGlossaryUploadRequest, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalGlossaryValidateBeforeCall(accountGlossaryUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlossary
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param glossaryUploadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated glossary model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlossaryCall(Long projectId, Long glossaryId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = glossaryUploadRequest;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/glossaries/{glossaryId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "glossaryId" + "}", localVarApiClient.escapeString(glossaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "mwoAuth", "mwoAuth", "mwoAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlossaryValidateBeforeCall(Long projectId, Long glossaryId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateGlossary(Async)");
        }

        // verify the required parameter 'glossaryId' is set
        if (glossaryId == null) {
            throw new ApiException("Missing the required parameter 'glossaryId' when calling updateGlossary(Async)");
        }

        return updateGlossaryCall(projectId, glossaryId, glossaryUploadRequest, _callback);

    }

    /**
     * Update a glossary
     * Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param glossaryUploadRequest  (optional)
     * @return Glossary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated glossary model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public Glossary updateGlossary(Long projectId, Long glossaryId, GlossaryUploadRequest glossaryUploadRequest) throws ApiException {
        ApiResponse<Glossary> localVarResp = updateGlossaryWithHttpInfo(projectId, glossaryId, glossaryUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Update a glossary
     * Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param glossaryUploadRequest  (optional)
     * @return ApiResponse&lt;Glossary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated glossary model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Glossary> updateGlossaryWithHttpInfo(Long projectId, Long glossaryId, GlossaryUploadRequest glossaryUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGlossaryValidateBeforeCall(projectId, glossaryId, glossaryUploadRequest, null);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a glossary (asynchronously)
     * Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
     * @param projectId Project ID (required)
     * @param glossaryId Glossary ID (required)
     * @param glossaryUploadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated glossary model </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> FileTooLarge </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> GlossaryNotFound </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> UnsupportedGlossaryFormat </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> ProjectAlreadyStarted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlossaryAsync(Long projectId, Long glossaryId, GlossaryUploadRequest glossaryUploadRequest, final ApiCallback<Glossary> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlossaryValidateBeforeCall(projectId, glossaryId, glossaryUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<Glossary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
