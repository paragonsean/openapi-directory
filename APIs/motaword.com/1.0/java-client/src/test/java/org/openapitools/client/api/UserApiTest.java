/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActiveWidget;
import org.openapitools.client.model.ClientProjectStats;
import org.openapitools.client.model.Earnings;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FilterVendorRequest;
import org.openapitools.client.model.LocationUpdateContent;
import org.openapitools.client.model.NotificationSubscription;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PasswordUpdateContent;
import org.openapitools.client.model.PaymentInfo;
import org.openapitools.client.model.PermissionList;
import org.openapitools.client.model.PopularLanguagePairs;
import org.openapitools.client.model.ProfilePictureUpload;
import org.openapitools.client.model.ResponsivityList;
import org.openapitools.client.model.SendEmailConfirmation200Response;
import org.openapitools.client.model.SendUserEmailConfirmation200Response;
import org.openapitools.client.model.SendUserEmailConfirmation202Response;
import org.openapitools.client.model.Stats;
import org.openapitools.client.model.SuspendUserRequest;
import org.openapitools.client.model.UpdatePaymentInfo;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroupList;
import org.openapitools.client.model.UserList;
import org.openapitools.client.model.UserUpdateContent;
import org.openapitools.client.model.VendorTag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveVendorApplicationTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.approveVendorApplication(userId);
        // TODO: test validations
    }

    /**
     * Create a new user
     *
     * Create a new platform user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        Boolean notify = null;
        User user = null;
        User response = api.createUser(notify, user);
        // TODO: test validations
    }

    /**
     * Delete your account
     *
     * Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        OperationStatus response = api.deleteAccount();
        // TODO: test validations
    }

    /**
     * Delete requester account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAccountTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.deleteUserAccount(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downgradeProofreaderTest() throws ApiException {
        OperationStatus response = api.downgradeProofreader();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downgradeUserProofreaderTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.downgradeUserProofreader(userId);
        // TODO: test validations
    }

    /**
     * Freeze account
     *
     * Freeze your account temporarily, especially to stop receiving project notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void freezeAccountTest() throws ApiException {
        OperationStatus response = api.freezeAccount();
        // TODO: test validations
    }

    /**
     * Freeze requester account for project notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void freezeUserAccountTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.freezeUserAccount(userId);
        // TODO: test validations
    }

    /**
     * Returns all vendor tags for vendors filter
     *
     * Returns all vendor tags for vendors filter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllVendorTagsTest() throws ApiException {
        List<VendorTag> response = api.getAllVendorTags();
        // TODO: test validations
    }

    /**
     * View your vendor earnings
     *
     * View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEarningsTest() throws ApiException {
        Earnings response = api.getEarnings();
        // TODO: test validations
    }

    /**
     * Filter vendors based on provided parameters
     *
     * Get a list of vendors available for the criteria given
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilteredVendorsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String orderBy = null;
        String order = null;
        FilterVendorRequest filterVendorRequest = null;
        UserList response = api.getFilteredVendors(page, perPage, orderBy, order, filterVendorRequest);
        // TODO: test validations
    }

    /**
     * View your account info
     *
     * Get your user information, including client, corporate account and vendor account information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        User response = api.getMe();
        // TODO: test validations
    }

    /**
     * View your payment and billing info
     *
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInfoTest() throws ApiException {
        PaymentInfo response = api.getPaymentInfo();
        // TODO: test validations
    }

    /**
     * View your permissions
     *
     * View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionsTest() throws ApiException {
        PermissionList response = api.getPermissions();
        // TODO: test validations
    }

    /**
     * View your vendor responsiveness
     *
     * View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResponsivityTest() throws ApiException {
        String period = null;
        ResponsivityList response = api.getResponsivity(period);
        // TODO: test validations
    }

    /**
     * View your account statistics
     *
     * View your client and vendor statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatsTest() throws ApiException {
        Stats response = api.getStats();
        // TODO: test validations
    }

    /**
     * Returns a list of user groups that this user belongs to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThisUserGroupsTest() throws ApiException {
        Long userId = null;
        UserGroupList response = api.getThisUserGroups(userId);
        // TODO: test validations
    }

    /**
     * Get user information, including client or vendor specific info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Long userId = null;
        User response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserEarningsTest() throws ApiException {
        Long userId = null;
        Earnings response = api.getUserEarnings(userId);
        // TODO: test validations
    }

    /**
     * View your user groups
     *
     * View the user groups that your user account belongs to. This is typically configured by your account administator&#39;s dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGroupsTest() throws ApiException {
        UserGroupList response = api.getUserGroups();
        // TODO: test validations
    }

    /**
     * View user&#39;s payment and billing info
     *
     * Returns billing and saved credit card information for user, and their corporate account if present &amp; allowed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPaymentInfoTest() throws ApiException {
        Long userId = null;
        PaymentInfo response = api.getUserPaymentInfo(userId);
        // TODO: test validations
    }

    /**
     * Returns a list of permissions that this user is authorized for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPermissionsTest() throws ApiException {
        Long userId = null;
        PermissionList response = api.getUserPermissions(userId);
        // TODO: test validations
    }

    /**
     * Returns the language pairs that the user has ordered most.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPopularPairsTest() throws ApiException {
        Long userId = null;
        PopularLanguagePairs response = api.getUserPopularPairs(userId);
        // TODO: test validations
    }

    /**
     * Returns a user&#39;s project statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProjectStatsTest() throws ApiException {
        Long userId = null;
        ClientProjectStats response = api.getUserProjectStats(userId);
        // TODO: test validations
    }

    /**
     * Returns a user&#39;s vendor responsivity stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserResponsivityTest() throws ApiException {
        Long userId = null;
        String period = null;
        ResponsivityList response = api.getUserResponsivity(userId, period);
        // TODO: test validations
    }

    /**
     * Returns a user&#39;s client and vendor statistics. This used to be called \&quot;summary\&quot; (\\@deprecated).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserStatsTest() throws ApiException {
        Long userId = null;
        Stats response = api.getUserStats(userId);
        // TODO: test validations
    }

    /**
     * Get a list of platform users
     *
     * Get a list of platform users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Long page = null;
        Long perPage = null;
        String userType = null;
        String search = null;
        String email = null;
        UserList response = api.getUsers(page, perPage, userType, search, email);
        // TODO: test validations
    }

    /**
     * Log user&#39;s current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logLocationTest() throws ApiException {
        LocationUpdateContent locationUpdateContent = null;
        OperationStatus response = api.logLocation(locationUpdateContent);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void makeProofreaderTest() throws ApiException {
        OperationStatus response = api.makeProofreader();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void makeUserProofreaderTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.makeUserProofreader(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectVendorApplicationTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.rejectVendorApplication(userId);
        // TODO: test validations
    }

    /**
     * Sends email confirmation email for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailConfirmationTest() throws ApiException {
        SendEmailConfirmation200Response response = api.sendEmailConfirmation();
        // TODO: test validations
    }

    /**
     * Sends password reset email to the user&#39;s registered email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPasswordReminderTest() throws ApiException {
        Email email = null;
        OperationStatus response = api.sendPasswordReminder(email);
        // TODO: test validations
    }

    /**
     * Sends email confirmation email for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendUserEmailConfirmationTest() throws ApiException {
        Long userId = null;
        SendUserEmailConfirmation200Response response = api.sendUserEmailConfirmation(userId);
        // TODO: test validations
    }

    /**
     * Subscribe to push notifications
     *
     * Subscribe to push notifications to receive project and platform notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeNotificationTest() throws ApiException {
        NotificationSubscription notificationSubscription = null;
        OperationStatus response = api.subscribeNotification(notificationSubscription);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeUserNotificationTest() throws ApiException {
        Long userId = null;
        NotificationSubscription notificationSubscription = null;
        OperationStatus response = api.subscribeUserNotification(userId, notificationSubscription);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendUserTest() throws ApiException {
        Long userId = null;
        SuspendUserRequest suspendUserRequest = null;
        OperationStatus response = api.suspendUser(userId, suspendUserRequest);
        // TODO: test validations
    }

    /**
     * Defreeze your account
     *
     * Reactive your account to start receiving notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfreezeAccountTest() throws ApiException {
        OperationStatus response = api.unfreezeAccount();
        // TODO: test validations
    }

    /**
     * Unfreeze requester account for project notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfreezeUserAccountTest() throws ApiException {
        Long userId = null;
        OperationStatus response = api.unfreezeUserAccount(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeNotificationTest() throws ApiException {
        NotificationSubscription notificationSubscription = null;
        OperationStatus response = api.unsubscribeNotification(notificationSubscription);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeUserNotificationTest() throws ApiException {
        Long userId = null;
        NotificationSubscription notificationSubscription = null;
        OperationStatus response = api.unsubscribeUserNotification(userId, notificationSubscription);
        // TODO: test validations
    }

    /**
     * Update your account info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeTest() throws ApiException {
        UserUpdateContent userUpdateContent = null;
        User response = api.updateMe(userUpdateContent);
        // TODO: test validations
    }

    /**
     * Update your account password
     *
     * Password should contain at least one uppercase, lowercase character and one number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePasswordTest() throws ApiException {
        PasswordUpdateContent passwordUpdateContent = null;
        OperationStatus response = api.updatePassword(passwordUpdateContent);
        // TODO: test validations
    }

    /**
     * Update payment info
     *
     * Update your billing and saved credit card information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentInfoTest() throws ApiException {
        UpdatePaymentInfo updatePaymentInfo = null;
        PaymentInfo response = api.updatePaymentInfo(updatePaymentInfo);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        Long userId = null;
        UserUpdateContent userUpdateContent = null;
        User response = api.updateUser(userId, userUpdateContent);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserGroupTest() throws ApiException {
        Long userId = null;
        ActiveWidget activeWidget = null;
        UserGroupList response = api.updateUserGroup(userId, activeWidget);
        // TODO: test validations
    }

    /**
     * Update user payment info
     *
     * Update user&#39;s billing and saved credit card information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPaymentInfoTest() throws ApiException {
        Long userId = null;
        PaymentInfo paymentInfo = null;
        OperationStatus response = api.updateUserPaymentInfo(userId, paymentInfo);
        // TODO: test validations
    }

    /**
     * Upload profile picture
     *
     * Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadProfilePictureTest() throws ApiException {
        ProfilePictureUpload profilePictureUpload = null;
        OperationStatus response = api.uploadProfilePicture(profilePictureUpload);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUserProfilePictureTest() throws ApiException {
        Long userId = null;
        ProfilePictureUpload profilePictureUpload = null;
        OperationStatus response = api.uploadUserProfilePicture(userId, profilePictureUpload);
        // TODO: test validations
    }

}
