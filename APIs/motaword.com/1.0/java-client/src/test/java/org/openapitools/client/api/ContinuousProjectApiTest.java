/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActiveWidget;
import org.openapitools.client.model.ActiveWidgetList;
import org.openapitools.client.model.AddOrUpdateDocumentRequest;
import org.openapitools.client.model.AnalyticsCollection;
import org.openapitools.client.model.AnalyticsToken;
import org.openapitools.client.model.ContinuousProject;
import org.openapitools.client.model.ContinuousProjectDocument;
import org.openapitools.client.model.ContinuousProjectDocumentList;
import org.openapitools.client.model.ContinuousProjectDocumentProgressBody;
import org.openapitools.client.model.ContinuousProjectInvoices;
import org.openapitools.client.model.ContinuousProjectProgress;
import org.openapitools.client.model.ContinuousProjectUpdateContent;
import org.openapitools.client.model.ContinuousProjectsList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetQuotesForDocumentsBody;
import org.openapitools.client.model.GetQuotesForLanguagesBody;
import org.openapitools.client.model.InstantTranslationRequest;
import org.openapitools.client.model.InstantTranslationResult;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.Progress;
import org.openapitools.client.model.ProjectList;
import org.openapitools.client.model.Subscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContinuousProjectApi
 */
@Disabled
public class ContinuousProjectApiTest {

    private final ContinuousProjectApi api = new ContinuousProjectApi();

    /**
     * Add a new document to your continuous project
     *
     * Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDocumentTest() throws ApiException {
        Long projectId = null;
        AddOrUpdateDocumentRequest addOrUpdateDocumentRequest = null;
        ContinuousProjectDocument response = api.addDocument(projectId, addOrUpdateDocumentRequest);
        // TODO: test validations
    }

    /**
     * Save/collect analytics data from Active widget
     *
     * Save/collect analytics data from Active widget
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectAnalyticsTest() throws ApiException {
        Long id = null;
        AnalyticsCollection analyticsCollection = null;
        OperationStatus response = api.collectAnalytics(id, analyticsCollection);
        // TODO: test validations
    }

    /**
     * Complete continuous project
     *
     * Complete continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeTest() throws ApiException {
        Long id = null;
        OperationStatus response = api.complete(id);
        // TODO: test validations
    }

    /**
     * Complete a continuous project document
     *
     * Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeContinuousDocumentTest() throws ApiException {
        Long id = null;
        Long documentId = null;
        OperationStatus response = api.completeContinuousDocument(id, documentId);
        // TODO: test validations
    }

    /**
     * Complete continuous project language
     *
     * Complete continuous project language
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeLanguageTest() throws ApiException {
        Long id = null;
        String targetLanguage = null;
        OperationStatus response = api.completeLanguage(id, targetLanguage);
        // TODO: test validations
    }

    /**
     * Create a new Active widget
     *
     * Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createActiveWidgetTest() throws ApiException {
        Long projectId = null;
        ActiveWidget activeWidget = null;
        ActiveWidget response = api.createActiveWidget(projectId, activeWidget);
        // TODO: test validations
    }

    /**
     * Create a continuous project
     *
     * Create a new continuous project for your software, website, CI/CD translation needs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContinuousProjectTest() throws ApiException {
        ContinuousProject continuousProject = null;
        ContinuousProject response = api.createContinuousProject(continuousProject);
        // TODO: test validations
    }

    /**
     * Create subscription for continuous project
     *
     * Create subscription for continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        Long id = null;
        Subscription subscription = null;
        Subscription response = api.createSubscription(id, subscription);
        // TODO: test validations
    }

    /**
     * Delete a single widget for this Active project
     *
     * Delete a single widget for this Active project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteActiveWidgetTest() throws ApiException {
        Long projectId = null;
        Long widgetId = null;
        OperationStatus response = api.deleteActiveWidget(projectId, widgetId);
        // TODO: test validations
    }

    /**
     * Delete a continuous project
     *
     * Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContinuousProjectTest() throws ApiException {
        Long id = null;
        OperationStatus response = api.deleteContinuousProject(id);
        // TODO: test validations
    }

    /**
     * Delete subscription for continuous project
     *
     * Delete subscription for continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        Long id = null;
        Subscription response = api.deleteSubscription(id);
        // TODO: test validations
    }

    /**
     * View an Active widget
     *
     * View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveWidgetTest() throws ApiException {
        Long projectId = null;
        Long widgetId = null;
        ActiveWidget response = api.getActiveWidget(projectId, widgetId);
        // TODO: test validations
    }

    /**
     * View Active widgets
     *
     * View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveWidgetsTest() throws ApiException {
        Long projectId = null;
        ActiveWidgetList response = api.getActiveWidgets(projectId);
        // TODO: test validations
    }

    /**
     * Get JWT token to be used in analytics dashboards
     *
     * Get JWT token to be used in analytics dashboards
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyticsTokenTest() throws ApiException {
        Long id = null;
        AnalyticsToken response = api.getAnalyticsToken(id);
        // TODO: test validations
    }

    /**
     * View a continuous project
     *
     * View the details of a continuous project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectTest() throws ApiException {
        Long id = null;
        ContinuousProject response = api.getContinuousProject(id);
        // TODO: test validations
    }

    /**
     * View a continuous document
     *
     * View the details of a source document in continuous translation project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectDocumentTest() throws ApiException {
        Long projectId = null;
        Long documentId = null;
        ContinuousProjectDocument response = api.getContinuousProjectDocument(projectId, documentId);
        // TODO: test validations
    }

    /**
     * Monitor progress of a continuous document
     *
     * Monitor the translation progress of a document in a continuous project in real-time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectDocumentProgressTest() throws ApiException {
        Long projectId = null;
        Long documentId = null;
        String filterByLanguage = null;
        Progress response = api.getContinuousProjectDocumentProgress(projectId, documentId, filterByLanguage);
        // TODO: test validations
    }

    /**
     * View continuous documents
     *
     * View the documents under this continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectDocumentsTest() throws ApiException {
        Long projectId = null;
        String filterByLanguage = null;
        ContinuousProjectDocumentList response = api.getContinuousProjectDocuments(projectId, filterByLanguage);
        // TODO: test validations
    }

    /**
     * Invoices of a continuous project
     *
     * Get real-time access to a continuous project&#39;s invoices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectInvoicesTest() throws ApiException {
        Long projectId = null;
        ContinuousProjectInvoices response = api.getContinuousProjectInvoices(projectId);
        // TODO: test validations
    }

    /**
     * Monitor progress and status of a continous project
     *
     * Monitor the translation progress of an ongoing continuous project in real-time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectProgressTest() throws ApiException {
        Long projectId = null;
        String filterByLanguage = null;
        ContinuousProjectProgress response = api.getContinuousProjectProgress(projectId, filterByLanguage);
        // TODO: test validations
    }

    /**
     * View continuous projects
     *
     * View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinuousProjectsTest() throws ApiException {
        String type = null;
        ContinuousProjectsList response = api.getContinuousProjects(type);
        // TODO: test validations
    }

    /**
     * Get a quote for a continuous project document
     *
     * Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteForDocumentTest() throws ApiException {
        Long id = null;
        Long documentId = null;
        ProjectList response = api.getQuoteForDocument(id, documentId);
        // TODO: test validations
    }

    /**
     * Get quote for documents
     *
     * Get a new quote for provided documents in continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteForDocumentsTest() throws ApiException {
        Long id = null;
        GetQuotesForDocumentsBody getQuotesForDocumentsBody = null;
        ProjectList response = api.getQuoteForDocuments(id, getQuotesForDocumentsBody);
        // TODO: test validations
    }

    /**
     * Get quote for language
     *
     * Get a new quote for provided target language in continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteForLanguageTest() throws ApiException {
        Long id = null;
        String targetLanguage = null;
        ProjectList response = api.getQuoteForLanguage(id, targetLanguage);
        // TODO: test validations
    }

    /**
     * Get quote for languages
     *
     * Get a new quote for provided target languages in continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteForLanguagesTest() throws ApiException {
        Long id = null;
        GetQuotesForLanguagesBody getQuotesForLanguagesBody = null;
        ProjectList response = api.getQuoteForLanguages(id, getQuotesForLanguagesBody);
        // TODO: test validations
    }

    /**
     * Get subscription for continuous project
     *
     * Get subscription for continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        Long id = null;
        Subscription response = api.getSubscription(id);
        // TODO: test validations
    }

    /**
     * Get continuous project document progress for multiple IDs
     *
     * Get continuous project document progress for multiple IDs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postContinuousProjectDocumentProgressTest() throws ApiException {
        Long projectId = null;
        ContinuousProjectDocumentProgressBody continuousProjectDocumentProgressBody = null;
        Progress response = api.postContinuousProjectDocumentProgress(projectId, continuousProjectDocumentProgressBody);
        // TODO: test validations
    }

    /**
     * Reset Active widget token
     *
     * Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetActiveWidgetTokenTest() throws ApiException {
        Long projectId = null;
        Long widgetId = null;
        ActiveWidget response = api.resetActiveWidgetToken(projectId, widgetId);
        // TODO: test validations
    }

    /**
     * Instantly translate your content
     *
     * Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void translateTest() throws ApiException {
        Long id = null;
        String targetLanguage = null;
        InstantTranslationRequest instantTranslationRequest = null;
        InstantTranslationResult response = api.translate(id, targetLanguage, instantTranslationRequest);
        // TODO: test validations
    }

    /**
     * Update Active widget settings.
     *
     * Update Active widget settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateActiveWidgetTest() throws ApiException {
        Long projectId = null;
        Long widgetId = null;
        ActiveWidget activeWidget = null;
        ActiveWidget response = api.updateActiveWidget(projectId, widgetId, activeWidget);
        // TODO: test validations
    }

    /**
     * Update a continuous project
     *
     * Update the details and settings of continuous project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContinuousProjectTest() throws ApiException {
        Long id = null;
        ContinuousProjectUpdateContent continuousProjectUpdateContent = null;
        ContinuousProject response = api.updateContinuousProject(id, continuousProjectUpdateContent);
        // TODO: test validations
    }

    /**
     * Update the document
     *
     * Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        Long projectId = null;
        Long documentId = null;
        AddOrUpdateDocumentRequest addOrUpdateDocumentRequest = null;
        ContinuousProjectDocument response = api.updateDocument(projectId, documentId, addOrUpdateDocumentRequest);
        // TODO: test validations
    }

    /**
     * Update subscription for continuous project
     *
     * Update subscription for continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        Long id = null;
        Subscription subscription = null;
        Subscription response = api.updateSubscription(id, subscription);
        // TODO: test validations
    }

    /**
     * Update subscription payment method for continuous project
     *
     * Update subscription payment method for continuous project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionPaymentMethodTest() throws ApiException {
        Long id = null;
        Subscription subscription = null;
        Subscription response = api.updateSubscriptionPaymentMethod(id, subscription);
        // TODO: test validations
    }

}
