/*
 * MotaWord API
 * Use MotaWord API to post and track your translation projects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Activity;
import org.openapitools.client.model.ActivityList;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.NewSalesActivity;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.SalesActivities;
import org.openapitools.client.model.SalesActivityType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivityApi
 */
@Disabled
public class ActivityApiTest {

    private final ActivityApi api = new ActivityApi();

    /**
     * Monitor project activities
     *
     * Get a list of real-time activities in the project, such as translation suggestion and translation approval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivitiesTest() throws ApiException {
        Long projectId = null;
        Long page = null;
        Long perPage = null;
        ActivityList response = api.getActivities(projectId, page, perPage);
        // TODO: test validations
    }

    /**
     * View an activity
     *
     * View the details of an activity in the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivityTest() throws ApiException {
        Long projectId = null;
        Long activityId = null;
        Activity response = api.getActivity(projectId, activityId);
        // TODO: test validations
    }

    /**
     * View activity comments
     *
     * View a list of comments added to this activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivityCommentsTest() throws ApiException {
        Long projectId = null;
        Long activityId = null;
        CommentList response = api.getActivityComments(projectId, activityId);
        // TODO: test validations
    }

    /**
     * View all project comments
     *
     * View a list of activity comments in the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        Long projectId = null;
        Long page = null;
        Long perPage = null;
        CommentList response = api.getComments(projectId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get sales activities for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSalesActivitiesTest() throws ApiException {
        Long id = null;
        String excludeOwner = null;
        SalesActivityType type = null;
        SalesActivities response = api.getSalesActivities(id, excludeOwner, type);
        // TODO: test validations
    }

    /**
     * Insert sales activity for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertSalesActivityTest() throws ApiException {
        Long id = null;
        NewSalesActivity newSalesActivity = null;
        OperationStatus response = api.insertSalesActivity(id, newSalesActivity);
        // TODO: test validations
    }

    /**
     * Submit comment to an activity
     *
     * Submit a comment to an activity in the project, such as translation or editing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitCommentTest() throws ApiException {
        Long projectId = null;
        Long activityId = null;
        Comment comment = null;
        Comment response = api.submitComment(projectId, activityId, comment);
        // TODO: test validations
    }

}
