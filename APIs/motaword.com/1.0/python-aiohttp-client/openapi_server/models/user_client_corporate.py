# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserClientCorporate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: int=None, logo: str=None, name: str=None, phone_number: str=None):
        """UserClientCorporate - a model defined in OpenAPI

        :param email: The email of this UserClientCorporate.
        :param id: The id of this UserClientCorporate.
        :param logo: The logo of this UserClientCorporate.
        :param name: The name of this UserClientCorporate.
        :param phone_number: The phone_number of this UserClientCorporate.
        """
        self.openapi_types = {
            'email': str,
            'id': int,
            'logo': str,
            'name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'logo': 'logo',
            'name': 'name',
            'phone_number': 'phone_number'
        }

        self._email = email
        self._id = id
        self._logo = logo
        self._name = name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserClientCorporate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_client_corporate of this UserClientCorporate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserClientCorporate.


        :return: The email of this UserClientCorporate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserClientCorporate.


        :param email: The email of this UserClientCorporate.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserClientCorporate.


        :return: The id of this UserClientCorporate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserClientCorporate.


        :param id: The id of this UserClientCorporate.
        :type id: int
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this UserClientCorporate.


        :return: The logo of this UserClientCorporate.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this UserClientCorporate.


        :param logo: The logo of this UserClientCorporate.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this UserClientCorporate.


        :return: The name of this UserClientCorporate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserClientCorporate.


        :param name: The name of this UserClientCorporate.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this UserClientCorporate.


        :return: The phone_number of this UserClientCorporate.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserClientCorporate.


        :param phone_number: The phone_number of this UserClientCorporate.
        :type phone_number: str
        """

        self._phone_number = phone_number
