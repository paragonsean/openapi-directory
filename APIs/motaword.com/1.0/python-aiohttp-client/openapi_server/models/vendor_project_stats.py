# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VendorProjectStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invited: int=None, total: int=None, worked: int=None):
        """VendorProjectStats - a model defined in OpenAPI

        :param invited: The invited of this VendorProjectStats.
        :param total: The total of this VendorProjectStats.
        :param worked: The worked of this VendorProjectStats.
        """
        self.openapi_types = {
            'invited': int,
            'total': int,
            'worked': int
        }

        self.attribute_map = {
            'invited': 'invited',
            'total': 'total',
            'worked': 'worked'
        }

        self._invited = invited
        self._total = total
        self._worked = worked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VendorProjectStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VendorProjectStats of this VendorProjectStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invited(self):
        """Gets the invited of this VendorProjectStats.

        total number of projects that this user was invited to. TODO this key is to replace \"total\" key due to naming ambiguity.

        :return: The invited of this VendorProjectStats.
        :rtype: int
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this VendorProjectStats.

        total number of projects that this user was invited to. TODO this key is to replace \"total\" key due to naming ambiguity.

        :param invited: The invited of this VendorProjectStats.
        :type invited: int
        """

        self._invited = invited

    @property
    def total(self):
        """Gets the total of this VendorProjectStats.

        total number of projects that this user was invited to.

        :return: The total of this VendorProjectStats.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this VendorProjectStats.

        total number of projects that this user was invited to.

        :param total: The total of this VendorProjectStats.
        :type total: int
        """

        self._total = total

    @property
    def worked(self):
        """Gets the worked of this VendorProjectStats.

        total number of projects that this user actually worked on.

        :return: The worked of this VendorProjectStats.
        :rtype: int
        """
        return self._worked

    @worked.setter
    def worked(self, worked):
        """Sets the worked of this VendorProjectStats.

        total number of projects that this user actually worked on.

        :param worked: The worked of this VendorProjectStats.
        :type worked: int
        """

        self._worked = worked
