# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileNeedsVendor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: int=None, guid: str=None, project_id: int=None, reason: str=None, target_language: List[str]=None, task_type: List[str]=None):
        """FileNeedsVendor - a model defined in OpenAPI

        :param file_id: The file_id of this FileNeedsVendor.
        :param guid: The guid of this FileNeedsVendor.
        :param project_id: The project_id of this FileNeedsVendor.
        :param reason: The reason of this FileNeedsVendor.
        :param target_language: The target_language of this FileNeedsVendor.
        :param task_type: The task_type of this FileNeedsVendor.
        """
        self.openapi_types = {
            'file_id': int,
            'guid': str,
            'project_id': int,
            'reason': str,
            'target_language': List[str],
            'task_type': List[str]
        }

        self.attribute_map = {
            'file_id': 'fileId',
            'guid': 'guid',
            'project_id': 'projectId',
            'reason': 'reason',
            'target_language': 'targetLanguage',
            'task_type': 'taskType'
        }

        self._file_id = file_id
        self._guid = guid
        self._project_id = project_id
        self._reason = reason
        self._target_language = target_language
        self._task_type = task_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileNeedsVendor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileNeedsVendor of this FileNeedsVendor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this FileNeedsVendor.


        :return: The file_id of this FileNeedsVendor.
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileNeedsVendor.


        :param file_id: The file_id of this FileNeedsVendor.
        :type file_id: int
        """

        self._file_id = file_id

    @property
    def guid(self):
        """Gets the guid of this FileNeedsVendor.


        :return: The guid of this FileNeedsVendor.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this FileNeedsVendor.


        :param guid: The guid of this FileNeedsVendor.
        :type guid: str
        """

        self._guid = guid

    @property
    def project_id(self):
        """Gets the project_id of this FileNeedsVendor.


        :return: The project_id of this FileNeedsVendor.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this FileNeedsVendor.


        :param project_id: The project_id of this FileNeedsVendor.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def reason(self):
        """Gets the reason of this FileNeedsVendor.


        :return: The reason of this FileNeedsVendor.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this FileNeedsVendor.


        :param reason: The reason of this FileNeedsVendor.
        :type reason: str
        """

        self._reason = reason

    @property
    def target_language(self):
        """Gets the target_language of this FileNeedsVendor.


        :return: The target_language of this FileNeedsVendor.
        :rtype: List[str]
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this FileNeedsVendor.


        :param target_language: The target_language of this FileNeedsVendor.
        :type target_language: List[str]
        """

        self._target_language = target_language

    @property
    def task_type(self):
        """Gets the task_type of this FileNeedsVendor.


        :return: The task_type of this FileNeedsVendor.
        :rtype: List[str]
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this FileNeedsVendor.


        :param task_type: The task_type of this FileNeedsVendor.
        :type task_type: List[str]
        """

        self._task_type = task_type
