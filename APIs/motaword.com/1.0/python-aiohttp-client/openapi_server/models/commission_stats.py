# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary import Monetary
from openapi_server import util


class CommissionStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: Monetary=None, paid: Monetary=None, quote_total: Monetary=None, total: Monetary=None):
        """CommissionStats - a model defined in OpenAPI

        :param balance: The balance of this CommissionStats.
        :param paid: The paid of this CommissionStats.
        :param quote_total: The quote_total of this CommissionStats.
        :param total: The total of this CommissionStats.
        """
        self.openapi_types = {
            'balance': Monetary,
            'paid': Monetary,
            'quote_total': Monetary,
            'total': Monetary
        }

        self.attribute_map = {
            'balance': 'balance',
            'paid': 'paid',
            'quote_total': 'quote_total',
            'total': 'total'
        }

        self._balance = balance
        self._paid = paid
        self._quote_total = quote_total
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommissionStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommissionStats of this CommissionStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this CommissionStats.


        :return: The balance of this CommissionStats.
        :rtype: Monetary
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CommissionStats.


        :param balance: The balance of this CommissionStats.
        :type balance: Monetary
        """

        self._balance = balance

    @property
    def paid(self):
        """Gets the paid of this CommissionStats.


        :return: The paid of this CommissionStats.
        :rtype: Monetary
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this CommissionStats.


        :param paid: The paid of this CommissionStats.
        :type paid: Monetary
        """

        self._paid = paid

    @property
    def quote_total(self):
        """Gets the quote_total of this CommissionStats.


        :return: The quote_total of this CommissionStats.
        :rtype: Monetary
        """
        return self._quote_total

    @quote_total.setter
    def quote_total(self, quote_total):
        """Sets the quote_total of this CommissionStats.


        :param quote_total: The quote_total of this CommissionStats.
        :type quote_total: Monetary
        """

        self._quote_total = quote_total

    @property
    def total(self):
        """Gets the total of this CommissionStats.


        :return: The total of this CommissionStats.
        :rtype: Monetary
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CommissionStats.


        :param total: The total of this CommissionStats.
        :type total: Monetary
        """

        self._total = total
