# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, help: str=None, http_code: int=None, message: str=None, account_status: str=None):
        """TokenError - a model defined in OpenAPI

        :param code: The code of this TokenError.
        :param help: The help of this TokenError.
        :param http_code: The http_code of this TokenError.
        :param message: The message of this TokenError.
        :param account_status: The account_status of this TokenError.
        """
        self.openapi_types = {
            'code': str,
            'help': str,
            'http_code': int,
            'message': str,
            'account_status': str
        }

        self.attribute_map = {
            'code': 'code',
            'help': 'help',
            'http_code': 'http_code',
            'message': 'message',
            'account_status': 'account_status'
        }

        self._code = code
        self._help = help
        self._http_code = http_code
        self._message = message
        self._account_status = account_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenError of this TokenError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TokenError.


        :return: The code of this TokenError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TokenError.


        :param code: The code of this TokenError.
        :type code: str
        """

        self._code = code

    @property
    def help(self):
        """Gets the help of this TokenError.


        :return: The help of this TokenError.
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this TokenError.


        :param help: The help of this TokenError.
        :type help: str
        """

        self._help = help

    @property
    def http_code(self):
        """Gets the http_code of this TokenError.


        :return: The http_code of this TokenError.
        :rtype: int
        """
        return self._http_code

    @http_code.setter
    def http_code(self, http_code):
        """Sets the http_code of this TokenError.


        :param http_code: The http_code of this TokenError.
        :type http_code: int
        """

        self._http_code = http_code

    @property
    def message(self):
        """Gets the message of this TokenError.


        :return: The message of this TokenError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TokenError.


        :param message: The message of this TokenError.
        :type message: str
        """

        self._message = message

    @property
    def account_status(self):
        """Gets the account_status of this TokenError.


        :return: The account_status of this TokenError.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this TokenError.


        :param account_status: The account_status of this TokenError.
        :type account_status: str
        """
        allowed_values = ["registered", "email_confirmed", "deleted", "suspended", "rejected", "approved", "resume", "webinar", "course"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"
                .format(account_status, allowed_values)
            )

        self._account_status = account_status
