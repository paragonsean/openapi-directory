# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectWordCountAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: float=None, duplicate: float=None, exclusion: float=None, final: float=None, tm: float=None):
        """ProjectWordCountAnalysis - a model defined in OpenAPI

        :param base: The base of this ProjectWordCountAnalysis.
        :param duplicate: The duplicate of this ProjectWordCountAnalysis.
        :param exclusion: The exclusion of this ProjectWordCountAnalysis.
        :param final: The final of this ProjectWordCountAnalysis.
        :param tm: The tm of this ProjectWordCountAnalysis.
        """
        self.openapi_types = {
            'base': float,
            'duplicate': float,
            'exclusion': float,
            'final': float,
            'tm': float
        }

        self.attribute_map = {
            'base': 'base',
            'duplicate': 'duplicate',
            'exclusion': 'exclusion',
            'final': 'final',
            'tm': 'tm'
        }

        self._base = base
        self._duplicate = duplicate
        self._exclusion = exclusion
        self._final = final
        self._tm = tm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectWordCountAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_word_count_analysis of this ProjectWordCountAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this ProjectWordCountAnalysis.


        :return: The base of this ProjectWordCountAnalysis.
        :rtype: float
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ProjectWordCountAnalysis.


        :param base: The base of this ProjectWordCountAnalysis.
        :type base: float
        """

        self._base = base

    @property
    def duplicate(self):
        """Gets the duplicate of this ProjectWordCountAnalysis.


        :return: The duplicate of this ProjectWordCountAnalysis.
        :rtype: float
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this ProjectWordCountAnalysis.


        :param duplicate: The duplicate of this ProjectWordCountAnalysis.
        :type duplicate: float
        """

        self._duplicate = duplicate

    @property
    def exclusion(self):
        """Gets the exclusion of this ProjectWordCountAnalysis.


        :return: The exclusion of this ProjectWordCountAnalysis.
        :rtype: float
        """
        return self._exclusion

    @exclusion.setter
    def exclusion(self, exclusion):
        """Sets the exclusion of this ProjectWordCountAnalysis.


        :param exclusion: The exclusion of this ProjectWordCountAnalysis.
        :type exclusion: float
        """

        self._exclusion = exclusion

    @property
    def final(self):
        """Gets the final of this ProjectWordCountAnalysis.


        :return: The final of this ProjectWordCountAnalysis.
        :rtype: float
        """
        return self._final

    @final.setter
    def final(self, final):
        """Sets the final of this ProjectWordCountAnalysis.


        :param final: The final of this ProjectWordCountAnalysis.
        :type final: float
        """

        self._final = final

    @property
    def tm(self):
        """Gets the tm of this ProjectWordCountAnalysis.


        :return: The tm of this ProjectWordCountAnalysis.
        :rtype: float
        """
        return self._tm

    @tm.setter
    def tm(self, tm):
        """Sets the tm of this ProjectWordCountAnalysis.


        :param tm: The tm of this ProjectWordCountAnalysis.
        :type tm: float
        """

        self._tm = tm
