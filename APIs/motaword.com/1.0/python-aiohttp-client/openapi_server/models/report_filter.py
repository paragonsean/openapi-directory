# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_code: str=None, date_from: datetime=None, date_to: datetime=None, source_languages: List[str]=None, target_languages: List[str]=None, users: List[int]=None):
        """ReportFilter - a model defined in OpenAPI

        :param budget_code: The budget_code of this ReportFilter.
        :param date_from: The date_from of this ReportFilter.
        :param date_to: The date_to of this ReportFilter.
        :param source_languages: The source_languages of this ReportFilter.
        :param target_languages: The target_languages of this ReportFilter.
        :param users: The users of this ReportFilter.
        """
        self.openapi_types = {
            'budget_code': str,
            'date_from': datetime,
            'date_to': datetime,
            'source_languages': List[str],
            'target_languages': List[str],
            'users': List[int]
        }

        self.attribute_map = {
            'budget_code': 'budget_code',
            'date_from': 'date_from',
            'date_to': 'date_to',
            'source_languages': 'source_languages',
            'target_languages': 'target_languages',
            'users': 'users'
        }

        self._budget_code = budget_code
        self._date_from = date_from
        self._date_to = date_to
        self._source_languages = source_languages
        self._target_languages = target_languages
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportFilter of this ReportFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_code(self):
        """Gets the budget_code of this ReportFilter.

        budget code filter. valid for corporate accounts only.

        :return: The budget_code of this ReportFilter.
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """Sets the budget_code of this ReportFilter.

        budget code filter. valid for corporate accounts only.

        :param budget_code: The budget_code of this ReportFilter.
        :type budget_code: str
        """

        self._budget_code = budget_code

    @property
    def date_from(self):
        """Gets the date_from of this ReportFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The date_from of this ReportFilter.
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this ReportFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param date_from: The date_from of this ReportFilter.
        :type date_from: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this ReportFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The date_to of this ReportFilter.
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this ReportFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param date_to: The date_to of this ReportFilter.
        :type date_to: datetime
        """

        self._date_to = date_to

    @property
    def source_languages(self):
        """Gets the source_languages of this ReportFilter.

        List of source language codes.

        :return: The source_languages of this ReportFilter.
        :rtype: List[str]
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this ReportFilter.

        List of source language codes.

        :param source_languages: The source_languages of this ReportFilter.
        :type source_languages: List[str]
        """

        self._source_languages = source_languages

    @property
    def target_languages(self):
        """Gets the target_languages of this ReportFilter.

        List of target language codes.

        :return: The target_languages of this ReportFilter.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this ReportFilter.

        List of target language codes.

        :param target_languages: The target_languages of this ReportFilter.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages

    @property
    def users(self):
        """Gets the users of this ReportFilter.

        List of corporate user IDs. Valid for corporate accounts only.

        :return: The users of this ReportFilter.
        :rtype: List[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ReportFilter.

        List of corporate user IDs. Valid for corporate accounts only.

        :param users: The users of this ReportFilter.
        :type users: List[int]
        """

        self._users = users
