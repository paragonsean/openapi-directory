# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporate_id: int=None, id: int=None, name: str=None, permissions: List[str]=None):
        """UserGroup - a model defined in OpenAPI

        :param corporate_id: The corporate_id of this UserGroup.
        :param id: The id of this UserGroup.
        :param name: The name of this UserGroup.
        :param permissions: The permissions of this UserGroup.
        """
        self.openapi_types = {
            'corporate_id': int,
            'id': int,
            'name': str,
            'permissions': List[str]
        }

        self.attribute_map = {
            'corporate_id': 'corporate_id',
            'id': 'id',
            'name': 'name',
            'permissions': 'permissions'
        }

        self._corporate_id = corporate_id
        self._id = id
        self._name = name
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserGroup of this UserGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporate_id(self):
        """Gets the corporate_id of this UserGroup.


        :return: The corporate_id of this UserGroup.
        :rtype: int
        """
        return self._corporate_id

    @corporate_id.setter
    def corporate_id(self, corporate_id):
        """Sets the corporate_id of this UserGroup.


        :param corporate_id: The corporate_id of this UserGroup.
        :type corporate_id: int
        """

        self._corporate_id = corporate_id

    @property
    def id(self):
        """Gets the id of this UserGroup.


        :return: The id of this UserGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserGroup.


        :param id: The id of this UserGroup.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserGroup.


        :return: The name of this UserGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserGroup.


        :param name: The name of this UserGroup.
        :type name: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this UserGroup.


        :return: The permissions of this UserGroup.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserGroup.


        :param permissions: The permissions of this UserGroup.
        :type permissions: List[str]
        """

        self._permissions = permissions
