# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_links import CommentLinks
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, commented_at: int=None, id: int=None, links: CommentLinks=None):
        """Comment - a model defined in OpenAPI

        :param comment: The comment of this Comment.
        :param commented_at: The commented_at of this Comment.
        :param id: The id of this Comment.
        :param links: The links of this Comment.
        """
        self.openapi_types = {
            'comment': str,
            'commented_at': int,
            'id': int,
            'links': CommentLinks
        }

        self.attribute_map = {
            'comment': 'comment',
            'commented_at': 'commented_at',
            'id': 'id',
            'links': 'links'
        }

        self._comment = comment
        self._commented_at = commented_at
        self._id = id
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this Comment.

        Comment text.

        :return: The comment of this Comment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Comment.

        Comment text.

        :param comment: The comment of this Comment.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def commented_at(self):
        """Gets the commented_at of this Comment.

        Unix epoch time

        :return: The commented_at of this Comment.
        :rtype: int
        """
        return self._commented_at

    @commented_at.setter
    def commented_at(self, commented_at):
        """Sets the commented_at of this Comment.

        Unix epoch time

        :param commented_at: The commented_at of this Comment.
        :type commented_at: int
        """

        self._commented_at = commented_at

    @property
    def id(self):
        """Gets the id of this Comment.


        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Comment.


        :return: The links of this Comment.
        :rtype: CommentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Comment.


        :param links: The links of this Comment.
        :type links: CommentLinks
        """

        self._links = links
