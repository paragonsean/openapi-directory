# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Earning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency: str='usd', due_date: datetime=None, status: str=None, words: int=None, words_approved: int=None, words_translated: int=None):
        """Earning - a model defined in OpenAPI

        :param amount: The amount of this Earning.
        :param currency: The currency of this Earning.
        :param due_date: The due_date of this Earning.
        :param status: The status of this Earning.
        :param words: The words of this Earning.
        :param words_approved: The words_approved of this Earning.
        :param words_translated: The words_translated of this Earning.
        """
        self.openapi_types = {
            'amount': float,
            'currency': str,
            'due_date': datetime,
            'status': str,
            'words': int,
            'words_approved': int,
            'words_translated': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'due_date': 'due_date',
            'status': 'status',
            'words': 'words',
            'words_approved': 'words_approved',
            'words_translated': 'words_translated'
        }

        self._amount = amount
        self._currency = currency
        self._due_date = due_date
        self._status = status
        self._words = words
        self._words_approved = words_approved
        self._words_translated = words_translated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Earning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Earning of this Earning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Earning.


        :return: The amount of this Earning.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Earning.


        :param amount: The amount of this Earning.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Earning.


        :return: The currency of this Earning.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Earning.


        :param currency: The currency of this Earning.
        :type currency: str
        """

        self._currency = currency

    @property
    def due_date(self):
        """Gets the due_date of this Earning.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The due_date of this Earning.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Earning.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param due_date: The due_date of this Earning.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def status(self):
        """Gets the status of this Earning.


        :return: The status of this Earning.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Earning.


        :param status: The status of this Earning.
        :type status: str
        """
        allowed_values = ["paid", "pending", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def words(self):
        """Gets the words of this Earning.


        :return: The words of this Earning.
        :rtype: int
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this Earning.


        :param words: The words of this Earning.
        :type words: int
        """

        self._words = words

    @property
    def words_approved(self):
        """Gets the words_approved of this Earning.


        :return: The words_approved of this Earning.
        :rtype: int
        """
        return self._words_approved

    @words_approved.setter
    def words_approved(self, words_approved):
        """Sets the words_approved of this Earning.


        :param words_approved: The words_approved of this Earning.
        :type words_approved: int
        """

        self._words_approved = words_approved

    @property
    def words_translated(self):
        """Gets the words_translated of this Earning.


        :return: The words_translated of this Earning.
        :rtype: int
        """
        return self._words_translated

    @words_translated.setter
    def words_translated(self, words_translated):
        """Sets the words_translated of this Earning.


        :param words_translated: The words_translated of this Earning.
        :type words_translated: int
        """

        self._words_translated = words_translated
