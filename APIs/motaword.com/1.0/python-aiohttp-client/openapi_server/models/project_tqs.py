# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectTQS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_above_average: bool=None, score: float=None, strings_edited: int=None, strings_translated: int=None):
        """ProjectTQS - a model defined in OpenAPI

        :param is_above_average: The is_above_average of this ProjectTQS.
        :param score: The score of this ProjectTQS.
        :param strings_edited: The strings_edited of this ProjectTQS.
        :param strings_translated: The strings_translated of this ProjectTQS.
        """
        self.openapi_types = {
            'is_above_average': bool,
            'score': float,
            'strings_edited': int,
            'strings_translated': int
        }

        self.attribute_map = {
            'is_above_average': 'is_above_average',
            'score': 'score',
            'strings_edited': 'strings_edited',
            'strings_translated': 'strings_translated'
        }

        self._is_above_average = is_above_average
        self._score = score
        self._strings_edited = strings_edited
        self._strings_translated = strings_translated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectTQS':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectTQS of this ProjectTQS.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_above_average(self):
        """Gets the is_above_average of this ProjectTQS.

        Is this score above or below the average among other vendors in the same project?

        :return: The is_above_average of this ProjectTQS.
        :rtype: bool
        """
        return self._is_above_average

    @is_above_average.setter
    def is_above_average(self, is_above_average):
        """Sets the is_above_average of this ProjectTQS.

        Is this score above or below the average among other vendors in the same project?

        :param is_above_average: The is_above_average of this ProjectTQS.
        :type is_above_average: bool
        """

        self._is_above_average = is_above_average

    @property
    def score(self):
        """Gets the score of this ProjectTQS.


        :return: The score of this ProjectTQS.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ProjectTQS.


        :param score: The score of this ProjectTQS.
        :type score: float
        """

        self._score = score

    @property
    def strings_edited(self):
        """Gets the strings_edited of this ProjectTQS.

        The number of translated strings by this translator which was edited by a proofreader.

        :return: The strings_edited of this ProjectTQS.
        :rtype: int
        """
        return self._strings_edited

    @strings_edited.setter
    def strings_edited(self, strings_edited):
        """Sets the strings_edited of this ProjectTQS.

        The number of translated strings by this translator which was edited by a proofreader.

        :param strings_edited: The strings_edited of this ProjectTQS.
        :type strings_edited: int
        """

        self._strings_edited = strings_edited

    @property
    def strings_translated(self):
        """Gets the strings_translated of this ProjectTQS.

        The number of translated strings by this translator.

        :return: The strings_translated of this ProjectTQS.
        :rtype: int
        """
        return self._strings_translated

    @strings_translated.setter
    def strings_translated(self, strings_translated):
        """Sets the strings_translated of this ProjectTQS.

        The number of translated strings by this translator.

        :param strings_translated: The strings_translated of this ProjectTQS.
        :type strings_translated: int
        """

        self._strings_translated = strings_translated
