# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilterVendorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clients: List[int]=None, communication_channel: List[str]=None, corporate_ids_for_auth: List[int]=None, corporates: List[int]=None, country: List[str]=None, created_at: str=None, current_services: List[str]=None, daily_proofreading_capacity: int=None, daily_translation_capacity: int=None, destination_languages: List[int]=None, dtp_software: List[str]=None, email_address: str=None, experience: List[str]=None, first_name: str=None, id: List[int]=None, is_certified_translator: bool=None, is_sworn_translator: bool=None, language_pairs: List[List[int]]=None, last_name: str=None, last_online: str=None, last_worked: str=None, memoq: int=None, memsource: int=None, min_tqs: float=None, omegat: int=None, project_count: int=None, proofreader_experience: int=None, provides_creative_writing_service: bool=None, provides_postedit_service: bool=None, quote_file_subjects: List[str]=None, reference: str=None, sdl_trados: int=None, search: str=None, skype_id: str=None, smartcat: int=None, smartling: int=None, source_languages: List[int]=None, specialization: List[str]=None, status: List[str]=None, subtitle_edit: int=None, subtitle_workshop: int=None, translator_association: str=None, transsuite_2000: int=None, user_working_timezone: List[str]=None, vendor_profile_lsp: str=None, vendor_tags: List[str]=None, vendor_type: List[str]=None, vendor_working_timezone: List[str]=None, word_count: int=None, wordbee: int=None, wordfast: int=None, work_type: str=None, work_with: str=None, working_as: List[str]=None, xbench: int=None, xtm: int=None):
        """FilterVendorRequest - a model defined in OpenAPI

        :param clients: The clients of this FilterVendorRequest.
        :param communication_channel: The communication_channel of this FilterVendorRequest.
        :param corporate_ids_for_auth: The corporate_ids_for_auth of this FilterVendorRequest.
        :param corporates: The corporates of this FilterVendorRequest.
        :param country: The country of this FilterVendorRequest.
        :param created_at: The created_at of this FilterVendorRequest.
        :param current_services: The current_services of this FilterVendorRequest.
        :param daily_proofreading_capacity: The daily_proofreading_capacity of this FilterVendorRequest.
        :param daily_translation_capacity: The daily_translation_capacity of this FilterVendorRequest.
        :param destination_languages: The destination_languages of this FilterVendorRequest.
        :param dtp_software: The dtp_software of this FilterVendorRequest.
        :param email_address: The email_address of this FilterVendorRequest.
        :param experience: The experience of this FilterVendorRequest.
        :param first_name: The first_name of this FilterVendorRequest.
        :param id: The id of this FilterVendorRequest.
        :param is_certified_translator: The is_certified_translator of this FilterVendorRequest.
        :param is_sworn_translator: The is_sworn_translator of this FilterVendorRequest.
        :param language_pairs: The language_pairs of this FilterVendorRequest.
        :param last_name: The last_name of this FilterVendorRequest.
        :param last_online: The last_online of this FilterVendorRequest.
        :param last_worked: The last_worked of this FilterVendorRequest.
        :param memoq: The memoq of this FilterVendorRequest.
        :param memsource: The memsource of this FilterVendorRequest.
        :param min_tqs: The min_tqs of this FilterVendorRequest.
        :param omegat: The omegat of this FilterVendorRequest.
        :param project_count: The project_count of this FilterVendorRequest.
        :param proofreader_experience: The proofreader_experience of this FilterVendorRequest.
        :param provides_creative_writing_service: The provides_creative_writing_service of this FilterVendorRequest.
        :param provides_postedit_service: The provides_postedit_service of this FilterVendorRequest.
        :param quote_file_subjects: The quote_file_subjects of this FilterVendorRequest.
        :param reference: The reference of this FilterVendorRequest.
        :param sdl_trados: The sdl_trados of this FilterVendorRequest.
        :param search: The search of this FilterVendorRequest.
        :param skype_id: The skype_id of this FilterVendorRequest.
        :param smartcat: The smartcat of this FilterVendorRequest.
        :param smartling: The smartling of this FilterVendorRequest.
        :param source_languages: The source_languages of this FilterVendorRequest.
        :param specialization: The specialization of this FilterVendorRequest.
        :param status: The status of this FilterVendorRequest.
        :param subtitle_edit: The subtitle_edit of this FilterVendorRequest.
        :param subtitle_workshop: The subtitle_workshop of this FilterVendorRequest.
        :param translator_association: The translator_association of this FilterVendorRequest.
        :param transsuite_2000: The transsuite_2000 of this FilterVendorRequest.
        :param user_working_timezone: The user_working_timezone of this FilterVendorRequest.
        :param vendor_profile_lsp: The vendor_profile_lsp of this FilterVendorRequest.
        :param vendor_tags: The vendor_tags of this FilterVendorRequest.
        :param vendor_type: The vendor_type of this FilterVendorRequest.
        :param vendor_working_timezone: The vendor_working_timezone of this FilterVendorRequest.
        :param word_count: The word_count of this FilterVendorRequest.
        :param wordbee: The wordbee of this FilterVendorRequest.
        :param wordfast: The wordfast of this FilterVendorRequest.
        :param work_type: The work_type of this FilterVendorRequest.
        :param work_with: The work_with of this FilterVendorRequest.
        :param working_as: The working_as of this FilterVendorRequest.
        :param xbench: The xbench of this FilterVendorRequest.
        :param xtm: The xtm of this FilterVendorRequest.
        """
        self.openapi_types = {
            'clients': List[int],
            'communication_channel': List[str],
            'corporate_ids_for_auth': List[int],
            'corporates': List[int],
            'country': List[str],
            'created_at': str,
            'current_services': List[str],
            'daily_proofreading_capacity': int,
            'daily_translation_capacity': int,
            'destination_languages': List[int],
            'dtp_software': List[str],
            'email_address': str,
            'experience': List[str],
            'first_name': str,
            'id': List[int],
            'is_certified_translator': bool,
            'is_sworn_translator': bool,
            'language_pairs': List[List[int]],
            'last_name': str,
            'last_online': str,
            'last_worked': str,
            'memoq': int,
            'memsource': int,
            'min_tqs': float,
            'omegat': int,
            'project_count': int,
            'proofreader_experience': int,
            'provides_creative_writing_service': bool,
            'provides_postedit_service': bool,
            'quote_file_subjects': List[str],
            'reference': str,
            'sdl_trados': int,
            'search': str,
            'skype_id': str,
            'smartcat': int,
            'smartling': int,
            'source_languages': List[int],
            'specialization': List[str],
            'status': List[str],
            'subtitle_edit': int,
            'subtitle_workshop': int,
            'translator_association': str,
            'transsuite_2000': int,
            'user_working_timezone': List[str],
            'vendor_profile_lsp': str,
            'vendor_tags': List[str],
            'vendor_type': List[str],
            'vendor_working_timezone': List[str],
            'word_count': int,
            'wordbee': int,
            'wordfast': int,
            'work_type': str,
            'work_with': str,
            'working_as': List[str],
            'xbench': int,
            'xtm': int
        }

        self.attribute_map = {
            'clients': 'clients',
            'communication_channel': 'communication_channel',
            'corporate_ids_for_auth': 'corporate_ids_for_auth',
            'corporates': 'corporates',
            'country': 'country',
            'created_at': 'created_at',
            'current_services': 'current_services',
            'daily_proofreading_capacity': 'daily_proofreading_capacity',
            'daily_translation_capacity': 'daily_translation_capacity',
            'destination_languages': 'destination_languages',
            'dtp_software': 'dtp_software',
            'email_address': 'email_address',
            'experience': 'experience',
            'first_name': 'first_name',
            'id': 'id',
            'is_certified_translator': 'is_certified_translator',
            'is_sworn_translator': 'is_sworn_translator',
            'language_pairs': 'language_pairs',
            'last_name': 'last_name',
            'last_online': 'last_online',
            'last_worked': 'last_worked',
            'memoq': 'memoq',
            'memsource': 'memsource',
            'min_tqs': 'min_tqs',
            'omegat': 'omegat',
            'project_count': 'project_count',
            'proofreader_experience': 'proofreader_experience',
            'provides_creative_writing_service': 'provides_creative_writing_service',
            'provides_postedit_service': 'provides_postedit_service',
            'quote_file_subjects': 'quote_file_subjects',
            'reference': 'reference',
            'sdl_trados': 'sdl_trados',
            'search': 'search',
            'skype_id': 'skype_id',
            'smartcat': 'smartcat',
            'smartling': 'smartling',
            'source_languages': 'source_languages',
            'specialization': 'specialization',
            'status': 'status',
            'subtitle_edit': 'subtitle_edit',
            'subtitle_workshop': 'subtitle_workshop',
            'translator_association': 'translator_association',
            'transsuite_2000': 'transsuite_2000',
            'user_working_timezone': 'user_working_timezone',
            'vendor_profile_lsp': 'vendor_profile_lsp',
            'vendor_tags': 'vendor_tags',
            'vendor_type': 'vendor_type',
            'vendor_working_timezone': 'vendor_working_timezone',
            'word_count': 'word_count',
            'wordbee': 'wordbee',
            'wordfast': 'wordfast',
            'work_type': 'work_type',
            'work_with': 'work_with',
            'working_as': 'working_as',
            'xbench': 'xbench',
            'xtm': 'xtm'
        }

        self._clients = clients
        self._communication_channel = communication_channel
        self._corporate_ids_for_auth = corporate_ids_for_auth
        self._corporates = corporates
        self._country = country
        self._created_at = created_at
        self._current_services = current_services
        self._daily_proofreading_capacity = daily_proofreading_capacity
        self._daily_translation_capacity = daily_translation_capacity
        self._destination_languages = destination_languages
        self._dtp_software = dtp_software
        self._email_address = email_address
        self._experience = experience
        self._first_name = first_name
        self._id = id
        self._is_certified_translator = is_certified_translator
        self._is_sworn_translator = is_sworn_translator
        self._language_pairs = language_pairs
        self._last_name = last_name
        self._last_online = last_online
        self._last_worked = last_worked
        self._memoq = memoq
        self._memsource = memsource
        self._min_tqs = min_tqs
        self._omegat = omegat
        self._project_count = project_count
        self._proofreader_experience = proofreader_experience
        self._provides_creative_writing_service = provides_creative_writing_service
        self._provides_postedit_service = provides_postedit_service
        self._quote_file_subjects = quote_file_subjects
        self._reference = reference
        self._sdl_trados = sdl_trados
        self._search = search
        self._skype_id = skype_id
        self._smartcat = smartcat
        self._smartling = smartling
        self._source_languages = source_languages
        self._specialization = specialization
        self._status = status
        self._subtitle_edit = subtitle_edit
        self._subtitle_workshop = subtitle_workshop
        self._translator_association = translator_association
        self._transsuite_2000 = transsuite_2000
        self._user_working_timezone = user_working_timezone
        self._vendor_profile_lsp = vendor_profile_lsp
        self._vendor_tags = vendor_tags
        self._vendor_type = vendor_type
        self._vendor_working_timezone = vendor_working_timezone
        self._word_count = word_count
        self._wordbee = wordbee
        self._wordfast = wordfast
        self._work_type = work_type
        self._work_with = work_with
        self._working_as = working_as
        self._xbench = xbench
        self._xtm = xtm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterVendorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterVendorRequest of this FilterVendorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clients(self):
        """Gets the clients of this FilterVendorRequest.


        :return: The clients of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this FilterVendorRequest.


        :param clients: The clients of this FilterVendorRequest.
        :type clients: List[int]
        """

        self._clients = clients

    @property
    def communication_channel(self):
        """Gets the communication_channel of this FilterVendorRequest.


        :return: The communication_channel of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._communication_channel

    @communication_channel.setter
    def communication_channel(self, communication_channel):
        """Sets the communication_channel of this FilterVendorRequest.


        :param communication_channel: The communication_channel of this FilterVendorRequest.
        :type communication_channel: List[str]
        """

        self._communication_channel = communication_channel

    @property
    def corporate_ids_for_auth(self):
        """Gets the corporate_ids_for_auth of this FilterVendorRequest.


        :return: The corporate_ids_for_auth of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._corporate_ids_for_auth

    @corporate_ids_for_auth.setter
    def corporate_ids_for_auth(self, corporate_ids_for_auth):
        """Sets the corporate_ids_for_auth of this FilterVendorRequest.


        :param corporate_ids_for_auth: The corporate_ids_for_auth of this FilterVendorRequest.
        :type corporate_ids_for_auth: List[int]
        """

        self._corporate_ids_for_auth = corporate_ids_for_auth

    @property
    def corporates(self):
        """Gets the corporates of this FilterVendorRequest.


        :return: The corporates of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._corporates

    @corporates.setter
    def corporates(self, corporates):
        """Sets the corporates of this FilterVendorRequest.


        :param corporates: The corporates of this FilterVendorRequest.
        :type corporates: List[int]
        """

        self._corporates = corporates

    @property
    def country(self):
        """Gets the country of this FilterVendorRequest.


        :return: The country of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FilterVendorRequest.


        :param country: The country of this FilterVendorRequest.
        :type country: List[str]
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this FilterVendorRequest.


        :return: The created_at of this FilterVendorRequest.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FilterVendorRequest.


        :param created_at: The created_at of this FilterVendorRequest.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def current_services(self):
        """Gets the current_services of this FilterVendorRequest.


        :return: The current_services of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._current_services

    @current_services.setter
    def current_services(self, current_services):
        """Sets the current_services of this FilterVendorRequest.


        :param current_services: The current_services of this FilterVendorRequest.
        :type current_services: List[str]
        """

        self._current_services = current_services

    @property
    def daily_proofreading_capacity(self):
        """Gets the daily_proofreading_capacity of this FilterVendorRequest.


        :return: The daily_proofreading_capacity of this FilterVendorRequest.
        :rtype: int
        """
        return self._daily_proofreading_capacity

    @daily_proofreading_capacity.setter
    def daily_proofreading_capacity(self, daily_proofreading_capacity):
        """Sets the daily_proofreading_capacity of this FilterVendorRequest.


        :param daily_proofreading_capacity: The daily_proofreading_capacity of this FilterVendorRequest.
        :type daily_proofreading_capacity: int
        """

        self._daily_proofreading_capacity = daily_proofreading_capacity

    @property
    def daily_translation_capacity(self):
        """Gets the daily_translation_capacity of this FilterVendorRequest.


        :return: The daily_translation_capacity of this FilterVendorRequest.
        :rtype: int
        """
        return self._daily_translation_capacity

    @daily_translation_capacity.setter
    def daily_translation_capacity(self, daily_translation_capacity):
        """Sets the daily_translation_capacity of this FilterVendorRequest.


        :param daily_translation_capacity: The daily_translation_capacity of this FilterVendorRequest.
        :type daily_translation_capacity: int
        """

        self._daily_translation_capacity = daily_translation_capacity

    @property
    def destination_languages(self):
        """Gets the destination_languages of this FilterVendorRequest.


        :return: The destination_languages of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._destination_languages

    @destination_languages.setter
    def destination_languages(self, destination_languages):
        """Sets the destination_languages of this FilterVendorRequest.


        :param destination_languages: The destination_languages of this FilterVendorRequest.
        :type destination_languages: List[int]
        """

        self._destination_languages = destination_languages

    @property
    def dtp_software(self):
        """Gets the dtp_software of this FilterVendorRequest.


        :return: The dtp_software of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._dtp_software

    @dtp_software.setter
    def dtp_software(self, dtp_software):
        """Sets the dtp_software of this FilterVendorRequest.


        :param dtp_software: The dtp_software of this FilterVendorRequest.
        :type dtp_software: List[str]
        """

        self._dtp_software = dtp_software

    @property
    def email_address(self):
        """Gets the email_address of this FilterVendorRequest.


        :return: The email_address of this FilterVendorRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this FilterVendorRequest.


        :param email_address: The email_address of this FilterVendorRequest.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def experience(self):
        """Gets the experience of this FilterVendorRequest.


        :return: The experience of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """Sets the experience of this FilterVendorRequest.


        :param experience: The experience of this FilterVendorRequest.
        :type experience: List[str]
        """

        self._experience = experience

    @property
    def first_name(self):
        """Gets the first_name of this FilterVendorRequest.


        :return: The first_name of this FilterVendorRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this FilterVendorRequest.


        :param first_name: The first_name of this FilterVendorRequest.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this FilterVendorRequest.


        :return: The id of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterVendorRequest.


        :param id: The id of this FilterVendorRequest.
        :type id: List[int]
        """

        self._id = id

    @property
    def is_certified_translator(self):
        """Gets the is_certified_translator of this FilterVendorRequest.


        :return: The is_certified_translator of this FilterVendorRequest.
        :rtype: bool
        """
        return self._is_certified_translator

    @is_certified_translator.setter
    def is_certified_translator(self, is_certified_translator):
        """Sets the is_certified_translator of this FilterVendorRequest.


        :param is_certified_translator: The is_certified_translator of this FilterVendorRequest.
        :type is_certified_translator: bool
        """

        self._is_certified_translator = is_certified_translator

    @property
    def is_sworn_translator(self):
        """Gets the is_sworn_translator of this FilterVendorRequest.


        :return: The is_sworn_translator of this FilterVendorRequest.
        :rtype: bool
        """
        return self._is_sworn_translator

    @is_sworn_translator.setter
    def is_sworn_translator(self, is_sworn_translator):
        """Sets the is_sworn_translator of this FilterVendorRequest.


        :param is_sworn_translator: The is_sworn_translator of this FilterVendorRequest.
        :type is_sworn_translator: bool
        """

        self._is_sworn_translator = is_sworn_translator

    @property
    def language_pairs(self):
        """Gets the language_pairs of this FilterVendorRequest.


        :return: The language_pairs of this FilterVendorRequest.
        :rtype: List[List[int]]
        """
        return self._language_pairs

    @language_pairs.setter
    def language_pairs(self, language_pairs):
        """Sets the language_pairs of this FilterVendorRequest.


        :param language_pairs: The language_pairs of this FilterVendorRequest.
        :type language_pairs: List[List[int]]
        """

        self._language_pairs = language_pairs

    @property
    def last_name(self):
        """Gets the last_name of this FilterVendorRequest.


        :return: The last_name of this FilterVendorRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this FilterVendorRequest.


        :param last_name: The last_name of this FilterVendorRequest.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def last_online(self):
        """Gets the last_online of this FilterVendorRequest.


        :return: The last_online of this FilterVendorRequest.
        :rtype: str
        """
        return self._last_online

    @last_online.setter
    def last_online(self, last_online):
        """Sets the last_online of this FilterVendorRequest.


        :param last_online: The last_online of this FilterVendorRequest.
        :type last_online: str
        """

        self._last_online = last_online

    @property
    def last_worked(self):
        """Gets the last_worked of this FilterVendorRequest.


        :return: The last_worked of this FilterVendorRequest.
        :rtype: str
        """
        return self._last_worked

    @last_worked.setter
    def last_worked(self, last_worked):
        """Sets the last_worked of this FilterVendorRequest.


        :param last_worked: The last_worked of this FilterVendorRequest.
        :type last_worked: str
        """

        self._last_worked = last_worked

    @property
    def memoq(self):
        """Gets the memoq of this FilterVendorRequest.


        :return: The memoq of this FilterVendorRequest.
        :rtype: int
        """
        return self._memoq

    @memoq.setter
    def memoq(self, memoq):
        """Sets the memoq of this FilterVendorRequest.


        :param memoq: The memoq of this FilterVendorRequest.
        :type memoq: int
        """

        self._memoq = memoq

    @property
    def memsource(self):
        """Gets the memsource of this FilterVendorRequest.


        :return: The memsource of this FilterVendorRequest.
        :rtype: int
        """
        return self._memsource

    @memsource.setter
    def memsource(self, memsource):
        """Sets the memsource of this FilterVendorRequest.


        :param memsource: The memsource of this FilterVendorRequest.
        :type memsource: int
        """

        self._memsource = memsource

    @property
    def min_tqs(self):
        """Gets the min_tqs of this FilterVendorRequest.


        :return: The min_tqs of this FilterVendorRequest.
        :rtype: float
        """
        return self._min_tqs

    @min_tqs.setter
    def min_tqs(self, min_tqs):
        """Sets the min_tqs of this FilterVendorRequest.


        :param min_tqs: The min_tqs of this FilterVendorRequest.
        :type min_tqs: float
        """

        self._min_tqs = min_tqs

    @property
    def omegat(self):
        """Gets the omegat of this FilterVendorRequest.


        :return: The omegat of this FilterVendorRequest.
        :rtype: int
        """
        return self._omegat

    @omegat.setter
    def omegat(self, omegat):
        """Sets the omegat of this FilterVendorRequest.


        :param omegat: The omegat of this FilterVendorRequest.
        :type omegat: int
        """

        self._omegat = omegat

    @property
    def project_count(self):
        """Gets the project_count of this FilterVendorRequest.


        :return: The project_count of this FilterVendorRequest.
        :rtype: int
        """
        return self._project_count

    @project_count.setter
    def project_count(self, project_count):
        """Sets the project_count of this FilterVendorRequest.


        :param project_count: The project_count of this FilterVendorRequest.
        :type project_count: int
        """

        self._project_count = project_count

    @property
    def proofreader_experience(self):
        """Gets the proofreader_experience of this FilterVendorRequest.


        :return: The proofreader_experience of this FilterVendorRequest.
        :rtype: int
        """
        return self._proofreader_experience

    @proofreader_experience.setter
    def proofreader_experience(self, proofreader_experience):
        """Sets the proofreader_experience of this FilterVendorRequest.


        :param proofreader_experience: The proofreader_experience of this FilterVendorRequest.
        :type proofreader_experience: int
        """

        self._proofreader_experience = proofreader_experience

    @property
    def provides_creative_writing_service(self):
        """Gets the provides_creative_writing_service of this FilterVendorRequest.


        :return: The provides_creative_writing_service of this FilterVendorRequest.
        :rtype: bool
        """
        return self._provides_creative_writing_service

    @provides_creative_writing_service.setter
    def provides_creative_writing_service(self, provides_creative_writing_service):
        """Sets the provides_creative_writing_service of this FilterVendorRequest.


        :param provides_creative_writing_service: The provides_creative_writing_service of this FilterVendorRequest.
        :type provides_creative_writing_service: bool
        """

        self._provides_creative_writing_service = provides_creative_writing_service

    @property
    def provides_postedit_service(self):
        """Gets the provides_postedit_service of this FilterVendorRequest.


        :return: The provides_postedit_service of this FilterVendorRequest.
        :rtype: bool
        """
        return self._provides_postedit_service

    @provides_postedit_service.setter
    def provides_postedit_service(self, provides_postedit_service):
        """Sets the provides_postedit_service of this FilterVendorRequest.


        :param provides_postedit_service: The provides_postedit_service of this FilterVendorRequest.
        :type provides_postedit_service: bool
        """

        self._provides_postedit_service = provides_postedit_service

    @property
    def quote_file_subjects(self):
        """Gets the quote_file_subjects of this FilterVendorRequest.


        :return: The quote_file_subjects of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._quote_file_subjects

    @quote_file_subjects.setter
    def quote_file_subjects(self, quote_file_subjects):
        """Sets the quote_file_subjects of this FilterVendorRequest.


        :param quote_file_subjects: The quote_file_subjects of this FilterVendorRequest.
        :type quote_file_subjects: List[str]
        """

        self._quote_file_subjects = quote_file_subjects

    @property
    def reference(self):
        """Gets the reference of this FilterVendorRequest.


        :return: The reference of this FilterVendorRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this FilterVendorRequest.


        :param reference: The reference of this FilterVendorRequest.
        :type reference: str
        """

        self._reference = reference

    @property
    def sdl_trados(self):
        """Gets the sdl_trados of this FilterVendorRequest.


        :return: The sdl_trados of this FilterVendorRequest.
        :rtype: int
        """
        return self._sdl_trados

    @sdl_trados.setter
    def sdl_trados(self, sdl_trados):
        """Sets the sdl_trados of this FilterVendorRequest.


        :param sdl_trados: The sdl_trados of this FilterVendorRequest.
        :type sdl_trados: int
        """

        self._sdl_trados = sdl_trados

    @property
    def search(self):
        """Gets the search of this FilterVendorRequest.


        :return: The search of this FilterVendorRequest.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this FilterVendorRequest.


        :param search: The search of this FilterVendorRequest.
        :type search: str
        """

        self._search = search

    @property
    def skype_id(self):
        """Gets the skype_id of this FilterVendorRequest.


        :return: The skype_id of this FilterVendorRequest.
        :rtype: str
        """
        return self._skype_id

    @skype_id.setter
    def skype_id(self, skype_id):
        """Sets the skype_id of this FilterVendorRequest.


        :param skype_id: The skype_id of this FilterVendorRequest.
        :type skype_id: str
        """

        self._skype_id = skype_id

    @property
    def smartcat(self):
        """Gets the smartcat of this FilterVendorRequest.


        :return: The smartcat of this FilterVendorRequest.
        :rtype: int
        """
        return self._smartcat

    @smartcat.setter
    def smartcat(self, smartcat):
        """Sets the smartcat of this FilterVendorRequest.


        :param smartcat: The smartcat of this FilterVendorRequest.
        :type smartcat: int
        """

        self._smartcat = smartcat

    @property
    def smartling(self):
        """Gets the smartling of this FilterVendorRequest.


        :return: The smartling of this FilterVendorRequest.
        :rtype: int
        """
        return self._smartling

    @smartling.setter
    def smartling(self, smartling):
        """Sets the smartling of this FilterVendorRequest.


        :param smartling: The smartling of this FilterVendorRequest.
        :type smartling: int
        """

        self._smartling = smartling

    @property
    def source_languages(self):
        """Gets the source_languages of this FilterVendorRequest.


        :return: The source_languages of this FilterVendorRequest.
        :rtype: List[int]
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this FilterVendorRequest.


        :param source_languages: The source_languages of this FilterVendorRequest.
        :type source_languages: List[int]
        """

        self._source_languages = source_languages

    @property
    def specialization(self):
        """Gets the specialization of this FilterVendorRequest.


        :return: The specialization of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._specialization

    @specialization.setter
    def specialization(self, specialization):
        """Sets the specialization of this FilterVendorRequest.


        :param specialization: The specialization of this FilterVendorRequest.
        :type specialization: List[str]
        """

        self._specialization = specialization

    @property
    def status(self):
        """Gets the status of this FilterVendorRequest.


        :return: The status of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FilterVendorRequest.


        :param status: The status of this FilterVendorRequest.
        :type status: List[str]
        """

        self._status = status

    @property
    def subtitle_edit(self):
        """Gets the subtitle_edit of this FilterVendorRequest.


        :return: The subtitle_edit of this FilterVendorRequest.
        :rtype: int
        """
        return self._subtitle_edit

    @subtitle_edit.setter
    def subtitle_edit(self, subtitle_edit):
        """Sets the subtitle_edit of this FilterVendorRequest.


        :param subtitle_edit: The subtitle_edit of this FilterVendorRequest.
        :type subtitle_edit: int
        """

        self._subtitle_edit = subtitle_edit

    @property
    def subtitle_workshop(self):
        """Gets the subtitle_workshop of this FilterVendorRequest.


        :return: The subtitle_workshop of this FilterVendorRequest.
        :rtype: int
        """
        return self._subtitle_workshop

    @subtitle_workshop.setter
    def subtitle_workshop(self, subtitle_workshop):
        """Sets the subtitle_workshop of this FilterVendorRequest.


        :param subtitle_workshop: The subtitle_workshop of this FilterVendorRequest.
        :type subtitle_workshop: int
        """

        self._subtitle_workshop = subtitle_workshop

    @property
    def translator_association(self):
        """Gets the translator_association of this FilterVendorRequest.


        :return: The translator_association of this FilterVendorRequest.
        :rtype: str
        """
        return self._translator_association

    @translator_association.setter
    def translator_association(self, translator_association):
        """Sets the translator_association of this FilterVendorRequest.


        :param translator_association: The translator_association of this FilterVendorRequest.
        :type translator_association: str
        """

        self._translator_association = translator_association

    @property
    def transsuite_2000(self):
        """Gets the transsuite_2000 of this FilterVendorRequest.


        :return: The transsuite_2000 of this FilterVendorRequest.
        :rtype: int
        """
        return self._transsuite_2000

    @transsuite_2000.setter
    def transsuite_2000(self, transsuite_2000):
        """Sets the transsuite_2000 of this FilterVendorRequest.


        :param transsuite_2000: The transsuite_2000 of this FilterVendorRequest.
        :type transsuite_2000: int
        """

        self._transsuite_2000 = transsuite_2000

    @property
    def user_working_timezone(self):
        """Gets the user_working_timezone of this FilterVendorRequest.


        :return: The user_working_timezone of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._user_working_timezone

    @user_working_timezone.setter
    def user_working_timezone(self, user_working_timezone):
        """Sets the user_working_timezone of this FilterVendorRequest.


        :param user_working_timezone: The user_working_timezone of this FilterVendorRequest.
        :type user_working_timezone: List[str]
        """

        self._user_working_timezone = user_working_timezone

    @property
    def vendor_profile_lsp(self):
        """Gets the vendor_profile_lsp of this FilterVendorRequest.


        :return: The vendor_profile_lsp of this FilterVendorRequest.
        :rtype: str
        """
        return self._vendor_profile_lsp

    @vendor_profile_lsp.setter
    def vendor_profile_lsp(self, vendor_profile_lsp):
        """Sets the vendor_profile_lsp of this FilterVendorRequest.


        :param vendor_profile_lsp: The vendor_profile_lsp of this FilterVendorRequest.
        :type vendor_profile_lsp: str
        """

        self._vendor_profile_lsp = vendor_profile_lsp

    @property
    def vendor_tags(self):
        """Gets the vendor_tags of this FilterVendorRequest.


        :return: The vendor_tags of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._vendor_tags

    @vendor_tags.setter
    def vendor_tags(self, vendor_tags):
        """Sets the vendor_tags of this FilterVendorRequest.


        :param vendor_tags: The vendor_tags of this FilterVendorRequest.
        :type vendor_tags: List[str]
        """

        self._vendor_tags = vendor_tags

    @property
    def vendor_type(self):
        """Gets the vendor_type of this FilterVendorRequest.


        :return: The vendor_type of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this FilterVendorRequest.


        :param vendor_type: The vendor_type of this FilterVendorRequest.
        :type vendor_type: List[str]
        """

        self._vendor_type = vendor_type

    @property
    def vendor_working_timezone(self):
        """Gets the vendor_working_timezone of this FilterVendorRequest.


        :return: The vendor_working_timezone of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._vendor_working_timezone

    @vendor_working_timezone.setter
    def vendor_working_timezone(self, vendor_working_timezone):
        """Sets the vendor_working_timezone of this FilterVendorRequest.


        :param vendor_working_timezone: The vendor_working_timezone of this FilterVendorRequest.
        :type vendor_working_timezone: List[str]
        """

        self._vendor_working_timezone = vendor_working_timezone

    @property
    def word_count(self):
        """Gets the word_count of this FilterVendorRequest.


        :return: The word_count of this FilterVendorRequest.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this FilterVendorRequest.


        :param word_count: The word_count of this FilterVendorRequest.
        :type word_count: int
        """

        self._word_count = word_count

    @property
    def wordbee(self):
        """Gets the wordbee of this FilterVendorRequest.


        :return: The wordbee of this FilterVendorRequest.
        :rtype: int
        """
        return self._wordbee

    @wordbee.setter
    def wordbee(self, wordbee):
        """Sets the wordbee of this FilterVendorRequest.


        :param wordbee: The wordbee of this FilterVendorRequest.
        :type wordbee: int
        """

        self._wordbee = wordbee

    @property
    def wordfast(self):
        """Gets the wordfast of this FilterVendorRequest.


        :return: The wordfast of this FilterVendorRequest.
        :rtype: int
        """
        return self._wordfast

    @wordfast.setter
    def wordfast(self, wordfast):
        """Sets the wordfast of this FilterVendorRequest.


        :param wordfast: The wordfast of this FilterVendorRequest.
        :type wordfast: int
        """

        self._wordfast = wordfast

    @property
    def work_type(self):
        """Gets the work_type of this FilterVendorRequest.


        :return: The work_type of this FilterVendorRequest.
        :rtype: str
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this FilterVendorRequest.


        :param work_type: The work_type of this FilterVendorRequest.
        :type work_type: str
        """

        self._work_type = work_type

    @property
    def work_with(self):
        """Gets the work_with of this FilterVendorRequest.


        :return: The work_with of this FilterVendorRequest.
        :rtype: str
        """
        return self._work_with

    @work_with.setter
    def work_with(self, work_with):
        """Sets the work_with of this FilterVendorRequest.


        :param work_with: The work_with of this FilterVendorRequest.
        :type work_with: str
        """

        self._work_with = work_with

    @property
    def working_as(self):
        """Gets the working_as of this FilterVendorRequest.


        :return: The working_as of this FilterVendorRequest.
        :rtype: List[str]
        """
        return self._working_as

    @working_as.setter
    def working_as(self, working_as):
        """Sets the working_as of this FilterVendorRequest.


        :param working_as: The working_as of this FilterVendorRequest.
        :type working_as: List[str]
        """

        self._working_as = working_as

    @property
    def xbench(self):
        """Gets the xbench of this FilterVendorRequest.


        :return: The xbench of this FilterVendorRequest.
        :rtype: int
        """
        return self._xbench

    @xbench.setter
    def xbench(self, xbench):
        """Sets the xbench of this FilterVendorRequest.


        :param xbench: The xbench of this FilterVendorRequest.
        :type xbench: int
        """

        self._xbench = xbench

    @property
    def xtm(self):
        """Gets the xtm of this FilterVendorRequest.


        :return: The xtm of this FilterVendorRequest.
        :rtype: int
        """
        return self._xtm

    @xtm.setter
    def xtm(self, xtm):
        """Sets the xtm of this FilterVendorRequest.


        :param xtm: The xtm of this FilterVendorRequest.
        :type xtm: int
        """

        self._xtm = xtm
