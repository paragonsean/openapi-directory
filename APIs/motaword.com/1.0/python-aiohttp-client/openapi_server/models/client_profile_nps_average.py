# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientProfileNpsAverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_surveys_count: float=None, score: float=None):
        """ClientProfileNpsAverage - a model defined in OpenAPI

        :param completed_surveys_count: The completed_surveys_count of this ClientProfileNpsAverage.
        :param score: The score of this ClientProfileNpsAverage.
        """
        self.openapi_types = {
            'completed_surveys_count': float,
            'score': float
        }

        self.attribute_map = {
            'completed_surveys_count': 'completed_surveys_count',
            'score': 'score'
        }

        self._completed_surveys_count = completed_surveys_count
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientProfileNpsAverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientProfile_nps_average of this ClientProfileNpsAverage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_surveys_count(self):
        """Gets the completed_surveys_count of this ClientProfileNpsAverage.

        total number of completed survey count by this client

        :return: The completed_surveys_count of this ClientProfileNpsAverage.
        :rtype: float
        """
        return self._completed_surveys_count

    @completed_surveys_count.setter
    def completed_surveys_count(self, completed_surveys_count):
        """Sets the completed_surveys_count of this ClientProfileNpsAverage.

        total number of completed survey count by this client

        :param completed_surveys_count: The completed_surveys_count of this ClientProfileNpsAverage.
        :type completed_surveys_count: float
        """

        self._completed_surveys_count = completed_surveys_count

    @property
    def score(self):
        """Gets the score of this ClientProfileNpsAverage.

        average score for all coompleted surveys

        :return: The score of this ClientProfileNpsAverage.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ClientProfileNpsAverage.

        average score for all coompleted surveys

        :param score: The score of this ClientProfileNpsAverage.
        :type score: float
        """

        self._score = score
