# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientStringTranslation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, last_changed: datetime=None, resource: str=None, resource_id: str=None, state: str=None, target_language: str=None):
        """ClientStringTranslation - a model defined in OpenAPI

        :param content: The content of this ClientStringTranslation.
        :param last_changed: The last_changed of this ClientStringTranslation.
        :param resource: The resource of this ClientStringTranslation.
        :param resource_id: The resource_id of this ClientStringTranslation.
        :param state: The state of this ClientStringTranslation.
        :param target_language: The target_language of this ClientStringTranslation.
        """
        self.openapi_types = {
            'content': str,
            'last_changed': datetime,
            'resource': str,
            'resource_id': str,
            'state': str,
            'target_language': str
        }

        self.attribute_map = {
            'content': 'content',
            'last_changed': 'last_changed',
            'resource': 'resource',
            'resource_id': 'resource_id',
            'state': 'state',
            'target_language': 'target_language'
        }

        self._content = content
        self._last_changed = last_changed
        self._resource = resource
        self._resource_id = resource_id
        self._state = state
        self._target_language = target_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientStringTranslation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientStringTranslation of this ClientStringTranslation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ClientStringTranslation.


        :return: The content of this ClientStringTranslation.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ClientStringTranslation.


        :param content: The content of this ClientStringTranslation.
        :type content: str
        """

        self._content = content

    @property
    def last_changed(self):
        """Gets the last_changed of this ClientStringTranslation.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The last_changed of this ClientStringTranslation.
        :rtype: datetime
        """
        return self._last_changed

    @last_changed.setter
    def last_changed(self, last_changed):
        """Sets the last_changed of this ClientStringTranslation.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param last_changed: The last_changed of this ClientStringTranslation.
        :type last_changed: datetime
        """

        self._last_changed = last_changed

    @property
    def resource(self):
        """Gets the resource of this ClientStringTranslation.


        :return: The resource of this ClientStringTranslation.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ClientStringTranslation.


        :param resource: The resource of this ClientStringTranslation.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_id(self):
        """Gets the resource_id of this ClientStringTranslation.


        :return: The resource_id of this ClientStringTranslation.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ClientStringTranslation.


        :param resource_id: The resource_id of this ClientStringTranslation.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def state(self):
        """Gets the state of this ClientStringTranslation.


        :return: The state of this ClientStringTranslation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientStringTranslation.


        :param state: The state of this ClientStringTranslation.
        :type state: str
        """
        allowed_values = ["Translated", "Approved"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target_language(self):
        """Gets the target_language of this ClientStringTranslation.


        :return: The target_language of this ClientStringTranslation.
        :rtype: str
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this ClientStringTranslation.


        :param target_language: The target_language of this ClientStringTranslation.
        :type target_language: str
        """

        self._target_language = target_language
