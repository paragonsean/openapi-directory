# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class UsersReportReportInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, spending: float=None, user: User=None, word_count: int=None):
        """UsersReportReportInner - a model defined in OpenAPI

        :param currency: The currency of this UsersReportReportInner.
        :param spending: The spending of this UsersReportReportInner.
        :param user: The user of this UsersReportReportInner.
        :param word_count: The word_count of this UsersReportReportInner.
        """
        self.openapi_types = {
            'currency': str,
            'spending': float,
            'user': User,
            'word_count': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'spending': 'spending',
            'user': 'user',
            'word_count': 'word_count'
        }

        self._currency = currency
        self._spending = spending
        self._user = user
        self._word_count = word_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersReportReportInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsersReport_report_inner of this UsersReportReportInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this UsersReportReportInner.


        :return: The currency of this UsersReportReportInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UsersReportReportInner.


        :param currency: The currency of this UsersReportReportInner.
        :type currency: str
        """

        self._currency = currency

    @property
    def spending(self):
        """Gets the spending of this UsersReportReportInner.


        :return: The spending of this UsersReportReportInner.
        :rtype: float
        """
        return self._spending

    @spending.setter
    def spending(self, spending):
        """Sets the spending of this UsersReportReportInner.


        :param spending: The spending of this UsersReportReportInner.
        :type spending: float
        """

        self._spending = spending

    @property
    def user(self):
        """Gets the user of this UsersReportReportInner.


        :return: The user of this UsersReportReportInner.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UsersReportReportInner.


        :param user: The user of this UsersReportReportInner.
        :type user: User
        """

        self._user = user

    @property
    def word_count(self):
        """Gets the word_count of this UsersReportReportInner.


        :return: The word_count of this UsersReportReportInner.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this UsersReportReportInner.


        :param word_count: The word_count of this UsersReportReportInner.
        :type word_count: int
        """

        self._word_count = word_count
