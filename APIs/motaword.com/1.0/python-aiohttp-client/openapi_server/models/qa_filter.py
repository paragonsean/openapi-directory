# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QaFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_codes: List[str]=None, categories: List[str]=None, clients: List[float]=None, date_from: datetime=None, date_to: datetime=None, documents: List[float]=None, projects: List[float]=None, severities: List[str]=None, source_languages: List[str]=None, subjects: List[str]=None, target_languages: List[str]=None, vendors: List[float]=None):
        """QaFilter - a model defined in OpenAPI

        :param budget_codes: The budget_codes of this QaFilter.
        :param categories: The categories of this QaFilter.
        :param clients: The clients of this QaFilter.
        :param date_from: The date_from of this QaFilter.
        :param date_to: The date_to of this QaFilter.
        :param documents: The documents of this QaFilter.
        :param projects: The projects of this QaFilter.
        :param severities: The severities of this QaFilter.
        :param source_languages: The source_languages of this QaFilter.
        :param subjects: The subjects of this QaFilter.
        :param target_languages: The target_languages of this QaFilter.
        :param vendors: The vendors of this QaFilter.
        """
        self.openapi_types = {
            'budget_codes': List[str],
            'categories': List[str],
            'clients': List[float],
            'date_from': datetime,
            'date_to': datetime,
            'documents': List[float],
            'projects': List[float],
            'severities': List[str],
            'source_languages': List[str],
            'subjects': List[str],
            'target_languages': List[str],
            'vendors': List[float]
        }

        self.attribute_map = {
            'budget_codes': 'budget_codes',
            'categories': 'categories',
            'clients': 'clients',
            'date_from': 'date_from',
            'date_to': 'date_to',
            'documents': 'documents',
            'projects': 'projects',
            'severities': 'severities',
            'source_languages': 'source_languages',
            'subjects': 'subjects',
            'target_languages': 'target_languages',
            'vendors': 'vendors'
        }

        self._budget_codes = budget_codes
        self._categories = categories
        self._clients = clients
        self._date_from = date_from
        self._date_to = date_to
        self._documents = documents
        self._projects = projects
        self._severities = severities
        self._source_languages = source_languages
        self._subjects = subjects
        self._target_languages = target_languages
        self._vendors = vendors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QaFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QaFilter of this QaFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_codes(self):
        """Gets the budget_codes of this QaFilter.


        :return: The budget_codes of this QaFilter.
        :rtype: List[str]
        """
        return self._budget_codes

    @budget_codes.setter
    def budget_codes(self, budget_codes):
        """Sets the budget_codes of this QaFilter.


        :param budget_codes: The budget_codes of this QaFilter.
        :type budget_codes: List[str]
        """

        self._budget_codes = budget_codes

    @property
    def categories(self):
        """Gets the categories of this QaFilter.


        :return: The categories of this QaFilter.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this QaFilter.


        :param categories: The categories of this QaFilter.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def clients(self):
        """Gets the clients of this QaFilter.


        :return: The clients of this QaFilter.
        :rtype: List[float]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this QaFilter.


        :param clients: The clients of this QaFilter.
        :type clients: List[float]
        """

        self._clients = clients

    @property
    def date_from(self):
        """Gets the date_from of this QaFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The date_from of this QaFilter.
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this QaFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param date_from: The date_from of this QaFilter.
        :type date_from: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this QaFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The date_to of this QaFilter.
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this QaFilter.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param date_to: The date_to of this QaFilter.
        :type date_to: datetime
        """

        self._date_to = date_to

    @property
    def documents(self):
        """Gets the documents of this QaFilter.


        :return: The documents of this QaFilter.
        :rtype: List[float]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this QaFilter.


        :param documents: The documents of this QaFilter.
        :type documents: List[float]
        """

        self._documents = documents

    @property
    def projects(self):
        """Gets the projects of this QaFilter.


        :return: The projects of this QaFilter.
        :rtype: List[float]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this QaFilter.


        :param projects: The projects of this QaFilter.
        :type projects: List[float]
        """

        self._projects = projects

    @property
    def severities(self):
        """Gets the severities of this QaFilter.


        :return: The severities of this QaFilter.
        :rtype: List[str]
        """
        return self._severities

    @severities.setter
    def severities(self, severities):
        """Sets the severities of this QaFilter.


        :param severities: The severities of this QaFilter.
        :type severities: List[str]
        """

        self._severities = severities

    @property
    def source_languages(self):
        """Gets the source_languages of this QaFilter.


        :return: The source_languages of this QaFilter.
        :rtype: List[str]
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this QaFilter.


        :param source_languages: The source_languages of this QaFilter.
        :type source_languages: List[str]
        """

        self._source_languages = source_languages

    @property
    def subjects(self):
        """Gets the subjects of this QaFilter.


        :return: The subjects of this QaFilter.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this QaFilter.


        :param subjects: The subjects of this QaFilter.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def target_languages(self):
        """Gets the target_languages of this QaFilter.


        :return: The target_languages of this QaFilter.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this QaFilter.


        :param target_languages: The target_languages of this QaFilter.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages

    @property
    def vendors(self):
        """Gets the vendors of this QaFilter.


        :return: The vendors of this QaFilter.
        :rtype: List[float]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this QaFilter.


        :param vendors: The vendors of this QaFilter.
        :type vendors: List[float]
        """

        self._vendors = vendors
