# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountStyleGuideUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, styleguide: file=None):
        """AccountStyleGuideUploadRequest - a model defined in OpenAPI

        :param styleguide: The styleguide of this AccountStyleGuideUploadRequest.
        """
        self.openapi_types = {
            'styleguide': file
        }

        self.attribute_map = {
            'styleguide': 'styleguide'
        }

        self._styleguide = styleguide

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStyleGuideUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountStyleGuideUploadRequest of this AccountStyleGuideUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def styleguide(self):
        """Gets the styleguide of this AccountStyleGuideUploadRequest.

        Style guide file. Currently supported formats: .pdf, .docx, .txt

        :return: The styleguide of this AccountStyleGuideUploadRequest.
        :rtype: file
        """
        return self._styleguide

    @styleguide.setter
    def styleguide(self, styleguide):
        """Sets the styleguide of this AccountStyleGuideUploadRequest.

        Style guide file. Currently supported formats: .pdf, .docx, .txt

        :param styleguide: The styleguide of this AccountStyleGuideUploadRequest.
        :type styleguide: file
        """
        if styleguide is None:
            raise ValueError("Invalid value for `styleguide`, must not be `None`")

        self._styleguide = styleguide
