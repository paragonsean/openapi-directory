# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_source_document import LinkedSourceDocument
from openapi_server import util


class DocumentUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: file=None, schemes: str=None, source_link: LinkedSourceDocument=None):
        """DocumentUploadRequest - a model defined in OpenAPI

        :param documents: The documents of this DocumentUploadRequest.
        :param schemes: The schemes of this DocumentUploadRequest.
        :param source_link: The source_link of this DocumentUploadRequest.
        """
        self.openapi_types = {
            'documents': file,
            'schemes': str,
            'source_link': LinkedSourceDocument
        }

        self.attribute_map = {
            'documents': 'documents',
            'schemes': 'schemes',
            'source_link': 'source-link'
        }

        self._documents = documents
        self._schemes = schemes
        self._source_link = source_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentUploadRequest of this DocumentUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this DocumentUploadRequest.

        Single file data. The name is plural to provide a consistent naming convention.

        :return: The documents of this DocumentUploadRequest.
        :rtype: file
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DocumentUploadRequest.

        Single file data. The name is plural to provide a consistent naming convention.

        :param documents: The documents of this DocumentUploadRequest.
        :type documents: file
        """

        self._documents = documents

    @property
    def schemes(self):
        """Gets the schemes of this DocumentUploadRequest.

        JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.

        :return: The schemes of this DocumentUploadRequest.
        :rtype: str
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this DocumentUploadRequest.

        JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.

        :param schemes: The schemes of this DocumentUploadRequest.
        :type schemes: str
        """

        self._schemes = schemes

    @property
    def source_link(self):
        """Gets the source_link of this DocumentUploadRequest.


        :return: The source_link of this DocumentUploadRequest.
        :rtype: LinkedSourceDocument
        """
        return self._source_link

    @source_link.setter
    def source_link(self, source_link):
        """Sets the source_link of this DocumentUploadRequest.


        :param source_link: The source_link of this DocumentUploadRequest.
        :type source_link: LinkedSourceDocument
        """

        self._source_link = source_link
