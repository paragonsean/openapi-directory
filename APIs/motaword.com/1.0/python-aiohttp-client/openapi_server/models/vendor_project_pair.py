# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class VendorProjectPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str='usd', is_proofreader: bool=None, proofreader: User=None, proofreading_rate: float=None, source_language: str=None, target_language: str=None, translation_rate: float=None):
        """VendorProjectPair - a model defined in OpenAPI

        :param currency: The currency of this VendorProjectPair.
        :param is_proofreader: The is_proofreader of this VendorProjectPair.
        :param proofreader: The proofreader of this VendorProjectPair.
        :param proofreading_rate: The proofreading_rate of this VendorProjectPair.
        :param source_language: The source_language of this VendorProjectPair.
        :param target_language: The target_language of this VendorProjectPair.
        :param translation_rate: The translation_rate of this VendorProjectPair.
        """
        self.openapi_types = {
            'currency': str,
            'is_proofreader': bool,
            'proofreader': User,
            'proofreading_rate': float,
            'source_language': str,
            'target_language': str,
            'translation_rate': float
        }

        self.attribute_map = {
            'currency': 'currency',
            'is_proofreader': 'is_proofreader',
            'proofreader': 'proofreader',
            'proofreading_rate': 'proofreading_rate',
            'source_language': 'source_language',
            'target_language': 'target_language',
            'translation_rate': 'translation_rate'
        }

        self._currency = currency
        self._is_proofreader = is_proofreader
        self._proofreader = proofreader
        self._proofreading_rate = proofreading_rate
        self._source_language = source_language
        self._target_language = target_language
        self._translation_rate = translation_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VendorProjectPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VendorProjectPair of this VendorProjectPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this VendorProjectPair.


        :return: The currency of this VendorProjectPair.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VendorProjectPair.


        :param currency: The currency of this VendorProjectPair.
        :type currency: str
        """

        self._currency = currency

    @property
    def is_proofreader(self):
        """Gets the is_proofreader of this VendorProjectPair.

        Indicates if the vendor be able to proofred this pair

        :return: The is_proofreader of this VendorProjectPair.
        :rtype: bool
        """
        return self._is_proofreader

    @is_proofreader.setter
    def is_proofreader(self, is_proofreader):
        """Sets the is_proofreader of this VendorProjectPair.

        Indicates if the vendor be able to proofred this pair

        :param is_proofreader: The is_proofreader of this VendorProjectPair.
        :type is_proofreader: bool
        """

        self._is_proofreader = is_proofreader

    @property
    def proofreader(self):
        """Gets the proofreader of this VendorProjectPair.


        :return: The proofreader of this VendorProjectPair.
        :rtype: User
        """
        return self._proofreader

    @proofreader.setter
    def proofreader(self, proofreader):
        """Sets the proofreader of this VendorProjectPair.


        :param proofreader: The proofreader of this VendorProjectPair.
        :type proofreader: User
        """

        self._proofreader = proofreader

    @property
    def proofreading_rate(self):
        """Gets the proofreading_rate of this VendorProjectPair.


        :return: The proofreading_rate of this VendorProjectPair.
        :rtype: float
        """
        return self._proofreading_rate

    @proofreading_rate.setter
    def proofreading_rate(self, proofreading_rate):
        """Sets the proofreading_rate of this VendorProjectPair.


        :param proofreading_rate: The proofreading_rate of this VendorProjectPair.
        :type proofreading_rate: float
        """

        self._proofreading_rate = proofreading_rate

    @property
    def source_language(self):
        """Gets the source_language of this VendorProjectPair.

        Source language code

        :return: The source_language of this VendorProjectPair.
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this VendorProjectPair.

        Source language code

        :param source_language: The source_language of this VendorProjectPair.
        :type source_language: str
        """

        self._source_language = source_language

    @property
    def target_language(self):
        """Gets the target_language of this VendorProjectPair.

        Target language code

        :return: The target_language of this VendorProjectPair.
        :rtype: str
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this VendorProjectPair.

        Target language code

        :param target_language: The target_language of this VendorProjectPair.
        :type target_language: str
        """

        self._target_language = target_language

    @property
    def translation_rate(self):
        """Gets the translation_rate of this VendorProjectPair.


        :return: The translation_rate of this VendorProjectPair.
        :rtype: float
        """
        return self._translation_rate

    @translation_rate.setter
    def translation_rate(self, translation_rate):
        """Sets the translation_rate of this VendorProjectPair.


        :param translation_rate: The translation_rate of this VendorProjectPair.
        :type translation_rate: float
        """

        self._translation_rate = translation_rate
