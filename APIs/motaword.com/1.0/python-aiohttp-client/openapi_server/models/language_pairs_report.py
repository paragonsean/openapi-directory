# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_pairs_report_report_inner import LanguagePairsReportReportInner
from openapi_server.models.paging_meta import PagingMeta
from openapi_server import util


class LanguagePairsReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: PagingMeta=None, report: List[LanguagePairsReportReportInner]=None):
        """LanguagePairsReport - a model defined in OpenAPI

        :param meta: The meta of this LanguagePairsReport.
        :param report: The report of this LanguagePairsReport.
        """
        self.openapi_types = {
            'meta': PagingMeta,
            'report': List[LanguagePairsReportReportInner]
        }

        self.attribute_map = {
            'meta': 'meta',
            'report': 'report'
        }

        self._meta = meta
        self._report = report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguagePairsReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguagePairsReport of this LanguagePairsReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this LanguagePairsReport.


        :return: The meta of this LanguagePairsReport.
        :rtype: PagingMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this LanguagePairsReport.


        :param meta: The meta of this LanguagePairsReport.
        :type meta: PagingMeta
        """

        self._meta = meta

    @property
    def report(self):
        """Gets the report of this LanguagePairsReport.


        :return: The report of this LanguagePairsReport.
        :rtype: List[LanguagePairsReportReportInner]
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this LanguagePairsReport.


        :param report: The report of this LanguagePairsReport.
        :type report: List[LanguagePairsReportReportInner]
        """

        self._report = report
