# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, downgrade: List[str]=None, payment_method: int=None, period_end: datetime=None, plan_id: str=None, plan_name: str=None, price: str=None, products: List[object]=None, schedule_name: str=None, schedule_start: datetime=None, subscription_id: str=None, upgrade: List[str]=None, with_trial: object=None):
        """Subscription - a model defined in OpenAPI

        :param downgrade: The downgrade of this Subscription.
        :param payment_method: The payment_method of this Subscription.
        :param period_end: The period_end of this Subscription.
        :param plan_id: The plan_id of this Subscription.
        :param plan_name: The plan_name of this Subscription.
        :param price: The price of this Subscription.
        :param products: The products of this Subscription.
        :param schedule_name: The schedule_name of this Subscription.
        :param schedule_start: The schedule_start of this Subscription.
        :param subscription_id: The subscription_id of this Subscription.
        :param upgrade: The upgrade of this Subscription.
        :param with_trial: The with_trial of this Subscription.
        """
        self.openapi_types = {
            'downgrade': List[str],
            'payment_method': int,
            'period_end': datetime,
            'plan_id': str,
            'plan_name': str,
            'price': str,
            'products': List[object],
            'schedule_name': str,
            'schedule_start': datetime,
            'subscription_id': str,
            'upgrade': List[str],
            'with_trial': object
        }

        self.attribute_map = {
            'downgrade': 'downgrade',
            'payment_method': 'payment_method',
            'period_end': 'period_end',
            'plan_id': 'plan_id',
            'plan_name': 'plan_name',
            'price': 'price',
            'products': 'products',
            'schedule_name': 'schedule_name',
            'schedule_start': 'schedule_start',
            'subscription_id': 'subscription_id',
            'upgrade': 'upgrade',
            'with_trial': 'withTrial'
        }

        self._downgrade = downgrade
        self._payment_method = payment_method
        self._period_end = period_end
        self._plan_id = plan_id
        self._plan_name = plan_name
        self._price = price
        self._products = products
        self._schedule_name = schedule_name
        self._schedule_start = schedule_start
        self._subscription_id = subscription_id
        self._upgrade = upgrade
        self._with_trial = with_trial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def downgrade(self):
        """Gets the downgrade of this Subscription.

        Stripe downgradable plan

        :return: The downgrade of this Subscription.
        :rtype: List[str]
        """
        return self._downgrade

    @downgrade.setter
    def downgrade(self, downgrade):
        """Sets the downgrade of this Subscription.

        Stripe downgradable plan

        :param downgrade: The downgrade of this Subscription.
        :type downgrade: List[str]
        """

        self._downgrade = downgrade

    @property
    def payment_method(self):
        """Gets the payment_method of this Subscription.

        Stripe subscription plan payment card internal id

        :return: The payment_method of this Subscription.
        :rtype: int
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Subscription.

        Stripe subscription plan payment card internal id

        :param payment_method: The payment_method of this Subscription.
        :type payment_method: int
        """

        self._payment_method = payment_method

    @property
    def period_end(self):
        """Gets the period_end of this Subscription.

        Stripe plan period end

        :return: The period_end of this Subscription.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Subscription.

        Stripe plan period end

        :param period_end: The period_end of this Subscription.
        :type period_end: datetime
        """

        self._period_end = period_end

    @property
    def plan_id(self):
        """Gets the plan_id of this Subscription.

        Stripe subscription plan id

        :return: The plan_id of this Subscription.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Subscription.

        Stripe subscription plan id

        :param plan_id: The plan_id of this Subscription.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def plan_name(self):
        """Gets the plan_name of this Subscription.

        Stripe subscription plan name

        :return: The plan_name of this Subscription.
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this Subscription.

        Stripe subscription plan name

        :param plan_name: The plan_name of this Subscription.
        :type plan_name: str
        """

        self._plan_name = plan_name

    @property
    def price(self):
        """Gets the price of this Subscription.

        Stripe plan price

        :return: The price of this Subscription.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Subscription.

        Stripe plan price

        :param price: The price of this Subscription.
        :type price: str
        """

        self._price = price

    @property
    def products(self):
        """Gets the products of this Subscription.


        :return: The products of this Subscription.
        :rtype: List[object]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Subscription.


        :param products: The products of this Subscription.
        :type products: List[object]
        """

        self._products = products

    @property
    def schedule_name(self):
        """Gets the schedule_name of this Subscription.

        Stripe Scheduled plan period end

        :return: The schedule_name of this Subscription.
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this Subscription.

        Stripe Scheduled plan period end

        :param schedule_name: The schedule_name of this Subscription.
        :type schedule_name: str
        """

        self._schedule_name = schedule_name

    @property
    def schedule_start(self):
        """Gets the schedule_start of this Subscription.

        Stripe Scheduled start date

        :return: The schedule_start of this Subscription.
        :rtype: datetime
        """
        return self._schedule_start

    @schedule_start.setter
    def schedule_start(self, schedule_start):
        """Sets the schedule_start of this Subscription.

        Stripe Scheduled start date

        :param schedule_start: The schedule_start of this Subscription.
        :type schedule_start: datetime
        """

        self._schedule_start = schedule_start

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.

        Stripe subscription id for this project

        :return: The subscription_id of this Subscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.

        Stripe subscription id for this project

        :param subscription_id: The subscription_id of this Subscription.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def upgrade(self):
        """Gets the upgrade of this Subscription.

        Stripe upgradable plan

        :return: The upgrade of this Subscription.
        :rtype: List[str]
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """Sets the upgrade of this Subscription.

        Stripe upgradable plan

        :param upgrade: The upgrade of this Subscription.
        :type upgrade: List[str]
        """

        self._upgrade = upgrade

    @property
    def with_trial(self):
        """Gets the with_trial of this Subscription.

        Stripe plan trial

        :return: The with_trial of this Subscription.
        :rtype: object
        """
        return self._with_trial

    @with_trial.setter
    def with_trial(self, with_trial):
        """Sets the with_trial of this Subscription.

        Stripe plan trial

        :param with_trial: The with_trial of this Subscription.
        :type with_trial: object
        """

        self._with_trial = with_trial
