# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grant_type: str=None, password: str=None, refresh_token: str=None, scope: str=None, user_id: int=None, username: str=None):
        """TokenRequest - a model defined in OpenAPI

        :param grant_type: The grant_type of this TokenRequest.
        :param password: The password of this TokenRequest.
        :param refresh_token: The refresh_token of this TokenRequest.
        :param scope: The scope of this TokenRequest.
        :param user_id: The user_id of this TokenRequest.
        :param username: The username of this TokenRequest.
        """
        self.openapi_types = {
            'grant_type': str,
            'password': str,
            'refresh_token': str,
            'scope': str,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'grant_type': 'grant_type',
            'password': 'password',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._grant_type = grant_type
        self._password = password
        self._refresh_token = refresh_token
        self._scope = scope
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenRequest of this TokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_type(self):
        """Gets the grant_type of this TokenRequest.

        OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'.

        :return: The grant_type of this TokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this TokenRequest.

        OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'.

        :param grant_type: The grant_type of this TokenRequest.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")

        self._grant_type = grant_type

    @property
    def password(self):
        """Gets the password of this TokenRequest.

        MW Account password (to be used in password grant type)

        :return: The password of this TokenRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TokenRequest.

        MW Account password (to be used in password grant type)

        :param password: The password of this TokenRequest.
        :type password: str
        """

        self._password = password

    @property
    def refresh_token(self):
        """Gets the refresh_token of this TokenRequest.

        Refresh token value for refresh token flow.

        :return: The refresh_token of this TokenRequest.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this TokenRequest.

        Refresh token value for refresh token flow.

        :param refresh_token: The refresh_token of this TokenRequest.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this TokenRequest.

        Authorization scope. Use 'privileged' for private endpoints.

        :return: The scope of this TokenRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this TokenRequest.

        Authorization scope. Use 'privileged' for private endpoints.

        :param scope: The scope of this TokenRequest.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def user_id(self):
        """Gets the user_id of this TokenRequest.

        Value for user_id grant type flow.

        :return: The user_id of this TokenRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TokenRequest.

        Value for user_id grant type flow.

        :param user_id: The user_id of this TokenRequest.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this TokenRequest.

        MW Account email (to be used in password grant type)

        :return: The username of this TokenRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenRequest.

        MW Account email (to be used in password grant type)

        :param username: The username of this TokenRequest.
        :type username: str
        """

        self._username = username
