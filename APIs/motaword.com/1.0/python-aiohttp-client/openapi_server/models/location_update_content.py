# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationUpdateContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat: float=None, lon: float=None, timestamp: int=None):
        """LocationUpdateContent - a model defined in OpenAPI

        :param lat: The lat of this LocationUpdateContent.
        :param lon: The lon of this LocationUpdateContent.
        :param timestamp: The timestamp of this LocationUpdateContent.
        """
        self.openapi_types = {
            'lat': float,
            'lon': float,
            'timestamp': int
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon',
            'timestamp': 'timestamp'
        }

        self._lat = lat
        self._lon = lon
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationUpdateContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationUpdateContent of this LocationUpdateContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self):
        """Gets the lat of this LocationUpdateContent.

        Latitude of location

        :return: The lat of this LocationUpdateContent.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this LocationUpdateContent.

        Latitude of location

        :param lat: The lat of this LocationUpdateContent.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this LocationUpdateContent.

        Longitude of location

        :return: The lon of this LocationUpdateContent.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this LocationUpdateContent.

        Longitude of location

        :param lon: The lon of this LocationUpdateContent.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def timestamp(self):
        """Gets the timestamp of this LocationUpdateContent.


        :return: The timestamp of this LocationUpdateContent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LocationUpdateContent.


        :param timestamp: The timestamp of this LocationUpdateContent.
        :type timestamp: int
        """

        self._timestamp = timestamp
