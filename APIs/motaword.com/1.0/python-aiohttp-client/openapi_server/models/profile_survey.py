# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileSurvey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_services: str=None, daily_proofreading_capacity: str=None, daily_translation_capacity: str=None, dtp_software: str=None, experience: str=None, is_certified_translator: str=None, is_sworn_translator: str=None, memoq: str=None, memsource: str=None, omegat: str=None, proofreader_experience: str=None, provides_creative_writing_service: str=None, provides_postedit_service: str=None, reference: str=None, sdl_trados: str=None, skype_id: str=None, smartcat: str=None, smartling: str=None, software: str=None, specialization: str=None, subtitle_edit: str=None, subtitle_workshop: str=None, translator_association: str=None, transsuite_2000: str=None, vendor_profile_lsp: str=None, wordbee: str=None, wordfast: str=None, work_type: str=None, work_with: str=None, working_as: str=None, working_timezone: str=None, xbench: str=None, xtm: str=None):
        """ProfileSurvey - a model defined in OpenAPI

        :param current_services: The current_services of this ProfileSurvey.
        :param daily_proofreading_capacity: The daily_proofreading_capacity of this ProfileSurvey.
        :param daily_translation_capacity: The daily_translation_capacity of this ProfileSurvey.
        :param dtp_software: The dtp_software of this ProfileSurvey.
        :param experience: The experience of this ProfileSurvey.
        :param is_certified_translator: The is_certified_translator of this ProfileSurvey.
        :param is_sworn_translator: The is_sworn_translator of this ProfileSurvey.
        :param memoq: The memoq of this ProfileSurvey.
        :param memsource: The memsource of this ProfileSurvey.
        :param omegat: The omegat of this ProfileSurvey.
        :param proofreader_experience: The proofreader_experience of this ProfileSurvey.
        :param provides_creative_writing_service: The provides_creative_writing_service of this ProfileSurvey.
        :param provides_postedit_service: The provides_postedit_service of this ProfileSurvey.
        :param reference: The reference of this ProfileSurvey.
        :param sdl_trados: The sdl_trados of this ProfileSurvey.
        :param skype_id: The skype_id of this ProfileSurvey.
        :param smartcat: The smartcat of this ProfileSurvey.
        :param smartling: The smartling of this ProfileSurvey.
        :param software: The software of this ProfileSurvey.
        :param specialization: The specialization of this ProfileSurvey.
        :param subtitle_edit: The subtitle_edit of this ProfileSurvey.
        :param subtitle_workshop: The subtitle_workshop of this ProfileSurvey.
        :param translator_association: The translator_association of this ProfileSurvey.
        :param transsuite_2000: The transsuite_2000 of this ProfileSurvey.
        :param vendor_profile_lsp: The vendor_profile_lsp of this ProfileSurvey.
        :param wordbee: The wordbee of this ProfileSurvey.
        :param wordfast: The wordfast of this ProfileSurvey.
        :param work_type: The work_type of this ProfileSurvey.
        :param work_with: The work_with of this ProfileSurvey.
        :param working_as: The working_as of this ProfileSurvey.
        :param working_timezone: The working_timezone of this ProfileSurvey.
        :param xbench: The xbench of this ProfileSurvey.
        :param xtm: The xtm of this ProfileSurvey.
        """
        self.openapi_types = {
            'current_services': str,
            'daily_proofreading_capacity': str,
            'daily_translation_capacity': str,
            'dtp_software': str,
            'experience': str,
            'is_certified_translator': str,
            'is_sworn_translator': str,
            'memoq': str,
            'memsource': str,
            'omegat': str,
            'proofreader_experience': str,
            'provides_creative_writing_service': str,
            'provides_postedit_service': str,
            'reference': str,
            'sdl_trados': str,
            'skype_id': str,
            'smartcat': str,
            'smartling': str,
            'software': str,
            'specialization': str,
            'subtitle_edit': str,
            'subtitle_workshop': str,
            'translator_association': str,
            'transsuite_2000': str,
            'vendor_profile_lsp': str,
            'wordbee': str,
            'wordfast': str,
            'work_type': str,
            'work_with': str,
            'working_as': str,
            'working_timezone': str,
            'xbench': str,
            'xtm': str
        }

        self.attribute_map = {
            'current_services': 'current_services',
            'daily_proofreading_capacity': 'daily_proofreading_capacity',
            'daily_translation_capacity': 'daily_translation_capacity',
            'dtp_software': 'dtp_software',
            'experience': 'experience',
            'is_certified_translator': 'is_certified_translator',
            'is_sworn_translator': 'is_sworn_translator',
            'memoq': 'memoq',
            'memsource': 'memsource',
            'omegat': 'omegat',
            'proofreader_experience': 'proofreader_experience',
            'provides_creative_writing_service': 'provides_creative_writing_service',
            'provides_postedit_service': 'provides_postedit_service',
            'reference': 'reference',
            'sdl_trados': 'sdl_trados',
            'skype_id': 'skype_id',
            'smartcat': 'smartcat',
            'smartling': 'smartling',
            'software': 'software',
            'specialization': 'specialization',
            'subtitle_edit': 'subtitle_edit',
            'subtitle_workshop': 'subtitle_workshop',
            'translator_association': 'translator_association',
            'transsuite_2000': 'transsuite_2000',
            'vendor_profile_lsp': 'vendor_profile_lsp',
            'wordbee': 'wordbee',
            'wordfast': 'wordfast',
            'work_type': 'work_type',
            'work_with': 'work_with',
            'working_as': 'working_as',
            'working_timezone': 'working_timezone',
            'xbench': 'xbench',
            'xtm': 'xtm'
        }

        self._current_services = current_services
        self._daily_proofreading_capacity = daily_proofreading_capacity
        self._daily_translation_capacity = daily_translation_capacity
        self._dtp_software = dtp_software
        self._experience = experience
        self._is_certified_translator = is_certified_translator
        self._is_sworn_translator = is_sworn_translator
        self._memoq = memoq
        self._memsource = memsource
        self._omegat = omegat
        self._proofreader_experience = proofreader_experience
        self._provides_creative_writing_service = provides_creative_writing_service
        self._provides_postedit_service = provides_postedit_service
        self._reference = reference
        self._sdl_trados = sdl_trados
        self._skype_id = skype_id
        self._smartcat = smartcat
        self._smartling = smartling
        self._software = software
        self._specialization = specialization
        self._subtitle_edit = subtitle_edit
        self._subtitle_workshop = subtitle_workshop
        self._translator_association = translator_association
        self._transsuite_2000 = transsuite_2000
        self._vendor_profile_lsp = vendor_profile_lsp
        self._wordbee = wordbee
        self._wordfast = wordfast
        self._work_type = work_type
        self._work_with = work_with
        self._working_as = working_as
        self._working_timezone = working_timezone
        self._xbench = xbench
        self._xtm = xtm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileSurvey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileSurvey of this ProfileSurvey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_services(self):
        """Gets the current_services of this ProfileSurvey.


        :return: The current_services of this ProfileSurvey.
        :rtype: str
        """
        return self._current_services

    @current_services.setter
    def current_services(self, current_services):
        """Sets the current_services of this ProfileSurvey.


        :param current_services: The current_services of this ProfileSurvey.
        :type current_services: str
        """

        self._current_services = current_services

    @property
    def daily_proofreading_capacity(self):
        """Gets the daily_proofreading_capacity of this ProfileSurvey.


        :return: The daily_proofreading_capacity of this ProfileSurvey.
        :rtype: str
        """
        return self._daily_proofreading_capacity

    @daily_proofreading_capacity.setter
    def daily_proofreading_capacity(self, daily_proofreading_capacity):
        """Sets the daily_proofreading_capacity of this ProfileSurvey.


        :param daily_proofreading_capacity: The daily_proofreading_capacity of this ProfileSurvey.
        :type daily_proofreading_capacity: str
        """

        self._daily_proofreading_capacity = daily_proofreading_capacity

    @property
    def daily_translation_capacity(self):
        """Gets the daily_translation_capacity of this ProfileSurvey.


        :return: The daily_translation_capacity of this ProfileSurvey.
        :rtype: str
        """
        return self._daily_translation_capacity

    @daily_translation_capacity.setter
    def daily_translation_capacity(self, daily_translation_capacity):
        """Sets the daily_translation_capacity of this ProfileSurvey.


        :param daily_translation_capacity: The daily_translation_capacity of this ProfileSurvey.
        :type daily_translation_capacity: str
        """

        self._daily_translation_capacity = daily_translation_capacity

    @property
    def dtp_software(self):
        """Gets the dtp_software of this ProfileSurvey.


        :return: The dtp_software of this ProfileSurvey.
        :rtype: str
        """
        return self._dtp_software

    @dtp_software.setter
    def dtp_software(self, dtp_software):
        """Sets the dtp_software of this ProfileSurvey.


        :param dtp_software: The dtp_software of this ProfileSurvey.
        :type dtp_software: str
        """

        self._dtp_software = dtp_software

    @property
    def experience(self):
        """Gets the experience of this ProfileSurvey.


        :return: The experience of this ProfileSurvey.
        :rtype: str
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """Sets the experience of this ProfileSurvey.


        :param experience: The experience of this ProfileSurvey.
        :type experience: str
        """

        self._experience = experience

    @property
    def is_certified_translator(self):
        """Gets the is_certified_translator of this ProfileSurvey.


        :return: The is_certified_translator of this ProfileSurvey.
        :rtype: str
        """
        return self._is_certified_translator

    @is_certified_translator.setter
    def is_certified_translator(self, is_certified_translator):
        """Sets the is_certified_translator of this ProfileSurvey.


        :param is_certified_translator: The is_certified_translator of this ProfileSurvey.
        :type is_certified_translator: str
        """

        self._is_certified_translator = is_certified_translator

    @property
    def is_sworn_translator(self):
        """Gets the is_sworn_translator of this ProfileSurvey.


        :return: The is_sworn_translator of this ProfileSurvey.
        :rtype: str
        """
        return self._is_sworn_translator

    @is_sworn_translator.setter
    def is_sworn_translator(self, is_sworn_translator):
        """Sets the is_sworn_translator of this ProfileSurvey.


        :param is_sworn_translator: The is_sworn_translator of this ProfileSurvey.
        :type is_sworn_translator: str
        """

        self._is_sworn_translator = is_sworn_translator

    @property
    def memoq(self):
        """Gets the memoq of this ProfileSurvey.


        :return: The memoq of this ProfileSurvey.
        :rtype: str
        """
        return self._memoq

    @memoq.setter
    def memoq(self, memoq):
        """Sets the memoq of this ProfileSurvey.


        :param memoq: The memoq of this ProfileSurvey.
        :type memoq: str
        """

        self._memoq = memoq

    @property
    def memsource(self):
        """Gets the memsource of this ProfileSurvey.


        :return: The memsource of this ProfileSurvey.
        :rtype: str
        """
        return self._memsource

    @memsource.setter
    def memsource(self, memsource):
        """Sets the memsource of this ProfileSurvey.


        :param memsource: The memsource of this ProfileSurvey.
        :type memsource: str
        """

        self._memsource = memsource

    @property
    def omegat(self):
        """Gets the omegat of this ProfileSurvey.


        :return: The omegat of this ProfileSurvey.
        :rtype: str
        """
        return self._omegat

    @omegat.setter
    def omegat(self, omegat):
        """Sets the omegat of this ProfileSurvey.


        :param omegat: The omegat of this ProfileSurvey.
        :type omegat: str
        """

        self._omegat = omegat

    @property
    def proofreader_experience(self):
        """Gets the proofreader_experience of this ProfileSurvey.


        :return: The proofreader_experience of this ProfileSurvey.
        :rtype: str
        """
        return self._proofreader_experience

    @proofreader_experience.setter
    def proofreader_experience(self, proofreader_experience):
        """Sets the proofreader_experience of this ProfileSurvey.


        :param proofreader_experience: The proofreader_experience of this ProfileSurvey.
        :type proofreader_experience: str
        """

        self._proofreader_experience = proofreader_experience

    @property
    def provides_creative_writing_service(self):
        """Gets the provides_creative_writing_service of this ProfileSurvey.


        :return: The provides_creative_writing_service of this ProfileSurvey.
        :rtype: str
        """
        return self._provides_creative_writing_service

    @provides_creative_writing_service.setter
    def provides_creative_writing_service(self, provides_creative_writing_service):
        """Sets the provides_creative_writing_service of this ProfileSurvey.


        :param provides_creative_writing_service: The provides_creative_writing_service of this ProfileSurvey.
        :type provides_creative_writing_service: str
        """

        self._provides_creative_writing_service = provides_creative_writing_service

    @property
    def provides_postedit_service(self):
        """Gets the provides_postedit_service of this ProfileSurvey.


        :return: The provides_postedit_service of this ProfileSurvey.
        :rtype: str
        """
        return self._provides_postedit_service

    @provides_postedit_service.setter
    def provides_postedit_service(self, provides_postedit_service):
        """Sets the provides_postedit_service of this ProfileSurvey.


        :param provides_postedit_service: The provides_postedit_service of this ProfileSurvey.
        :type provides_postedit_service: str
        """

        self._provides_postedit_service = provides_postedit_service

    @property
    def reference(self):
        """Gets the reference of this ProfileSurvey.


        :return: The reference of this ProfileSurvey.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ProfileSurvey.


        :param reference: The reference of this ProfileSurvey.
        :type reference: str
        """

        self._reference = reference

    @property
    def sdl_trados(self):
        """Gets the sdl_trados of this ProfileSurvey.


        :return: The sdl_trados of this ProfileSurvey.
        :rtype: str
        """
        return self._sdl_trados

    @sdl_trados.setter
    def sdl_trados(self, sdl_trados):
        """Sets the sdl_trados of this ProfileSurvey.


        :param sdl_trados: The sdl_trados of this ProfileSurvey.
        :type sdl_trados: str
        """

        self._sdl_trados = sdl_trados

    @property
    def skype_id(self):
        """Gets the skype_id of this ProfileSurvey.


        :return: The skype_id of this ProfileSurvey.
        :rtype: str
        """
        return self._skype_id

    @skype_id.setter
    def skype_id(self, skype_id):
        """Sets the skype_id of this ProfileSurvey.


        :param skype_id: The skype_id of this ProfileSurvey.
        :type skype_id: str
        """

        self._skype_id = skype_id

    @property
    def smartcat(self):
        """Gets the smartcat of this ProfileSurvey.


        :return: The smartcat of this ProfileSurvey.
        :rtype: str
        """
        return self._smartcat

    @smartcat.setter
    def smartcat(self, smartcat):
        """Sets the smartcat of this ProfileSurvey.


        :param smartcat: The smartcat of this ProfileSurvey.
        :type smartcat: str
        """

        self._smartcat = smartcat

    @property
    def smartling(self):
        """Gets the smartling of this ProfileSurvey.


        :return: The smartling of this ProfileSurvey.
        :rtype: str
        """
        return self._smartling

    @smartling.setter
    def smartling(self, smartling):
        """Sets the smartling of this ProfileSurvey.


        :param smartling: The smartling of this ProfileSurvey.
        :type smartling: str
        """

        self._smartling = smartling

    @property
    def software(self):
        """Gets the software of this ProfileSurvey.


        :return: The software of this ProfileSurvey.
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this ProfileSurvey.


        :param software: The software of this ProfileSurvey.
        :type software: str
        """

        self._software = software

    @property
    def specialization(self):
        """Gets the specialization of this ProfileSurvey.


        :return: The specialization of this ProfileSurvey.
        :rtype: str
        """
        return self._specialization

    @specialization.setter
    def specialization(self, specialization):
        """Sets the specialization of this ProfileSurvey.


        :param specialization: The specialization of this ProfileSurvey.
        :type specialization: str
        """

        self._specialization = specialization

    @property
    def subtitle_edit(self):
        """Gets the subtitle_edit of this ProfileSurvey.


        :return: The subtitle_edit of this ProfileSurvey.
        :rtype: str
        """
        return self._subtitle_edit

    @subtitle_edit.setter
    def subtitle_edit(self, subtitle_edit):
        """Sets the subtitle_edit of this ProfileSurvey.


        :param subtitle_edit: The subtitle_edit of this ProfileSurvey.
        :type subtitle_edit: str
        """

        self._subtitle_edit = subtitle_edit

    @property
    def subtitle_workshop(self):
        """Gets the subtitle_workshop of this ProfileSurvey.


        :return: The subtitle_workshop of this ProfileSurvey.
        :rtype: str
        """
        return self._subtitle_workshop

    @subtitle_workshop.setter
    def subtitle_workshop(self, subtitle_workshop):
        """Sets the subtitle_workshop of this ProfileSurvey.


        :param subtitle_workshop: The subtitle_workshop of this ProfileSurvey.
        :type subtitle_workshop: str
        """

        self._subtitle_workshop = subtitle_workshop

    @property
    def translator_association(self):
        """Gets the translator_association of this ProfileSurvey.


        :return: The translator_association of this ProfileSurvey.
        :rtype: str
        """
        return self._translator_association

    @translator_association.setter
    def translator_association(self, translator_association):
        """Sets the translator_association of this ProfileSurvey.


        :param translator_association: The translator_association of this ProfileSurvey.
        :type translator_association: str
        """

        self._translator_association = translator_association

    @property
    def transsuite_2000(self):
        """Gets the transsuite_2000 of this ProfileSurvey.


        :return: The transsuite_2000 of this ProfileSurvey.
        :rtype: str
        """
        return self._transsuite_2000

    @transsuite_2000.setter
    def transsuite_2000(self, transsuite_2000):
        """Sets the transsuite_2000 of this ProfileSurvey.


        :param transsuite_2000: The transsuite_2000 of this ProfileSurvey.
        :type transsuite_2000: str
        """

        self._transsuite_2000 = transsuite_2000

    @property
    def vendor_profile_lsp(self):
        """Gets the vendor_profile_lsp of this ProfileSurvey.


        :return: The vendor_profile_lsp of this ProfileSurvey.
        :rtype: str
        """
        return self._vendor_profile_lsp

    @vendor_profile_lsp.setter
    def vendor_profile_lsp(self, vendor_profile_lsp):
        """Sets the vendor_profile_lsp of this ProfileSurvey.


        :param vendor_profile_lsp: The vendor_profile_lsp of this ProfileSurvey.
        :type vendor_profile_lsp: str
        """

        self._vendor_profile_lsp = vendor_profile_lsp

    @property
    def wordbee(self):
        """Gets the wordbee of this ProfileSurvey.


        :return: The wordbee of this ProfileSurvey.
        :rtype: str
        """
        return self._wordbee

    @wordbee.setter
    def wordbee(self, wordbee):
        """Sets the wordbee of this ProfileSurvey.


        :param wordbee: The wordbee of this ProfileSurvey.
        :type wordbee: str
        """

        self._wordbee = wordbee

    @property
    def wordfast(self):
        """Gets the wordfast of this ProfileSurvey.


        :return: The wordfast of this ProfileSurvey.
        :rtype: str
        """
        return self._wordfast

    @wordfast.setter
    def wordfast(self, wordfast):
        """Sets the wordfast of this ProfileSurvey.


        :param wordfast: The wordfast of this ProfileSurvey.
        :type wordfast: str
        """

        self._wordfast = wordfast

    @property
    def work_type(self):
        """Gets the work_type of this ProfileSurvey.


        :return: The work_type of this ProfileSurvey.
        :rtype: str
        """
        return self._work_type

    @work_type.setter
    def work_type(self, work_type):
        """Sets the work_type of this ProfileSurvey.


        :param work_type: The work_type of this ProfileSurvey.
        :type work_type: str
        """

        self._work_type = work_type

    @property
    def work_with(self):
        """Gets the work_with of this ProfileSurvey.


        :return: The work_with of this ProfileSurvey.
        :rtype: str
        """
        return self._work_with

    @work_with.setter
    def work_with(self, work_with):
        """Sets the work_with of this ProfileSurvey.


        :param work_with: The work_with of this ProfileSurvey.
        :type work_with: str
        """

        self._work_with = work_with

    @property
    def working_as(self):
        """Gets the working_as of this ProfileSurvey.


        :return: The working_as of this ProfileSurvey.
        :rtype: str
        """
        return self._working_as

    @working_as.setter
    def working_as(self, working_as):
        """Sets the working_as of this ProfileSurvey.


        :param working_as: The working_as of this ProfileSurvey.
        :type working_as: str
        """

        self._working_as = working_as

    @property
    def working_timezone(self):
        """Gets the working_timezone of this ProfileSurvey.


        :return: The working_timezone of this ProfileSurvey.
        :rtype: str
        """
        return self._working_timezone

    @working_timezone.setter
    def working_timezone(self, working_timezone):
        """Sets the working_timezone of this ProfileSurvey.


        :param working_timezone: The working_timezone of this ProfileSurvey.
        :type working_timezone: str
        """

        self._working_timezone = working_timezone

    @property
    def xbench(self):
        """Gets the xbench of this ProfileSurvey.


        :return: The xbench of this ProfileSurvey.
        :rtype: str
        """
        return self._xbench

    @xbench.setter
    def xbench(self, xbench):
        """Sets the xbench of this ProfileSurvey.


        :param xbench: The xbench of this ProfileSurvey.
        :type xbench: str
        """

        self._xbench = xbench

    @property
    def xtm(self):
        """Gets the xtm of this ProfileSurvey.


        :return: The xtm of this ProfileSurvey.
        :rtype: str
        """
        return self._xtm

    @xtm.setter
    def xtm(self, xtm):
        """Sets the xtm of this ProfileSurvey.


        :param xtm: The xtm of this ProfileSurvey.
        :type xtm: str
        """

        self._xtm = xtm
