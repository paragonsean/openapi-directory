# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_links import ActivityLinks
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_at: int=None, id: int=None, links: ActivityLinks=None, source_text: str=None, target_text: str=None, translator: int=None, type: str=None):
        """Activity - a model defined in OpenAPI

        :param activity_at: The activity_at of this Activity.
        :param id: The id of this Activity.
        :param links: The links of this Activity.
        :param source_text: The source_text of this Activity.
        :param target_text: The target_text of this Activity.
        :param translator: The translator of this Activity.
        :param type: The type of this Activity.
        """
        self.openapi_types = {
            'activity_at': int,
            'id': int,
            'links': ActivityLinks,
            'source_text': str,
            'target_text': str,
            'translator': int,
            'type': str
        }

        self.attribute_map = {
            'activity_at': 'activity_at',
            'id': 'id',
            'links': 'links',
            'source_text': 'source_text',
            'target_text': 'target_text',
            'translator': 'translator',
            'type': 'type'
        }

        self._activity_at = activity_at
        self._id = id
        self._links = links
        self._source_text = source_text
        self._target_text = target_text
        self._translator = translator
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_at(self):
        """Gets the activity_at of this Activity.

        Unix epoch time

        :return: The activity_at of this Activity.
        :rtype: int
        """
        return self._activity_at

    @activity_at.setter
    def activity_at(self, activity_at):
        """Sets the activity_at of this Activity.

        Unix epoch time

        :param activity_at: The activity_at of this Activity.
        :type activity_at: int
        """

        self._activity_at = activity_at

    @property
    def id(self):
        """Gets the id of this Activity.


        :return: The id of this Activity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.


        :param id: The id of this Activity.
        :type id: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Activity.


        :return: The links of this Activity.
        :rtype: ActivityLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Activity.


        :param links: The links of this Activity.
        :type links: ActivityLinks
        """

        self._links = links

    @property
    def source_text(self):
        """Gets the source_text of this Activity.

        Source text

        :return: The source_text of this Activity.
        :rtype: str
        """
        return self._source_text

    @source_text.setter
    def source_text(self, source_text):
        """Sets the source_text of this Activity.

        Source text

        :param source_text: The source_text of this Activity.
        :type source_text: str
        """

        self._source_text = source_text

    @property
    def target_text(self):
        """Gets the target_text of this Activity.

        Target text of the activity, which is actually the translation of the source text.

        :return: The target_text of this Activity.
        :rtype: str
        """
        return self._target_text

    @target_text.setter
    def target_text(self, target_text):
        """Sets the target_text of this Activity.

        Target text of the activity, which is actually the translation of the source text.

        :param target_text: The target_text of this Activity.
        :type target_text: str
        """

        self._target_text = target_text

    @property
    def translator(self):
        """Gets the translator of this Activity.

        Unique identifier of the translator/proofreader of this activity.

        :return: The translator of this Activity.
        :rtype: int
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this Activity.

        Unique identifier of the translator/proofreader of this activity.

        :param translator: The translator of this Activity.
        :type translator: int
        """

        self._translator = translator

    @property
    def type(self):
        """Gets the type of this Activity.

        Currently there are two available activity types; 'translated', 'proofread'.

        :return: The type of this Activity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.

        Currently there are two available activity types; 'translated', 'proofread'.

        :param type: The type of this Activity.
        :type type: str
        """
        allowed_values = ["translated", "proofread"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
