# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, coupon_code: str=None, custom: List[str]=None, documents: file=None, glossaries: file=None, source_language: str=None, styleguides: file=None, target_languages: List[str]=None):
        """NewProject - a model defined in OpenAPI

        :param callback_url: The callback_url of this NewProject.
        :param coupon_code: The coupon_code of this NewProject.
        :param custom: The custom of this NewProject.
        :param documents: The documents of this NewProject.
        :param glossaries: The glossaries of this NewProject.
        :param source_language: The source_language of this NewProject.
        :param styleguides: The styleguides of this NewProject.
        :param target_languages: The target_languages of this NewProject.
        """
        self.openapi_types = {
            'callback_url': str,
            'coupon_code': str,
            'custom': List[str],
            'documents': file,
            'glossaries': file,
            'source_language': str,
            'styleguides': file,
            'target_languages': List[str]
        }

        self.attribute_map = {
            'callback_url': 'callback_url',
            'coupon_code': 'coupon_code',
            'custom': 'custom',
            'documents': 'documents[]',
            'glossaries': 'glossaries[]',
            'source_language': 'source_language',
            'styleguides': 'styleguides[]',
            'target_languages': 'target_languages[]'
        }

        self._callback_url = callback_url
        self._coupon_code = coupon_code
        self._custom = custom
        self._documents = documents
        self._glossaries = glossaries
        self._source_language = source_language
        self._styleguides = styleguides
        self._target_languages = target_languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewProject of this NewProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this NewProject.

        Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.

        :return: The callback_url of this NewProject.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this NewProject.

        Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.

        :param callback_url: The callback_url of this NewProject.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def coupon_code(self):
        """Gets the coupon_code of this NewProject.

        Coupon code to redeem

        :return: The coupon_code of this NewProject.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this NewProject.

        Coupon code to redeem

        :param coupon_code: The coupon_code of this NewProject.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def custom(self):
        """Gets the custom of this NewProject.

        Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.

        :return: The custom of this NewProject.
        :rtype: List[str]
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this NewProject.

        Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.

        :param custom: The custom of this NewProject.
        :type custom: List[str]
        """

        self._custom = custom

    @property
    def documents(self):
        """Gets the documents of this NewProject.

        Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.

        :return: The documents of this NewProject.
        :rtype: file
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this NewProject.

        Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.

        :param documents: The documents of this NewProject.
        :type documents: file
        """

        self._documents = documents

    @property
    def glossaries(self):
        """Gets the glossaries of this NewProject.

        Optional. Only one glossary is supported at the moment.

        :return: The glossaries of this NewProject.
        :rtype: file
        """
        return self._glossaries

    @glossaries.setter
    def glossaries(self, glossaries):
        """Sets the glossaries of this NewProject.

        Optional. Only one glossary is supported at the moment.

        :param glossaries: The glossaries of this NewProject.
        :type glossaries: file
        """

        self._glossaries = glossaries

    @property
    def source_language(self):
        """Gets the source_language of this NewProject.


        :return: The source_language of this NewProject.
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this NewProject.


        :param source_language: The source_language of this NewProject.
        :type source_language: str
        """

        self._source_language = source_language

    @property
    def styleguides(self):
        """Gets the styleguides of this NewProject.

        Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.

        :return: The styleguides of this NewProject.
        :rtype: file
        """
        return self._styleguides

    @styleguides.setter
    def styleguides(self, styleguides):
        """Sets the styleguides of this NewProject.

        Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.

        :param styleguides: The styleguides of this NewProject.
        :type styleguides: file
        """

        self._styleguides = styleguides

    @property
    def target_languages(self):
        """Gets the target_languages of this NewProject.


        :return: The target_languages of this NewProject.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this NewProject.


        :param target_languages: The target_languages of this NewProject.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages
