# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin: str=None, budget_code: str=None, card_id: int=None, payment_code: str=None, payment_method: str=None, stripe_token: str=None):
        """ProjectPayment - a model defined in OpenAPI

        :param bin: The bin of this ProjectPayment.
        :param budget_code: The budget_code of this ProjectPayment.
        :param card_id: The card_id of this ProjectPayment.
        :param payment_code: The payment_code of this ProjectPayment.
        :param payment_method: The payment_method of this ProjectPayment.
        :param stripe_token: The stripe_token of this ProjectPayment.
        """
        self.openapi_types = {
            'bin': str,
            'budget_code': str,
            'card_id': int,
            'payment_code': str,
            'payment_method': str,
            'stripe_token': str
        }

        self.attribute_map = {
            'bin': 'bin',
            'budget_code': 'budget_code',
            'card_id': 'card_id',
            'payment_code': 'payment_code',
            'payment_method': 'payment_method',
            'stripe_token': 'stripe_token'
        }

        self._bin = bin
        self._budget_code = budget_code
        self._card_id = card_id
        self._payment_code = payment_code
        self._payment_method = payment_method
        self._stripe_token = stripe_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectPayment of this ProjectPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin(self):
        """Gets the bin of this ProjectPayment.

        Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.

        :return: The bin of this ProjectPayment.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this ProjectPayment.

        Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.

        :param bin: The bin of this ProjectPayment.
        :type bin: str
        """

        self._bin = bin

    @property
    def budget_code(self):
        """Gets the budget_code of this ProjectPayment.

        Optional with corporate accounts. Not available for others.

        :return: The budget_code of this ProjectPayment.
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """Sets the budget_code of this ProjectPayment.

        Optional with corporate accounts. Not available for others.

        :param budget_code: The budget_code of this ProjectPayment.
        :type budget_code: str
        """

        self._budget_code = budget_code

    @property
    def card_id(self):
        """Gets the card_id of this ProjectPayment.

        Optional. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin.

        :return: The card_id of this ProjectPayment.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this ProjectPayment.

        Optional. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin.

        :param card_id: The card_id of this ProjectPayment.
        :type card_id: int
        """

        self._card_id = card_id

    @property
    def payment_code(self):
        """Gets the payment_code of this ProjectPayment.

        Optional. `corporate` payment method requires this.s

        :return: The payment_code of this ProjectPayment.
        :rtype: str
        """
        return self._payment_code

    @payment_code.setter
    def payment_code(self, payment_code):
        """Sets the payment_code of this ProjectPayment.

        Optional. `corporate` payment method requires this.s

        :param payment_code: The payment_code of this ProjectPayment.
        :type payment_code: str
        """

        self._payment_code = payment_code

    @property
    def payment_method(self):
        """Gets the payment_method of this ProjectPayment.

        Optional. Determines which method to use for payment. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin. `corporate` method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate's primary card.

        :return: The payment_method of this ProjectPayment.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ProjectPayment.

        Optional. Determines which method to use for payment. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin. `corporate` method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate's primary card.

        :param payment_method: The payment_method of this ProjectPayment.
        :type payment_method: str
        """
        allowed_values = ["corporate", "client", "app", "credit", "corporate_card"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def stripe_token(self):
        """Gets the stripe_token of this ProjectPayment.

        This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with `stripe_token`, you must also provide `bin`, last 4 digits of the card.

        :return: The stripe_token of this ProjectPayment.
        :rtype: str
        """
        return self._stripe_token

    @stripe_token.setter
    def stripe_token(self, stripe_token):
        """Sets the stripe_token of this ProjectPayment.

        This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with `stripe_token`, you must also provide `bin`, last 4 digits of the card.

        :param stripe_token: The stripe_token of this ProjectPayment.
        :type stripe_token: str
        """

        self._stripe_token = stripe_token
