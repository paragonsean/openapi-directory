# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvitedVendor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, email_open_rate: float=None, is_entered: bool=None, is_get_paid: bool=None, is_worked: bool=None, is_worked_in_any_project: bool=None, last_project_date: date=None, project_status_when_interacted: float=None, registration_date: date=None, responsiveness: float=None, user_id: float=None, vendor_id: float=None, vendor_name: str=None, vendor_type: str=None):
        """InvitedVendor - a model defined in OpenAPI

        :param action: The action of this InvitedVendor.
        :param email_open_rate: The email_open_rate of this InvitedVendor.
        :param is_entered: The is_entered of this InvitedVendor.
        :param is_get_paid: The is_get_paid of this InvitedVendor.
        :param is_worked: The is_worked of this InvitedVendor.
        :param is_worked_in_any_project: The is_worked_in_any_project of this InvitedVendor.
        :param last_project_date: The last_project_date of this InvitedVendor.
        :param project_status_when_interacted: The project_status_when_interacted of this InvitedVendor.
        :param registration_date: The registration_date of this InvitedVendor.
        :param responsiveness: The responsiveness of this InvitedVendor.
        :param user_id: The user_id of this InvitedVendor.
        :param vendor_id: The vendor_id of this InvitedVendor.
        :param vendor_name: The vendor_name of this InvitedVendor.
        :param vendor_type: The vendor_type of this InvitedVendor.
        """
        self.openapi_types = {
            'action': str,
            'email_open_rate': float,
            'is_entered': bool,
            'is_get_paid': bool,
            'is_worked': bool,
            'is_worked_in_any_project': bool,
            'last_project_date': date,
            'project_status_when_interacted': float,
            'registration_date': date,
            'responsiveness': float,
            'user_id': float,
            'vendor_id': float,
            'vendor_name': str,
            'vendor_type': str
        }

        self.attribute_map = {
            'action': 'action',
            'email_open_rate': 'email_open_rate',
            'is_entered': 'is_entered',
            'is_get_paid': 'is_get_paid',
            'is_worked': 'is_worked',
            'is_worked_in_any_project': 'is_worked_in_any_project',
            'last_project_date': 'last_project_date',
            'project_status_when_interacted': 'project_status_when_interacted',
            'registration_date': 'registration_date',
            'responsiveness': 'responsiveness',
            'user_id': 'user_id',
            'vendor_id': 'vendor_id',
            'vendor_name': 'vendor_name',
            'vendor_type': 'vendor_type'
        }

        self._action = action
        self._email_open_rate = email_open_rate
        self._is_entered = is_entered
        self._is_get_paid = is_get_paid
        self._is_worked = is_worked
        self._is_worked_in_any_project = is_worked_in_any_project
        self._last_project_date = last_project_date
        self._project_status_when_interacted = project_status_when_interacted
        self._registration_date = registration_date
        self._responsiveness = responsiveness
        self._user_id = user_id
        self._vendor_id = vendor_id
        self._vendor_name = vendor_name
        self._vendor_type = vendor_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvitedVendor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvitedVendor of this InvitedVendor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this InvitedVendor.

        Action to be taken

        :return: The action of this InvitedVendor.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InvitedVendor.

        Action to be taken

        :param action: The action of this InvitedVendor.
        :type action: str
        """

        self._action = action

    @property
    def email_open_rate(self):
        """Gets the email_open_rate of this InvitedVendor.

        Email opening rate of the vendor

        :return: The email_open_rate of this InvitedVendor.
        :rtype: float
        """
        return self._email_open_rate

    @email_open_rate.setter
    def email_open_rate(self, email_open_rate):
        """Sets the email_open_rate of this InvitedVendor.

        Email opening rate of the vendor

        :param email_open_rate: The email_open_rate of this InvitedVendor.
        :type email_open_rate: float
        """

        self._email_open_rate = email_open_rate

    @property
    def is_entered(self):
        """Gets the is_entered of this InvitedVendor.

        Did the vendor enter the given project

        :return: The is_entered of this InvitedVendor.
        :rtype: bool
        """
        return self._is_entered

    @is_entered.setter
    def is_entered(self, is_entered):
        """Sets the is_entered of this InvitedVendor.

        Did the vendor enter the given project

        :param is_entered: The is_entered of this InvitedVendor.
        :type is_entered: bool
        """

        self._is_entered = is_entered

    @property
    def is_get_paid(self):
        """Gets the is_get_paid of this InvitedVendor.

        Is vendor get ever paid?

        :return: The is_get_paid of this InvitedVendor.
        :rtype: bool
        """
        return self._is_get_paid

    @is_get_paid.setter
    def is_get_paid(self, is_get_paid):
        """Sets the is_get_paid of this InvitedVendor.

        Is vendor get ever paid?

        :param is_get_paid: The is_get_paid of this InvitedVendor.
        :type is_get_paid: bool
        """

        self._is_get_paid = is_get_paid

    @property
    def is_worked(self):
        """Gets the is_worked of this InvitedVendor.

        Did the vendor work on the given project

        :return: The is_worked of this InvitedVendor.
        :rtype: bool
        """
        return self._is_worked

    @is_worked.setter
    def is_worked(self, is_worked):
        """Sets the is_worked of this InvitedVendor.

        Did the vendor work on the given project

        :param is_worked: The is_worked of this InvitedVendor.
        :type is_worked: bool
        """

        self._is_worked = is_worked

    @property
    def is_worked_in_any_project(self):
        """Gets the is_worked_in_any_project of this InvitedVendor.

        Vendors working status in any project

        :return: The is_worked_in_any_project of this InvitedVendor.
        :rtype: bool
        """
        return self._is_worked_in_any_project

    @is_worked_in_any_project.setter
    def is_worked_in_any_project(self, is_worked_in_any_project):
        """Sets the is_worked_in_any_project of this InvitedVendor.

        Vendors working status in any project

        :param is_worked_in_any_project: The is_worked_in_any_project of this InvitedVendor.
        :type is_worked_in_any_project: bool
        """

        self._is_worked_in_any_project = is_worked_in_any_project

    @property
    def last_project_date(self):
        """Gets the last_project_date of this InvitedVendor.

        Last project date

        :return: The last_project_date of this InvitedVendor.
        :rtype: date
        """
        return self._last_project_date

    @last_project_date.setter
    def last_project_date(self, last_project_date):
        """Sets the last_project_date of this InvitedVendor.

        Last project date

        :param last_project_date: The last_project_date of this InvitedVendor.
        :type last_project_date: date
        """

        self._last_project_date = last_project_date

    @property
    def project_status_when_interacted(self):
        """Gets the project_status_when_interacted of this InvitedVendor.

        Project translation percentage when interacted with the vendor

        :return: The project_status_when_interacted of this InvitedVendor.
        :rtype: float
        """
        return self._project_status_when_interacted

    @project_status_when_interacted.setter
    def project_status_when_interacted(self, project_status_when_interacted):
        """Sets the project_status_when_interacted of this InvitedVendor.

        Project translation percentage when interacted with the vendor

        :param project_status_when_interacted: The project_status_when_interacted of this InvitedVendor.
        :type project_status_when_interacted: float
        """

        self._project_status_when_interacted = project_status_when_interacted

    @property
    def registration_date(self):
        """Gets the registration_date of this InvitedVendor.

        Registration date

        :return: The registration_date of this InvitedVendor.
        :rtype: date
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this InvitedVendor.

        Registration date

        :param registration_date: The registration_date of this InvitedVendor.
        :type registration_date: date
        """

        self._registration_date = registration_date

    @property
    def responsiveness(self):
        """Gets the responsiveness of this InvitedVendor.

        Responsiveness of the vendor

        :return: The responsiveness of this InvitedVendor.
        :rtype: float
        """
        return self._responsiveness

    @responsiveness.setter
    def responsiveness(self, responsiveness):
        """Sets the responsiveness of this InvitedVendor.

        Responsiveness of the vendor

        :param responsiveness: The responsiveness of this InvitedVendor.
        :type responsiveness: float
        """

        self._responsiveness = responsiveness

    @property
    def user_id(self):
        """Gets the user_id of this InvitedVendor.

        Id in the Users

        :return: The user_id of this InvitedVendor.
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InvitedVendor.

        Id in the Users

        :param user_id: The user_id of this InvitedVendor.
        :type user_id: float
        """

        self._user_id = user_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this InvitedVendor.

        Id in the Vendors

        :return: The vendor_id of this InvitedVendor.
        :rtype: float
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this InvitedVendor.

        Id in the Vendors

        :param vendor_id: The vendor_id of this InvitedVendor.
        :type vendor_id: float
        """

        self._vendor_id = vendor_id

    @property
    def vendor_name(self):
        """Gets the vendor_name of this InvitedVendor.

        The name of the vendor

        :return: The vendor_name of this InvitedVendor.
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this InvitedVendor.

        The name of the vendor

        :param vendor_name: The vendor_name of this InvitedVendor.
        :type vendor_name: str
        """

        self._vendor_name = vendor_name

    @property
    def vendor_type(self):
        """Gets the vendor_type of this InvitedVendor.

        Type of the vendor in the given project namely translator or proofreader

        :return: The vendor_type of this InvitedVendor.
        :rtype: str
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this InvitedVendor.

        Type of the vendor in the given project namely translator or proofreader

        :param vendor_type: The vendor_type of this InvitedVendor.
        :type vendor_type: str
        """

        self._vendor_type = vendor_type
