# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary import Monetary
from openapi_server import util


class ClientStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_count: int=None, nps: float=None, started_project_count: int=None, total_discounted: Monetary=None, total_project_count: int=None, total_spending: float=None, translator_count: int=None):
        """ClientStats - a model defined in OpenAPI

        :param document_count: The document_count of this ClientStats.
        :param nps: The nps of this ClientStats.
        :param started_project_count: The started_project_count of this ClientStats.
        :param total_discounted: The total_discounted of this ClientStats.
        :param total_project_count: The total_project_count of this ClientStats.
        :param total_spending: The total_spending of this ClientStats.
        :param translator_count: The translator_count of this ClientStats.
        """
        self.openapi_types = {
            'document_count': int,
            'nps': float,
            'started_project_count': int,
            'total_discounted': Monetary,
            'total_project_count': int,
            'total_spending': float,
            'translator_count': int
        }

        self.attribute_map = {
            'document_count': 'document_count',
            'nps': 'nps',
            'started_project_count': 'started_project_count',
            'total_discounted': 'total_discounted',
            'total_project_count': 'total_project_count',
            'total_spending': 'total_spending',
            'translator_count': 'translator_count'
        }

        self._document_count = document_count
        self._nps = nps
        self._started_project_count = started_project_count
        self._total_discounted = total_discounted
        self._total_project_count = total_project_count
        self._total_spending = total_spending
        self._translator_count = translator_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientStats of this ClientStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_count(self):
        """Gets the document_count of this ClientStats.


        :return: The document_count of this ClientStats.
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this ClientStats.


        :param document_count: The document_count of this ClientStats.
        :type document_count: int
        """

        self._document_count = document_count

    @property
    def nps(self):
        """Gets the nps of this ClientStats.


        :return: The nps of this ClientStats.
        :rtype: float
        """
        return self._nps

    @nps.setter
    def nps(self, nps):
        """Sets the nps of this ClientStats.


        :param nps: The nps of this ClientStats.
        :type nps: float
        """

        self._nps = nps

    @property
    def started_project_count(self):
        """Gets the started_project_count of this ClientStats.


        :return: The started_project_count of this ClientStats.
        :rtype: int
        """
        return self._started_project_count

    @started_project_count.setter
    def started_project_count(self, started_project_count):
        """Sets the started_project_count of this ClientStats.


        :param started_project_count: The started_project_count of this ClientStats.
        :type started_project_count: int
        """

        self._started_project_count = started_project_count

    @property
    def total_discounted(self):
        """Gets the total_discounted of this ClientStats.


        :return: The total_discounted of this ClientStats.
        :rtype: Monetary
        """
        return self._total_discounted

    @total_discounted.setter
    def total_discounted(self, total_discounted):
        """Sets the total_discounted of this ClientStats.


        :param total_discounted: The total_discounted of this ClientStats.
        :type total_discounted: Monetary
        """

        self._total_discounted = total_discounted

    @property
    def total_project_count(self):
        """Gets the total_project_count of this ClientStats.


        :return: The total_project_count of this ClientStats.
        :rtype: int
        """
        return self._total_project_count

    @total_project_count.setter
    def total_project_count(self, total_project_count):
        """Sets the total_project_count of this ClientStats.


        :param total_project_count: The total_project_count of this ClientStats.
        :type total_project_count: int
        """

        self._total_project_count = total_project_count

    @property
    def total_spending(self):
        """Gets the total_spending of this ClientStats.


        :return: The total_spending of this ClientStats.
        :rtype: float
        """
        return self._total_spending

    @total_spending.setter
    def total_spending(self, total_spending):
        """Sets the total_spending of this ClientStats.


        :param total_spending: The total_spending of this ClientStats.
        :type total_spending: float
        """

        self._total_spending = total_spending

    @property
    def translator_count(self):
        """Gets the translator_count of this ClientStats.


        :return: The translator_count of this ClientStats.
        :rtype: int
        """
        return self._translator_count

    @translator_count.setter
    def translator_count(self, translator_count):
        """Sets the translator_count of this ClientStats.


        :param translator_count: The translator_count of this ClientStats.
        :type translator_count: int
        """

        self._translator_count = translator_count
