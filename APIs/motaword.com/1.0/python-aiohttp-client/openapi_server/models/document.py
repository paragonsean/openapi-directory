# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_links import DocumentLinks
from openapi_server.models.manual_file import ManualFile
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_type: str=None, has_custom_package: bool=None, id: int=None, links: DocumentLinks=None, manual_files: List[ManualFile]=None, name: str=None, project_id: int=None, review_in_manual_editor: bool=None, scheme: object=None, search_score: float=None, source_language: str=None, subject: str=None, target_languages: List[str]=None, uploaded_at: int=None, word_count: int=None):
        """Document - a model defined in OpenAPI

        :param file_type: The file_type of this Document.
        :param has_custom_package: The has_custom_package of this Document.
        :param id: The id of this Document.
        :param links: The links of this Document.
        :param manual_files: The manual_files of this Document.
        :param name: The name of this Document.
        :param project_id: The project_id of this Document.
        :param review_in_manual_editor: The review_in_manual_editor of this Document.
        :param scheme: The scheme of this Document.
        :param search_score: The search_score of this Document.
        :param source_language: The source_language of this Document.
        :param subject: The subject of this Document.
        :param target_languages: The target_languages of this Document.
        :param uploaded_at: The uploaded_at of this Document.
        :param word_count: The word_count of this Document.
        """
        self.openapi_types = {
            'file_type': str,
            'has_custom_package': bool,
            'id': int,
            'links': DocumentLinks,
            'manual_files': List[ManualFile],
            'name': str,
            'project_id': int,
            'review_in_manual_editor': bool,
            'scheme': object,
            'search_score': float,
            'source_language': str,
            'subject': str,
            'target_languages': List[str],
            'uploaded_at': int,
            'word_count': int
        }

        self.attribute_map = {
            'file_type': 'file_type',
            'has_custom_package': 'has_custom_package',
            'id': 'id',
            'links': 'links',
            'manual_files': 'manual_files',
            'name': 'name',
            'project_id': 'project_id',
            'review_in_manual_editor': 'review_in_manual_editor',
            'scheme': 'scheme',
            'search_score': 'search_score',
            'source_language': 'source_language',
            'subject': 'subject',
            'target_languages': 'target_languages',
            'uploaded_at': 'uploaded_at',
            'word_count': 'word_count'
        }

        self._file_type = file_type
        self._has_custom_package = has_custom_package
        self._id = id
        self._links = links
        self._manual_files = manual_files
        self._name = name
        self._project_id = project_id
        self._review_in_manual_editor = review_in_manual_editor
        self._scheme = scheme
        self._search_score = search_score
        self._source_language = source_language
        self._subject = subject
        self._target_languages = target_languages
        self._uploaded_at = uploaded_at
        self._word_count = word_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_type(self):
        """Gets the file_type of this Document.

        Extension of the file

        :return: The file_type of this Document.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Document.

        Extension of the file

        :param file_type: The file_type of this Document.
        :type file_type: str
        """

        self._file_type = file_type

    @property
    def has_custom_package(self):
        """Gets the has_custom_package of this Document.


        :return: The has_custom_package of this Document.
        :rtype: bool
        """
        return self._has_custom_package

    @has_custom_package.setter
    def has_custom_package(self, has_custom_package):
        """Sets the has_custom_package of this Document.


        :param has_custom_package: The has_custom_package of this Document.
        :type has_custom_package: bool
        """

        self._has_custom_package = has_custom_package

    @property
    def id(self):
        """Gets the id of this Document.


        :return: The id of this Document.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.
        :type id: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Document.


        :return: The links of this Document.
        :rtype: DocumentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Document.


        :param links: The links of this Document.
        :type links: DocumentLinks
        """

        self._links = links

    @property
    def manual_files(self):
        """Gets the manual_files of this Document.


        :return: The manual_files of this Document.
        :rtype: List[ManualFile]
        """
        return self._manual_files

    @manual_files.setter
    def manual_files(self, manual_files):
        """Sets the manual_files of this Document.


        :param manual_files: The manual_files of this Document.
        :type manual_files: List[ManualFile]
        """

        self._manual_files = manual_files

    @property
    def name(self):
        """Gets the name of this Document.


        :return: The name of this Document.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.


        :param name: The name of this Document.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Document.


        :return: The project_id of this Document.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Document.


        :param project_id: The project_id of this Document.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def review_in_manual_editor(self):
        """Gets the review_in_manual_editor of this Document.


        :return: The review_in_manual_editor of this Document.
        :rtype: bool
        """
        return self._review_in_manual_editor

    @review_in_manual_editor.setter
    def review_in_manual_editor(self, review_in_manual_editor):
        """Sets the review_in_manual_editor of this Document.


        :param review_in_manual_editor: The review_in_manual_editor of this Document.
        :type review_in_manual_editor: bool
        """

        self._review_in_manual_editor = review_in_manual_editor

    @property
    def scheme(self):
        """Gets the scheme of this Document.


        :return: The scheme of this Document.
        :rtype: object
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Document.


        :param scheme: The scheme of this Document.
        :type scheme: object
        """

        self._scheme = scheme

    @property
    def search_score(self):
        """Gets the search_score of this Document.


        :return: The search_score of this Document.
        :rtype: float
        """
        return self._search_score

    @search_score.setter
    def search_score(self, search_score):
        """Sets the search_score of this Document.


        :param search_score: The search_score of this Document.
        :type search_score: float
        """

        self._search_score = search_score

    @property
    def source_language(self):
        """Gets the source_language of this Document.


        :return: The source_language of this Document.
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this Document.


        :param source_language: The source_language of this Document.
        :type source_language: str
        """

        self._source_language = source_language

    @property
    def subject(self):
        """Gets the subject of this Document.


        :return: The subject of this Document.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Document.


        :param subject: The subject of this Document.
        :type subject: str
        """

        self._subject = subject

    @property
    def target_languages(self):
        """Gets the target_languages of this Document.


        :return: The target_languages of this Document.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this Document.


        :param target_languages: The target_languages of this Document.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this Document.

        Unix epoch time

        :return: The uploaded_at of this Document.
        :rtype: int
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this Document.

        Unix epoch time

        :param uploaded_at: The uploaded_at of this Document.
        :type uploaded_at: int
        """

        self._uploaded_at = uploaded_at

    @property
    def word_count(self):
        """Gets the word_count of this Document.


        :return: The word_count of this Document.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this Document.


        :param word_count: The word_count of this Document.
        :type word_count: int
        """

        self._word_count = word_count
