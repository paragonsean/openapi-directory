# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.project_links import ProjectLinks
from openapi_server.models.project_price import ProjectPrice
from openapi_server.models.project_source import ProjectSource
from openapi_server.models.project_status import ProjectStatus
from openapi_server.models.project_word_count_analysis import ProjectWordCountAnalysis
from openapi_server.models.user import User
from openapi_server.models.vendor_project_pair import VendorProjectPair
from openapi_server.models.vendor_project_role import VendorProjectRole
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_scores: Dict[str, float]=None, budget_code: str=None, callback_url: str=None, can_pam_manage: bool=None, client: User=None, cm_id: int=None, completed_on: datetime=None, continuous_project_type: str=None, created_at: int=None, custom: object=None, delivery_at: int=None, errors: List[Error]=None, id: int=None, is_api_project: bool=None, is_certified: bool=None, is_continuous: bool=None, is_manual: bool=None, links: ProjectLinks=None, pairs: List[VendorProjectPair]=None, pivoted_projects: List[int]=None, price: ProjectPrice=None, price_without_discount: ProjectPrice=None, role: VendorProjectRole=None, should_send_client_survey: bool=None, source: ProjectSource=None, source_language: str=None, status: ProjectStatus=None, subjects: List[str]=None, target_languages: List[str]=None, tms_name: str=None, valid_until: int=None, vendor_word_count: int=None, word_count: int=None, word_count_analysis: ProjectWordCountAnalysis=None):
        """Project - a model defined in OpenAPI

        :param average_scores: The average_scores of this Project.
        :param budget_code: The budget_code of this Project.
        :param callback_url: The callback_url of this Project.
        :param can_pam_manage: The can_pam_manage of this Project.
        :param client: The client of this Project.
        :param cm_id: The cm_id of this Project.
        :param completed_on: The completed_on of this Project.
        :param continuous_project_type: The continuous_project_type of this Project.
        :param created_at: The created_at of this Project.
        :param custom: The custom of this Project.
        :param delivery_at: The delivery_at of this Project.
        :param errors: The errors of this Project.
        :param id: The id of this Project.
        :param is_api_project: The is_api_project of this Project.
        :param is_certified: The is_certified of this Project.
        :param is_continuous: The is_continuous of this Project.
        :param is_manual: The is_manual of this Project.
        :param links: The links of this Project.
        :param pairs: The pairs of this Project.
        :param pivoted_projects: The pivoted_projects of this Project.
        :param price: The price of this Project.
        :param price_without_discount: The price_without_discount of this Project.
        :param role: The role of this Project.
        :param should_send_client_survey: The should_send_client_survey of this Project.
        :param source: The source of this Project.
        :param source_language: The source_language of this Project.
        :param status: The status of this Project.
        :param subjects: The subjects of this Project.
        :param target_languages: The target_languages of this Project.
        :param tms_name: The tms_name of this Project.
        :param valid_until: The valid_until of this Project.
        :param vendor_word_count: The vendor_word_count of this Project.
        :param word_count: The word_count of this Project.
        :param word_count_analysis: The word_count_analysis of this Project.
        """
        self.openapi_types = {
            'average_scores': Dict[str, float],
            'budget_code': str,
            'callback_url': str,
            'can_pam_manage': bool,
            'client': User,
            'cm_id': int,
            'completed_on': datetime,
            'continuous_project_type': str,
            'created_at': int,
            'custom': object,
            'delivery_at': int,
            'errors': List[Error],
            'id': int,
            'is_api_project': bool,
            'is_certified': bool,
            'is_continuous': bool,
            'is_manual': bool,
            'links': ProjectLinks,
            'pairs': List[VendorProjectPair],
            'pivoted_projects': List[int],
            'price': ProjectPrice,
            'price_without_discount': ProjectPrice,
            'role': VendorProjectRole,
            'should_send_client_survey': bool,
            'source': ProjectSource,
            'source_language': str,
            'status': ProjectStatus,
            'subjects': List[str],
            'target_languages': List[str],
            'tms_name': str,
            'valid_until': int,
            'vendor_word_count': int,
            'word_count': int,
            'word_count_analysis': ProjectWordCountAnalysis
        }

        self.attribute_map = {
            'average_scores': 'average_scores',
            'budget_code': 'budget_code',
            'callback_url': 'callback_url',
            'can_pam_manage': 'can_pam_manage',
            'client': 'client',
            'cm_id': 'cm_id',
            'completed_on': 'completed_on',
            'continuous_project_type': 'continuous_project_type',
            'created_at': 'created_at',
            'custom': 'custom',
            'delivery_at': 'delivery_at',
            'errors': 'errors',
            'id': 'id',
            'is_api_project': 'is_api_project',
            'is_certified': 'is_certified',
            'is_continuous': 'is_continuous',
            'is_manual': 'is_manual',
            'links': 'links',
            'pairs': 'pairs',
            'pivoted_projects': 'pivoted_projects',
            'price': 'price',
            'price_without_discount': 'price_without_discount',
            'role': 'role',
            'should_send_client_survey': 'should_send_client_survey',
            'source': 'source',
            'source_language': 'source_language',
            'status': 'status',
            'subjects': 'subjects',
            'target_languages': 'target_languages',
            'tms_name': 'tms_name',
            'valid_until': 'valid_until',
            'vendor_word_count': 'vendor_word_count',
            'word_count': 'word_count',
            'word_count_analysis': 'word_count_analysis'
        }

        self._average_scores = average_scores
        self._budget_code = budget_code
        self._callback_url = callback_url
        self._can_pam_manage = can_pam_manage
        self._client = client
        self._cm_id = cm_id
        self._completed_on = completed_on
        self._continuous_project_type = continuous_project_type
        self._created_at = created_at
        self._custom = custom
        self._delivery_at = delivery_at
        self._errors = errors
        self._id = id
        self._is_api_project = is_api_project
        self._is_certified = is_certified
        self._is_continuous = is_continuous
        self._is_manual = is_manual
        self._links = links
        self._pairs = pairs
        self._pivoted_projects = pivoted_projects
        self._price = price
        self._price_without_discount = price_without_discount
        self._role = role
        self._should_send_client_survey = should_send_client_survey
        self._source = source
        self._source_language = source_language
        self._status = status
        self._subjects = subjects
        self._target_languages = target_languages
        self._tms_name = tms_name
        self._valid_until = valid_until
        self._vendor_word_count = vendor_word_count
        self._word_count = word_count
        self._word_count_analysis = word_count_analysis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_scores(self):
        """Gets the average_scores of this Project.


        :return: The average_scores of this Project.
        :rtype: Dict[str, float]
        """
        return self._average_scores

    @average_scores.setter
    def average_scores(self, average_scores):
        """Sets the average_scores of this Project.


        :param average_scores: The average_scores of this Project.
        :type average_scores: Dict[str, float]
        """

        self._average_scores = average_scores

    @property
    def budget_code(self):
        """Gets the budget_code of this Project.


        :return: The budget_code of this Project.
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """Sets the budget_code of this Project.


        :param budget_code: The budget_code of this Project.
        :type budget_code: str
        """

        self._budget_code = budget_code

    @property
    def callback_url(self):
        """Gets the callback_url of this Project.

        Callback URL to notify when project status changed.

        :return: The callback_url of this Project.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Project.

        Callback URL to notify when project status changed.

        :param callback_url: The callback_url of this Project.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def can_pam_manage(self):
        """Gets the can_pam_manage of this Project.


        :return: The can_pam_manage of this Project.
        :rtype: bool
        """
        return self._can_pam_manage

    @can_pam_manage.setter
    def can_pam_manage(self, can_pam_manage):
        """Sets the can_pam_manage of this Project.


        :param can_pam_manage: The can_pam_manage of this Project.
        :type can_pam_manage: bool
        """

        self._can_pam_manage = can_pam_manage

    @property
    def client(self):
        """Gets the client of this Project.


        :return: The client of this Project.
        :rtype: User
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Project.


        :param client: The client of this Project.
        :type client: User
        """

        self._client = client

    @property
    def cm_id(self):
        """Gets the cm_id of this Project.

        Assigned admin's id

        :return: The cm_id of this Project.
        :rtype: int
        """
        return self._cm_id

    @cm_id.setter
    def cm_id(self, cm_id):
        """Sets the cm_id of this Project.

        Assigned admin's id

        :param cm_id: The cm_id of this Project.
        :type cm_id: int
        """

        self._cm_id = cm_id

    @property
    def completed_on(self):
        """Gets the completed_on of this Project.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The completed_on of this Project.
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this Project.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param completed_on: The completed_on of this Project.
        :type completed_on: datetime
        """

        self._completed_on = completed_on

    @property
    def continuous_project_type(self):
        """Gets the continuous_project_type of this Project.


        :return: The continuous_project_type of this Project.
        :rtype: str
        """
        return self._continuous_project_type

    @continuous_project_type.setter
    def continuous_project_type(self, continuous_project_type):
        """Sets the continuous_project_type of this Project.


        :param continuous_project_type: The continuous_project_type of this Project.
        :type continuous_project_type: str
        """

        self._continuous_project_type = continuous_project_type

    @property
    def created_at(self):
        """Gets the created_at of this Project.

        Unix epoch time

        :return: The created_at of this Project.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.

        Unix epoch time

        :param created_at: The created_at of this Project.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def custom(self):
        """Gets the custom of this Project.

        Custom data provided while creating a new project.

        :return: The custom of this Project.
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Project.

        Custom data provided while creating a new project.

        :param custom: The custom of this Project.
        :type custom: object
        """

        self._custom = custom

    @property
    def delivery_at(self):
        """Gets the delivery_at of this Project.

        Unix epoch time

        :return: The delivery_at of this Project.
        :rtype: int
        """
        return self._delivery_at

    @delivery_at.setter
    def delivery_at(self, delivery_at):
        """Sets the delivery_at of this Project.

        Unix epoch time

        :param delivery_at: The delivery_at of this Project.
        :type delivery_at: int
        """

        self._delivery_at = delivery_at

    @property
    def errors(self):
        """Gets the errors of this Project.

        A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.

        :return: The errors of this Project.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Project.

        A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.

        :param errors: The errors of this Project.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: int
        """

        self._id = id

    @property
    def is_api_project(self):
        """Gets the is_api_project of this Project.


        :return: The is_api_project of this Project.
        :rtype: bool
        """
        return self._is_api_project

    @is_api_project.setter
    def is_api_project(self, is_api_project):
        """Sets the is_api_project of this Project.


        :param is_api_project: The is_api_project of this Project.
        :type is_api_project: bool
        """

        self._is_api_project = is_api_project

    @property
    def is_certified(self):
        """Gets the is_certified of this Project.


        :return: The is_certified of this Project.
        :rtype: bool
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this Project.


        :param is_certified: The is_certified of this Project.
        :type is_certified: bool
        """

        self._is_certified = is_certified

    @property
    def is_continuous(self):
        """Gets the is_continuous of this Project.


        :return: The is_continuous of this Project.
        :rtype: bool
        """
        return self._is_continuous

    @is_continuous.setter
    def is_continuous(self, is_continuous):
        """Sets the is_continuous of this Project.


        :param is_continuous: The is_continuous of this Project.
        :type is_continuous: bool
        """

        self._is_continuous = is_continuous

    @property
    def is_manual(self):
        """Gets the is_manual of this Project.


        :return: The is_manual of this Project.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this Project.


        :param is_manual: The is_manual of this Project.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def links(self):
        """Gets the links of this Project.


        :return: The links of this Project.
        :rtype: ProjectLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Project.


        :param links: The links of this Project.
        :type links: ProjectLinks
        """

        self._links = links

    @property
    def pairs(self):
        """Gets the pairs of this Project.

        Currently authed vendor's available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.

        :return: The pairs of this Project.
        :rtype: List[VendorProjectPair]
        """
        return self._pairs

    @pairs.setter
    def pairs(self, pairs):
        """Sets the pairs of this Project.

        Currently authed vendor's available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.

        :param pairs: The pairs of this Project.
        :type pairs: List[VendorProjectPair]
        """

        self._pairs = pairs

    @property
    def pivoted_projects(self):
        """Gets the pivoted_projects of this Project.

        Quote IDs of pivots

        :return: The pivoted_projects of this Project.
        :rtype: List[int]
        """
        return self._pivoted_projects

    @pivoted_projects.setter
    def pivoted_projects(self, pivoted_projects):
        """Sets the pivoted_projects of this Project.

        Quote IDs of pivots

        :param pivoted_projects: The pivoted_projects of this Project.
        :type pivoted_projects: List[int]
        """

        self._pivoted_projects = pivoted_projects

    @property
    def price(self):
        """Gets the price of this Project.


        :return: The price of this Project.
        :rtype: ProjectPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Project.


        :param price: The price of this Project.
        :type price: ProjectPrice
        """

        self._price = price

    @property
    def price_without_discount(self):
        """Gets the price_without_discount of this Project.


        :return: The price_without_discount of this Project.
        :rtype: ProjectPrice
        """
        return self._price_without_discount

    @price_without_discount.setter
    def price_without_discount(self, price_without_discount):
        """Sets the price_without_discount of this Project.


        :param price_without_discount: The price_without_discount of this Project.
        :type price_without_discount: ProjectPrice
        """

        self._price_without_discount = price_without_discount

    @property
    def role(self):
        """Gets the role of this Project.


        :return: The role of this Project.
        :rtype: VendorProjectRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Project.


        :param role: The role of this Project.
        :type role: VendorProjectRole
        """

        self._role = role

    @property
    def should_send_client_survey(self):
        """Gets the should_send_client_survey of this Project.


        :return: The should_send_client_survey of this Project.
        :rtype: bool
        """
        return self._should_send_client_survey

    @should_send_client_survey.setter
    def should_send_client_survey(self, should_send_client_survey):
        """Sets the should_send_client_survey of this Project.


        :param should_send_client_survey: The should_send_client_survey of this Project.
        :type should_send_client_survey: bool
        """

        self._should_send_client_survey = should_send_client_survey

    @property
    def source(self):
        """Gets the source of this Project.


        :return: The source of this Project.
        :rtype: ProjectSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Project.


        :param source: The source of this Project.
        :type source: ProjectSource
        """

        self._source = source

    @property
    def source_language(self):
        """Gets the source_language of this Project.


        :return: The source_language of this Project.
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this Project.


        :param source_language: The source_language of this Project.
        :type source_language: str
        """

        self._source_language = source_language

    @property
    def status(self):
        """Gets the status of this Project.


        :return: The status of this Project.
        :rtype: ProjectStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.


        :param status: The status of this Project.
        :type status: ProjectStatus
        """

        self._status = status

    @property
    def subjects(self):
        """Gets the subjects of this Project.


        :return: The subjects of this Project.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this Project.


        :param subjects: The subjects of this Project.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def target_languages(self):
        """Gets the target_languages of this Project.


        :return: The target_languages of this Project.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this Project.


        :param target_languages: The target_languages of this Project.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages

    @property
    def tms_name(self):
        """Gets the tms_name of this Project.

        TMS project name for this MW project. Requires privileged scope.

        :return: The tms_name of this Project.
        :rtype: str
        """
        return self._tms_name

    @tms_name.setter
    def tms_name(self, tms_name):
        """Sets the tms_name of this Project.

        TMS project name for this MW project. Requires privileged scope.

        :param tms_name: The tms_name of this Project.
        :type tms_name: str
        """

        self._tms_name = tms_name

    @property
    def valid_until(self):
        """Gets the valid_until of this Project.

        Unix epoch time. Available only if status is `pending`.

        :return: The valid_until of this Project.
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Project.

        Unix epoch time. Available only if status is `pending`.

        :param valid_until: The valid_until of this Project.
        :type valid_until: int
        """

        self._valid_until = valid_until

    @property
    def vendor_word_count(self):
        """Gets the vendor_word_count of this Project.


        :return: The vendor_word_count of this Project.
        :rtype: int
        """
        return self._vendor_word_count

    @vendor_word_count.setter
    def vendor_word_count(self, vendor_word_count):
        """Sets the vendor_word_count of this Project.


        :param vendor_word_count: The vendor_word_count of this Project.
        :type vendor_word_count: int
        """

        self._vendor_word_count = vendor_word_count

    @property
    def word_count(self):
        """Gets the word_count of this Project.


        :return: The word_count of this Project.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this Project.


        :param word_count: The word_count of this Project.
        :type word_count: int
        """

        self._word_count = word_count

    @property
    def word_count_analysis(self):
        """Gets the word_count_analysis of this Project.


        :return: The word_count_analysis of this Project.
        :rtype: ProjectWordCountAnalysis
        """
        return self._word_count_analysis

    @word_count_analysis.setter
    def word_count_analysis(self, word_count_analysis):
        """Sets the word_count_analysis of this Project.


        :param word_count_analysis: The word_count_analysis of this Project.
        :type word_count_analysis: ProjectWordCountAnalysis
        """

        self._word_count_analysis = word_count_analysis
