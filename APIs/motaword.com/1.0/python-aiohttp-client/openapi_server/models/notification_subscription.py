# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: str=None, endpoint: str=None, type: str='OneSignal'):
        """NotificationSubscription - a model defined in OpenAPI

        :param device: The device of this NotificationSubscription.
        :param endpoint: The endpoint of this NotificationSubscription.
        :param type: The type of this NotificationSubscription.
        """
        self.openapi_types = {
            'device': str,
            'endpoint': str,
            'type': str
        }

        self.attribute_map = {
            'device': 'device',
            'endpoint': 'endpoint',
            'type': 'type'
        }

        self._device = device
        self._endpoint = endpoint
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSubscription of this NotificationSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this NotificationSubscription.


        :return: The device of this NotificationSubscription.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this NotificationSubscription.


        :param device: The device of this NotificationSubscription.
        :type device: str
        """
        allowed_values = ["iOS", "Android", "Chrome", "Firefox", "Safari", "Edge", "Amazon", "WindowsPhone", "Windows", "MacOS"]  # noqa: E501
        if device not in allowed_values:
            raise ValueError(
                "Invalid value for `device` ({0}), must be one of {1}"
                .format(device, allowed_values)
            )

        self._device = device

    @property
    def endpoint(self):
        """Gets the endpoint of this NotificationSubscription.

        OneSignal calls this \"player ID\".

        :return: The endpoint of this NotificationSubscription.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this NotificationSubscription.

        OneSignal calls this \"player ID\".

        :param endpoint: The endpoint of this NotificationSubscription.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def type(self):
        """Gets the type of this NotificationSubscription.


        :return: The type of this NotificationSubscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationSubscription.


        :param type: The type of this NotificationSubscription.
        :type type: str
        """
        allowed_values = ["OneSignal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
