# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StyleGuideUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, styleguides: file=None):
        """StyleGuideUploadRequest - a model defined in OpenAPI

        :param styleguides: The styleguides of this StyleGuideUploadRequest.
        """
        self.openapi_types = {
            'styleguides': file
        }

        self.attribute_map = {
            'styleguides': 'styleguides'
        }

        self._styleguides = styleguides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StyleGuideUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StyleGuideUploadRequest of this StyleGuideUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def styleguides(self):
        """Gets the styleguides of this StyleGuideUploadRequest.

        You can only add one style guide, even though the name suggests multiple style guides. This may be updated in the future to support multiple style guides.

        :return: The styleguides of this StyleGuideUploadRequest.
        :rtype: file
        """
        return self._styleguides

    @styleguides.setter
    def styleguides(self, styleguides):
        """Sets the styleguides of this StyleGuideUploadRequest.

        You can only add one style guide, even though the name suggests multiple style guides. This may be updated in the future to support multiple style guides.

        :param styleguides: The styleguides of this StyleGuideUploadRequest.
        :type styleguides: file
        """
        if styleguides is None:
            raise ValueError("Invalid value for `styleguides`, must not be `None`")

        self._styleguides = styleguides
