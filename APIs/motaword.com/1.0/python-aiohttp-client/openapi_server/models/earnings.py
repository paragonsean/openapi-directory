# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.earning_with_tqs import EarningWithTQS
from openapi_server import util


class Earnings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: List[EarningWithTQS]=None, ongoing: List[EarningWithTQS]=None, total: float=None):
        """Earnings - a model defined in OpenAPI

        :param completed: The completed of this Earnings.
        :param ongoing: The ongoing of this Earnings.
        :param total: The total of this Earnings.
        """
        self.openapi_types = {
            'completed': List[EarningWithTQS],
            'ongoing': List[EarningWithTQS],
            'total': float
        }

        self.attribute_map = {
            'completed': 'completed',
            'ongoing': 'ongoing',
            'total': 'total'
        }

        self._completed = completed
        self._ongoing = ongoing
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Earnings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Earnings of this Earnings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this Earnings.


        :return: The completed of this Earnings.
        :rtype: List[EarningWithTQS]
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Earnings.


        :param completed: The completed of this Earnings.
        :type completed: List[EarningWithTQS]
        """

        self._completed = completed

    @property
    def ongoing(self):
        """Gets the ongoing of this Earnings.


        :return: The ongoing of this Earnings.
        :rtype: List[EarningWithTQS]
        """
        return self._ongoing

    @ongoing.setter
    def ongoing(self, ongoing):
        """Sets the ongoing of this Earnings.


        :param ongoing: The ongoing of this Earnings.
        :type ongoing: List[EarningWithTQS]
        """

        self._ongoing = ongoing

    @property
    def total(self):
        """Gets the total of this Earnings.


        :return: The total of this Earnings.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Earnings.


        :param total: The total of this Earnings.
        :type total: float
        """

        self._total = total
