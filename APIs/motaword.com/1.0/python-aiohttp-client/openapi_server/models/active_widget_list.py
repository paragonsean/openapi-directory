# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_widget import ActiveWidget
from openapi_server.models.paging_meta import PagingMeta
from openapi_server import util


class ActiveWidgetList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: PagingMeta=None, widgets: List[ActiveWidget]=None):
        """ActiveWidgetList - a model defined in OpenAPI

        :param meta: The meta of this ActiveWidgetList.
        :param widgets: The widgets of this ActiveWidgetList.
        """
        self.openapi_types = {
            'meta': PagingMeta,
            'widgets': List[ActiveWidget]
        }

        self.attribute_map = {
            'meta': 'meta',
            'widgets': 'widgets'
        }

        self._meta = meta
        self._widgets = widgets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveWidgetList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveWidgetList of this ActiveWidgetList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this ActiveWidgetList.


        :return: The meta of this ActiveWidgetList.
        :rtype: PagingMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ActiveWidgetList.


        :param meta: The meta of this ActiveWidgetList.
        :type meta: PagingMeta
        """

        self._meta = meta

    @property
    def widgets(self):
        """Gets the widgets of this ActiveWidgetList.


        :return: The widgets of this ActiveWidgetList.
        :rtype: List[ActiveWidget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this ActiveWidgetList.


        :param widgets: The widgets of this ActiveWidgetList.
        :type widgets: List[ActiveWidget]
        """

        self._widgets = widgets
