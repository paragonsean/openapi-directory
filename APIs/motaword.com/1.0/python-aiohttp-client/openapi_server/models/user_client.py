# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_client_corporate import UserClientCorporate
from openapi_server import util


class UserClient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporate: UserClientCorporate=None, nps: float=None, subjects: Dict[str, int]=None):
        """UserClient - a model defined in OpenAPI

        :param corporate: The corporate of this UserClient.
        :param nps: The nps of this UserClient.
        :param subjects: The subjects of this UserClient.
        """
        self.openapi_types = {
            'corporate': UserClientCorporate,
            'nps': float,
            'subjects': Dict[str, int]
        }

        self.attribute_map = {
            'corporate': 'corporate',
            'nps': 'nps',
            'subjects': 'subjects'
        }

        self._corporate = corporate
        self._nps = nps
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserClient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_client of this UserClient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporate(self):
        """Gets the corporate of this UserClient.


        :return: The corporate of this UserClient.
        :rtype: UserClientCorporate
        """
        return self._corporate

    @corporate.setter
    def corporate(self, corporate):
        """Sets the corporate of this UserClient.


        :param corporate: The corporate of this UserClient.
        :type corporate: UserClientCorporate
        """

        self._corporate = corporate

    @property
    def nps(self):
        """Gets the nps of this UserClient.


        :return: The nps of this UserClient.
        :rtype: float
        """
        return self._nps

    @nps.setter
    def nps(self, nps):
        """Sets the nps of this UserClient.


        :param nps: The nps of this UserClient.
        :type nps: float
        """

        self._nps = nps

    @property
    def subjects(self):
        """Gets the subjects of this UserClient.


        :return: The subjects of this UserClient.
        :rtype: Dict[str, int]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this UserClient.


        :param subjects: The subjects of this UserClient.
        :type subjects: Dict[str, int]
        """

        self._subjects = subjects
