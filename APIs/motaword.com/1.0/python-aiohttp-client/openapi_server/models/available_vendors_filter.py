# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableVendorsFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corporate_id: float=None, manual_work_permission: bool=None, source_language: str=None, target_languages: List[str]=None, types: List[str]=None):
        """AvailableVendorsFilter - a model defined in OpenAPI

        :param corporate_id: The corporate_id of this AvailableVendorsFilter.
        :param manual_work_permission: The manual_work_permission of this AvailableVendorsFilter.
        :param source_language: The source_language of this AvailableVendorsFilter.
        :param target_languages: The target_languages of this AvailableVendorsFilter.
        :param types: The types of this AvailableVendorsFilter.
        """
        self.openapi_types = {
            'corporate_id': float,
            'manual_work_permission': bool,
            'source_language': str,
            'target_languages': List[str],
            'types': List[str]
        }

        self.attribute_map = {
            'corporate_id': 'corporateId',
            'manual_work_permission': 'manualWorkPermission',
            'source_language': 'sourceLanguage',
            'target_languages': 'targetLanguages',
            'types': 'types'
        }

        self._corporate_id = corporate_id
        self._manual_work_permission = manual_work_permission
        self._source_language = source_language
        self._target_languages = target_languages
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableVendorsFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableVendorsFilter of this AvailableVendorsFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corporate_id(self):
        """Gets the corporate_id of this AvailableVendorsFilter.

        Corporate account ID to filter for vendor authorization

        :return: The corporate_id of this AvailableVendorsFilter.
        :rtype: float
        """
        return self._corporate_id

    @corporate_id.setter
    def corporate_id(self, corporate_id):
        """Sets the corporate_id of this AvailableVendorsFilter.

        Corporate account ID to filter for vendor authorization

        :param corporate_id: The corporate_id of this AvailableVendorsFilter.
        :type corporate_id: float
        """

        self._corporate_id = corporate_id

    @property
    def manual_work_permission(self):
        """Gets the manual_work_permission of this AvailableVendorsFilter.

        Filter vendors for manual work permission

        :return: The manual_work_permission of this AvailableVendorsFilter.
        :rtype: bool
        """
        return self._manual_work_permission

    @manual_work_permission.setter
    def manual_work_permission(self, manual_work_permission):
        """Sets the manual_work_permission of this AvailableVendorsFilter.

        Filter vendors for manual work permission

        :param manual_work_permission: The manual_work_permission of this AvailableVendorsFilter.
        :type manual_work_permission: bool
        """

        self._manual_work_permission = manual_work_permission

    @property
    def source_language(self):
        """Gets the source_language of this AvailableVendorsFilter.

        Source language code

        :return: The source_language of this AvailableVendorsFilter.
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this AvailableVendorsFilter.

        Source language code

        :param source_language: The source_language of this AvailableVendorsFilter.
        :type source_language: str
        """

        self._source_language = source_language

    @property
    def target_languages(self):
        """Gets the target_languages of this AvailableVendorsFilter.

        List of target language codes.

        :return: The target_languages of this AvailableVendorsFilter.
        :rtype: List[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this AvailableVendorsFilter.

        List of target language codes.

        :param target_languages: The target_languages of this AvailableVendorsFilter.
        :type target_languages: List[str]
        """

        self._target_languages = target_languages

    @property
    def types(self):
        """Gets the types of this AvailableVendorsFilter.

        List of vendor types

        :return: The types of this AvailableVendorsFilter.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AvailableVendorsFilter.

        List of vendor types

        :param types: The types of this AvailableVendorsFilter.
        :type types: List[str]
        """
        allowed_values = ["translator", "proofreader", "both"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types
