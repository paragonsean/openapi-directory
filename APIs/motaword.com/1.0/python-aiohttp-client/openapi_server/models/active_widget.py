# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActiveWidget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_mode: bool=None, allow_hash_in_url: bool=None, allow_query_in_url: bool=None, auto_detect_source_language: bool=None, created_at: datetime=None, debug_mode: bool=None, elements: str=None, follow_user: bool=None, force_cache_refresh_interval: bool=None, hit_backend_for_existing: bool=None, id: int=None, language_mappings: str=None, live: bool=None, modify_links: bool=None, name: str=None, optimize_per_page: bool=None, pages: str=None, path_regex: str=None, position: str=None, query_name: str='locale', reboot_on_url_change: bool=None, restricted_domains: str=None, sections: str=None, test_mode: bool=None, theme: str=None, token: str=None, url_change_mode: str=None, url_mode: str=None, use_cache: bool=None, use_dummy_translations: bool=None, variables: str=None):
        """ActiveWidget - a model defined in OpenAPI

        :param admin_mode: The admin_mode of this ActiveWidget.
        :param allow_hash_in_url: The allow_hash_in_url of this ActiveWidget.
        :param allow_query_in_url: The allow_query_in_url of this ActiveWidget.
        :param auto_detect_source_language: The auto_detect_source_language of this ActiveWidget.
        :param created_at: The created_at of this ActiveWidget.
        :param debug_mode: The debug_mode of this ActiveWidget.
        :param elements: The elements of this ActiveWidget.
        :param follow_user: The follow_user of this ActiveWidget.
        :param force_cache_refresh_interval: The force_cache_refresh_interval of this ActiveWidget.
        :param hit_backend_for_existing: The hit_backend_for_existing of this ActiveWidget.
        :param id: The id of this ActiveWidget.
        :param language_mappings: The language_mappings of this ActiveWidget.
        :param live: The live of this ActiveWidget.
        :param modify_links: The modify_links of this ActiveWidget.
        :param name: The name of this ActiveWidget.
        :param optimize_per_page: The optimize_per_page of this ActiveWidget.
        :param pages: The pages of this ActiveWidget.
        :param path_regex: The path_regex of this ActiveWidget.
        :param position: The position of this ActiveWidget.
        :param query_name: The query_name of this ActiveWidget.
        :param reboot_on_url_change: The reboot_on_url_change of this ActiveWidget.
        :param restricted_domains: The restricted_domains of this ActiveWidget.
        :param sections: The sections of this ActiveWidget.
        :param test_mode: The test_mode of this ActiveWidget.
        :param theme: The theme of this ActiveWidget.
        :param token: The token of this ActiveWidget.
        :param url_change_mode: The url_change_mode of this ActiveWidget.
        :param url_mode: The url_mode of this ActiveWidget.
        :param use_cache: The use_cache of this ActiveWidget.
        :param use_dummy_translations: The use_dummy_translations of this ActiveWidget.
        :param variables: The variables of this ActiveWidget.
        """
        self.openapi_types = {
            'admin_mode': bool,
            'allow_hash_in_url': bool,
            'allow_query_in_url': bool,
            'auto_detect_source_language': bool,
            'created_at': datetime,
            'debug_mode': bool,
            'elements': str,
            'follow_user': bool,
            'force_cache_refresh_interval': bool,
            'hit_backend_for_existing': bool,
            'id': int,
            'language_mappings': str,
            'live': bool,
            'modify_links': bool,
            'name': str,
            'optimize_per_page': bool,
            'pages': str,
            'path_regex': str,
            'position': str,
            'query_name': str,
            'reboot_on_url_change': bool,
            'restricted_domains': str,
            'sections': str,
            'test_mode': bool,
            'theme': str,
            'token': str,
            'url_change_mode': str,
            'url_mode': str,
            'use_cache': bool,
            'use_dummy_translations': bool,
            'variables': str
        }

        self.attribute_map = {
            'admin_mode': 'admin_mode',
            'allow_hash_in_url': 'allow_hash_in_url',
            'allow_query_in_url': 'allow_query_in_url',
            'auto_detect_source_language': 'auto_detect_source_language',
            'created_at': 'created_at',
            'debug_mode': 'debug_mode',
            'elements': 'elements',
            'follow_user': 'follow_user',
            'force_cache_refresh_interval': 'force_cache_refresh_interval',
            'hit_backend_for_existing': 'hit_backend_for_existing',
            'id': 'id',
            'language_mappings': 'language_mappings',
            'live': 'live',
            'modify_links': 'modify_links',
            'name': 'name',
            'optimize_per_page': 'optimize_per_page',
            'pages': 'pages',
            'path_regex': 'path_regex',
            'position': 'position',
            'query_name': 'query_name',
            'reboot_on_url_change': 'reboot_on_url_change',
            'restricted_domains': 'restricted_domains',
            'sections': 'sections',
            'test_mode': 'test_mode',
            'theme': 'theme',
            'token': 'token',
            'url_change_mode': 'url_change_mode',
            'url_mode': 'url_mode',
            'use_cache': 'use_cache',
            'use_dummy_translations': 'use_dummy_translations',
            'variables': 'variables'
        }

        self._admin_mode = admin_mode
        self._allow_hash_in_url = allow_hash_in_url
        self._allow_query_in_url = allow_query_in_url
        self._auto_detect_source_language = auto_detect_source_language
        self._created_at = created_at
        self._debug_mode = debug_mode
        self._elements = elements
        self._follow_user = follow_user
        self._force_cache_refresh_interval = force_cache_refresh_interval
        self._hit_backend_for_existing = hit_backend_for_existing
        self._id = id
        self._language_mappings = language_mappings
        self._live = live
        self._modify_links = modify_links
        self._name = name
        self._optimize_per_page = optimize_per_page
        self._pages = pages
        self._path_regex = path_regex
        self._position = position
        self._query_name = query_name
        self._reboot_on_url_change = reboot_on_url_change
        self._restricted_domains = restricted_domains
        self._sections = sections
        self._test_mode = test_mode
        self._theme = theme
        self._token = token
        self._url_change_mode = url_change_mode
        self._url_mode = url_mode
        self._use_cache = use_cache
        self._use_dummy_translations = use_dummy_translations
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveWidget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveWidget of this ActiveWidget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_mode(self):
        """Gets the admin_mode of this ActiveWidget.

        Is the Active Widget in admin mode? This changes a couple of behaviors in the widget to configure some rules like elements, sections, pages, etc.

        :return: The admin_mode of this ActiveWidget.
        :rtype: bool
        """
        return self._admin_mode

    @admin_mode.setter
    def admin_mode(self, admin_mode):
        """Sets the admin_mode of this ActiveWidget.

        Is the Active Widget in admin mode? This changes a couple of behaviors in the widget to configure some rules like elements, sections, pages, etc.

        :param admin_mode: The admin_mode of this ActiveWidget.
        :type admin_mode: bool
        """

        self._admin_mode = admin_mode

    @property
    def allow_hash_in_url(self):
        """Gets the allow_hash_in_url of this ActiveWidget.

        When true, hash params are included in filenames. When false, params are ignored.

        :return: The allow_hash_in_url of this ActiveWidget.
        :rtype: bool
        """
        return self._allow_hash_in_url

    @allow_hash_in_url.setter
    def allow_hash_in_url(self, allow_hash_in_url):
        """Sets the allow_hash_in_url of this ActiveWidget.

        When true, hash params are included in filenames. When false, params are ignored.

        :param allow_hash_in_url: The allow_hash_in_url of this ActiveWidget.
        :type allow_hash_in_url: bool
        """

        self._allow_hash_in_url = allow_hash_in_url

    @property
    def allow_query_in_url(self):
        """Gets the allow_query_in_url of this ActiveWidget.

        When true, query params are included in filenames. When false, params are ignored.

        :return: The allow_query_in_url of this ActiveWidget.
        :rtype: bool
        """
        return self._allow_query_in_url

    @allow_query_in_url.setter
    def allow_query_in_url(self, allow_query_in_url):
        """Sets the allow_query_in_url of this ActiveWidget.

        When true, query params are included in filenames. When false, params are ignored.

        :param allow_query_in_url: The allow_query_in_url of this ActiveWidget.
        :type allow_query_in_url: bool
        """

        self._allow_query_in_url = allow_query_in_url

    @property
    def auto_detect_source_language(self):
        """Gets the auto_detect_source_language of this ActiveWidget.

        When true, we will ignore the source language of your project and try to automatically detect the source language of the given content. This is especially useful in environments with unpredictable source contents, such as a chat environment.

        :return: The auto_detect_source_language of this ActiveWidget.
        :rtype: bool
        """
        return self._auto_detect_source_language

    @auto_detect_source_language.setter
    def auto_detect_source_language(self, auto_detect_source_language):
        """Sets the auto_detect_source_language of this ActiveWidget.

        When true, we will ignore the source language of your project and try to automatically detect the source language of the given content. This is especially useful in environments with unpredictable source contents, such as a chat environment.

        :param auto_detect_source_language: The auto_detect_source_language of this ActiveWidget.
        :type auto_detect_source_language: bool
        """

        self._auto_detect_source_language = auto_detect_source_language

    @property
    def created_at(self):
        """Gets the created_at of this ActiveWidget.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The created_at of this ActiveWidget.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActiveWidget.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param created_at: The created_at of this ActiveWidget.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def debug_mode(self):
        """Gets the debug_mode of this ActiveWidget.

        When true, Active ecosystem will print debug-level logs from all Active modules.

        :return: The debug_mode of this ActiveWidget.
        :rtype: bool
        """
        return self._debug_mode

    @debug_mode.setter
    def debug_mode(self, debug_mode):
        """Sets the debug_mode of this ActiveWidget.

        When true, Active ecosystem will print debug-level logs from all Active modules.

        :param debug_mode: The debug_mode of this ActiveWidget.
        :type debug_mode: bool
        """

        self._debug_mode = debug_mode

    @property
    def elements(self):
        """Gets the elements of this ActiveWidget.

        Continuous project exclusive elements and rules

        :return: The elements of this ActiveWidget.
        :rtype: str
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ActiveWidget.

        Continuous project exclusive elements and rules

        :param elements: The elements of this ActiveWidget.
        :type elements: str
        """

        self._elements = elements

    @property
    def follow_user(self):
        """Gets the follow_user of this ActiveWidget.

        Specify whether we should follow the user around in your website and automatically translate pages.

        :return: The follow_user of this ActiveWidget.
        :rtype: bool
        """
        return self._follow_user

    @follow_user.setter
    def follow_user(self, follow_user):
        """Sets the follow_user of this ActiveWidget.

        Specify whether we should follow the user around in your website and automatically translate pages.

        :param follow_user: The follow_user of this ActiveWidget.
        :type follow_user: bool
        """

        self._follow_user = follow_user

    @property
    def force_cache_refresh_interval(self):
        """Gets the force_cache_refresh_interval of this ActiveWidget.

        Determines whether to force-refresh local browser cache of your translations in certain period of times, no matter if there is a new activity in the project.

        :return: The force_cache_refresh_interval of this ActiveWidget.
        :rtype: bool
        """
        return self._force_cache_refresh_interval

    @force_cache_refresh_interval.setter
    def force_cache_refresh_interval(self, force_cache_refresh_interval):
        """Sets the force_cache_refresh_interval of this ActiveWidget.

        Determines whether to force-refresh local browser cache of your translations in certain period of times, no matter if there is a new activity in the project.

        :param force_cache_refresh_interval: The force_cache_refresh_interval of this ActiveWidget.
        :type force_cache_refresh_interval: bool
        """

        self._force_cache_refresh_interval = force_cache_refresh_interval

    @property
    def hit_backend_for_existing(self):
        """Gets the hit_backend_for_existing of this ActiveWidget.

        When true, Active ecosystem will collect all strings on TMS no matter if the translation is present in the cache.

        :return: The hit_backend_for_existing of this ActiveWidget.
        :rtype: bool
        """
        return self._hit_backend_for_existing

    @hit_backend_for_existing.setter
    def hit_backend_for_existing(self, hit_backend_for_existing):
        """Sets the hit_backend_for_existing of this ActiveWidget.

        When true, Active ecosystem will collect all strings on TMS no matter if the translation is present in the cache.

        :param hit_backend_for_existing: The hit_backend_for_existing of this ActiveWidget.
        :type hit_backend_for_existing: bool
        """

        self._hit_backend_for_existing = hit_backend_for_existing

    @property
    def id(self):
        """Gets the id of this ActiveWidget.


        :return: The id of this ActiveWidget.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActiveWidget.


        :param id: The id of this ActiveWidget.
        :type id: int
        """

        self._id = id

    @property
    def language_mappings(self):
        """Gets the language_mappings of this ActiveWidget.

        Continuous project language mappings

        :return: The language_mappings of this ActiveWidget.
        :rtype: str
        """
        return self._language_mappings

    @language_mappings.setter
    def language_mappings(self, language_mappings):
        """Sets the language_mappings of this ActiveWidget.

        Continuous project language mappings

        :param language_mappings: The language_mappings of this ActiveWidget.
        :type language_mappings: str
        """

        self._language_mappings = language_mappings

    @property
    def live(self):
        """Gets the live of this ActiveWidget.

        Whether ActiveJS should be considered live in an embedded site. Use `false` if you are still testing Active. Go to your Active dashboard and follow links to your website to actually test Active.

        :return: The live of this ActiveWidget.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this ActiveWidget.

        Whether ActiveJS should be considered live in an embedded site. Use `false` if you are still testing Active. Go to your Active dashboard and follow links to your website to actually test Active.

        :param live: The live of this ActiveWidget.
        :type live: bool
        """

        self._live = live

    @property
    def modify_links(self):
        """Gets the modify_links of this ActiveWidget.

        We can automatically localize the same-domain URLs in your page. The way we localize the URL depends on urlMode configuration. We can either add/update the locale query parameter, or add/update the path of the URL.

        :return: The modify_links of this ActiveWidget.
        :rtype: bool
        """
        return self._modify_links

    @modify_links.setter
    def modify_links(self, modify_links):
        """Sets the modify_links of this ActiveWidget.

        We can automatically localize the same-domain URLs in your page. The way we localize the URL depends on urlMode configuration. We can either add/update the locale query parameter, or add/update the path of the URL.

        :param modify_links: The modify_links of this ActiveWidget.
        :type modify_links: bool
        """

        self._modify_links = modify_links

    @property
    def name(self):
        """Gets the name of this ActiveWidget.


        :return: The name of this ActiveWidget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActiveWidget.


        :param name: The name of this ActiveWidget.
        :type name: str
        """

        self._name = name

    @property
    def optimize_per_page(self):
        """Gets the optimize_per_page of this ActiveWidget.

        When true, Active ecosystem will optimize the script and data flows per page, rather than per project. This decreases the bandwidth usage per script, but makes translation publishing more complex and script serving per-page.

        :return: The optimize_per_page of this ActiveWidget.
        :rtype: bool
        """
        return self._optimize_per_page

    @optimize_per_page.setter
    def optimize_per_page(self, optimize_per_page):
        """Sets the optimize_per_page of this ActiveWidget.

        When true, Active ecosystem will optimize the script and data flows per page, rather than per project. This decreases the bandwidth usage per script, but makes translation publishing more complex and script serving per-page.

        :param optimize_per_page: The optimize_per_page of this ActiveWidget.
        :type optimize_per_page: bool
        """

        self._optimize_per_page = optimize_per_page

    @property
    def pages(self):
        """Gets the pages of this ActiveWidget.

        Continuous project page rules

        :return: The pages of this ActiveWidget.
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this ActiveWidget.

        Continuous project page rules

        :param pages: The pages of this ActiveWidget.
        :type pages: str
        """

        self._pages = pages

    @property
    def path_regex(self):
        """Gets the path_regex of this ActiveWidget.

        Custom regex for path-type URL mode.

        :return: The path_regex of this ActiveWidget.
        :rtype: str
        """
        return self._path_regex

    @path_regex.setter
    def path_regex(self, path_regex):
        """Sets the path_regex of this ActiveWidget.

        Custom regex for path-type URL mode.

        :param path_regex: The path_regex of this ActiveWidget.
        :type path_regex: str
        """

        self._path_regex = path_regex

    @property
    def position(self):
        """Gets the position of this ActiveWidget.

        Options are \"bottom-left\", \"bottom-right\", \"in-place\"

        :return: The position of this ActiveWidget.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ActiveWidget.

        Options are \"bottom-left\", \"bottom-right\", \"in-place\"

        :param position: The position of this ActiveWidget.
        :type position: str
        """

        self._position = position

    @property
    def query_name(self):
        """Gets the query_name of this ActiveWidget.

        Query parameter name to be used with query-type URL mode. Default is 'locale'.

        :return: The query_name of this ActiveWidget.
        :rtype: str
        """
        return self._query_name

    @query_name.setter
    def query_name(self, query_name):
        """Sets the query_name of this ActiveWidget.

        Query parameter name to be used with query-type URL mode. Default is 'locale'.

        :param query_name: The query_name of this ActiveWidget.
        :type query_name: str
        """

        self._query_name = query_name

    @property
    def reboot_on_url_change(self):
        """Gets the reboot_on_url_change of this ActiveWidget.

        When true, Active ecosystem reboots itself when url changes.

        :return: The reboot_on_url_change of this ActiveWidget.
        :rtype: bool
        """
        return self._reboot_on_url_change

    @reboot_on_url_change.setter
    def reboot_on_url_change(self, reboot_on_url_change):
        """Sets the reboot_on_url_change of this ActiveWidget.

        When true, Active ecosystem reboots itself when url changes.

        :param reboot_on_url_change: The reboot_on_url_change of this ActiveWidget.
        :type reboot_on_url_change: bool
        """

        self._reboot_on_url_change = reboot_on_url_change

    @property
    def restricted_domains(self):
        """Gets the restricted_domains of this ActiveWidget.

        JSON string for a list of domains that this widget's API interactions are limited to.

        :return: The restricted_domains of this ActiveWidget.
        :rtype: str
        """
        return self._restricted_domains

    @restricted_domains.setter
    def restricted_domains(self, restricted_domains):
        """Sets the restricted_domains of this ActiveWidget.

        JSON string for a list of domains that this widget's API interactions are limited to.

        :param restricted_domains: The restricted_domains of this ActiveWidget.
        :type restricted_domains: str
        """

        self._restricted_domains = restricted_domains

    @property
    def sections(self):
        """Gets the sections of this ActiveWidget.

        Continuous project section rules

        :return: The sections of this ActiveWidget.
        :rtype: str
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this ActiveWidget.

        Continuous project section rules

        :param sections: The sections of this ActiveWidget.
        :type sections: str
        """

        self._sections = sections

    @property
    def test_mode(self):
        """Gets the test_mode of this ActiveWidget.

        Is the Active Widget in test mode? This changes a couple behaviors in the widget to make it easier for you to test and develop your Active integration.

        :return: The test_mode of this ActiveWidget.
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this ActiveWidget.

        Is the Active Widget in test mode? This changes a couple behaviors in the widget to make it easier for you to test and develop your Active integration.

        :param test_mode: The test_mode of this ActiveWidget.
        :type test_mode: bool
        """

        self._test_mode = test_mode

    @property
    def theme(self):
        """Gets the theme of this ActiveWidget.

        \\\"light\\\", \\\"dark\\\" OR custom JSON.

        :return: The theme of this ActiveWidget.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this ActiveWidget.

        \\\"light\\\", \\\"dark\\\" OR custom JSON.

        :param theme: The theme of this ActiveWidget.
        :type theme: str
        """

        self._theme = theme

    @property
    def token(self):
        """Gets the token of this ActiveWidget.

        Token that you should use when you are using this widget on your website.

        :return: The token of this ActiveWidget.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ActiveWidget.

        Token that you should use when you are using this widget on your website.

        :param token: The token of this ActiveWidget.
        :type token: str
        """

        self._token = token

    @property
    def url_change_mode(self):
        """Gets the url_change_mode of this ActiveWidget.

        When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can do this by actually redirecting the user to the new page, or by simply changing the URL in the address bar via browser's History API. When NULL, we won't apply any URL changes.

        :return: The url_change_mode of this ActiveWidget.
        :rtype: str
        """
        return self._url_change_mode

    @url_change_mode.setter
    def url_change_mode(self, url_change_mode):
        """Sets the url_change_mode of this ActiveWidget.

        When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can do this by actually redirecting the user to the new page, or by simply changing the URL in the address bar via browser's History API. When NULL, we won't apply any URL changes.

        :param url_change_mode: The url_change_mode of this ActiveWidget.
        :type url_change_mode: str
        """

        self._url_change_mode = url_change_mode

    @property
    def url_mode(self):
        """Gets the url_mode of this ActiveWidget.

        When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can either change the path of the URL to prefix it with the locale code, or we can add a query parameter to the URL. We also use this mode to detect the locale for the current page when a user directly loads a page. When NULL, locale detection from URL will be disabled (even then, if the user has selected a locale manually, and followUser is enabled, we will still automatically translate the page in user's locale.

        :return: The url_mode of this ActiveWidget.
        :rtype: str
        """
        return self._url_mode

    @url_mode.setter
    def url_mode(self, url_mode):
        """Sets the url_mode of this ActiveWidget.

        When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can either change the path of the URL to prefix it with the locale code, or we can add a query parameter to the URL. We also use this mode to detect the locale for the current page when a user directly loads a page. When NULL, locale detection from URL will be disabled (even then, if the user has selected a locale manually, and followUser is enabled, we will still automatically translate the page in user's locale.

        :param url_mode: The url_mode of this ActiveWidget.
        :type url_mode: str
        """

        self._url_mode = url_mode

    @property
    def use_cache(self):
        """Gets the use_cache of this ActiveWidget.

        Should we make use of local browser cache for your visitors? We will refresh the cache when Active JS detects new activity in your project.

        :return: The use_cache of this ActiveWidget.
        :rtype: bool
        """
        return self._use_cache

    @use_cache.setter
    def use_cache(self, use_cache):
        """Sets the use_cache of this ActiveWidget.

        Should we make use of local browser cache for your visitors? We will refresh the cache when Active JS detects new activity in your project.

        :param use_cache: The use_cache of this ActiveWidget.
        :type use_cache: bool
        """

        self._use_cache = use_cache

    @property
    def use_dummy_translations(self):
        """Gets the use_dummy_translations of this ActiveWidget.

        When enabled, we will translate your website with dummy content, rather than actually using MT/TM.

        :return: The use_dummy_translations of this ActiveWidget.
        :rtype: bool
        """
        return self._use_dummy_translations

    @use_dummy_translations.setter
    def use_dummy_translations(self, use_dummy_translations):
        """Sets the use_dummy_translations of this ActiveWidget.

        When enabled, we will translate your website with dummy content, rather than actually using MT/TM.

        :param use_dummy_translations: The use_dummy_translations of this ActiveWidget.
        :type use_dummy_translations: bool
        """

        self._use_dummy_translations = use_dummy_translations

    @property
    def variables(self):
        """Gets the variables of this ActiveWidget.

        Continuous project variable definitions

        :return: The variables of this ActiveWidget.
        :rtype: str
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this ActiveWidget.

        Continuous project variable definitions

        :param variables: The variables of this ActiveWidget.
        :type variables: str
        """

        self._variables = variables
