# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continuous_project_costs import ContinuousProjectCosts
from openapi_server.models.continuous_project_word_counts import ContinuousProjectWordCounts
from openapi_server.models.progress import Progress
from openapi_server import util


class ContinuousProjectProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, costs: ContinuousProjectCosts=None, progress: Progress=None, word_counts: ContinuousProjectWordCounts=None):
        """ContinuousProjectProgress - a model defined in OpenAPI

        :param costs: The costs of this ContinuousProjectProgress.
        :param progress: The progress of this ContinuousProjectProgress.
        :param word_counts: The word_counts of this ContinuousProjectProgress.
        """
        self.openapi_types = {
            'costs': ContinuousProjectCosts,
            'progress': Progress,
            'word_counts': ContinuousProjectWordCounts
        }

        self.attribute_map = {
            'costs': 'costs',
            'progress': 'progress',
            'word_counts': 'word_counts'
        }

        self._costs = costs
        self._progress = progress
        self._word_counts = word_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousProjectProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousProjectProgress of this ContinuousProjectProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def costs(self):
        """Gets the costs of this ContinuousProjectProgress.


        :return: The costs of this ContinuousProjectProgress.
        :rtype: ContinuousProjectCosts
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this ContinuousProjectProgress.


        :param costs: The costs of this ContinuousProjectProgress.
        :type costs: ContinuousProjectCosts
        """

        self._costs = costs

    @property
    def progress(self):
        """Gets the progress of this ContinuousProjectProgress.


        :return: The progress of this ContinuousProjectProgress.
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ContinuousProjectProgress.


        :param progress: The progress of this ContinuousProjectProgress.
        :type progress: Progress
        """

        self._progress = progress

    @property
    def word_counts(self):
        """Gets the word_counts of this ContinuousProjectProgress.


        :return: The word_counts of this ContinuousProjectProgress.
        :rtype: ContinuousProjectWordCounts
        """
        return self._word_counts

    @word_counts.setter
    def word_counts(self, word_counts):
        """Sets the word_counts of this ContinuousProjectProgress.


        :param word_counts: The word_counts of this ContinuousProjectProgress.
        :type word_counts: ContinuousProjectWordCounts
        """

        self._word_counts = word_counts
