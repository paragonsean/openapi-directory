# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PamMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, recipients: List[str]=None, slots: List[str]=None, thread_id: str=None, thread_key: str=None):
        """PamMessage - a model defined in OpenAPI

        :param message: The message of this PamMessage.
        :param recipients: The recipients of this PamMessage.
        :param slots: The slots of this PamMessage.
        :param thread_id: The thread_id of this PamMessage.
        :param thread_key: The thread_key of this PamMessage.
        """
        self.openapi_types = {
            'message': str,
            'recipients': List[str],
            'slots': List[str],
            'thread_id': str,
            'thread_key': str
        }

        self.attribute_map = {
            'message': 'message',
            'recipients': 'recipients',
            'slots': 'slots',
            'thread_id': 'thread_id',
            'thread_key': 'thread_key'
        }

        self._message = message
        self._recipients = recipients
        self._slots = slots
        self._thread_id = thread_id
        self._thread_key = thread_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PamMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PamMessage of this PamMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this PamMessage.

        the message to be sent

        :return: The message of this PamMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PamMessage.

        the message to be sent

        :param message: The message of this PamMessage.
        :type message: str
        """

        self._message = message

    @property
    def recipients(self):
        """Gets the recipients of this PamMessage.

        name of the recipients in the channel

        :return: The recipients of this PamMessage.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this PamMessage.

        name of the recipients in the channel

        :param recipients: The recipients of this PamMessage.
        :type recipients: List[str]
        """

        self._recipients = recipients

    @property
    def slots(self):
        """Gets the slots of this PamMessage.

        contexts for next message

        :return: The slots of this PamMessage.
        :rtype: List[str]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this PamMessage.

        contexts for next message

        :param slots: The slots of this PamMessage.
        :type slots: List[str]
        """

        self._slots = slots

    @property
    def thread_id(self):
        """Gets the thread_id of this PamMessage.

        id of the thread

        :return: The thread_id of this PamMessage.
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this PamMessage.

        id of the thread

        :param thread_id: The thread_id of this PamMessage.
        :type thread_id: str
        """

        self._thread_id = thread_id

    @property
    def thread_key(self):
        """Gets the thread_key of this PamMessage.

        the key for thread_id default is project

        :return: The thread_key of this PamMessage.
        :rtype: str
        """
        return self._thread_key

    @thread_key.setter
    def thread_key(self, thread_key):
        """Sets the thread_key of this PamMessage.

        the key for thread_id default is project

        :param thread_key: The thread_key of this PamMessage.
        :type thread_key: str
        """

        self._thread_key = thread_key
