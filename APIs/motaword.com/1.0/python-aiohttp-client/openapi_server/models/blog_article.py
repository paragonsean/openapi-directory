# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blog_article_links import BlogArticleLinks
from openapi_server import util


class BlogArticle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, announcement_type: str=None, author: str=None, content: str=None, created_at: datetime=None, excerpt: str=None, id: int=None, language: str=None, links: BlogArticleLinks=None, slug: str=None, title: str=None, topic: str=None):
        """BlogArticle - a model defined in OpenAPI

        :param announcement_type: The announcement_type of this BlogArticle.
        :param author: The author of this BlogArticle.
        :param content: The content of this BlogArticle.
        :param created_at: The created_at of this BlogArticle.
        :param excerpt: The excerpt of this BlogArticle.
        :param id: The id of this BlogArticle.
        :param language: The language of this BlogArticle.
        :param links: The links of this BlogArticle.
        :param slug: The slug of this BlogArticle.
        :param title: The title of this BlogArticle.
        :param topic: The topic of this BlogArticle.
        """
        self.openapi_types = {
            'announcement_type': str,
            'author': str,
            'content': str,
            'created_at': datetime,
            'excerpt': str,
            'id': int,
            'language': str,
            'links': BlogArticleLinks,
            'slug': str,
            'title': str,
            'topic': str
        }

        self.attribute_map = {
            'announcement_type': 'announcement_type',
            'author': 'author',
            'content': 'content',
            'created_at': 'created_at',
            'excerpt': 'excerpt',
            'id': 'id',
            'language': 'language',
            'links': 'links',
            'slug': 'slug',
            'title': 'title',
            'topic': 'topic'
        }

        self._announcement_type = announcement_type
        self._author = author
        self._content = content
        self._created_at = created_at
        self._excerpt = excerpt
        self._id = id
        self._language = language
        self._links = links
        self._slug = slug
        self._title = title
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlogArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlogArticle of this BlogArticle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def announcement_type(self):
        """Gets the announcement_type of this BlogArticle.


        :return: The announcement_type of this BlogArticle.
        :rtype: str
        """
        return self._announcement_type

    @announcement_type.setter
    def announcement_type(self, announcement_type):
        """Sets the announcement_type of this BlogArticle.


        :param announcement_type: The announcement_type of this BlogArticle.
        :type announcement_type: str
        """
        allowed_values = ["article", "case", "famous-translators", "sales"]  # noqa: E501
        if announcement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `announcement_type` ({0}), must be one of {1}"
                .format(announcement_type, allowed_values)
            )

        self._announcement_type = announcement_type

    @property
    def author(self):
        """Gets the author of this BlogArticle.


        :return: The author of this BlogArticle.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this BlogArticle.


        :param author: The author of this BlogArticle.
        :type author: str
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this BlogArticle.

        Article content

        :return: The content of this BlogArticle.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BlogArticle.

        Article content

        :param content: The content of this BlogArticle.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this BlogArticle.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The created_at of this BlogArticle.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BlogArticle.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param created_at: The created_at of this BlogArticle.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def excerpt(self):
        """Gets the excerpt of this BlogArticle.

        Article excerpt

        :return: The excerpt of this BlogArticle.
        :rtype: str
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this BlogArticle.

        Article excerpt

        :param excerpt: The excerpt of this BlogArticle.
        :type excerpt: str
        """

        self._excerpt = excerpt

    @property
    def id(self):
        """Gets the id of this BlogArticle.


        :return: The id of this BlogArticle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlogArticle.


        :param id: The id of this BlogArticle.
        :type id: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this BlogArticle.

        language code

        :return: The language of this BlogArticle.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BlogArticle.

        language code

        :param language: The language of this BlogArticle.
        :type language: str
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this BlogArticle.


        :return: The links of this BlogArticle.
        :rtype: BlogArticleLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BlogArticle.


        :param links: The links of this BlogArticle.
        :type links: BlogArticleLinks
        """

        self._links = links

    @property
    def slug(self):
        """Gets the slug of this BlogArticle.


        :return: The slug of this BlogArticle.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this BlogArticle.


        :param slug: The slug of this BlogArticle.
        :type slug: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this BlogArticle.


        :return: The title of this BlogArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BlogArticle.


        :param title: The title of this BlogArticle.
        :type title: str
        """

        self._title = title

    @property
    def topic(self):
        """Gets the topic of this BlogArticle.


        :return: The topic of this BlogArticle.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this BlogArticle.


        :param topic: The topic of this BlogArticle.
        :type topic: str
        """

        self._topic = topic
