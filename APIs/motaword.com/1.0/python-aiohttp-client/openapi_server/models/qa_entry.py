# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_model import SimpleModel
from openapi_server import util


class QaEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, comment: str=None, doc_id: str=None, editor_link: str=None, end: int=None, in_source: bool=None, is_current: bool=None, module: str=None, project_id: SimpleModel=None, severity: str=None, source: str=None, source_language: SimpleModel=None, start: int=None, state: str=None, target_language: SimpleModel=None, translation: str=None, unique_key: str=None, vendor: SimpleModel=None):
        """QaEntry - a model defined in OpenAPI

        :param category: The category of this QaEntry.
        :param comment: The comment of this QaEntry.
        :param doc_id: The doc_id of this QaEntry.
        :param editor_link: The editor_link of this QaEntry.
        :param end: The end of this QaEntry.
        :param in_source: The in_source of this QaEntry.
        :param is_current: The is_current of this QaEntry.
        :param module: The module of this QaEntry.
        :param project_id: The project_id of this QaEntry.
        :param severity: The severity of this QaEntry.
        :param source: The source of this QaEntry.
        :param source_language: The source_language of this QaEntry.
        :param start: The start of this QaEntry.
        :param state: The state of this QaEntry.
        :param target_language: The target_language of this QaEntry.
        :param translation: The translation of this QaEntry.
        :param unique_key: The unique_key of this QaEntry.
        :param vendor: The vendor of this QaEntry.
        """
        self.openapi_types = {
            'category': str,
            'comment': str,
            'doc_id': str,
            'editor_link': str,
            'end': int,
            'in_source': bool,
            'is_current': bool,
            'module': str,
            'project_id': SimpleModel,
            'severity': str,
            'source': str,
            'source_language': SimpleModel,
            'start': int,
            'state': str,
            'target_language': SimpleModel,
            'translation': str,
            'unique_key': str,
            'vendor': SimpleModel
        }

        self.attribute_map = {
            'category': 'category',
            'comment': 'comment',
            'doc_id': 'docId',
            'editor_link': 'editorLink',
            'end': 'end',
            'in_source': 'inSource',
            'is_current': 'isCurrent',
            'module': 'module',
            'project_id': 'projectId',
            'severity': 'severity',
            'source': 'source',
            'source_language': 'sourceLanguage',
            'start': 'start',
            'state': 'state',
            'target_language': 'targetLanguage',
            'translation': 'translation',
            'unique_key': 'uniqueKey',
            'vendor': 'vendor'
        }

        self._category = category
        self._comment = comment
        self._doc_id = doc_id
        self._editor_link = editor_link
        self._end = end
        self._in_source = in_source
        self._is_current = is_current
        self._module = module
        self._project_id = project_id
        self._severity = severity
        self._source = source
        self._source_language = source_language
        self._start = start
        self._state = state
        self._target_language = target_language
        self._translation = translation
        self._unique_key = unique_key
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QaEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QaEntry of this QaEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this QaEntry.


        :return: The category of this QaEntry.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this QaEntry.


        :param category: The category of this QaEntry.
        :type category: str
        """

        self._category = category

    @property
    def comment(self):
        """Gets the comment of this QaEntry.


        :return: The comment of this QaEntry.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this QaEntry.


        :param comment: The comment of this QaEntry.
        :type comment: str
        """

        self._comment = comment

    @property
    def doc_id(self):
        """Gets the doc_id of this QaEntry.


        :return: The doc_id of this QaEntry.
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this QaEntry.


        :param doc_id: The doc_id of this QaEntry.
        :type doc_id: str
        """

        self._doc_id = doc_id

    @property
    def editor_link(self):
        """Gets the editor_link of this QaEntry.


        :return: The editor_link of this QaEntry.
        :rtype: str
        """
        return self._editor_link

    @editor_link.setter
    def editor_link(self, editor_link):
        """Sets the editor_link of this QaEntry.


        :param editor_link: The editor_link of this QaEntry.
        :type editor_link: str
        """

        self._editor_link = editor_link

    @property
    def end(self):
        """Gets the end of this QaEntry.


        :return: The end of this QaEntry.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this QaEntry.


        :param end: The end of this QaEntry.
        :type end: int
        """

        self._end = end

    @property
    def in_source(self):
        """Gets the in_source of this QaEntry.


        :return: The in_source of this QaEntry.
        :rtype: bool
        """
        return self._in_source

    @in_source.setter
    def in_source(self, in_source):
        """Sets the in_source of this QaEntry.


        :param in_source: The in_source of this QaEntry.
        :type in_source: bool
        """

        self._in_source = in_source

    @property
    def is_current(self):
        """Gets the is_current of this QaEntry.


        :return: The is_current of this QaEntry.
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this QaEntry.


        :param is_current: The is_current of this QaEntry.
        :type is_current: bool
        """

        self._is_current = is_current

    @property
    def module(self):
        """Gets the module of this QaEntry.


        :return: The module of this QaEntry.
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this QaEntry.


        :param module: The module of this QaEntry.
        :type module: str
        """

        self._module = module

    @property
    def project_id(self):
        """Gets the project_id of this QaEntry.


        :return: The project_id of this QaEntry.
        :rtype: SimpleModel
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this QaEntry.


        :param project_id: The project_id of this QaEntry.
        :type project_id: SimpleModel
        """

        self._project_id = project_id

    @property
    def severity(self):
        """Gets the severity of this QaEntry.


        :return: The severity of this QaEntry.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this QaEntry.


        :param severity: The severity of this QaEntry.
        :type severity: str
        """

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this QaEntry.


        :return: The source of this QaEntry.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this QaEntry.


        :param source: The source of this QaEntry.
        :type source: str
        """

        self._source = source

    @property
    def source_language(self):
        """Gets the source_language of this QaEntry.


        :return: The source_language of this QaEntry.
        :rtype: SimpleModel
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this QaEntry.


        :param source_language: The source_language of this QaEntry.
        :type source_language: SimpleModel
        """

        self._source_language = source_language

    @property
    def start(self):
        """Gets the start of this QaEntry.


        :return: The start of this QaEntry.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this QaEntry.


        :param start: The start of this QaEntry.
        :type start: int
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this QaEntry.


        :return: The state of this QaEntry.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QaEntry.


        :param state: The state of this QaEntry.
        :type state: str
        """

        self._state = state

    @property
    def target_language(self):
        """Gets the target_language of this QaEntry.


        :return: The target_language of this QaEntry.
        :rtype: SimpleModel
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this QaEntry.


        :param target_language: The target_language of this QaEntry.
        :type target_language: SimpleModel
        """

        self._target_language = target_language

    @property
    def translation(self):
        """Gets the translation of this QaEntry.


        :return: The translation of this QaEntry.
        :rtype: str
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this QaEntry.


        :param translation: The translation of this QaEntry.
        :type translation: str
        """

        self._translation = translation

    @property
    def unique_key(self):
        """Gets the unique_key of this QaEntry.


        :return: The unique_key of this QaEntry.
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """Sets the unique_key of this QaEntry.


        :param unique_key: The unique_key of this QaEntry.
        :type unique_key: str
        """

        self._unique_key = unique_key

    @property
    def vendor(self):
        """Gets the vendor of this QaEntry.


        :return: The vendor of this QaEntry.
        :rtype: SimpleModel
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this QaEntry.


        :param vendor: The vendor of this QaEntry.
        :type vendor: SimpleModel
        """

        self._vendor = vendor
