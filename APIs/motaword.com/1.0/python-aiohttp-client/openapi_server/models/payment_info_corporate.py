# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_address import BillingAddress
from openapi_server.models.credit_card import CreditCard
from openapi_server import util


class PaymentInfoCorporate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_api_invoicing: bool=None, allow_payment_code: bool=None, auto_charge: bool=None, billing: BillingAddress=None, card: CreditCard=None, contact_email_address: str=None, payment_code: str=None):
        """PaymentInfoCorporate - a model defined in OpenAPI

        :param allow_api_invoicing: The allow_api_invoicing of this PaymentInfoCorporate.
        :param allow_payment_code: The allow_payment_code of this PaymentInfoCorporate.
        :param auto_charge: The auto_charge of this PaymentInfoCorporate.
        :param billing: The billing of this PaymentInfoCorporate.
        :param card: The card of this PaymentInfoCorporate.
        :param contact_email_address: The contact_email_address of this PaymentInfoCorporate.
        :param payment_code: The payment_code of this PaymentInfoCorporate.
        """
        self.openapi_types = {
            'allow_api_invoicing': bool,
            'allow_payment_code': bool,
            'auto_charge': bool,
            'billing': BillingAddress,
            'card': CreditCard,
            'contact_email_address': str,
            'payment_code': str
        }

        self.attribute_map = {
            'allow_api_invoicing': 'allow_api_invoicing',
            'allow_payment_code': 'allow_payment_code',
            'auto_charge': 'auto_charge',
            'billing': 'billing',
            'card': 'card',
            'contact_email_address': 'contact_email_address',
            'payment_code': 'payment_code'
        }

        self._allow_api_invoicing = allow_api_invoicing
        self._allow_payment_code = allow_payment_code
        self._auto_charge = auto_charge
        self._billing = billing
        self._card = card
        self._contact_email_address = contact_email_address
        self._payment_code = payment_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInfoCorporate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInfo_corporate of this PaymentInfoCorporate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_api_invoicing(self):
        """Gets the allow_api_invoicing of this PaymentInfoCorporate.


        :return: The allow_api_invoicing of this PaymentInfoCorporate.
        :rtype: bool
        """
        return self._allow_api_invoicing

    @allow_api_invoicing.setter
    def allow_api_invoicing(self, allow_api_invoicing):
        """Sets the allow_api_invoicing of this PaymentInfoCorporate.


        :param allow_api_invoicing: The allow_api_invoicing of this PaymentInfoCorporate.
        :type allow_api_invoicing: bool
        """

        self._allow_api_invoicing = allow_api_invoicing

    @property
    def allow_payment_code(self):
        """Gets the allow_payment_code of this PaymentInfoCorporate.


        :return: The allow_payment_code of this PaymentInfoCorporate.
        :rtype: bool
        """
        return self._allow_payment_code

    @allow_payment_code.setter
    def allow_payment_code(self, allow_payment_code):
        """Sets the allow_payment_code of this PaymentInfoCorporate.


        :param allow_payment_code: The allow_payment_code of this PaymentInfoCorporate.
        :type allow_payment_code: bool
        """

        self._allow_payment_code = allow_payment_code

    @property
    def auto_charge(self):
        """Gets the auto_charge of this PaymentInfoCorporate.


        :return: The auto_charge of this PaymentInfoCorporate.
        :rtype: bool
        """
        return self._auto_charge

    @auto_charge.setter
    def auto_charge(self, auto_charge):
        """Sets the auto_charge of this PaymentInfoCorporate.


        :param auto_charge: The auto_charge of this PaymentInfoCorporate.
        :type auto_charge: bool
        """

        self._auto_charge = auto_charge

    @property
    def billing(self):
        """Gets the billing of this PaymentInfoCorporate.


        :return: The billing of this PaymentInfoCorporate.
        :rtype: BillingAddress
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this PaymentInfoCorporate.


        :param billing: The billing of this PaymentInfoCorporate.
        :type billing: BillingAddress
        """

        self._billing = billing

    @property
    def card(self):
        """Gets the card of this PaymentInfoCorporate.


        :return: The card of this PaymentInfoCorporate.
        :rtype: CreditCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentInfoCorporate.


        :param card: The card of this PaymentInfoCorporate.
        :type card: CreditCard
        """

        self._card = card

    @property
    def contact_email_address(self):
        """Gets the contact_email_address of this PaymentInfoCorporate.


        :return: The contact_email_address of this PaymentInfoCorporate.
        :rtype: str
        """
        return self._contact_email_address

    @contact_email_address.setter
    def contact_email_address(self, contact_email_address):
        """Sets the contact_email_address of this PaymentInfoCorporate.


        :param contact_email_address: The contact_email_address of this PaymentInfoCorporate.
        :type contact_email_address: str
        """

        self._contact_email_address = contact_email_address

    @property
    def payment_code(self):
        """Gets the payment_code of this PaymentInfoCorporate.


        :return: The payment_code of this PaymentInfoCorporate.
        :rtype: str
        """
        return self._payment_code

    @payment_code.setter
    def payment_code(self, payment_code):
        """Sets the payment_code of this PaymentInfoCorporate.


        :param payment_code: The payment_code of this PaymentInfoCorporate.
        :type payment_code: str
        """

        self._payment_code = payment_code
