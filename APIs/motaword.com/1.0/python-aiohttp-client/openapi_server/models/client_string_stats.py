# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_string_stat import LanguageStringStat
from openapi_server import util


class ClientStringStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_counts: List[LanguageStringStat]=None, total_project_strings_count: int=None, total_tm_strings_count: int=None):
        """ClientStringStats - a model defined in OpenAPI

        :param language_counts: The language_counts of this ClientStringStats.
        :param total_project_strings_count: The total_project_strings_count of this ClientStringStats.
        :param total_tm_strings_count: The total_tm_strings_count of this ClientStringStats.
        """
        self.openapi_types = {
            'language_counts': List[LanguageStringStat],
            'total_project_strings_count': int,
            'total_tm_strings_count': int
        }

        self.attribute_map = {
            'language_counts': 'language_counts',
            'total_project_strings_count': 'total_project_strings_count',
            'total_tm_strings_count': 'total_tm_strings_count'
        }

        self._language_counts = language_counts
        self._total_project_strings_count = total_project_strings_count
        self._total_tm_strings_count = total_tm_strings_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientStringStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientStringStats of this ClientStringStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_counts(self):
        """Gets the language_counts of this ClientStringStats.


        :return: The language_counts of this ClientStringStats.
        :rtype: List[LanguageStringStat]
        """
        return self._language_counts

    @language_counts.setter
    def language_counts(self, language_counts):
        """Sets the language_counts of this ClientStringStats.


        :param language_counts: The language_counts of this ClientStringStats.
        :type language_counts: List[LanguageStringStat]
        """

        self._language_counts = language_counts

    @property
    def total_project_strings_count(self):
        """Gets the total_project_strings_count of this ClientStringStats.


        :return: The total_project_strings_count of this ClientStringStats.
        :rtype: int
        """
        return self._total_project_strings_count

    @total_project_strings_count.setter
    def total_project_strings_count(self, total_project_strings_count):
        """Sets the total_project_strings_count of this ClientStringStats.


        :param total_project_strings_count: The total_project_strings_count of this ClientStringStats.
        :type total_project_strings_count: int
        """

        self._total_project_strings_count = total_project_strings_count

    @property
    def total_tm_strings_count(self):
        """Gets the total_tm_strings_count of this ClientStringStats.


        :return: The total_tm_strings_count of this ClientStringStats.
        :rtype: int
        """
        return self._total_tm_strings_count

    @total_tm_strings_count.setter
    def total_tm_strings_count(self, total_tm_strings_count):
        """Sets the total_tm_strings_count of this ClientStringStats.


        :param total_tm_strings_count: The total_tm_strings_count of this ClientStringStats.
        :type total_tm_strings_count: int
        """

        self._total_tm_strings_count = total_tm_strings_count
