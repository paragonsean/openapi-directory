# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.string_translation_state import StringTranslationState
from openapi_server import util


class StringInSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: int=None, internal_project_id: int=None, last_updated: datetime=None, project_id: int=None, search_score: float=None, source: str=None, status: StringTranslationState=None, string_id: int=None, target: str=None, targets: List[str]=None, tm_name: str=None, type: str=None):
        """StringInSearch - a model defined in OpenAPI

        :param file_id: The file_id of this StringInSearch.
        :param internal_project_id: The internal_project_id of this StringInSearch.
        :param last_updated: The last_updated of this StringInSearch.
        :param project_id: The project_id of this StringInSearch.
        :param search_score: The search_score of this StringInSearch.
        :param source: The source of this StringInSearch.
        :param status: The status of this StringInSearch.
        :param string_id: The string_id of this StringInSearch.
        :param target: The target of this StringInSearch.
        :param targets: The targets of this StringInSearch.
        :param tm_name: The tm_name of this StringInSearch.
        :param type: The type of this StringInSearch.
        """
        self.openapi_types = {
            'file_id': int,
            'internal_project_id': int,
            'last_updated': datetime,
            'project_id': int,
            'search_score': float,
            'source': str,
            'status': StringTranslationState,
            'string_id': int,
            'target': str,
            'targets': List[str],
            'tm_name': str,
            'type': str
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'internal_project_id': 'internal_project_id',
            'last_updated': 'last_updated',
            'project_id': 'project_id',
            'search_score': 'search_score',
            'source': 'source',
            'status': 'status',
            'string_id': 'string_id',
            'target': 'target',
            'targets': 'targets',
            'tm_name': 'tm_name',
            'type': 'type'
        }

        self._file_id = file_id
        self._internal_project_id = internal_project_id
        self._last_updated = last_updated
        self._project_id = project_id
        self._search_score = search_score
        self._source = source
        self._status = status
        self._string_id = string_id
        self._target = target
        self._targets = targets
        self._tm_name = tm_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StringInSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StringInSearch of this StringInSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this StringInSearch.


        :return: The file_id of this StringInSearch.
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this StringInSearch.


        :param file_id: The file_id of this StringInSearch.
        :type file_id: int
        """

        self._file_id = file_id

    @property
    def internal_project_id(self):
        """Gets the internal_project_id of this StringInSearch.


        :return: The internal_project_id of this StringInSearch.
        :rtype: int
        """
        return self._internal_project_id

    @internal_project_id.setter
    def internal_project_id(self, internal_project_id):
        """Sets the internal_project_id of this StringInSearch.


        :param internal_project_id: The internal_project_id of this StringInSearch.
        :type internal_project_id: int
        """

        self._internal_project_id = internal_project_id

    @property
    def last_updated(self):
        """Gets the last_updated of this StringInSearch.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The last_updated of this StringInSearch.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this StringInSearch.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param last_updated: The last_updated of this StringInSearch.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def project_id(self):
        """Gets the project_id of this StringInSearch.


        :return: The project_id of this StringInSearch.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this StringInSearch.


        :param project_id: The project_id of this StringInSearch.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def search_score(self):
        """Gets the search_score of this StringInSearch.


        :return: The search_score of this StringInSearch.
        :rtype: float
        """
        return self._search_score

    @search_score.setter
    def search_score(self, search_score):
        """Sets the search_score of this StringInSearch.


        :param search_score: The search_score of this StringInSearch.
        :type search_score: float
        """

        self._search_score = search_score

    @property
    def source(self):
        """Gets the source of this StringInSearch.


        :return: The source of this StringInSearch.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StringInSearch.


        :param source: The source of this StringInSearch.
        :type source: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this StringInSearch.


        :return: The status of this StringInSearch.
        :rtype: StringTranslationState
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StringInSearch.


        :param status: The status of this StringInSearch.
        :type status: StringTranslationState
        """

        self._status = status

    @property
    def string_id(self):
        """Gets the string_id of this StringInSearch.


        :return: The string_id of this StringInSearch.
        :rtype: int
        """
        return self._string_id

    @string_id.setter
    def string_id(self, string_id):
        """Sets the string_id of this StringInSearch.


        :param string_id: The string_id of this StringInSearch.
        :type string_id: int
        """

        self._string_id = string_id

    @property
    def target(self):
        """Gets the target of this StringInSearch.


        :return: The target of this StringInSearch.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this StringInSearch.


        :param target: The target of this StringInSearch.
        :type target: str
        """

        self._target = target

    @property
    def targets(self):
        """Gets the targets of this StringInSearch.


        :return: The targets of this StringInSearch.
        :rtype: List[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this StringInSearch.


        :param targets: The targets of this StringInSearch.
        :type targets: List[str]
        """

        self._targets = targets

    @property
    def tm_name(self):
        """Gets the tm_name of this StringInSearch.


        :return: The tm_name of this StringInSearch.
        :rtype: str
        """
        return self._tm_name

    @tm_name.setter
    def tm_name(self, tm_name):
        """Sets the tm_name of this StringInSearch.


        :param tm_name: The tm_name of this StringInSearch.
        :type tm_name: str
        """

        self._tm_name = tm_name

    @property
    def type(self):
        """Gets the type of this StringInSearch.

        String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.

        :return: The type of this StringInSearch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StringInSearch.

        String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.

        :param type: The type of this StringInSearch.
        :type type: str
        """
        allowed_values = ["LOCAL_PROJECT", "IMPORTED_TM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
