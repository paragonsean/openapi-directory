# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_pair import LanguagePair
from openapi_server.models.profile_survey import ProfileSurvey
from openapi_server import util


class UserVendor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_work_manual_files: bool=None, email_open_rate: float=None, is_frozen: bool=None, is_proofreader: bool=None, language_pairs: List[LanguagePair]=None, native_language: str=None, pam_tqs: float=None, paypal_email: str=None, profile_survey: ProfileSurvey=None, require_1099: bool=None, tags: List[str]=None, tms_user_name: str=None, vendor_type: str=None):
        """UserVendor - a model defined in OpenAPI

        :param can_work_manual_files: The can_work_manual_files of this UserVendor.
        :param email_open_rate: The email_open_rate of this UserVendor.
        :param is_frozen: The is_frozen of this UserVendor.
        :param is_proofreader: The is_proofreader of this UserVendor.
        :param language_pairs: The language_pairs of this UserVendor.
        :param native_language: The native_language of this UserVendor.
        :param pam_tqs: The pam_tqs of this UserVendor.
        :param paypal_email: The paypal_email of this UserVendor.
        :param profile_survey: The profile_survey of this UserVendor.
        :param require_1099: The require_1099 of this UserVendor.
        :param tags: The tags of this UserVendor.
        :param tms_user_name: The tms_user_name of this UserVendor.
        :param vendor_type: The vendor_type of this UserVendor.
        """
        self.openapi_types = {
            'can_work_manual_files': bool,
            'email_open_rate': float,
            'is_frozen': bool,
            'is_proofreader': bool,
            'language_pairs': List[LanguagePair],
            'native_language': str,
            'pam_tqs': float,
            'paypal_email': str,
            'profile_survey': ProfileSurvey,
            'require_1099': bool,
            'tags': List[str],
            'tms_user_name': str,
            'vendor_type': str
        }

        self.attribute_map = {
            'can_work_manual_files': 'can_work_manual_files',
            'email_open_rate': 'email_open_rate',
            'is_frozen': 'is_frozen',
            'is_proofreader': 'is_proofreader',
            'language_pairs': 'language_pairs',
            'native_language': 'native_language',
            'pam_tqs': 'pam_tqs',
            'paypal_email': 'paypal_email',
            'profile_survey': 'profile_survey',
            'require_1099': 'require_1099',
            'tags': 'tags',
            'tms_user_name': 'tms_user_name',
            'vendor_type': 'vendor_type'
        }

        self._can_work_manual_files = can_work_manual_files
        self._email_open_rate = email_open_rate
        self._is_frozen = is_frozen
        self._is_proofreader = is_proofreader
        self._language_pairs = language_pairs
        self._native_language = native_language
        self._pam_tqs = pam_tqs
        self._paypal_email = paypal_email
        self._profile_survey = profile_survey
        self._require_1099 = require_1099
        self._tags = tags
        self._tms_user_name = tms_user_name
        self._vendor_type = vendor_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserVendor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_vendor of this UserVendor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_work_manual_files(self):
        """Gets the can_work_manual_files of this UserVendor.


        :return: The can_work_manual_files of this UserVendor.
        :rtype: bool
        """
        return self._can_work_manual_files

    @can_work_manual_files.setter
    def can_work_manual_files(self, can_work_manual_files):
        """Sets the can_work_manual_files of this UserVendor.


        :param can_work_manual_files: The can_work_manual_files of this UserVendor.
        :type can_work_manual_files: bool
        """

        self._can_work_manual_files = can_work_manual_files

    @property
    def email_open_rate(self):
        """Gets the email_open_rate of this UserVendor.


        :return: The email_open_rate of this UserVendor.
        :rtype: float
        """
        return self._email_open_rate

    @email_open_rate.setter
    def email_open_rate(self, email_open_rate):
        """Sets the email_open_rate of this UserVendor.


        :param email_open_rate: The email_open_rate of this UserVendor.
        :type email_open_rate: float
        """

        self._email_open_rate = email_open_rate

    @property
    def is_frozen(self):
        """Gets the is_frozen of this UserVendor.


        :return: The is_frozen of this UserVendor.
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen):
        """Sets the is_frozen of this UserVendor.


        :param is_frozen: The is_frozen of this UserVendor.
        :type is_frozen: bool
        """

        self._is_frozen = is_frozen

    @property
    def is_proofreader(self):
        """Gets the is_proofreader of this UserVendor.


        :return: The is_proofreader of this UserVendor.
        :rtype: bool
        """
        return self._is_proofreader

    @is_proofreader.setter
    def is_proofreader(self, is_proofreader):
        """Sets the is_proofreader of this UserVendor.


        :param is_proofreader: The is_proofreader of this UserVendor.
        :type is_proofreader: bool
        """

        self._is_proofreader = is_proofreader

    @property
    def language_pairs(self):
        """Gets the language_pairs of this UserVendor.


        :return: The language_pairs of this UserVendor.
        :rtype: List[LanguagePair]
        """
        return self._language_pairs

    @language_pairs.setter
    def language_pairs(self, language_pairs):
        """Sets the language_pairs of this UserVendor.


        :param language_pairs: The language_pairs of this UserVendor.
        :type language_pairs: List[LanguagePair]
        """

        self._language_pairs = language_pairs

    @property
    def native_language(self):
        """Gets the native_language of this UserVendor.

        Native language of user

        :return: The native_language of this UserVendor.
        :rtype: str
        """
        return self._native_language

    @native_language.setter
    def native_language(self, native_language):
        """Sets the native_language of this UserVendor.

        Native language of user

        :param native_language: The native_language of this UserVendor.
        :type native_language: str
        """

        self._native_language = native_language

    @property
    def pam_tqs(self):
        """Gets the pam_tqs of this UserVendor.


        :return: The pam_tqs of this UserVendor.
        :rtype: float
        """
        return self._pam_tqs

    @pam_tqs.setter
    def pam_tqs(self, pam_tqs):
        """Sets the pam_tqs of this UserVendor.


        :param pam_tqs: The pam_tqs of this UserVendor.
        :type pam_tqs: float
        """

        self._pam_tqs = pam_tqs

    @property
    def paypal_email(self):
        """Gets the paypal_email of this UserVendor.


        :return: The paypal_email of this UserVendor.
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this UserVendor.


        :param paypal_email: The paypal_email of this UserVendor.
        :type paypal_email: str
        """

        self._paypal_email = paypal_email

    @property
    def profile_survey(self):
        """Gets the profile_survey of this UserVendor.


        :return: The profile_survey of this UserVendor.
        :rtype: ProfileSurvey
        """
        return self._profile_survey

    @profile_survey.setter
    def profile_survey(self, profile_survey):
        """Sets the profile_survey of this UserVendor.


        :param profile_survey: The profile_survey of this UserVendor.
        :type profile_survey: ProfileSurvey
        """

        self._profile_survey = profile_survey

    @property
    def require_1099(self):
        """Gets the require_1099 of this UserVendor.


        :return: The require_1099 of this UserVendor.
        :rtype: bool
        """
        return self._require_1099

    @require_1099.setter
    def require_1099(self, require_1099):
        """Sets the require_1099 of this UserVendor.


        :param require_1099: The require_1099 of this UserVendor.
        :type require_1099: bool
        """

        self._require_1099 = require_1099

    @property
    def tags(self):
        """Gets the tags of this UserVendor.


        :return: The tags of this UserVendor.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UserVendor.


        :param tags: The tags of this UserVendor.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tms_user_name(self):
        """Gets the tms_user_name of this UserVendor.


        :return: The tms_user_name of this UserVendor.
        :rtype: str
        """
        return self._tms_user_name

    @tms_user_name.setter
    def tms_user_name(self, tms_user_name):
        """Sets the tms_user_name of this UserVendor.


        :param tms_user_name: The tms_user_name of this UserVendor.
        :type tms_user_name: str
        """

        self._tms_user_name = tms_user_name

    @property
    def vendor_type(self):
        """Gets the vendor_type of this UserVendor.


        :return: The vendor_type of this UserVendor.
        :rtype: str
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this UserVendor.


        :param vendor_type: The vendor_type of this UserVendor.
        :type vendor_type: str
        """

        self._vendor_type = vendor_type
