# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_source_document import LinkedSourceDocument
from openapi_server import util


class DocumentUpdates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[file]=None, schemes: str=None, source_links: List[LinkedSourceDocument]=None):
        """DocumentUpdates - a model defined in OpenAPI

        :param documents: The documents of this DocumentUpdates.
        :param schemes: The schemes of this DocumentUpdates.
        :param source_links: The source_links of this DocumentUpdates.
        """
        self.openapi_types = {
            'documents': List[file],
            'schemes': str,
            'source_links': List[LinkedSourceDocument]
        }

        self.attribute_map = {
            'documents': 'documents[]',
            'schemes': 'schemes[]',
            'source_links': 'source-links[]'
        }

        self._documents = documents
        self._schemes = schemes
        self._source_links = source_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentUpdates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentUpdates of this DocumentUpdates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this DocumentUpdates.

        You can add as many files as you want in documents[] parameter.

        :return: The documents of this DocumentUpdates.
        :rtype: List[file]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DocumentUpdates.

        You can add as many files as you want in documents[] parameter.

        :param documents: The documents of this DocumentUpdates.
        :type documents: List[file]
        """

        self._documents = documents

    @property
    def schemes(self):
        """Gets the schemes of this DocumentUpdates.

        JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.

        :return: The schemes of this DocumentUpdates.
        :rtype: str
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this DocumentUpdates.

        JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.

        :param schemes: The schemes of this DocumentUpdates.
        :type schemes: str
        """

        self._schemes = schemes

    @property
    def source_links(self):
        """Gets the source_links of this DocumentUpdates.

        When provided, we will download the files from these URLs, in addition to files provded in `documents` parameter and then save as source documents

        :return: The source_links of this DocumentUpdates.
        :rtype: List[LinkedSourceDocument]
        """
        return self._source_links

    @source_links.setter
    def source_links(self, source_links):
        """Sets the source_links of this DocumentUpdates.

        When provided, we will download the files from these URLs, in addition to files provded in `documents` parameter and then save as source documents

        :param source_links: The source_links of this DocumentUpdates.
        :type source_links: List[LinkedSourceDocument]
        """

        self._source_links = source_links
