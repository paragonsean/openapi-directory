# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_pairs_report_report_inner_language_pair import LanguagePairsReportReportInnerLanguagePair
from openapi_server import util


class LanguagePairsReportReportInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_pair: LanguagePairsReportReportInnerLanguagePair=None, spending: float=None, word_count: int=None):
        """LanguagePairsReportReportInner - a model defined in OpenAPI

        :param language_pair: The language_pair of this LanguagePairsReportReportInner.
        :param spending: The spending of this LanguagePairsReportReportInner.
        :param word_count: The word_count of this LanguagePairsReportReportInner.
        """
        self.openapi_types = {
            'language_pair': LanguagePairsReportReportInnerLanguagePair,
            'spending': float,
            'word_count': int
        }

        self.attribute_map = {
            'language_pair': 'language_pair',
            'spending': 'spending',
            'word_count': 'word_count'
        }

        self._language_pair = language_pair
        self._spending = spending
        self._word_count = word_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguagePairsReportReportInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguagePairsReport_report_inner of this LanguagePairsReportReportInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_pair(self):
        """Gets the language_pair of this LanguagePairsReportReportInner.


        :return: The language_pair of this LanguagePairsReportReportInner.
        :rtype: LanguagePairsReportReportInnerLanguagePair
        """
        return self._language_pair

    @language_pair.setter
    def language_pair(self, language_pair):
        """Sets the language_pair of this LanguagePairsReportReportInner.


        :param language_pair: The language_pair of this LanguagePairsReportReportInner.
        :type language_pair: LanguagePairsReportReportInnerLanguagePair
        """

        self._language_pair = language_pair

    @property
    def spending(self):
        """Gets the spending of this LanguagePairsReportReportInner.


        :return: The spending of this LanguagePairsReportReportInner.
        :rtype: float
        """
        return self._spending

    @spending.setter
    def spending(self, spending):
        """Sets the spending of this LanguagePairsReportReportInner.


        :param spending: The spending of this LanguagePairsReportReportInner.
        :type spending: float
        """

        self._spending = spending

    @property
    def word_count(self):
        """Gets the word_count of this LanguagePairsReportReportInner.


        :return: The word_count of this LanguagePairsReportReportInner.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this LanguagePairsReportReportInner.


        :param word_count: The word_count of this LanguagePairsReportReportInner.
        :type word_count: int
        """

        self._word_count = word_count
