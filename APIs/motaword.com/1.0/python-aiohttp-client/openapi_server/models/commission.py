# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary import Monetary
from openapi_server.models.project import Project
from openapi_server import util


class Commission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Monetary=None, _date: datetime=None, project: Project=None, status: str=None):
        """Commission - a model defined in OpenAPI

        :param amount: The amount of this Commission.
        :param _date: The _date of this Commission.
        :param project: The project of this Commission.
        :param status: The status of this Commission.
        """
        self.openapi_types = {
            'amount': Monetary,
            '_date': datetime,
            'project': Project,
            'status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            '_date': 'date',
            'project': 'project',
            'status': 'status'
        }

        self._amount = amount
        self.__date = _date
        self._project = project
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Commission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Commission of this Commission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Commission.


        :return: The amount of this Commission.
        :rtype: Monetary
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Commission.


        :param amount: The amount of this Commission.
        :type amount: Monetary
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this Commission.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :return: The _date of this Commission.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Commission.

        the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z

        :param _date: The _date of this Commission.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def project(self):
        """Gets the project of this Commission.


        :return: The project of this Commission.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Commission.


        :param project: The project of this Commission.
        :type project: Project
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this Commission.


        :return: The status of this Commission.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Commission.


        :param status: The status of this Commission.
        :type status: str
        """
        allowed_values = ["completed", "unclaimed", "failed", "sent", "waiting", "waiting_invoice"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
