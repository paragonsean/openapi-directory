# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlossaryUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, glossaries: file=None):
        """GlossaryUploadRequest - a model defined in OpenAPI

        :param glossaries: The glossaries of this GlossaryUploadRequest.
        """
        self.openapi_types = {
            'glossaries': file
        }

        self.attribute_map = {
            'glossaries': 'glossaries'
        }

        self._glossaries = glossaries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlossaryUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlossaryUploadRequest of this GlossaryUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def glossaries(self):
        """Gets the glossaries of this GlossaryUploadRequest.

        You can only add one glossary, even though the name suggests multiple glossaries. This may be updated in the future to support multiple glossaries.

        :return: The glossaries of this GlossaryUploadRequest.
        :rtype: file
        """
        return self._glossaries

    @glossaries.setter
    def glossaries(self, glossaries):
        """Sets the glossaries of this GlossaryUploadRequest.

        You can only add one glossary, even though the name suggests multiple glossaries. This may be updated in the future to support multiple glossaries.

        :param glossaries: The glossaries of this GlossaryUploadRequest.
        :type glossaries: file
        """
        if glossaries is None:
            raise ValueError("Invalid value for `glossaries`, must not be `None`")

        self._glossaries = glossaries
