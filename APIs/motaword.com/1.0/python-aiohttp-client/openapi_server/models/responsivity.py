# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Responsivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invited: int=None, month: str=None, not_entered: int=None, only_entered: int=None, score: float=None, week: str=None, worked: int=None):
        """Responsivity - a model defined in OpenAPI

        :param invited: The invited of this Responsivity.
        :param month: The month of this Responsivity.
        :param not_entered: The not_entered of this Responsivity.
        :param only_entered: The only_entered of this Responsivity.
        :param score: The score of this Responsivity.
        :param week: The week of this Responsivity.
        :param worked: The worked of this Responsivity.
        """
        self.openapi_types = {
            'invited': int,
            'month': str,
            'not_entered': int,
            'only_entered': int,
            'score': float,
            'week': str,
            'worked': int
        }

        self.attribute_map = {
            'invited': 'invited',
            'month': 'month',
            'not_entered': 'notEntered',
            'only_entered': 'onlyEntered',
            'score': 'score',
            'week': 'week',
            'worked': 'worked'
        }

        self._invited = invited
        self._month = month
        self._not_entered = not_entered
        self._only_entered = only_entered
        self._score = score
        self._week = week
        self._worked = worked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Responsivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Responsivity of this Responsivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invited(self):
        """Gets the invited of this Responsivity.


        :return: The invited of this Responsivity.
        :rtype: int
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this Responsivity.


        :param invited: The invited of this Responsivity.
        :type invited: int
        """

        self._invited = invited

    @property
    def month(self):
        """Gets the month of this Responsivity.


        :return: The month of this Responsivity.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Responsivity.


        :param month: The month of this Responsivity.
        :type month: str
        """

        self._month = month

    @property
    def not_entered(self):
        """Gets the not_entered of this Responsivity.


        :return: The not_entered of this Responsivity.
        :rtype: int
        """
        return self._not_entered

    @not_entered.setter
    def not_entered(self, not_entered):
        """Sets the not_entered of this Responsivity.


        :param not_entered: The not_entered of this Responsivity.
        :type not_entered: int
        """

        self._not_entered = not_entered

    @property
    def only_entered(self):
        """Gets the only_entered of this Responsivity.


        :return: The only_entered of this Responsivity.
        :rtype: int
        """
        return self._only_entered

    @only_entered.setter
    def only_entered(self, only_entered):
        """Sets the only_entered of this Responsivity.


        :param only_entered: The only_entered of this Responsivity.
        :type only_entered: int
        """

        self._only_entered = only_entered

    @property
    def score(self):
        """Gets the score of this Responsivity.


        :return: The score of this Responsivity.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Responsivity.


        :param score: The score of this Responsivity.
        :type score: float
        """

        self._score = score

    @property
    def week(self):
        """Gets the week of this Responsivity.


        :return: The week of this Responsivity.
        :rtype: str
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this Responsivity.


        :param week: The week of this Responsivity.
        :type week: str
        """

        self._week = week

    @property
    def worked(self):
        """Gets the worked of this Responsivity.


        :return: The worked of this Responsivity.
        :rtype: int
        """
        return self._worked

    @worked.setter
    def worked(self, worked):
        """Sets the worked of this Responsivity.


        :param worked: The worked of this Responsivity.
        :type worked: int
        """

        self._worked = worked
