# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_update_content_all_of_notifications import UserUpdateContentAllOfNotifications
from openapi_server import util


class UserUpdateContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, phone: str=None, state: str=None, street: str=None, zip: str=None, birthday: date=None, email: str=None, first_name: str=None, id: int=None, last_name: str=None, notifications: UserUpdateContentAllOfNotifications=None, notify: bool=None, paypal_email: str=None, require_1099: bool=None, user_groups: List[int]=None):
        """UserUpdateContent - a model defined in OpenAPI

        :param city: The city of this UserUpdateContent.
        :param country: The country of this UserUpdateContent.
        :param phone: The phone of this UserUpdateContent.
        :param state: The state of this UserUpdateContent.
        :param street: The street of this UserUpdateContent.
        :param zip: The zip of this UserUpdateContent.
        :param birthday: The birthday of this UserUpdateContent.
        :param email: The email of this UserUpdateContent.
        :param first_name: The first_name of this UserUpdateContent.
        :param id: The id of this UserUpdateContent.
        :param last_name: The last_name of this UserUpdateContent.
        :param notifications: The notifications of this UserUpdateContent.
        :param notify: The notify of this UserUpdateContent.
        :param paypal_email: The paypal_email of this UserUpdateContent.
        :param require_1099: The require_1099 of this UserUpdateContent.
        :param user_groups: The user_groups of this UserUpdateContent.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'phone': str,
            'state': str,
            'street': str,
            'zip': str,
            'birthday': date,
            'email': str,
            'first_name': str,
            'id': int,
            'last_name': str,
            'notifications': UserUpdateContentAllOfNotifications,
            'notify': bool,
            'paypal_email': str,
            'require_1099': bool,
            'user_groups': List[int]
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'phone': 'phone',
            'state': 'state',
            'street': 'street',
            'zip': 'zip',
            'birthday': 'birthday',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'notifications': 'notifications',
            'notify': 'notify',
            'paypal_email': 'paypal_email',
            'require_1099': 'require_1099',
            'user_groups': 'user_groups'
        }

        self._city = city
        self._country = country
        self._phone = phone
        self._state = state
        self._street = street
        self._zip = zip
        self._birthday = birthday
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._notifications = notifications
        self._notify = notify
        self._paypal_email = paypal_email
        self._require_1099 = require_1099
        self._user_groups = user_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUpdateContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserUpdateContent of this UserUpdateContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this UserUpdateContent.


        :return: The city of this UserUpdateContent.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserUpdateContent.


        :param city: The city of this UserUpdateContent.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this UserUpdateContent.


        :return: The country of this UserUpdateContent.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserUpdateContent.


        :param country: The country of this UserUpdateContent.
        :type country: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this UserUpdateContent.


        :return: The phone of this UserUpdateContent.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserUpdateContent.


        :param phone: The phone of this UserUpdateContent.
        :type phone: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this UserUpdateContent.


        :return: The state of this UserUpdateContent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserUpdateContent.


        :param state: The state of this UserUpdateContent.
        :type state: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this UserUpdateContent.


        :return: The street of this UserUpdateContent.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this UserUpdateContent.


        :param street: The street of this UserUpdateContent.
        :type street: str
        """

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this UserUpdateContent.


        :return: The zip of this UserUpdateContent.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this UserUpdateContent.


        :param zip: The zip of this UserUpdateContent.
        :type zip: str
        """

        self._zip = zip

    @property
    def birthday(self):
        """Gets the birthday of this UserUpdateContent.


        :return: The birthday of this UserUpdateContent.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this UserUpdateContent.


        :param birthday: The birthday of this UserUpdateContent.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def email(self):
        """Gets the email of this UserUpdateContent.

        Optional. User e-mail.

        :return: The email of this UserUpdateContent.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserUpdateContent.

        Optional. User e-mail.

        :param email: The email of this UserUpdateContent.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserUpdateContent.

        Optional. User first name.

        :return: The first_name of this UserUpdateContent.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserUpdateContent.

        Optional. User first name.

        :param first_name: The first_name of this UserUpdateContent.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserUpdateContent.

        Optional. ID of the user being updated.

        :return: The id of this UserUpdateContent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserUpdateContent.

        Optional. ID of the user being updated.

        :param id: The id of this UserUpdateContent.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserUpdateContent.

        Optional. User last name.

        :return: The last_name of this UserUpdateContent.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserUpdateContent.

        Optional. User last name.

        :param last_name: The last_name of this UserUpdateContent.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def notifications(self):
        """Gets the notifications of this UserUpdateContent.


        :return: The notifications of this UserUpdateContent.
        :rtype: UserUpdateContentAllOfNotifications
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this UserUpdateContent.


        :param notifications: The notifications of this UserUpdateContent.
        :type notifications: UserUpdateContentAllOfNotifications
        """

        self._notifications = notifications

    @property
    def notify(self):
        """Gets the notify of this UserUpdateContent.

        Notify new user account creation with login information and MotaWord introduction.

        :return: The notify of this UserUpdateContent.
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this UserUpdateContent.

        Notify new user account creation with login information and MotaWord introduction.

        :param notify: The notify of this UserUpdateContent.
        :type notify: bool
        """

        self._notify = notify

    @property
    def paypal_email(self):
        """Gets the paypal_email of this UserUpdateContent.

        Optional. Vendor paypal e-mail

        :return: The paypal_email of this UserUpdateContent.
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this UserUpdateContent.

        Optional. Vendor paypal e-mail

        :param paypal_email: The paypal_email of this UserUpdateContent.
        :type paypal_email: str
        """

        self._paypal_email = paypal_email

    @property
    def require_1099(self):
        """Gets the require_1099 of this UserUpdateContent.

        Optional. Whether this vendor requires 1099 form in US for their earnings.

        :return: The require_1099 of this UserUpdateContent.
        :rtype: bool
        """
        return self._require_1099

    @require_1099.setter
    def require_1099(self, require_1099):
        """Sets the require_1099 of this UserUpdateContent.

        Optional. Whether this vendor requires 1099 form in US for their earnings.

        :param require_1099: The require_1099 of this UserUpdateContent.
        :type require_1099: bool
        """

        self._require_1099 = require_1099

    @property
    def user_groups(self):
        """Gets the user_groups of this UserUpdateContent.

        A list of user group IDs

        :return: The user_groups of this UserUpdateContent.
        :rtype: List[int]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this UserUpdateContent.

        A list of user group IDs

        :param user_groups: The user_groups of this UserUpdateContent.
        :type user_groups: List[int]
        """

        self._user_groups = user_groups
