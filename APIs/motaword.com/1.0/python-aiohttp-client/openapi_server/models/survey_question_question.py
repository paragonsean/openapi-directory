# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SurveyQuestionQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, format: str=None, id: int=None, question: str=None, text: str=None):
        """SurveyQuestionQuestion - a model defined in OpenAPI

        :param enabled: The enabled of this SurveyQuestionQuestion.
        :param format: The format of this SurveyQuestionQuestion.
        :param id: The id of this SurveyQuestionQuestion.
        :param question: The question of this SurveyQuestionQuestion.
        :param text: The text of this SurveyQuestionQuestion.
        """
        self.openapi_types = {
            'enabled': bool,
            'format': str,
            'id': int,
            'question': str,
            'text': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'format': 'format',
            'id': 'id',
            'question': 'question',
            'text': 'text'
        }

        self._enabled = enabled
        self._format = format
        self._id = id
        self._question = question
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SurveyQuestionQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SurveyQuestion_question of this SurveyQuestionQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this SurveyQuestionQuestion.


        :return: The enabled of this SurveyQuestionQuestion.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SurveyQuestionQuestion.


        :param enabled: The enabled of this SurveyQuestionQuestion.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def format(self):
        """Gets the format of this SurveyQuestionQuestion.


        :return: The format of this SurveyQuestionQuestion.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SurveyQuestionQuestion.


        :param format: The format of this SurveyQuestionQuestion.
        :type format: str
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this SurveyQuestionQuestion.


        :return: The id of this SurveyQuestionQuestion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SurveyQuestionQuestion.


        :param id: The id of this SurveyQuestionQuestion.
        :type id: int
        """

        self._id = id

    @property
    def question(self):
        """Gets the question of this SurveyQuestionQuestion.


        :return: The question of this SurveyQuestionQuestion.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this SurveyQuestionQuestion.


        :param question: The question of this SurveyQuestionQuestion.
        :type question: str
        """

        self._question = question

    @property
    def text(self):
        """Gets the text of this SurveyQuestionQuestion.


        :return: The text of this SurveyQuestionQuestion.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SurveyQuestionQuestion.


        :param text: The text of this SurveyQuestionQuestion.
        :type text: str
        """

        self._text = text
