# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, base_amount: float=None, base_currency: str='usd', currency: str='usd', usd_amount: float=None):
        """ProjectPrice - a model defined in OpenAPI

        :param amount: The amount of this ProjectPrice.
        :param base_amount: The base_amount of this ProjectPrice.
        :param base_currency: The base_currency of this ProjectPrice.
        :param currency: The currency of this ProjectPrice.
        :param usd_amount: The usd_amount of this ProjectPrice.
        """
        self.openapi_types = {
            'amount': float,
            'base_amount': float,
            'base_currency': str,
            'currency': str,
            'usd_amount': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'base_amount': 'base_amount',
            'base_currency': 'base_currency',
            'currency': 'currency',
            'usd_amount': 'usd_amount'
        }

        self._amount = amount
        self._base_amount = base_amount
        self._base_currency = base_currency
        self._currency = currency
        self._usd_amount = usd_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project_price of this ProjectPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ProjectPrice.


        :return: The amount of this ProjectPrice.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ProjectPrice.


        :param amount: The amount of this ProjectPrice.
        :type amount: float
        """

        self._amount = amount

    @property
    def base_amount(self):
        """Gets the base_amount of this ProjectPrice.


        :return: The base_amount of this ProjectPrice.
        :rtype: float
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this ProjectPrice.


        :param base_amount: The base_amount of this ProjectPrice.
        :type base_amount: float
        """

        self._base_amount = base_amount

    @property
    def base_currency(self):
        """Gets the base_currency of this ProjectPrice.


        :return: The base_currency of this ProjectPrice.
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this ProjectPrice.


        :param base_currency: The base_currency of this ProjectPrice.
        :type base_currency: str
        """

        self._base_currency = base_currency

    @property
    def currency(self):
        """Gets the currency of this ProjectPrice.


        :return: The currency of this ProjectPrice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProjectPrice.


        :param currency: The currency of this ProjectPrice.
        :type currency: str
        """

        self._currency = currency

    @property
    def usd_amount(self):
        """Gets the usd_amount of this ProjectPrice.

        USD is our base pricing currency. If `currency` is different, this will help.

        :return: The usd_amount of this ProjectPrice.
        :rtype: float
        """
        return self._usd_amount

    @usd_amount.setter
    def usd_amount(self, usd_amount):
        """Sets the usd_amount of this ProjectPrice.

        USD is our base pricing currency. If `currency` is different, this will help.

        :param usd_amount: The usd_amount of this ProjectPrice.
        :type usd_amount: float
        """

        self._usd_amount = usd_amount
