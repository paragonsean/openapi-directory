# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContinuousProjectLanguageCache(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mt: Dict[str, str]=None, nonparsed: Dict[str, str]=None, tm: Dict[str, str]=None):
        """ContinuousProjectLanguageCache - a model defined in OpenAPI

        :param mt: The mt of this ContinuousProjectLanguageCache.
        :param nonparsed: The nonparsed of this ContinuousProjectLanguageCache.
        :param tm: The tm of this ContinuousProjectLanguageCache.
        """
        self.openapi_types = {
            'mt': Dict[str, str],
            'nonparsed': Dict[str, str],
            'tm': Dict[str, str]
        }

        self.attribute_map = {
            'mt': 'mt',
            'nonparsed': 'nonparsed',
            'tm': 'tm'
        }

        self._mt = mt
        self._nonparsed = nonparsed
        self._tm = tm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousProjectLanguageCache':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousProjectLanguageCache of this ContinuousProjectLanguageCache.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mt(self):
        """Gets the mt of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :return: The mt of this ContinuousProjectLanguageCache.
        :rtype: Dict[str, str]
        """
        return self._mt

    @mt.setter
    def mt(self, mt):
        """Sets the mt of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :param mt: The mt of this ContinuousProjectLanguageCache.
        :type mt: Dict[str, str]
        """

        self._mt = mt

    @property
    def nonparsed(self):
        """Gets the nonparsed of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :return: The nonparsed of this ContinuousProjectLanguageCache.
        :rtype: Dict[str, str]
        """
        return self._nonparsed

    @nonparsed.setter
    def nonparsed(self, nonparsed):
        """Sets the nonparsed of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :param nonparsed: The nonparsed of this ContinuousProjectLanguageCache.
        :type nonparsed: Dict[str, str]
        """

        self._nonparsed = nonparsed

    @property
    def tm(self):
        """Gets the tm of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :return: The tm of this ContinuousProjectLanguageCache.
        :rtype: Dict[str, str]
        """
        return self._tm

    @tm.setter
    def tm(self, tm):
        """Sets the tm of this ContinuousProjectLanguageCache.

        source > target map of strings for translations

        :param tm: The tm of this ContinuousProjectLanguageCache.
        :type tm: Dict[str, str]
        """

        self._tm = tm
