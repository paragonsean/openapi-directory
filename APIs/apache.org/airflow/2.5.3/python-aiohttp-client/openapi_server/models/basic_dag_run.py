# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dag_state import DagState
from openapi_server import util


class BasicDAGRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_id: str=None, data_interval_end: datetime=None, data_interval_start: datetime=None, end_date: datetime=None, logical_date: datetime=None, run_id: str=None, start_date: datetime=None, state: DagState=None):
        """BasicDAGRun - a model defined in OpenAPI

        :param dag_id: The dag_id of this BasicDAGRun.
        :param data_interval_end: The data_interval_end of this BasicDAGRun.
        :param data_interval_start: The data_interval_start of this BasicDAGRun.
        :param end_date: The end_date of this BasicDAGRun.
        :param logical_date: The logical_date of this BasicDAGRun.
        :param run_id: The run_id of this BasicDAGRun.
        :param start_date: The start_date of this BasicDAGRun.
        :param state: The state of this BasicDAGRun.
        """
        self.openapi_types = {
            'dag_id': str,
            'data_interval_end': datetime,
            'data_interval_start': datetime,
            'end_date': datetime,
            'logical_date': datetime,
            'run_id': str,
            'start_date': datetime,
            'state': DagState
        }

        self.attribute_map = {
            'dag_id': 'dag_id',
            'data_interval_end': 'data_interval_end',
            'data_interval_start': 'data_interval_start',
            'end_date': 'end_date',
            'logical_date': 'logical_date',
            'run_id': 'run_id',
            'start_date': 'start_date',
            'state': 'state'
        }

        self._dag_id = dag_id
        self._data_interval_end = data_interval_end
        self._data_interval_start = data_interval_start
        self._end_date = end_date
        self._logical_date = logical_date
        self._run_id = run_id
        self._start_date = start_date
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicDAGRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicDAGRun of this BasicDAGRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_id(self):
        """Gets the dag_id of this BasicDAGRun.


        :return: The dag_id of this BasicDAGRun.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this BasicDAGRun.


        :param dag_id: The dag_id of this BasicDAGRun.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def data_interval_end(self):
        """Gets the data_interval_end of this BasicDAGRun.


        :return: The data_interval_end of this BasicDAGRun.
        :rtype: datetime
        """
        return self._data_interval_end

    @data_interval_end.setter
    def data_interval_end(self, data_interval_end):
        """Sets the data_interval_end of this BasicDAGRun.


        :param data_interval_end: The data_interval_end of this BasicDAGRun.
        :type data_interval_end: datetime
        """

        self._data_interval_end = data_interval_end

    @property
    def data_interval_start(self):
        """Gets the data_interval_start of this BasicDAGRun.


        :return: The data_interval_start of this BasicDAGRun.
        :rtype: datetime
        """
        return self._data_interval_start

    @data_interval_start.setter
    def data_interval_start(self, data_interval_start):
        """Sets the data_interval_start of this BasicDAGRun.


        :param data_interval_start: The data_interval_start of this BasicDAGRun.
        :type data_interval_start: datetime
        """

        self._data_interval_start = data_interval_start

    @property
    def end_date(self):
        """Gets the end_date of this BasicDAGRun.


        :return: The end_date of this BasicDAGRun.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BasicDAGRun.


        :param end_date: The end_date of this BasicDAGRun.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def logical_date(self):
        """Gets the logical_date of this BasicDAGRun.

        The logical date (previously called execution date). This is the time or interval covered by this DAG run, according to the DAG definition.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  This together with DAG_ID are a unique key.  *New in version 2.2.0* 

        :return: The logical_date of this BasicDAGRun.
        :rtype: datetime
        """
        return self._logical_date

    @logical_date.setter
    def logical_date(self, logical_date):
        """Sets the logical_date of this BasicDAGRun.

        The logical date (previously called execution date). This is the time or interval covered by this DAG run, according to the DAG definition.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  This together with DAG_ID are a unique key.  *New in version 2.2.0* 

        :param logical_date: The logical_date of this BasicDAGRun.
        :type logical_date: datetime
        """

        self._logical_date = logical_date

    @property
    def run_id(self):
        """Gets the run_id of this BasicDAGRun.

        Run ID. 

        :return: The run_id of this BasicDAGRun.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this BasicDAGRun.

        Run ID. 

        :param run_id: The run_id of this BasicDAGRun.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def start_date(self):
        """Gets the start_date of this BasicDAGRun.

        The start time. The time when DAG run was actually created.  *Changed in version 2.1.3*&#58; Field becomes nullable. 

        :return: The start_date of this BasicDAGRun.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BasicDAGRun.

        The start time. The time when DAG run was actually created.  *Changed in version 2.1.3*&#58; Field becomes nullable. 

        :param start_date: The start_date of this BasicDAGRun.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this BasicDAGRun.


        :return: The state of this BasicDAGRun.
        :rtype: DagState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BasicDAGRun.


        :param state: The state of this BasicDAGRun.
        :type state: DagState
        """

        self._state = state
