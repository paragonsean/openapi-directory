# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionCollectionItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conn_type: str=None, connection_id: str=None, description: str=None, host: str=None, login: str=None, port: int=None, _schema: str=None):
        """ConnectionCollectionItem - a model defined in OpenAPI

        :param conn_type: The conn_type of this ConnectionCollectionItem.
        :param connection_id: The connection_id of this ConnectionCollectionItem.
        :param description: The description of this ConnectionCollectionItem.
        :param host: The host of this ConnectionCollectionItem.
        :param login: The login of this ConnectionCollectionItem.
        :param port: The port of this ConnectionCollectionItem.
        :param _schema: The _schema of this ConnectionCollectionItem.
        """
        self.openapi_types = {
            'conn_type': str,
            'connection_id': str,
            'description': str,
            'host': str,
            'login': str,
            'port': int,
            '_schema': str
        }

        self.attribute_map = {
            'conn_type': 'conn_type',
            'connection_id': 'connection_id',
            'description': 'description',
            'host': 'host',
            'login': 'login',
            'port': 'port',
            '_schema': 'schema'
        }

        self._conn_type = conn_type
        self._connection_id = connection_id
        self._description = description
        self._host = host
        self._login = login
        self._port = port
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionCollectionItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionCollectionItem of this ConnectionCollectionItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conn_type(self):
        """Gets the conn_type of this ConnectionCollectionItem.

        The connection type.

        :return: The conn_type of this ConnectionCollectionItem.
        :rtype: str
        """
        return self._conn_type

    @conn_type.setter
    def conn_type(self, conn_type):
        """Sets the conn_type of this ConnectionCollectionItem.

        The connection type.

        :param conn_type: The conn_type of this ConnectionCollectionItem.
        :type conn_type: str
        """

        self._conn_type = conn_type

    @property
    def connection_id(self):
        """Gets the connection_id of this ConnectionCollectionItem.

        The connection ID.

        :return: The connection_id of this ConnectionCollectionItem.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ConnectionCollectionItem.

        The connection ID.

        :param connection_id: The connection_id of this ConnectionCollectionItem.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def description(self):
        """Gets the description of this ConnectionCollectionItem.

        The description of the connection.

        :return: The description of this ConnectionCollectionItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectionCollectionItem.

        The description of the connection.

        :param description: The description of this ConnectionCollectionItem.
        :type description: str
        """

        self._description = description

    @property
    def host(self):
        """Gets the host of this ConnectionCollectionItem.

        Host of the connection.

        :return: The host of this ConnectionCollectionItem.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ConnectionCollectionItem.

        Host of the connection.

        :param host: The host of this ConnectionCollectionItem.
        :type host: str
        """

        self._host = host

    @property
    def login(self):
        """Gets the login of this ConnectionCollectionItem.

        Login of the connection.

        :return: The login of this ConnectionCollectionItem.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ConnectionCollectionItem.

        Login of the connection.

        :param login: The login of this ConnectionCollectionItem.
        :type login: str
        """

        self._login = login

    @property
    def port(self):
        """Gets the port of this ConnectionCollectionItem.

        Port of the connection.

        :return: The port of this ConnectionCollectionItem.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConnectionCollectionItem.

        Port of the connection.

        :param port: The port of this ConnectionCollectionItem.
        :type port: int
        """

        self._port = port

    @property
    def _schema(self):
        """Gets the _schema of this ConnectionCollectionItem.

        Schema of the connection.

        :return: The _schema of this ConnectionCollectionItem.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ConnectionCollectionItem.

        Schema of the connection.

        :param _schema: The _schema of this ConnectionCollectionItem.
        :type _schema: str
        """

        self.__schema = _schema
