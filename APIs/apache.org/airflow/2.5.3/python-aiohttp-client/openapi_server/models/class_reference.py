# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClassReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_name: str=None, module_path: str=None):
        """ClassReference - a model defined in OpenAPI

        :param class_name: The class_name of this ClassReference.
        :param module_path: The module_path of this ClassReference.
        """
        self.openapi_types = {
            'class_name': str,
            'module_path': str
        }

        self.attribute_map = {
            'class_name': 'class_name',
            'module_path': 'module_path'
        }

        self._class_name = class_name
        self._module_path = module_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClassReference of this ClassReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_name(self):
        """Gets the class_name of this ClassReference.


        :return: The class_name of this ClassReference.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ClassReference.


        :param class_name: The class_name of this ClassReference.
        :type class_name: str
        """

        self._class_name = class_name

    @property
    def module_path(self):
        """Gets the module_path of this ClassReference.


        :return: The module_path of this ClassReference.
        :rtype: str
        """
        return self._module_path

    @module_path.setter
    def module_path(self, module_path):
        """Sets the module_path of this ClassReference.


        :param module_path: The module_path of this ClassReference.
        :type module_path: str
        """

        self._module_path = module_path
