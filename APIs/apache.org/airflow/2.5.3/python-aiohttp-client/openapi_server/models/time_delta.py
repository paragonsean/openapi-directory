# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeDelta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, days: int=None, microseconds: int=None, seconds: int=None):
        """TimeDelta - a model defined in OpenAPI

        :param type: The type of this TimeDelta.
        :param days: The days of this TimeDelta.
        :param microseconds: The microseconds of this TimeDelta.
        :param seconds: The seconds of this TimeDelta.
        """
        self.openapi_types = {
            'type': str,
            'days': int,
            'microseconds': int,
            'seconds': int
        }

        self.attribute_map = {
            'type': '__type',
            'days': 'days',
            'microseconds': 'microseconds',
            'seconds': 'seconds'
        }

        self._type = type
        self._days = days
        self._microseconds = microseconds
        self._seconds = seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeDelta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeDelta of this TimeDelta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TimeDelta.


        :return: The type of this TimeDelta.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeDelta.


        :param type: The type of this TimeDelta.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def days(self):
        """Gets the days of this TimeDelta.


        :return: The days of this TimeDelta.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this TimeDelta.


        :param days: The days of this TimeDelta.
        :type days: int
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")

        self._days = days

    @property
    def microseconds(self):
        """Gets the microseconds of this TimeDelta.


        :return: The microseconds of this TimeDelta.
        :rtype: int
        """
        return self._microseconds

    @microseconds.setter
    def microseconds(self, microseconds):
        """Sets the microseconds of this TimeDelta.


        :param microseconds: The microseconds of this TimeDelta.
        :type microseconds: int
        """
        if microseconds is None:
            raise ValueError("Invalid value for `microseconds`, must not be `None`")

        self._microseconds = microseconds

    @property
    def seconds(self):
        """Gets the seconds of this TimeDelta.


        :return: The seconds of this TimeDelta.
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this TimeDelta.


        :param seconds: The seconds of this TimeDelta.
        :type seconds: int
        """
        if seconds is None:
            raise ValueError("Invalid value for `seconds`, must not be `None`")

        self._seconds = seconds
