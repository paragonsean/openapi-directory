# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename: str=None, import_error_id: int=None, stack_trace: str=None, timestamp: str=None):
        """ImportError - a model defined in OpenAPI

        :param filename: The filename of this ImportError.
        :param import_error_id: The import_error_id of this ImportError.
        :param stack_trace: The stack_trace of this ImportError.
        :param timestamp: The timestamp of this ImportError.
        """
        self.openapi_types = {
            'filename': str,
            'import_error_id': int,
            'stack_trace': str,
            'timestamp': str
        }

        self.attribute_map = {
            'filename': 'filename',
            'import_error_id': 'import_error_id',
            'stack_trace': 'stack_trace',
            'timestamp': 'timestamp'
        }

        self._filename = filename
        self._import_error_id = import_error_id
        self._stack_trace = stack_trace
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportError of this ImportError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this ImportError.

        The filename

        :return: The filename of this ImportError.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ImportError.

        The filename

        :param filename: The filename of this ImportError.
        :type filename: str
        """

        self._filename = filename

    @property
    def import_error_id(self):
        """Gets the import_error_id of this ImportError.

        The import error ID.

        :return: The import_error_id of this ImportError.
        :rtype: int
        """
        return self._import_error_id

    @import_error_id.setter
    def import_error_id(self, import_error_id):
        """Sets the import_error_id of this ImportError.

        The import error ID.

        :param import_error_id: The import_error_id of this ImportError.
        :type import_error_id: int
        """

        self._import_error_id = import_error_id

    @property
    def stack_trace(self):
        """Gets the stack_trace of this ImportError.

        The full stackstrace..

        :return: The stack_trace of this ImportError.
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this ImportError.

        The full stackstrace..

        :param stack_trace: The stack_trace of this ImportError.
        :type stack_trace: str
        """

        self._stack_trace = stack_trace

    @property
    def timestamp(self):
        """Gets the timestamp of this ImportError.

        The time when this error was created.

        :return: The timestamp of this ImportError.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ImportError.

        The time when this error was created.

        :param timestamp: The timestamp of this ImportError.
        :type timestamp: str
        """

        self._timestamp = timestamp
