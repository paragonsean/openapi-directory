# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_id: str=None, event: str=None, event_log_id: int=None, execution_date: datetime=None, extra: str=None, owner: str=None, task_id: str=None, when: datetime=None):
        """EventLog - a model defined in OpenAPI

        :param dag_id: The dag_id of this EventLog.
        :param event: The event of this EventLog.
        :param event_log_id: The event_log_id of this EventLog.
        :param execution_date: The execution_date of this EventLog.
        :param extra: The extra of this EventLog.
        :param owner: The owner of this EventLog.
        :param task_id: The task_id of this EventLog.
        :param when: The when of this EventLog.
        """
        self.openapi_types = {
            'dag_id': str,
            'event': str,
            'event_log_id': int,
            'execution_date': datetime,
            'extra': str,
            'owner': str,
            'task_id': str,
            'when': datetime
        }

        self.attribute_map = {
            'dag_id': 'dag_id',
            'event': 'event',
            'event_log_id': 'event_log_id',
            'execution_date': 'execution_date',
            'extra': 'extra',
            'owner': 'owner',
            'task_id': 'task_id',
            'when': 'when'
        }

        self._dag_id = dag_id
        self._event = event
        self._event_log_id = event_log_id
        self._execution_date = execution_date
        self._extra = extra
        self._owner = owner
        self._task_id = task_id
        self._when = when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventLog of this EventLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_id(self):
        """Gets the dag_id of this EventLog.

        The DAG ID

        :return: The dag_id of this EventLog.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this EventLog.

        The DAG ID

        :param dag_id: The dag_id of this EventLog.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def event(self):
        """Gets the event of this EventLog.

        A key describing the type of event.

        :return: The event of this EventLog.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventLog.

        A key describing the type of event.

        :param event: The event of this EventLog.
        :type event: str
        """

        self._event = event

    @property
    def event_log_id(self):
        """Gets the event_log_id of this EventLog.

        The event log ID

        :return: The event_log_id of this EventLog.
        :rtype: int
        """
        return self._event_log_id

    @event_log_id.setter
    def event_log_id(self, event_log_id):
        """Sets the event_log_id of this EventLog.

        The event log ID

        :param event_log_id: The event_log_id of this EventLog.
        :type event_log_id: int
        """

        self._event_log_id = event_log_id

    @property
    def execution_date(self):
        """Gets the execution_date of this EventLog.

        When the event was dispatched for an object having execution_date, the value of this field. 

        :return: The execution_date of this EventLog.
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this EventLog.

        When the event was dispatched for an object having execution_date, the value of this field. 

        :param execution_date: The execution_date of this EventLog.
        :type execution_date: datetime
        """

        self._execution_date = execution_date

    @property
    def extra(self):
        """Gets the extra of this EventLog.

        Other information that was not included in the other fields, e.g. the complete CLI command. 

        :return: The extra of this EventLog.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this EventLog.

        Other information that was not included in the other fields, e.g. the complete CLI command. 

        :param extra: The extra of this EventLog.
        :type extra: str
        """

        self._extra = extra

    @property
    def owner(self):
        """Gets the owner of this EventLog.

        Name of the user who triggered these events a.

        :return: The owner of this EventLog.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EventLog.

        Name of the user who triggered these events a.

        :param owner: The owner of this EventLog.
        :type owner: str
        """

        self._owner = owner

    @property
    def task_id(self):
        """Gets the task_id of this EventLog.

        The DAG ID

        :return: The task_id of this EventLog.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this EventLog.

        The DAG ID

        :param task_id: The task_id of this EventLog.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def when(self):
        """Gets the when of this EventLog.

        The time when these events happened.

        :return: The when of this EventLog.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this EventLog.

        The time when these events happened.

        :param when: The when of this EventLog.
        :type when: datetime
        """

        self._when = when
