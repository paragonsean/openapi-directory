/**
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';

/**
* Queues service.
* @module api/QueuesApi
* @version v1
*/
export default class QueuesApi {

    /**
    * Constructs a new QueuesApi. 
    * @alias module:api/QueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ackMessage operation.
     * @callback module:api/QueuesApi~ackMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge that Queue Message has been processed.
     * 
     * @param {String} queueName Name of Queue
     * @param {String} queueMessageId ID of Queue Message to be acknowledged
     * @param {module:api/QueuesApi~ackMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    ackMessage(queueName, queueMessageId, callback) {
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling ackMessage");
      }
      // verify the required parameter 'queueMessageId' is set
      if (queueMessageId === undefined || queueMessageId === null) {
        throw new Error("Missing the required parameter 'queueMessageId' when calling ackMessage");
      }

      let pathParams = {
        'queueName': queueName,
        'queueMessageId': queueMessageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/messages/{queueMessageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQueue operation.
     * @callback module:api/QueuesApi~createQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new queue.
     * 
     * @param {module:api/QueuesApi~createQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    createQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueue operation.
     * @callback module:api/QueuesApi~deleteQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Queue.
     * 
     * @param {String} queueName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirm = false)] 
     * @param {module:api/QueuesApi~deleteQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteQueue(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling deleteQueue");
      }

      let pathParams = {
        'queueName': queueName
      };
      let queryParams = {
        'confirm': opts['confirm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfQueues operation.
     * @callback module:api/QueuesApi~getListOfQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all Queues.
     * 
     * @param {module:api/QueuesApi~getListOfQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getListOfQueues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageData operation.
     * @callback module:api/QueuesApi~getMessageDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data associated with a Queue Message.
     * 
     * @param {String} queueName Name of Queue
     * @param {String} queueMessageId ID of Queue Message for which data is to be returned
     * @param {module:api/QueuesApi~getMessageDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getMessageData(queueName, queueMessageId, callback) {
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling getMessageData");
      }
      // verify the required parameter 'queueMessageId' is set
      if (queueMessageId === undefined || queueMessageId === null) {
        throw new Error("Missing the required parameter 'queueMessageId' when calling getMessageData");
      }

      let pathParams = {
        'queueName': queueName,
        'queueMessageId': queueMessageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/data/{queueMessageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextMessages operation.
     * @callback module:api/QueuesApi~getNextMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get next Queue Messages from a Queue
     * 
     * @param {String} queueName Name of Queue
     * @param {Object} opts Optional parameters
     * @param {String} [count = '1')] Number of messages to get
     * @param {module:api/QueuesApi~getNextMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getNextMessages(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling getNextMessages");
      }

      let pathParams = {
        'queueName': queueName
      };
      let queryParams = {
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueueConfig operation.
     * @callback module:api/QueuesApi~getQueueConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Queue config.
     * 
     * @param {String} queueName Name of Queue
     * @param {module:api/QueuesApi~getQueueConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getQueueConfig(queueName, callback) {
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling getQueueConfig");
      }

      let pathParams = {
        'queueName': queueName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessageBinary operation.
     * @callback module:api/QueuesApi~sendMessageBinaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Queue Message with a binary data (blob) payload.
     * 
     * @param {String} queueName Name of Queue
     * @param {String} contentType Content type of the data to be sent with Queue Message
     * @param {Array.<Blob>} requestBody Data to be send with Queue Message
     * @param {Object} opts Optional parameters
     * @param {String} [regions] Regions to which message is to be sent
     * @param {String} [delay] 
     * @param {String} [expiration] 
     * @param {module:api/QueuesApi~sendMessageBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    sendMessageBinary(queueName, contentType, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling sendMessageBinary");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sendMessageBinary");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling sendMessageBinary");
      }

      let pathParams = {
        'queueName': queueName
      };
      let queryParams = {
        'regions': opts['regions'],
        'delay': opts['delay'],
        'expiration': opts['expiration'],
        'contentType': contentType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueueConfig operation.
     * @callback module:api/QueuesApi~updateQueueConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Queue configuration.
     * 
     * @param {String} queueName 
     * @param {module:api/QueuesApi~updateQueueConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    updateQueueConfig(queueName, callback) {
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling updateQueueConfig");
      }

      let pathParams = {
        'queueName': queueName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/queues/{queueName}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
