/**
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueueMessage model module.
 * @module model/QueueMessage
 * @version v1
 */
class QueueMessage {
    /**
     * Constructs a new <code>QueueMessage</code>.
     * A Queue Message
     * @alias module:model/QueueMessage
     * @param queueName {String} Name of Queue for message.
     */
    constructor(queueName) { 
        
        QueueMessage.initialize(this, queueName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, queueName) { 
        obj['queueName'] = queueName;
    }

    /**
     * Constructs a <code>QueueMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueueMessage} obj Optional instance to populate.
     * @return {module:model/QueueMessage} The populated <code>QueueMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueueMessage();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('queueMessageId')) {
                obj['queueMessageId'] = ApiClient.convertToType(data['queueMessageId'], 'String');
            }
            if (data.hasOwnProperty('queueName')) {
                obj['queueName'] = ApiClient.convertToType(data['queueName'], 'String');
            }
            if (data.hasOwnProperty('receivingRegion')) {
                obj['receivingRegion'] = ApiClient.convertToType(data['receivingRegion'], 'String');
            }
            if (data.hasOwnProperty('sendingRegion')) {
                obj['sendingRegion'] = ApiClient.convertToType(data['sendingRegion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueueMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueueMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueueMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['queueMessageId'] && !(typeof data['queueMessageId'] === 'string' || data['queueMessageId'] instanceof String)) {
            throw new Error("Expected the field `queueMessageId` to be a primitive type in the JSON string but got " + data['queueMessageId']);
        }
        // ensure the json data is a string
        if (data['queueName'] && !(typeof data['queueName'] === 'string' || data['queueName'] instanceof String)) {
            throw new Error("Expected the field `queueName` to be a primitive type in the JSON string but got " + data['queueName']);
        }
        // ensure the json data is a string
        if (data['receivingRegion'] && !(typeof data['receivingRegion'] === 'string' || data['receivingRegion'] instanceof String)) {
            throw new Error("Expected the field `receivingRegion` to be a primitive type in the JSON string but got " + data['receivingRegion']);
        }
        // ensure the json data is a string
        if (data['sendingRegion'] && !(typeof data['sendingRegion'] === 'string' || data['sendingRegion'] instanceof String)) {
            throw new Error("Expected the field `sendingRegion` to be a primitive type in the JSON string but got " + data['sendingRegion']);
        }

        return true;
    }


}

QueueMessage.RequiredProperties = ["queueName"];

/**
 * Content-type of data associated with QueueMessage.
 * @member {String} contentType
 */
QueueMessage.prototype['contentType'] = undefined;

/**
 * Date that message was received by system.
 * @member {Number} createDate
 */
QueueMessage.prototype['createDate'] = undefined;

/**
 * Embedded JSON to be sent with Queue Message.
 * @member {String} data
 */
QueueMessage.prototype['data'] = undefined;

/**
 * URL of data associated with Queue Message (if not embedded JSON)
 * @member {String} href
 */
QueueMessage.prototype['href'] = undefined;

/**
 * UUID of Message Data associated with this Queue Message
 * @member {String} messageId
 */
QueueMessage.prototype['messageId'] = undefined;

/**
 * UUID of Queue Message in local region.
 * @member {String} queueMessageId
 */
QueueMessage.prototype['queueMessageId'] = undefined;

/**
 * Name of Queue for message.
 * @member {String} queueName
 */
QueueMessage.prototype['queueName'] = undefined;

/**
 * Regions to which message will be sent
 * @member {String} receivingRegion
 */
QueueMessage.prototype['receivingRegion'] = undefined;

/**
 * Region from which was sent
 * @member {String} sendingRegion
 */
QueueMessage.prototype['sendingRegion'] = undefined;






export default QueueMessage;

