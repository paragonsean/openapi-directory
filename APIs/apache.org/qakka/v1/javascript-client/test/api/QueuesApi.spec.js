/**
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Qakka);
  }
}(this, function(expect, Qakka) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Qakka.QueuesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QueuesApi', function() {
    describe('ackMessage', function() {
      it('should call ackMessage successfully', function(done) {
        //uncomment below and update the code to test ackMessage
        //instance.ackMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQueue', function() {
      it('should call createQueue successfully', function(done) {
        //uncomment below and update the code to test createQueue
        //instance.createQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQueue', function() {
      it('should call deleteQueue successfully', function(done) {
        //uncomment below and update the code to test deleteQueue
        //instance.deleteQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListOfQueues', function() {
      it('should call getListOfQueues successfully', function(done) {
        //uncomment below and update the code to test getListOfQueues
        //instance.getListOfQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessageData', function() {
      it('should call getMessageData successfully', function(done) {
        //uncomment below and update the code to test getMessageData
        //instance.getMessageData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNextMessages', function() {
      it('should call getNextMessages successfully', function(done) {
        //uncomment below and update the code to test getNextMessages
        //instance.getNextMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueueConfig', function() {
      it('should call getQueueConfig successfully', function(done) {
        //uncomment below and update the code to test getQueueConfig
        //instance.getQueueConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessageBinary', function() {
      it('should call sendMessageBinary successfully', function(done) {
        //uncomment below and update the code to test sendMessageBinary
        //instance.sendMessageBinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQueueConfig', function() {
      it('should call updateQueueConfig successfully', function(done) {
        //uncomment below and update the code to test updateQueueConfig
        //instance.updateQueueConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
