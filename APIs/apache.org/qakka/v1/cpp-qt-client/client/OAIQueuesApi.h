/**
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueuesApi_H
#define OAI_OAIQueuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueuesApi : public QObject {
    Q_OBJECT

public:
    OAIQueuesApi(const int timeOut = 0);
    ~OAIQueuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  queue_message_id QString [required]
    */
    virtual void ackMessage(const QString &queue_name, const QString &queue_message_id);


    virtual void createQueue();

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  confirm bool [optional]
    */
    virtual void deleteQueue(const QString &queue_name, const ::OpenAPI::OptionalParam<bool> &confirm = ::OpenAPI::OptionalParam<bool>());


    virtual void getListOfQueues();

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  queue_message_id QString [required]
    */
    virtual void getMessageData(const QString &queue_name, const QString &queue_message_id);

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  count QString [optional]
    */
    virtual void getNextMessages(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    */
    virtual void getQueueConfig(const QString &queue_name);

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  request_body QList<QByteArray> [required]
    * @param[in]  regions QString [optional]
    * @param[in]  delay QString [optional]
    * @param[in]  expiration QString [optional]
    */
    virtual void sendMessageBinary(const QString &queue_name, const QString &content_type, const QList<QByteArray> &request_body, const ::OpenAPI::OptionalParam<QString> &regions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delay = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expiration = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    */
    virtual void updateQueueConfig(const QString &queue_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ackMessageCallback(OAIHttpRequestWorker *worker);
    void createQueueCallback(OAIHttpRequestWorker *worker);
    void deleteQueueCallback(OAIHttpRequestWorker *worker);
    void getListOfQueuesCallback(OAIHttpRequestWorker *worker);
    void getMessageDataCallback(OAIHttpRequestWorker *worker);
    void getNextMessagesCallback(OAIHttpRequestWorker *worker);
    void getQueueConfigCallback(OAIHttpRequestWorker *worker);
    void sendMessageBinaryCallback(OAIHttpRequestWorker *worker);
    void updateQueueConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ackMessageSignal(OAIApiResponse summary);
    void createQueueSignal(OAIApiResponse summary);
    void deleteQueueSignal(OAIApiResponse summary);
    void getListOfQueuesSignal(OAIApiResponse summary);
    void getMessageDataSignal(OAIApiResponse summary);
    void getNextMessagesSignal(OAIApiResponse summary);
    void getQueueConfigSignal(OAIApiResponse summary);
    void sendMessageBinarySignal(OAIApiResponse summary);
    void updateQueueConfigSignal(OAIApiResponse summary);


    void ackMessageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void createQueueSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void deleteQueueSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getListOfQueuesSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getMessageDataSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getNextMessagesSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getQueueConfigSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void sendMessageBinarySignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void updateQueueConfigSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);

    Q_DECL_DEPRECATED_X("Use ackMessageSignalError() instead")
    void ackMessageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ackMessageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueueSignalError() instead")
    void createQueueSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueueSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueueSignalError() instead")
    void deleteQueueSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueueSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListOfQueuesSignalError() instead")
    void getListOfQueuesSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListOfQueuesSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessageDataSignalError() instead")
    void getMessageDataSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageDataSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextMessagesSignalError() instead")
    void getNextMessagesSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextMessagesSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueueConfigSignalError() instead")
    void getQueueConfigSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueueConfigSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageBinarySignalError() instead")
    void sendMessageBinarySignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageBinarySignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQueueConfigSignalError() instead")
    void updateQueueConfigSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQueueConfigSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ackMessageSignalErrorFull() instead")
    void ackMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ackMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueueSignalErrorFull() instead")
    void createQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueueSignalErrorFull() instead")
    void deleteQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListOfQueuesSignalErrorFull() instead")
    void getListOfQueuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListOfQueuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessageDataSignalErrorFull() instead")
    void getMessageDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextMessagesSignalErrorFull() instead")
    void getNextMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueueConfigSignalErrorFull() instead")
    void getQueueConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueueConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageBinarySignalErrorFull() instead")
    void sendMessageBinarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageBinarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQueueConfigSignalErrorFull() instead")
    void updateQueueConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQueueConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
