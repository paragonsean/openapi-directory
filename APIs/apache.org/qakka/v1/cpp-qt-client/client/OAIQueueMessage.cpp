/**
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueMessage::OAIQueueMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueMessage::OAIQueueMessage() {
    this->initializeModel();
}

OAIQueueMessage::~OAIQueueMessage() {}

void OAIQueueMessage::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_queue_message_id_isSet = false;
    m_queue_message_id_isValid = false;

    m_queue_name_isSet = false;
    m_queue_name_isValid = false;

    m_receiving_region_isSet = false;
    m_receiving_region_isValid = false;

    m_sending_region_isSet = false;
    m_sending_region_isValid = false;
}

void OAIQueueMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueMessage::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_queue_message_id_isValid = ::OpenAPI::fromJsonValue(m_queue_message_id, json[QString("queueMessageId")]);
    m_queue_message_id_isSet = !json[QString("queueMessageId")].isNull() && m_queue_message_id_isValid;

    m_queue_name_isValid = ::OpenAPI::fromJsonValue(m_queue_name, json[QString("queueName")]);
    m_queue_name_isSet = !json[QString("queueName")].isNull() && m_queue_name_isValid;

    m_receiving_region_isValid = ::OpenAPI::fromJsonValue(m_receiving_region, json[QString("receivingRegion")]);
    m_receiving_region_isSet = !json[QString("receivingRegion")].isNull() && m_receiving_region_isValid;

    m_sending_region_isValid = ::OpenAPI::fromJsonValue(m_sending_region, json[QString("sendingRegion")]);
    m_sending_region_isSet = !json[QString("sendingRegion")].isNull() && m_sending_region_isValid;
}

QString OAIQueueMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_queue_message_id_isSet) {
        obj.insert(QString("queueMessageId"), ::OpenAPI::toJsonValue(m_queue_message_id));
    }
    if (m_queue_name_isSet) {
        obj.insert(QString("queueName"), ::OpenAPI::toJsonValue(m_queue_name));
    }
    if (m_receiving_region_isSet) {
        obj.insert(QString("receivingRegion"), ::OpenAPI::toJsonValue(m_receiving_region));
    }
    if (m_sending_region_isSet) {
        obj.insert(QString("sendingRegion"), ::OpenAPI::toJsonValue(m_sending_region));
    }
    return obj;
}

QString OAIQueueMessage::getContentType() const {
    return m_content_type;
}
void OAIQueueMessage::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIQueueMessage::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIQueueMessage::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint64 OAIQueueMessage::getCreateDate() const {
    return m_create_date;
}
void OAIQueueMessage::setCreateDate(const qint64 &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIQueueMessage::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIQueueMessage::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIQueueMessage::getData() const {
    return m_data;
}
void OAIQueueMessage::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIQueueMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIQueueMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIQueueMessage::getHref() const {
    return m_href;
}
void OAIQueueMessage::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIQueueMessage::is_href_Set() const{
    return m_href_isSet;
}

bool OAIQueueMessage::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIQueueMessage::getMessageId() const {
    return m_message_id;
}
void OAIQueueMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIQueueMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIQueueMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIQueueMessage::getQueueMessageId() const {
    return m_queue_message_id;
}
void OAIQueueMessage::setQueueMessageId(const QString &queue_message_id) {
    m_queue_message_id = queue_message_id;
    m_queue_message_id_isSet = true;
}

bool OAIQueueMessage::is_queue_message_id_Set() const{
    return m_queue_message_id_isSet;
}

bool OAIQueueMessage::is_queue_message_id_Valid() const{
    return m_queue_message_id_isValid;
}

QString OAIQueueMessage::getQueueName() const {
    return m_queue_name;
}
void OAIQueueMessage::setQueueName(const QString &queue_name) {
    m_queue_name = queue_name;
    m_queue_name_isSet = true;
}

bool OAIQueueMessage::is_queue_name_Set() const{
    return m_queue_name_isSet;
}

bool OAIQueueMessage::is_queue_name_Valid() const{
    return m_queue_name_isValid;
}

QString OAIQueueMessage::getReceivingRegion() const {
    return m_receiving_region;
}
void OAIQueueMessage::setReceivingRegion(const QString &receiving_region) {
    m_receiving_region = receiving_region;
    m_receiving_region_isSet = true;
}

bool OAIQueueMessage::is_receiving_region_Set() const{
    return m_receiving_region_isSet;
}

bool OAIQueueMessage::is_receiving_region_Valid() const{
    return m_receiving_region_isValid;
}

QString OAIQueueMessage::getSendingRegion() const {
    return m_sending_region;
}
void OAIQueueMessage::setSendingRegion(const QString &sending_region) {
    m_sending_region = sending_region;
    m_sending_region_isSet = true;
}

bool OAIQueueMessage::is_sending_region_Set() const{
    return m_sending_region_isSet;
}

bool OAIQueueMessage::is_sending_region_Valid() const{
    return m_sending_region_isValid;
}

bool OAIQueueMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_queue_name_isValid && true;
}

} // namespace OpenAPI
