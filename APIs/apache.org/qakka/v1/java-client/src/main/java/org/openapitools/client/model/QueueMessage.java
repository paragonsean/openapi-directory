/*
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Queue Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:26.553106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueueMessage {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private Long createDate;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private UUID messageId;

  public static final String SERIALIZED_NAME_QUEUE_MESSAGE_ID = "queueMessageId";
  @SerializedName(SERIALIZED_NAME_QUEUE_MESSAGE_ID)
  private UUID queueMessageId;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "queueName";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public static final String SERIALIZED_NAME_RECEIVING_REGION = "receivingRegion";
  @SerializedName(SERIALIZED_NAME_RECEIVING_REGION)
  private String receivingRegion;

  public static final String SERIALIZED_NAME_SENDING_REGION = "sendingRegion";
  @SerializedName(SERIALIZED_NAME_SENDING_REGION)
  private String sendingRegion;

  public QueueMessage() {
  }

  public QueueMessage contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Content-type of data associated with QueueMessage.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public QueueMessage createDate(Long createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Date that message was received by system.
   * @return createDate
   */
  @javax.annotation.Nullable
  public Long getCreateDate() {
    return createDate;
  }

  public void setCreateDate(Long createDate) {
    this.createDate = createDate;
  }


  public QueueMessage data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Embedded JSON to be sent with Queue Message.
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public QueueMessage href(String href) {
    this.href = href;
    return this;
  }

  /**
   * URL of data associated with Queue Message (if not embedded JSON)
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public QueueMessage messageId(UUID messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * UUID of Message Data associated with this Queue Message
   * @return messageId
   */
  @javax.annotation.Nullable
  public UUID getMessageId() {
    return messageId;
  }

  public void setMessageId(UUID messageId) {
    this.messageId = messageId;
  }


  public QueueMessage queueMessageId(UUID queueMessageId) {
    this.queueMessageId = queueMessageId;
    return this;
  }

  /**
   * UUID of Queue Message in local region.
   * @return queueMessageId
   */
  @javax.annotation.Nullable
  public UUID getQueueMessageId() {
    return queueMessageId;
  }

  public void setQueueMessageId(UUID queueMessageId) {
    this.queueMessageId = queueMessageId;
  }


  public QueueMessage queueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

  /**
   * Name of Queue for message.
   * @return queueName
   */
  @javax.annotation.Nonnull
  public String getQueueName() {
    return queueName;
  }

  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }


  public QueueMessage receivingRegion(String receivingRegion) {
    this.receivingRegion = receivingRegion;
    return this;
  }

  /**
   * Regions to which message will be sent
   * @return receivingRegion
   */
  @javax.annotation.Nullable
  public String getReceivingRegion() {
    return receivingRegion;
  }

  public void setReceivingRegion(String receivingRegion) {
    this.receivingRegion = receivingRegion;
  }


  public QueueMessage sendingRegion(String sendingRegion) {
    this.sendingRegion = sendingRegion;
    return this;
  }

  /**
   * Region from which was sent
   * @return sendingRegion
   */
  @javax.annotation.Nullable
  public String getSendingRegion() {
    return sendingRegion;
  }

  public void setSendingRegion(String sendingRegion) {
    this.sendingRegion = sendingRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueMessage queueMessage = (QueueMessage) o;
    return Objects.equals(this.contentType, queueMessage.contentType) &&
        Objects.equals(this.createDate, queueMessage.createDate) &&
        Objects.equals(this.data, queueMessage.data) &&
        Objects.equals(this.href, queueMessage.href) &&
        Objects.equals(this.messageId, queueMessage.messageId) &&
        Objects.equals(this.queueMessageId, queueMessage.queueMessageId) &&
        Objects.equals(this.queueName, queueMessage.queueName) &&
        Objects.equals(this.receivingRegion, queueMessage.receivingRegion) &&
        Objects.equals(this.sendingRegion, queueMessage.sendingRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, createDate, data, href, messageId, queueMessageId, queueName, receivingRegion, sendingRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueMessage {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    queueMessageId: ").append(toIndentedString(queueMessageId)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("    receivingRegion: ").append(toIndentedString(receivingRegion)).append("\n");
    sb.append("    sendingRegion: ").append(toIndentedString(sendingRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentType");
    openapiFields.add("createDate");
    openapiFields.add("data");
    openapiFields.add("href");
    openapiFields.add("messageId");
    openapiFields.add("queueMessageId");
    openapiFields.add("queueName");
    openapiFields.add("receivingRegion");
    openapiFields.add("sendingRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("queueName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueueMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueueMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueMessage is not found in the empty JSON string", QueueMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueueMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueueMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueueMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("queueMessageId") != null && !jsonObj.get("queueMessageId").isJsonNull()) && !jsonObj.get("queueMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueMessageId").toString()));
      }
      if (!jsonObj.get("queueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueName").toString()));
      }
      if ((jsonObj.get("receivingRegion") != null && !jsonObj.get("receivingRegion").isJsonNull()) && !jsonObj.get("receivingRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingRegion").toString()));
      }
      if ((jsonObj.get("sendingRegion") != null && !jsonObj.get("sendingRegion").isJsonNull()) && !jsonObj.get("sendingRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendingRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendingRegion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueMessage>() {
           @Override
           public void write(JsonWriter out, QueueMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueueMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueueMessage
   * @throws IOException if the JSON string is invalid with respect to QueueMessage
   */
  public static QueueMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueMessage.class);
  }

  /**
   * Convert an instance of QueueMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

