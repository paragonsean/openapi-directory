/*
 * Qakka
 * API for Qakka Queue System
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ModelApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueuesApi
 */
@Disabled
public class QueuesApiTest {

    private final QueuesApi api = new QueuesApi();

    /**
     * Acknowledge that Queue Message has been processed.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ackMessageTest() throws ApiException {
        String queueName = null;
        String queueMessageId = null;
        ModelApiResponse response = api.ackMessage(queueName, queueMessageId);
        // TODO: test validations
    }

    /**
     * Create new queue.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQueueTest() throws ApiException {
        ModelApiResponse response = api.createQueue();
        // TODO: test validations
    }

    /**
     * Delete Queue.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQueueTest() throws ApiException {
        String queueName = null;
        Boolean confirm = null;
        ModelApiResponse response = api.deleteQueue(queueName, confirm);
        // TODO: test validations
    }

    /**
     * Get list of all Queues.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfQueuesTest() throws ApiException {
        ModelApiResponse response = api.getListOfQueues();
        // TODO: test validations
    }

    /**
     * Get data associated with a Queue Message.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageDataTest() throws ApiException {
        String queueName = null;
        String queueMessageId = null;
        ModelApiResponse response = api.getMessageData(queueName, queueMessageId);
        // TODO: test validations
    }

    /**
     * Get next Queue Messages from a Queue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextMessagesTest() throws ApiException {
        String queueName = null;
        String count = null;
        ModelApiResponse response = api.getNextMessages(queueName, count);
        // TODO: test validations
    }

    /**
     * Get Queue config.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueueConfigTest() throws ApiException {
        String queueName = null;
        ModelApiResponse response = api.getQueueConfig(queueName);
        // TODO: test validations
    }

    /**
     * Send Queue Message with a binary data (blob) payload.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageBinaryTest() throws ApiException {
        String queueName = null;
        String contentType = null;
        List<byte[]> requestBody = null;
        String regions = null;
        String delay = null;
        String expiration = null;
        ModelApiResponse response = api.sendMessageBinary(queueName, contentType, requestBody, regions, delay, expiration);
        // TODO: test validations
    }

    /**
     * Update Queue configuration.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueueConfigTest() throws ApiException {
        String queueName = null;
        ModelApiResponse response = api.updateQueueConfig(queueName);
        // TODO: test validations
    }

}
