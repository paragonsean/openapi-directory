# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.queue import Queue
from openapi_server.models.queue_message import QueueMessage
from openapi_server import util


class ApiResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, message: str=None, queue_messages: List[QueueMessage]=None, queues: List[Queue]=None):
        """ApiResponse - a model defined in OpenAPI

        :param count: The count of this ApiResponse.
        :param message: The message of this ApiResponse.
        :param queue_messages: The queue_messages of this ApiResponse.
        :param queues: The queues of this ApiResponse.
        """
        self.openapi_types = {
            'count': int,
            'message': str,
            'queue_messages': List[QueueMessage],
            'queues': List[Queue]
        }

        self.attribute_map = {
            'count': 'count',
            'message': 'message',
            'queue_messages': 'queueMessages',
            'queues': 'queues'
        }

        self._count = count
        self._message = message
        self._queue_messages = queue_messages
        self._queues = queues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiResponse of this ApiResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ApiResponse.

        Count of Queues or QueueMessages returned by the call.

        :return: The count of this ApiResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ApiResponse.

        Count of Queues or QueueMessages returned by the call.

        :param count: The count of this ApiResponse.
        :type count: int
        """

        self._count = count

    @property
    def message(self):
        """Gets the message of this ApiResponse.

        Informative message intended for client.

        :return: The message of this ApiResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiResponse.

        Informative message intended for client.

        :param message: The message of this ApiResponse.
        :type message: str
        """

        self._message = message

    @property
    def queue_messages(self):
        """Gets the queue_messages of this ApiResponse.

        Queues Messages returned by the call, or empty if not applicable.

        :return: The queue_messages of this ApiResponse.
        :rtype: List[QueueMessage]
        """
        return self._queue_messages

    @queue_messages.setter
    def queue_messages(self, queue_messages):
        """Sets the queue_messages of this ApiResponse.

        Queues Messages returned by the call, or empty if not applicable.

        :param queue_messages: The queue_messages of this ApiResponse.
        :type queue_messages: List[QueueMessage]
        """

        self._queue_messages = queue_messages

    @property
    def queues(self):
        """Gets the queues of this ApiResponse.

        Queues returned but the call, or empty if not applicable.

        :return: The queues of this ApiResponse.
        :rtype: List[Queue]
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """Sets the queues of this ApiResponse.

        Queues returned but the call, or empty if not applicable.

        :param queues: The queues of this ApiResponse.
        :type queues: List[Queue]
        """

        self._queues = queues
