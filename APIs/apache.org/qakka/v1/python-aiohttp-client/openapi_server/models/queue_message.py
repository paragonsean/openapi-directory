# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueueMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, create_date: int=None, data: str=None, href: str=None, message_id: str=None, queue_message_id: str=None, queue_name: str=None, receiving_region: str=None, sending_region: str=None):
        """QueueMessage - a model defined in OpenAPI

        :param content_type: The content_type of this QueueMessage.
        :param create_date: The create_date of this QueueMessage.
        :param data: The data of this QueueMessage.
        :param href: The href of this QueueMessage.
        :param message_id: The message_id of this QueueMessage.
        :param queue_message_id: The queue_message_id of this QueueMessage.
        :param queue_name: The queue_name of this QueueMessage.
        :param receiving_region: The receiving_region of this QueueMessage.
        :param sending_region: The sending_region of this QueueMessage.
        """
        self.openapi_types = {
            'content_type': str,
            'create_date': int,
            'data': str,
            'href': str,
            'message_id': str,
            'queue_message_id': str,
            'queue_name': str,
            'receiving_region': str,
            'sending_region': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'create_date': 'createDate',
            'data': 'data',
            'href': 'href',
            'message_id': 'messageId',
            'queue_message_id': 'queueMessageId',
            'queue_name': 'queueName',
            'receiving_region': 'receivingRegion',
            'sending_region': 'sendingRegion'
        }

        self._content_type = content_type
        self._create_date = create_date
        self._data = data
        self._href = href
        self._message_id = message_id
        self._queue_message_id = queue_message_id
        self._queue_name = queue_name
        self._receiving_region = receiving_region
        self._sending_region = sending_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueueMessage of this QueueMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this QueueMessage.

        Content-type of data associated with QueueMessage.

        :return: The content_type of this QueueMessage.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this QueueMessage.

        Content-type of data associated with QueueMessage.

        :param content_type: The content_type of this QueueMessage.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def create_date(self):
        """Gets the create_date of this QueueMessage.

        Date that message was received by system.

        :return: The create_date of this QueueMessage.
        :rtype: int
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this QueueMessage.

        Date that message was received by system.

        :param create_date: The create_date of this QueueMessage.
        :type create_date: int
        """

        self._create_date = create_date

    @property
    def data(self):
        """Gets the data of this QueueMessage.

        Embedded JSON to be sent with Queue Message.

        :return: The data of this QueueMessage.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this QueueMessage.

        Embedded JSON to be sent with Queue Message.

        :param data: The data of this QueueMessage.
        :type data: str
        """

        self._data = data

    @property
    def href(self):
        """Gets the href of this QueueMessage.

        URL of data associated with Queue Message (if not embedded JSON)

        :return: The href of this QueueMessage.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this QueueMessage.

        URL of data associated with Queue Message (if not embedded JSON)

        :param href: The href of this QueueMessage.
        :type href: str
        """

        self._href = href

    @property
    def message_id(self):
        """Gets the message_id of this QueueMessage.

        UUID of Message Data associated with this Queue Message

        :return: The message_id of this QueueMessage.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this QueueMessage.

        UUID of Message Data associated with this Queue Message

        :param message_id: The message_id of this QueueMessage.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def queue_message_id(self):
        """Gets the queue_message_id of this QueueMessage.

        UUID of Queue Message in local region.

        :return: The queue_message_id of this QueueMessage.
        :rtype: str
        """
        return self._queue_message_id

    @queue_message_id.setter
    def queue_message_id(self, queue_message_id):
        """Sets the queue_message_id of this QueueMessage.

        UUID of Queue Message in local region.

        :param queue_message_id: The queue_message_id of this QueueMessage.
        :type queue_message_id: str
        """

        self._queue_message_id = queue_message_id

    @property
    def queue_name(self):
        """Gets the queue_name of this QueueMessage.

        Name of Queue for message.

        :return: The queue_name of this QueueMessage.
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this QueueMessage.

        Name of Queue for message.

        :param queue_name: The queue_name of this QueueMessage.
        :type queue_name: str
        """
        if queue_name is None:
            raise ValueError("Invalid value for `queue_name`, must not be `None`")

        self._queue_name = queue_name

    @property
    def receiving_region(self):
        """Gets the receiving_region of this QueueMessage.

        Regions to which message will be sent

        :return: The receiving_region of this QueueMessage.
        :rtype: str
        """
        return self._receiving_region

    @receiving_region.setter
    def receiving_region(self, receiving_region):
        """Sets the receiving_region of this QueueMessage.

        Regions to which message will be sent

        :param receiving_region: The receiving_region of this QueueMessage.
        :type receiving_region: str
        """

        self._receiving_region = receiving_region

    @property
    def sending_region(self):
        """Gets the sending_region of this QueueMessage.

        Region from which was sent

        :return: The sending_region of this QueueMessage.
        :rtype: str
        """
        return self._sending_region

    @sending_region.setter
    def sending_region(self, sending_region):
        """Sets the sending_region of this QueueMessage.

        Region from which was sent

        :param sending_region: The sending_region of this QueueMessage.
        :type sending_region: str
        """

        self._sending_region = sending_region
