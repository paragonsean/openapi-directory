/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Signl4Api);
  }
}(this, function(expect, Signl4Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Signl4Api.AlertFilterPublic();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AlertFilterPublic', function() {
    it('should create an instance of AlertFilterPublic', function() {
      // uncomment below and update the code to test AlertFilterPublic
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be.a(Signl4Api.AlertFilterPublic);
    });

    it('should have the property alertIds (base name: "alertIds")', function() {
      // uncomment below and update the code to test the property alertIds
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property alertsAfterId (base name: "alertsAfterId")', function() {
      // uncomment below and update the code to test the property alertsAfterId
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property categoryIds (base name: "categoryIds")', function() {
      // uncomment below and update the code to test the property categoryIds
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property continuationToken (base name: "continuationToken")', function() {
      // uncomment below and update the code to test the property continuationToken
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property maxCreationDate (base name: "maxCreationDate")', function() {
      // uncomment below and update the code to test the property maxCreationDate
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property minCreationDate (base name: "minCreationDate")', function() {
      // uncomment below and update the code to test the property minCreationDate
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property modifiedSince (base name: "modifiedSince")', function() {
      // uncomment below and update the code to test the property modifiedSince
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property showPersonalHiddenCategories (base name: "showPersonalHiddenCategories")', function() {
      // uncomment below and update the code to test the property showPersonalHiddenCategories
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property statusCodes (base name: "statusCodes")', function() {
      // uncomment below and update the code to test the property statusCodes
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property teamId (base name: "teamId")', function() {
      // uncomment below and update the code to test the property teamId
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

    it('should have the property textToSearch (base name: "textToSearch")', function() {
      // uncomment below and update the code to test the property textToSearch
      //var instance = new Signl4Api.AlertFilterPublic();
      //expect(instance).to.be();
    });

  });

}));
