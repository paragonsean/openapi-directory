/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Signl4Api);
  }
}(this, function(expect, Signl4Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Signl4Api.AlertsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AlertsApi', function() {
    describe('alertsAcknowledgeAllPost', function() {
      it('should call alertsAcknowledgeAllPost successfully', function(done) {
        //uncomment below and update the code to test alertsAcknowledgeAllPost
        //instance.alertsAcknowledgeAllPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAcknowledgeMultiplePost', function() {
      it('should call alertsAcknowledgeMultiplePost successfully', function(done) {
        //uncomment below and update the code to test alertsAcknowledgeMultiplePost
        //instance.alertsAcknowledgeMultiplePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdAcknowledgePost', function() {
      it('should call alertsAlertIdAcknowledgePost successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdAcknowledgePost
        //instance.alertsAlertIdAcknowledgePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdAnnotatePost', function() {
      it('should call alertsAlertIdAnnotatePost successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdAnnotatePost
        //instance.alertsAlertIdAnnotatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdAnnotationsGet', function() {
      it('should call alertsAlertIdAnnotationsGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdAnnotationsGet
        //instance.alertsAlertIdAnnotationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdAttachmentsAttachmentIdGet', function() {
      it('should call alertsAlertIdAttachmentsAttachmentIdGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdAttachmentsAttachmentIdGet
        //instance.alertsAlertIdAttachmentsAttachmentIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdAttachmentsGet', function() {
      it('should call alertsAlertIdAttachmentsGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdAttachmentsGet
        //instance.alertsAlertIdAttachmentsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdClosePost', function() {
      it('should call alertsAlertIdClosePost successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdClosePost
        //instance.alertsAlertIdClosePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdGet', function() {
      it('should call alertsAlertIdGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdGet
        //instance.alertsAlertIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdNotificationsGet', function() {
      it('should call alertsAlertIdNotificationsGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdNotificationsGet
        //instance.alertsAlertIdNotificationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdOverviewGet', function() {
      it('should call alertsAlertIdOverviewGet successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdOverviewGet
        //instance.alertsAlertIdOverviewGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdUndoAcknowledgePost', function() {
      it('should call alertsAlertIdUndoAcknowledgePost successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdUndoAcknowledgePost
        //instance.alertsAlertIdUndoAcknowledgePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsAlertIdUndoClosePost', function() {
      it('should call alertsAlertIdUndoClosePost successfully', function(done) {
        //uncomment below and update the code to test alertsAlertIdUndoClosePost
        //instance.alertsAlertIdUndoClosePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsCloseAllPost', function() {
      it('should call alertsCloseAllPost successfully', function(done) {
        //uncomment below and update the code to test alertsCloseAllPost
        //instance.alertsCloseAllPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsCloseMultiplePost', function() {
      it('should call alertsCloseMultiplePost successfully', function(done) {
        //uncomment below and update the code to test alertsCloseMultiplePost
        //instance.alertsCloseMultiplePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsPagedPost', function() {
      it('should call alertsPagedPost successfully', function(done) {
        //uncomment below and update the code to test alertsPagedPost
        //instance.alertsPagedPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsPost', function() {
      it('should call alertsPost successfully', function(done) {
        //uncomment below and update the code to test alertsPost
        //instance.alertsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsReportGet', function() {
      it('should call alertsReportGet successfully', function(done) {
        //uncomment below and update the code to test alertsReportGet
        //instance.alertsReportGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsUndoAcknowledgeMultiplePost', function() {
      it('should call alertsUndoAcknowledgeMultiplePost successfully', function(done) {
        //uncomment below and update the code to test alertsUndoAcknowledgeMultiplePost
        //instance.alertsUndoAcknowledgeMultiplePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alertsUndoCloseMultiplePost', function() {
      it('should call alertsUndoCloseMultiplePost successfully', function(done) {
        //uncomment below and update the code to test alertsUndoCloseMultiplePost
        //instance.alertsUndoCloseMultiplePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
