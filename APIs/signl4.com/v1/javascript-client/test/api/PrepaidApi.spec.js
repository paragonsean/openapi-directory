/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Signl4Api);
  }
}(this, function(expect, Signl4Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Signl4Api.PrepaidApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PrepaidApi', function() {
    describe('prepaidBalanceGet', function() {
      it('should call prepaidBalanceGet successfully', function(done) {
        //uncomment below and update the code to test prepaidBalanceGet
        //instance.prepaidBalanceGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('prepaidSettingsGet', function() {
      it('should call prepaidSettingsGet successfully', function(done) {
        //uncomment below and update the code to test prepaidSettingsGet
        //instance.prepaidSettingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('prepaidSettingsPut', function() {
      it('should call prepaidSettingsPut successfully', function(done) {
        //uncomment below and update the code to test prepaidSettingsPut
        //instance.prepaidSettingsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('prepaidTransactionsGet', function() {
      it('should call prepaidTransactionsGet successfully', function(done) {
        //uncomment below and update the code to test prepaidTransactionsGet
        //instance.prepaidTransactionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsSubscriptionIdPrepaidBalanceGet', function() {
      it('should call subscriptionsSubscriptionIdPrepaidBalanceGet successfully', function(done) {
        //uncomment below and update the code to test subscriptionsSubscriptionIdPrepaidBalanceGet
        //instance.subscriptionsSubscriptionIdPrepaidBalanceGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsSubscriptionIdPrepaidSettingsGet', function() {
      it('should call subscriptionsSubscriptionIdPrepaidSettingsGet successfully', function(done) {
        //uncomment below and update the code to test subscriptionsSubscriptionIdPrepaidSettingsGet
        //instance.subscriptionsSubscriptionIdPrepaidSettingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsSubscriptionIdPrepaidSettingsPut', function() {
      it('should call subscriptionsSubscriptionIdPrepaidSettingsPut successfully', function(done) {
        //uncomment below and update the code to test subscriptionsSubscriptionIdPrepaidSettingsPut
        //instance.subscriptionsSubscriptionIdPrepaidSettingsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsSubscriptionIdPrepaidTransactionsGet', function() {
      it('should call subscriptionsSubscriptionIdPrepaidTransactionsGet successfully', function(done) {
        //uncomment below and update the code to test subscriptionsSubscriptionIdPrepaidTransactionsGet
        //instance.subscriptionsSubscriptionIdPrepaidTransactionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
