/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelPriceInfo from '../model/ChannelPriceInfo';
import ErrorResponseContent from '../model/ErrorResponseContent';
import SubscriptionFeature from '../model/SubscriptionFeature';
import SubscriptionInfo from '../model/SubscriptionInfo';
import SubscriptionProfile from '../model/SubscriptionProfile';
import UserLicenseInfo from '../model/UserLicenseInfo';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version v1
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionsGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get infos of all available/managed subscriptions.
     * @param {module:api/SubscriptionsApi~subscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionInfo>}
     */
    subscriptionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SubscriptionInfo];
      return this.apiClient.callApi(
        '/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdChannelPricesGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionIdChannelPricesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelPriceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the subscription's channel price information.
     * @param {String} subscriptionId Id of the subscription that needs to be retrieved.
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionIdChannelPricesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelPriceInfo}
     */
    subscriptionsSubscriptionIdChannelPricesGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdChannelPricesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ChannelPriceInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/channelPrices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdFeaturesGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionIdFeaturesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionFeature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the features of a specified subscription.
     * @param {String} subscriptionId Id of the subscription from which the features need to be retrieved.
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionIdFeaturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionFeature>}
     */
    subscriptionsSubscriptionIdFeaturesGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdFeaturesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SubscriptionFeature];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get infos of a specific subscription.
     * @param {String} subscriptionId Id of the subscription that's to be retrieved.
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionInfo}
     */
    subscriptionsSubscriptionIdGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdProfilePut operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionIdProfilePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a subscriptions profile.
     * @param {String} subscriptionId ID of the subscription to be updated
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionProfile} [subscriptionProfile] Profile data to update subscription with
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionIdProfilePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionInfo}
     */
    subscriptionsSubscriptionIdProfilePut(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionProfile'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdProfilePut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdUserLicensesGet operation.
     * @callback module:api/SubscriptionsApi~subscriptionsSubscriptionIdUserLicensesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLicenseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a subscription's user licenses.
     * @param {String} subscriptionId ID of the subscription
     * @param {module:api/SubscriptionsApi~subscriptionsSubscriptionIdUserLicensesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLicenseInfo}
     */
    subscriptionsSubscriptionIdUserLicensesGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdUserLicensesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserLicenseInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/userLicenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
