/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import InventoryScriptInfo from '../model/InventoryScriptInfo';
import ScriptInstanceCustomUserData from '../model/ScriptInstanceCustomUserData';
import ScriptInstanceDetails from '../model/ScriptInstanceDetails';

/**
* Scripts service.
* @module api/ScriptsApi
* @version v1
*/
export default class ScriptsApi {

    /**
    * Constructs a new ScriptsApi. 
    * @alias module:api/ScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scriptsInstancesGet operation.
     * @callback module:api/ScriptsApi~scriptsInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScriptInstanceDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all script instances of the SIGNL4 team
     * Returns all script instances in the subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] 
     * @param {module:api/ScriptsApi~scriptsInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScriptInstanceDetails>}
     */
    scriptsInstancesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'teamId': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ScriptInstanceDetails];
      return this.apiClient.callApi(
        '/scripts/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdDataPut operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdDataPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom data of a given script instance which includes its display name.
     * Updates the specified script instance.
     * @param {String} instanceId InstanceId of the script to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptInstanceCustomUserData} [scriptInstanceCustomUserData] Script instance to be updated.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdDataPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesInstanceIdDataPut(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['scriptInstanceCustomUserData'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDataPut");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}/data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdDelete operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a script instance.
     * Gets the script instance specified by the passed instance id.
     * @param {String} instanceId Instance Id of script instance to be returned.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scriptsInstancesInstanceIdDelete(instanceId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDelete");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdDisablePost operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdDisablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables a given script instance.
     * @param {String} instanceId Id of the instance to be disabled.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesInstanceIdDisablePost(instanceId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDisablePost");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdEnablePost operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdEnablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a script instance.
     * @param {String} instanceId Id of the instance to be enabled.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesInstanceIdEnablePost(instanceId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdEnablePost");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdGet operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all information about a given script instance which includes its runtime status.
     * Gets the script instance specified by the passed instance id.
     * @param {String} instanceId Instance Id of script instance to be returned.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesInstanceIdGet(instanceId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdGet");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesInstanceIdPut operation.
     * @callback module:api/ScriptsApi~scriptsInstancesInstanceIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a given script instance, typically used for updating the configuration of a script.
     * Updates the specified script instance.
     * @param {String} instanceId InstanceId of the script to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptInstanceDetails} [scriptInstanceDetails] Script instance to be updated.
     * @param {module:api/ScriptsApi~scriptsInstancesInstanceIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesInstanceIdPut(instanceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['scriptInstanceDetails'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdPut");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances/{instanceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInstancesPost operation.
     * @callback module:api/ScriptsApi~scriptsInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new script instance in the in the SIGNL4 team.
     * Creates a new script instance of the script specified in the request body.
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptInstanceDetails} [scriptInstanceDetails] Script instance to be created.
     * @param {module:api/ScriptsApi~scriptsInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInstancesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['scriptInstanceDetails'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInventoryGet operation.
     * @callback module:api/ScriptsApi~scriptsInventoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InventoryScriptInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * @param {module:api/ScriptsApi~scriptsInventoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InventoryScriptInfo>}
     */
    scriptsInventoryGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [InventoryScriptInfo];
      return this.apiClient.callApi(
        '/scripts/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInventoryParsedGet operation.
     * @callback module:api/ScriptsApi~scriptsInventoryParsedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InventoryScriptInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all inventory scripts.
     * @param {Object} opts Optional parameters
     * @param {String} [language] 
     * @param {module:api/ScriptsApi~scriptsInventoryParsedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InventoryScriptInfo>}
     */
    scriptsInventoryParsedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [InventoryScriptInfo];
      return this.apiClient.callApi(
        '/scripts/inventory/parsed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scriptsInventoryParsedScriptIdGet operation.
     * @callback module:api/ScriptsApi~scriptsInventoryParsedScriptIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptInstanceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an inventory script by its id.
     * Gets the script specified by the passed script id.
     * @param {String} scriptId The Id of the script to be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [language] 
     * @param {module:api/ScriptsApi~scriptsInventoryParsedScriptIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptInstanceDetails}
     */
    scriptsInventoryParsedScriptIdGet(scriptId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scriptId' is set
      if (scriptId === undefined || scriptId === null) {
        throw new Error("Missing the required parameter 'scriptId' when calling scriptsInventoryParsedScriptIdGet");
      }

      let pathParams = {
        'scriptId': scriptId
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScriptInstanceDetails;
      return this.apiClient.callApi(
        '/scripts/inventory/parsed/{scriptId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
