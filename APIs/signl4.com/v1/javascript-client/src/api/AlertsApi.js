/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertAnnotationInfo from '../model/AlertAnnotationInfo';
import AlertAttachmentInfo from '../model/AlertAttachmentInfo';
import AlertFilterPublic from '../model/AlertFilterPublic';
import AlertInfo from '../model/AlertInfo';
import AlertNotificationInfo from '../model/AlertNotificationInfo';
import AlertReport from '../model/AlertReport';
import ChangeAlertStatusFilterInfo from '../model/ChangeAlertStatusFilterInfo';
import ChangeAlertStatusInfo from '../model/ChangeAlertStatusInfo';
import ChangeAlertStatusMultipleInfo from '../model/ChangeAlertStatusMultipleInfo';
import ErrorResponseContent from '../model/ErrorResponseContent';
import OverviewAlert from '../model/OverviewAlert';
import OverviewAlertPagedResultsPublic from '../model/OverviewAlertPagedResultsPublic';
import RaiseAlertInfo from '../model/RaiseAlertInfo';

/**
* Alerts service.
* @module api/AlertsApi
* @version v1
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alertsAcknowledgeAllPost operation.
     * @callback module:api/AlertsApi~alertsAcknowledgeAllPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms all visible alerts
     * This method confirms all unhandled alerts your team currently has by a specific user.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] User ID of the user to be used to acknowledge the alarms.
     * @param {module:model/ChangeAlertStatusFilterInfo} [changeAlertStatusFilterInfo] 
     * @param {module:api/AlertsApi~alertsAcknowledgeAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsAcknowledgeAllPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusFilterInfo'];

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/acknowledgeAll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAcknowledgeMultiplePost operation.
     * @callback module:api/AlertsApi~alertsAcknowledgeMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowlegde multiple alerts
     * This method confirms all alerts provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusMultipleInfo} [changeAlertStatusMultipleInfo] 
     * @param {module:api/AlertsApi~alertsAcknowledgeMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsAcknowledgeMultiplePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusMultipleInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/acknowledgeMultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdAcknowledgePost operation.
     * @callback module:api/AlertsApi~alertsAlertIdAcknowledgePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge an alert
     * @param {String} alertId Id to acknowledge an alert.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusInfo} [changeAlertStatusInfo] 
     * @param {module:api/AlertsApi~alertsAlertIdAcknowledgePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertInfo}
     */
    alertsAlertIdAcknowledgePost(alertId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusInfo'];
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdAcknowledgePost");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertInfo;
      return this.apiClient.callApi(
        '/alerts/{alertId}/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdAnnotatePost operation.
     * @callback module:api/AlertsApi~alertsAlertIdAnnotatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertAnnotationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annotate Alert
     * Annotates an alert by given Annotation Info.
     * @param {String} alertId Id of the alert to annotate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertAnnotationInfo} [alertAnnotationInfo] Annotation Information.
     * @param {module:api/AlertsApi~alertsAlertIdAnnotatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertAnnotationInfo}
     */
    alertsAlertIdAnnotatePost(alertId, opts, callback) {
      opts = opts || {};
      let postBody = opts['alertAnnotationInfo'];
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdAnnotatePost");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertAnnotationInfo;
      return this.apiClient.callApi(
        '/alerts/{alertId}/annotate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdAnnotationsGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdAnnotationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlertAnnotationInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get annotations of an alert
     * Get annotations of an alert by id.
     * @param {String} alertId Id of the requested Alert.
     * @param {module:api/AlertsApi~alertsAlertIdAnnotationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlertAnnotationInfo>}
     */
    alertsAlertIdAnnotationsGet(alertId, callback) {
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdAnnotationsGet");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlertAnnotationInfo];
      return this.apiClient.callApi(
        '/alerts/{alertId}/annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdAttachmentsAttachmentIdGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdAttachmentsAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specified attachment of a specified alert.
     * @param {String} alertId Id of the alert that contains the wanted attachment.
     * @param {String} attachmentId Id of the attachment, that you want to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Number} [width] Optional parameter defining the wanted width of the picture that is retrieved.
     * @param {Number} [height] Optional parameter defining the wanted height of the picture that is retrieved.
     * @param {Boolean} [scale = true)] Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to  true.
     * @param {module:api/AlertsApi~alertsAlertIdAttachmentsAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    alertsAlertIdAttachmentsAttachmentIdGet(alertId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling alertsAlertIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'alertId': alertId,
        'attachmentId': attachmentId
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'scale': opts['scale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/alerts/{alertId}/attachments/{attachmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdAttachmentsGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlertAttachmentInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments of an alert
     * Get attachments of an alert by id.
     * @param {String} alertId Id of the requested Alert.
     * @param {module:api/AlertsApi~alertsAlertIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlertAttachmentInfo>}
     */
    alertsAlertIdAttachmentsGet(alertId, callback) {
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdAttachmentsGet");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlertAttachmentInfo];
      return this.apiClient.callApi(
        '/alerts/{alertId}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdClosePost operation.
     * @callback module:api/AlertsApi~alertsAlertIdClosePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close an alert
     * @param {String} alertId Id to acknowledge an alert.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusInfo} [changeAlertStatusInfo] 
     * @param {module:api/AlertsApi~alertsAlertIdClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertInfo}
     */
    alertsAlertIdClosePost(alertId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusInfo'];
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdClosePost");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertInfo;
      return this.apiClient.callApi(
        '/alerts/{alertId}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Alert
     * Gets an alert by id.
     * @param {String} alertId Id of the requested Alert.
     * @param {module:api/AlertsApi~alertsAlertIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertInfo}
     */
    alertsAlertIdGet(alertId, callback) {
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdGet");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertInfo;
      return this.apiClient.callApi(
        '/alerts/{alertId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdNotificationsGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlertNotificationInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alert notifications
     * Get notifications of all users by alert id.
     * @param {String} alertId Id of the requested Alert.
     * @param {module:api/AlertsApi~alertsAlertIdNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlertNotificationInfo>}
     */
    alertsAlertIdNotificationsGet(alertId, callback) {
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdNotificationsGet");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlertNotificationInfo];
      return this.apiClient.callApi(
        '/alerts/{alertId}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdOverviewGet operation.
     * @callback module:api/AlertsApi~alertsAlertIdOverviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an overview alert.
     * Get overview alert by id.
     * @param {String} alertId Id of the requested Alert.
     * @param {module:api/AlertsApi~alertsAlertIdOverviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewAlert}
     */
    alertsAlertIdOverviewGet(alertId, callback) {
      let postBody = null;
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdOverviewGet");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewAlert;
      return this.apiClient.callApi(
        '/alerts/{alertId}/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdUndoAcknowledgePost operation.
     * @callback module:api/AlertsApi~alertsAlertIdUndoAcknowledgePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo the acknowledgement of an alert.
     * This method tries to undo an alert acknowledgement.
     * @param {String} alertId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusInfo} [changeAlertStatusInfo] 
     * @param {module:api/AlertsApi~alertsAlertIdUndoAcknowledgePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewAlert}
     */
    alertsAlertIdUndoAcknowledgePost(alertId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusInfo'];
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdUndoAcknowledgePost");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewAlert;
      return this.apiClient.callApi(
        '/alerts/{alertId}/undoAcknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsAlertIdUndoClosePost operation.
     * @callback module:api/AlertsApi~alertsAlertIdUndoClosePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo the closure of an alert.
     * This method tries to undo an alert close.
     * @param {String} alertId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusInfo} [changeAlertStatusInfo] 
     * @param {module:api/AlertsApi~alertsAlertIdUndoClosePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewAlert}
     */
    alertsAlertIdUndoClosePost(alertId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusInfo'];
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsAlertIdUndoClosePost");
      }

      let pathParams = {
        'alertId': alertId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewAlert;
      return this.apiClient.callApi(
        '/alerts/{alertId}/undoClose', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsCloseAllPost operation.
     * @callback module:api/AlertsApi~alertsCloseAllPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close all acknowledged alerts.
     * This method closes all acknowledged alerts your team currently has.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] User ID of the user to be used to close the alarms.
     * @param {module:model/ChangeAlertStatusFilterInfo} [changeAlertStatusFilterInfo] 
     * @param {module:api/AlertsApi~alertsCloseAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsCloseAllPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusFilterInfo'];

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/closeAll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsCloseMultiplePost operation.
     * @callback module:api/AlertsApi~alertsCloseMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close multiple alerts
     * This method closes all alerts provided.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusMultipleInfo} [changeAlertStatusMultipleInfo] 
     * @param {module:api/AlertsApi~alertsCloseMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsCloseMultiplePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusMultipleInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/closeMultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsPagedPost operation.
     * @callback module:api/AlertsApi~alertsPagedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewAlertPagedResultsPublic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets alerts paged
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                  Number of alerts could be less if filtered but at least 1.
     * @param {String} [userId] User ID of the user you want to get alerts for.
     * @param {module:model/AlertFilterPublic} [alertFilterPublic] The filter defines which alerts are supposed to be retrieved.
     * @param {module:api/AlertsApi~alertsPagedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewAlertPagedResultsPublic}
     */
    alertsPagedPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['alertFilterPublic'];

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewAlertPagedResultsPublic;
      return this.apiClient.callApi(
        '/alerts/paged', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsPost operation.
     * @callback module:api/AlertsApi~alertsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger Alert
     * Triggers a new alert for your team. All team members on duty will receive alert notifications.
     * @param {Object} opts Optional parameters
     * @param {module:model/RaiseAlertInfo} [raiseAlertInfo] Alert to raise.
     * @param {module:api/AlertsApi~alertsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertInfo}
     */
    alertsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['raiseAlertInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertInfo;
      return this.apiClient.callApi(
        '/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsReportGet operation.
     * @callback module:api/AlertsApi~alertsReportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Alert Report
     * Returns information about the occurred alert volume in different time periods as well as information about the  response behaviour (amount of confirmed and unhandled alerts) of your team members.
     * @param {Object} opts Optional parameters
     * @param {String} [userId] User ID of the user for whom you want a report.
     * @param {module:api/AlertsApi~alertsReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertReport}
     */
    alertsReportGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertReport;
      return this.apiClient.callApi(
        '/alerts/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUndoAcknowledgeMultiplePost operation.
     * @callback module:api/AlertsApi~alertsUndoAcknowledgeMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue undo of multiple acknowledgments.
     * This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusMultipleInfo} [changeAlertStatusMultipleInfo] Configure which user should be undone for which alerts.
     * @param {module:api/AlertsApi~alertsUndoAcknowledgeMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUndoAcknowledgeMultiplePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusMultipleInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/undoAcknowledgeMultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUndoCloseMultiplePost operation.
     * @callback module:api/AlertsApi~alertsUndoCloseMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw closure of multiple alerts
     * This method tries to undo multiple alert closes. The operation is handled in the background.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeAlertStatusMultipleInfo} [changeAlertStatusMultipleInfo] 
     * @param {module:api/AlertsApi~alertsUndoCloseMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUndoCloseMultiplePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['changeAlertStatusMultipleInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alerts/undoCloseMultiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
