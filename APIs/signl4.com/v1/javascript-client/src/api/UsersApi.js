/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright © Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import StringItemsWrapper from '../model/StringItemsWrapper';
import UpdatePasswordInfo from '../model/UpdatePasswordInfo';
import UserDutyInfo from '../model/UserDutyInfo';
import UserImage from '../model/UserImage';
import UserInfo from '../model/UserInfo';
import UserProfile from '../model/UserProfile';
import UserSetupProgress from '../model/UserSetupProgress';

/**
* Users service.
* @module api/UsersApi
* @version v1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Users
     * Returns a list of user objects with details such as their email address and duty information. Only users who  are part of your team will be returned.
     * @param {module:api/UsersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserInfo>}
     */
    usersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [UserInfo];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdChangePasswordPut operation.
     * @callback module:api/UsersApi~usersUserIdChangePasswordPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the password of a user
     * @param {String} userId User ID of user whose password should be changed.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePasswordInfo} [updatePasswordInfo] 
     * @param {module:api/UsersApi~usersUserIdChangePasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdChangePasswordPut(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePasswordInfo'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdChangePasswordPut");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/changePassword', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdCheckPermissionsPost operation.
     * @callback module:api/UsersApi~usersUserIdCheckPermissionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if a user has the provided permission.
     * @param {String} userId ID of the user to check permissions for.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] 
     * @param {module:model/StringItemsWrapper} [stringItemsWrapper] List of permissions to check
     * @param {module:api/UsersApi~usersUserIdCheckPermissionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserImage}
     */
    usersUserIdCheckPermissionsPost(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['stringItemsWrapper'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdCheckPermissionsPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'teamId': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserImage;
      return this.apiClient.callApi(
        '/users/{userId}/checkPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDutyStatusGet operation.
     * @callback module:api/UsersApi~usersUserIdDutyStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDutyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get duty status by user Id
     * Returns a object with duty information.
     * @param {String} userId Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.”
     * @param {module:api/UsersApi~usersUserIdDutyStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDutyInfo}
     */
    usersUserIdDutyStatusGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDutyStatusGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserDutyInfo;
      return this.apiClient.callApi(
        '/users/{userId}/dutyStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdGet operation.
     * @callback module:api/UsersApi~usersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User by Id
     * Returns a user object with details such as his email address and duty information.
     * @param {String} userId Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.”
     * @param {module:api/UsersApi~usersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfo}
     */
    usersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserInfo;
      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdImageGet operation.
     * @callback module:api/UsersApi~usersUserIdImageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} [height] 
     * @param {Number} [width] 
     * @param {module:api/UsersApi~usersUserIdImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserImage}
     */
    usersUserIdImageGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdImageGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'height': opts['height'],
        'width': opts['width']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserImage;
      return this.apiClient.callApi(
        '/users/{userId}/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdImagePost operation.
     * @callback module:api/UsersApi~usersUserIdImagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploaded a profile image for a specified user.
     * @param {String} userId Id of the user.
     * @param {module:api/UsersApi~usersUserIdImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdImagePost(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdImagePost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdProfilePut operation.
     * @callback module:api/UsersApi~usersUserIdProfilePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user profile of an user
     * @param {String} userId ID of user to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProfile} [userProfile] 
     * @param {module:api/UsersApi~usersUserIdProfilePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfo}
     */
    usersUserIdProfilePut(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['userProfile'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilePut");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserInfo;
      return this.apiClient.callApi(
        '/users/{userId}/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPunchInAsManagerPost operation.
     * @callback module:api/UsersApi~usersUserIdPunchInAsManagerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDutyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Punch User in as Manager
     * The specified user will be punched in to duty as a manager.
     * @param {String} userId Identifier of the user to punch in. Use 'Me' to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”
     * @param {module:api/UsersApi~usersUserIdPunchInAsManagerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDutyInfo}
     */
    usersUserIdPunchInAsManagerPost(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPunchInAsManagerPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserDutyInfo;
      return this.apiClient.callApi(
        '/users/{userId}/punchInAsManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPunchInPost operation.
     * @callback module:api/UsersApi~usersUserIdPunchInPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDutyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Punch User in
     * The specified user will be punched in to duty.
     * @param {String} userId Identifier of the user to punch in. Use 'Me' to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”
     * @param {module:api/UsersApi~usersUserIdPunchInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDutyInfo}
     */
    usersUserIdPunchInPost(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPunchInPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserDutyInfo;
      return this.apiClient.callApi(
        '/users/{userId}/punchIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdPunchOutPost operation.
     * @callback module:api/UsersApi~usersUserIdPunchOutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDutyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Punch User out
     * The specified user will be punched out from duty.
     * @param {String} userId Identifier of the user to punch out. Use 'Me' to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”
     * @param {module:api/UsersApi~usersUserIdPunchOutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDutyInfo}
     */
    usersUserIdPunchOutPost(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdPunchOutPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserDutyInfo;
      return this.apiClient.callApi(
        '/users/{userId}/punchOut', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdSetupProgressGet operation.
     * @callback module:api/UsersApi~usersUserIdSetupProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSetupProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets setup progress of a specific user.
     * @param {String} userId ID of the user the progress should be retrieved for.
     * @param {module:api/UsersApi~usersUserIdSetupProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSetupProgress}
     */
    usersUserIdSetupProgressGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdSetupProgressGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserSetupProgress;
      return this.apiClient.callApi(
        '/users/{userId}/setupProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
