/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryInfo from '../model/CategoryInfo';
import CategoryMetrics from '../model/CategoryMetrics';
import CategorySubscriptionInfo from '../model/CategorySubscriptionInfo';
import ErrorResponseContent from '../model/ErrorResponseContent';

/**
* Categories service.
* @module api/CategoriesApi
* @version v1
*/
export default class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesImagesGet operation.
     * @callback module:api/CategoriesApi~categoriesImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the names of all alert category images.  You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
     * @param {module:api/CategoriesApi~categoriesImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    categoriesImagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/categories/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdDelete operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing category
     * Sample Request:                    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId ID of the category to delete
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    categoriesTeamIdCategoryIdDelete(teamId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdDelete");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdDelete");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdGet operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId ID of the category to get
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryInfo}
     */
    categoriesTeamIdCategoryIdGet(teamId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdGet");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdGet");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CategoryInfo;
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdMetricsGet operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId ID of the category to get
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryMetrics}
     */
    categoriesTeamIdCategoryIdMetricsGet(teamId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdMetricsGet");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdMetricsGet");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CategoryMetrics;
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdPut operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing category
     * Sample Request:                    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e      {          \"name\": \"Water-Updated\",          \"imageName\": \"water.svg\",          \"color\": \"#0000cc\",          \"keywordMatching\": \"All\",          \"keywords\": [              {                  \"value\": \"H2O\"              },              {                  \"value\": \"Water\"              },              {                  \"value\": \"Wet\"              }          ]      }
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryInfo} [categoryInfo] Category to be updated
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryInfo}
     */
    categoriesTeamIdCategoryIdPut(teamId, categoryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['categoryInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdPut");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdPut");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CategoryInfo;
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdSubscriptionsGet operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategorySubscriptionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get category subscriptions
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId Category to get subscriptions for
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategorySubscriptionInfo>}
     */
    categoriesTeamIdCategoryIdSubscriptionsGet(teamId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdSubscriptionsGet");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdSubscriptionsGet");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CategorySubscriptionInfo];
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdCategoryIdSubscriptionsPost operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdCategoryIdSubscriptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategorySubscriptionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set category subscriptions
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param {String} teamId ID of the team the category belongs to
     * @param {String} categoryId Category to be updated
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/CategorySubscriptionInfo>} [categorySubscriptionInfo] 
     * @param {module:api/CategoriesApi~categoriesTeamIdCategoryIdSubscriptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategorySubscriptionInfo>}
     */
    categoriesTeamIdCategoryIdSubscriptionsPost(teamId, categoryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['categorySubscriptionInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdSubscriptionsPost");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdSubscriptionsPost");
      }

      let pathParams = {
        'teamId': teamId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CategorySubscriptionInfo];
      return this.apiClient.callApi(
        '/categories/{teamId}/{categoryId}/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdGet operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
     * @param {String} teamId ID of the team the categories belong to
     * @param {module:api/CategoriesApi~categoriesTeamIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryInfo>}
     */
    categoriesTeamIdGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CategoryInfo];
      return this.apiClient.callApi(
        '/categories/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdMetricsGet operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryMetrics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
     * @param {String} teamId ID of the team the categories belongs to
     * @param {module:api/CategoriesApi~categoriesTeamIdMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryMetrics>}
     */
    categoriesTeamIdMetricsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdMetricsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CategoryMetrics];
      return this.apiClient.callApi(
        '/categories/{teamId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesTeamIdPost operation.
     * @callback module:api/CategoriesApi~categoriesTeamIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new category
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7      {          \"name\": \"Water\",          \"imageName\": \"water.svg\",          \"color\": \"#0000cc\",          \"keywordMatching\": \"Any\",          \"keywords\": [              {                  \"value\": \"H2O\"              },              {                  \"value\": \"Water\"              }          ]      }
     * @param {String} teamId ID of the team the category belongs to
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryInfo} [categoryInfo] Category to be created
     * @param {module:api/CategoriesApi~categoriesTeamIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryInfo}
     */
    categoriesTeamIdPost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['categoryInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling categoriesTeamIdPost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CategoryInfo;
      return this.apiClient.callApi(
        '/categories/{teamId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
