/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import WebhookBaseInfo from '../model/WebhookBaseInfo';
import WebhookInfo from '../model/WebhookInfo';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version v1
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getWebhookById operation.
     * @callback module:api/WebhooksApi~getWebhookByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhook by Id
     * Returns information of the webhook specified by the passed id.
     * @param {String} webhookId Id of the outbound webhook to be retrieved.
     * @param {module:api/WebhooksApi~getWebhookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getWebhookById(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getWebhookById");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/webhooks/{webhookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksGet operation.
     * @callback module:api/WebhooksApi~webhooksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebhookInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhooks
     * Returns a collection of defined outbound webhooks in the system.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] 
     * @param {module:api/WebhooksApi~webhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebhookInfo>}
     */
    webhooksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'teamId': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [WebhookInfo];
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksPost operation.
     * @callback module:api/WebhooksApi~webhooksPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Webhook
     * Creates a new outbound webhook that will be notified when certain events occur.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookBaseInfo} [webhookBaseInfo] Json object that contains the external URL of the webhook.
     * @param {module:api/WebhooksApi~webhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    webhooksPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['webhookBaseInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdDelete operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Webhook by Id
     * Deletes the specified webhook so that it will no longer be notified.
     * @param {String} webhookId Id of the outbound webhook that will be deleted.
     * @param {module:api/WebhooksApi~webhooksWebhookIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksWebhookIdDelete(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdDelete");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdDisablePost operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdDisablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ability to enable a webHook.
     * @param {String} webhookId Webhook ID for webhook which should be disabled.
     * @param {module:api/WebhooksApi~webhooksWebhookIdDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookInfo}
     */
    webhooksWebhookIdDisablePost(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdDisablePost");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = WebhookInfo;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdEnablePost operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdEnablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ability to disable a webHook.
     * @param {String} webhookId Webhook ID for webhook which should be enabled.
     * @param {module:api/WebhooksApi~webhooksWebhookIdEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookInfo}
     */
    webhooksWebhookIdEnablePost(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdEnablePost");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = WebhookInfo;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdPut operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Webhook by Id
     * Updates the specified webhook.
     * @param {String} webhookId Id of the outbound webhook to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookBaseInfo} [webhookBaseInfo] Json object containing the updated URL of the webhook.
     * @param {module:api/WebhooksApi~webhooksWebhookIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookInfo}
     */
    webhooksWebhookIdPut(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['webhookBaseInfo'];
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdPut");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = WebhookInfo;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
