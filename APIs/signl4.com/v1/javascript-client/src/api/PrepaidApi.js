/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import PrepaidBalanceInfo from '../model/PrepaidBalanceInfo';
import PrepaidSettingsInfo from '../model/PrepaidSettingsInfo';
import PrepaidTransactionInfo from '../model/PrepaidTransactionInfo';

/**
* Prepaid service.
* @module api/PrepaidApi
* @version v1
*/
export default class PrepaidApi {

    /**
    * Constructs a new PrepaidApi. 
    * @alias module:api/PrepaidApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the prepaidBalanceGet operation.
     * @callback module:api/PrepaidApi~prepaidBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidBalanceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your subscription's current prepaid balance.
     * @param {module:api/PrepaidApi~prepaidBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidBalanceInfo}
     */
    prepaidBalanceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidBalanceInfo;
      return this.apiClient.callApi(
        '/prepaid/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepaidSettingsGet operation.
     * @callback module:api/PrepaidApi~prepaidSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidSettingsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your subscription's current prepaid settings.
     * @param {module:api/PrepaidApi~prepaidSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidSettingsInfo}
     */
    prepaidSettingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidSettingsInfo;
      return this.apiClient.callApi(
        '/prepaid/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepaidSettingsPut operation.
     * @callback module:api/PrepaidApi~prepaidSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidSettingsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your subscription's current prepaid settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrepaidSettingsInfo} [prepaidSettingsInfo] Settings object containing the new values.
     * @param {module:api/PrepaidApi~prepaidSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidSettingsInfo}
     */
    prepaidSettingsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['prepaidSettingsInfo'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidSettingsInfo;
      return this.apiClient.callApi(
        '/prepaid/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepaidTransactionsGet operation.
     * @callback module:api/PrepaidApi~prepaidTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrepaidTransactionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your subscription's prepaid transactions.
     * @param {module:api/PrepaidApi~prepaidTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrepaidTransactionInfo>}
     */
    prepaidTransactionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [PrepaidTransactionInfo];
      return this.apiClient.callApi(
        '/prepaid/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdPrepaidBalanceGet operation.
     * @callback module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidBalanceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscription's current prepaid balance.
     * @param {String} subscriptionId 
     * @param {module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidBalanceInfo}
     */
    subscriptionsSubscriptionIdPrepaidBalanceGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdPrepaidBalanceGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidBalanceInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/prepaidBalance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdPrepaidSettingsGet operation.
     * @callback module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidSettingsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscription's current prepaid settings.
     * @param {String} subscriptionId 
     * @param {module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidSettingsInfo}
     */
    subscriptionsSubscriptionIdPrepaidSettingsGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdPrepaidSettingsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidSettingsInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/prepaidSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdPrepaidSettingsPut operation.
     * @callback module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrepaidSettingsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a subscription's current prepaid settings.
     * @param {String} subscriptionId ID of the subscription
     * @param {Object} opts Optional parameters
     * @param {module:model/PrepaidSettingsInfo} [prepaidSettingsInfo] Settings object containing the new values.
     * @param {module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrepaidSettingsInfo}
     */
    subscriptionsSubscriptionIdPrepaidSettingsPut(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['prepaidSettingsInfo'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdPrepaidSettingsPut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = PrepaidSettingsInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/prepaidSettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdPrepaidTransactionsGet operation.
     * @callback module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrepaidTransactionInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a subscription's prepaid transactions.
     * @param {String} subscriptionId ID of the subscription to get transactions for
     * @param {module:api/PrepaidApi~subscriptionsSubscriptionIdPrepaidTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrepaidTransactionInfo>}
     */
    subscriptionsSubscriptionIdPrepaidTransactionsGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdPrepaidTransactionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [PrepaidTransactionInfo];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/prepaidTransactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
