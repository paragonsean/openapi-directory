/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertSettings from '../model/AlertSettings';
import ErrorResponseContent from '../model/ErrorResponseContent';
import EventSourceEndpointInfo from '../model/EventSourceEndpointInfo';
import TeamInfo from '../model/TeamInfo';
import TeamProfile from '../model/TeamProfile';
import TeamSetupProgress from '../model/TeamSetupProgress';

/**
* Teams service.
* @module api/TeamsApi
* @version v1
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionsSubscriptionIdTeamsGet operation.
     * @callback module:api/TeamsApi~subscriptionsSubscriptionIdTeamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get infos for all teams of the subscription.
     * @param {String} subscriptionId 
     * @param {module:api/TeamsApi~subscriptionsSubscriptionIdTeamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamInfo>}
     */
    subscriptionsSubscriptionIdTeamsGet(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionsSubscriptionIdTeamsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [TeamInfo];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGet operation.
     * @callback module:api/TeamsApi~teamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get infos of all teams.
     * @param {module:api/TeamsApi~teamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamInfo>}
     */
    teamsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [TeamInfo];
      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdAlertReportsFileNameGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdAlertReportsFileNameGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Alert Report
     * @param {String} teamId ID of team you want to get the duty report file infos for.
     * @param {String} fileName File name of file you want to download.
     * @param {module:api/TeamsApi~teamsTeamIdAlertReportsFileNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    teamsTeamIdAlertReportsFileNameGet(teamId, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdAlertReportsFileNameGet");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling teamsTeamIdAlertReportsFileNameGet");
      }

      let pathParams = {
        'teamId': teamId,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/teams/{teamId}/alertReports/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdAlertReportsGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdAlertReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about downloadable alert reports
     * @param {String} teamId ID of team you want to download reports from.
     * @param {module:api/TeamsApi~teamsTeamIdAlertReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    teamsTeamIdAlertReportsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdAlertReportsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/teams/{teamId}/alertReports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdAlertSettingsGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdAlertSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets alert settings of a specific team.
     * @param {String} teamId ID of the team the settings should be retrieved for.
     * @param {module:api/TeamsApi~teamsTeamIdAlertSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertSettings}
     */
    teamsTeamIdAlertSettingsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdAlertSettingsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertSettings;
      return this.apiClient.callApi(
        '/teams/{teamId}/alertSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdAlertSettingsPost operation.
     * @callback module:api/TeamsApi~teamsTeamIdAlertSettingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets alert settings of a specific team.
     * @param {String} teamId ID of the team the settings should be set for.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertSettings} [alertSettings] Alert settings to be set
     * @param {module:api/TeamsApi~teamsTeamIdAlertSettingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertSettings}
     */
    teamsTeamIdAlertSettingsPost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['alertSettings'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdAlertSettingsPost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlertSettings;
      return this.apiClient.callApi(
        '/teams/{teamId}/alertSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdEventSourcesGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdEventSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventSourceEndpointInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets event sources of a specific team.
     * @param {String} teamId ID of the team the sources should be retrieved for.
     * @param {module:api/TeamsApi~teamsTeamIdEventSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventSourceEndpointInfo>}
     */
    teamsTeamIdEventSourcesGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdEventSourcesGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [EventSourceEndpointInfo];
      return this.apiClient.callApi(
        '/teams/{teamId}/eventSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets infos of a specific team.
     * @param {String} teamId ID of the team that should be retrieved.
     * @param {module:api/TeamsApi~teamsTeamIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamInfo}
     */
    teamsTeamIdGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TeamInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdProfilePut operation.
     * @callback module:api/TeamsApi~teamsTeamIdProfilePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates team profile of a team
     * @param {String} teamId Team ID of team which should be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamProfile} [teamProfile] 
     * @param {module:api/TeamsApi~teamsTeamIdProfilePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamInfo}
     */
    teamsTeamIdProfilePut(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamProfile'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdProfilePut");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TeamInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSetupProgressGet operation.
     * @callback module:api/TeamsApi~teamsTeamIdSetupProgressGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamSetupProgress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets setup progress of a specific team.
     * @param {String} teamId ID of the team the progress should be retrieved for.
     * @param {module:api/TeamsApi~teamsTeamIdSetupProgressGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamSetupProgress}
     */
    teamsTeamIdSetupProgressGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSetupProgressGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TeamSetupProgress;
      return this.apiClient.callApi(
        '/teams/{teamId}/setupProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
