/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import EventFilter from '../model/EventFilter';
import EventParameterInfo from '../model/EventParameterInfo';
import OverviewEvent from '../model/OverviewEvent';
import OverviewEventPagedResultsPublic from '../model/OverviewEventPagedResultsPublic';

/**
* Events service.
* @module api/EventsApi
* @version v1
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventsEventIdOverviewGet operation.
     * @callback module:api/EventsApi~eventsEventIdOverviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get overview event
     * Get overview event by id.
     * @param {String} eventId Id of event to get.
     * @param {module:api/EventsApi~eventsEventIdOverviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewEvent}
     */
    eventsEventIdOverviewGet(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdOverviewGet");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewEvent;
      return this.apiClient.callApi(
        '/events/{eventId}/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdParametersGet operation.
     * @callback module:api/EventsApi~eventsEventIdParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventParameterInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event parameters
     * Get parameters of an event by id.
     * @param {String} eventId Event Id of the requested Alert.
     * @param {module:api/EventsApi~eventsEventIdParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventParameterInfo>}
     */
    eventsEventIdParametersGet(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdParametersGet");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [EventParameterInfo];
      return this.apiClient.callApi(
        '/events/{eventId}/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsPagedPost operation.
     * @callback module:api/EventsApi~eventsPagedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverviewEventPagedResultsPublic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get overview event paged.
     * Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                   Number of alerts could be less if filtered but at least 1.
     * @param {module:model/EventFilter} [eventFilter] The filter defines which alerts are supposed to be retrieved.
     * @param {module:api/EventsApi~eventsPagedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverviewEventPagedResultsPublic}
     */
    eventsPagedPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['eventFilter'];

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = OverviewEventPagedResultsPublic;
      return this.apiClient.callApi(
        '/events/paged', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
