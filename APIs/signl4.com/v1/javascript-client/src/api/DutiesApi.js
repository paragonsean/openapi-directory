/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteRangeInfo from '../model/DeleteRangeInfo';
import ErrorResponseContent from '../model/ErrorResponseContent';
import ScheduleInfo from '../model/ScheduleInfo';
import TeamDutySummaryInfo from '../model/TeamDutySummaryInfo';

/**
* Duties service.
* @module api/DutiesApi
* @version v1
*/
export default class DutiesApi {

    /**
    * Constructs a new DutiesApi. 
    * @alias module:api/DutiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsTeamIdDutyReportsFileNameGet operation.
     * @callback module:api/DutiesApi~teamsTeamIdDutyReportsFileNameGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download duty report with a specific fileName
     * @param {String} teamId ID of team you want to download the duty report for.
     * @param {String} fileName Filename of the csv to download.
     * @param {module:api/DutiesApi~teamsTeamIdDutyReportsFileNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    teamsTeamIdDutyReportsFileNameGet(teamId, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdDutyReportsFileNameGet");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling teamsTeamIdDutyReportsFileNameGet");
      }

      let pathParams = {
        'teamId': teamId,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/teams/{teamId}/dutyReports/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdDutyReportsGet operation.
     * @callback module:api/DutiesApi~teamsTeamIdDutyReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Information about downloadable reports
     * @param {String} teamId ID of team you want to get the duty report file infos for.
     * @param {module:api/DutiesApi~teamsTeamIdDutyReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    teamsTeamIdDutyReportsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdDutyReportsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/teams/{teamId}/dutyReports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdDutysummaryGet operation.
     * @callback module:api/DutiesApi~teamsTeamIdDutysummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDutySummaryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get duty assistant info for a team
     * @param {String} teamId ID of the team the duty belongs to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [lastTwoDuties] 
     * @param {module:api/DutiesApi~teamsTeamIdDutysummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDutySummaryInfo}
     */
    teamsTeamIdDutysummaryGet(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdDutysummaryGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
        'lastTwoDuties': opts['lastTwoDuties']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TeamDutySummaryInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}/dutysummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesDeleteRangePost operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesDeleteRangePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete duty schedules in range
     * @param {String} teamId Team ID you want to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteRangeInfo} [deleteRangeInfo] Information with date range to delete from to
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesDeleteRangePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleInfo>}
     */
    teamsTeamIdSchedulesDeleteRangePost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteRangeInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesDeleteRangePost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ScheduleInfo];
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules/deleteRange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesDutyIdDelete operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesDutyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific duty.
     * @param {String} teamId ID of the team the duty belongs to.
     * @param {String} dutyId ID of the duty to be deleted.
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesDutyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsTeamIdSchedulesDutyIdDelete(teamId, dutyId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesDutyIdDelete");
      }
      // verify the required parameter 'dutyId' is set
      if (dutyId === undefined || dutyId === null) {
        throw new Error("Missing the required parameter 'dutyId' when calling teamsTeamIdSchedulesDutyIdDelete");
      }

      let pathParams = {
        'teamId': teamId,
        'dutyId': dutyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules/{dutyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesGet operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about all duties that belong to the team.
     * @param {String} teamId Id of the team the schedules user belongs to
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {Date} [minDate] 
     * @param {Number} [limit] 
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleInfo>}
     */
    teamsTeamIdSchedulesGet(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
        'UserId': opts['userId'],
        'MinDate': opts['minDate'],
        'Limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ScheduleInfo];
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesMultiplePost operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesMultiplePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save multiple schedules. It is possible to override existing schedules if you wish
     * @param {String} teamId Team ID to set
     * @param {Object} opts Optional parameters
     * @param {Boolean} [overrideExisting] Override or cut existing schedules if set to true.
     * @param {Array.<module:model/ScheduleInfo>} [scheduleInfo] List of schedules to save
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesMultiplePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleInfo>}
     */
    teamsTeamIdSchedulesMultiplePost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['scheduleInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesMultiplePost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
        'overrideExisting': opts['overrideExisting']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ScheduleInfo];
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules/multiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesPost operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/Update given duty schedule.
     * @param {String} teamId Id of the team the duty is to be assigned to.
     * @param {Object} opts Optional parameters
     * @param {module:model/ScheduleInfo} [scheduleInfo] information about the duty schedule to be created
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleInfo}
     */
    teamsTeamIdSchedulesPost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['scheduleInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesPost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScheduleInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdSchedulesScheduleIdGet operation.
     * @callback module:api/DutiesApi~teamsTeamIdSchedulesScheduleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information of the duty schedule with the specified Id.
     * @param {String} teamId Id of the team the duty belongs to
     * @param {String} scheduleId Id of the requested duty schedule.
     * @param {module:api/DutiesApi~teamsTeamIdSchedulesScheduleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleInfo}
     */
    teamsTeamIdSchedulesScheduleIdGet(teamId, scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdSchedulesScheduleIdGet");
      }
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling teamsTeamIdSchedulesScheduleIdGet");
      }

      let pathParams = {
        'teamId': teamId,
        'scheduleId': scheduleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ScheduleInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}/schedules/{scheduleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
