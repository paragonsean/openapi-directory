/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponseContent from '../model/ErrorResponseContent';
import InvitedUserInfo from '../model/InvitedUserInfo';
import UserInfo from '../model/UserInfo';
import UserInvitationInfo from '../model/UserInvitationInfo';
import UserInvitationResult from '../model/UserInvitationResult';
import UserMembership from '../model/UserMembership';
import UsersInvitation from '../model/UsersInvitation';

/**
* TeamsMemberships service.
* @module api/TeamsMembershipsApi
* @version v1
*/
export default class TeamsMembershipsApi {

    /**
    * Constructs a new TeamsMembershipsApi. 
    * @alias module:api/TeamsMembershipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsTeamIdMembershipsGet operation.
     * @callback module:api/TeamsMembershipsApi~teamsTeamIdMembershipsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvitedUserInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invites of a team.
     * @param {String} teamId Team ID of team you want to request.
     * @param {module:api/TeamsMembershipsApi~teamsTeamIdMembershipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvitedUserInfo>}
     */
    teamsTeamIdMembershipsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [InvitedUserInfo];
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdMembershipsPost operation.
     * @callback module:api/TeamsMembershipsApi~teamsTeamIdMembershipsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserInvitationResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite users to a team
     * @param {String} teamId Id of team the user should be invited to.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersInvitation} [usersInvitation] Information about user to invite and inviter id.
     * @param {module:api/TeamsMembershipsApi~teamsTeamIdMembershipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserInvitationResult>}
     */
    teamsTeamIdMembershipsPost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersInvitation'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsPost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [UserInvitationResult];
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdMembershipsResendInviteMailPost operation.
     * @callback module:api/TeamsMembershipsApi~teamsTeamIdMembershipsResendInviteMailPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends invite email again if an invite exists
     * @param {String} teamId Team ID of team with invited user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInvitationInfo} [userInvitationInfo] Information which user should be invited again.
     * @param {module:api/TeamsMembershipsApi~teamsTeamIdMembershipsResendInviteMailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    teamsTeamIdMembershipsResendInviteMailPost(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['userInvitationInfo'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsResendInviteMailPost");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/resendInviteMail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdMembershipsUserIdDelete operation.
     * @callback module:api/TeamsMembershipsApi~teamsTeamIdMembershipsUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user or invitation from a team, and may delete the user if he is not in any team.
     * @param {String} teamId ID of the team the user should be deleted from
     * @param {String} userId ID of the user that should be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [requesterUserId] User ID of user which will remove the other user.
     * @param {module:api/TeamsMembershipsApi~teamsTeamIdMembershipsUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    teamsTeamIdMembershipsUserIdDelete(teamId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling teamsTeamIdMembershipsUserIdDelete");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
        'requesterUserId': opts['requesterUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdMembershipsUserIdPut operation.
     * @callback module:api/TeamsMembershipsApi~teamsTeamIdMembershipsUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user's team membership.
     * Updates the user's team membership. You can move the user to another team within the subscription  and/or change the user's role.
     * @param {String} teamId Team the user you want to update belongs to at the moment.
     * @param {String} userId User ID of user you want to update.
     * @param {Object} opts Optional parameters
     * @param {String} [requesterUserId] User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights.
     * @param {module:model/UserMembership} [userMembership] Information about role id and target team id.
     * @param {module:api/TeamsMembershipsApi~teamsTeamIdMembershipsUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInfo}
     */
    teamsTeamIdMembershipsUserIdPut(teamId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['userMembership'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsUserIdPut");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling teamsTeamIdMembershipsUserIdPut");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
        'requesterUserId': opts['requesterUserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserInfo;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
