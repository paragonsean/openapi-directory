/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertNotificationInfoChannelType from './AlertNotificationInfoChannelType';
import AlertNotificationInfoMessageStatus from './AlertNotificationInfoMessageStatus';
import AlertNotificationInfoUserStatus from './AlertNotificationInfoUserStatus';

/**
 * The AlertNotificationInfo model module.
 * @module model/AlertNotificationInfo
 * @version v1
 */
class AlertNotificationInfo {
    /**
     * Constructs a new <code>AlertNotificationInfo</code>.
     * @alias module:model/AlertNotificationInfo
     */
    constructor() { 
        
        AlertNotificationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertNotificationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertNotificationInfo} obj Optional instance to populate.
     * @return {module:model/AlertNotificationInfo} The populated <code>AlertNotificationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertNotificationInfo();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('channelType')) {
                obj['channelType'] = AlertNotificationInfoChannelType.constructFromObject(data['channelType']);
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('messageStatus')) {
                obj['messageStatus'] = AlertNotificationInfoMessageStatus.constructFromObject(data['messageStatus']);
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('userStatus')) {
                obj['userStatus'] = AlertNotificationInfoUserStatus.constructFromObject(data['userStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertNotificationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertNotificationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {String} address
 */
AlertNotificationInfo.prototype['address'] = undefined;

/**
 * @member {module:model/AlertNotificationInfoChannelType} channelType
 */
AlertNotificationInfo.prototype['channelType'] = undefined;

/**
 * @member {String} deviceName
 */
AlertNotificationInfo.prototype['deviceName'] = undefined;

/**
 * @member {Date} lastUpdate
 */
AlertNotificationInfo.prototype['lastUpdate'] = undefined;

/**
 * @member {module:model/AlertNotificationInfoMessageStatus} messageStatus
 */
AlertNotificationInfo.prototype['messageStatus'] = undefined;

/**
 * @member {String} userId
 */
AlertNotificationInfo.prototype['userId'] = undefined;

/**
 * @member {module:model/AlertNotificationInfoUserStatus} userStatus
 */
AlertNotificationInfo.prototype['userStatus'] = undefined;






export default AlertNotificationInfo;

