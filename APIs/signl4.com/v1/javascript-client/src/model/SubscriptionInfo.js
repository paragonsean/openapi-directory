/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionInfo model module.
 * @module model/SubscriptionInfo
 * @version v1
 */
class SubscriptionInfo {
    /**
     * Constructs a new <code>SubscriptionInfo</code>.
     * @alias module:model/SubscriptionInfo
     */
    constructor() { 
        
        SubscriptionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionInfo} obj Optional instance to populate.
     * @return {module:model/SubscriptionInfo} The populated <code>SubscriptionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionInfo();

            if (data.hasOwnProperty('branchId')) {
                obj['branchId'] = ApiClient.convertToType(data['branchId'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('externalAccountId')) {
                obj['externalAccountId'] = ApiClient.convertToType(data['externalAccountId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nextBilling')) {
                obj['nextBilling'] = ApiClient.convertToType(data['nextBilling'], 'Date');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('planCode')) {
                obj['planCode'] = ApiClient.convertToType(data['planCode'], 'String');
            }
            if (data.hasOwnProperty('planState')) {
                obj['planState'] = ApiClient.convertToType(data['planState'], 'Number');
            }
            if (data.hasOwnProperty('referralEnabled')) {
                obj['referralEnabled'] = ApiClient.convertToType(data['referralEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branchId'] && !(typeof data['branchId'] === 'string' || data['branchId'] instanceof String)) {
            throw new Error("Expected the field `branchId` to be a primitive type in the JSON string but got " + data['branchId']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['externalAccountId'] && !(typeof data['externalAccountId'] === 'string' || data['externalAccountId'] instanceof String)) {
            throw new Error("Expected the field `externalAccountId` to be a primitive type in the JSON string but got " + data['externalAccountId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['planCode'] && !(typeof data['planCode'] === 'string' || data['planCode'] instanceof String)) {
            throw new Error("Expected the field `planCode` to be a primitive type in the JSON string but got " + data['planCode']);
        }

        return true;
    }


}



/**
 * @member {String} branchId
 */
SubscriptionInfo.prototype['branchId'] = undefined;

/**
 * @member {String} country
 */
SubscriptionInfo.prototype['country'] = undefined;

/**
 * @member {String} currency
 */
SubscriptionInfo.prototype['currency'] = undefined;

/**
 * @member {String} externalAccountId
 */
SubscriptionInfo.prototype['externalAccountId'] = undefined;

/**
 * @member {String} id
 */
SubscriptionInfo.prototype['id'] = undefined;

/**
 * @member {String} name
 */
SubscriptionInfo.prototype['name'] = undefined;

/**
 * @member {Date} nextBilling
 */
SubscriptionInfo.prototype['nextBilling'] = undefined;

/**
 * @member {String} ownerId
 */
SubscriptionInfo.prototype['ownerId'] = undefined;

/**
 * @member {String} planCode
 */
SubscriptionInfo.prototype['planCode'] = undefined;

/**
 * @member {Number} planState
 */
SubscriptionInfo.prototype['planState'] = undefined;

/**
 * @member {Boolean} referralEnabled
 */
SubscriptionInfo.prototype['referralEnabled'] = undefined;

/**
 * @member {Number} status
 */
SubscriptionInfo.prototype['status'] = undefined;






export default SubscriptionInfo;

