/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrepaidTransactionInfo model module.
 * @module model/PrepaidTransactionInfo
 * @version v1
 */
class PrepaidTransactionInfo {
    /**
     * Constructs a new <code>PrepaidTransactionInfo</code>.
     * @alias module:model/PrepaidTransactionInfo
     */
    constructor() { 
        
        PrepaidTransactionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrepaidTransactionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepaidTransactionInfo} obj Optional instance to populate.
     * @return {module:model/PrepaidTransactionInfo} The populated <code>PrepaidTransactionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrepaidTransactionInfo();

            if (data.hasOwnProperty('autoTopUpId')) {
                obj['autoTopUpId'] = ApiClient.convertToType(data['autoTopUpId'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('packageCode')) {
                obj['packageCode'] = ApiClient.convertToType(data['packageCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrepaidTransactionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrepaidTransactionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoTopUpId'] && !(typeof data['autoTopUpId'] === 'string' || data['autoTopUpId'] instanceof String)) {
            throw new Error("Expected the field `autoTopUpId` to be a primitive type in the JSON string but got " + data['autoTopUpId']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['packageCode'] && !(typeof data['packageCode'] === 'string' || data['packageCode'] instanceof String)) {
            throw new Error("Expected the field `packageCode` to be a primitive type in the JSON string but got " + data['packageCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * @member {String} autoTopUpId
 */
PrepaidTransactionInfo.prototype['autoTopUpId'] = undefined;

/**
 * @member {Date} created
 */
PrepaidTransactionInfo.prototype['created'] = undefined;

/**
 * @member {String} createdBy
 */
PrepaidTransactionInfo.prototype['createdBy'] = undefined;

/**
 * @member {Number} credits
 */
PrepaidTransactionInfo.prototype['credits'] = undefined;

/**
 * @member {String} currency
 */
PrepaidTransactionInfo.prototype['currency'] = undefined;

/**
 * @member {Date} modified
 */
PrepaidTransactionInfo.prototype['modified'] = undefined;

/**
 * @member {String} packageCode
 */
PrepaidTransactionInfo.prototype['packageCode'] = undefined;

/**
 * @member {String} status
 */
PrepaidTransactionInfo.prototype['status'] = undefined;

/**
 * @member {Number} statusCode
 */
PrepaidTransactionInfo.prototype['statusCode'] = undefined;

/**
 * @member {String} subscriptionId
 */
PrepaidTransactionInfo.prototype['subscriptionId'] = undefined;

/**
 * @member {String} transactionId
 */
PrepaidTransactionInfo.prototype['transactionId'] = undefined;






export default PrepaidTransactionInfo;

