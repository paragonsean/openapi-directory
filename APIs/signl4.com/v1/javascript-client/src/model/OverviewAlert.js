/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertAnnotationInfo from './AlertAnnotationInfo';
import AlertDeliveryStatusInfo from './AlertDeliveryStatusInfo';
import AlertHistoryInfoDetailed from './AlertHistoryInfoDetailed';
import AlertStatusCodes from './AlertStatusCodes';

/**
 * The OverviewAlert model module.
 * @module model/OverviewAlert
 * @version v1
 */
class OverviewAlert {
    /**
     * Constructs a new <code>OverviewAlert</code>.
     * @alias module:model/OverviewAlert
     */
    constructor() { 
        
        OverviewAlert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OverviewAlert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OverviewAlert} obj Optional instance to populate.
     * @return {module:model/OverviewAlert} The populated <code>OverviewAlert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OverviewAlert();

            if (data.hasOwnProperty('alertDeliveryStatus')) {
                obj['alertDeliveryStatus'] = AlertDeliveryStatusInfo.constructFromObject(data['alertDeliveryStatus']);
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], [AlertAnnotationInfo]);
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], 'Number');
            }
            if (data.hasOwnProperty('historyDetailed')) {
                obj['historyDetailed'] = AlertHistoryInfoDetailed.constructFromObject(data['historyDetailed']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('requiredAcknowledgements')) {
                obj['requiredAcknowledgements'] = ApiClient.convertToType(data['requiredAcknowledgements'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = AlertStatusCodes.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OverviewAlert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OverviewAlert</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alertDeliveryStatus`
        if (data['alertDeliveryStatus']) { // data not null
          AlertDeliveryStatusInfo.validateJSON(data['alertDeliveryStatus']);
        }
        if (data['annotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['annotations'])) {
                throw new Error("Expected the field `annotations` to be an array in the JSON data but got " + data['annotations']);
            }
            // validate the optional field `annotations` (array)
            for (const item of data['annotations']) {
                AlertAnnotationInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // validate the optional field `historyDetailed`
        if (data['historyDetailed']) { // data not null
          AlertHistoryInfoDetailed.validateJSON(data['historyDetailed']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/AlertDeliveryStatusInfo} alertDeliveryStatus
 */
OverviewAlert.prototype['alertDeliveryStatus'] = undefined;

/**
 * @member {Array.<module:model/AlertAnnotationInfo>} annotations
 */
OverviewAlert.prototype['annotations'] = undefined;

/**
 * @member {String} categoryId
 */
OverviewAlert.prototype['categoryId'] = undefined;

/**
 * @member {String} eventId
 */
OverviewAlert.prototype['eventId'] = undefined;

/**
 * @member {Number} flags
 */
OverviewAlert.prototype['flags'] = undefined;

/**
 * @member {module:model/AlertHistoryInfoDetailed} historyDetailed
 */
OverviewAlert.prototype['historyDetailed'] = undefined;

/**
 * @member {String} id
 */
OverviewAlert.prototype['id'] = undefined;

/**
 * @member {Date} lastModified
 */
OverviewAlert.prototype['lastModified'] = undefined;

/**
 * @member {Number} requiredAcknowledgements
 */
OverviewAlert.prototype['requiredAcknowledgements'] = undefined;

/**
 * @member {module:model/AlertStatusCodes} status
 */
OverviewAlert.prototype['status'] = undefined;

/**
 * @member {String} subscriptionId
 */
OverviewAlert.prototype['subscriptionId'] = undefined;

/**
 * @member {String} teamId
 */
OverviewAlert.prototype['teamId'] = undefined;

/**
 * @member {String} text
 */
OverviewAlert.prototype['text'] = undefined;

/**
 * @member {String} title
 */
OverviewAlert.prototype['title'] = undefined;






export default OverviewAlert;

