/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactAddressInfo from './ContactAddressInfo';
import UserDutyInfo from './UserDutyInfo';

/**
 * The UserInfo model module.
 * @module model/UserInfo
 * @version v1
 */
class UserInfo {
    /**
     * Constructs a new <code>UserInfo</code>.
     * @alias module:model/UserInfo
     */
    constructor() { 
        
        UserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInfo} obj Optional instance to populate.
     * @return {module:model/UserInfo} The populated <code>UserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInfo();

            if (data.hasOwnProperty('colorIndex')) {
                obj['colorIndex'] = ApiClient.convertToType(data['colorIndex'], 'Number');
            }
            if (data.hasOwnProperty('contactAddresses')) {
                obj['contactAddresses'] = ApiClient.convertToType(data['contactAddresses'], [ContactAddressInfo]);
            }
            if (data.hasOwnProperty('dutyInfo')) {
                obj['dutyInfo'] = UserDutyInfo.constructFromObject(data['dutyInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDeactivated')) {
                obj['isDeactivated'] = ApiClient.convertToType(data['isDeactivated'], 'Boolean');
            }
            if (data.hasOwnProperty('isInvite')) {
                obj['isInvite'] = ApiClient.convertToType(data['isInvite'], 'Boolean');
            }
            if (data.hasOwnProperty('mail')) {
                obj['mail'] = ApiClient.convertToType(data['mail'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roleId')) {
                obj['roleId'] = ApiClient.convertToType(data['roleId'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('userImageLastModified')) {
                obj['userImageLastModified'] = ApiClient.convertToType(data['userImageLastModified'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserInfo</code>.
     */
    static validateJSON(data) {
        if (data['contactAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contactAddresses'])) {
                throw new Error("Expected the field `contactAddresses` to be an array in the JSON data but got " + data['contactAddresses']);
            }
            // validate the optional field `contactAddresses` (array)
            for (const item of data['contactAddresses']) {
                ContactAddressInfo.validateJSON(item);
            };
        }
        // validate the optional field `dutyInfo`
        if (data['dutyInfo']) { // data not null
          UserDutyInfo.validateJSON(data['dutyInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['mail'] && !(typeof data['mail'] === 'string' || data['mail'] instanceof String)) {
            throw new Error("Expected the field `mail` to be a primitive type in the JSON string but got " + data['mail']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['roleId'] && !(typeof data['roleId'] === 'string' || data['roleId'] instanceof String)) {
            throw new Error("Expected the field `roleId` to be a primitive type in the JSON string but got " + data['roleId']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {Number} colorIndex
 */
UserInfo.prototype['colorIndex'] = undefined;

/**
 * @member {Array.<module:model/ContactAddressInfo>} contactAddresses
 */
UserInfo.prototype['contactAddresses'] = undefined;

/**
 * @member {module:model/UserDutyInfo} dutyInfo
 */
UserInfo.prototype['dutyInfo'] = undefined;

/**
 * @member {String} id
 */
UserInfo.prototype['id'] = undefined;

/**
 * @member {Boolean} isDeactivated
 */
UserInfo.prototype['isDeactivated'] = undefined;

/**
 * @member {Boolean} isInvite
 */
UserInfo.prototype['isInvite'] = undefined;

/**
 * @member {String} mail
 */
UserInfo.prototype['mail'] = undefined;

/**
 * @member {String} name
 */
UserInfo.prototype['name'] = undefined;

/**
 * @member {String} roleId
 */
UserInfo.prototype['roleId'] = undefined;

/**
 * @member {String} subscriptionId
 */
UserInfo.prototype['subscriptionId'] = undefined;

/**
 * @member {String} timeZone
 */
UserInfo.prototype['timeZone'] = undefined;

/**
 * @member {Date} userImageLastModified
 */
UserInfo.prototype['userImageLastModified'] = undefined;






export default UserInfo;

