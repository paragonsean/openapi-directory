/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserLicenseInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserLicenseInfo::OAIUserLicenseInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserLicenseInfo::OAIUserLicenseInfo() {
    this->initializeModel();
}

OAIUserLicenseInfo::~OAIUserLicenseInfo() {}

void OAIUserLicenseInfo::initializeModel() {

    m_current_users_isSet = false;
    m_current_users_isValid = false;

    m_is_free_isSet = false;
    m_is_free_isValid = false;

    m_is_trial_isSet = false;
    m_is_trial_isValid = false;

    m_licensed_users_isSet = false;
    m_licensed_users_isValid = false;

    m_plan_code_isSet = false;
    m_plan_code_isValid = false;
}

void OAIUserLicenseInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserLicenseInfo::fromJsonObject(QJsonObject json) {

    m_current_users_isValid = ::OpenAPI::fromJsonValue(m_current_users, json[QString("currentUsers")]);
    m_current_users_isSet = !json[QString("currentUsers")].isNull() && m_current_users_isValid;

    m_is_free_isValid = ::OpenAPI::fromJsonValue(m_is_free, json[QString("isFree")]);
    m_is_free_isSet = !json[QString("isFree")].isNull() && m_is_free_isValid;

    m_is_trial_isValid = ::OpenAPI::fromJsonValue(m_is_trial, json[QString("isTrial")]);
    m_is_trial_isSet = !json[QString("isTrial")].isNull() && m_is_trial_isValid;

    m_licensed_users_isValid = ::OpenAPI::fromJsonValue(m_licensed_users, json[QString("licensedUsers")]);
    m_licensed_users_isSet = !json[QString("licensedUsers")].isNull() && m_licensed_users_isValid;

    m_plan_code_isValid = ::OpenAPI::fromJsonValue(m_plan_code, json[QString("planCode")]);
    m_plan_code_isSet = !json[QString("planCode")].isNull() && m_plan_code_isValid;
}

QString OAIUserLicenseInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserLicenseInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_users_isSet) {
        obj.insert(QString("currentUsers"), ::OpenAPI::toJsonValue(m_current_users));
    }
    if (m_is_free_isSet) {
        obj.insert(QString("isFree"), ::OpenAPI::toJsonValue(m_is_free));
    }
    if (m_is_trial_isSet) {
        obj.insert(QString("isTrial"), ::OpenAPI::toJsonValue(m_is_trial));
    }
    if (m_licensed_users_isSet) {
        obj.insert(QString("licensedUsers"), ::OpenAPI::toJsonValue(m_licensed_users));
    }
    if (m_plan_code_isSet) {
        obj.insert(QString("planCode"), ::OpenAPI::toJsonValue(m_plan_code));
    }
    return obj;
}

qint32 OAIUserLicenseInfo::getCurrentUsers() const {
    return m_current_users;
}
void OAIUserLicenseInfo::setCurrentUsers(const qint32 &current_users) {
    m_current_users = current_users;
    m_current_users_isSet = true;
}

bool OAIUserLicenseInfo::is_current_users_Set() const{
    return m_current_users_isSet;
}

bool OAIUserLicenseInfo::is_current_users_Valid() const{
    return m_current_users_isValid;
}

bool OAIUserLicenseInfo::isIsFree() const {
    return m_is_free;
}
void OAIUserLicenseInfo::setIsFree(const bool &is_free) {
    m_is_free = is_free;
    m_is_free_isSet = true;
}

bool OAIUserLicenseInfo::is_is_free_Set() const{
    return m_is_free_isSet;
}

bool OAIUserLicenseInfo::is_is_free_Valid() const{
    return m_is_free_isValid;
}

bool OAIUserLicenseInfo::isIsTrial() const {
    return m_is_trial;
}
void OAIUserLicenseInfo::setIsTrial(const bool &is_trial) {
    m_is_trial = is_trial;
    m_is_trial_isSet = true;
}

bool OAIUserLicenseInfo::is_is_trial_Set() const{
    return m_is_trial_isSet;
}

bool OAIUserLicenseInfo::is_is_trial_Valid() const{
    return m_is_trial_isValid;
}

qint32 OAIUserLicenseInfo::getLicensedUsers() const {
    return m_licensed_users;
}
void OAIUserLicenseInfo::setLicensedUsers(const qint32 &licensed_users) {
    m_licensed_users = licensed_users;
    m_licensed_users_isSet = true;
}

bool OAIUserLicenseInfo::is_licensed_users_Set() const{
    return m_licensed_users_isSet;
}

bool OAIUserLicenseInfo::is_licensed_users_Valid() const{
    return m_licensed_users_isValid;
}

QString OAIUserLicenseInfo::getPlanCode() const {
    return m_plan_code;
}
void OAIUserLicenseInfo::setPlanCode(const QString &plan_code) {
    m_plan_code = plan_code;
    m_plan_code_isSet = true;
}

bool OAIUserLicenseInfo::is_plan_code_Set() const{
    return m_plan_code_isSet;
}

bool OAIUserLicenseInfo::is_plan_code_Valid() const{
    return m_plan_code_isValid;
}

bool OAIUserLicenseInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_trial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensed_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserLicenseInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
