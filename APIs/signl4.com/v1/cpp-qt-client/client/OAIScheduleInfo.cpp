/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleInfo::OAIScheduleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleInfo::OAIScheduleInfo() {
    this->initializeModel();
}

OAIScheduleInfo::~OAIScheduleInfo() {}

void OAIScheduleInfo::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIScheduleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleInfo::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIScheduleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIScheduleInfo::getEnd() const {
    return m_end;
}
void OAIScheduleInfo::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIScheduleInfo::is_end_Set() const{
    return m_end_isSet;
}

bool OAIScheduleInfo::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIScheduleInfo::getId() const {
    return m_id;
}
void OAIScheduleInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduleInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduleInfo::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIScheduleInfo::getOptions() const {
    return m_options;
}
void OAIScheduleInfo::setOptions(const qint32 &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIScheduleInfo::is_options_Set() const{
    return m_options_isSet;
}

bool OAIScheduleInfo::is_options_Valid() const{
    return m_options_isValid;
}

QDateTime OAIScheduleInfo::getStart() const {
    return m_start;
}
void OAIScheduleInfo::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIScheduleInfo::is_start_Set() const{
    return m_start_isSet;
}

bool OAIScheduleInfo::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIScheduleInfo::getUserId() const {
    return m_user_id;
}
void OAIScheduleInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIScheduleInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIScheduleInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIScheduleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
