/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrepaidTransactionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrepaidTransactionInfo::OAIPrepaidTransactionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrepaidTransactionInfo::OAIPrepaidTransactionInfo() {
    this->initializeModel();
}

OAIPrepaidTransactionInfo::~OAIPrepaidTransactionInfo() {}

void OAIPrepaidTransactionInfo::initializeModel() {

    m_auto_top_up_id_isSet = false;
    m_auto_top_up_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_package_code_isSet = false;
    m_package_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIPrepaidTransactionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrepaidTransactionInfo::fromJsonObject(QJsonObject json) {

    m_auto_top_up_id_isValid = ::OpenAPI::fromJsonValue(m_auto_top_up_id, json[QString("autoTopUpId")]);
    m_auto_top_up_id_isSet = !json[QString("autoTopUpId")].isNull() && m_auto_top_up_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_package_code_isValid = ::OpenAPI::fromJsonValue(m_package_code, json[QString("packageCode")]);
    m_package_code_isSet = !json[QString("packageCode")].isNull() && m_package_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIPrepaidTransactionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrepaidTransactionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_top_up_id_isSet) {
        obj.insert(QString("autoTopUpId"), ::OpenAPI::toJsonValue(m_auto_top_up_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_credits_isSet) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_package_code_isSet) {
        obj.insert(QString("packageCode"), ::OpenAPI::toJsonValue(m_package_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIPrepaidTransactionInfo::getAutoTopUpId() const {
    return m_auto_top_up_id;
}
void OAIPrepaidTransactionInfo::setAutoTopUpId(const QString &auto_top_up_id) {
    m_auto_top_up_id = auto_top_up_id;
    m_auto_top_up_id_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_auto_top_up_id_Set() const{
    return m_auto_top_up_id_isSet;
}

bool OAIPrepaidTransactionInfo::is_auto_top_up_id_Valid() const{
    return m_auto_top_up_id_isValid;
}

QDateTime OAIPrepaidTransactionInfo::getCreated() const {
    return m_created;
}
void OAIPrepaidTransactionInfo::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPrepaidTransactionInfo::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPrepaidTransactionInfo::getCreatedBy() const {
    return m_created_by;
}
void OAIPrepaidTransactionInfo::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPrepaidTransactionInfo::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint32 OAIPrepaidTransactionInfo::getCredits() const {
    return m_credits;
}
void OAIPrepaidTransactionInfo::setCredits(const qint32 &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIPrepaidTransactionInfo::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIPrepaidTransactionInfo::getCurrency() const {
    return m_currency;
}
void OAIPrepaidTransactionInfo::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPrepaidTransactionInfo::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIPrepaidTransactionInfo::getModified() const {
    return m_modified;
}
void OAIPrepaidTransactionInfo::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIPrepaidTransactionInfo::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIPrepaidTransactionInfo::getPackageCode() const {
    return m_package_code;
}
void OAIPrepaidTransactionInfo::setPackageCode(const QString &package_code) {
    m_package_code = package_code;
    m_package_code_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_package_code_Set() const{
    return m_package_code_isSet;
}

bool OAIPrepaidTransactionInfo::is_package_code_Valid() const{
    return m_package_code_isValid;
}

QString OAIPrepaidTransactionInfo::getStatus() const {
    return m_status;
}
void OAIPrepaidTransactionInfo::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrepaidTransactionInfo::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIPrepaidTransactionInfo::getStatusCode() const {
    return m_status_code;
}
void OAIPrepaidTransactionInfo::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIPrepaidTransactionInfo::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIPrepaidTransactionInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIPrepaidTransactionInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIPrepaidTransactionInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIPrepaidTransactionInfo::getTransactionId() const {
    return m_transaction_id;
}
void OAIPrepaidTransactionInfo::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIPrepaidTransactionInfo::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIPrepaidTransactionInfo::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIPrepaidTransactionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_top_up_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrepaidTransactionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
