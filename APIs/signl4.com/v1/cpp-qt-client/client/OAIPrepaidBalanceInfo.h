/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrepaidBalanceInfo.h
 *
 * 
 */

#ifndef OAIPrepaidBalanceInfo_H
#define OAIPrepaidBalanceInfo_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPrepaidBalanceInfo : public OAIObject {
public:
    OAIPrepaidBalanceInfo();
    OAIPrepaidBalanceInfo(QString json);
    ~OAIPrepaidBalanceInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBalance() const;
    void setBalance(const qint32 &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    QDateTime getLatestTopUp() const;
    void setLatestTopUp(const QDateTime &latest_top_up);
    bool is_latest_top_up_Set() const;
    bool is_latest_top_up_Valid() const;

    bool isPendingTransaction() const;
    void setPendingTransaction(const bool &pending_transaction);
    bool is_pending_transaction_Set() const;
    bool is_pending_transaction_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    QDateTime m_latest_top_up;
    bool m_latest_top_up_isSet;
    bool m_latest_top_up_isValid;

    bool m_pending_transaction;
    bool m_pending_transaction_isSet;
    bool m_pending_transaction_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrepaidBalanceInfo)

#endif // OAIPrepaidBalanceInfo_H
