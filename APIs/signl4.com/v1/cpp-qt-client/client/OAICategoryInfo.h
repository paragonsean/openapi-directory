/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICategoryInfo.h
 *
 * 
 */

#ifndef OAICategoryInfo_H
#define OAICategoryInfo_H

#include <QJsonObject>

#include "OAICategoryAugmentation.h"
#include "OAICategoryInfoOptions.h"
#include "OAIKeywordMatchingType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategoryAugmentation;

class OAICategoryInfo : public OAIObject {
public:
    OAICategoryInfo();
    OAICategoryInfo(QString json);
    ~OAICategoryInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICategoryAugmentation> getAugmentations() const;
    void setAugmentations(const QList<OAICategoryAugmentation> &augmentations);
    bool is_augmentations_Set() const;
    bool is_augmentations_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImageName() const;
    void setImageName(const QString &image_name);
    bool is_image_name_Set() const;
    bool is_image_name_Valid() const;

    bool isIsDefault() const;
    void setIsDefault(const bool &is_default);
    bool is_is_default_Set() const;
    bool is_is_default_Valid() const;

    OAIKeywordMatchingType getKeywordMatching() const;
    void setKeywordMatching(const OAIKeywordMatchingType &keyword_matching);
    bool is_keyword_matching_Set() const;
    bool is_keyword_matching_Valid() const;

    QList<QString> getKeywords() const;
    void setKeywords(const QList<QString> &keywords);
    bool is_keywords_Set() const;
    bool is_keywords_Valid() const;

    QDateTime getLastMatch() const;
    void setLastMatch(const QDateTime &last_match);
    bool is_last_match_Set() const;
    bool is_last_match_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICategoryInfoOptions getOptions() const;
    void setOptions(const OAICategoryInfoOptions &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    qint32 getOrder() const;
    void setOrder(const qint32 &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICategoryAugmentation> m_augmentations;
    bool m_augmentations_isSet;
    bool m_augmentations_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image_name;
    bool m_image_name_isSet;
    bool m_image_name_isValid;

    bool m_is_default;
    bool m_is_default_isSet;
    bool m_is_default_isValid;

    OAIKeywordMatchingType m_keyword_matching;
    bool m_keyword_matching_isSet;
    bool m_keyword_matching_isValid;

    QList<QString> m_keywords;
    bool m_keywords_isSet;
    bool m_keywords_isValid;

    QDateTime m_last_match;
    bool m_last_match_isSet;
    bool m_last_match_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICategoryInfoOptions m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    qint32 m_order;
    bool m_order_isSet;
    bool m_order_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICategoryInfo)

#endif // OAICategoryInfo_H
