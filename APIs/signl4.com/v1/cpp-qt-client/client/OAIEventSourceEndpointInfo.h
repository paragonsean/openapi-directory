/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventSourceEndpointInfo.h
 *
 * 
 */

#ifndef OAIEventSourceEndpointInfo_H
#define OAIEventSourceEndpointInfo_H

#include <QJsonObject>

#include "OAIEventSourceEndpointTypes.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventSourceEndpointInfo : public OAIObject {
public:
    OAIEventSourceEndpointInfo();
    OAIEventSourceEndpointInfo(QString json);
    ~OAIEventSourceEndpointInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getGroupId() const;
    void setGroupId(const QString &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    QDateTime getLastEventRaised() const;
    void setLastEventRaised(const QDateTime &last_event_raised);
    bool is_last_event_raised_Set() const;
    bool is_last_event_raised_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    OAIEventSourceEndpointTypes getType() const;
    void setType(const OAIEventSourceEndpointTypes &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    QDateTime m_last_event_raised;
    bool m_last_event_raised_isSet;
    bool m_last_event_raised_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    OAIEventSourceEndpointTypes m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventSourceEndpointInfo)

#endif // OAIEventSourceEndpointInfo_H
