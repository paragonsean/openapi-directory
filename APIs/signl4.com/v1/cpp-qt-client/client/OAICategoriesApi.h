/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoriesApi_H
#define OAI_OAICategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategoryInfo.h"
#include "OAICategoryMetrics.h"
#include "OAICategorySubscriptionInfo.h"
#include "OAIErrorResponseContent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoriesApi : public QObject {
    Q_OBJECT

public:
    OAICategoriesApi(const int timeOut = 0);
    ~OAICategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void categoriesImagesGet();

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void categoriesTeamIdCategoryIdDelete(const QString &team_id, const QString &category_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void categoriesTeamIdCategoryIdGet(const QString &team_id, const QString &category_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void categoriesTeamIdCategoryIdMetricsGet(const QString &team_id, const QString &category_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    * @param[in]  oai_category_info OAICategoryInfo [optional]
    */
    virtual void categoriesTeamIdCategoryIdPut(const QString &team_id, const QString &category_id, const ::OpenAPI::OptionalParam<OAICategoryInfo> &oai_category_info = ::OpenAPI::OptionalParam<OAICategoryInfo>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    */
    virtual void categoriesTeamIdCategoryIdSubscriptionsGet(const QString &team_id, const QString &category_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  category_id QString [required]
    * @param[in]  oai_category_subscription_info QList<OAICategorySubscriptionInfo> [optional]
    */
    virtual void categoriesTeamIdCategoryIdSubscriptionsPost(const QString &team_id, const QString &category_id, const ::OpenAPI::OptionalParam<QList<OAICategorySubscriptionInfo>> &oai_category_subscription_info = ::OpenAPI::OptionalParam<QList<OAICategorySubscriptionInfo>>());

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void categoriesTeamIdGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void categoriesTeamIdMetricsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_category_info OAICategoryInfo [optional]
    */
    virtual void categoriesTeamIdPost(const QString &team_id, const ::OpenAPI::OptionalParam<OAICategoryInfo> &oai_category_info = ::OpenAPI::OptionalParam<OAICategoryInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void categoriesImagesGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdDeleteCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdMetricsGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdPutCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdSubscriptionsPostCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdMetricsGetCallback(OAIHttpRequestWorker *worker);
    void categoriesTeamIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void categoriesImagesGetSignal(QList<QString> summary);
    void categoriesTeamIdCategoryIdDeleteSignal();
    void categoriesTeamIdCategoryIdGetSignal(OAICategoryInfo summary);
    void categoriesTeamIdCategoryIdMetricsGetSignal(OAICategoryMetrics summary);
    void categoriesTeamIdCategoryIdPutSignal(OAICategoryInfo summary);
    void categoriesTeamIdCategoryIdSubscriptionsGetSignal(QList<OAICategorySubscriptionInfo> summary);
    void categoriesTeamIdCategoryIdSubscriptionsPostSignal(QList<OAICategorySubscriptionInfo> summary);
    void categoriesTeamIdGetSignal(QList<OAICategoryInfo> summary);
    void categoriesTeamIdMetricsGetSignal(QList<OAICategoryMetrics> summary);
    void categoriesTeamIdPostSignal(OAICategoryInfo summary);


    void categoriesImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void categoriesTeamIdCategoryIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void categoriesTeamIdCategoryIdGetSignalFull(OAIHttpRequestWorker *worker, OAICategoryInfo summary);
    void categoriesTeamIdCategoryIdMetricsGetSignalFull(OAIHttpRequestWorker *worker, OAICategoryMetrics summary);
    void categoriesTeamIdCategoryIdPutSignalFull(OAIHttpRequestWorker *worker, OAICategoryInfo summary);
    void categoriesTeamIdCategoryIdSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICategorySubscriptionInfo> summary);
    void categoriesTeamIdCategoryIdSubscriptionsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAICategorySubscriptionInfo> summary);
    void categoriesTeamIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICategoryInfo> summary);
    void categoriesTeamIdMetricsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICategoryMetrics> summary);
    void categoriesTeamIdPostSignalFull(OAIHttpRequestWorker *worker, OAICategoryInfo summary);

    Q_DECL_DEPRECATED_X("Use categoriesImagesGetSignalError() instead")
    void categoriesImagesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesImagesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdDeleteSignalError() instead")
    void categoriesTeamIdCategoryIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdGetSignalError() instead")
    void categoriesTeamIdCategoryIdGetSignalE(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdGetSignalError(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdMetricsGetSignalError() instead")
    void categoriesTeamIdCategoryIdMetricsGetSignalE(OAICategoryMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdMetricsGetSignalError(OAICategoryMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdPutSignalError() instead")
    void categoriesTeamIdCategoryIdPutSignalE(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdPutSignalError(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdSubscriptionsGetSignalError() instead")
    void categoriesTeamIdCategoryIdSubscriptionsGetSignalE(QList<OAICategorySubscriptionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdSubscriptionsGetSignalError(QList<OAICategorySubscriptionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdSubscriptionsPostSignalError() instead")
    void categoriesTeamIdCategoryIdSubscriptionsPostSignalE(QList<OAICategorySubscriptionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdSubscriptionsPostSignalError(QList<OAICategorySubscriptionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdGetSignalError() instead")
    void categoriesTeamIdGetSignalE(QList<OAICategoryInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdGetSignalError(QList<OAICategoryInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdMetricsGetSignalError() instead")
    void categoriesTeamIdMetricsGetSignalE(QList<OAICategoryMetrics> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdMetricsGetSignalError(QList<OAICategoryMetrics> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdPostSignalError() instead")
    void categoriesTeamIdPostSignalE(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdPostSignalError(OAICategoryInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use categoriesImagesGetSignalErrorFull() instead")
    void categoriesImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdDeleteSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdGetSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdMetricsGetSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdMetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdMetricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdPutSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdSubscriptionsGetSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdCategoryIdSubscriptionsPostSignalErrorFull() instead")
    void categoriesTeamIdCategoryIdSubscriptionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdCategoryIdSubscriptionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdGetSignalErrorFull() instead")
    void categoriesTeamIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdMetricsGetSignalErrorFull() instead")
    void categoriesTeamIdMetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdMetricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesTeamIdPostSignalErrorFull() instead")
    void categoriesTeamIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesTeamIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
