/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo::OAIUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo::OAIUserInfo() {
    this->initializeModel();
}

OAIUserInfo::~OAIUserInfo() {}

void OAIUserInfo::initializeModel() {

    m_color_index_isSet = false;
    m_color_index_isValid = false;

    m_contact_addresses_isSet = false;
    m_contact_addresses_isValid = false;

    m_duty_info_isSet = false;
    m_duty_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_deactivated_isSet = false;
    m_is_deactivated_isValid = false;

    m_is_invite_isSet = false;
    m_is_invite_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_user_image_last_modified_isSet = false;
    m_user_image_last_modified_isValid = false;
}

void OAIUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo::fromJsonObject(QJsonObject json) {

    m_color_index_isValid = ::OpenAPI::fromJsonValue(m_color_index, json[QString("colorIndex")]);
    m_color_index_isSet = !json[QString("colorIndex")].isNull() && m_color_index_isValid;

    m_contact_addresses_isValid = ::OpenAPI::fromJsonValue(m_contact_addresses, json[QString("contactAddresses")]);
    m_contact_addresses_isSet = !json[QString("contactAddresses")].isNull() && m_contact_addresses_isValid;

    m_duty_info_isValid = ::OpenAPI::fromJsonValue(m_duty_info, json[QString("dutyInfo")]);
    m_duty_info_isSet = !json[QString("dutyInfo")].isNull() && m_duty_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_deactivated_isValid = ::OpenAPI::fromJsonValue(m_is_deactivated, json[QString("isDeactivated")]);
    m_is_deactivated_isSet = !json[QString("isDeactivated")].isNull() && m_is_deactivated_isValid;

    m_is_invite_isValid = ::OpenAPI::fromJsonValue(m_is_invite, json[QString("isInvite")]);
    m_is_invite_isSet = !json[QString("isInvite")].isNull() && m_is_invite_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_user_image_last_modified_isValid = ::OpenAPI::fromJsonValue(m_user_image_last_modified, json[QString("userImageLastModified")]);
    m_user_image_last_modified_isSet = !json[QString("userImageLastModified")].isNull() && m_user_image_last_modified_isValid;
}

QString OAIUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_color_index_isSet) {
        obj.insert(QString("colorIndex"), ::OpenAPI::toJsonValue(m_color_index));
    }
    if (m_contact_addresses.size() > 0) {
        obj.insert(QString("contactAddresses"), ::OpenAPI::toJsonValue(m_contact_addresses));
    }
    if (m_duty_info.isSet()) {
        obj.insert(QString("dutyInfo"), ::OpenAPI::toJsonValue(m_duty_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_deactivated_isSet) {
        obj.insert(QString("isDeactivated"), ::OpenAPI::toJsonValue(m_is_deactivated));
    }
    if (m_is_invite_isSet) {
        obj.insert(QString("isInvite"), ::OpenAPI::toJsonValue(m_is_invite));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_user_image_last_modified_isSet) {
        obj.insert(QString("userImageLastModified"), ::OpenAPI::toJsonValue(m_user_image_last_modified));
    }
    return obj;
}

qint32 OAIUserInfo::getColorIndex() const {
    return m_color_index;
}
void OAIUserInfo::setColorIndex(const qint32 &color_index) {
    m_color_index = color_index;
    m_color_index_isSet = true;
}

bool OAIUserInfo::is_color_index_Set() const{
    return m_color_index_isSet;
}

bool OAIUserInfo::is_color_index_Valid() const{
    return m_color_index_isValid;
}

QList<OAIContactAddressInfo> OAIUserInfo::getContactAddresses() const {
    return m_contact_addresses;
}
void OAIUserInfo::setContactAddresses(const QList<OAIContactAddressInfo> &contact_addresses) {
    m_contact_addresses = contact_addresses;
    m_contact_addresses_isSet = true;
}

bool OAIUserInfo::is_contact_addresses_Set() const{
    return m_contact_addresses_isSet;
}

bool OAIUserInfo::is_contact_addresses_Valid() const{
    return m_contact_addresses_isValid;
}

OAIUserDutyInfo OAIUserInfo::getDutyInfo() const {
    return m_duty_info;
}
void OAIUserInfo::setDutyInfo(const OAIUserDutyInfo &duty_info) {
    m_duty_info = duty_info;
    m_duty_info_isSet = true;
}

bool OAIUserInfo::is_duty_info_Set() const{
    return m_duty_info_isSet;
}

bool OAIUserInfo::is_duty_info_Valid() const{
    return m_duty_info_isValid;
}

QString OAIUserInfo::getId() const {
    return m_id;
}
void OAIUserInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserInfo::isIsDeactivated() const {
    return m_is_deactivated;
}
void OAIUserInfo::setIsDeactivated(const bool &is_deactivated) {
    m_is_deactivated = is_deactivated;
    m_is_deactivated_isSet = true;
}

bool OAIUserInfo::is_is_deactivated_Set() const{
    return m_is_deactivated_isSet;
}

bool OAIUserInfo::is_is_deactivated_Valid() const{
    return m_is_deactivated_isValid;
}

bool OAIUserInfo::isIsInvite() const {
    return m_is_invite;
}
void OAIUserInfo::setIsInvite(const bool &is_invite) {
    m_is_invite = is_invite;
    m_is_invite_isSet = true;
}

bool OAIUserInfo::is_is_invite_Set() const{
    return m_is_invite_isSet;
}

bool OAIUserInfo::is_is_invite_Valid() const{
    return m_is_invite_isValid;
}

QString OAIUserInfo::getMail() const {
    return m_mail;
}
void OAIUserInfo::setMail(const QString &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAIUserInfo::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAIUserInfo::is_mail_Valid() const{
    return m_mail_isValid;
}

QString OAIUserInfo::getName() const {
    return m_name;
}
void OAIUserInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserInfo::getRoleId() const {
    return m_role_id;
}
void OAIUserInfo::setRoleId(const QString &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIUserInfo::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIUserInfo::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAIUserInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIUserInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIUserInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIUserInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIUserInfo::getTimeZone() const {
    return m_time_zone;
}
void OAIUserInfo::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUserInfo::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUserInfo::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QDateTime OAIUserInfo::getUserImageLastModified() const {
    return m_user_image_last_modified;
}
void OAIUserInfo::setUserImageLastModified(const QDateTime &user_image_last_modified) {
    m_user_image_last_modified = user_image_last_modified;
    m_user_image_last_modified_isSet = true;
}

bool OAIUserInfo::is_user_image_last_modified_Set() const{
    return m_user_image_last_modified_isSet;
}

bool OAIUserInfo::is_user_image_last_modified_Valid() const{
    return m_user_image_last_modified_isValid;
}

bool OAIUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duty_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deactivated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_image_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
