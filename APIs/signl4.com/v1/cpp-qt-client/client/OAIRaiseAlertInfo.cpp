/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRaiseAlertInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRaiseAlertInfo::OAIRaiseAlertInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRaiseAlertInfo::OAIRaiseAlertInfo() {
    this->initializeModel();
}

OAIRaiseAlertInfo::~OAIRaiseAlertInfo() {}

void OAIRaiseAlertInfo::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIRaiseAlertInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRaiseAlertInfo::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIRaiseAlertInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRaiseAlertInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIAlertAttachment> OAIRaiseAlertInfo::getAttachments() const {
    return m_attachments;
}
void OAIRaiseAlertInfo::setAttachments(const QList<OAIAlertAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIRaiseAlertInfo::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIRaiseAlertInfo::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIRaiseAlertInfo::getCategory() const {
    return m_category;
}
void OAIRaiseAlertInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRaiseAlertInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRaiseAlertInfo::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIRaiseAlertInfo::getExternalId() const {
    return m_external_id;
}
void OAIRaiseAlertInfo::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIRaiseAlertInfo::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIRaiseAlertInfo::is_external_id_Valid() const{
    return m_external_id_isValid;
}

qint32 OAIRaiseAlertInfo::getFlags() const {
    return m_flags;
}
void OAIRaiseAlertInfo::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIRaiseAlertInfo::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIRaiseAlertInfo::is_flags_Valid() const{
    return m_flags_isValid;
}

QList<OAIEventParameterInfo> OAIRaiseAlertInfo::getParameters() const {
    return m_parameters;
}
void OAIRaiseAlertInfo::setParameters(const QList<OAIEventParameterInfo> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRaiseAlertInfo::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRaiseAlertInfo::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIAlertSeverities OAIRaiseAlertInfo::getSeverity() const {
    return m_severity;
}
void OAIRaiseAlertInfo::setSeverity(const OAIAlertSeverities &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIRaiseAlertInfo::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIRaiseAlertInfo::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIRaiseAlertInfo::getText() const {
    return m_text;
}
void OAIRaiseAlertInfo::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRaiseAlertInfo::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRaiseAlertInfo::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIRaiseAlertInfo::getTitle() const {
    return m_title;
}
void OAIRaiseAlertInfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRaiseAlertInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRaiseAlertInfo::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIRaiseAlertInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRaiseAlertInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
