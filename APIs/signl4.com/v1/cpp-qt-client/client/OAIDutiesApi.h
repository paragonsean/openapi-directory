/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDutiesApi_H
#define OAI_OAIDutiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteRangeInfo.h"
#include "OAIErrorResponseContent.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAIScheduleInfo.h"
#include "OAITeamDutySummaryInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDutiesApi : public QObject {
    Q_OBJECT

public:
    OAIDutiesApi(const int timeOut = 0);
    ~OAIDutiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void teamsTeamIdDutyReportsFileNameGet(const QString &team_id, const QString &file_name);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdDutyReportsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  last_two_duties bool [optional]
    */
    virtual void teamsTeamIdDutysummaryGet(const QString &team_id, const ::OpenAPI::OptionalParam<bool> &last_two_duties = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_delete_range_info OAIDeleteRangeInfo [optional]
    */
    virtual void teamsTeamIdSchedulesDeleteRangePost(const QString &team_id, const ::OpenAPI::OptionalParam<OAIDeleteRangeInfo> &oai_delete_range_info = ::OpenAPI::OptionalParam<OAIDeleteRangeInfo>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  duty_id QString [required]
    */
    virtual void teamsTeamIdSchedulesDutyIdDelete(const QString &team_id, const QString &duty_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  min_date QDateTime [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void teamsTeamIdSchedulesGet(const QString &team_id, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &min_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  override_existing bool [optional]
    * @param[in]  oai_schedule_info QList<OAIScheduleInfo> [optional]
    */
    virtual void teamsTeamIdSchedulesMultiplePost(const QString &team_id, const ::OpenAPI::OptionalParam<bool> &override_existing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIScheduleInfo>> &oai_schedule_info = ::OpenAPI::OptionalParam<QList<OAIScheduleInfo>>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_schedule_info OAIScheduleInfo [optional]
    */
    virtual void teamsTeamIdSchedulesPost(const QString &team_id, const ::OpenAPI::OptionalParam<OAIScheduleInfo> &oai_schedule_info = ::OpenAPI::OptionalParam<OAIScheduleInfo>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  schedule_id QString [required]
    */
    virtual void teamsTeamIdSchedulesScheduleIdGet(const QString &team_id, const QString &schedule_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamsTeamIdDutyReportsFileNameGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdDutyReportsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdDutysummaryGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesDeleteRangePostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesDutyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesMultiplePostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesPostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesScheduleIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teamsTeamIdDutyReportsFileNameGetSignal(OAIHttpFileElement summary);
    void teamsTeamIdDutyReportsGetSignal(QList<OAIObject> summary);
    void teamsTeamIdDutysummaryGetSignal(OAITeamDutySummaryInfo summary);
    void teamsTeamIdSchedulesDeleteRangePostSignal(QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesDutyIdDeleteSignal();
    void teamsTeamIdSchedulesGetSignal(QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesMultiplePostSignal(QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesPostSignal(OAIScheduleInfo summary);
    void teamsTeamIdSchedulesScheduleIdGetSignal(OAIScheduleInfo summary);


    void teamsTeamIdDutyReportsFileNameGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void teamsTeamIdDutyReportsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void teamsTeamIdDutysummaryGetSignalFull(OAIHttpRequestWorker *worker, OAITeamDutySummaryInfo summary);
    void teamsTeamIdSchedulesDeleteRangePostSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesDutyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsTeamIdSchedulesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesMultiplePostSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleInfo> summary);
    void teamsTeamIdSchedulesPostSignalFull(OAIHttpRequestWorker *worker, OAIScheduleInfo summary);
    void teamsTeamIdSchedulesScheduleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleInfo summary);

    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutyReportsFileNameGetSignalError() instead")
    void teamsTeamIdDutyReportsFileNameGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutyReportsFileNameGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutyReportsGetSignalError() instead")
    void teamsTeamIdDutyReportsGetSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutyReportsGetSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutysummaryGetSignalError() instead")
    void teamsTeamIdDutysummaryGetSignalE(OAITeamDutySummaryInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutysummaryGetSignalError(OAITeamDutySummaryInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesDeleteRangePostSignalError() instead")
    void teamsTeamIdSchedulesDeleteRangePostSignalE(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesDeleteRangePostSignalError(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesDutyIdDeleteSignalError() instead")
    void teamsTeamIdSchedulesDutyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesDutyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesGetSignalError() instead")
    void teamsTeamIdSchedulesGetSignalE(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesGetSignalError(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesMultiplePostSignalError() instead")
    void teamsTeamIdSchedulesMultiplePostSignalE(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesMultiplePostSignalError(QList<OAIScheduleInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesPostSignalError() instead")
    void teamsTeamIdSchedulesPostSignalE(OAIScheduleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesPostSignalError(OAIScheduleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesScheduleIdGetSignalError() instead")
    void teamsTeamIdSchedulesScheduleIdGetSignalE(OAIScheduleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesScheduleIdGetSignalError(OAIScheduleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutyReportsFileNameGetSignalErrorFull() instead")
    void teamsTeamIdDutyReportsFileNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutyReportsFileNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutyReportsGetSignalErrorFull() instead")
    void teamsTeamIdDutyReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutyReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdDutysummaryGetSignalErrorFull() instead")
    void teamsTeamIdDutysummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdDutysummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesDeleteRangePostSignalErrorFull() instead")
    void teamsTeamIdSchedulesDeleteRangePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesDeleteRangePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesDutyIdDeleteSignalErrorFull() instead")
    void teamsTeamIdSchedulesDutyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesDutyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesGetSignalErrorFull() instead")
    void teamsTeamIdSchedulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesMultiplePostSignalErrorFull() instead")
    void teamsTeamIdSchedulesMultiplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesMultiplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesPostSignalErrorFull() instead")
    void teamsTeamIdSchedulesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSchedulesScheduleIdGetSignalErrorFull() instead")
    void teamsTeamIdSchedulesScheduleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSchedulesScheduleIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
