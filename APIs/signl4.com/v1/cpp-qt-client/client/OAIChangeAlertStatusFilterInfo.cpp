/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeAlertStatusFilterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeAlertStatusFilterInfo::OAIChangeAlertStatusFilterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeAlertStatusFilterInfo::OAIChangeAlertStatusFilterInfo() {
    this->initializeModel();
}

OAIChangeAlertStatusFilterInfo::~OAIChangeAlertStatusFilterInfo() {}

void OAIChangeAlertStatusFilterInfo::initializeModel() {

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_max_date_isSet = false;
    m_max_date_isValid = false;

    m_min_date_isSet = false;
    m_min_date_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_team_ids_isSet = false;
    m_team_ids_isValid = false;
}

void OAIChangeAlertStatusFilterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeAlertStatusFilterInfo::fromJsonObject(QJsonObject json) {

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_max_date_isValid = ::OpenAPI::fromJsonValue(m_max_date, json[QString("maxDate")]);
    m_max_date_isSet = !json[QString("maxDate")].isNull() && m_max_date_isValid;

    m_min_date_isValid = ::OpenAPI::fromJsonValue(m_min_date, json[QString("minDate")]);
    m_min_date_isSet = !json[QString("minDate")].isNull() && m_min_date_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_team_ids_isValid = ::OpenAPI::fromJsonValue(m_team_ids, json[QString("teamIds")]);
    m_team_ids_isSet = !json[QString("teamIds")].isNull() && m_team_ids_isValid;
}

QString OAIChangeAlertStatusFilterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeAlertStatusFilterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_max_date_isSet) {
        obj.insert(QString("maxDate"), ::OpenAPI::toJsonValue(m_max_date));
    }
    if (m_min_date_isSet) {
        obj.insert(QString("minDate"), ::OpenAPI::toJsonValue(m_min_date));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_team_ids.size() > 0) {
        obj.insert(QString("teamIds"), ::OpenAPI::toJsonValue(m_team_ids));
    }
    return obj;
}

QList<QString> OAIChangeAlertStatusFilterInfo::getCategoryIds() const {
    return m_category_ids;
}
void OAIChangeAlertStatusFilterInfo::setCategoryIds(const QList<QString> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIChangeAlertStatusFilterInfo::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIChangeAlertStatusFilterInfo::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QDateTime OAIChangeAlertStatusFilterInfo::getMaxDate() const {
    return m_max_date;
}
void OAIChangeAlertStatusFilterInfo::setMaxDate(const QDateTime &max_date) {
    m_max_date = max_date;
    m_max_date_isSet = true;
}

bool OAIChangeAlertStatusFilterInfo::is_max_date_Set() const{
    return m_max_date_isSet;
}

bool OAIChangeAlertStatusFilterInfo::is_max_date_Valid() const{
    return m_max_date_isValid;
}

QDateTime OAIChangeAlertStatusFilterInfo::getMinDate() const {
    return m_min_date;
}
void OAIChangeAlertStatusFilterInfo::setMinDate(const QDateTime &min_date) {
    m_min_date = min_date;
    m_min_date_isSet = true;
}

bool OAIChangeAlertStatusFilterInfo::is_min_date_Set() const{
    return m_min_date_isSet;
}

bool OAIChangeAlertStatusFilterInfo::is_min_date_Valid() const{
    return m_min_date_isValid;
}

OAIStatusChangeScope OAIChangeAlertStatusFilterInfo::getScope() const {
    return m_scope;
}
void OAIChangeAlertStatusFilterInfo::setScope(const OAIStatusChangeScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIChangeAlertStatusFilterInfo::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIChangeAlertStatusFilterInfo::is_scope_Valid() const{
    return m_scope_isValid;
}

QList<QString> OAIChangeAlertStatusFilterInfo::getTeamIds() const {
    return m_team_ids;
}
void OAIChangeAlertStatusFilterInfo::setTeamIds(const QList<QString> &team_ids) {
    m_team_ids = team_ids;
    m_team_ids_isSet = true;
}

bool OAIChangeAlertStatusFilterInfo::is_team_ids_Set() const{
    return m_team_ids_isSet;
}

bool OAIChangeAlertStatusFilterInfo::is_team_ids_Valid() const{
    return m_team_ids_isValid;
}

bool OAIChangeAlertStatusFilterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeAlertStatusFilterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
