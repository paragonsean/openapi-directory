/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookInfo::OAIWebhookInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookInfo::OAIWebhookInfo() {
    this->initializeModel();
}

OAIWebhookInfo::~OAIWebhookInfo() {}

void OAIWebhookInfo::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_external_address_isSet = false;
    m_external_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIWebhookInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookInfo::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_external_address_isValid = ::OpenAPI::fromJsonValue(m_external_address, json[QString("externalAddress")]);
    m_external_address_isSet = !json[QString("externalAddress")].isNull() && m_external_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;
}

QString OAIWebhookInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_external_address_isSet) {
        obj.insert(QString("externalAddress"), ::OpenAPI::toJsonValue(m_external_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

bool OAIWebhookInfo::isEnabled() const {
    return m_enabled;
}
void OAIWebhookInfo::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebhookInfo::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebhookInfo::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIWebhookInfo::getExternalAddress() const {
    return m_external_address;
}
void OAIWebhookInfo::setExternalAddress(const QString &external_address) {
    m_external_address = external_address;
    m_external_address_isSet = true;
}

bool OAIWebhookInfo::is_external_address_Set() const{
    return m_external_address_isSet;
}

bool OAIWebhookInfo::is_external_address_Valid() const{
    return m_external_address_isValid;
}

QString OAIWebhookInfo::getId() const {
    return m_id;
}
void OAIWebhookInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhookInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhookInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhookInfo::getName() const {
    return m_name;
}
void OAIWebhookInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhookInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhookInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhookInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIWebhookInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIWebhookInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIWebhookInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIWebhookInfo::getTeamId() const {
    return m_team_id;
}
void OAIWebhookInfo::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIWebhookInfo::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIWebhookInfo::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIWebhookInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
