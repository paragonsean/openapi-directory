/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserImage.h
 *
 * 
 */

#ifndef OAIUserImage_H
#define OAIUserImage_H

#include <QJsonObject>

#include <QByteArray>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserImage : public OAIObject {
public:
    OAIUserImage();
    OAIUserImage(QString json);
    ~OAIUserImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getContent() const;
    void setContent(const QByteArray &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getContentDisposition() const;
    void setContentDisposition(const QString &content_disposition);
    bool is_content_disposition_Set() const;
    bool is_content_disposition_Valid() const;

    QString getContentEncoding() const;
    void setContentEncoding(const QString &content_encoding);
    bool is_content_encoding_Set() const;
    bool is_content_encoding_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_content_disposition;
    bool m_content_disposition_isSet;
    bool m_content_disposition_isValid;

    QString m_content_encoding;
    bool m_content_encoding_isSet;
    bool m_content_encoding_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserImage)

#endif // OAIUserImage_H
