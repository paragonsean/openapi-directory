/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIStringItemsWrapper.h"
#include "OAIUpdatePasswordInfo.h"
#include "OAIUserDutyInfo.h"
#include "OAIUserImage.h"
#include "OAIUserInfo.h"
#include "OAIUserProfile.h"
#include "OAIUserSetupProgress.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void usersGet();

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_password_info OAIUpdatePasswordInfo [optional]
    */
    virtual void usersUserIdChangePasswordPut(const QString &user_id, const ::OpenAPI::OptionalParam<OAIUpdatePasswordInfo> &oai_update_password_info = ::OpenAPI::OptionalParam<OAIUpdatePasswordInfo>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  team_id QString [optional]
    * @param[in]  oai_string_items_wrapper OAIStringItemsWrapper [optional]
    */
    virtual void usersUserIdCheckPermissionsPost(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStringItemsWrapper> &oai_string_items_wrapper = ::OpenAPI::OptionalParam<OAIStringItemsWrapper>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdDutyStatusGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  height qint32 [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void usersUserIdImageGet(const QString &user_id, const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdImagePost(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_profile OAIUserProfile [optional]
    */
    virtual void usersUserIdProfilePut(const QString &user_id, const ::OpenAPI::OptionalParam<OAIUserProfile> &oai_user_profile = ::OpenAPI::OptionalParam<OAIUserProfile>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdPunchInAsManagerPost(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdPunchInPost(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdPunchOutPost(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdSetupProgressGet(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdChangePasswordPutCallback(OAIHttpRequestWorker *worker);
    void usersUserIdCheckPermissionsPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdDutyStatusGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdImageGetCallback(OAIHttpRequestWorker *worker);
    void usersUserIdImagePostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdProfilePutCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPunchInAsManagerPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPunchInPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdPunchOutPostCallback(OAIHttpRequestWorker *worker);
    void usersUserIdSetupProgressGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersGetSignal(QList<OAIUserInfo> summary);
    void usersUserIdChangePasswordPutSignal();
    void usersUserIdCheckPermissionsPostSignal(OAIUserImage summary);
    void usersUserIdDutyStatusGetSignal(OAIUserDutyInfo summary);
    void usersUserIdGetSignal(OAIUserInfo summary);
    void usersUserIdImageGetSignal(OAIUserImage summary);
    void usersUserIdImagePostSignal();
    void usersUserIdProfilePutSignal(OAIUserInfo summary);
    void usersUserIdPunchInAsManagerPostSignal(OAIUserDutyInfo summary);
    void usersUserIdPunchInPostSignal(OAIUserDutyInfo summary);
    void usersUserIdPunchOutPostSignal(OAIUserDutyInfo summary);
    void usersUserIdSetupProgressGetSignal(OAIUserSetupProgress summary);


    void usersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserInfo> summary);
    void usersUserIdChangePasswordPutSignalFull(OAIHttpRequestWorker *worker);
    void usersUserIdCheckPermissionsPostSignalFull(OAIHttpRequestWorker *worker, OAIUserImage summary);
    void usersUserIdDutyStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIUserDutyInfo summary);
    void usersUserIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUserInfo summary);
    void usersUserIdImageGetSignalFull(OAIHttpRequestWorker *worker, OAIUserImage summary);
    void usersUserIdImagePostSignalFull(OAIHttpRequestWorker *worker);
    void usersUserIdProfilePutSignalFull(OAIHttpRequestWorker *worker, OAIUserInfo summary);
    void usersUserIdPunchInAsManagerPostSignalFull(OAIHttpRequestWorker *worker, OAIUserDutyInfo summary);
    void usersUserIdPunchInPostSignalFull(OAIHttpRequestWorker *worker, OAIUserDutyInfo summary);
    void usersUserIdPunchOutPostSignalFull(OAIHttpRequestWorker *worker, OAIUserDutyInfo summary);
    void usersUserIdSetupProgressGetSignalFull(OAIHttpRequestWorker *worker, OAIUserSetupProgress summary);

    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(QList<OAIUserInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(QList<OAIUserInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdChangePasswordPutSignalError() instead")
    void usersUserIdChangePasswordPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdChangePasswordPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdCheckPermissionsPostSignalError() instead")
    void usersUserIdCheckPermissionsPostSignalE(OAIUserImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdCheckPermissionsPostSignalError(OAIUserImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDutyStatusGetSignalError() instead")
    void usersUserIdDutyStatusGetSignalE(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDutyStatusGetSignalError(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalError() instead")
    void usersUserIdGetSignalE(OAIUserInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalError(OAIUserInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdImageGetSignalError() instead")
    void usersUserIdImageGetSignalE(OAIUserImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdImageGetSignalError(OAIUserImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdImagePostSignalError() instead")
    void usersUserIdImagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdImagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdProfilePutSignalError() instead")
    void usersUserIdProfilePutSignalE(OAIUserInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdProfilePutSignalError(OAIUserInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchInAsManagerPostSignalError() instead")
    void usersUserIdPunchInAsManagerPostSignalE(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchInAsManagerPostSignalError(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchInPostSignalError() instead")
    void usersUserIdPunchInPostSignalE(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchInPostSignalError(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchOutPostSignalError() instead")
    void usersUserIdPunchOutPostSignalE(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchOutPostSignalError(OAIUserDutyInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdSetupProgressGetSignalError() instead")
    void usersUserIdSetupProgressGetSignalE(OAIUserSetupProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdSetupProgressGetSignalError(OAIUserSetupProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdChangePasswordPutSignalErrorFull() instead")
    void usersUserIdChangePasswordPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdChangePasswordPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdCheckPermissionsPostSignalErrorFull() instead")
    void usersUserIdCheckPermissionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdCheckPermissionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdDutyStatusGetSignalErrorFull() instead")
    void usersUserIdDutyStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdDutyStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdGetSignalErrorFull() instead")
    void usersUserIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdImageGetSignalErrorFull() instead")
    void usersUserIdImageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdImageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdImagePostSignalErrorFull() instead")
    void usersUserIdImagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdImagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdProfilePutSignalErrorFull() instead")
    void usersUserIdProfilePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdProfilePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchInAsManagerPostSignalErrorFull() instead")
    void usersUserIdPunchInAsManagerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchInAsManagerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchInPostSignalErrorFull() instead")
    void usersUserIdPunchInPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchInPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdPunchOutPostSignalErrorFull() instead")
    void usersUserIdPunchOutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdPunchOutPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdSetupProgressGetSignalErrorFull() instead")
    void usersUserIdSetupProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdSetupProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
