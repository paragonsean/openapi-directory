/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserLicenseInfo.h
 *
 * 
 */

#ifndef OAIUserLicenseInfo_H
#define OAIUserLicenseInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserLicenseInfo : public OAIObject {
public:
    OAIUserLicenseInfo();
    OAIUserLicenseInfo(QString json);
    ~OAIUserLicenseInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentUsers() const;
    void setCurrentUsers(const qint32 &current_users);
    bool is_current_users_Set() const;
    bool is_current_users_Valid() const;

    bool isIsFree() const;
    void setIsFree(const bool &is_free);
    bool is_is_free_Set() const;
    bool is_is_free_Valid() const;

    bool isIsTrial() const;
    void setIsTrial(const bool &is_trial);
    bool is_is_trial_Set() const;
    bool is_is_trial_Valid() const;

    qint32 getLicensedUsers() const;
    void setLicensedUsers(const qint32 &licensed_users);
    bool is_licensed_users_Set() const;
    bool is_licensed_users_Valid() const;

    QString getPlanCode() const;
    void setPlanCode(const QString &plan_code);
    bool is_plan_code_Set() const;
    bool is_plan_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_users;
    bool m_current_users_isSet;
    bool m_current_users_isValid;

    bool m_is_free;
    bool m_is_free_isSet;
    bool m_is_free_isValid;

    bool m_is_trial;
    bool m_is_trial_isSet;
    bool m_is_trial_isValid;

    qint32 m_licensed_users;
    bool m_licensed_users_isSet;
    bool m_licensed_users_isValid;

    QString m_plan_code;
    bool m_plan_code_isSet;
    bool m_plan_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserLicenseInfo)

#endif // OAIUserLicenseInfo_H
