/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverviewEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverviewEvent::OAIOverviewEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverviewEvent::OAIOverviewEvent() {
    this->initializeModel();
}

OAIOverviewEvent::~OAIOverviewEvent() {}

void OAIOverviewEvent::initializeModel() {

    m_acknowledged_alerts_isSet = false;
    m_acknowledged_alerts_isValid = false;

    m_alert_id_isSet = false;
    m_alert_id_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_closed_alerts_isSet = false;
    m_closed_alerts_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_event_source_type_isSet = false;
    m_event_source_type_isValid = false;

    m_event_status_isSet = false;
    m_event_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIOverviewEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverviewEvent::fromJsonObject(QJsonObject json) {

    m_acknowledged_alerts_isValid = ::OpenAPI::fromJsonValue(m_acknowledged_alerts, json[QString("acknowledgedAlerts")]);
    m_acknowledged_alerts_isSet = !json[QString("acknowledgedAlerts")].isNull() && m_acknowledged_alerts_isValid;

    m_alert_id_isValid = ::OpenAPI::fromJsonValue(m_alert_id, json[QString("alertId")]);
    m_alert_id_isSet = !json[QString("alertId")].isNull() && m_alert_id_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_closed_alerts_isValid = ::OpenAPI::fromJsonValue(m_closed_alerts, json[QString("closedAlerts")]);
    m_closed_alerts_isSet = !json[QString("closedAlerts")].isNull() && m_closed_alerts_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_event_source_type_isValid = ::OpenAPI::fromJsonValue(m_event_source_type, json[QString("eventSourceType")]);
    m_event_source_type_isSet = !json[QString("eventSourceType")].isNull() && m_event_source_type_isValid;

    m_event_status_isValid = ::OpenAPI::fromJsonValue(m_event_status, json[QString("eventStatus")]);
    m_event_status_isSet = !json[QString("eventStatus")].isNull() && m_event_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIOverviewEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverviewEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledged_alerts.size() > 0) {
        obj.insert(QString("acknowledgedAlerts"), ::OpenAPI::toJsonValue(m_acknowledged_alerts));
    }
    if (m_alert_id_isSet) {
        obj.insert(QString("alertId"), ::OpenAPI::toJsonValue(m_alert_id));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_closed_alerts.size() > 0) {
        obj.insert(QString("closedAlerts"), ::OpenAPI::toJsonValue(m_closed_alerts));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_event_source_type.isSet()) {
        obj.insert(QString("eventSourceType"), ::OpenAPI::toJsonValue(m_event_source_type));
    }
    if (m_event_status.isSet()) {
        obj.insert(QString("eventStatus"), ::OpenAPI::toJsonValue(m_event_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAIOverviewEvent::getAcknowledgedAlerts() const {
    return m_acknowledged_alerts;
}
void OAIOverviewEvent::setAcknowledgedAlerts(const QList<QString> &acknowledged_alerts) {
    m_acknowledged_alerts = acknowledged_alerts;
    m_acknowledged_alerts_isSet = true;
}

bool OAIOverviewEvent::is_acknowledged_alerts_Set() const{
    return m_acknowledged_alerts_isSet;
}

bool OAIOverviewEvent::is_acknowledged_alerts_Valid() const{
    return m_acknowledged_alerts_isValid;
}

QString OAIOverviewEvent::getAlertId() const {
    return m_alert_id;
}
void OAIOverviewEvent::setAlertId(const QString &alert_id) {
    m_alert_id = alert_id;
    m_alert_id_isSet = true;
}

bool OAIOverviewEvent::is_alert_id_Set() const{
    return m_alert_id_isSet;
}

bool OAIOverviewEvent::is_alert_id_Valid() const{
    return m_alert_id_isValid;
}

QString OAIOverviewEvent::getCategoryId() const {
    return m_category_id;
}
void OAIOverviewEvent::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIOverviewEvent::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIOverviewEvent::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QList<QString> OAIOverviewEvent::getClosedAlerts() const {
    return m_closed_alerts;
}
void OAIOverviewEvent::setClosedAlerts(const QList<QString> &closed_alerts) {
    m_closed_alerts = closed_alerts;
    m_closed_alerts_isSet = true;
}

bool OAIOverviewEvent::is_closed_alerts_Set() const{
    return m_closed_alerts_isSet;
}

bool OAIOverviewEvent::is_closed_alerts_Valid() const{
    return m_closed_alerts_isValid;
}

QDateTime OAIOverviewEvent::getCreationTime() const {
    return m_creation_time;
}
void OAIOverviewEvent::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIOverviewEvent::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIOverviewEvent::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIEventSourceTypes OAIOverviewEvent::getEventSourceType() const {
    return m_event_source_type;
}
void OAIOverviewEvent::setEventSourceType(const OAIEventSourceTypes &event_source_type) {
    m_event_source_type = event_source_type;
    m_event_source_type_isSet = true;
}

bool OAIOverviewEvent::is_event_source_type_Set() const{
    return m_event_source_type_isSet;
}

bool OAIOverviewEvent::is_event_source_type_Valid() const{
    return m_event_source_type_isValid;
}

OAIEventStatusCodes OAIOverviewEvent::getEventStatus() const {
    return m_event_status;
}
void OAIOverviewEvent::setEventStatus(const OAIEventStatusCodes &event_status) {
    m_event_status = event_status;
    m_event_status_isSet = true;
}

bool OAIOverviewEvent::is_event_status_Set() const{
    return m_event_status_isSet;
}

bool OAIOverviewEvent::is_event_status_Valid() const{
    return m_event_status_isValid;
}

QString OAIOverviewEvent::getId() const {
    return m_id;
}
void OAIOverviewEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOverviewEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOverviewEvent::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIOverviewEvent::getLastModified() const {
    return m_last_modified;
}
void OAIOverviewEvent::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIOverviewEvent::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIOverviewEvent::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIEventSeverities OAIOverviewEvent::getSeverity() const {
    return m_severity;
}
void OAIOverviewEvent::setSeverity(const OAIEventSeverities &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIOverviewEvent::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIOverviewEvent::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIOverviewEvent::getTeamId() const {
    return m_team_id;
}
void OAIOverviewEvent::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIOverviewEvent::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIOverviewEvent::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIOverviewEvent::getText() const {
    return m_text;
}
void OAIOverviewEvent::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIOverviewEvent::is_text_Set() const{
    return m_text_isSet;
}

bool OAIOverviewEvent::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIOverviewEvent::getTitle() const {
    return m_title;
}
void OAIOverviewEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOverviewEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOverviewEvent::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIOverviewEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledged_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverviewEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
