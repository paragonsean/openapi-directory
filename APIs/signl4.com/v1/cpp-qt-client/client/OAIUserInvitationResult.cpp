/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInvitationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInvitationResult::OAIUserInvitationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInvitationResult::OAIUserInvitationResult() {
    this->initializeModel();
}

OAIUserInvitationResult::~OAIUserInvitationResult() {}

void OAIUserInvitationResult::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_invited_user_isSet = false;
    m_invited_user_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIUserInvitationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInvitationResult::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_invited_user_isValid = ::OpenAPI::fromJsonValue(m_invited_user, json[QString("invitedUser")]);
    m_invited_user_isSet = !json[QString("invitedUser")].isNull() && m_invited_user_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIUserInvitationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInvitationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_invited_user.isSet()) {
        obj.insert(QString("invitedUser"), ::OpenAPI::toJsonValue(m_invited_user));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

qint32 OAIUserInvitationResult::getErrorCode() const {
    return m_error_code;
}
void OAIUserInvitationResult::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIUserInvitationResult::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIUserInvitationResult::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIUserInvitationResult::getErrorMessage() const {
    return m_error_message;
}
void OAIUserInvitationResult::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUserInvitationResult::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUserInvitationResult::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIInvitedUserInfo OAIUserInvitationResult::getInvitedUser() const {
    return m_invited_user;
}
void OAIUserInvitationResult::setInvitedUser(const OAIInvitedUserInfo &invited_user) {
    m_invited_user = invited_user;
    m_invited_user_isSet = true;
}

bool OAIUserInvitationResult::is_invited_user_Set() const{
    return m_invited_user_isSet;
}

bool OAIUserInvitationResult::is_invited_user_Valid() const{
    return m_invited_user_isValid;
}

bool OAIUserInvitationResult::isSuccess() const {
    return m_success;
}
void OAIUserInvitationResult::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIUserInvitationResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAIUserInvitationResult::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIUserInvitationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInvitationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
