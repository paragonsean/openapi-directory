/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactAddressInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactAddressInfo::OAIContactAddressInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactAddressInfo::OAIContactAddressInfo() {
    this->initializeModel();
}

OAIContactAddressInfo::~OAIContactAddressInfo() {}

void OAIContactAddressInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIContactAddressInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactAddressInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIContactAddressInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactAddressInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIContactAddressInfo::getAddress() const {
    return m_address;
}
void OAIContactAddressInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIContactAddressInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIContactAddressInfo::is_address_Valid() const{
    return m_address_isValid;
}

OAIChannelTypes OAIContactAddressInfo::getChannel() const {
    return m_channel;
}
void OAIContactAddressInfo::setChannel(const OAIChannelTypes &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIContactAddressInfo::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIContactAddressInfo::is_channel_Valid() const{
    return m_channel_isValid;
}

QDateTime OAIContactAddressInfo::getCreated() const {
    return m_created;
}
void OAIContactAddressInfo::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIContactAddressInfo::is_created_Set() const{
    return m_created_isSet;
}

bool OAIContactAddressInfo::is_created_Valid() const{
    return m_created_isValid;
}

OAIDevice OAIContactAddressInfo::getDevice() const {
    return m_device;
}
void OAIContactAddressInfo::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIContactAddressInfo::is_device_Set() const{
    return m_device_isSet;
}

bool OAIContactAddressInfo::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIContactAddressInfo::getId() const {
    return m_id;
}
void OAIContactAddressInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactAddressInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactAddressInfo::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIContactAddressInfo::getLastUpdated() const {
    return m_last_updated;
}
void OAIContactAddressInfo::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIContactAddressInfo::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIContactAddressInfo::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIContactAddressInfo::getOptions() const {
    return m_options;
}
void OAIContactAddressInfo::setOptions(const qint32 &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIContactAddressInfo::is_options_Set() const{
    return m_options_isSet;
}

bool OAIContactAddressInfo::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIContactAddressInfo::getUserId() const {
    return m_user_id;
}
void OAIContactAddressInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIContactAddressInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIContactAddressInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIContactAddressInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactAddressInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
