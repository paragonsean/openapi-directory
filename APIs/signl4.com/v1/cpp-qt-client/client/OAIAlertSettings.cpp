/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertSettings::OAIAlertSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertSettings::OAIAlertSettings() {
    this->initializeModel();
}

OAIAlertSettings::~OAIAlertSettings() {}

void OAIAlertSettings::initializeModel() {

    m_filter_action_isSet = false;
    m_filter_action_isValid = false;

    m_filter_mode_isSet = false;
    m_filter_mode_isValid = false;

    m_opt_out_mode_isSet = false;
    m_opt_out_mode_isValid = false;

    m_persistent_notificication_mode_isSet = false;
    m_persistent_notificication_mode_isValid = false;

    m_response_mode_isSet = false;
    m_response_mode_isValid = false;

    m_response_time_isSet = false;
    m_response_time_isValid = false;
}

void OAIAlertSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertSettings::fromJsonObject(QJsonObject json) {

    m_filter_action_isValid = ::OpenAPI::fromJsonValue(m_filter_action, json[QString("filterAction")]);
    m_filter_action_isSet = !json[QString("filterAction")].isNull() && m_filter_action_isValid;

    m_filter_mode_isValid = ::OpenAPI::fromJsonValue(m_filter_mode, json[QString("filterMode")]);
    m_filter_mode_isSet = !json[QString("filterMode")].isNull() && m_filter_mode_isValid;

    m_opt_out_mode_isValid = ::OpenAPI::fromJsonValue(m_opt_out_mode, json[QString("optOutMode")]);
    m_opt_out_mode_isSet = !json[QString("optOutMode")].isNull() && m_opt_out_mode_isValid;

    m_persistent_notificication_mode_isValid = ::OpenAPI::fromJsonValue(m_persistent_notificication_mode, json[QString("persistentNotificicationMode")]);
    m_persistent_notificication_mode_isSet = !json[QString("persistentNotificicationMode")].isNull() && m_persistent_notificication_mode_isValid;

    m_response_mode_isValid = ::OpenAPI::fromJsonValue(m_response_mode, json[QString("responseMode")]);
    m_response_mode_isSet = !json[QString("responseMode")].isNull() && m_response_mode_isValid;

    m_response_time_isValid = ::OpenAPI::fromJsonValue(m_response_time, json[QString("responseTime")]);
    m_response_time_isSet = !json[QString("responseTime")].isNull() && m_response_time_isValid;
}

QString OAIAlertSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_action.isSet()) {
        obj.insert(QString("filterAction"), ::OpenAPI::toJsonValue(m_filter_action));
    }
    if (m_filter_mode.isSet()) {
        obj.insert(QString("filterMode"), ::OpenAPI::toJsonValue(m_filter_mode));
    }
    if (m_opt_out_mode.isSet()) {
        obj.insert(QString("optOutMode"), ::OpenAPI::toJsonValue(m_opt_out_mode));
    }
    if (m_persistent_notificication_mode.isSet()) {
        obj.insert(QString("persistentNotificicationMode"), ::OpenAPI::toJsonValue(m_persistent_notificication_mode));
    }
    if (m_response_mode.isSet()) {
        obj.insert(QString("responseMode"), ::OpenAPI::toJsonValue(m_response_mode));
    }
    if (m_response_time_isSet) {
        obj.insert(QString("responseTime"), ::OpenAPI::toJsonValue(m_response_time));
    }
    return obj;
}

OAIAlertFilterActions OAIAlertSettings::getFilterAction() const {
    return m_filter_action;
}
void OAIAlertSettings::setFilterAction(const OAIAlertFilterActions &filter_action) {
    m_filter_action = filter_action;
    m_filter_action_isSet = true;
}

bool OAIAlertSettings::is_filter_action_Set() const{
    return m_filter_action_isSet;
}

bool OAIAlertSettings::is_filter_action_Valid() const{
    return m_filter_action_isValid;
}

OAIAlertFilterModes OAIAlertSettings::getFilterMode() const {
    return m_filter_mode;
}
void OAIAlertSettings::setFilterMode(const OAIAlertFilterModes &filter_mode) {
    m_filter_mode = filter_mode;
    m_filter_mode_isSet = true;
}

bool OAIAlertSettings::is_filter_mode_Set() const{
    return m_filter_mode_isSet;
}

bool OAIAlertSettings::is_filter_mode_Valid() const{
    return m_filter_mode_isValid;
}

OAITeamCategoryOptOutModes OAIAlertSettings::getOptOutMode() const {
    return m_opt_out_mode;
}
void OAIAlertSettings::setOptOutMode(const OAITeamCategoryOptOutModes &opt_out_mode) {
    m_opt_out_mode = opt_out_mode;
    m_opt_out_mode_isSet = true;
}

bool OAIAlertSettings::is_opt_out_mode_Set() const{
    return m_opt_out_mode_isSet;
}

bool OAIAlertSettings::is_opt_out_mode_Valid() const{
    return m_opt_out_mode_isValid;
}

OAIPersistentNotificationModes OAIAlertSettings::getPersistentNotificicationMode() const {
    return m_persistent_notificication_mode;
}
void OAIAlertSettings::setPersistentNotificicationMode(const OAIPersistentNotificationModes &persistent_notificication_mode) {
    m_persistent_notificication_mode = persistent_notificication_mode;
    m_persistent_notificication_mode_isSet = true;
}

bool OAIAlertSettings::is_persistent_notificication_mode_Set() const{
    return m_persistent_notificication_mode_isSet;
}

bool OAIAlertSettings::is_persistent_notificication_mode_Valid() const{
    return m_persistent_notificication_mode_isValid;
}

OAIAlertResponseModes OAIAlertSettings::getResponseMode() const {
    return m_response_mode;
}
void OAIAlertSettings::setResponseMode(const OAIAlertResponseModes &response_mode) {
    m_response_mode = response_mode;
    m_response_mode_isSet = true;
}

bool OAIAlertSettings::is_response_mode_Set() const{
    return m_response_mode_isSet;
}

bool OAIAlertSettings::is_response_mode_Valid() const{
    return m_response_mode_isValid;
}

qint32 OAIAlertSettings::getResponseTime() const {
    return m_response_time;
}
void OAIAlertSettings::setResponseTime(const qint32 &response_time) {
    m_response_time = response_time;
    m_response_time_isSet = true;
}

bool OAIAlertSettings::is_response_time_Set() const{
    return m_response_time_isSet;
}

bool OAIAlertSettings::is_response_time_Valid() const{
    return m_response_time_isValid;
}

bool OAIAlertSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_notificication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
