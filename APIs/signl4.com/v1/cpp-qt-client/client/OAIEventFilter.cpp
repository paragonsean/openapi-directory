/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFilter::OAIEventFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFilter::OAIEventFilter() {
    this->initializeModel();
}

OAIEventFilter::~OAIEventFilter() {}

void OAIEventFilter::initializeModel() {

    m_continuation_token_isSet = false;
    m_continuation_token_isValid = false;

    m_event_status_code_isSet = false;
    m_event_status_code_isValid = false;

    m_max_creation_date_isSet = false;
    m_max_creation_date_isValid = false;

    m_min_creation_date_isSet = false;
    m_min_creation_date_isValid = false;

    m_modified_since_isSet = false;
    m_modified_since_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_text_to_search_isSet = false;
    m_text_to_search_isValid = false;
}

void OAIEventFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFilter::fromJsonObject(QJsonObject json) {

    m_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_continuation_token, json[QString("continuationToken")]);
    m_continuation_token_isSet = !json[QString("continuationToken")].isNull() && m_continuation_token_isValid;

    m_event_status_code_isValid = ::OpenAPI::fromJsonValue(m_event_status_code, json[QString("eventStatusCode")]);
    m_event_status_code_isSet = !json[QString("eventStatusCode")].isNull() && m_event_status_code_isValid;

    m_max_creation_date_isValid = ::OpenAPI::fromJsonValue(m_max_creation_date, json[QString("maxCreationDate")]);
    m_max_creation_date_isSet = !json[QString("maxCreationDate")].isNull() && m_max_creation_date_isValid;

    m_min_creation_date_isValid = ::OpenAPI::fromJsonValue(m_min_creation_date, json[QString("minCreationDate")]);
    m_min_creation_date_isSet = !json[QString("minCreationDate")].isNull() && m_min_creation_date_isValid;

    m_modified_since_isValid = ::OpenAPI::fromJsonValue(m_modified_since, json[QString("modifiedSince")]);
    m_modified_since_isSet = !json[QString("modifiedSince")].isNull() && m_modified_since_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_text_to_search_isValid = ::OpenAPI::fromJsonValue(m_text_to_search, json[QString("textToSearch")]);
    m_text_to_search_isSet = !json[QString("textToSearch")].isNull() && m_text_to_search_isValid;
}

QString OAIEventFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_continuation_token.isSet()) {
        obj.insert(QString("continuationToken"), ::OpenAPI::toJsonValue(m_continuation_token));
    }
    if (m_event_status_code.isSet()) {
        obj.insert(QString("eventStatusCode"), ::OpenAPI::toJsonValue(m_event_status_code));
    }
    if (m_max_creation_date_isSet) {
        obj.insert(QString("maxCreationDate"), ::OpenAPI::toJsonValue(m_max_creation_date));
    }
    if (m_min_creation_date_isSet) {
        obj.insert(QString("minCreationDate"), ::OpenAPI::toJsonValue(m_min_creation_date));
    }
    if (m_modified_since_isSet) {
        obj.insert(QString("modifiedSince"), ::OpenAPI::toJsonValue(m_modified_since));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_text_to_search_isSet) {
        obj.insert(QString("textToSearch"), ::OpenAPI::toJsonValue(m_text_to_search));
    }
    return obj;
}

OAIPagedResultsPublicContinuationToken OAIEventFilter::getContinuationToken() const {
    return m_continuation_token;
}
void OAIEventFilter::setContinuationToken(const OAIPagedResultsPublicContinuationToken &continuation_token) {
    m_continuation_token = continuation_token;
    m_continuation_token_isSet = true;
}

bool OAIEventFilter::is_continuation_token_Set() const{
    return m_continuation_token_isSet;
}

bool OAIEventFilter::is_continuation_token_Valid() const{
    return m_continuation_token_isValid;
}

OAIEventStatusCodes OAIEventFilter::getEventStatusCode() const {
    return m_event_status_code;
}
void OAIEventFilter::setEventStatusCode(const OAIEventStatusCodes &event_status_code) {
    m_event_status_code = event_status_code;
    m_event_status_code_isSet = true;
}

bool OAIEventFilter::is_event_status_code_Set() const{
    return m_event_status_code_isSet;
}

bool OAIEventFilter::is_event_status_code_Valid() const{
    return m_event_status_code_isValid;
}

QDateTime OAIEventFilter::getMaxCreationDate() const {
    return m_max_creation_date;
}
void OAIEventFilter::setMaxCreationDate(const QDateTime &max_creation_date) {
    m_max_creation_date = max_creation_date;
    m_max_creation_date_isSet = true;
}

bool OAIEventFilter::is_max_creation_date_Set() const{
    return m_max_creation_date_isSet;
}

bool OAIEventFilter::is_max_creation_date_Valid() const{
    return m_max_creation_date_isValid;
}

QDateTime OAIEventFilter::getMinCreationDate() const {
    return m_min_creation_date;
}
void OAIEventFilter::setMinCreationDate(const QDateTime &min_creation_date) {
    m_min_creation_date = min_creation_date;
    m_min_creation_date_isSet = true;
}

bool OAIEventFilter::is_min_creation_date_Set() const{
    return m_min_creation_date_isSet;
}

bool OAIEventFilter::is_min_creation_date_Valid() const{
    return m_min_creation_date_isValid;
}

QDateTime OAIEventFilter::getModifiedSince() const {
    return m_modified_since;
}
void OAIEventFilter::setModifiedSince(const QDateTime &modified_since) {
    m_modified_since = modified_since;
    m_modified_since_isSet = true;
}

bool OAIEventFilter::is_modified_since_Set() const{
    return m_modified_since_isSet;
}

bool OAIEventFilter::is_modified_since_Valid() const{
    return m_modified_since_isValid;
}

QString OAIEventFilter::getTeamId() const {
    return m_team_id;
}
void OAIEventFilter::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIEventFilter::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIEventFilter::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIEventFilter::getTextToSearch() const {
    return m_text_to_search;
}
void OAIEventFilter::setTextToSearch(const QString &text_to_search) {
    m_text_to_search = text_to_search;
    m_text_to_search_isSet = true;
}

bool OAIEventFilter::is_text_to_search_Set() const{
    return m_text_to_search_isSet;
}

bool OAIEventFilter::is_text_to_search_Valid() const{
    return m_text_to_search_isValid;
}

bool OAIEventFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_continuation_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_search_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
