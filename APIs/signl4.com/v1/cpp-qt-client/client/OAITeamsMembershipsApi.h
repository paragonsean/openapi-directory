/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsMembershipsApi_H
#define OAI_OAITeamsMembershipsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIInvitedUserInfo.h"
#include "OAIUserInfo.h"
#include "OAIUserInvitationInfo.h"
#include "OAIUserInvitationResult.h"
#include "OAIUserMembership.h"
#include "OAIUsersInvitation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsMembershipsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsMembershipsApi(const int timeOut = 0);
    ~OAITeamsMembershipsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdMembershipsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_users_invitation OAIUsersInvitation [optional]
    */
    virtual void teamsTeamIdMembershipsPost(const QString &team_id, const ::OpenAPI::OptionalParam<OAIUsersInvitation> &oai_users_invitation = ::OpenAPI::OptionalParam<OAIUsersInvitation>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_user_invitation_info OAIUserInvitationInfo [optional]
    */
    virtual void teamsTeamIdMembershipsResendInviteMailPost(const QString &team_id, const ::OpenAPI::OptionalParam<OAIUserInvitationInfo> &oai_user_invitation_info = ::OpenAPI::OptionalParam<OAIUserInvitationInfo>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  requester_user_id QString [optional]
    */
    virtual void teamsTeamIdMembershipsUserIdDelete(const QString &team_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &requester_user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  requester_user_id QString [optional]
    * @param[in]  oai_user_membership OAIUserMembership [optional]
    */
    virtual void teamsTeamIdMembershipsUserIdPut(const QString &team_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &requester_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUserMembership> &oai_user_membership = ::OpenAPI::OptionalParam<OAIUserMembership>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamsTeamIdMembershipsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdMembershipsPostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdMembershipsResendInviteMailPostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdMembershipsUserIdDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdMembershipsUserIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teamsTeamIdMembershipsGetSignal(QList<OAIInvitedUserInfo> summary);
    void teamsTeamIdMembershipsPostSignal(QList<OAIUserInvitationResult> summary);
    void teamsTeamIdMembershipsResendInviteMailPostSignal(QString summary);
    void teamsTeamIdMembershipsUserIdDeleteSignal(QString summary);
    void teamsTeamIdMembershipsUserIdPutSignal(OAIUserInfo summary);


    void teamsTeamIdMembershipsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvitedUserInfo> summary);
    void teamsTeamIdMembershipsPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserInvitationResult> summary);
    void teamsTeamIdMembershipsResendInviteMailPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void teamsTeamIdMembershipsUserIdDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void teamsTeamIdMembershipsUserIdPutSignalFull(OAIHttpRequestWorker *worker, OAIUserInfo summary);

    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsGetSignalError() instead")
    void teamsTeamIdMembershipsGetSignalE(QList<OAIInvitedUserInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsGetSignalError(QList<OAIInvitedUserInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsPostSignalError() instead")
    void teamsTeamIdMembershipsPostSignalE(QList<OAIUserInvitationResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsPostSignalError(QList<OAIUserInvitationResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsResendInviteMailPostSignalError() instead")
    void teamsTeamIdMembershipsResendInviteMailPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsResendInviteMailPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsUserIdDeleteSignalError() instead")
    void teamsTeamIdMembershipsUserIdDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsUserIdDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsUserIdPutSignalError() instead")
    void teamsTeamIdMembershipsUserIdPutSignalE(OAIUserInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsUserIdPutSignalError(OAIUserInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsGetSignalErrorFull() instead")
    void teamsTeamIdMembershipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsPostSignalErrorFull() instead")
    void teamsTeamIdMembershipsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsResendInviteMailPostSignalErrorFull() instead")
    void teamsTeamIdMembershipsResendInviteMailPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsResendInviteMailPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsUserIdDeleteSignalErrorFull() instead")
    void teamsTeamIdMembershipsUserIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsUserIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdMembershipsUserIdPutSignalErrorFull() instead")
    void teamsTeamIdMembershipsUserIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdMembershipsUserIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
