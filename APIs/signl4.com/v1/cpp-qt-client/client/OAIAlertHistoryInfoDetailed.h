/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlertHistoryInfoDetailed.h
 *
 * 
 */

#ifndef OAIAlertHistoryInfoDetailed_H
#define OAIAlertHistoryInfoDetailed_H

#include <QJsonObject>

#include "OAIAlertHistoryInfoEntry.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAlertHistoryInfoEntry;

class OAIAlertHistoryInfoDetailed : public OAIObject {
public:
    OAIAlertHistoryInfoDetailed();
    OAIAlertHistoryInfoDetailed(QString json);
    ~OAIAlertHistoryInfoDetailed() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAcknowledged() const;
    void setAcknowledged(const QDateTime &acknowledged);
    bool is_acknowledged_Set() const;
    bool is_acknowledged_Valid() const;

    QList<QString> getAcknowledgedgements() const;
    void setAcknowledgedgements(const QList<QString> &acknowledgedgements);
    bool is_acknowledgedgements_Set() const;
    bool is_acknowledgedgements_Valid() const;

    QDateTime getClosed() const;
    void setClosed(const QDateTime &closed);
    bool is_closed_Set() const;
    bool is_closed_Valid() const;

    QString getClosedBy() const;
    void setClosedBy(const QString &closed_by);
    bool is_closed_by_Set() const;
    bool is_closed_by_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QList<OAIAlertHistoryInfoEntry> getHistoryEntries() const;
    void setHistoryEntries(const QList<OAIAlertHistoryInfoEntry> &history_entries);
    bool is_history_entries_Set() const;
    bool is_history_entries_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_acknowledged;
    bool m_acknowledged_isSet;
    bool m_acknowledged_isValid;

    QList<QString> m_acknowledgedgements;
    bool m_acknowledgedgements_isSet;
    bool m_acknowledgedgements_isValid;

    QDateTime m_closed;
    bool m_closed_isSet;
    bool m_closed_isValid;

    QString m_closed_by;
    bool m_closed_by_isSet;
    bool m_closed_by_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QList<OAIAlertHistoryInfoEntry> m_history_entries;
    bool m_history_entries_isSet;
    bool m_history_entries_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlertHistoryInfoDetailed)

#endif // OAIAlertHistoryInfoDetailed_H
