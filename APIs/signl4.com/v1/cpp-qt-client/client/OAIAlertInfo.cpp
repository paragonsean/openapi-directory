/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertInfo::OAIAlertInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertInfo::OAIAlertInfo() {
    this->initializeModel();
}

OAIAlertInfo::~OAIAlertInfo() {}

void OAIAlertInfo::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_source_id_isSet = false;
    m_event_source_id_isValid = false;

    m_event_source_type_isSet = false;
    m_event_source_type_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAlertInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertInfo::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_source_id_isValid = ::OpenAPI::fromJsonValue(m_event_source_id, json[QString("eventSourceId")]);
    m_event_source_id_isSet = !json[QString("eventSourceId")].isNull() && m_event_source_id_isValid;

    m_event_source_type_isValid = ::OpenAPI::fromJsonValue(m_event_source_type, json[QString("eventSourceType")]);
    m_event_source_type_isSet = !json[QString("eventSourceType")].isNull() && m_event_source_type_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAlertInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_source_id_isSet) {
        obj.insert(QString("eventSourceId"), ::OpenAPI::toJsonValue(m_event_source_id));
    }
    if (m_event_source_type.isSet()) {
        obj.insert(QString("eventSourceType"), ::OpenAPI::toJsonValue(m_event_source_type));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_history.isSet()) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIAlertAnnotationInfo> OAIAlertInfo::getAnnotations() const {
    return m_annotations;
}
void OAIAlertInfo::setAnnotations(const QList<OAIAlertAnnotationInfo> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIAlertInfo::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIAlertInfo::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIAlertAttachment> OAIAlertInfo::getAttachments() const {
    return m_attachments;
}
void OAIAlertInfo::setAttachments(const QList<OAIAlertAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIAlertInfo::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIAlertInfo::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIAlertInfo::getCategory() const {
    return m_category;
}
void OAIAlertInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAlertInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAlertInfo::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIAlertInfo::getCategoryId() const {
    return m_category_id;
}
void OAIAlertInfo::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIAlertInfo::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIAlertInfo::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIAlertInfo::getEventId() const {
    return m_event_id;
}
void OAIAlertInfo::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIAlertInfo::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIAlertInfo::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIAlertInfo::getEventSourceId() const {
    return m_event_source_id;
}
void OAIAlertInfo::setEventSourceId(const QString &event_source_id) {
    m_event_source_id = event_source_id;
    m_event_source_id_isSet = true;
}

bool OAIAlertInfo::is_event_source_id_Set() const{
    return m_event_source_id_isSet;
}

bool OAIAlertInfo::is_event_source_id_Valid() const{
    return m_event_source_id_isValid;
}

OAIEventSourceTypes OAIAlertInfo::getEventSourceType() const {
    return m_event_source_type;
}
void OAIAlertInfo::setEventSourceType(const OAIEventSourceTypes &event_source_type) {
    m_event_source_type = event_source_type;
    m_event_source_type_isSet = true;
}

bool OAIAlertInfo::is_event_source_type_Set() const{
    return m_event_source_type_isSet;
}

bool OAIAlertInfo::is_event_source_type_Valid() const{
    return m_event_source_type_isValid;
}

qint32 OAIAlertInfo::getFlags() const {
    return m_flags;
}
void OAIAlertInfo::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIAlertInfo::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIAlertInfo::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIAlertHistoryInfoDetailed OAIAlertInfo::getHistory() const {
    return m_history;
}
void OAIAlertInfo::setHistory(const OAIAlertHistoryInfoDetailed &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIAlertInfo::is_history_Set() const{
    return m_history_isSet;
}

bool OAIAlertInfo::is_history_Valid() const{
    return m_history_isValid;
}

QString OAIAlertInfo::getId() const {
    return m_id;
}
void OAIAlertInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlertInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlertInfo::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAlertInfo::getLastModified() const {
    return m_last_modified;
}
void OAIAlertInfo::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIAlertInfo::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIAlertInfo::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAIEventParameterInfo> OAIAlertInfo::getParameters() const {
    return m_parameters;
}
void OAIAlertInfo::setParameters(const QList<OAIEventParameterInfo> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIAlertInfo::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIAlertInfo::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIAlertSeverities OAIAlertInfo::getSeverity() const {
    return m_severity;
}
void OAIAlertInfo::setSeverity(const OAIAlertSeverities &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAlertInfo::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAlertInfo::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIAlertStatusCodes OAIAlertInfo::getStatus() const {
    return m_status;
}
void OAIAlertInfo::setStatus(const OAIAlertStatusCodes &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAlertInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAlertInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAlertInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIAlertInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIAlertInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIAlertInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIAlertInfo::getTeamId() const {
    return m_team_id;
}
void OAIAlertInfo::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIAlertInfo::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIAlertInfo::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIAlertInfo::getText() const {
    return m_text;
}
void OAIAlertInfo::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAlertInfo::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAlertInfo::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAlertInfo::getTitle() const {
    return m_title;
}
void OAIAlertInfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAlertInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAlertInfo::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAlertInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
