/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDutySummaryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDutySummaryInfo::OAITeamDutySummaryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDutySummaryInfo::OAITeamDutySummaryInfo() {
    this->initializeModel();
}

OAITeamDutySummaryInfo::~OAITeamDutySummaryInfo() {}

void OAITeamDutySummaryInfo::initializeModel() {

    m_duty_assist_enabled_isSet = false;
    m_duty_assist_enabled_isValid = false;

    m_duty_summaries_isSet = false;
    m_duty_summaries_isValid = false;
}

void OAITeamDutySummaryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDutySummaryInfo::fromJsonObject(QJsonObject json) {

    m_duty_assist_enabled_isValid = ::OpenAPI::fromJsonValue(m_duty_assist_enabled, json[QString("dutyAssistEnabled")]);
    m_duty_assist_enabled_isSet = !json[QString("dutyAssistEnabled")].isNull() && m_duty_assist_enabled_isValid;

    m_duty_summaries_isValid = ::OpenAPI::fromJsonValue(m_duty_summaries, json[QString("dutySummaries")]);
    m_duty_summaries_isSet = !json[QString("dutySummaries")].isNull() && m_duty_summaries_isValid;
}

QString OAITeamDutySummaryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDutySummaryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_duty_assist_enabled_isSet) {
        obj.insert(QString("dutyAssistEnabled"), ::OpenAPI::toJsonValue(m_duty_assist_enabled));
    }
    if (m_duty_summaries.size() > 0) {
        obj.insert(QString("dutySummaries"), ::OpenAPI::toJsonValue(m_duty_summaries));
    }
    return obj;
}

bool OAITeamDutySummaryInfo::isDutyAssistEnabled() const {
    return m_duty_assist_enabled;
}
void OAITeamDutySummaryInfo::setDutyAssistEnabled(const bool &duty_assist_enabled) {
    m_duty_assist_enabled = duty_assist_enabled;
    m_duty_assist_enabled_isSet = true;
}

bool OAITeamDutySummaryInfo::is_duty_assist_enabled_Set() const{
    return m_duty_assist_enabled_isSet;
}

bool OAITeamDutySummaryInfo::is_duty_assist_enabled_Valid() const{
    return m_duty_assist_enabled_isValid;
}

QList<OAIDutySummaryInfo> OAITeamDutySummaryInfo::getDutySummaries() const {
    return m_duty_summaries;
}
void OAITeamDutySummaryInfo::setDutySummaries(const QList<OAIDutySummaryInfo> &duty_summaries) {
    m_duty_summaries = duty_summaries;
    m_duty_summaries_isSet = true;
}

bool OAITeamDutySummaryInfo::is_duty_summaries_Set() const{
    return m_duty_summaries_isSet;
}

bool OAITeamDutySummaryInfo::is_duty_summaries_Valid() const{
    return m_duty_summaries_isValid;
}

bool OAITeamDutySummaryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duty_assist_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duty_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDutySummaryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
