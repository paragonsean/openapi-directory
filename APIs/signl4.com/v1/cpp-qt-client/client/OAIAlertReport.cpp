/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertReport::OAIAlertReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertReport::OAIAlertReport() {
    this->initializeModel();
}

OAIAlertReport::~OAIAlertReport() {}

void OAIAlertReport::initializeModel() {

    m_last24_hours_isSet = false;
    m_last24_hours_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_team_current_duty_isSet = false;
    m_team_current_duty_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_last_duty_isSet = false;
    m_team_last_duty_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_last_duty_change_isSet = false;
    m_user_last_duty_change_isValid = false;
}

void OAIAlertReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertReport::fromJsonObject(QJsonObject json) {

    m_last24_hours_isValid = ::OpenAPI::fromJsonValue(m_last24_hours, json[QString("last24Hours")]);
    m_last24_hours_isSet = !json[QString("last24Hours")].isNull() && m_last24_hours_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_team_current_duty_isValid = ::OpenAPI::fromJsonValue(m_team_current_duty, json[QString("teamCurrentDuty")]);
    m_team_current_duty_isSet = !json[QString("teamCurrentDuty")].isNull() && m_team_current_duty_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_team_last_duty_isValid = ::OpenAPI::fromJsonValue(m_team_last_duty, json[QString("teamLastDuty")]);
    m_team_last_duty_isSet = !json[QString("teamLastDuty")].isNull() && m_team_last_duty_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_last_duty_change_isValid = ::OpenAPI::fromJsonValue(m_user_last_duty_change, json[QString("userLastDutyChange")]);
    m_user_last_duty_change_isSet = !json[QString("userLastDutyChange")].isNull() && m_user_last_duty_change_isValid;
}

QString OAIAlertReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertReport::asJsonObject() const {
    QJsonObject obj;
    if (m_last24_hours.isSet()) {
        obj.insert(QString("last24Hours"), ::OpenAPI::toJsonValue(m_last24_hours));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_team_current_duty.isSet()) {
        obj.insert(QString("teamCurrentDuty"), ::OpenAPI::toJsonValue(m_team_current_duty));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_last_duty.isSet()) {
        obj.insert(QString("teamLastDuty"), ::OpenAPI::toJsonValue(m_team_last_duty));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_last_duty_change.isSet()) {
        obj.insert(QString("userLastDutyChange"), ::OpenAPI::toJsonValue(m_user_last_duty_change));
    }
    return obj;
}

OAIAlertCounts OAIAlertReport::getLast24Hours() const {
    return m_last24_hours;
}
void OAIAlertReport::setLast24Hours(const OAIAlertCounts &last24_hours) {
    m_last24_hours = last24_hours;
    m_last24_hours_isSet = true;
}

bool OAIAlertReport::is_last24_hours_Set() const{
    return m_last24_hours_isSet;
}

bool OAIAlertReport::is_last24_hours_Valid() const{
    return m_last24_hours_isValid;
}

QString OAIAlertReport::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIAlertReport::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIAlertReport::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIAlertReport::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

OAIAlertCounts OAIAlertReport::getTeamCurrentDuty() const {
    return m_team_current_duty;
}
void OAIAlertReport::setTeamCurrentDuty(const OAIAlertCounts &team_current_duty) {
    m_team_current_duty = team_current_duty;
    m_team_current_duty_isSet = true;
}

bool OAIAlertReport::is_team_current_duty_Set() const{
    return m_team_current_duty_isSet;
}

bool OAIAlertReport::is_team_current_duty_Valid() const{
    return m_team_current_duty_isValid;
}

QString OAIAlertReport::getTeamId() const {
    return m_team_id;
}
void OAIAlertReport::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIAlertReport::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIAlertReport::is_team_id_Valid() const{
    return m_team_id_isValid;
}

OAIAlertCounts OAIAlertReport::getTeamLastDuty() const {
    return m_team_last_duty;
}
void OAIAlertReport::setTeamLastDuty(const OAIAlertCounts &team_last_duty) {
    m_team_last_duty = team_last_duty;
    m_team_last_duty_isSet = true;
}

bool OAIAlertReport::is_team_last_duty_Set() const{
    return m_team_last_duty_isSet;
}

bool OAIAlertReport::is_team_last_duty_Valid() const{
    return m_team_last_duty_isValid;
}

QString OAIAlertReport::getUserId() const {
    return m_user_id;
}
void OAIAlertReport::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAlertReport::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAlertReport::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIAlertCounts OAIAlertReport::getUserLastDutyChange() const {
    return m_user_last_duty_change;
}
void OAIAlertReport::setUserLastDutyChange(const OAIAlertCounts &user_last_duty_change) {
    m_user_last_duty_change = user_last_duty_change;
    m_user_last_duty_change_isSet = true;
}

bool OAIAlertReport::is_user_last_duty_change_Set() const{
    return m_user_last_duty_change_isSet;
}

bool OAIAlertReport::is_user_last_duty_change_Valid() const{
    return m_user_last_duty_change_isValid;
}

bool OAIAlertReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last24_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_current_duty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_last_duty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_last_duty_change.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
