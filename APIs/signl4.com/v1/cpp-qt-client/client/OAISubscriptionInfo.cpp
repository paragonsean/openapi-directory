/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionInfo::OAISubscriptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionInfo::OAISubscriptionInfo() {
    this->initializeModel();
}

OAISubscriptionInfo::~OAISubscriptionInfo() {}

void OAISubscriptionInfo::initializeModel() {

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_external_account_id_isSet = false;
    m_external_account_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_billing_isSet = false;
    m_next_billing_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_plan_code_isSet = false;
    m_plan_code_isValid = false;

    m_plan_state_isSet = false;
    m_plan_state_isValid = false;

    m_referral_enabled_isSet = false;
    m_referral_enabled_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubscriptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionInfo::fromJsonObject(QJsonObject json) {

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_external_account_id_isValid = ::OpenAPI::fromJsonValue(m_external_account_id, json[QString("externalAccountId")]);
    m_external_account_id_isSet = !json[QString("externalAccountId")].isNull() && m_external_account_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_billing_isValid = ::OpenAPI::fromJsonValue(m_next_billing, json[QString("nextBilling")]);
    m_next_billing_isSet = !json[QString("nextBilling")].isNull() && m_next_billing_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_plan_code_isValid = ::OpenAPI::fromJsonValue(m_plan_code, json[QString("planCode")]);
    m_plan_code_isSet = !json[QString("planCode")].isNull() && m_plan_code_isValid;

    m_plan_state_isValid = ::OpenAPI::fromJsonValue(m_plan_state, json[QString("planState")]);
    m_plan_state_isSet = !json[QString("planState")].isNull() && m_plan_state_isValid;

    m_referral_enabled_isValid = ::OpenAPI::fromJsonValue(m_referral_enabled, json[QString("referralEnabled")]);
    m_referral_enabled_isSet = !json[QString("referralEnabled")].isNull() && m_referral_enabled_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISubscriptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_id_isSet) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_external_account_id_isSet) {
        obj.insert(QString("externalAccountId"), ::OpenAPI::toJsonValue(m_external_account_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_billing_isSet) {
        obj.insert(QString("nextBilling"), ::OpenAPI::toJsonValue(m_next_billing));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_plan_code_isSet) {
        obj.insert(QString("planCode"), ::OpenAPI::toJsonValue(m_plan_code));
    }
    if (m_plan_state_isSet) {
        obj.insert(QString("planState"), ::OpenAPI::toJsonValue(m_plan_state));
    }
    if (m_referral_enabled_isSet) {
        obj.insert(QString("referralEnabled"), ::OpenAPI::toJsonValue(m_referral_enabled));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISubscriptionInfo::getBranchId() const {
    return m_branch_id;
}
void OAISubscriptionInfo::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAISubscriptionInfo::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAISubscriptionInfo::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAISubscriptionInfo::getCountry() const {
    return m_country;
}
void OAISubscriptionInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISubscriptionInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAISubscriptionInfo::is_country_Valid() const{
    return m_country_isValid;
}

QString OAISubscriptionInfo::getCurrency() const {
    return m_currency;
}
void OAISubscriptionInfo::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISubscriptionInfo::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISubscriptionInfo::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISubscriptionInfo::getExternalAccountId() const {
    return m_external_account_id;
}
void OAISubscriptionInfo::setExternalAccountId(const QString &external_account_id) {
    m_external_account_id = external_account_id;
    m_external_account_id_isSet = true;
}

bool OAISubscriptionInfo::is_external_account_id_Set() const{
    return m_external_account_id_isSet;
}

bool OAISubscriptionInfo::is_external_account_id_Valid() const{
    return m_external_account_id_isValid;
}

QString OAISubscriptionInfo::getId() const {
    return m_id;
}
void OAISubscriptionInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscriptionInfo::getName() const {
    return m_name;
}
void OAISubscriptionInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionInfo::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAISubscriptionInfo::getNextBilling() const {
    return m_next_billing;
}
void OAISubscriptionInfo::setNextBilling(const QDateTime &next_billing) {
    m_next_billing = next_billing;
    m_next_billing_isSet = true;
}

bool OAISubscriptionInfo::is_next_billing_Set() const{
    return m_next_billing_isSet;
}

bool OAISubscriptionInfo::is_next_billing_Valid() const{
    return m_next_billing_isValid;
}

QString OAISubscriptionInfo::getOwnerId() const {
    return m_owner_id;
}
void OAISubscriptionInfo::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAISubscriptionInfo::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISubscriptionInfo::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAISubscriptionInfo::getPlanCode() const {
    return m_plan_code;
}
void OAISubscriptionInfo::setPlanCode(const QString &plan_code) {
    m_plan_code = plan_code;
    m_plan_code_isSet = true;
}

bool OAISubscriptionInfo::is_plan_code_Set() const{
    return m_plan_code_isSet;
}

bool OAISubscriptionInfo::is_plan_code_Valid() const{
    return m_plan_code_isValid;
}

qint32 OAISubscriptionInfo::getPlanState() const {
    return m_plan_state;
}
void OAISubscriptionInfo::setPlanState(const qint32 &plan_state) {
    m_plan_state = plan_state;
    m_plan_state_isSet = true;
}

bool OAISubscriptionInfo::is_plan_state_Set() const{
    return m_plan_state_isSet;
}

bool OAISubscriptionInfo::is_plan_state_Valid() const{
    return m_plan_state_isValid;
}

bool OAISubscriptionInfo::isReferralEnabled() const {
    return m_referral_enabled;
}
void OAISubscriptionInfo::setReferralEnabled(const bool &referral_enabled) {
    m_referral_enabled = referral_enabled;
    m_referral_enabled_isSet = true;
}

bool OAISubscriptionInfo::is_referral_enabled_Set() const{
    return m_referral_enabled_isSet;
}

bool OAISubscriptionInfo::is_referral_enabled_Valid() const{
    return m_referral_enabled_isValid;
}

qint32 OAISubscriptionInfo::getStatus() const {
    return m_status;
}
void OAISubscriptionInfo::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionInfo::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubscriptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_billing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
