/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamInfo::OAITeamInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamInfo::OAITeamInfo() {
    this->initializeModel();
}

OAITeamInfo::~OAITeamInfo() {}

void OAITeamInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_member_ids_isSet = false;
    m_member_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAITeamInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_member_ids_isValid = ::OpenAPI::fromJsonValue(m_member_ids, json[QString("memberIds")]);
    m_member_ids_isSet = !json[QString("memberIds")].isNull() && m_member_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAITeamInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_member_ids.size() > 0) {
        obj.insert(QString("memberIds"), ::OpenAPI::toJsonValue(m_member_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAITeamInfo::getId() const {
    return m_id;
}
void OAITeamInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeamInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeamInfo::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAITeamInfo::getMemberIds() const {
    return m_member_ids;
}
void OAITeamInfo::setMemberIds(const QList<QString> &member_ids) {
    m_member_ids = member_ids;
    m_member_ids_isSet = true;
}

bool OAITeamInfo::is_member_ids_Set() const{
    return m_member_ids_isSet;
}

bool OAITeamInfo::is_member_ids_Valid() const{
    return m_member_ids_isValid;
}

QString OAITeamInfo::getName() const {
    return m_name;
}
void OAITeamInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeamInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAITeamInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAITeamInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAITeamInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAITeamInfo::getTimezone() const {
    return m_timezone;
}
void OAITeamInfo::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAITeamInfo::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAITeamInfo::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAITeamInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
