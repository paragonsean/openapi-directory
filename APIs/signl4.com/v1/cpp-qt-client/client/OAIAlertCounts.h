/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlertCounts.h
 *
 * 
 */

#ifndef OAIAlertCounts_H
#define OAIAlertCounts_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAlertCounts : public OAIObject {
public:
    OAIAlertCounts();
    OAIAlertCounts(QString json);
    ~OAIAlertCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getAcked() const;
    void setAcked(const qint64 &acked);
    bool is_acked_Set() const;
    bool is_acked_Valid() const;

    qint64 getClosed() const;
    void setClosed(const qint64 &closed);
    bool is_closed_Set() const;
    bool is_closed_Valid() const;

    QDateTime getEnd() const;
    void setEnd(const QDateTime &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    QDateTime getStart() const;
    void setStart(const QDateTime &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    qint64 getUnhandled() const;
    void setUnhandled(const qint64 &unhandled);
    bool is_unhandled_Set() const;
    bool is_unhandled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_acked;
    bool m_acked_isSet;
    bool m_acked_isValid;

    qint64 m_closed;
    bool m_closed_isSet;
    bool m_closed_isValid;

    QDateTime m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    QDateTime m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    qint64 m_unhandled;
    bool m_unhandled_isSet;
    bool m_unhandled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlertCounts)

#endif // OAIAlertCounts_H
