/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOverviewAlertPagedResultsPublic.h
 *
 * 
 */

#ifndef OAIOverviewAlertPagedResultsPublic_H
#define OAIOverviewAlertPagedResultsPublic_H

#include <QJsonObject>

#include "OAIOverviewAlert.h"
#include "OAIPagedResultsPublicContinuationToken.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPagedResultsPublicContinuationToken;
class OAIOverviewAlert;

class OAIOverviewAlertPagedResultsPublic : public OAIObject {
public:
    OAIOverviewAlertPagedResultsPublic();
    OAIOverviewAlertPagedResultsPublic(QString json);
    ~OAIOverviewAlertPagedResultsPublic() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPagedResultsPublicContinuationToken getContinuationToken() const;
    void setContinuationToken(const OAIPagedResultsPublicContinuationToken &continuation_token);
    bool is_continuation_token_Set() const;
    bool is_continuation_token_Valid() const;

    bool isHasMore() const;
    void setHasMore(const bool &has_more);
    bool is_has_more_Set() const;
    bool is_has_more_Valid() const;

    QList<OAIOverviewAlert> getResults() const;
    void setResults(const QList<OAIOverviewAlert> &results);
    bool is_results_Set() const;
    bool is_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPagedResultsPublicContinuationToken m_continuation_token;
    bool m_continuation_token_isSet;
    bool m_continuation_token_isValid;

    bool m_has_more;
    bool m_has_more_isSet;
    bool m_has_more_isValid;

    QList<OAIOverviewAlert> m_results;
    bool m_results_isSet;
    bool m_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOverviewAlertPagedResultsPublic)

#endif // OAIOverviewAlertPagedResultsPublic_H
