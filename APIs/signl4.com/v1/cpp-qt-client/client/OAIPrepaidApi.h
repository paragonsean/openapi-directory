/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrepaidApi_H
#define OAI_OAIPrepaidApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIPrepaidBalanceInfo.h"
#include "OAIPrepaidSettingsInfo.h"
#include "OAIPrepaidTransactionInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrepaidApi : public QObject {
    Q_OBJECT

public:
    OAIPrepaidApi(const int timeOut = 0);
    ~OAIPrepaidApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void prepaidBalanceGet();


    virtual void prepaidSettingsGet();

    /**
    * @param[in]  oai_prepaid_settings_info OAIPrepaidSettingsInfo [optional]
    */
    virtual void prepaidSettingsPut(const ::OpenAPI::OptionalParam<OAIPrepaidSettingsInfo> &oai_prepaid_settings_info = ::OpenAPI::OptionalParam<OAIPrepaidSettingsInfo>());


    virtual void prepaidTransactionsGet();

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsSubscriptionIdPrepaidBalanceGet(const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsSubscriptionIdPrepaidSettingsGet(const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  oai_prepaid_settings_info OAIPrepaidSettingsInfo [optional]
    */
    virtual void subscriptionsSubscriptionIdPrepaidSettingsPut(const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIPrepaidSettingsInfo> &oai_prepaid_settings_info = ::OpenAPI::OptionalParam<OAIPrepaidSettingsInfo>());

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsSubscriptionIdPrepaidTransactionsGet(const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void prepaidBalanceGetCallback(OAIHttpRequestWorker *worker);
    void prepaidSettingsGetCallback(OAIHttpRequestWorker *worker);
    void prepaidSettingsPutCallback(OAIHttpRequestWorker *worker);
    void prepaidTransactionsGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsSubscriptionIdPrepaidBalanceGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsSubscriptionIdPrepaidSettingsGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsSubscriptionIdPrepaidSettingsPutCallback(OAIHttpRequestWorker *worker);
    void subscriptionsSubscriptionIdPrepaidTransactionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void prepaidBalanceGetSignal(OAIPrepaidBalanceInfo summary);
    void prepaidSettingsGetSignal(OAIPrepaidSettingsInfo summary);
    void prepaidSettingsPutSignal(OAIPrepaidSettingsInfo summary);
    void prepaidTransactionsGetSignal(QList<OAIPrepaidTransactionInfo> summary);
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignal(OAIPrepaidBalanceInfo summary);
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignal(OAIPrepaidSettingsInfo summary);
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignal(OAIPrepaidSettingsInfo summary);
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignal(QList<OAIPrepaidTransactionInfo> summary);


    void prepaidBalanceGetSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidBalanceInfo summary);
    void prepaidSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidSettingsInfo summary);
    void prepaidSettingsPutSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidSettingsInfo summary);
    void prepaidTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrepaidTransactionInfo> summary);
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidBalanceInfo summary);
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidSettingsInfo summary);
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignalFull(OAIHttpRequestWorker *worker, OAIPrepaidSettingsInfo summary);
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrepaidTransactionInfo> summary);

    Q_DECL_DEPRECATED_X("Use prepaidBalanceGetSignalError() instead")
    void prepaidBalanceGetSignalE(OAIPrepaidBalanceInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidBalanceGetSignalError(OAIPrepaidBalanceInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidSettingsGetSignalError() instead")
    void prepaidSettingsGetSignalE(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidSettingsGetSignalError(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidSettingsPutSignalError() instead")
    void prepaidSettingsPutSignalE(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidSettingsPutSignalError(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidTransactionsGetSignalError() instead")
    void prepaidTransactionsGetSignalE(QList<OAIPrepaidTransactionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidTransactionsGetSignalError(QList<OAIPrepaidTransactionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidBalanceGetSignalError() instead")
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignalE(OAIPrepaidBalanceInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignalError(OAIPrepaidBalanceInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidSettingsGetSignalError() instead")
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignalE(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignalError(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidSettingsPutSignalError() instead")
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignalE(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignalError(OAIPrepaidSettingsInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidTransactionsGetSignalError() instead")
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignalE(QList<OAIPrepaidTransactionInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignalError(QList<OAIPrepaidTransactionInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use prepaidBalanceGetSignalErrorFull() instead")
    void prepaidBalanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidBalanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidSettingsGetSignalErrorFull() instead")
    void prepaidSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidSettingsPutSignalErrorFull() instead")
    void prepaidSettingsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidSettingsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prepaidTransactionsGetSignalErrorFull() instead")
    void prepaidTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prepaidTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidBalanceGetSignalErrorFull() instead")
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidBalanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidSettingsGetSignalErrorFull() instead")
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidSettingsPutSignalErrorFull() instead")
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidSettingsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdPrepaidTransactionsGetSignalErrorFull() instead")
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdPrepaidTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
