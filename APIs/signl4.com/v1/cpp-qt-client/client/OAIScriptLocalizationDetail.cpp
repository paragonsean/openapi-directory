/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptLocalizationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptLocalizationDetail::OAIScriptLocalizationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptLocalizationDetail::OAIScriptLocalizationDetail() {
    this->initializeModel();
}

OAIScriptLocalizationDetail::~OAIScriptLocalizationDetail() {}

void OAIScriptLocalizationDetail::initializeModel() {

    m_config_metadata_isSet = false;
    m_config_metadata_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;
}

void OAIScriptLocalizationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptLocalizationDetail::fromJsonObject(QJsonObject json) {

    m_config_metadata_isValid = ::OpenAPI::fromJsonValue(m_config_metadata, json[QString("configMetadata")]);
    m_config_metadata_isSet = !json[QString("configMetadata")].isNull() && m_config_metadata_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;
}

QString OAIScriptLocalizationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptLocalizationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_config_metadata_isSet) {
        obj.insert(QString("configMetadata"), ::OpenAPI::toJsonValue(m_config_metadata));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    return obj;
}

QJsonValue OAIScriptLocalizationDetail::getConfigMetadata() const {
    return m_config_metadata;
}
void OAIScriptLocalizationDetail::setConfigMetadata(const QJsonValue &config_metadata) {
    m_config_metadata = config_metadata;
    m_config_metadata_isSet = true;
}

bool OAIScriptLocalizationDetail::is_config_metadata_Set() const{
    return m_config_metadata_isSet;
}

bool OAIScriptLocalizationDetail::is_config_metadata_Valid() const{
    return m_config_metadata_isValid;
}

OAIScriptDescriptionData OAIScriptLocalizationDetail::getData() const {
    return m_data;
}
void OAIScriptLocalizationDetail::setData(const OAIScriptDescriptionData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIScriptLocalizationDetail::is_data_Set() const{
    return m_data_isSet;
}

bool OAIScriptLocalizationDetail::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIScriptLocalizationDetail::getLanguage() const {
    return m_language;
}
void OAIScriptLocalizationDetail::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIScriptLocalizationDetail::is_language_Set() const{
    return m_language_isSet;
}

bool OAIScriptLocalizationDetail::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIScriptLocalizationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptLocalizationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
