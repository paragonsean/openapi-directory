/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInventoryScriptInfo.h
 *
 * 
 */

#ifndef OAIInventoryScriptInfo_H
#define OAIInventoryScriptInfo_H

#include <QJsonObject>

#include "OAIScriptDescriptionData.h"
#include "OAIScriptLocalizationDetail.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScriptDescriptionData;
class OAIScriptLocalizationDetail;

class OAIInventoryScriptInfo : public OAIObject {
public:
    OAIInventoryScriptInfo();
    OAIInventoryScriptInfo(QString json);
    ~OAIInventoryScriptInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QJsonValue getConfig() const;
    void setConfig(const QJsonValue &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    OAIScriptDescriptionData getData() const;
    void setData(const OAIScriptDescriptionData &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QJsonValue getEventPattern() const;
    void setEventPattern(const QJsonValue &event_pattern);
    bool is_event_pattern_Set() const;
    bool is_event_pattern_Valid() const;

    QString getScriptId() const;
    void setScriptId(const QString &script_id);
    bool is_script_id_Set() const;
    bool is_script_id_Valid() const;

    QList<OAIScriptLocalizationDetail> getScriptLocalizationDetails() const;
    void setScriptLocalizationDetails(const QList<OAIScriptLocalizationDetail> &script_localization_details);
    bool is_script_localization_details_Set() const;
    bool is_script_localization_details_Valid() const;

    QString getScriptName() const;
    void setScriptName(const QString &script_name);
    bool is_script_name_Set() const;
    bool is_script_name_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QJsonValue m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    OAIScriptDescriptionData m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QJsonValue m_event_pattern;
    bool m_event_pattern_isSet;
    bool m_event_pattern_isValid;

    QString m_script_id;
    bool m_script_id_isSet;
    bool m_script_id_isValid;

    QList<OAIScriptLocalizationDetail> m_script_localization_details;
    bool m_script_localization_details_isSet;
    bool m_script_localization_details_isValid;

    QString m_script_name;
    bool m_script_name_isSet;
    bool m_script_name_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInventoryScriptInfo)

#endif // OAIInventoryScriptInfo_H
