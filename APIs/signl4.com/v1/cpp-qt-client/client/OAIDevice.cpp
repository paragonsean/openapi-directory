/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_ringtone_isSet = false;
    m_ringtone_isValid = false;

    m_ringtone_disabled_isSet = false;
    m_ringtone_disabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_ringtone_isValid = ::OpenAPI::fromJsonValue(m_ringtone, json[QString("ringtone")]);
    m_ringtone_isSet = !json[QString("ringtone")].isNull() && m_ringtone_isValid;

    m_ringtone_disabled_isValid = ::OpenAPI::fromJsonValue(m_ringtone_disabled, json[QString("ringtoneDisabled")]);
    m_ringtone_disabled_isSet = !json[QString("ringtoneDisabled")].isNull() && m_ringtone_disabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_ringtone_isSet) {
        obj.insert(QString("ringtone"), ::OpenAPI::toJsonValue(m_ringtone));
    }
    if (m_ringtone_disabled_isSet) {
        obj.insert(QString("ringtoneDisabled"), ::OpenAPI::toJsonValue(m_ringtone_disabled));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDevice::getAppVersion() const {
    return m_app_version;
}
void OAIDevice::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIDevice::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIDevice::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIDevice::getDeviceId() const {
    return m_device_id;
}
void OAIDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDevice::getOsVersion() const {
    return m_os_version;
}
void OAIDevice::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDevice::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDevice::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIDevice::getRingtone() const {
    return m_ringtone;
}
void OAIDevice::setRingtone(const QString &ringtone) {
    m_ringtone = ringtone;
    m_ringtone_isSet = true;
}

bool OAIDevice::is_ringtone_Set() const{
    return m_ringtone_isSet;
}

bool OAIDevice::is_ringtone_Valid() const{
    return m_ringtone_isValid;
}

bool OAIDevice::isRingtoneDisabled() const {
    return m_ringtone_disabled;
}
void OAIDevice::setRingtoneDisabled(const bool &ringtone_disabled) {
    m_ringtone_disabled = ringtone_disabled;
    m_ringtone_disabled_isSet = true;
}

bool OAIDevice::is_ringtone_disabled_Set() const{
    return m_ringtone_disabled_isSet;
}

bool OAIDevice::is_ringtone_disabled_Valid() const{
    return m_ringtone_disabled_isValid;
}

OAIDeviceType OAIDevice::getType() const {
    return m_type;
}
void OAIDevice::setType(const OAIDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDevice::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDevice::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ringtone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ringtone_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
