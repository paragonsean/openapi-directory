/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInvitationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInvitationInfo::OAIUserInvitationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInvitationInfo::OAIUserInvitationInfo() {
    this->initializeModel();
}

OAIUserInvitationInfo::~OAIUserInvitationInfo() {}

void OAIUserInvitationInfo::initializeModel() {

    m_inviter_id_isSet = false;
    m_inviter_id_isValid = false;

    m_user_mail_isSet = false;
    m_user_mail_isValid = false;
}

void OAIUserInvitationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInvitationInfo::fromJsonObject(QJsonObject json) {

    m_inviter_id_isValid = ::OpenAPI::fromJsonValue(m_inviter_id, json[QString("inviterId")]);
    m_inviter_id_isSet = !json[QString("inviterId")].isNull() && m_inviter_id_isValid;

    m_user_mail_isValid = ::OpenAPI::fromJsonValue(m_user_mail, json[QString("userMail")]);
    m_user_mail_isSet = !json[QString("userMail")].isNull() && m_user_mail_isValid;
}

QString OAIUserInvitationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInvitationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_inviter_id_isSet) {
        obj.insert(QString("inviterId"), ::OpenAPI::toJsonValue(m_inviter_id));
    }
    if (m_user_mail_isSet) {
        obj.insert(QString("userMail"), ::OpenAPI::toJsonValue(m_user_mail));
    }
    return obj;
}

QString OAIUserInvitationInfo::getInviterId() const {
    return m_inviter_id;
}
void OAIUserInvitationInfo::setInviterId(const QString &inviter_id) {
    m_inviter_id = inviter_id;
    m_inviter_id_isSet = true;
}

bool OAIUserInvitationInfo::is_inviter_id_Set() const{
    return m_inviter_id_isSet;
}

bool OAIUserInvitationInfo::is_inviter_id_Valid() const{
    return m_inviter_id_isValid;
}

QString OAIUserInvitationInfo::getUserMail() const {
    return m_user_mail;
}
void OAIUserInvitationInfo::setUserMail(const QString &user_mail) {
    m_user_mail = user_mail;
    m_user_mail_isSet = true;
}

bool OAIUserInvitationInfo::is_user_mail_Set() const{
    return m_user_mail_isSet;
}

bool OAIUserInvitationInfo::is_user_mail_Valid() const{
    return m_user_mail_isValid;
}

bool OAIUserInvitationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inviter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInvitationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
