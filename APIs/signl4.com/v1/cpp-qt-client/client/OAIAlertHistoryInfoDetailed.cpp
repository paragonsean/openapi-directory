/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertHistoryInfoDetailed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertHistoryInfoDetailed::OAIAlertHistoryInfoDetailed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertHistoryInfoDetailed::OAIAlertHistoryInfoDetailed() {
    this->initializeModel();
}

OAIAlertHistoryInfoDetailed::~OAIAlertHistoryInfoDetailed() {}

void OAIAlertHistoryInfoDetailed::initializeModel() {

    m_acknowledged_isSet = false;
    m_acknowledged_isValid = false;

    m_acknowledgedgements_isSet = false;
    m_acknowledgedgements_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_closed_by_isSet = false;
    m_closed_by_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_history_entries_isSet = false;
    m_history_entries_isValid = false;
}

void OAIAlertHistoryInfoDetailed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertHistoryInfoDetailed::fromJsonObject(QJsonObject json) {

    m_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_acknowledged, json[QString("acknowledged")]);
    m_acknowledged_isSet = !json[QString("acknowledged")].isNull() && m_acknowledged_isValid;

    m_acknowledgedgements_isValid = ::OpenAPI::fromJsonValue(m_acknowledgedgements, json[QString("acknowledgedgements")]);
    m_acknowledgedgements_isSet = !json[QString("acknowledgedgements")].isNull() && m_acknowledgedgements_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_closed_by_isValid = ::OpenAPI::fromJsonValue(m_closed_by, json[QString("closedBy")]);
    m_closed_by_isSet = !json[QString("closedBy")].isNull() && m_closed_by_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_history_entries_isValid = ::OpenAPI::fromJsonValue(m_history_entries, json[QString("historyEntries")]);
    m_history_entries_isSet = !json[QString("historyEntries")].isNull() && m_history_entries_isValid;
}

QString OAIAlertHistoryInfoDetailed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertHistoryInfoDetailed::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledged_isSet) {
        obj.insert(QString("acknowledged"), ::OpenAPI::toJsonValue(m_acknowledged));
    }
    if (m_acknowledgedgements.size() > 0) {
        obj.insert(QString("acknowledgedgements"), ::OpenAPI::toJsonValue(m_acknowledgedgements));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_closed_by_isSet) {
        obj.insert(QString("closedBy"), ::OpenAPI::toJsonValue(m_closed_by));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_history_entries.size() > 0) {
        obj.insert(QString("historyEntries"), ::OpenAPI::toJsonValue(m_history_entries));
    }
    return obj;
}

QDateTime OAIAlertHistoryInfoDetailed::getAcknowledged() const {
    return m_acknowledged;
}
void OAIAlertHistoryInfoDetailed::setAcknowledged(const QDateTime &acknowledged) {
    m_acknowledged = acknowledged;
    m_acknowledged_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_acknowledged_Set() const{
    return m_acknowledged_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_acknowledged_Valid() const{
    return m_acknowledged_isValid;
}

QList<QString> OAIAlertHistoryInfoDetailed::getAcknowledgedgements() const {
    return m_acknowledgedgements;
}
void OAIAlertHistoryInfoDetailed::setAcknowledgedgements(const QList<QString> &acknowledgedgements) {
    m_acknowledgedgements = acknowledgedgements;
    m_acknowledgedgements_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_acknowledgedgements_Set() const{
    return m_acknowledgedgements_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_acknowledgedgements_Valid() const{
    return m_acknowledgedgements_isValid;
}

QDateTime OAIAlertHistoryInfoDetailed::getClosed() const {
    return m_closed;
}
void OAIAlertHistoryInfoDetailed::setClosed(const QDateTime &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIAlertHistoryInfoDetailed::getClosedBy() const {
    return m_closed_by;
}
void OAIAlertHistoryInfoDetailed::setClosedBy(const QString &closed_by) {
    m_closed_by = closed_by;
    m_closed_by_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_closed_by_Set() const{
    return m_closed_by_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_closed_by_Valid() const{
    return m_closed_by_isValid;
}

QDateTime OAIAlertHistoryInfoDetailed::getCreated() const {
    return m_created;
}
void OAIAlertHistoryInfoDetailed::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_created_Valid() const{
    return m_created_isValid;
}

QList<OAIAlertHistoryInfoEntry> OAIAlertHistoryInfoDetailed::getHistoryEntries() const {
    return m_history_entries;
}
void OAIAlertHistoryInfoDetailed::setHistoryEntries(const QList<OAIAlertHistoryInfoEntry> &history_entries) {
    m_history_entries = history_entries;
    m_history_entries_isSet = true;
}

bool OAIAlertHistoryInfoDetailed::is_history_entries_Set() const{
    return m_history_entries_isSet;
}

bool OAIAlertHistoryInfoDetailed::is_history_entries_Valid() const{
    return m_history_entries_isValid;
}

bool OAIAlertHistoryInfoDetailed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledgedgements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertHistoryInfoDetailed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
