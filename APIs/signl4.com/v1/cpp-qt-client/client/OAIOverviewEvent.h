/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOverviewEvent.h
 *
 * 
 */

#ifndef OAIOverviewEvent_H
#define OAIOverviewEvent_H

#include <QJsonObject>

#include "OAIEventSeverities.h"
#include "OAIEventSourceTypes.h"
#include "OAIEventStatusCodes.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOverviewEvent : public OAIObject {
public:
    OAIOverviewEvent();
    OAIOverviewEvent(QString json);
    ~OAIOverviewEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAcknowledgedAlerts() const;
    void setAcknowledgedAlerts(const QList<QString> &acknowledged_alerts);
    bool is_acknowledged_alerts_Set() const;
    bool is_acknowledged_alerts_Valid() const;

    QString getAlertId() const;
    void setAlertId(const QString &alert_id);
    bool is_alert_id_Set() const;
    bool is_alert_id_Valid() const;

    QString getCategoryId() const;
    void setCategoryId(const QString &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    QList<QString> getClosedAlerts() const;
    void setClosedAlerts(const QList<QString> &closed_alerts);
    bool is_closed_alerts_Set() const;
    bool is_closed_alerts_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIEventSourceTypes getEventSourceType() const;
    void setEventSourceType(const OAIEventSourceTypes &event_source_type);
    bool is_event_source_type_Set() const;
    bool is_event_source_type_Valid() const;

    OAIEventStatusCodes getEventStatus() const;
    void setEventStatus(const OAIEventStatusCodes &event_status);
    bool is_event_status_Set() const;
    bool is_event_status_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    OAIEventSeverities getSeverity() const;
    void setSeverity(const OAIEventSeverities &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_acknowledged_alerts;
    bool m_acknowledged_alerts_isSet;
    bool m_acknowledged_alerts_isValid;

    QString m_alert_id;
    bool m_alert_id_isSet;
    bool m_alert_id_isValid;

    QString m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    QList<QString> m_closed_alerts;
    bool m_closed_alerts_isSet;
    bool m_closed_alerts_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIEventSourceTypes m_event_source_type;
    bool m_event_source_type_isSet;
    bool m_event_source_type_isValid;

    OAIEventStatusCodes m_event_status;
    bool m_event_status_isSet;
    bool m_event_status_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    OAIEventSeverities m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOverviewEvent)

#endif // OAIOverviewEvent_H
