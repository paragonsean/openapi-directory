/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertCounts::OAIAlertCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertCounts::OAIAlertCounts() {
    this->initializeModel();
}

OAIAlertCounts::~OAIAlertCounts() {}

void OAIAlertCounts::initializeModel() {

    m_acked_isSet = false;
    m_acked_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_unhandled_isSet = false;
    m_unhandled_isValid = false;
}

void OAIAlertCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertCounts::fromJsonObject(QJsonObject json) {

    m_acked_isValid = ::OpenAPI::fromJsonValue(m_acked, json[QString("acked")]);
    m_acked_isSet = !json[QString("acked")].isNull() && m_acked_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_unhandled_isValid = ::OpenAPI::fromJsonValue(m_unhandled, json[QString("unhandled")]);
    m_unhandled_isSet = !json[QString("unhandled")].isNull() && m_unhandled_isValid;
}

QString OAIAlertCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_acked_isSet) {
        obj.insert(QString("acked"), ::OpenAPI::toJsonValue(m_acked));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_unhandled_isSet) {
        obj.insert(QString("unhandled"), ::OpenAPI::toJsonValue(m_unhandled));
    }
    return obj;
}

qint64 OAIAlertCounts::getAcked() const {
    return m_acked;
}
void OAIAlertCounts::setAcked(const qint64 &acked) {
    m_acked = acked;
    m_acked_isSet = true;
}

bool OAIAlertCounts::is_acked_Set() const{
    return m_acked_isSet;
}

bool OAIAlertCounts::is_acked_Valid() const{
    return m_acked_isValid;
}

qint64 OAIAlertCounts::getClosed() const {
    return m_closed;
}
void OAIAlertCounts::setClosed(const qint64 &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAlertCounts::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAlertCounts::is_closed_Valid() const{
    return m_closed_isValid;
}

QDateTime OAIAlertCounts::getEnd() const {
    return m_end;
}
void OAIAlertCounts::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIAlertCounts::is_end_Set() const{
    return m_end_isSet;
}

bool OAIAlertCounts::is_end_Valid() const{
    return m_end_isValid;
}

QDateTime OAIAlertCounts::getLastModified() const {
    return m_last_modified;
}
void OAIAlertCounts::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIAlertCounts::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIAlertCounts::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QDateTime OAIAlertCounts::getStart() const {
    return m_start;
}
void OAIAlertCounts::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIAlertCounts::is_start_Set() const{
    return m_start_isSet;
}

bool OAIAlertCounts::is_start_Valid() const{
    return m_start_isValid;
}

qint64 OAIAlertCounts::getUnhandled() const {
    return m_unhandled;
}
void OAIAlertCounts::setUnhandled(const qint64 &unhandled) {
    m_unhandled = unhandled;
    m_unhandled_isSet = true;
}

bool OAIAlertCounts::is_unhandled_Set() const{
    return m_unhandled_isSet;
}

bool OAIAlertCounts::is_unhandled_Valid() const{
    return m_unhandled_isValid;
}

bool OAIAlertCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhandled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
