/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventParameterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventParameterInfo::OAIEventParameterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventParameterInfo::OAIEventParameterInfo() {
    this->initializeModel();
}

OAIEventParameterInfo::~OAIEventParameterInfo() {}

void OAIEventParameterInfo::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEventParameterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventParameterInfo::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEventParameterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventParameterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEventParameterInfo::getName() const {
    return m_name;
}
void OAIEventParameterInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventParameterInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventParameterInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIEventParameterInfo::getOrder() const {
    return m_order;
}
void OAIEventParameterInfo::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIEventParameterInfo::is_order_Set() const{
    return m_order_isSet;
}

bool OAIEventParameterInfo::is_order_Valid() const{
    return m_order_isValid;
}

OAIEventParameterTypes OAIEventParameterInfo::getType() const {
    return m_type;
}
void OAIEventParameterInfo::setType(const OAIEventParameterTypes &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventParameterInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventParameterInfo::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEventParameterInfo::getValue() const {
    return m_value;
}
void OAIEventParameterInfo::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEventParameterInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEventParameterInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEventParameterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventParameterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
