/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOverviewAlert.h
 *
 * 
 */

#ifndef OAIOverviewAlert_H
#define OAIOverviewAlert_H

#include <QJsonObject>

#include "OAIAlertAnnotationInfo.h"
#include "OAIAlertDeliveryStatusInfo.h"
#include "OAIAlertHistoryInfoDetailed.h"
#include "OAIAlertStatusCodes.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAlertDeliveryStatusInfo;
class OAIAlertAnnotationInfo;
class OAIAlertHistoryInfoDetailed;

class OAIOverviewAlert : public OAIObject {
public:
    OAIOverviewAlert();
    OAIOverviewAlert(QString json);
    ~OAIOverviewAlert() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAlertDeliveryStatusInfo getAlertDeliveryStatus() const;
    void setAlertDeliveryStatus(const OAIAlertDeliveryStatusInfo &alert_delivery_status);
    bool is_alert_delivery_status_Set() const;
    bool is_alert_delivery_status_Valid() const;

    QList<OAIAlertAnnotationInfo> getAnnotations() const;
    void setAnnotations(const QList<OAIAlertAnnotationInfo> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QString getCategoryId() const;
    void setCategoryId(const QString &category_id);
    bool is_category_id_Set() const;
    bool is_category_id_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    qint32 getFlags() const;
    void setFlags(const qint32 &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    OAIAlertHistoryInfoDetailed getHistoryDetailed() const;
    void setHistoryDetailed(const OAIAlertHistoryInfoDetailed &history_detailed);
    bool is_history_detailed_Set() const;
    bool is_history_detailed_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    qint32 getRequiredAcknowledgements() const;
    void setRequiredAcknowledgements(const qint32 &required_acknowledgements);
    bool is_required_acknowledgements_Set() const;
    bool is_required_acknowledgements_Valid() const;

    OAIAlertStatusCodes getStatus() const;
    void setStatus(const OAIAlertStatusCodes &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAlertDeliveryStatusInfo m_alert_delivery_status;
    bool m_alert_delivery_status_isSet;
    bool m_alert_delivery_status_isValid;

    QList<OAIAlertAnnotationInfo> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QString m_category_id;
    bool m_category_id_isSet;
    bool m_category_id_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    qint32 m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    OAIAlertHistoryInfoDetailed m_history_detailed;
    bool m_history_detailed_isSet;
    bool m_history_detailed_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    qint32 m_required_acknowledgements;
    bool m_required_acknowledgements_isSet;
    bool m_required_acknowledgements_isValid;

    OAIAlertStatusCodes m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOverviewAlert)

#endif // OAIOverviewAlert_H
