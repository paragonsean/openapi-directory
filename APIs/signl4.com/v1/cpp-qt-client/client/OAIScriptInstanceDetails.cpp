/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptInstanceDetails::OAIScriptInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptInstanceDetails::OAIScriptInstanceDetails() {
    this->initializeModel();
}

OAIScriptInstanceDetails::~OAIScriptInstanceDetails() {}

void OAIScriptInstanceDetails::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_custom_script_description_isSet = false;
    m_custom_script_description_isValid = false;

    m_custom_script_name_isSet = false;
    m_custom_script_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_runtime_information_isSet = false;
    m_runtime_information_isValid = false;

    m_script_id_isSet = false;
    m_script_id_isValid = false;

    m_script_name_isSet = false;
    m_script_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIScriptInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptInstanceDetails::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_custom_script_description_isValid = ::OpenAPI::fromJsonValue(m_custom_script_description, json[QString("customScriptDescription")]);
    m_custom_script_description_isSet = !json[QString("customScriptDescription")].isNull() && m_custom_script_description_isValid;

    m_custom_script_name_isValid = ::OpenAPI::fromJsonValue(m_custom_script_name, json[QString("customScriptName")]);
    m_custom_script_name_isSet = !json[QString("customScriptName")].isNull() && m_custom_script_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("eventPattern")]);
    m_event_pattern_isSet = !json[QString("eventPattern")].isNull() && m_event_pattern_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_runtime_information_isValid = ::OpenAPI::fromJsonValue(m_runtime_information, json[QString("runtimeInformation")]);
    m_runtime_information_isSet = !json[QString("runtimeInformation")].isNull() && m_runtime_information_isValid;

    m_script_id_isValid = ::OpenAPI::fromJsonValue(m_script_id, json[QString("scriptId")]);
    m_script_id_isSet = !json[QString("scriptId")].isNull() && m_script_id_isValid;

    m_script_name_isValid = ::OpenAPI::fromJsonValue(m_script_name, json[QString("scriptName")]);
    m_script_name_isSet = !json[QString("scriptName")].isNull() && m_script_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;
}

QString OAIScriptInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_custom_script_description_isSet) {
        obj.insert(QString("customScriptDescription"), ::OpenAPI::toJsonValue(m_custom_script_description));
    }
    if (m_custom_script_name_isSet) {
        obj.insert(QString("customScriptName"), ::OpenAPI::toJsonValue(m_custom_script_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("eventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_runtime_information.isSet()) {
        obj.insert(QString("runtimeInformation"), ::OpenAPI::toJsonValue(m_runtime_information));
    }
    if (m_script_id_isSet) {
        obj.insert(QString("scriptId"), ::OpenAPI::toJsonValue(m_script_id));
    }
    if (m_script_name_isSet) {
        obj.insert(QString("scriptName"), ::OpenAPI::toJsonValue(m_script_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QJsonValue OAIScriptInstanceDetails::getConfig() const {
    return m_config;
}
void OAIScriptInstanceDetails::setConfig(const QJsonValue &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIScriptInstanceDetails::is_config_Set() const{
    return m_config_isSet;
}

bool OAIScriptInstanceDetails::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIScriptInstanceDetails::getCustomScriptDescription() const {
    return m_custom_script_description;
}
void OAIScriptInstanceDetails::setCustomScriptDescription(const QString &custom_script_description) {
    m_custom_script_description = custom_script_description;
    m_custom_script_description_isSet = true;
}

bool OAIScriptInstanceDetails::is_custom_script_description_Set() const{
    return m_custom_script_description_isSet;
}

bool OAIScriptInstanceDetails::is_custom_script_description_Valid() const{
    return m_custom_script_description_isValid;
}

QString OAIScriptInstanceDetails::getCustomScriptName() const {
    return m_custom_script_name;
}
void OAIScriptInstanceDetails::setCustomScriptName(const QString &custom_script_name) {
    m_custom_script_name = custom_script_name;
    m_custom_script_name_isSet = true;
}

bool OAIScriptInstanceDetails::is_custom_script_name_Set() const{
    return m_custom_script_name_isSet;
}

bool OAIScriptInstanceDetails::is_custom_script_name_Valid() const{
    return m_custom_script_name_isValid;
}

bool OAIScriptInstanceDetails::isEnabled() const {
    return m_enabled;
}
void OAIScriptInstanceDetails::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIScriptInstanceDetails::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIScriptInstanceDetails::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QJsonValue OAIScriptInstanceDetails::getEventPattern() const {
    return m_event_pattern;
}
void OAIScriptInstanceDetails::setEventPattern(const QJsonValue &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIScriptInstanceDetails::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIScriptInstanceDetails::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

QString OAIScriptInstanceDetails::getInstanceId() const {
    return m_instance_id;
}
void OAIScriptInstanceDetails::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIScriptInstanceDetails::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIScriptInstanceDetails::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QDateTime OAIScriptInstanceDetails::getLastModified() const {
    return m_last_modified;
}
void OAIScriptInstanceDetails::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIScriptInstanceDetails::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIScriptInstanceDetails::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIScriptInstanceInfoRuntimeInformationModel OAIScriptInstanceDetails::getRuntimeInformation() const {
    return m_runtime_information;
}
void OAIScriptInstanceDetails::setRuntimeInformation(const OAIScriptInstanceInfoRuntimeInformationModel &runtime_information) {
    m_runtime_information = runtime_information;
    m_runtime_information_isSet = true;
}

bool OAIScriptInstanceDetails::is_runtime_information_Set() const{
    return m_runtime_information_isSet;
}

bool OAIScriptInstanceDetails::is_runtime_information_Valid() const{
    return m_runtime_information_isValid;
}

QString OAIScriptInstanceDetails::getScriptId() const {
    return m_script_id;
}
void OAIScriptInstanceDetails::setScriptId(const QString &script_id) {
    m_script_id = script_id;
    m_script_id_isSet = true;
}

bool OAIScriptInstanceDetails::is_script_id_Set() const{
    return m_script_id_isSet;
}

bool OAIScriptInstanceDetails::is_script_id_Valid() const{
    return m_script_id_isValid;
}

QString OAIScriptInstanceDetails::getScriptName() const {
    return m_script_name;
}
void OAIScriptInstanceDetails::setScriptName(const QString &script_name) {
    m_script_name = script_name;
    m_script_name_isSet = true;
}

bool OAIScriptInstanceDetails::is_script_name_Set() const{
    return m_script_name_isSet;
}

bool OAIScriptInstanceDetails::is_script_name_Valid() const{
    return m_script_name_isValid;
}

QString OAIScriptInstanceDetails::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIScriptInstanceDetails::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIScriptInstanceDetails::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIScriptInstanceDetails::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIScriptInstanceDetails::getTeamId() const {
    return m_team_id;
}
void OAIScriptInstanceDetails::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIScriptInstanceDetails::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIScriptInstanceDetails::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIScriptInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_script_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_script_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
