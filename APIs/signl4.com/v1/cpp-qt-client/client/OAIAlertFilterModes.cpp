/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertFilterModes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertFilterModes::OAIAlertFilterModes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertFilterModes::OAIAlertFilterModes() {
    this->initializeModel();
}

OAIAlertFilterModes::~OAIAlertFilterModes() {}

void OAIAlertFilterModes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAlertFilterModes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAlertFilterModes::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlertFilterModes::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlertFilterModes::_1;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAlertFilterModes::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAIAlertFilterModes>(json.toInt());
}

QString OAIAlertFilterModes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAlertFilterModes::_0:
            val = QString::number(0);
            break;
        case eOAIAlertFilterModes::_1:
            val = QString::number(1);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAlertFilterModes::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAIAlertFilterModes::eOAIAlertFilterModes OAIAlertFilterModes::getValue() const {
    return m_value;
}

void OAIAlertFilterModes::setValue(const OAIAlertFilterModes::eOAIAlertFilterModes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAlertFilterModes::isSet() const {
    
    return m_value_isSet;
}

bool OAIAlertFilterModes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
