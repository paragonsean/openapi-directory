/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponseContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponseContent::OAIErrorResponseContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponseContent::OAIErrorResponseContent() {
    this->initializeModel();
}

OAIErrorResponseContent::~OAIErrorResponseContent() {}

void OAIErrorResponseContent::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIErrorResponseContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponseContent::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIErrorResponseContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponseContent::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAIErrorResponseContent::getCode() const {
    return m_code;
}
void OAIErrorResponseContent::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorResponseContent::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorResponseContent::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrorResponseContent::getDetails() const {
    return m_details;
}
void OAIErrorResponseContent::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIErrorResponseContent::is_details_Set() const{
    return m_details_isSet;
}

bool OAIErrorResponseContent::is_details_Valid() const{
    return m_details_isValid;
}

QList<OAIErrorResponseContentBase> OAIErrorResponseContent::getErrors() const {
    return m_errors;
}
void OAIErrorResponseContent::setErrors(const QList<OAIErrorResponseContentBase> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIErrorResponseContent::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIErrorResponseContent::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIErrorResponseContent::getMessage() const {
    return m_message;
}
void OAIErrorResponseContent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorResponseContent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorResponseContent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIErrorResponseContent::getRequestId() const {
    return m_request_id;
}
void OAIErrorResponseContent::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIErrorResponseContent::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIErrorResponseContent::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIErrorResponseContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponseContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
