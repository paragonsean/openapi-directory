/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlertSettings.h
 *
 * 
 */

#ifndef OAIAlertSettings_H
#define OAIAlertSettings_H

#include <QJsonObject>

#include "OAIAlertFilterActions.h"
#include "OAIAlertFilterModes.h"
#include "OAIAlertResponseModes.h"
#include "OAIPersistentNotificationModes.h"
#include "OAITeamCategoryOptOutModes.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAlertSettings : public OAIObject {
public:
    OAIAlertSettings();
    OAIAlertSettings(QString json);
    ~OAIAlertSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAlertFilterActions getFilterAction() const;
    void setFilterAction(const OAIAlertFilterActions &filter_action);
    bool is_filter_action_Set() const;
    bool is_filter_action_Valid() const;

    OAIAlertFilterModes getFilterMode() const;
    void setFilterMode(const OAIAlertFilterModes &filter_mode);
    bool is_filter_mode_Set() const;
    bool is_filter_mode_Valid() const;

    OAITeamCategoryOptOutModes getOptOutMode() const;
    void setOptOutMode(const OAITeamCategoryOptOutModes &opt_out_mode);
    bool is_opt_out_mode_Set() const;
    bool is_opt_out_mode_Valid() const;

    OAIPersistentNotificationModes getPersistentNotificicationMode() const;
    void setPersistentNotificicationMode(const OAIPersistentNotificationModes &persistent_notificication_mode);
    bool is_persistent_notificication_mode_Set() const;
    bool is_persistent_notificication_mode_Valid() const;

    OAIAlertResponseModes getResponseMode() const;
    void setResponseMode(const OAIAlertResponseModes &response_mode);
    bool is_response_mode_Set() const;
    bool is_response_mode_Valid() const;

    qint32 getResponseTime() const;
    void setResponseTime(const qint32 &response_time);
    bool is_response_time_Set() const;
    bool is_response_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAlertFilterActions m_filter_action;
    bool m_filter_action_isSet;
    bool m_filter_action_isValid;

    OAIAlertFilterModes m_filter_mode;
    bool m_filter_mode_isSet;
    bool m_filter_mode_isValid;

    OAITeamCategoryOptOutModes m_opt_out_mode;
    bool m_opt_out_mode_isSet;
    bool m_opt_out_mode_isValid;

    OAIPersistentNotificationModes m_persistent_notificication_mode;
    bool m_persistent_notificication_mode_isSet;
    bool m_persistent_notificication_mode_isValid;

    OAIAlertResponseModes m_response_mode;
    bool m_response_mode_isSet;
    bool m_response_mode_isValid;

    qint32 m_response_time;
    bool m_response_time_isSet;
    bool m_response_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlertSettings)

#endif // OAIAlertSettings_H
