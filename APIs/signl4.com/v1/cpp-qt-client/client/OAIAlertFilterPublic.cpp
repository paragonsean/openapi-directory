/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertFilterPublic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertFilterPublic::OAIAlertFilterPublic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertFilterPublic::OAIAlertFilterPublic() {
    this->initializeModel();
}

OAIAlertFilterPublic::~OAIAlertFilterPublic() {}

void OAIAlertFilterPublic::initializeModel() {

    m_alert_ids_isSet = false;
    m_alert_ids_isValid = false;

    m_alerts_after_id_isSet = false;
    m_alerts_after_id_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_continuation_token_isSet = false;
    m_continuation_token_isValid = false;

    m_max_creation_date_isSet = false;
    m_max_creation_date_isValid = false;

    m_min_creation_date_isSet = false;
    m_min_creation_date_isValid = false;

    m_modified_since_isSet = false;
    m_modified_since_isValid = false;

    m_show_personal_hidden_categories_isSet = false;
    m_show_personal_hidden_categories_isValid = false;

    m_status_codes_isSet = false;
    m_status_codes_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_text_to_search_isSet = false;
    m_text_to_search_isValid = false;
}

void OAIAlertFilterPublic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertFilterPublic::fromJsonObject(QJsonObject json) {

    m_alert_ids_isValid = ::OpenAPI::fromJsonValue(m_alert_ids, json[QString("alertIds")]);
    m_alert_ids_isSet = !json[QString("alertIds")].isNull() && m_alert_ids_isValid;

    m_alerts_after_id_isValid = ::OpenAPI::fromJsonValue(m_alerts_after_id, json[QString("alertsAfterId")]);
    m_alerts_after_id_isSet = !json[QString("alertsAfterId")].isNull() && m_alerts_after_id_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_continuation_token_isValid = ::OpenAPI::fromJsonValue(m_continuation_token, json[QString("continuationToken")]);
    m_continuation_token_isSet = !json[QString("continuationToken")].isNull() && m_continuation_token_isValid;

    m_max_creation_date_isValid = ::OpenAPI::fromJsonValue(m_max_creation_date, json[QString("maxCreationDate")]);
    m_max_creation_date_isSet = !json[QString("maxCreationDate")].isNull() && m_max_creation_date_isValid;

    m_min_creation_date_isValid = ::OpenAPI::fromJsonValue(m_min_creation_date, json[QString("minCreationDate")]);
    m_min_creation_date_isSet = !json[QString("minCreationDate")].isNull() && m_min_creation_date_isValid;

    m_modified_since_isValid = ::OpenAPI::fromJsonValue(m_modified_since, json[QString("modifiedSince")]);
    m_modified_since_isSet = !json[QString("modifiedSince")].isNull() && m_modified_since_isValid;

    m_show_personal_hidden_categories_isValid = ::OpenAPI::fromJsonValue(m_show_personal_hidden_categories, json[QString("showPersonalHiddenCategories")]);
    m_show_personal_hidden_categories_isSet = !json[QString("showPersonalHiddenCategories")].isNull() && m_show_personal_hidden_categories_isValid;

    m_status_codes_isValid = ::OpenAPI::fromJsonValue(m_status_codes, json[QString("statusCodes")]);
    m_status_codes_isSet = !json[QString("statusCodes")].isNull() && m_status_codes_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_text_to_search_isValid = ::OpenAPI::fromJsonValue(m_text_to_search, json[QString("textToSearch")]);
    m_text_to_search_isSet = !json[QString("textToSearch")].isNull() && m_text_to_search_isValid;
}

QString OAIAlertFilterPublic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertFilterPublic::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_ids.size() > 0) {
        obj.insert(QString("alertIds"), ::OpenAPI::toJsonValue(m_alert_ids));
    }
    if (m_alerts_after_id_isSet) {
        obj.insert(QString("alertsAfterId"), ::OpenAPI::toJsonValue(m_alerts_after_id));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_continuation_token.isSet()) {
        obj.insert(QString("continuationToken"), ::OpenAPI::toJsonValue(m_continuation_token));
    }
    if (m_max_creation_date_isSet) {
        obj.insert(QString("maxCreationDate"), ::OpenAPI::toJsonValue(m_max_creation_date));
    }
    if (m_min_creation_date_isSet) {
        obj.insert(QString("minCreationDate"), ::OpenAPI::toJsonValue(m_min_creation_date));
    }
    if (m_modified_since_isSet) {
        obj.insert(QString("modifiedSince"), ::OpenAPI::toJsonValue(m_modified_since));
    }
    if (m_show_personal_hidden_categories_isSet) {
        obj.insert(QString("showPersonalHiddenCategories"), ::OpenAPI::toJsonValue(m_show_personal_hidden_categories));
    }
    if (m_status_codes.isSet()) {
        obj.insert(QString("statusCodes"), ::OpenAPI::toJsonValue(m_status_codes));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_text_to_search_isSet) {
        obj.insert(QString("textToSearch"), ::OpenAPI::toJsonValue(m_text_to_search));
    }
    return obj;
}

QList<QString> OAIAlertFilterPublic::getAlertIds() const {
    return m_alert_ids;
}
void OAIAlertFilterPublic::setAlertIds(const QList<QString> &alert_ids) {
    m_alert_ids = alert_ids;
    m_alert_ids_isSet = true;
}

bool OAIAlertFilterPublic::is_alert_ids_Set() const{
    return m_alert_ids_isSet;
}

bool OAIAlertFilterPublic::is_alert_ids_Valid() const{
    return m_alert_ids_isValid;
}

QString OAIAlertFilterPublic::getAlertsAfterId() const {
    return m_alerts_after_id;
}
void OAIAlertFilterPublic::setAlertsAfterId(const QString &alerts_after_id) {
    m_alerts_after_id = alerts_after_id;
    m_alerts_after_id_isSet = true;
}

bool OAIAlertFilterPublic::is_alerts_after_id_Set() const{
    return m_alerts_after_id_isSet;
}

bool OAIAlertFilterPublic::is_alerts_after_id_Valid() const{
    return m_alerts_after_id_isValid;
}

QList<QString> OAIAlertFilterPublic::getCategoryIds() const {
    return m_category_ids;
}
void OAIAlertFilterPublic::setCategoryIds(const QList<QString> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIAlertFilterPublic::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIAlertFilterPublic::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

OAIPagedResultsPublicContinuationToken OAIAlertFilterPublic::getContinuationToken() const {
    return m_continuation_token;
}
void OAIAlertFilterPublic::setContinuationToken(const OAIPagedResultsPublicContinuationToken &continuation_token) {
    m_continuation_token = continuation_token;
    m_continuation_token_isSet = true;
}

bool OAIAlertFilterPublic::is_continuation_token_Set() const{
    return m_continuation_token_isSet;
}

bool OAIAlertFilterPublic::is_continuation_token_Valid() const{
    return m_continuation_token_isValid;
}

QDateTime OAIAlertFilterPublic::getMaxCreationDate() const {
    return m_max_creation_date;
}
void OAIAlertFilterPublic::setMaxCreationDate(const QDateTime &max_creation_date) {
    m_max_creation_date = max_creation_date;
    m_max_creation_date_isSet = true;
}

bool OAIAlertFilterPublic::is_max_creation_date_Set() const{
    return m_max_creation_date_isSet;
}

bool OAIAlertFilterPublic::is_max_creation_date_Valid() const{
    return m_max_creation_date_isValid;
}

QDateTime OAIAlertFilterPublic::getMinCreationDate() const {
    return m_min_creation_date;
}
void OAIAlertFilterPublic::setMinCreationDate(const QDateTime &min_creation_date) {
    m_min_creation_date = min_creation_date;
    m_min_creation_date_isSet = true;
}

bool OAIAlertFilterPublic::is_min_creation_date_Set() const{
    return m_min_creation_date_isSet;
}

bool OAIAlertFilterPublic::is_min_creation_date_Valid() const{
    return m_min_creation_date_isValid;
}

QDateTime OAIAlertFilterPublic::getModifiedSince() const {
    return m_modified_since;
}
void OAIAlertFilterPublic::setModifiedSince(const QDateTime &modified_since) {
    m_modified_since = modified_since;
    m_modified_since_isSet = true;
}

bool OAIAlertFilterPublic::is_modified_since_Set() const{
    return m_modified_since_isSet;
}

bool OAIAlertFilterPublic::is_modified_since_Valid() const{
    return m_modified_since_isValid;
}

bool OAIAlertFilterPublic::isShowPersonalHiddenCategories() const {
    return m_show_personal_hidden_categories;
}
void OAIAlertFilterPublic::setShowPersonalHiddenCategories(const bool &show_personal_hidden_categories) {
    m_show_personal_hidden_categories = show_personal_hidden_categories;
    m_show_personal_hidden_categories_isSet = true;
}

bool OAIAlertFilterPublic::is_show_personal_hidden_categories_Set() const{
    return m_show_personal_hidden_categories_isSet;
}

bool OAIAlertFilterPublic::is_show_personal_hidden_categories_Valid() const{
    return m_show_personal_hidden_categories_isValid;
}

OAIAlertStatusCodes OAIAlertFilterPublic::getStatusCodes() const {
    return m_status_codes;
}
void OAIAlertFilterPublic::setStatusCodes(const OAIAlertStatusCodes &status_codes) {
    m_status_codes = status_codes;
    m_status_codes_isSet = true;
}

bool OAIAlertFilterPublic::is_status_codes_Set() const{
    return m_status_codes_isSet;
}

bool OAIAlertFilterPublic::is_status_codes_Valid() const{
    return m_status_codes_isValid;
}

QString OAIAlertFilterPublic::getTeamId() const {
    return m_team_id;
}
void OAIAlertFilterPublic::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIAlertFilterPublic::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIAlertFilterPublic::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIAlertFilterPublic::getTextToSearch() const {
    return m_text_to_search;
}
void OAIAlertFilterPublic::setTextToSearch(const QString &text_to_search) {
    m_text_to_search = text_to_search;
    m_text_to_search_isSet = true;
}

bool OAIAlertFilterPublic::is_text_to_search_Set() const{
    return m_text_to_search_isSet;
}

bool OAIAlertFilterPublic::is_text_to_search_Valid() const{
    return m_text_to_search_isValid;
}

bool OAIAlertFilterPublic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alerts_after_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuation_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_personal_hidden_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_search_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertFilterPublic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
