/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventFilter.h
 *
 * 
 */

#ifndef OAIEventFilter_H
#define OAIEventFilter_H

#include <QJsonObject>

#include "OAIEventStatusCodes.h"
#include "OAIPagedResultsPublicContinuationToken.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPagedResultsPublicContinuationToken;

class OAIEventFilter : public OAIObject {
public:
    OAIEventFilter();
    OAIEventFilter(QString json);
    ~OAIEventFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPagedResultsPublicContinuationToken getContinuationToken() const;
    void setContinuationToken(const OAIPagedResultsPublicContinuationToken &continuation_token);
    bool is_continuation_token_Set() const;
    bool is_continuation_token_Valid() const;

    OAIEventStatusCodes getEventStatusCode() const;
    void setEventStatusCode(const OAIEventStatusCodes &event_status_code);
    bool is_event_status_code_Set() const;
    bool is_event_status_code_Valid() const;

    QDateTime getMaxCreationDate() const;
    void setMaxCreationDate(const QDateTime &max_creation_date);
    bool is_max_creation_date_Set() const;
    bool is_max_creation_date_Valid() const;

    QDateTime getMinCreationDate() const;
    void setMinCreationDate(const QDateTime &min_creation_date);
    bool is_min_creation_date_Set() const;
    bool is_min_creation_date_Valid() const;

    QDateTime getModifiedSince() const;
    void setModifiedSince(const QDateTime &modified_since);
    bool is_modified_since_Set() const;
    bool is_modified_since_Valid() const;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getTextToSearch() const;
    void setTextToSearch(const QString &text_to_search);
    bool is_text_to_search_Set() const;
    bool is_text_to_search_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPagedResultsPublicContinuationToken m_continuation_token;
    bool m_continuation_token_isSet;
    bool m_continuation_token_isValid;

    OAIEventStatusCodes m_event_status_code;
    bool m_event_status_code_isSet;
    bool m_event_status_code_isValid;

    QDateTime m_max_creation_date;
    bool m_max_creation_date_isSet;
    bool m_max_creation_date_isValid;

    QDateTime m_min_creation_date;
    bool m_min_creation_date_isSet;
    bool m_min_creation_date_isValid;

    QDateTime m_modified_since;
    bool m_modified_since_isSet;
    bool m_modified_since_isValid;

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_text_to_search;
    bool m_text_to_search_isSet;
    bool m_text_to_search_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventFilter)

#endif // OAIEventFilter_H
