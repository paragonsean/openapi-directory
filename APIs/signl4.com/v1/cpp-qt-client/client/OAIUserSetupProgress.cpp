/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSetupProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSetupProgress::OAIUserSetupProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSetupProgress::OAIUserSetupProgress() {
    this->initializeModel();
}

OAIUserSetupProgress::~OAIUserSetupProgress() {}

void OAIUserSetupProgress::initializeModel() {

    m_completed_steps_isSet = false;
    m_completed_steps_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserSetupProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSetupProgress::fromJsonObject(QJsonObject json) {

    m_completed_steps_isValid = ::OpenAPI::fromJsonValue(m_completed_steps, json[QString("completedSteps")]);
    m_completed_steps_isSet = !json[QString("completedSteps")].isNull() && m_completed_steps_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserSetupProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSetupProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_steps.size() > 0) {
        obj.insert(QString("completedSteps"), ::OpenAPI::toJsonValue(m_completed_steps));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<QString> OAIUserSetupProgress::getCompletedSteps() const {
    return m_completed_steps;
}
void OAIUserSetupProgress::setCompletedSteps(const QList<QString> &completed_steps) {
    m_completed_steps = completed_steps;
    m_completed_steps_isSet = true;
}

bool OAIUserSetupProgress::is_completed_steps_Set() const{
    return m_completed_steps_isSet;
}

bool OAIUserSetupProgress::is_completed_steps_Valid() const{
    return m_completed_steps_isValid;
}

QDateTime OAIUserSetupProgress::getTimestamp() const {
    return m_timestamp;
}
void OAIUserSetupProgress::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUserSetupProgress::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUserSetupProgress::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIUserSetupProgress::getUserId() const {
    return m_user_id;
}
void OAIUserSetupProgress::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserSetupProgress::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserSetupProgress::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserSetupProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSetupProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
