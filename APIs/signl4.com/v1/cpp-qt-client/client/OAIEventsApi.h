/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIEventFilter.h"
#include "OAIEventParameterInfo.h"
#include "OAIOverviewEvent.h"
#include "OAIOverviewEventPagedResultsPublic.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_id QString [required]
    */
    virtual void eventsEventIdOverviewGet(const QString &event_id);

    /**
    * @param[in]  event_id QString [required]
    */
    virtual void eventsEventIdParametersGet(const QString &event_id);

    /**
    * @param[in]  max_results qint32 [optional]
    * @param[in]  oai_event_filter OAIEventFilter [optional]
    */
    virtual void eventsPagedPost(const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEventFilter> &oai_event_filter = ::OpenAPI::OptionalParam<OAIEventFilter>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventsEventIdOverviewGetCallback(OAIHttpRequestWorker *worker);
    void eventsEventIdParametersGetCallback(OAIHttpRequestWorker *worker);
    void eventsPagedPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventsEventIdOverviewGetSignal(OAIOverviewEvent summary);
    void eventsEventIdParametersGetSignal(QList<OAIEventParameterInfo> summary);
    void eventsPagedPostSignal(OAIOverviewEventPagedResultsPublic summary);


    void eventsEventIdOverviewGetSignalFull(OAIHttpRequestWorker *worker, OAIOverviewEvent summary);
    void eventsEventIdParametersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEventParameterInfo> summary);
    void eventsPagedPostSignalFull(OAIHttpRequestWorker *worker, OAIOverviewEventPagedResultsPublic summary);

    Q_DECL_DEPRECATED_X("Use eventsEventIdOverviewGetSignalError() instead")
    void eventsEventIdOverviewGetSignalE(OAIOverviewEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventIdOverviewGetSignalError(OAIOverviewEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsEventIdParametersGetSignalError() instead")
    void eventsEventIdParametersGetSignalE(QList<OAIEventParameterInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventIdParametersGetSignalError(QList<OAIEventParameterInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsPagedPostSignalError() instead")
    void eventsPagedPostSignalE(OAIOverviewEventPagedResultsPublic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsPagedPostSignalError(OAIOverviewEventPagedResultsPublic summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventsEventIdOverviewGetSignalErrorFull() instead")
    void eventsEventIdOverviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventIdOverviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsEventIdParametersGetSignalErrorFull() instead")
    void eventsEventIdParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventIdParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsPagedPostSignalErrorFull() instead")
    void eventsPagedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsPagedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
