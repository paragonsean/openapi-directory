/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlertsApi_H
#define OAI_OAIAlertsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertAnnotationInfo.h"
#include "OAIAlertAttachmentInfo.h"
#include "OAIAlertFilterPublic.h"
#include "OAIAlertInfo.h"
#include "OAIAlertNotificationInfo.h"
#include "OAIAlertReport.h"
#include "OAIChangeAlertStatusFilterInfo.h"
#include "OAIChangeAlertStatusInfo.h"
#include "OAIChangeAlertStatusMultipleInfo.h"
#include "OAIErrorResponseContent.h"
#include "OAIHttpFileElement.h"
#include "OAIOverviewAlert.h"
#include "OAIOverviewAlertPagedResultsPublic.h"
#include "OAIRaiseAlertInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlertsApi : public QObject {
    Q_OBJECT

public:
    OAIAlertsApi(const int timeOut = 0);
    ~OAIAlertsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  oai_change_alert_status_filter_info OAIChangeAlertStatusFilterInfo [optional]
    */
    virtual void alertsAcknowledgeAllPost(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChangeAlertStatusFilterInfo> &oai_change_alert_status_filter_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusFilterInfo>());

    /**
    * @param[in]  oai_change_alert_status_multiple_info OAIChangeAlertStatusMultipleInfo [optional]
    */
    virtual void alertsAcknowledgeMultiplePost(const ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo> &oai_change_alert_status_multiple_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo>());

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  oai_change_alert_status_info OAIChangeAlertStatusInfo [optional]
    */
    virtual void alertsAlertIdAcknowledgePost(const QString &alert_id, const ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo> &oai_change_alert_status_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo>());

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  oai_alert_annotation_info OAIAlertAnnotationInfo [optional]
    */
    virtual void alertsAlertIdAnnotatePost(const QString &alert_id, const ::OpenAPI::OptionalParam<OAIAlertAnnotationInfo> &oai_alert_annotation_info = ::OpenAPI::OptionalParam<OAIAlertAnnotationInfo>());

    /**
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsAlertIdAnnotationsGet(const QString &alert_id);

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  scale bool [optional]
    */
    virtual void alertsAlertIdAttachmentsAttachmentIdGet(const QString &alert_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &scale = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsAlertIdAttachmentsGet(const QString &alert_id);

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  oai_change_alert_status_info OAIChangeAlertStatusInfo [optional]
    */
    virtual void alertsAlertIdClosePost(const QString &alert_id, const ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo> &oai_change_alert_status_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo>());

    /**
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsAlertIdGet(const QString &alert_id);

    /**
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsAlertIdNotificationsGet(const QString &alert_id);

    /**
    * @param[in]  alert_id QString [required]
    */
    virtual void alertsAlertIdOverviewGet(const QString &alert_id);

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  oai_change_alert_status_info OAIChangeAlertStatusInfo [optional]
    */
    virtual void alertsAlertIdUndoAcknowledgePost(const QString &alert_id, const ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo> &oai_change_alert_status_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo>());

    /**
    * @param[in]  alert_id QString [required]
    * @param[in]  oai_change_alert_status_info OAIChangeAlertStatusInfo [optional]
    */
    virtual void alertsAlertIdUndoClosePost(const QString &alert_id, const ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo> &oai_change_alert_status_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusInfo>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  oai_change_alert_status_filter_info OAIChangeAlertStatusFilterInfo [optional]
    */
    virtual void alertsCloseAllPost(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChangeAlertStatusFilterInfo> &oai_change_alert_status_filter_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusFilterInfo>());

    /**
    * @param[in]  oai_change_alert_status_multiple_info OAIChangeAlertStatusMultipleInfo [optional]
    */
    virtual void alertsCloseMultiplePost(const ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo> &oai_change_alert_status_multiple_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo>());

    /**
    * @param[in]  max_results qint32 [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  oai_alert_filter_public OAIAlertFilterPublic [optional]
    */
    virtual void alertsPagedPost(const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAlertFilterPublic> &oai_alert_filter_public = ::OpenAPI::OptionalParam<OAIAlertFilterPublic>());

    /**
    * @param[in]  oai_raise_alert_info OAIRaiseAlertInfo [optional]
    */
    virtual void alertsPost(const ::OpenAPI::OptionalParam<OAIRaiseAlertInfo> &oai_raise_alert_info = ::OpenAPI::OptionalParam<OAIRaiseAlertInfo>());

    /**
    * @param[in]  user_id QString [optional]
    */
    virtual void alertsReportGet(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_change_alert_status_multiple_info OAIChangeAlertStatusMultipleInfo [optional]
    */
    virtual void alertsUndoAcknowledgeMultiplePost(const ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo> &oai_change_alert_status_multiple_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo>());

    /**
    * @param[in]  oai_change_alert_status_multiple_info OAIChangeAlertStatusMultipleInfo [optional]
    */
    virtual void alertsUndoCloseMultiplePost(const ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo> &oai_change_alert_status_multiple_info = ::OpenAPI::OptionalParam<OAIChangeAlertStatusMultipleInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alertsAcknowledgeAllPostCallback(OAIHttpRequestWorker *worker);
    void alertsAcknowledgeMultiplePostCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdAcknowledgePostCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdAnnotatePostCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdAnnotationsGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdAttachmentsAttachmentIdGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdClosePostCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdNotificationsGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdOverviewGetCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdUndoAcknowledgePostCallback(OAIHttpRequestWorker *worker);
    void alertsAlertIdUndoClosePostCallback(OAIHttpRequestWorker *worker);
    void alertsCloseAllPostCallback(OAIHttpRequestWorker *worker);
    void alertsCloseMultiplePostCallback(OAIHttpRequestWorker *worker);
    void alertsPagedPostCallback(OAIHttpRequestWorker *worker);
    void alertsPostCallback(OAIHttpRequestWorker *worker);
    void alertsReportGetCallback(OAIHttpRequestWorker *worker);
    void alertsUndoAcknowledgeMultiplePostCallback(OAIHttpRequestWorker *worker);
    void alertsUndoCloseMultiplePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alertsAcknowledgeAllPostSignal();
    void alertsAcknowledgeMultiplePostSignal();
    void alertsAlertIdAcknowledgePostSignal(OAIAlertInfo summary);
    void alertsAlertIdAnnotatePostSignal(OAIAlertAnnotationInfo summary);
    void alertsAlertIdAnnotationsGetSignal(QList<OAIAlertAnnotationInfo> summary);
    void alertsAlertIdAttachmentsAttachmentIdGetSignal(OAIHttpFileElement summary);
    void alertsAlertIdAttachmentsGetSignal(QList<OAIAlertAttachmentInfo> summary);
    void alertsAlertIdClosePostSignal(OAIAlertInfo summary);
    void alertsAlertIdGetSignal(OAIAlertInfo summary);
    void alertsAlertIdNotificationsGetSignal(QList<OAIAlertNotificationInfo> summary);
    void alertsAlertIdOverviewGetSignal(OAIOverviewAlert summary);
    void alertsAlertIdUndoAcknowledgePostSignal(OAIOverviewAlert summary);
    void alertsAlertIdUndoClosePostSignal(OAIOverviewAlert summary);
    void alertsCloseAllPostSignal();
    void alertsCloseMultiplePostSignal();
    void alertsPagedPostSignal(OAIOverviewAlertPagedResultsPublic summary);
    void alertsPostSignal(OAIAlertInfo summary);
    void alertsReportGetSignal(OAIAlertReport summary);
    void alertsUndoAcknowledgeMultiplePostSignal();
    void alertsUndoCloseMultiplePostSignal();


    void alertsAcknowledgeAllPostSignalFull(OAIHttpRequestWorker *worker);
    void alertsAcknowledgeMultiplePostSignalFull(OAIHttpRequestWorker *worker);
    void alertsAlertIdAcknowledgePostSignalFull(OAIHttpRequestWorker *worker, OAIAlertInfo summary);
    void alertsAlertIdAnnotatePostSignalFull(OAIHttpRequestWorker *worker, OAIAlertAnnotationInfo summary);
    void alertsAlertIdAnnotationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlertAnnotationInfo> summary);
    void alertsAlertIdAttachmentsAttachmentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void alertsAlertIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlertAttachmentInfo> summary);
    void alertsAlertIdClosePostSignalFull(OAIHttpRequestWorker *worker, OAIAlertInfo summary);
    void alertsAlertIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAlertInfo summary);
    void alertsAlertIdNotificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlertNotificationInfo> summary);
    void alertsAlertIdOverviewGetSignalFull(OAIHttpRequestWorker *worker, OAIOverviewAlert summary);
    void alertsAlertIdUndoAcknowledgePostSignalFull(OAIHttpRequestWorker *worker, OAIOverviewAlert summary);
    void alertsAlertIdUndoClosePostSignalFull(OAIHttpRequestWorker *worker, OAIOverviewAlert summary);
    void alertsCloseAllPostSignalFull(OAIHttpRequestWorker *worker);
    void alertsCloseMultiplePostSignalFull(OAIHttpRequestWorker *worker);
    void alertsPagedPostSignalFull(OAIHttpRequestWorker *worker, OAIOverviewAlertPagedResultsPublic summary);
    void alertsPostSignalFull(OAIHttpRequestWorker *worker, OAIAlertInfo summary);
    void alertsReportGetSignalFull(OAIHttpRequestWorker *worker, OAIAlertReport summary);
    void alertsUndoAcknowledgeMultiplePostSignalFull(OAIHttpRequestWorker *worker);
    void alertsUndoCloseMultiplePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use alertsAcknowledgeAllPostSignalError() instead")
    void alertsAcknowledgeAllPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAcknowledgeAllPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAcknowledgeMultiplePostSignalError() instead")
    void alertsAcknowledgeMultiplePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAcknowledgeMultiplePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAcknowledgePostSignalError() instead")
    void alertsAlertIdAcknowledgePostSignalE(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAcknowledgePostSignalError(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAnnotatePostSignalError() instead")
    void alertsAlertIdAnnotatePostSignalE(OAIAlertAnnotationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAnnotatePostSignalError(OAIAlertAnnotationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAnnotationsGetSignalError() instead")
    void alertsAlertIdAnnotationsGetSignalE(QList<OAIAlertAnnotationInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAnnotationsGetSignalError(QList<OAIAlertAnnotationInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAttachmentsAttachmentIdGetSignalError() instead")
    void alertsAlertIdAttachmentsAttachmentIdGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAttachmentsAttachmentIdGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAttachmentsGetSignalError() instead")
    void alertsAlertIdAttachmentsGetSignalE(QList<OAIAlertAttachmentInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAttachmentsGetSignalError(QList<OAIAlertAttachmentInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdClosePostSignalError() instead")
    void alertsAlertIdClosePostSignalE(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdClosePostSignalError(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdGetSignalError() instead")
    void alertsAlertIdGetSignalE(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdGetSignalError(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdNotificationsGetSignalError() instead")
    void alertsAlertIdNotificationsGetSignalE(QList<OAIAlertNotificationInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdNotificationsGetSignalError(QList<OAIAlertNotificationInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdOverviewGetSignalError() instead")
    void alertsAlertIdOverviewGetSignalE(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdOverviewGetSignalError(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdUndoAcknowledgePostSignalError() instead")
    void alertsAlertIdUndoAcknowledgePostSignalE(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdUndoAcknowledgePostSignalError(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdUndoClosePostSignalError() instead")
    void alertsAlertIdUndoClosePostSignalE(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdUndoClosePostSignalError(OAIOverviewAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsCloseAllPostSignalError() instead")
    void alertsCloseAllPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsCloseAllPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsCloseMultiplePostSignalError() instead")
    void alertsCloseMultiplePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsCloseMultiplePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsPagedPostSignalError() instead")
    void alertsPagedPostSignalE(OAIOverviewAlertPagedResultsPublic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsPagedPostSignalError(OAIOverviewAlertPagedResultsPublic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsPostSignalError() instead")
    void alertsPostSignalE(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsPostSignalError(OAIAlertInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsReportGetSignalError() instead")
    void alertsReportGetSignalE(OAIAlertReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsReportGetSignalError(OAIAlertReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUndoAcknowledgeMultiplePostSignalError() instead")
    void alertsUndoAcknowledgeMultiplePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUndoAcknowledgeMultiplePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUndoCloseMultiplePostSignalError() instead")
    void alertsUndoCloseMultiplePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUndoCloseMultiplePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alertsAcknowledgeAllPostSignalErrorFull() instead")
    void alertsAcknowledgeAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAcknowledgeAllPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAcknowledgeMultiplePostSignalErrorFull() instead")
    void alertsAcknowledgeMultiplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAcknowledgeMultiplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAcknowledgePostSignalErrorFull() instead")
    void alertsAlertIdAcknowledgePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAcknowledgePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAnnotatePostSignalErrorFull() instead")
    void alertsAlertIdAnnotatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAnnotatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAnnotationsGetSignalErrorFull() instead")
    void alertsAlertIdAnnotationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAnnotationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAttachmentsAttachmentIdGetSignalErrorFull() instead")
    void alertsAlertIdAttachmentsAttachmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAttachmentsAttachmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdAttachmentsGetSignalErrorFull() instead")
    void alertsAlertIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdClosePostSignalErrorFull() instead")
    void alertsAlertIdClosePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdClosePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdGetSignalErrorFull() instead")
    void alertsAlertIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdNotificationsGetSignalErrorFull() instead")
    void alertsAlertIdNotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdNotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdOverviewGetSignalErrorFull() instead")
    void alertsAlertIdOverviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdOverviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdUndoAcknowledgePostSignalErrorFull() instead")
    void alertsAlertIdUndoAcknowledgePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdUndoAcknowledgePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsAlertIdUndoClosePostSignalErrorFull() instead")
    void alertsAlertIdUndoClosePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsAlertIdUndoClosePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsCloseAllPostSignalErrorFull() instead")
    void alertsCloseAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsCloseAllPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsCloseMultiplePostSignalErrorFull() instead")
    void alertsCloseMultiplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsCloseMultiplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsPagedPostSignalErrorFull() instead")
    void alertsPagedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsPagedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsPostSignalErrorFull() instead")
    void alertsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsReportGetSignalErrorFull() instead")
    void alertsReportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsReportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUndoAcknowledgeMultiplePostSignalErrorFull() instead")
    void alertsUndoAcknowledgeMultiplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUndoAcknowledgeMultiplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUndoCloseMultiplePostSignalErrorFull() instead")
    void alertsUndoCloseMultiplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUndoCloseMultiplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
