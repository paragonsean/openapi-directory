/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScriptsApi_H
#define OAI_OAIScriptsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIInventoryScriptInfo.h"
#include "OAIScriptInstanceCustomUserData.h"
#include "OAIScriptInstanceDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScriptsApi : public QObject {
    Q_OBJECT

public:
    OAIScriptsApi(const int timeOut = 0);
    ~OAIScriptsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_id QString [optional]
    */
    virtual void scriptsInstancesGet(const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  oai_script_instance_custom_user_data OAIScriptInstanceCustomUserData [optional]
    */
    virtual void scriptsInstancesInstanceIdDataPut(const QString &instance_id, const ::OpenAPI::OptionalParam<OAIScriptInstanceCustomUserData> &oai_script_instance_custom_user_data = ::OpenAPI::OptionalParam<OAIScriptInstanceCustomUserData>());

    /**
    * @param[in]  instance_id QString [required]
    */
    virtual void scriptsInstancesInstanceIdDelete(const QString &instance_id);

    /**
    * @param[in]  instance_id QString [required]
    */
    virtual void scriptsInstancesInstanceIdDisablePost(const QString &instance_id);

    /**
    * @param[in]  instance_id QString [required]
    */
    virtual void scriptsInstancesInstanceIdEnablePost(const QString &instance_id);

    /**
    * @param[in]  instance_id QString [required]
    */
    virtual void scriptsInstancesInstanceIdGet(const QString &instance_id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  oai_script_instance_details OAIScriptInstanceDetails [optional]
    */
    virtual void scriptsInstancesInstanceIdPut(const QString &instance_id, const ::OpenAPI::OptionalParam<OAIScriptInstanceDetails> &oai_script_instance_details = ::OpenAPI::OptionalParam<OAIScriptInstanceDetails>());

    /**
    * @param[in]  oai_script_instance_details OAIScriptInstanceDetails [optional]
    */
    virtual void scriptsInstancesPost(const ::OpenAPI::OptionalParam<OAIScriptInstanceDetails> &oai_script_instance_details = ::OpenAPI::OptionalParam<OAIScriptInstanceDetails>());


    virtual void scriptsInventoryGet();

    /**
    * @param[in]  language QString [optional]
    */
    virtual void scriptsInventoryParsedGet(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  script_id QString [required]
    * @param[in]  language QString [optional]
    */
    virtual void scriptsInventoryParsedScriptIdGet(const QString &script_id, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void scriptsInstancesGetCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdDataPutCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdDeleteCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdDisablePostCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdEnablePostCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdPutCallback(OAIHttpRequestWorker *worker);
    void scriptsInstancesPostCallback(OAIHttpRequestWorker *worker);
    void scriptsInventoryGetCallback(OAIHttpRequestWorker *worker);
    void scriptsInventoryParsedGetCallback(OAIHttpRequestWorker *worker);
    void scriptsInventoryParsedScriptIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void scriptsInstancesGetSignal(QList<OAIScriptInstanceDetails> summary);
    void scriptsInstancesInstanceIdDataPutSignal(OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdDeleteSignal();
    void scriptsInstancesInstanceIdDisablePostSignal(OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdEnablePostSignal(OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdGetSignal(OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdPutSignal(OAIScriptInstanceDetails summary);
    void scriptsInstancesPostSignal(OAIScriptInstanceDetails summary);
    void scriptsInventoryGetSignal(QList<OAIInventoryScriptInfo> summary);
    void scriptsInventoryParsedGetSignal(QList<OAIInventoryScriptInfo> summary);
    void scriptsInventoryParsedScriptIdGetSignal(OAIScriptInstanceDetails summary);


    void scriptsInstancesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIScriptInstanceDetails> summary);
    void scriptsInstancesInstanceIdDataPutSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void scriptsInstancesInstanceIdDisablePostSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdEnablePostSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInstancesInstanceIdPutSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInstancesPostSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);
    void scriptsInventoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryScriptInfo> summary);
    void scriptsInventoryParsedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryScriptInfo> summary);
    void scriptsInventoryParsedScriptIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScriptInstanceDetails summary);

    Q_DECL_DEPRECATED_X("Use scriptsInstancesGetSignalError() instead")
    void scriptsInstancesGetSignalE(QList<OAIScriptInstanceDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesGetSignalError(QList<OAIScriptInstanceDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDataPutSignalError() instead")
    void scriptsInstancesInstanceIdDataPutSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDataPutSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDeleteSignalError() instead")
    void scriptsInstancesInstanceIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDisablePostSignalError() instead")
    void scriptsInstancesInstanceIdDisablePostSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDisablePostSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdEnablePostSignalError() instead")
    void scriptsInstancesInstanceIdEnablePostSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdEnablePostSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdGetSignalError() instead")
    void scriptsInstancesInstanceIdGetSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdGetSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdPutSignalError() instead")
    void scriptsInstancesInstanceIdPutSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdPutSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesPostSignalError() instead")
    void scriptsInstancesPostSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesPostSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryGetSignalError() instead")
    void scriptsInventoryGetSignalE(QList<OAIInventoryScriptInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryGetSignalError(QList<OAIInventoryScriptInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryParsedGetSignalError() instead")
    void scriptsInventoryParsedGetSignalE(QList<OAIInventoryScriptInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryParsedGetSignalError(QList<OAIInventoryScriptInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryParsedScriptIdGetSignalError() instead")
    void scriptsInventoryParsedScriptIdGetSignalE(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryParsedScriptIdGetSignalError(OAIScriptInstanceDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use scriptsInstancesGetSignalErrorFull() instead")
    void scriptsInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDataPutSignalErrorFull() instead")
    void scriptsInstancesInstanceIdDataPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDataPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDeleteSignalErrorFull() instead")
    void scriptsInstancesInstanceIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdDisablePostSignalErrorFull() instead")
    void scriptsInstancesInstanceIdDisablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdDisablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdEnablePostSignalErrorFull() instead")
    void scriptsInstancesInstanceIdEnablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdEnablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdGetSignalErrorFull() instead")
    void scriptsInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesInstanceIdPutSignalErrorFull() instead")
    void scriptsInstancesInstanceIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesInstanceIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInstancesPostSignalErrorFull() instead")
    void scriptsInstancesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInstancesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryGetSignalErrorFull() instead")
    void scriptsInventoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryParsedGetSignalErrorFull() instead")
    void scriptsInventoryParsedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryParsedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scriptsInventoryParsedScriptIdGetSignalErrorFull() instead")
    void scriptsInventoryParsedScriptIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scriptsInventoryParsedScriptIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
