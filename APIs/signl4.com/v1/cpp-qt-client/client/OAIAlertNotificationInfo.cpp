/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertNotificationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertNotificationInfo::OAIAlertNotificationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertNotificationInfo::OAIAlertNotificationInfo() {
    this->initializeModel();
}

OAIAlertNotificationInfo::~OAIAlertNotificationInfo() {}

void OAIAlertNotificationInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_message_status_isSet = false;
    m_message_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_status_isSet = false;
    m_user_status_isValid = false;
}

void OAIAlertNotificationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertNotificationInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channelType")]);
    m_channel_type_isSet = !json[QString("channelType")].isNull() && m_channel_type_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_message_status_isValid = ::OpenAPI::fromJsonValue(m_message_status, json[QString("messageStatus")]);
    m_message_status_isSet = !json[QString("messageStatus")].isNull() && m_message_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_status_isValid = ::OpenAPI::fromJsonValue(m_user_status, json[QString("userStatus")]);
    m_user_status_isSet = !json[QString("userStatus")].isNull() && m_user_status_isValid;
}

QString OAIAlertNotificationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertNotificationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("channelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_message_status.isSet()) {
        obj.insert(QString("messageStatus"), ::OpenAPI::toJsonValue(m_message_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_status.isSet()) {
        obj.insert(QString("userStatus"), ::OpenAPI::toJsonValue(m_user_status));
    }
    return obj;
}

QString OAIAlertNotificationInfo::getAddress() const {
    return m_address;
}
void OAIAlertNotificationInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAlertNotificationInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAlertNotificationInfo::is_address_Valid() const{
    return m_address_isValid;
}

OAIAlertNotificationInfoChannelType OAIAlertNotificationInfo::getChannelType() const {
    return m_channel_type;
}
void OAIAlertNotificationInfo::setChannelType(const OAIAlertNotificationInfoChannelType &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIAlertNotificationInfo::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIAlertNotificationInfo::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAIAlertNotificationInfo::getDeviceName() const {
    return m_device_name;
}
void OAIAlertNotificationInfo::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIAlertNotificationInfo::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIAlertNotificationInfo::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QDateTime OAIAlertNotificationInfo::getLastUpdate() const {
    return m_last_update;
}
void OAIAlertNotificationInfo::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIAlertNotificationInfo::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIAlertNotificationInfo::is_last_update_Valid() const{
    return m_last_update_isValid;
}

OAIAlertNotificationInfoMessageStatus OAIAlertNotificationInfo::getMessageStatus() const {
    return m_message_status;
}
void OAIAlertNotificationInfo::setMessageStatus(const OAIAlertNotificationInfoMessageStatus &message_status) {
    m_message_status = message_status;
    m_message_status_isSet = true;
}

bool OAIAlertNotificationInfo::is_message_status_Set() const{
    return m_message_status_isSet;
}

bool OAIAlertNotificationInfo::is_message_status_Valid() const{
    return m_message_status_isValid;
}

QString OAIAlertNotificationInfo::getUserId() const {
    return m_user_id;
}
void OAIAlertNotificationInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAlertNotificationInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAlertNotificationInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIAlertNotificationInfoUserStatus OAIAlertNotificationInfo::getUserStatus() const {
    return m_user_status;
}
void OAIAlertNotificationInfo::setUserStatus(const OAIAlertNotificationInfoUserStatus &user_status) {
    m_user_status = user_status;
    m_user_status_isSet = true;
}

bool OAIAlertNotificationInfo::is_user_status_Set() const{
    return m_user_status_isSet;
}

bool OAIAlertNotificationInfo::is_user_status_Valid() const{
    return m_user_status_isValid;
}

bool OAIAlertNotificationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertNotificationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
