/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryScriptInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryScriptInfo::OAIInventoryScriptInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryScriptInfo::OAIInventoryScriptInfo() {
    this->initializeModel();
}

OAIInventoryScriptInfo::~OAIInventoryScriptInfo() {}

void OAIInventoryScriptInfo::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_script_id_isSet = false;
    m_script_id_isValid = false;

    m_script_localization_details_isSet = false;
    m_script_localization_details_isValid = false;

    m_script_name_isSet = false;
    m_script_name_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIInventoryScriptInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryScriptInfo::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("eventPattern")]);
    m_event_pattern_isSet = !json[QString("eventPattern")].isNull() && m_event_pattern_isValid;

    m_script_id_isValid = ::OpenAPI::fromJsonValue(m_script_id, json[QString("scriptId")]);
    m_script_id_isSet = !json[QString("scriptId")].isNull() && m_script_id_isValid;

    m_script_localization_details_isValid = ::OpenAPI::fromJsonValue(m_script_localization_details, json[QString("scriptLocalizationDetails")]);
    m_script_localization_details_isSet = !json[QString("scriptLocalizationDetails")].isNull() && m_script_localization_details_isValid;

    m_script_name_isValid = ::OpenAPI::fromJsonValue(m_script_name, json[QString("scriptName")]);
    m_script_name_isSet = !json[QString("scriptName")].isNull() && m_script_name_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIInventoryScriptInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryScriptInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("eventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_script_id_isSet) {
        obj.insert(QString("scriptId"), ::OpenAPI::toJsonValue(m_script_id));
    }
    if (m_script_localization_details.size() > 0) {
        obj.insert(QString("scriptLocalizationDetails"), ::OpenAPI::toJsonValue(m_script_localization_details));
    }
    if (m_script_name_isSet) {
        obj.insert(QString("scriptName"), ::OpenAPI::toJsonValue(m_script_name));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QJsonValue OAIInventoryScriptInfo::getConfig() const {
    return m_config;
}
void OAIInventoryScriptInfo::setConfig(const QJsonValue &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIInventoryScriptInfo::is_config_Set() const{
    return m_config_isSet;
}

bool OAIInventoryScriptInfo::is_config_Valid() const{
    return m_config_isValid;
}

OAIScriptDescriptionData OAIInventoryScriptInfo::getData() const {
    return m_data;
}
void OAIInventoryScriptInfo::setData(const OAIScriptDescriptionData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIInventoryScriptInfo::is_data_Set() const{
    return m_data_isSet;
}

bool OAIInventoryScriptInfo::is_data_Valid() const{
    return m_data_isValid;
}

QJsonValue OAIInventoryScriptInfo::getEventPattern() const {
    return m_event_pattern;
}
void OAIInventoryScriptInfo::setEventPattern(const QJsonValue &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIInventoryScriptInfo::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIInventoryScriptInfo::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

QString OAIInventoryScriptInfo::getScriptId() const {
    return m_script_id;
}
void OAIInventoryScriptInfo::setScriptId(const QString &script_id) {
    m_script_id = script_id;
    m_script_id_isSet = true;
}

bool OAIInventoryScriptInfo::is_script_id_Set() const{
    return m_script_id_isSet;
}

bool OAIInventoryScriptInfo::is_script_id_Valid() const{
    return m_script_id_isValid;
}

QList<OAIScriptLocalizationDetail> OAIInventoryScriptInfo::getScriptLocalizationDetails() const {
    return m_script_localization_details;
}
void OAIInventoryScriptInfo::setScriptLocalizationDetails(const QList<OAIScriptLocalizationDetail> &script_localization_details) {
    m_script_localization_details = script_localization_details;
    m_script_localization_details_isSet = true;
}

bool OAIInventoryScriptInfo::is_script_localization_details_Set() const{
    return m_script_localization_details_isSet;
}

bool OAIInventoryScriptInfo::is_script_localization_details_Valid() const{
    return m_script_localization_details_isValid;
}

QString OAIInventoryScriptInfo::getScriptName() const {
    return m_script_name;
}
void OAIInventoryScriptInfo::setScriptName(const QString &script_name) {
    m_script_name = script_name;
    m_script_name_isSet = true;
}

bool OAIInventoryScriptInfo::is_script_name_Set() const{
    return m_script_name_isSet;
}

bool OAIInventoryScriptInfo::is_script_name_Valid() const{
    return m_script_name_isValid;
}

QString OAIInventoryScriptInfo::getVisibility() const {
    return m_visibility;
}
void OAIInventoryScriptInfo::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIInventoryScriptInfo::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIInventoryScriptInfo::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIInventoryScriptInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_localization_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryScriptInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
