/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponseContent.h"
#include "OAIWebhookBaseInfo.h"
#include "OAIWebhookInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void getWebhookById(const QString &webhook_id);

    /**
    * @param[in]  team_id QString [optional]
    */
    virtual void webhooksGet(const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_webhook_base_info OAIWebhookBaseInfo [optional]
    */
    virtual void webhooksPost(const ::OpenAPI::OptionalParam<OAIWebhookBaseInfo> &oai_webhook_base_info = ::OpenAPI::OptionalParam<OAIWebhookBaseInfo>());

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void webhooksWebhookIdDelete(const QString &webhook_id);

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void webhooksWebhookIdDisablePost(const QString &webhook_id);

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void webhooksWebhookIdEnablePost(const QString &webhook_id);

    /**
    * @param[in]  webhook_id QString [required]
    * @param[in]  oai_webhook_base_info OAIWebhookBaseInfo [optional]
    */
    virtual void webhooksWebhookIdPut(const QString &webhook_id, const ::OpenAPI::OptionalParam<OAIWebhookBaseInfo> &oai_webhook_base_info = ::OpenAPI::OptionalParam<OAIWebhookBaseInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getWebhookByIdCallback(OAIHttpRequestWorker *worker);
    void webhooksGetCallback(OAIHttpRequestWorker *worker);
    void webhooksPostCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdDeleteCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdDisablePostCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdEnablePostCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getWebhookByIdSignal(QString summary);
    void webhooksGetSignal(QList<OAIWebhookInfo> summary);
    void webhooksPostSignal(QString summary);
    void webhooksWebhookIdDeleteSignal();
    void webhooksWebhookIdDisablePostSignal(OAIWebhookInfo summary);
    void webhooksWebhookIdEnablePostSignal(OAIWebhookInfo summary);
    void webhooksWebhookIdPutSignal(OAIWebhookInfo summary);


    void getWebhookByIdSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webhooksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebhookInfo> summary);
    void webhooksPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void webhooksWebhookIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdDisablePostSignalFull(OAIHttpRequestWorker *worker, OAIWebhookInfo summary);
    void webhooksWebhookIdEnablePostSignalFull(OAIHttpRequestWorker *worker, OAIWebhookInfo summary);
    void webhooksWebhookIdPutSignalFull(OAIHttpRequestWorker *worker, OAIWebhookInfo summary);

    Q_DECL_DEPRECATED_X("Use getWebhookByIdSignalError() instead")
    void getWebhookByIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookByIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksGetSignalError() instead")
    void webhooksGetSignalE(QList<OAIWebhookInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksGetSignalError(QList<OAIWebhookInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksPostSignalError() instead")
    void webhooksPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdDeleteSignalError() instead")
    void webhooksWebhookIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdDisablePostSignalError() instead")
    void webhooksWebhookIdDisablePostSignalE(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdDisablePostSignalError(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdEnablePostSignalError() instead")
    void webhooksWebhookIdEnablePostSignalE(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdEnablePostSignalError(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdPutSignalError() instead")
    void webhooksWebhookIdPutSignalE(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdPutSignalError(OAIWebhookInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getWebhookByIdSignalErrorFull() instead")
    void getWebhookByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksGetSignalErrorFull() instead")
    void webhooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksPostSignalErrorFull() instead")
    void webhooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdDeleteSignalErrorFull() instead")
    void webhooksWebhookIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdDisablePostSignalErrorFull() instead")
    void webhooksWebhookIdDisablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdDisablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdEnablePostSignalErrorFull() instead")
    void webhooksWebhookIdEnablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdEnablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdPutSignalErrorFull() instead")
    void webhooksWebhookIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
