/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDutyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDutyInfo::OAIUserDutyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDutyInfo::OAIUserDutyInfo() {
    this->initializeModel();
}

OAIUserDutyInfo::~OAIUserDutyInfo() {}

void OAIUserDutyInfo::initializeModel() {

    m_last_status_change_isSet = false;
    m_last_status_change_isValid = false;

    m_on_duty_isSet = false;
    m_on_duty_isValid = false;

    m_on_manager_duty_isSet = false;
    m_on_manager_duty_isValid = false;

    m_overdue_isSet = false;
    m_overdue_isValid = false;
}

void OAIUserDutyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDutyInfo::fromJsonObject(QJsonObject json) {

    m_last_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_status_change, json[QString("lastStatusChange")]);
    m_last_status_change_isSet = !json[QString("lastStatusChange")].isNull() && m_last_status_change_isValid;

    m_on_duty_isValid = ::OpenAPI::fromJsonValue(m_on_duty, json[QString("onDuty")]);
    m_on_duty_isSet = !json[QString("onDuty")].isNull() && m_on_duty_isValid;

    m_on_manager_duty_isValid = ::OpenAPI::fromJsonValue(m_on_manager_duty, json[QString("onManagerDuty")]);
    m_on_manager_duty_isSet = !json[QString("onManagerDuty")].isNull() && m_on_manager_duty_isValid;

    m_overdue_isValid = ::OpenAPI::fromJsonValue(m_overdue, json[QString("overdue")]);
    m_overdue_isSet = !json[QString("overdue")].isNull() && m_overdue_isValid;
}

QString OAIUserDutyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDutyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_last_status_change_isSet) {
        obj.insert(QString("lastStatusChange"), ::OpenAPI::toJsonValue(m_last_status_change));
    }
    if (m_on_duty_isSet) {
        obj.insert(QString("onDuty"), ::OpenAPI::toJsonValue(m_on_duty));
    }
    if (m_on_manager_duty_isSet) {
        obj.insert(QString("onManagerDuty"), ::OpenAPI::toJsonValue(m_on_manager_duty));
    }
    if (m_overdue_isSet) {
        obj.insert(QString("overdue"), ::OpenAPI::toJsonValue(m_overdue));
    }
    return obj;
}

QDateTime OAIUserDutyInfo::getLastStatusChange() const {
    return m_last_status_change;
}
void OAIUserDutyInfo::setLastStatusChange(const QDateTime &last_status_change) {
    m_last_status_change = last_status_change;
    m_last_status_change_isSet = true;
}

bool OAIUserDutyInfo::is_last_status_change_Set() const{
    return m_last_status_change_isSet;
}

bool OAIUserDutyInfo::is_last_status_change_Valid() const{
    return m_last_status_change_isValid;
}

bool OAIUserDutyInfo::isOnDuty() const {
    return m_on_duty;
}
void OAIUserDutyInfo::setOnDuty(const bool &on_duty) {
    m_on_duty = on_duty;
    m_on_duty_isSet = true;
}

bool OAIUserDutyInfo::is_on_duty_Set() const{
    return m_on_duty_isSet;
}

bool OAIUserDutyInfo::is_on_duty_Valid() const{
    return m_on_duty_isValid;
}

bool OAIUserDutyInfo::isOnManagerDuty() const {
    return m_on_manager_duty;
}
void OAIUserDutyInfo::setOnManagerDuty(const bool &on_manager_duty) {
    m_on_manager_duty = on_manager_duty;
    m_on_manager_duty_isSet = true;
}

bool OAIUserDutyInfo::is_on_manager_duty_Set() const{
    return m_on_manager_duty_isSet;
}

bool OAIUserDutyInfo::is_on_manager_duty_Valid() const{
    return m_on_manager_duty_isValid;
}

bool OAIUserDutyInfo::isOverdue() const {
    return m_overdue;
}
void OAIUserDutyInfo::setOverdue(const bool &overdue) {
    m_overdue = overdue;
    m_overdue_isSet = true;
}

bool OAIUserDutyInfo::is_overdue_Set() const{
    return m_overdue_isSet;
}

bool OAIUserDutyInfo::is_overdue_Valid() const{
    return m_overdue_isValid;
}

bool OAIUserDutyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_duty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_manager_duty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDutyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
