/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrepaidBalanceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrepaidBalanceInfo::OAIPrepaidBalanceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrepaidBalanceInfo::OAIPrepaidBalanceInfo() {
    this->initializeModel();
}

OAIPrepaidBalanceInfo::~OAIPrepaidBalanceInfo() {}

void OAIPrepaidBalanceInfo::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_latest_top_up_isSet = false;
    m_latest_top_up_isValid = false;

    m_pending_transaction_isSet = false;
    m_pending_transaction_isValid = false;
}

void OAIPrepaidBalanceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrepaidBalanceInfo::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_latest_top_up_isValid = ::OpenAPI::fromJsonValue(m_latest_top_up, json[QString("latestTopUp")]);
    m_latest_top_up_isSet = !json[QString("latestTopUp")].isNull() && m_latest_top_up_isValid;

    m_pending_transaction_isValid = ::OpenAPI::fromJsonValue(m_pending_transaction, json[QString("pendingTransaction")]);
    m_pending_transaction_isSet = !json[QString("pendingTransaction")].isNull() && m_pending_transaction_isValid;
}

QString OAIPrepaidBalanceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrepaidBalanceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_latest_top_up_isSet) {
        obj.insert(QString("latestTopUp"), ::OpenAPI::toJsonValue(m_latest_top_up));
    }
    if (m_pending_transaction_isSet) {
        obj.insert(QString("pendingTransaction"), ::OpenAPI::toJsonValue(m_pending_transaction));
    }
    return obj;
}

qint32 OAIPrepaidBalanceInfo::getBalance() const {
    return m_balance;
}
void OAIPrepaidBalanceInfo::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIPrepaidBalanceInfo::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIPrepaidBalanceInfo::is_balance_Valid() const{
    return m_balance_isValid;
}

QDateTime OAIPrepaidBalanceInfo::getLatestTopUp() const {
    return m_latest_top_up;
}
void OAIPrepaidBalanceInfo::setLatestTopUp(const QDateTime &latest_top_up) {
    m_latest_top_up = latest_top_up;
    m_latest_top_up_isSet = true;
}

bool OAIPrepaidBalanceInfo::is_latest_top_up_Set() const{
    return m_latest_top_up_isSet;
}

bool OAIPrepaidBalanceInfo::is_latest_top_up_Valid() const{
    return m_latest_top_up_isValid;
}

bool OAIPrepaidBalanceInfo::isPendingTransaction() const {
    return m_pending_transaction;
}
void OAIPrepaidBalanceInfo::setPendingTransaction(const bool &pending_transaction) {
    m_pending_transaction = pending_transaction;
    m_pending_transaction_isSet = true;
}

bool OAIPrepaidBalanceInfo::is_pending_transaction_Set() const{
    return m_pending_transaction_isSet;
}

bool OAIPrepaidBalanceInfo::is_pending_transaction_Valid() const{
    return m_pending_transaction_isValid;
}

bool OAIPrepaidBalanceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_top_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrepaidBalanceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
