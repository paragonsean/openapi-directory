/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSourceEndpointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSourceEndpointInfo::OAIEventSourceEndpointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSourceEndpointInfo::OAIEventSourceEndpointInfo() {
    this->initializeModel();
}

OAIEventSourceEndpointInfo::~OAIEventSourceEndpointInfo() {}

void OAIEventSourceEndpointInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_last_event_raised_isSet = false;
    m_last_event_raised_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventSourceEndpointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSourceEndpointInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_last_event_raised_isValid = ::OpenAPI::fromJsonValue(m_last_event_raised, json[QString("lastEventRaised")]);
    m_last_event_raised_isSet = !json[QString("lastEventRaised")].isNull() && m_last_event_raised_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventSourceEndpointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSourceEndpointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_last_event_raised_isSet) {
        obj.insert(QString("lastEventRaised"), ::OpenAPI::toJsonValue(m_last_event_raised));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventSourceEndpointInfo::getAddress() const {
    return m_address;
}
void OAIEventSourceEndpointInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEventSourceEndpointInfo::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEventSourceEndpointInfo::getGroupId() const {
    return m_group_id;
}
void OAIEventSourceEndpointInfo::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIEventSourceEndpointInfo::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QDateTime OAIEventSourceEndpointInfo::getLastEventRaised() const {
    return m_last_event_raised;
}
void OAIEventSourceEndpointInfo::setLastEventRaised(const QDateTime &last_event_raised) {
    m_last_event_raised = last_event_raised;
    m_last_event_raised_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_last_event_raised_Set() const{
    return m_last_event_raised_isSet;
}

bool OAIEventSourceEndpointInfo::is_last_event_raised_Valid() const{
    return m_last_event_raised_isValid;
}

QString OAIEventSourceEndpointInfo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIEventSourceEndpointInfo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIEventSourceEndpointInfo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIEventSourceEndpointInfo::getTeamId() const {
    return m_team_id;
}
void OAIEventSourceEndpointInfo::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIEventSourceEndpointInfo::is_team_id_Valid() const{
    return m_team_id_isValid;
}

OAIEventSourceEndpointTypes OAIEventSourceEndpointInfo::getType() const {
    return m_type;
}
void OAIEventSourceEndpointInfo::setType(const OAIEventSourceEndpointTypes &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventSourceEndpointInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventSourceEndpointInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventSourceEndpointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_event_raised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSourceEndpointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
