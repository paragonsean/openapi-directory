/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertSettings.h"
#include "OAIErrorResponseContent.h"
#include "OAIEventSourceEndpointInfo.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAITeamInfo.h"
#include "OAITeamProfile.h"
#include "OAITeamSetupProgress.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsSubscriptionIdTeamsGet(const QString &subscription_id);


    virtual void teamsGet();

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void teamsTeamIdAlertReportsFileNameGet(const QString &team_id, const QString &file_name);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdAlertReportsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdAlertSettingsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_alert_settings OAIAlertSettings [optional]
    */
    virtual void teamsTeamIdAlertSettingsPost(const QString &team_id, const ::OpenAPI::OptionalParam<OAIAlertSettings> &oai_alert_settings = ::OpenAPI::OptionalParam<OAIAlertSettings>());

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdEventSourcesGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_team_profile OAITeamProfile [optional]
    */
    virtual void teamsTeamIdProfilePut(const QString &team_id, const ::OpenAPI::OptionalParam<OAITeamProfile> &oai_team_profile = ::OpenAPI::OptionalParam<OAITeamProfile>());

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsTeamIdSetupProgressGet(const QString &team_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void subscriptionsSubscriptionIdTeamsGetCallback(OAIHttpRequestWorker *worker);
    void teamsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdAlertReportsFileNameGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdAlertReportsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdAlertSettingsGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdAlertSettingsPostCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdEventSourcesGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdGetCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdProfilePutCallback(OAIHttpRequestWorker *worker);
    void teamsTeamIdSetupProgressGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void subscriptionsSubscriptionIdTeamsGetSignal(QList<OAITeamInfo> summary);
    void teamsGetSignal(QList<OAITeamInfo> summary);
    void teamsTeamIdAlertReportsFileNameGetSignal(OAIHttpFileElement summary);
    void teamsTeamIdAlertReportsGetSignal(QList<OAIObject> summary);
    void teamsTeamIdAlertSettingsGetSignal(OAIAlertSettings summary);
    void teamsTeamIdAlertSettingsPostSignal(OAIAlertSettings summary);
    void teamsTeamIdEventSourcesGetSignal(QList<OAIEventSourceEndpointInfo> summary);
    void teamsTeamIdGetSignal(OAITeamInfo summary);
    void teamsTeamIdProfilePutSignal(OAITeamInfo summary);
    void teamsTeamIdSetupProgressGetSignal(OAITeamSetupProgress summary);


    void subscriptionsSubscriptionIdTeamsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamInfo> summary);
    void teamsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamInfo> summary);
    void teamsTeamIdAlertReportsFileNameGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void teamsTeamIdAlertReportsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void teamsTeamIdAlertSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void teamsTeamIdAlertSettingsPostSignalFull(OAIHttpRequestWorker *worker, OAIAlertSettings summary);
    void teamsTeamIdEventSourcesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEventSourceEndpointInfo> summary);
    void teamsTeamIdGetSignalFull(OAIHttpRequestWorker *worker, OAITeamInfo summary);
    void teamsTeamIdProfilePutSignalFull(OAIHttpRequestWorker *worker, OAITeamInfo summary);
    void teamsTeamIdSetupProgressGetSignalFull(OAIHttpRequestWorker *worker, OAITeamSetupProgress summary);

    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdTeamsGetSignalError() instead")
    void subscriptionsSubscriptionIdTeamsGetSignalE(QList<OAITeamInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdTeamsGetSignalError(QList<OAITeamInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetSignalError() instead")
    void teamsGetSignalE(QList<OAITeamInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalError(QList<OAITeamInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertReportsFileNameGetSignalError() instead")
    void teamsTeamIdAlertReportsFileNameGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertReportsFileNameGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertReportsGetSignalError() instead")
    void teamsTeamIdAlertReportsGetSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertReportsGetSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertSettingsGetSignalError() instead")
    void teamsTeamIdAlertSettingsGetSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertSettingsGetSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertSettingsPostSignalError() instead")
    void teamsTeamIdAlertSettingsPostSignalE(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertSettingsPostSignalError(OAIAlertSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdEventSourcesGetSignalError() instead")
    void teamsTeamIdEventSourcesGetSignalE(QList<OAIEventSourceEndpointInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdEventSourcesGetSignalError(QList<OAIEventSourceEndpointInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdGetSignalError() instead")
    void teamsTeamIdGetSignalE(OAITeamInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdGetSignalError(OAITeamInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdProfilePutSignalError() instead")
    void teamsTeamIdProfilePutSignalE(OAITeamInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdProfilePutSignalError(OAITeamInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSetupProgressGetSignalError() instead")
    void teamsTeamIdSetupProgressGetSignalE(OAITeamSetupProgress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSetupProgressGetSignalError(OAITeamSetupProgress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use subscriptionsSubscriptionIdTeamsGetSignalErrorFull() instead")
    void subscriptionsSubscriptionIdTeamsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsSubscriptionIdTeamsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetSignalErrorFull() instead")
    void teamsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertReportsFileNameGetSignalErrorFull() instead")
    void teamsTeamIdAlertReportsFileNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertReportsFileNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertReportsGetSignalErrorFull() instead")
    void teamsTeamIdAlertReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertSettingsGetSignalErrorFull() instead")
    void teamsTeamIdAlertSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdAlertSettingsPostSignalErrorFull() instead")
    void teamsTeamIdAlertSettingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdAlertSettingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdEventSourcesGetSignalErrorFull() instead")
    void teamsTeamIdEventSourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdEventSourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdGetSignalErrorFull() instead")
    void teamsTeamIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdProfilePutSignalErrorFull() instead")
    void teamsTeamIdProfilePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdProfilePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsTeamIdSetupProgressGetSignalErrorFull() instead")
    void teamsTeamIdSetupProgressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsTeamIdSetupProgressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
