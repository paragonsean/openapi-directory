/**
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryInfo::OAICategoryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryInfo::OAICategoryInfo() {
    this->initializeModel();
}

OAICategoryInfo::~OAICategoryInfo() {}

void OAICategoryInfo::initializeModel() {

    m_augmentations_isSet = false;
    m_augmentations_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_keyword_matching_isSet = false;
    m_keyword_matching_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_last_match_isSet = false;
    m_last_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAICategoryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryInfo::fromJsonObject(QJsonObject json) {

    m_augmentations_isValid = ::OpenAPI::fromJsonValue(m_augmentations, json[QString("augmentations")]);
    m_augmentations_isSet = !json[QString("augmentations")].isNull() && m_augmentations_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("imageName")]);
    m_image_name_isSet = !json[QString("imageName")].isNull() && m_image_name_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_keyword_matching_isValid = ::OpenAPI::fromJsonValue(m_keyword_matching, json[QString("keywordMatching")]);
    m_keyword_matching_isSet = !json[QString("keywordMatching")].isNull() && m_keyword_matching_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_last_match_isValid = ::OpenAPI::fromJsonValue(m_last_match, json[QString("lastMatch")]);
    m_last_match_isSet = !json[QString("lastMatch")].isNull() && m_last_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAICategoryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_augmentations.size() > 0) {
        obj.insert(QString("augmentations"), ::OpenAPI::toJsonValue(m_augmentations));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("imageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_keyword_matching.isSet()) {
        obj.insert(QString("keywordMatching"), ::OpenAPI::toJsonValue(m_keyword_matching));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_last_match_isSet) {
        obj.insert(QString("lastMatch"), ::OpenAPI::toJsonValue(m_last_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QList<OAICategoryAugmentation> OAICategoryInfo::getAugmentations() const {
    return m_augmentations;
}
void OAICategoryInfo::setAugmentations(const QList<OAICategoryAugmentation> &augmentations) {
    m_augmentations = augmentations;
    m_augmentations_isSet = true;
}

bool OAICategoryInfo::is_augmentations_Set() const{
    return m_augmentations_isSet;
}

bool OAICategoryInfo::is_augmentations_Valid() const{
    return m_augmentations_isValid;
}

QString OAICategoryInfo::getColor() const {
    return m_color;
}
void OAICategoryInfo::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICategoryInfo::is_color_Set() const{
    return m_color_isSet;
}

bool OAICategoryInfo::is_color_Valid() const{
    return m_color_isValid;
}

QString OAICategoryInfo::getId() const {
    return m_id;
}
void OAICategoryInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoryInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryInfo::getImageName() const {
    return m_image_name;
}
void OAICategoryInfo::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAICategoryInfo::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAICategoryInfo::is_image_name_Valid() const{
    return m_image_name_isValid;
}

bool OAICategoryInfo::isIsDefault() const {
    return m_is_default;
}
void OAICategoryInfo::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAICategoryInfo::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAICategoryInfo::is_is_default_Valid() const{
    return m_is_default_isValid;
}

OAIKeywordMatchingType OAICategoryInfo::getKeywordMatching() const {
    return m_keyword_matching;
}
void OAICategoryInfo::setKeywordMatching(const OAIKeywordMatchingType &keyword_matching) {
    m_keyword_matching = keyword_matching;
    m_keyword_matching_isSet = true;
}

bool OAICategoryInfo::is_keyword_matching_Set() const{
    return m_keyword_matching_isSet;
}

bool OAICategoryInfo::is_keyword_matching_Valid() const{
    return m_keyword_matching_isValid;
}

QList<QString> OAICategoryInfo::getKeywords() const {
    return m_keywords;
}
void OAICategoryInfo::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICategoryInfo::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICategoryInfo::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QDateTime OAICategoryInfo::getLastMatch() const {
    return m_last_match;
}
void OAICategoryInfo::setLastMatch(const QDateTime &last_match) {
    m_last_match = last_match;
    m_last_match_isSet = true;
}

bool OAICategoryInfo::is_last_match_Set() const{
    return m_last_match_isSet;
}

bool OAICategoryInfo::is_last_match_Valid() const{
    return m_last_match_isValid;
}

QString OAICategoryInfo::getName() const {
    return m_name;
}
void OAICategoryInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAICategoryInfoOptions OAICategoryInfo::getOptions() const {
    return m_options;
}
void OAICategoryInfo::setOptions(const OAICategoryInfoOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICategoryInfo::is_options_Set() const{
    return m_options_isSet;
}

bool OAICategoryInfo::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAICategoryInfo::getOrder() const {
    return m_order;
}
void OAICategoryInfo::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAICategoryInfo::is_order_Set() const{
    return m_order_isSet;
}

bool OAICategoryInfo::is_order_Valid() const{
    return m_order_isValid;
}

bool OAICategoryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_augmentations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_matching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
