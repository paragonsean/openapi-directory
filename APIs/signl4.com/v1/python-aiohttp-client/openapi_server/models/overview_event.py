# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_severities import EventSeverities
from openapi_server.models.event_source_types import EventSourceTypes
from openapi_server.models.event_status_codes import EventStatusCodes
from openapi_server import util


class OverviewEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledged_alerts: List[str]=None, alert_id: str=None, category_id: str=None, closed_alerts: List[str]=None, creation_time: datetime=None, event_source_type: EventSourceTypes=None, event_status: EventStatusCodes=None, id: str=None, last_modified: datetime=None, severity: EventSeverities=None, team_id: str=None, text: str=None, title: str=None):
        """OverviewEvent - a model defined in OpenAPI

        :param acknowledged_alerts: The acknowledged_alerts of this OverviewEvent.
        :param alert_id: The alert_id of this OverviewEvent.
        :param category_id: The category_id of this OverviewEvent.
        :param closed_alerts: The closed_alerts of this OverviewEvent.
        :param creation_time: The creation_time of this OverviewEvent.
        :param event_source_type: The event_source_type of this OverviewEvent.
        :param event_status: The event_status of this OverviewEvent.
        :param id: The id of this OverviewEvent.
        :param last_modified: The last_modified of this OverviewEvent.
        :param severity: The severity of this OverviewEvent.
        :param team_id: The team_id of this OverviewEvent.
        :param text: The text of this OverviewEvent.
        :param title: The title of this OverviewEvent.
        """
        self.openapi_types = {
            'acknowledged_alerts': List[str],
            'alert_id': str,
            'category_id': str,
            'closed_alerts': List[str],
            'creation_time': datetime,
            'event_source_type': EventSourceTypes,
            'event_status': EventStatusCodes,
            'id': str,
            'last_modified': datetime,
            'severity': EventSeverities,
            'team_id': str,
            'text': str,
            'title': str
        }

        self.attribute_map = {
            'acknowledged_alerts': 'acknowledgedAlerts',
            'alert_id': 'alertId',
            'category_id': 'categoryId',
            'closed_alerts': 'closedAlerts',
            'creation_time': 'creationTime',
            'event_source_type': 'eventSourceType',
            'event_status': 'eventStatus',
            'id': 'id',
            'last_modified': 'lastModified',
            'severity': 'severity',
            'team_id': 'teamId',
            'text': 'text',
            'title': 'title'
        }

        self._acknowledged_alerts = acknowledged_alerts
        self._alert_id = alert_id
        self._category_id = category_id
        self._closed_alerts = closed_alerts
        self._creation_time = creation_time
        self._event_source_type = event_source_type
        self._event_status = event_status
        self._id = id
        self._last_modified = last_modified
        self._severity = severity
        self._team_id = team_id
        self._text = text
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OverviewEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OverviewEvent of this OverviewEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledged_alerts(self):
        """Gets the acknowledged_alerts of this OverviewEvent.


        :return: The acknowledged_alerts of this OverviewEvent.
        :rtype: List[str]
        """
        return self._acknowledged_alerts

    @acknowledged_alerts.setter
    def acknowledged_alerts(self, acknowledged_alerts):
        """Sets the acknowledged_alerts of this OverviewEvent.


        :param acknowledged_alerts: The acknowledged_alerts of this OverviewEvent.
        :type acknowledged_alerts: List[str]
        """

        self._acknowledged_alerts = acknowledged_alerts

    @property
    def alert_id(self):
        """Gets the alert_id of this OverviewEvent.


        :return: The alert_id of this OverviewEvent.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this OverviewEvent.


        :param alert_id: The alert_id of this OverviewEvent.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def category_id(self):
        """Gets the category_id of this OverviewEvent.


        :return: The category_id of this OverviewEvent.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this OverviewEvent.


        :param category_id: The category_id of this OverviewEvent.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def closed_alerts(self):
        """Gets the closed_alerts of this OverviewEvent.


        :return: The closed_alerts of this OverviewEvent.
        :rtype: List[str]
        """
        return self._closed_alerts

    @closed_alerts.setter
    def closed_alerts(self, closed_alerts):
        """Sets the closed_alerts of this OverviewEvent.


        :param closed_alerts: The closed_alerts of this OverviewEvent.
        :type closed_alerts: List[str]
        """

        self._closed_alerts = closed_alerts

    @property
    def creation_time(self):
        """Gets the creation_time of this OverviewEvent.


        :return: The creation_time of this OverviewEvent.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this OverviewEvent.


        :param creation_time: The creation_time of this OverviewEvent.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def event_source_type(self):
        """Gets the event_source_type of this OverviewEvent.


        :return: The event_source_type of this OverviewEvent.
        :rtype: EventSourceTypes
        """
        return self._event_source_type

    @event_source_type.setter
    def event_source_type(self, event_source_type):
        """Sets the event_source_type of this OverviewEvent.


        :param event_source_type: The event_source_type of this OverviewEvent.
        :type event_source_type: EventSourceTypes
        """

        self._event_source_type = event_source_type

    @property
    def event_status(self):
        """Gets the event_status of this OverviewEvent.


        :return: The event_status of this OverviewEvent.
        :rtype: EventStatusCodes
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """Sets the event_status of this OverviewEvent.


        :param event_status: The event_status of this OverviewEvent.
        :type event_status: EventStatusCodes
        """

        self._event_status = event_status

    @property
    def id(self):
        """Gets the id of this OverviewEvent.


        :return: The id of this OverviewEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OverviewEvent.


        :param id: The id of this OverviewEvent.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this OverviewEvent.


        :return: The last_modified of this OverviewEvent.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this OverviewEvent.


        :param last_modified: The last_modified of this OverviewEvent.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def severity(self):
        """Gets the severity of this OverviewEvent.


        :return: The severity of this OverviewEvent.
        :rtype: EventSeverities
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this OverviewEvent.


        :param severity: The severity of this OverviewEvent.
        :type severity: EventSeverities
        """

        self._severity = severity

    @property
    def team_id(self):
        """Gets the team_id of this OverviewEvent.


        :return: The team_id of this OverviewEvent.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this OverviewEvent.


        :param team_id: The team_id of this OverviewEvent.
        :type team_id: str
        """

        self._team_id = team_id

    @property
    def text(self):
        """Gets the text of this OverviewEvent.


        :return: The text of this OverviewEvent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this OverviewEvent.


        :param text: The text of this OverviewEvent.
        :type text: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this OverviewEvent.


        :return: The title of this OverviewEvent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OverviewEvent.


        :param title: The title of this OverviewEvent.
        :type title: str
        """

        self._title = title
