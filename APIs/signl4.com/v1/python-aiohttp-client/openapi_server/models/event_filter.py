# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_status_codes import EventStatusCodes
from openapi_server.models.paged_results_public_continuation_token import PagedResultsPublicContinuationToken
from openapi_server import util


class EventFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continuation_token: PagedResultsPublicContinuationToken=None, event_status_code: EventStatusCodes=None, max_creation_date: datetime=None, min_creation_date: datetime=None, modified_since: datetime=None, team_id: str=None, text_to_search: str=None):
        """EventFilter - a model defined in OpenAPI

        :param continuation_token: The continuation_token of this EventFilter.
        :param event_status_code: The event_status_code of this EventFilter.
        :param max_creation_date: The max_creation_date of this EventFilter.
        :param min_creation_date: The min_creation_date of this EventFilter.
        :param modified_since: The modified_since of this EventFilter.
        :param team_id: The team_id of this EventFilter.
        :param text_to_search: The text_to_search of this EventFilter.
        """
        self.openapi_types = {
            'continuation_token': PagedResultsPublicContinuationToken,
            'event_status_code': EventStatusCodes,
            'max_creation_date': datetime,
            'min_creation_date': datetime,
            'modified_since': datetime,
            'team_id': str,
            'text_to_search': str
        }

        self.attribute_map = {
            'continuation_token': 'continuationToken',
            'event_status_code': 'eventStatusCode',
            'max_creation_date': 'maxCreationDate',
            'min_creation_date': 'minCreationDate',
            'modified_since': 'modifiedSince',
            'team_id': 'teamId',
            'text_to_search': 'textToSearch'
        }

        self._continuation_token = continuation_token
        self._event_status_code = event_status_code
        self._max_creation_date = max_creation_date
        self._min_creation_date = min_creation_date
        self._modified_since = modified_since
        self._team_id = team_id
        self._text_to_search = text_to_search

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventFilter of this EventFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continuation_token(self):
        """Gets the continuation_token of this EventFilter.


        :return: The continuation_token of this EventFilter.
        :rtype: PagedResultsPublicContinuationToken
        """
        return self._continuation_token

    @continuation_token.setter
    def continuation_token(self, continuation_token):
        """Sets the continuation_token of this EventFilter.


        :param continuation_token: The continuation_token of this EventFilter.
        :type continuation_token: PagedResultsPublicContinuationToken
        """

        self._continuation_token = continuation_token

    @property
    def event_status_code(self):
        """Gets the event_status_code of this EventFilter.


        :return: The event_status_code of this EventFilter.
        :rtype: EventStatusCodes
        """
        return self._event_status_code

    @event_status_code.setter
    def event_status_code(self, event_status_code):
        """Sets the event_status_code of this EventFilter.


        :param event_status_code: The event_status_code of this EventFilter.
        :type event_status_code: EventStatusCodes
        """

        self._event_status_code = event_status_code

    @property
    def max_creation_date(self):
        """Gets the max_creation_date of this EventFilter.


        :return: The max_creation_date of this EventFilter.
        :rtype: datetime
        """
        return self._max_creation_date

    @max_creation_date.setter
    def max_creation_date(self, max_creation_date):
        """Sets the max_creation_date of this EventFilter.


        :param max_creation_date: The max_creation_date of this EventFilter.
        :type max_creation_date: datetime
        """

        self._max_creation_date = max_creation_date

    @property
    def min_creation_date(self):
        """Gets the min_creation_date of this EventFilter.


        :return: The min_creation_date of this EventFilter.
        :rtype: datetime
        """
        return self._min_creation_date

    @min_creation_date.setter
    def min_creation_date(self, min_creation_date):
        """Sets the min_creation_date of this EventFilter.


        :param min_creation_date: The min_creation_date of this EventFilter.
        :type min_creation_date: datetime
        """

        self._min_creation_date = min_creation_date

    @property
    def modified_since(self):
        """Gets the modified_since of this EventFilter.


        :return: The modified_since of this EventFilter.
        :rtype: datetime
        """
        return self._modified_since

    @modified_since.setter
    def modified_since(self, modified_since):
        """Sets the modified_since of this EventFilter.


        :param modified_since: The modified_since of this EventFilter.
        :type modified_since: datetime
        """

        self._modified_since = modified_since

    @property
    def team_id(self):
        """Gets the team_id of this EventFilter.


        :return: The team_id of this EventFilter.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this EventFilter.


        :param team_id: The team_id of this EventFilter.
        :type team_id: str
        """

        self._team_id = team_id

    @property
    def text_to_search(self):
        """Gets the text_to_search of this EventFilter.


        :return: The text_to_search of this EventFilter.
        :rtype: str
        """
        return self._text_to_search

    @text_to_search.setter
    def text_to_search(self, text_to_search):
        """Sets the text_to_search of this EventFilter.


        :param text_to_search: The text_to_search of this EventFilter.
        :type text_to_search: str
        """

        self._text_to_search = text_to_search
