# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_types import ChannelTypes
from openapi_server.models.device import Device
from openapi_server import util


class ContactAddressInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, channel: ChannelTypes=None, created: datetime=None, device: Device=None, id: str=None, last_updated: datetime=None, options: int=None, user_id: str=None):
        """ContactAddressInfo - a model defined in OpenAPI

        :param address: The address of this ContactAddressInfo.
        :param channel: The channel of this ContactAddressInfo.
        :param created: The created of this ContactAddressInfo.
        :param device: The device of this ContactAddressInfo.
        :param id: The id of this ContactAddressInfo.
        :param last_updated: The last_updated of this ContactAddressInfo.
        :param options: The options of this ContactAddressInfo.
        :param user_id: The user_id of this ContactAddressInfo.
        """
        self.openapi_types = {
            'address': str,
            'channel': ChannelTypes,
            'created': datetime,
            'device': Device,
            'id': str,
            'last_updated': datetime,
            'options': int,
            'user_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'channel': 'channel',
            'created': 'created',
            'device': 'device',
            'id': 'id',
            'last_updated': 'lastUpdated',
            'options': 'options',
            'user_id': 'userId'
        }

        self._address = address
        self._channel = channel
        self._created = created
        self._device = device
        self._id = id
        self._last_updated = last_updated
        self._options = options
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactAddressInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactAddressInfo of this ContactAddressInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ContactAddressInfo.


        :return: The address of this ContactAddressInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactAddressInfo.


        :param address: The address of this ContactAddressInfo.
        :type address: str
        """

        self._address = address

    @property
    def channel(self):
        """Gets the channel of this ContactAddressInfo.


        :return: The channel of this ContactAddressInfo.
        :rtype: ChannelTypes
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ContactAddressInfo.


        :param channel: The channel of this ContactAddressInfo.
        :type channel: ChannelTypes
        """

        self._channel = channel

    @property
    def created(self):
        """Gets the created of this ContactAddressInfo.


        :return: The created of this ContactAddressInfo.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContactAddressInfo.


        :param created: The created of this ContactAddressInfo.
        :type created: datetime
        """

        self._created = created

    @property
    def device(self):
        """Gets the device of this ContactAddressInfo.


        :return: The device of this ContactAddressInfo.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ContactAddressInfo.


        :param device: The device of this ContactAddressInfo.
        :type device: Device
        """

        self._device = device

    @property
    def id(self):
        """Gets the id of this ContactAddressInfo.


        :return: The id of this ContactAddressInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactAddressInfo.


        :param id: The id of this ContactAddressInfo.
        :type id: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ContactAddressInfo.


        :return: The last_updated of this ContactAddressInfo.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ContactAddressInfo.


        :param last_updated: The last_updated of this ContactAddressInfo.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def options(self):
        """Gets the options of this ContactAddressInfo.


        :return: The options of this ContactAddressInfo.
        :rtype: int
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ContactAddressInfo.


        :param options: The options of this ContactAddressInfo.
        :type options: int
        """

        self._options = options

    @property
    def user_id(self):
        """Gets the user_id of this ContactAddressInfo.


        :return: The user_id of this ContactAddressInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ContactAddressInfo.


        :param user_id: The user_id of this ContactAddressInfo.
        :type user_id: str
        """

        self._user_id = user_id
