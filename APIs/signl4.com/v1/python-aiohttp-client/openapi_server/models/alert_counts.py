# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acked: int=None, closed: int=None, end: datetime=None, last_modified: datetime=None, start: datetime=None, unhandled: int=None):
        """AlertCounts - a model defined in OpenAPI

        :param acked: The acked of this AlertCounts.
        :param closed: The closed of this AlertCounts.
        :param end: The end of this AlertCounts.
        :param last_modified: The last_modified of this AlertCounts.
        :param start: The start of this AlertCounts.
        :param unhandled: The unhandled of this AlertCounts.
        """
        self.openapi_types = {
            'acked': int,
            'closed': int,
            'end': datetime,
            'last_modified': datetime,
            'start': datetime,
            'unhandled': int
        }

        self.attribute_map = {
            'acked': 'acked',
            'closed': 'closed',
            'end': 'end',
            'last_modified': 'lastModified',
            'start': 'start',
            'unhandled': 'unhandled'
        }

        self._acked = acked
        self._closed = closed
        self._end = end
        self._last_modified = last_modified
        self._start = start
        self._unhandled = unhandled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertCounts of this AlertCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acked(self):
        """Gets the acked of this AlertCounts.


        :return: The acked of this AlertCounts.
        :rtype: int
        """
        return self._acked

    @acked.setter
    def acked(self, acked):
        """Sets the acked of this AlertCounts.


        :param acked: The acked of this AlertCounts.
        :type acked: int
        """

        self._acked = acked

    @property
    def closed(self):
        """Gets the closed of this AlertCounts.


        :return: The closed of this AlertCounts.
        :rtype: int
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this AlertCounts.


        :param closed: The closed of this AlertCounts.
        :type closed: int
        """

        self._closed = closed

    @property
    def end(self):
        """Gets the end of this AlertCounts.


        :return: The end of this AlertCounts.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AlertCounts.


        :param end: The end of this AlertCounts.
        :type end: datetime
        """

        self._end = end

    @property
    def last_modified(self):
        """Gets the last_modified of this AlertCounts.


        :return: The last_modified of this AlertCounts.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AlertCounts.


        :param last_modified: The last_modified of this AlertCounts.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def start(self):
        """Gets the start of this AlertCounts.


        :return: The start of this AlertCounts.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AlertCounts.


        :param start: The start of this AlertCounts.
        :type start: datetime
        """

        self._start = start

    @property
    def unhandled(self):
        """Gets the unhandled of this AlertCounts.


        :return: The unhandled of this AlertCounts.
        :rtype: int
        """
        return self._unhandled

    @unhandled.setter
    def unhandled(self, unhandled):
        """Sets the unhandled of this AlertCounts.


        :param unhandled: The unhandled of this AlertCounts.
        :type unhandled: int
        """

        self._unhandled = unhandled
