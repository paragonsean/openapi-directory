# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvitedUserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_invite: bool=None, mail: str=None, name: str=None, role_id: str=None):
        """InvitedUserInfo - a model defined in OpenAPI

        :param id: The id of this InvitedUserInfo.
        :param is_invite: The is_invite of this InvitedUserInfo.
        :param mail: The mail of this InvitedUserInfo.
        :param name: The name of this InvitedUserInfo.
        :param role_id: The role_id of this InvitedUserInfo.
        """
        self.openapi_types = {
            'id': str,
            'is_invite': bool,
            'mail': str,
            'name': str,
            'role_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_invite': 'isInvite',
            'mail': 'mail',
            'name': 'name',
            'role_id': 'roleId'
        }

        self._id = id
        self._is_invite = is_invite
        self._mail = mail
        self._name = name
        self._role_id = role_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvitedUserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvitedUserInfo of this InvitedUserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InvitedUserInfo.


        :return: The id of this InvitedUserInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvitedUserInfo.


        :param id: The id of this InvitedUserInfo.
        :type id: str
        """

        self._id = id

    @property
    def is_invite(self):
        """Gets the is_invite of this InvitedUserInfo.


        :return: The is_invite of this InvitedUserInfo.
        :rtype: bool
        """
        return self._is_invite

    @is_invite.setter
    def is_invite(self, is_invite):
        """Sets the is_invite of this InvitedUserInfo.


        :param is_invite: The is_invite of this InvitedUserInfo.
        :type is_invite: bool
        """

        self._is_invite = is_invite

    @property
    def mail(self):
        """Gets the mail of this InvitedUserInfo.


        :return: The mail of this InvitedUserInfo.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this InvitedUserInfo.


        :param mail: The mail of this InvitedUserInfo.
        :type mail: str
        """

        self._mail = mail

    @property
    def name(self):
        """Gets the name of this InvitedUserInfo.


        :return: The name of this InvitedUserInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvitedUserInfo.


        :param name: The name of this InvitedUserInfo.
        :type name: str
        """

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this InvitedUserInfo.


        :return: The role_id of this InvitedUserInfo.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this InvitedUserInfo.


        :param role_id: The role_id of this InvitedUserInfo.
        :type role_id: str
        """

        self._role_id = role_id
