# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_type import DeviceType
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_version: str=None, device_id: str=None, name: str=None, os_version: str=None, ringtone: str=None, ringtone_disabled: bool=None, type: DeviceType=None):
        """Device - a model defined in OpenAPI

        :param app_version: The app_version of this Device.
        :param device_id: The device_id of this Device.
        :param name: The name of this Device.
        :param os_version: The os_version of this Device.
        :param ringtone: The ringtone of this Device.
        :param ringtone_disabled: The ringtone_disabled of this Device.
        :param type: The type of this Device.
        """
        self.openapi_types = {
            'app_version': str,
            'device_id': str,
            'name': str,
            'os_version': str,
            'ringtone': str,
            'ringtone_disabled': bool,
            'type': DeviceType
        }

        self.attribute_map = {
            'app_version': 'appVersion',
            'device_id': 'deviceId',
            'name': 'name',
            'os_version': 'osVersion',
            'ringtone': 'ringtone',
            'ringtone_disabled': 'ringtoneDisabled',
            'type': 'type'
        }

        self._app_version = app_version
        self._device_id = device_id
        self._name = name
        self._os_version = os_version
        self._ringtone = ringtone
        self._ringtone_disabled = ringtone_disabled
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_version(self):
        """Gets the app_version of this Device.


        :return: The app_version of this Device.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this Device.


        :param app_version: The app_version of this Device.
        :type app_version: str
        """

        self._app_version = app_version

    @property
    def device_id(self):
        """Gets the device_id of this Device.


        :return: The device_id of this Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Device.


        :param device_id: The device_id of this Device.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def name(self):
        """Gets the name of this Device.


        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.
        :type name: str
        """

        self._name = name

    @property
    def os_version(self):
        """Gets the os_version of this Device.


        :return: The os_version of this Device.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Device.


        :param os_version: The os_version of this Device.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def ringtone(self):
        """Gets the ringtone of this Device.


        :return: The ringtone of this Device.
        :rtype: str
        """
        return self._ringtone

    @ringtone.setter
    def ringtone(self, ringtone):
        """Sets the ringtone of this Device.


        :param ringtone: The ringtone of this Device.
        :type ringtone: str
        """

        self._ringtone = ringtone

    @property
    def ringtone_disabled(self):
        """Gets the ringtone_disabled of this Device.


        :return: The ringtone_disabled of this Device.
        :rtype: bool
        """
        return self._ringtone_disabled

    @ringtone_disabled.setter
    def ringtone_disabled(self, ringtone_disabled):
        """Sets the ringtone_disabled of this Device.


        :param ringtone_disabled: The ringtone_disabled of this Device.
        :type ringtone_disabled: bool
        """

        self._ringtone_disabled = ringtone_disabled

    @property
    def type(self):
        """Gets the type of this Device.


        :return: The type of this Device.
        :rtype: DeviceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.


        :param type: The type of this Device.
        :type type: DeviceType
        """

        self._type = type
