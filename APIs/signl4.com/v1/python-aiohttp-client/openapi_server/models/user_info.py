# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_address_info import ContactAddressInfo
from openapi_server.models.user_duty_info import UserDutyInfo
from openapi_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_index: int=None, contact_addresses: List[ContactAddressInfo]=None, duty_info: UserDutyInfo=None, id: str=None, is_deactivated: bool=None, is_invite: bool=None, mail: str=None, name: str=None, role_id: str=None, subscription_id: str=None, time_zone: str=None, user_image_last_modified: datetime=None):
        """UserInfo - a model defined in OpenAPI

        :param color_index: The color_index of this UserInfo.
        :param contact_addresses: The contact_addresses of this UserInfo.
        :param duty_info: The duty_info of this UserInfo.
        :param id: The id of this UserInfo.
        :param is_deactivated: The is_deactivated of this UserInfo.
        :param is_invite: The is_invite of this UserInfo.
        :param mail: The mail of this UserInfo.
        :param name: The name of this UserInfo.
        :param role_id: The role_id of this UserInfo.
        :param subscription_id: The subscription_id of this UserInfo.
        :param time_zone: The time_zone of this UserInfo.
        :param user_image_last_modified: The user_image_last_modified of this UserInfo.
        """
        self.openapi_types = {
            'color_index': int,
            'contact_addresses': List[ContactAddressInfo],
            'duty_info': UserDutyInfo,
            'id': str,
            'is_deactivated': bool,
            'is_invite': bool,
            'mail': str,
            'name': str,
            'role_id': str,
            'subscription_id': str,
            'time_zone': str,
            'user_image_last_modified': datetime
        }

        self.attribute_map = {
            'color_index': 'colorIndex',
            'contact_addresses': 'contactAddresses',
            'duty_info': 'dutyInfo',
            'id': 'id',
            'is_deactivated': 'isDeactivated',
            'is_invite': 'isInvite',
            'mail': 'mail',
            'name': 'name',
            'role_id': 'roleId',
            'subscription_id': 'subscriptionId',
            'time_zone': 'timeZone',
            'user_image_last_modified': 'userImageLastModified'
        }

        self._color_index = color_index
        self._contact_addresses = contact_addresses
        self._duty_info = duty_info
        self._id = id
        self._is_deactivated = is_deactivated
        self._is_invite = is_invite
        self._mail = mail
        self._name = name
        self._role_id = role_id
        self._subscription_id = subscription_id
        self._time_zone = time_zone
        self._user_image_last_modified = user_image_last_modified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_index(self):
        """Gets the color_index of this UserInfo.


        :return: The color_index of this UserInfo.
        :rtype: int
        """
        return self._color_index

    @color_index.setter
    def color_index(self, color_index):
        """Sets the color_index of this UserInfo.


        :param color_index: The color_index of this UserInfo.
        :type color_index: int
        """

        self._color_index = color_index

    @property
    def contact_addresses(self):
        """Gets the contact_addresses of this UserInfo.


        :return: The contact_addresses of this UserInfo.
        :rtype: List[ContactAddressInfo]
        """
        return self._contact_addresses

    @contact_addresses.setter
    def contact_addresses(self, contact_addresses):
        """Sets the contact_addresses of this UserInfo.


        :param contact_addresses: The contact_addresses of this UserInfo.
        :type contact_addresses: List[ContactAddressInfo]
        """

        self._contact_addresses = contact_addresses

    @property
    def duty_info(self):
        """Gets the duty_info of this UserInfo.


        :return: The duty_info of this UserInfo.
        :rtype: UserDutyInfo
        """
        return self._duty_info

    @duty_info.setter
    def duty_info(self, duty_info):
        """Sets the duty_info of this UserInfo.


        :param duty_info: The duty_info of this UserInfo.
        :type duty_info: UserDutyInfo
        """

        self._duty_info = duty_info

    @property
    def id(self):
        """Gets the id of this UserInfo.


        :return: The id of this UserInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfo.


        :param id: The id of this UserInfo.
        :type id: str
        """

        self._id = id

    @property
    def is_deactivated(self):
        """Gets the is_deactivated of this UserInfo.


        :return: The is_deactivated of this UserInfo.
        :rtype: bool
        """
        return self._is_deactivated

    @is_deactivated.setter
    def is_deactivated(self, is_deactivated):
        """Sets the is_deactivated of this UserInfo.


        :param is_deactivated: The is_deactivated of this UserInfo.
        :type is_deactivated: bool
        """

        self._is_deactivated = is_deactivated

    @property
    def is_invite(self):
        """Gets the is_invite of this UserInfo.


        :return: The is_invite of this UserInfo.
        :rtype: bool
        """
        return self._is_invite

    @is_invite.setter
    def is_invite(self, is_invite):
        """Sets the is_invite of this UserInfo.


        :param is_invite: The is_invite of this UserInfo.
        :type is_invite: bool
        """

        self._is_invite = is_invite

    @property
    def mail(self):
        """Gets the mail of this UserInfo.


        :return: The mail of this UserInfo.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this UserInfo.


        :param mail: The mail of this UserInfo.
        :type mail: str
        """

        self._mail = mail

    @property
    def name(self):
        """Gets the name of this UserInfo.


        :return: The name of this UserInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInfo.


        :param name: The name of this UserInfo.
        :type name: str
        """

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this UserInfo.


        :return: The role_id of this UserInfo.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserInfo.


        :param role_id: The role_id of this UserInfo.
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UserInfo.


        :return: The subscription_id of this UserInfo.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UserInfo.


        :param subscription_id: The subscription_id of this UserInfo.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def time_zone(self):
        """Gets the time_zone of this UserInfo.


        :return: The time_zone of this UserInfo.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserInfo.


        :param time_zone: The time_zone of this UserInfo.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def user_image_last_modified(self):
        """Gets the user_image_last_modified of this UserInfo.


        :return: The user_image_last_modified of this UserInfo.
        :rtype: datetime
        """
        return self._user_image_last_modified

    @user_image_last_modified.setter
    def user_image_last_modified(self, user_image_last_modified):
        """Sets the user_image_last_modified of this UserInfo.


        :param user_image_last_modified: The user_image_last_modified of this UserInfo.
        :type user_image_last_modified: datetime
        """

        self._user_image_last_modified = user_image_last_modified
