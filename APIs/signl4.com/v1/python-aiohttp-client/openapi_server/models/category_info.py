# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_augmentation import CategoryAugmentation
from openapi_server.models.category_info_options import CategoryInfoOptions
from openapi_server.models.keyword_matching_type import KeywordMatchingType
from openapi_server import util


class CategoryInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, augmentations: List[CategoryAugmentation]=None, color: str=None, id: str=None, image_name: str=None, is_default: bool=None, keyword_matching: KeywordMatchingType=None, keywords: List[str]=None, last_match: datetime=None, name: str=None, options: CategoryInfoOptions=None, order: int=None):
        """CategoryInfo - a model defined in OpenAPI

        :param augmentations: The augmentations of this CategoryInfo.
        :param color: The color of this CategoryInfo.
        :param id: The id of this CategoryInfo.
        :param image_name: The image_name of this CategoryInfo.
        :param is_default: The is_default of this CategoryInfo.
        :param keyword_matching: The keyword_matching of this CategoryInfo.
        :param keywords: The keywords of this CategoryInfo.
        :param last_match: The last_match of this CategoryInfo.
        :param name: The name of this CategoryInfo.
        :param options: The options of this CategoryInfo.
        :param order: The order of this CategoryInfo.
        """
        self.openapi_types = {
            'augmentations': List[CategoryAugmentation],
            'color': str,
            'id': str,
            'image_name': str,
            'is_default': bool,
            'keyword_matching': KeywordMatchingType,
            'keywords': List[str],
            'last_match': datetime,
            'name': str,
            'options': CategoryInfoOptions,
            'order': int
        }

        self.attribute_map = {
            'augmentations': 'augmentations',
            'color': 'color',
            'id': 'id',
            'image_name': 'imageName',
            'is_default': 'isDefault',
            'keyword_matching': 'keywordMatching',
            'keywords': 'keywords',
            'last_match': 'lastMatch',
            'name': 'name',
            'options': 'options',
            'order': 'order'
        }

        self._augmentations = augmentations
        self._color = color
        self._id = id
        self._image_name = image_name
        self._is_default = is_default
        self._keyword_matching = keyword_matching
        self._keywords = keywords
        self._last_match = last_match
        self._name = name
        self._options = options
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryInfo of this CategoryInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def augmentations(self):
        """Gets the augmentations of this CategoryInfo.


        :return: The augmentations of this CategoryInfo.
        :rtype: List[CategoryAugmentation]
        """
        return self._augmentations

    @augmentations.setter
    def augmentations(self, augmentations):
        """Sets the augmentations of this CategoryInfo.


        :param augmentations: The augmentations of this CategoryInfo.
        :type augmentations: List[CategoryAugmentation]
        """

        self._augmentations = augmentations

    @property
    def color(self):
        """Gets the color of this CategoryInfo.


        :return: The color of this CategoryInfo.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CategoryInfo.


        :param color: The color of this CategoryInfo.
        :type color: str
        """

        self._color = color

    @property
    def id(self):
        """Gets the id of this CategoryInfo.


        :return: The id of this CategoryInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryInfo.


        :param id: The id of this CategoryInfo.
        :type id: str
        """

        self._id = id

    @property
    def image_name(self):
        """Gets the image_name of this CategoryInfo.


        :return: The image_name of this CategoryInfo.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this CategoryInfo.


        :param image_name: The image_name of this CategoryInfo.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def is_default(self):
        """Gets the is_default of this CategoryInfo.


        :return: The is_default of this CategoryInfo.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this CategoryInfo.


        :param is_default: The is_default of this CategoryInfo.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def keyword_matching(self):
        """Gets the keyword_matching of this CategoryInfo.


        :return: The keyword_matching of this CategoryInfo.
        :rtype: KeywordMatchingType
        """
        return self._keyword_matching

    @keyword_matching.setter
    def keyword_matching(self, keyword_matching):
        """Sets the keyword_matching of this CategoryInfo.


        :param keyword_matching: The keyword_matching of this CategoryInfo.
        :type keyword_matching: KeywordMatchingType
        """

        self._keyword_matching = keyword_matching

    @property
    def keywords(self):
        """Gets the keywords of this CategoryInfo.


        :return: The keywords of this CategoryInfo.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CategoryInfo.


        :param keywords: The keywords of this CategoryInfo.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def last_match(self):
        """Gets the last_match of this CategoryInfo.


        :return: The last_match of this CategoryInfo.
        :rtype: datetime
        """
        return self._last_match

    @last_match.setter
    def last_match(self, last_match):
        """Sets the last_match of this CategoryInfo.


        :param last_match: The last_match of this CategoryInfo.
        :type last_match: datetime
        """

        self._last_match = last_match

    @property
    def name(self):
        """Gets the name of this CategoryInfo.


        :return: The name of this CategoryInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryInfo.


        :param name: The name of this CategoryInfo.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this CategoryInfo.


        :return: The options of this CategoryInfo.
        :rtype: CategoryInfoOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CategoryInfo.


        :param options: The options of this CategoryInfo.
        :type options: CategoryInfoOptions
        """

        self._options = options

    @property
    def order(self):
        """Gets the order of this CategoryInfo.


        :return: The order of this CategoryInfo.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CategoryInfo.


        :param order: The order of this CategoryInfo.
        :type order: int
        """

        self._order = order
