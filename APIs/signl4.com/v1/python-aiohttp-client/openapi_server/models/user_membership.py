# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_valid: bool=None, role_id: str=None, team_id: str=None):
        """UserMembership - a model defined in OpenAPI

        :param is_valid: The is_valid of this UserMembership.
        :param role_id: The role_id of this UserMembership.
        :param team_id: The team_id of this UserMembership.
        """
        self.openapi_types = {
            'is_valid': bool,
            'role_id': str,
            'team_id': str
        }

        self.attribute_map = {
            'is_valid': 'isValid',
            'role_id': 'roleId',
            'team_id': 'teamId'
        }

        self._is_valid = is_valid
        self._role_id = role_id
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMembership of this UserMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_valid(self):
        """Gets the is_valid of this UserMembership.


        :return: The is_valid of this UserMembership.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this UserMembership.


        :param is_valid: The is_valid of this UserMembership.
        :type is_valid: bool
        """

        self._is_valid = is_valid

    @property
    def role_id(self):
        """Gets the role_id of this UserMembership.


        :return: The role_id of this UserMembership.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserMembership.


        :param role_id: The role_id of this UserMembership.
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def team_id(self):
        """Gets the team_id of this UserMembership.


        :return: The team_id of this UserMembership.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this UserMembership.


        :param team_id: The team_id of this UserMembership.
        :type team_id: str
        """

        self._team_id = team_id
