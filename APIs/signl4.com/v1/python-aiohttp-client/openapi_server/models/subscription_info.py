# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_id: str=None, country: str=None, currency: str=None, external_account_id: str=None, id: str=None, name: str=None, next_billing: datetime=None, owner_id: str=None, plan_code: str=None, plan_state: int=None, referral_enabled: bool=None, status: int=None):
        """SubscriptionInfo - a model defined in OpenAPI

        :param branch_id: The branch_id of this SubscriptionInfo.
        :param country: The country of this SubscriptionInfo.
        :param currency: The currency of this SubscriptionInfo.
        :param external_account_id: The external_account_id of this SubscriptionInfo.
        :param id: The id of this SubscriptionInfo.
        :param name: The name of this SubscriptionInfo.
        :param next_billing: The next_billing of this SubscriptionInfo.
        :param owner_id: The owner_id of this SubscriptionInfo.
        :param plan_code: The plan_code of this SubscriptionInfo.
        :param plan_state: The plan_state of this SubscriptionInfo.
        :param referral_enabled: The referral_enabled of this SubscriptionInfo.
        :param status: The status of this SubscriptionInfo.
        """
        self.openapi_types = {
            'branch_id': str,
            'country': str,
            'currency': str,
            'external_account_id': str,
            'id': str,
            'name': str,
            'next_billing': datetime,
            'owner_id': str,
            'plan_code': str,
            'plan_state': int,
            'referral_enabled': bool,
            'status': int
        }

        self.attribute_map = {
            'branch_id': 'branchId',
            'country': 'country',
            'currency': 'currency',
            'external_account_id': 'externalAccountId',
            'id': 'id',
            'name': 'name',
            'next_billing': 'nextBilling',
            'owner_id': 'ownerId',
            'plan_code': 'planCode',
            'plan_state': 'planState',
            'referral_enabled': 'referralEnabled',
            'status': 'status'
        }

        self._branch_id = branch_id
        self._country = country
        self._currency = currency
        self._external_account_id = external_account_id
        self._id = id
        self._name = name
        self._next_billing = next_billing
        self._owner_id = owner_id
        self._plan_code = plan_code
        self._plan_state = plan_state
        self._referral_enabled = referral_enabled
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionInfo of this SubscriptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_id(self):
        """Gets the branch_id of this SubscriptionInfo.


        :return: The branch_id of this SubscriptionInfo.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this SubscriptionInfo.


        :param branch_id: The branch_id of this SubscriptionInfo.
        :type branch_id: str
        """

        self._branch_id = branch_id

    @property
    def country(self):
        """Gets the country of this SubscriptionInfo.


        :return: The country of this SubscriptionInfo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SubscriptionInfo.


        :param country: The country of this SubscriptionInfo.
        :type country: str
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this SubscriptionInfo.


        :return: The currency of this SubscriptionInfo.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SubscriptionInfo.


        :param currency: The currency of this SubscriptionInfo.
        :type currency: str
        """

        self._currency = currency

    @property
    def external_account_id(self):
        """Gets the external_account_id of this SubscriptionInfo.


        :return: The external_account_id of this SubscriptionInfo.
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this SubscriptionInfo.


        :param external_account_id: The external_account_id of this SubscriptionInfo.
        :type external_account_id: str
        """

        self._external_account_id = external_account_id

    @property
    def id(self):
        """Gets the id of this SubscriptionInfo.


        :return: The id of this SubscriptionInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionInfo.


        :param id: The id of this SubscriptionInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubscriptionInfo.


        :return: The name of this SubscriptionInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionInfo.


        :param name: The name of this SubscriptionInfo.
        :type name: str
        """

        self._name = name

    @property
    def next_billing(self):
        """Gets the next_billing of this SubscriptionInfo.


        :return: The next_billing of this SubscriptionInfo.
        :rtype: datetime
        """
        return self._next_billing

    @next_billing.setter
    def next_billing(self, next_billing):
        """Sets the next_billing of this SubscriptionInfo.


        :param next_billing: The next_billing of this SubscriptionInfo.
        :type next_billing: datetime
        """

        self._next_billing = next_billing

    @property
    def owner_id(self):
        """Gets the owner_id of this SubscriptionInfo.


        :return: The owner_id of this SubscriptionInfo.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this SubscriptionInfo.


        :param owner_id: The owner_id of this SubscriptionInfo.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def plan_code(self):
        """Gets the plan_code of this SubscriptionInfo.


        :return: The plan_code of this SubscriptionInfo.
        :rtype: str
        """
        return self._plan_code

    @plan_code.setter
    def plan_code(self, plan_code):
        """Sets the plan_code of this SubscriptionInfo.


        :param plan_code: The plan_code of this SubscriptionInfo.
        :type plan_code: str
        """

        self._plan_code = plan_code

    @property
    def plan_state(self):
        """Gets the plan_state of this SubscriptionInfo.


        :return: The plan_state of this SubscriptionInfo.
        :rtype: int
        """
        return self._plan_state

    @plan_state.setter
    def plan_state(self, plan_state):
        """Sets the plan_state of this SubscriptionInfo.


        :param plan_state: The plan_state of this SubscriptionInfo.
        :type plan_state: int
        """

        self._plan_state = plan_state

    @property
    def referral_enabled(self):
        """Gets the referral_enabled of this SubscriptionInfo.


        :return: The referral_enabled of this SubscriptionInfo.
        :rtype: bool
        """
        return self._referral_enabled

    @referral_enabled.setter
    def referral_enabled(self, referral_enabled):
        """Sets the referral_enabled of this SubscriptionInfo.


        :param referral_enabled: The referral_enabled of this SubscriptionInfo.
        :type referral_enabled: bool
        """

        self._referral_enabled = referral_enabled

    @property
    def status(self):
        """Gets the status of this SubscriptionInfo.


        :return: The status of this SubscriptionInfo.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionInfo.


        :param status: The status of this SubscriptionInfo.
        :type status: int
        """

        self._status = status
