openapi: 3.0.1
info:
  contact:
    url: https://www.signl4.com/feedback-we-love-hear-from-you/
    x-twitter: signl4me
  description: "<p>Use our API for systems integration or to build your own use cases.\
    \ Sample scenarios include but are not limited to:</p><ul><li>2-way integration:\
    \ Triggering of Signls and updates in the third party systems when alert state\
    \ changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar\
    \ integrations: Creation and management of on-call duties</li><li>Punch users\
    \ in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using\
    \ the API requires an API key, which you can generate in the SIGNL4 portal under\
    \ 'Developers'.<br>This key must then be specified in a special header in every\
    \ HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The\
    \ base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright\
    \ Â© Derdack GmbH<br></p>"
  license:
    name: Derdack GmbH
    url: https://www.signl4.com
  title: SIGNL4 API
  version: v1
  x-apisguru-categories:
  - messaging
  x-origin:
  - format: openapi
    url: https://connect.signl4.com/api/docs/v1/swagger.json
    version: "3.0"
  x-providerName: signl4.com
servers:
- url: https://connect.signl4.com/api
security:
- oauth2:
  - public_api_write
  - public_api_read
  - offline_access
tags:
- description: Provide access to all informations about signls and the ability to
    interact with them.
  name: Alerts
- description: Provides access to services and system categories in a SIGNL4 team.
  name: Categories
- description: "Provide access to duty information and the ability to create, delete\
    \ and update them."
  name: Duties
- description: Provide access to all informations about events and their parameters.
  name: Events
- description: Provides access to the prepaid balance and transactions
  name: Prepaid
- description: Provides access to apps that are available in SIGNL4 and e.g. allows
    adding an app to a SIGNL4 team.
  name: Scripts
- description: Provides management capabilities for a SIGNL4 subscription.
  name: Subscriptions
- description: "Provides misc. operations, e.g. for managing settings or preferences,\
    \ of a team in a SIGNL4 subscription."
  name: Teams
- description: Provides management for team members in a SIGNL4 team.
  name: Users
- description: Provides management for outbound notifications (e.g. a Signl was confirmed)
    via webhooks.
  name: Webhooks
paths:
  /alerts:
    post:
      description: Triggers a new alert for your team. All team members on duty will
        receive alert notifications.
      operationId: alerts_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/RaiseAlertInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/RaiseAlertInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RaiseAlertInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/RaiseAlertInfo'
        description: Alert to raise.
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Trigger Alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/acknowledgeAll:
    post:
      description: This method confirms all unhandled alerts your team currently has
        by a specific user.
      operationId: alerts_acknowledge_all_post
      parameters:
      - description: User ID of the user to be used to acknowledge the alarms.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          description: Internal general error occured.
      summary: Confirms all visible alerts
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/acknowledgeMultiple:
    post:
      description: This method confirms all alerts provided.
      operationId: alerts_acknowledge_multiple_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Acknowlegde multiple alerts
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/closeAll:
    post:
      description: This method closes all acknowledged alerts your team currently
        has.
      operationId: alerts_close_all_post
      parameters:
      - description: User ID of the user to be used to close the alarms.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusFilterInfo'
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Close all acknowledged alerts.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/closeMultiple:
    post:
      description: This method closes all alerts provided.
      operationId: alerts_close_multiple_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Close multiple alerts
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/paged:
    post:
      operationId: alerts_paged_post
      parameters:
      - description: "Defines the limit of retrieved alert details per request. 1\
          \ to 100 are allowed per request.\r\n                Number of alerts could\
          \ be less if filtered but at least 1."
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: User ID of the user you want to get alerts for.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/AlertFilterPublic'
          application/json:
            schema:
              $ref: '#/components/schemas/AlertFilterPublic'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AlertFilterPublic'
          text/json:
            schema:
              $ref: '#/components/schemas/AlertFilterPublic'
        description: The filter defines which alerts are supposed to be retrieved.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewAlertPagedResultsPublic'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewAlertPagedResultsPublic'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewAlertPagedResultsPublic'
          description: Returns a paged result with found alerts and continuation token
            if more alerts are in the database.
        "204":
          description: There were no alerts found for the specified filter.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Authorization failed
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Gets alerts paged
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/report:
    get:
      description: "Returns information about the occurred alert volume in different\
        \ time periods as well as information about the\r\nresponse behaviour (amount\
        \ of confirmed and unhandled alerts) of your team members."
      operationId: alerts_report_get
      parameters:
      - description: User ID of the user for whom you want a report.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertReport'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertReport'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertReport'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get Alert Report
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/undoAcknowledgeMultiple:
    post:
      description: This method tries to undo the acknowledgement of multiple alerts
        via a queue. The operation is handled in the background.
      operationId: alerts_undo_acknowledge_multiple_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
        description: Configure which user should be undone for which alerts.
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Queue undo of multiple acknowledgments.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/undoCloseMultiple:
    post:
      description: This method tries to undo multiple alert closes. The operation
        is handled in the background.
      operationId: alerts_undo_close_multiple_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusMultipleInfo'
        x-body-name: body
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Withdraw closure of multiple alerts
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/{alertId}:
    get:
      description: Gets an alert by id.
      operationId: alerts_alert_id_get
      parameters:
      - description: Id of the requested Alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get Alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/acknowledge:
    post:
      operationId: alerts_alert_id_acknowledge_post
      parameters:
      - description: Id to acknowledge an alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: No alert with id was found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Alert can't be acknowledged because it is against the defined
            alert lifecycle.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Acknowledge an alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/{alertId}/annotate:
    post:
      description: Annotates an alert by given Annotation Info.
      operationId: alerts_alert_id_annotate_post
      parameters:
      - description: Id of the alert to annotate.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/AlertAnnotationInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/AlertAnnotationInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AlertAnnotationInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/AlertAnnotationInfo'
        description: Annotation Information.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertAnnotationInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertAnnotationInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertAnnotationInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Annotate Alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/{alertId}/annotations:
    get:
      description: Get annotations of an alert by id.
      operationId: alerts_alert_id_annotations_get
      parameters:
      - description: Id of the requested Alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAnnotationInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAnnotationInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAnnotationInfo'
                type: array
          description: Success
        "204":
          description: No annotations were found for the alert.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get annotations of an alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/attachments:
    get:
      description: Get attachments of an alert by id.
      operationId: alerts_alert_id_attachments_get
      parameters:
      - description: Id of the requested Alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAttachmentInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAttachmentInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAttachmentInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get attachments of an alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/attachments/{attachmentId}:
    get:
      operationId: alerts_alert_id_attachments_attachment_id_get
      parameters:
      - description: Id of the alert that contains the wanted attachment.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      - description: "Id of the attachment, that you want to retrieve."
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: Optional parameter defining the wanted width of the picture that
          is retrieved.
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Optional parameter defining the wanted height of the picture
          that is retrieved.
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Optional parameter defining whether it's wanted to scale the\
          \ retrieved image. Default is set to\r\ntrue."
        explode: true
        in: query
        name: scale
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Returns the attachment image with additional meta information.
        "204":
          description: The image of the attachment was not uploaded yet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: A passed parameter was either empty or invalid.
        "403":
          description: Authorization failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The attachment image was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Gets a specified attachment of a specified alert.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/close:
    post:
      operationId: alerts_alert_id_close_post
      parameters:
      - description: Id to acknowledge an alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: No alert with id was found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Alert can't be closed because it is against the defined alert
            lifecycle.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Close an alert
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/{alertId}/notifications:
    get:
      description: Get notifications of all users by alert id.
      operationId: alerts_alert_id_notifications_get
      parameters:
      - description: Id of the requested Alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertNotificationInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertNotificationInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/AlertNotificationInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get alert notifications
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/overview:
    get:
      description: Get overview alert by id.
      operationId: alerts_alert_id_overview_get
      parameters:
      - description: Id of the requested Alert.
        explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
          description: Returns alert with all information attached.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get an overview alert.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
  /alerts/{alertId}/undoAcknowledge:
    post:
      description: This method tries to undo an alert acknowledgement.
      operationId: alerts_alert_id_undo_acknowledge_post
      parameters:
      - explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
          description: Returns updated alert.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: User is not allowed to undo the acknowledgement.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Undo the acknowledgement of an alert.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /alerts/{alertId}/undoClose:
    post:
      description: This method tries to undo an alert close.
      operationId: alerts_alert_id_undo_close_post
      parameters:
      - explode: false
        in: path
        name: alertId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeAlertStatusInfo'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewAlert'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: User is not allowed to undo the close.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Undo the closure of an alert.
      tags:
      - Alerts
      x-openapi-router-controller: openapi_server.controllers.alerts_controller
      x-codegen-request-body-name: body
  /categories/images:
    get:
      operationId: categories_images_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
            text/json:
              schema:
                items:
                  type: string
                type: array
            text/plain:
              schema:
                items:
                  type: string
                type: array
          description: Returns the alert categories.
        "204":
          description: Request was canceled.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access the resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: No categories were found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: "Gets the names of all alert category images.\r\nYou can get the image\
        \ by going to account.signl4.com/images/alerts/categoryImageName.svg"
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /categories/{teamId}:
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7"
      operationId: categories_team_id_get
      parameters:
      - description: ID of the team the categories belong to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryInfo'
                type: array
          description: Returns the category infos
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Get all categories
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    post:
      description: "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7\r\
        \n    {\r\n        \"name\": \"Water\",\r\n        \"imageName\": \"water.svg\"\
        ,\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"Any\"\
        ,\r\n        \"keywords\": [\r\n            {\r\n                \"value\"\
        : \"H2O\"\r\n            },\r\n            {\r\n                \"value\"\
        : \"Water\"\r\n            }\r\n        ]\r\n    }"
      operationId: categories_team_id_post
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
        description: Category to be created
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
          description: Returns the newly created category
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Create a new category
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
      x-codegen-request-body-name: body
  /categories/{teamId}/metrics:
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics"
      operationId: categories_team_id_metrics_get
      parameters:
      - description: ID of the team the categories belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryMetrics'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryMetrics'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryMetrics'
                type: array
          description: Returns a list of category metrics
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Get metrics for all categories
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /categories/{teamId}/{categoryId}:
    delete:
      description: "Sample Request:\r\n            \r\n    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      operationId: categories_team_id_category_id_delete
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the category to delete
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: If the delete operation was successful
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Delete an existing category
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e"
      operationId: categories_team_id_category_id_get
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the category to get
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
          description: Returns the category details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Get a specific category
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    put:
      description: "Sample Request:\r\n            \r\n    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e\r\
        \n    {\r\n        \"name\": \"Water-Updated\",\r\n        \"imageName\":\
        \ \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\"\
        : \"All\",\r\n        \"keywords\": [\r\n            {\r\n               \
        \ \"value\": \"H2O\"\r\n            },\r\n            {\r\n              \
        \  \"value\": \"Water\"\r\n            },\r\n            {\r\n           \
        \     \"value\": \"Wet\"\r\n            }\r\n        ]\r\n    }"
      operationId: categories_team_id_category_id_put
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryInfo'
        description: Category to be updated
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryInfo'
          description: Returns the updated category
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Update an existing category
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
      x-codegen-request-body-name: body
  /categories/{teamId}/{categoryId}/metrics:
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics"
      operationId: categories_team_id_category_id_metrics_get
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the category to get
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryMetrics'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryMetrics'
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryMetrics'
          description: Returns the category metrics
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Get metrics for a specific category
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /categories/{teamId}/{categoryId}/subscriptions:
    get:
      description: "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\
        \n    {\r\n    }"
      operationId: categories_team_id_category_id_subscriptions_get
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: Category to get subscriptions for
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
          description: Returns the category subscriptions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Get category subscriptions
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
    post:
      description: "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\
        \n    {\r\n    }"
      operationId: categories_team_id_category_id_subscriptions_post
      parameters:
      - description: ID of the team the category belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: Category to be updated
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              items:
                $ref: '#/components/schemas/CategorySubscriptionInfo'
              type: array
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CategorySubscriptionInfo'
              type: array
          application/json-patch+json:
            schema:
              items:
                $ref: '#/components/schemas/CategorySubscriptionInfo'
              type: array
          text/json:
            schema:
              items:
                $ref: '#/components/schemas/CategorySubscriptionInfo'
              type: array
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/CategorySubscriptionInfo'
                type: array
          description: Returns the updated category subscriptions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If the input is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If you have no permission to access this resource
        "404":
          description: If the resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: If any server side errors occur
      summary: Set category subscriptions
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
      x-codegen-request-body-name: body
  /events/paged:
    post:
      description: "Get overview event paged. If there are more results, you also\
        \ get a continuation token which you can add to the event filter."
      operationId: events_paged_post
      parameters:
      - description: "Defines the limit of retrieved alert details per request. 1\
          \ to 100 are allowed per request.\r\n                 Number of alerts could\
          \ be less if filtered but at least 1."
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          format: int32
          type: integer
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/EventFilter'
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/EventFilter'
          text/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
        description: The filter defines which alerts are supposed to be retrieved.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewEventPagedResultsPublic'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewEventPagedResultsPublic'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewEventPagedResultsPublic'
          description: "Returns paged result with found events and continuation token,\
            \ if database holds more events."
        "204":
          description: No event could be found (with passed filter)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get overview event paged.
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
      x-codegen-request-body-name: body
  /events/{eventId}/overview:
    get:
      description: Get overview event by id.
      operationId: events_event_id_overview_get
      parameters:
      - description: Id of event to get.
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverviewEvent'
            text/json:
              schema:
                $ref: '#/components/schemas/OverviewEvent'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverviewEvent'
          description: Returns overview event with specific id.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Event with specified id could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get overview event
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
  /events/{eventId}/parameters:
    get:
      description: Get parameters of an event by id.
      operationId: events_event_id_parameters_get
      parameters:
      - description: Event Id of the requested Alert.
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventParameterInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventParameterInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/EventParameterInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Get event parameters
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
  /prepaid/balance:
    get:
      operationId: prepaid_balance_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get your subscription's current prepaid balance.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
  /prepaid/settings:
    get:
      operationId: prepaid_settings_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get your subscription's current prepaid settings.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
    put:
      operationId: prepaid_settings_put
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
        description: Settings object containing the new values.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Update your subscription's current prepaid settings.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
      x-codegen-request-body-name: body
  /prepaid/transactions:
    get:
      operationId: prepaid_transactions_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get your subscription's prepaid transactions.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
  /scripts/instances:
    get:
      description: Returns all script instances in the subscription.
      operationId: scripts_instances_get
      parameters:
      - explode: true
        in: query
        name: teamId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScriptInstanceDetails'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScriptInstanceDetails'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScriptInstanceDetails'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
      summary: Returns all script instances of the SIGNL4 team
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    post:
      description: Creates a new script instance of the script specified in the request
        body.
      operationId: scripts_instances_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          text/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
        description: Script instance to be created.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Existing script instance was updated as specified in body.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: New script instance was updated as specified in body.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: An internal error has occurred during instance creation.
      summary: Creates a new script instance in the in the SIGNL4 team.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /scripts/instances/{instanceId}:
    delete:
      description: Gets the script instance specified by the passed instance id.
      operationId: scripts_instances_instance_id_delete
      parameters:
      - description: Instance Id of script instance to be returned.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database or in
            memory.
      summary: Deletes a script instance.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    get:
      description: Gets the script instance specified by the passed instance id.
      operationId: scripts_instances_instance_id_get
      parameters:
      - description: Instance Id of script instance to be returned.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database or in
            memory.
      summary: Returns all information about a given script instance which includes
        its runtime status.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
    put:
      description: Updates the specified script instance.
      operationId: scripts_instances_instance_id_put
      parameters:
      - description: InstanceId of the script to be updated.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
          text/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceDetails'
        description: Script instance to be updated.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: An internal error has occurred during instance creation.
      summary: "Updates a given script instance, typically used for updating the configuration\
        \ of a script."
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /scripts/instances/{instanceId}/data:
    put:
      description: Updates the specified script instance.
      operationId: scripts_instances_instance_id_data_put
      parameters:
      - description: InstanceId of the script to be updated.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceCustomUserData'
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceCustomUserData'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceCustomUserData'
          text/json:
            schema:
              $ref: '#/components/schemas/ScriptInstanceCustomUserData'
        description: Script instance to be updated.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: An internal error has occurred during instance creation.
      summary: Updates custom data of a given script instance which includes its display
        name.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
      x-codegen-request-body-name: body
  /scripts/instances/{instanceId}/disable:
    post:
      operationId: scripts_instances_instance_id_disable_post
      parameters:
      - description: Id of the instance to be disabled.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Disables a given script instance.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
  /scripts/instances/{instanceId}/enable:
    post:
      operationId: scripts_instances_instance_id_enable_post
      parameters:
      - description: Id of the instance to be enabled.
        explode: false
        in: path
        name: instanceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Enables a script instance.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
  /scripts/inventory:
    get:
      description: Returns all available inventory scripts which can be added to a
        SIGNL4 subscription.
      operationId: scripts_inventory_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: An internal error orccurred while loading all inventory scripts.
      summary: Returns all available inventory scripts which can be added to a SIGNL4
        subscription.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
  /scripts/inventory/parsed:
    get:
      operationId: scripts_inventory_parsed_get
      parameters:
      - description: ""
        explode: true
        in: query
        name: language
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryScriptInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns all inventory scripts.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
  /scripts/inventory/parsed/{scriptId}:
    get:
      description: Gets the script specified by the passed script id.
      operationId: scripts_inventory_parsed_script_id_get
      parameters:
      - description: The Id of the script to be returned.
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: language
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScriptInstanceDetails'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database or in
            memory.
      summary: Returns an inventory script by its id.
      tags:
      - Scripts
      x-openapi-router-controller: openapi_server.controllers.scripts_controller
  /subscriptions:
    get:
      operationId: subscriptions_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get infos of all available/managed subscriptions.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
  /subscriptions/{subscriptionId}:
    get:
      operationId: subscriptions_subscription_id_get
      parameters:
      - description: Id of the subscription that's to be retrieved.
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get infos of a specific subscription.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
  /subscriptions/{subscriptionId}/channelPrices:
    get:
      operationId: subscriptions_subscription_id_channel_prices_get
      parameters:
      - description: Id of the subscription that needs to be retrieved.
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPriceInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ChannelPriceInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ChannelPriceInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns the subscription's channel price information.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
  /subscriptions/{subscriptionId}/features:
    get:
      operationId: subscriptions_subscription_id_features_get
      parameters:
      - description: Id of the subscription from which the features need to be retrieved.
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionFeature'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionFeature'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionFeature'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns the features of a specified subscription.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
  /subscriptions/{subscriptionId}/prepaidBalance:
    get:
      operationId: subscriptions_subscription_id_prepaid_balance_get
      parameters:
      - explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidBalanceInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get a subscription's current prepaid balance.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
  /subscriptions/{subscriptionId}/prepaidSettings:
    get:
      operationId: subscriptions_subscription_id_prepaid_settings_get
      parameters:
      - explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get a subscription's current prepaid settings.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
    put:
      operationId: subscriptions_subscription_id_prepaid_settings_put
      parameters:
      - description: ID of the subscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/PrepaidSettingsInfo'
        description: Settings object containing the new values.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/PrepaidSettingsInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Update a subscription's current prepaid settings.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
      x-codegen-request-body-name: body
  /subscriptions/{subscriptionId}/prepaidTransactions:
    get:
      operationId: subscriptions_subscription_id_prepaid_transactions_get
      parameters:
      - description: ID of the subscription to get transactions for
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/PrepaidTransactionInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get a subscription's prepaid transactions.
      tags:
      - Prepaid
      x-openapi-router-controller: openapi_server.controllers.prepaid_controller
  /subscriptions/{subscriptionId}/profile:
    put:
      operationId: subscriptions_subscription_id_profile_put
      parameters:
      - description: ID of the subscription to be updated
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/SubscriptionProfile'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionProfile'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SubscriptionProfile'
          text/json:
            schema:
              $ref: '#/components/schemas/SubscriptionProfile'
        description: Profile data to update subscription with
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Updates a subscriptions profile.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
      x-codegen-request-body-name: body
  /subscriptions/{subscriptionId}/teams:
    get:
      operationId: subscriptions_subscription_id_teams_get
      parameters:
      - explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get infos for all teams of the subscription.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /subscriptions/{subscriptionId}/userLicenses:
    get:
      operationId: subscriptions_subscription_id_user_licenses_get
      parameters:
      - description: ID of the subscription
        explode: false
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLicenseInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserLicenseInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserLicenseInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets a subscription's user licenses.
      tags:
      - Subscriptions
      x-openapi-router-controller: openapi_server.controllers.subscriptions_controller
  /teams:
    get:
      operationId: teams_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/TeamInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get infos of all teams.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /teams/{teamId}:
    get:
      operationId: teams_team_id_get
      parameters:
      - description: ID of the team that should be retrieved.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/TeamInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets infos of a specific team.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /teams/{teamId}/alertReports:
    get:
      operationId: teams_team_id_alert_reports_get
      parameters:
      - description: ID of team you want to download reports from.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAuditReportFileInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAuditReportFileInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/AlertAuditReportFileInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get information about downloadable alert reports
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /teams/{teamId}/alertReports/{fileName}:
    get:
      operationId: teams_team_id_alert_reports_file_name_get
      parameters:
      - description: ID of team you want to get the duty report file infos for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: File name of file you want to download.
        explode: false
        in: path
        name: fileName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns Alert Report
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /teams/{teamId}/alertSettings:
    get:
      operationId: teams_team_id_alert_settings_get
      parameters:
      - description: ID of the team the settings should be retrieved for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets alert settings of a specific team.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
    post:
      operationId: teams_team_id_alert_settings_post
      parameters:
      - description: ID of the team the settings should be set for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/AlertSettings'
          application/json:
            schema:
              $ref: '#/components/schemas/AlertSettings'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AlertSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/AlertSettings'
        description: Alert settings to be set
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertSettings'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertSettings'
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertSettings'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Sets alert settings of a specific team.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/dutyReports:
    get:
      operationId: teams_team_id_duty_reports_get
      parameters:
      - description: ID of team you want to get the duty report file infos for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DutyAuditReportFileInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/DutyAuditReportFileInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/DutyAuditReportFileInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get Information about downloadable reports
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
  /teams/{teamId}/dutyReports/{fileName}:
    get:
      operationId: teams_team_id_duty_reports_file_name_get
      parameters:
      - description: ID of team you want to download the duty report for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: Filename of the csv to download.
        explode: false
        in: path
        name: fileName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
            text/plain:
              schema:
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Download duty report with a specific fileName
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
  /teams/{teamId}/dutysummary:
    get:
      operationId: teams_team_id_dutysummary_get
      parameters:
      - description: ID of the team the duty belongs to.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: lastTwoDuties
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDutySummaryInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/TeamDutySummaryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/TeamDutySummaryInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get duty assistant info for a team
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
  /teams/{teamId}/eventSources:
    get:
      operationId: teams_team_id_event_sources_get
      parameters:
      - description: ID of the team the sources should be retrieved for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventSourceEndpointInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventSourceEndpointInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/EventSourceEndpointInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets event sources of a specific team.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /teams/{teamId}/memberships:
    get:
      operationId: teams_team_id_memberships_get
      parameters:
      - description: Team ID of team you want to request.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InvitedUserInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/InvitedUserInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/InvitedUserInfo'
                type: array
          description: User invitations are returned.
        "204":
          description: Request was canceled.
        "400":
          description: Required parameters or authentifaction info could not be found
            in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Get all invites of a team.
      tags:
      - TeamsMemberships
      x-openapi-router-controller: openapi_server.controllers.teams_memberships_controller
    post:
      operationId: teams_team_id_memberships_post
      parameters:
      - description: Id of team the user should be invited to.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/UsersInvitation'
          application/json:
            schema:
              $ref: '#/components/schemas/UsersInvitation'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UsersInvitation'
          text/json:
            schema:
              $ref: '#/components/schemas/UsersInvitation'
        description: Information about user to invite and inviter id.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInvitationResult'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInvitationResult'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/UserInvitationResult'
                type: array
          description: User invitation results are returned.
        "204":
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters or authentifaction info could not be found
            in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: You're not allowed to request the access all required entities.
        "404":
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Invite users to a team
      tags:
      - TeamsMemberships
      x-openapi-router-controller: openapi_server.controllers.teams_memberships_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/memberships/resendInviteMail:
    post:
      operationId: teams_team_id_memberships_resend_invite_mail_post
      parameters:
      - description: Team ID of team with invited user.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserInvitationInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/UserInvitationInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserInvitationInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/UserInvitationInfo'
        description: Information which user should be invited again.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Success
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Sends invite email again if an invite exists
      tags:
      - TeamsMemberships
      x-openapi-router-controller: openapi_server.controllers.teams_memberships_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/memberships/{userId}:
    delete:
      operationId: teams_team_id_memberships_user_id_delete
      parameters:
      - description: ID of the team the user should be deleted from
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the user that should be deleted
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: User ID of user which will remove the other user.
        explode: true
        in: query
        name: requesterUserId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Success message
        "204":
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters or authentifaction info could not be found
            in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: "Removes a user or invitation from a team, and may delete the user\
        \ if he is not in any team."
      tags:
      - TeamsMemberships
      x-openapi-router-controller: openapi_server.controllers.teams_memberships_controller
    put:
      description: "Updates the user's team membership. You can move the user to another\
        \ team within the subscription\r\nand/or change the user's role."
      operationId: teams_team_id_memberships_user_id_put
      parameters:
      - description: Team the user you want to update belongs to at the moment.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: User ID of user you want to update.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: User ID of user which you want to change role with. This must
          be provided when using an api key. This user must have role administrator
          (for setting administrator role) or team administrator (for setting  rights.
        explode: true
        in: query
        name: requesterUserId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserMembership'
          application/json:
            schema:
              $ref: '#/components/schemas/UserMembership'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserMembership'
          text/json:
            schema:
              $ref: '#/components/schemas/UserMembership'
        description: Information about role id and target team id.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: User was successfully updated.
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Request was canceled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required parameters or authentifaction info could not be found
            in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: You're not allowed to request the access all required entities.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Update user's team membership.
      tags:
      - TeamsMemberships
      x-openapi-router-controller: openapi_server.controllers.teams_memberships_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/profile:
    put:
      operationId: teams_team_id_profile_put
      parameters:
      - description: Team ID of team which should be updated.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/TeamProfile'
          application/json:
            schema:
              $ref: '#/components/schemas/TeamProfile'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TeamProfile'
          text/json:
            schema:
              $ref: '#/components/schemas/TeamProfile'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/TeamInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Updates team profile of a team
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/schedules:
    get:
      operationId: teams_team_id_schedules_get
      parameters:
      - description: Id of the team the schedules user belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: UserId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: MinDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: Limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns information about all duties that belong to the team.
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
    post:
      operationId: teams_team_id_schedules_post
      parameters:
      - description: Id of the team the duty is to be assigned to.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScheduleInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ScheduleInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/ScheduleInfo'
        description: information about the duty schedule to be created
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Create/Update given duty schedule.
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/schedules/deleteRange:
    post:
      operationId: teams_team_id_schedules_delete_range_post
      parameters:
      - description: Team ID you want to delete
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/DeleteRangeInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRangeInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DeleteRangeInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/DeleteRangeInfo'
        description: Information with date range to delete from to
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Delete duty schedules in range
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/schedules/multiple:
    post:
      operationId: teams_team_id_schedules_multiple_post
      parameters:
      - description: Team ID to set
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: Override or cut existing schedules if set to true.
        explode: true
        in: query
        name: overrideExisting
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              items:
                $ref: '#/components/schemas/ScheduleInfo'
              type: array
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ScheduleInfo'
              type: array
          application/json-patch+json:
            schema:
              items:
                $ref: '#/components/schemas/ScheduleInfo'
              type: array
          text/json:
            schema:
              items:
                $ref: '#/components/schemas/ScheduleInfo'
              type: array
        description: List of schedules to save
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScheduleInfo'
                type: array
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Save multiple schedules. It is possible to override existing schedules
        if you wish
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
      x-codegen-request-body-name: body
  /teams/{teamId}/schedules/{dutyId}:
    delete:
      operationId: teams_team_id_schedules_duty_id_delete
      parameters:
      - description: ID of the team the duty belongs to.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the duty to be deleted.
        explode: false
        in: path
        name: dutyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Delete a specific duty.
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
  /teams/{teamId}/schedules/{scheduleId}:
    get:
      operationId: teams_team_id_schedules_schedule_id_get
      parameters:
      - description: Id of the team the duty belongs to
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the requested duty schedule.
        explode: false
        in: path
        name: scheduleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScheduleInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Returns information of the duty schedule with the specified Id.
      tags:
      - Duties
      x-openapi-router-controller: openapi_server.controllers.duties_controller
  /teams/{teamId}/setupProgress:
    get:
      operationId: teams_team_id_setup_progress_get
      parameters:
      - description: ID of the team the progress should be retrieved for.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamSetupProgress'
            text/json:
              schema:
                $ref: '#/components/schemas/TeamSetupProgress'
            text/plain:
              schema:
                $ref: '#/components/schemas/TeamSetupProgress'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets setup progress of a specific team.
      tags:
      - Teams
      x-openapi-router-controller: openapi_server.controllers.teams_controller
  /users:
    get:
      description: "Returns a list of user objects with details such as their email\
        \ address and duty information. Only users who\r\nare part of your team will\
        \ be returned."
      operationId: users_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/UserInfo'
                type: array
          description: User could be successfully identified.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request the users with their information.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
      summary: Get all Users
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}:
    get:
      description: Returns a user object with details such as his email address and
        duty information.
      operationId: users_user_id_get
      parameters:
      - description: "Identifier of the user to get. Use 'Me' to get information about\
          \ the currently logged in user. This is not possible with an api key.\r\n\
          Can also be an email address of a user in the team or the unique id of an\
          \ according user object.â"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: User could be successfully identified.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request that user's information.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
      summary: Get User by Id
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/changePassword:
    put:
      operationId: users_user_id_change_password_put
      parameters:
      - description: User ID of user whose password should be changed.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordInfo'
        x-body-name: body
      responses:
        "200":
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Updates the password of a user
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
  /users/{userId}/checkPermissions:
    post:
      operationId: users_user_id_check_permissions_post
      parameters:
      - description: ID of the user to check permissions for.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: teamId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/StringItemsWrapper'
          application/json:
            schema:
              $ref: '#/components/schemas/StringItemsWrapper'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/StringItemsWrapper'
          text/json:
            schema:
              $ref: '#/components/schemas/StringItemsWrapper'
        description: List of permissions to check
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImage'
            text/json:
              schema:
                $ref: '#/components/schemas/UserImage'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserImage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
      summary: Checks if a user has the provided permission.
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
  /users/{userId}/dutyStatus:
    get:
      description: Returns a object with duty information.
      operationId: users_user_id_duty_status_get
      parameters:
      - description: "Identifier of the user to get. Use 'Me' to get information about\
          \ the currently logged in user. This is not possible with an api key.\r\n\
          Can also be an email address of a user in the team or the unique id of an\
          \ according user object.â"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
          description: Duty successfully loaded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required authentifaction info could not be found in the request/claims.
        "403":
          description: You're not allowed to request that duty information.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
      summary: Get duty status by user Id
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/image:
    get:
      operationId: users_user_id_image_get
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImage'
            text/json:
              schema:
                $ref: '#/components/schemas/UserImage'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserImage'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
    post:
      operationId: users_user_id_image_post
      parameters:
      - description: Id of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "204":
          description: The image was successfully uploaded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: "Either a passed parameter was either empty/null or the request's\
            \ multipart does not contain a\r\nfile."
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: User is not allowed to upoload an image for the specified user.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Either the user was not found or they aren't activated yet.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal general error occured.
      summary: Uploaded a profile image for a specified user.
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/profile:
    put:
      operationId: users_user_id_profile_put
      parameters:
      - description: ID of user to update.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          text/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Updates user profile of an user
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
      x-codegen-request-body-name: body
  /users/{userId}/punchIn:
    post:
      description: The specified user will be punched in to duty.
      operationId: users_user_id_punch_in_post
      parameters:
      - description: "Identifier of the user to punch in. Use 'Me' to get information\
          \ about the currently logged in\r\nuser. This is not possible with an api\
          \ key. Can also be an email address of a user in the team or the unique\
          \ id of an according user object.â"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The user tried to change the punch in a different user.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
      summary: Punch User in
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/punchInAsManager:
    post:
      description: The specified user will be punched in to duty as a manager.
      operationId: users_user_id_punch_in_as_manager_post
      parameters:
      - description: "Identifier of the user to punch in. Use 'Me' to get information\
          \ about the currently logged in\r\nuser. This is not possible with an api\
          \ key. Can also be an email address of a user in the team or the unique\
          \ id of an according user object.â"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required information could not be found in the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The user tried to change the punch in a different user.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required entities could not be found in the database.
      summary: Punch User in as Manager
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/punchOut:
    post:
      description: The specified user will be punched out from duty.
      operationId: users_user_id_punch_out_post
      parameters:
      - description: "Identifier of the user to punch out. Use 'Me' to get information\
          \ about the currently logged in\r\nuser. This is not possible with an api\
          \ key. Can also be an email address of a user in the team or the unique\
          \ id of an according user object.â"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDutyInfo'
          description: The user was punched out successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Required authentifaction information could not be found in
            the request/claims.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: "The requesting user tried to punch out someone else, which\
            \ is not allowed."
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The desired user was not found by passed id.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: "The desired user was not punched out because it would violate\
            \  the minumum on-duty members setting\r\nfrom the team."
      summary: Punch User out
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /users/{userId}/setupProgress:
    get:
      operationId: users_user_id_setup_progress_get
      parameters:
      - description: ID of the user the progress should be retrieved for.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetupProgress'
            text/json:
              schema:
                $ref: '#/components/schemas/UserSetupProgress'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserSetupProgress'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Gets setup progress of a specific user.
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
  /webhooks:
    get:
      description: Returns a collection of defined outbound webhooks in the system.
      operationId: webhooks_get
      parameters:
      - explode: true
        in: query
        name: teamId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookInfo'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookInfo'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookInfo'
                type: array
          description: Request was successful and response body contains information
            about all outbound webhooks in the subscription.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The subscription does not have any outbound webhooks.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Get Webhooks
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
    post:
      description: Creates a new outbound webhook that will be notified when certain
        events occur.
      operationId: webhooks_post
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
        description: Json object that contains the external URL of the webhook.
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Action was successful and response contains the id of the newly
            created webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Either the webhook object or a necessary property was invalid
            or empty.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Create Webhook
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
      x-codegen-request-body-name: body
  /webhooks/{webhookId}:
    delete:
      description: Deletes the specified webhook so that it will no longer be notified.
      operationId: webhooks_webhook_id_delete
      parameters:
      - description: Id of the outbound webhook that will be deleted.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Webhook was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The passed webhook id was invalid or empty.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Delete Webhook by Id
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
    get:
      description: Returns information of the webhook specified by the passed id.
      operationId: get_webhook_by_id
      parameters:
      - description: Id of the outbound webhook to be retrieved.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: Request was successful and response body contains information
            about the requested webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The passed webhook id was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: The webhook was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Get Webhook by Id
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
    put:
      description: Updates the specified webhook.
      operationId: webhooks_webhook_id_put
      parameters:
      - description: Id of the outbound webhook to be updated.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/*+json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/WebhookBaseInfo'
        description: Json object containing the updated URL of the webhook.
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
          description: Update was successful and response body contains the updated
            webhook details.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: A passed parameter was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Update Webhook by Id
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
      x-codegen-request-body-name: body
  /webhooks/{webhookId}/disable:
    post:
      operationId: webhooks_webhook_id_disable_post
      parameters:
      - description: Webhook ID for webhook which should be disabled.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
          description: Disable was successful and response body contains the webhook
            details.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: A passed parameter was either empty or null.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Webhook with specified id was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Internal has occured. The response body may contain more information.
      summary: Ability to enable a webHook.
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
  /webhooks/{webhookId}/enable:
    post:
      operationId: webhooks_webhook_id_enable_post
      parameters:
      - description: Webhook ID for webhook which should be enabled.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/WebhookInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponseContent'
          description: Server Error
      summary: Ability to disable a webHook.
      tags:
      - Webhooks
      x-openapi-router-controller: openapi_server.controllers.webhooks_controller
components:
  schemas:
    AlertAnnotationInfo:
      additionalProperties: false
      example:
        annotationType: 0
        id: id
        text: text
        userId: userId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        annotationType:
          format: int32
          title: annotationType
          type: integer
        id:
          nullable: true
          title: id
          type: string
        text:
          nullable: true
          title: text
          type: string
        timestamp:
          format: date-time
          title: timestamp
          type: string
        userId:
          nullable: true
          title: userId
          type: string
      title: AlertAnnotationInfo
      type: object
    AlertAttachment:
      additionalProperties: false
      example:
        name: name
        id: id
        encoding: 6
        contentType: contentType
        content: content
      properties:
        content:
          nullable: true
          title: content
          type: string
        contentType:
          nullable: true
          title: contentType
          type: string
        encoding:
          $ref: '#/components/schemas/Encoding'
        id:
          nullable: true
          title: id
          type: string
        name:
          nullable: true
          title: name
          type: string
      title: AlertAttachment
      type: object
    AlertAttachmentInfo:
      additionalProperties: false
      example:
        name: name
        id: id
        contentType: contentType
      properties:
        contentType:
          nullable: true
          title: contentType
          type: string
        id:
          nullable: true
          title: id
          type: string
        name:
          nullable: true
          title: name
          type: string
      title: AlertAttachmentInfo
      type: object
    AlertAuditReportFileInfo:
      additionalProperties: false
      title: AlertAuditReportFileInfo
      type: object
    AlertCounts:
      additionalProperties: false
      example:
        unhandled: 1
        start: 2000-01-23T04:56:07.000+00:00
        closed: 6
        end: 2000-01-23T04:56:07.000+00:00
        lastModified: 2000-01-23T04:56:07.000+00:00
        acked: 0
      properties:
        acked:
          format: int64
          title: acked
          type: integer
        closed:
          format: int64
          title: closed
          type: integer
        end:
          format: date-time
          nullable: true
          title: end
          type: string
        lastModified:
          format: date-time
          nullable: true
          title: lastModified
          type: string
        start:
          format: date-time
          nullable: true
          title: start
          type: string
        unhandled:
          format: int64
          title: unhandled
          type: integer
      title: AlertCounts
      type: object
    AlertDeliveryStatusCodes:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 6
      - 8
      - 22
      - 24
      - 26
      - 30
      - 31
      format: int32
      title: AlertDeliveryStatusCodes
      type: integer
    AlertDeliveryStatusInfo:
      additionalProperties: false
      example:
        users:
        - userId: userId
          statusCode: 6
        - userId: userId
          statusCode: 6
        statusCode: 0
      properties:
        statusCode:
          $ref: '#/components/schemas/AlertDeliveryStatusCodes'
        users:
          items:
            $ref: '#/components/schemas/UserDeliveryStatusInfo'
          nullable: true
          title: users
          type: array
      title: AlertDeliveryStatusInfo
      type: object
    AlertFilterActions:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: AlertFilterActions
      type: integer
    AlertFilterModes:
      enum:
      - 0
      - 1
      format: int32
      title: AlertFilterModes
      type: integer
    AlertFilterPublic:
      additionalProperties: false
      example:
        statusCodes: 0
        showPersonalHiddenCategories: true
        categoryIds:
        - categoryIds
        - categoryIds
        minCreationDate: 2000-01-23T04:56:07.000+00:00
        modifiedSince: 2000-01-23T04:56:07.000+00:00
        alertIds:
        - alertIds
        - alertIds
        alertsAfterId: alertsAfterId
        teamId: teamId
        maxCreationDate: 2000-01-23T04:56:07.000+00:00
        textToSearch: textToSearch
        continuationToken:
          nextTableName: nextTableName
          nextRowKey: nextRowKey
          nextPartitionKey: nextPartitionKey
      properties:
        alertIds:
          items:
            type: string
          nullable: true
          title: alertIds
          type: array
        alertsAfterId:
          nullable: true
          title: alertsAfterId
          type: string
        categoryIds:
          items:
            type: string
          nullable: true
          title: categoryIds
          type: array
        continuationToken:
          $ref: '#/components/schemas/PagedResultsPublicContinuationToken'
        maxCreationDate:
          format: date-time
          nullable: true
          title: maxCreationDate
          type: string
        minCreationDate:
          format: date-time
          nullable: true
          title: minCreationDate
          type: string
        modifiedSince:
          format: date-time
          nullable: true
          title: modifiedSince
          type: string
        showPersonalHiddenCategories:
          title: showPersonalHiddenCategories
          type: boolean
        statusCodes:
          $ref: '#/components/schemas/AlertStatusCodes'
        teamId:
          nullable: true
          title: teamId
          type: string
        textToSearch:
          nullable: true
          title: textToSearch
          type: string
      title: AlertFilterPublic
      type: object
    AlertHistoryInfoDetailed:
      additionalProperties: false
      example:
        closedBy: closedBy
        acknowledged: 2000-01-23T04:56:07.000+00:00
        created: 2000-01-23T04:56:07.000+00:00
        closed: 2000-01-23T04:56:07.000+00:00
        historyEntries:
        - id: id
          type: 5
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        - id: id
          type: 5
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        acknowledgedgements:
        - acknowledgedgements
        - acknowledgedgements
      properties:
        acknowledged:
          format: date-time
          nullable: true
          title: acknowledged
          type: string
        acknowledgedgements:
          items:
            type: string
          nullable: true
          title: acknowledgedgements
          type: array
        closed:
          format: date-time
          nullable: true
          title: closed
          type: string
        closedBy:
          nullable: true
          title: closedBy
          type: string
        created:
          format: date-time
          title: created
          type: string
        historyEntries:
          items:
            $ref: '#/components/schemas/AlertHistoryInfoEntry'
          nullable: true
          title: historyEntries
          type: array
      title: AlertHistoryInfoDetailed
      type: object
    AlertHistoryInfoEntry:
      additionalProperties: false
      example:
        id: id
        type: 5
        userId: userId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          nullable: true
          title: id
          type: string
        timestamp:
          format: date-time
          title: timestamp
          type: string
        type:
          $ref: '#/components/schemas/AlertHistoryInfoUserEntryType'
        userId:
          nullable: true
          title: userId
          type: string
      title: AlertHistoryInfoEntry
      type: object
    AlertHistoryInfoUserEntryType:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      format: int32
      title: AlertHistoryInfoUserEntryType
      type: integer
    AlertInfo:
      additionalProperties: false
      example:
        eventSourceId: eventSourceId
        severity: 9
        eventId: eventId
        attachments:
        - name: name
          id: id
          encoding: 6
          contentType: contentType
          content: content
        - name: name
          id: id
          encoding: 6
          contentType: contentType
          content: content
        flags: 5
        annotations:
        - annotationType: 0
          id: id
          text: text
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        - annotationType: 0
          id: id
          text: text
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        eventSourceType: 1
        history:
          closedBy: closedBy
          acknowledged: 2000-01-23T04:56:07.000+00:00
          created: 2000-01-23T04:56:07.000+00:00
          closed: 2000-01-23T04:56:07.000+00:00
          historyEntries:
          - id: id
            type: 5
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          - id: id
            type: 5
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          acknowledgedgements:
          - acknowledgedgements
          - acknowledgedgements
        title: title
        teamId: teamId
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        text: text
        category: category
        subscriptionId: subscriptionId
        parameters:
        - name: name
          type: 7
          value: value
          order: 2
        - name: name
          type: 7
          value: value
          order: 2
        categoryId: categoryId
        status: 3
      properties:
        annotations:
          items:
            $ref: '#/components/schemas/AlertAnnotationInfo'
          nullable: true
          title: annotations
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/AlertAttachment'
          nullable: true
          title: attachments
          type: array
        category:
          nullable: true
          title: category
          type: string
        categoryId:
          nullable: true
          title: categoryId
          type: string
        eventId:
          nullable: true
          title: eventId
          type: string
        eventSourceId:
          nullable: true
          title: eventSourceId
          type: string
        eventSourceType:
          $ref: '#/components/schemas/EventSourceTypes'
        flags:
          format: int32
          title: flags
          type: integer
        history:
          $ref: '#/components/schemas/AlertHistoryInfoDetailed'
        id:
          nullable: true
          title: id
          type: string
        lastModified:
          format: date-time
          title: lastModified
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/EventParameterInfo'
          nullable: true
          title: parameters
          type: array
        severity:
          $ref: '#/components/schemas/AlertSeverities'
        status:
          $ref: '#/components/schemas/AlertStatusCodes'
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
        text:
          nullable: true
          title: text
          type: string
        title:
          nullable: true
          title: title
          type: string
      title: AlertInfo
      type: object
    AlertNotificationInfo:
      additionalProperties: false
      example:
        messageStatus: 6
        address: address
        userStatus: 1
        lastUpdate: 2000-01-23T04:56:07.000+00:00
        channelType: 0
        deviceName: deviceName
        userId: userId
      properties:
        address:
          nullable: true
          title: address
          type: string
        channelType:
          $ref: '#/components/schemas/AlertNotificationInfoChannelType'
        deviceName:
          nullable: true
          title: deviceName
          type: string
        lastUpdate:
          format: date-time
          title: lastUpdate
          type: string
        messageStatus:
          $ref: '#/components/schemas/AlertNotificationInfoMessageStatus'
        userId:
          nullable: true
          title: userId
          type: string
        userStatus:
          $ref: '#/components/schemas/AlertNotificationInfoUserStatus'
      title: AlertNotificationInfo
      type: object
    AlertNotificationInfoChannelType:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      format: int32
      title: AlertNotificationInfoChannelType
      type: integer
    AlertNotificationInfoMessageStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      format: int32
      title: AlertNotificationInfoMessageStatus
      type: integer
    AlertNotificationInfoUserStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      format: int32
      title: AlertNotificationInfoUserStatus
      type: integer
    AlertReport:
      additionalProperties: false
      example:
        userLastDutyChange:
          unhandled: 1
          start: 2000-01-23T04:56:07.000+00:00
          closed: 6
          end: 2000-01-23T04:56:07.000+00:00
          lastModified: 2000-01-23T04:56:07.000+00:00
          acked: 0
        last24Hours:
          unhandled: 1
          start: 2000-01-23T04:56:07.000+00:00
          closed: 6
          end: 2000-01-23T04:56:07.000+00:00
          lastModified: 2000-01-23T04:56:07.000+00:00
          acked: 0
        teamId: teamId
        subscriptionId: subscriptionId
        teamCurrentDuty:
          unhandled: 1
          start: 2000-01-23T04:56:07.000+00:00
          closed: 6
          end: 2000-01-23T04:56:07.000+00:00
          lastModified: 2000-01-23T04:56:07.000+00:00
          acked: 0
        userId: userId
        teamLastDuty:
          unhandled: 1
          start: 2000-01-23T04:56:07.000+00:00
          closed: 6
          end: 2000-01-23T04:56:07.000+00:00
          lastModified: 2000-01-23T04:56:07.000+00:00
          acked: 0
      properties:
        last24Hours:
          $ref: '#/components/schemas/AlertCounts'
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamCurrentDuty:
          $ref: '#/components/schemas/AlertCounts'
        teamId:
          nullable: true
          title: teamId
          type: string
        teamLastDuty:
          $ref: '#/components/schemas/AlertCounts'
        userId:
          nullable: true
          title: userId
          type: string
        userLastDutyChange:
          $ref: '#/components/schemas/AlertCounts'
      title: AlertReport
      type: object
    AlertResponseModes:
      enum:
      - 2
      - 4
      format: int32
      title: AlertResponseModes
      type: integer
    AlertSettings:
      additionalProperties: false
      example:
        filterMode: 6
        responseMode: 5
        persistentNotificicationMode: 5
        optOutMode: 1
        responseTime: 2
        filterAction: 0
      properties:
        filterAction:
          $ref: '#/components/schemas/AlertFilterActions'
        filterMode:
          $ref: '#/components/schemas/AlertFilterModes'
        optOutMode:
          $ref: '#/components/schemas/TeamCategoryOptOutModes'
        persistentNotificicationMode:
          $ref: '#/components/schemas/PersistentNotificationModes'
        responseMode:
          $ref: '#/components/schemas/AlertResponseModes'
        responseTime:
          format: int32
          title: responseTime
          type: integer
      title: AlertSettings
      type: object
    AlertSeverities:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: AlertSeverities
      type: integer
    AlertStatusCodes:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      format: int32
      title: AlertStatusCodes
      type: integer
    CategoryAugmentation:
      additionalProperties: false
      example:
        name: name
        type: 0
        value: value
        enabled: true
      properties:
        enabled:
          title: enabled
          type: boolean
        name:
          nullable: true
          title: name
          type: string
        type:
          $ref: '#/components/schemas/CategoryAugmentationType'
        value:
          nullable: true
          title: value
          type: string
      title: CategoryAugmentation
      type: object
    CategoryAugmentationType:
      enum:
      - 0
      - 1
      - 2
      - 3
      format: int32
      title: CategoryAugmentationType
      type: integer
    CategoryInfo:
      additionalProperties: false
      example:
        augmentations:
        - name: name
          type: 0
          value: value
          enabled: true
        - name: name
          type: 0
          value: value
          enabled: true
        isDefault: true
        imageName: imageName
        color: color
        keywords:
        - keywords
        - keywords
        lastMatch: 2000-01-23T04:56:07.000+00:00
        keywordMatching: 6
        name: name
        options: 1
        id: id
        order: 5
      properties:
        augmentations:
          items:
            $ref: '#/components/schemas/CategoryAugmentation'
          nullable: true
          title: augmentations
          type: array
        color:
          nullable: true
          title: color
          type: string
        id:
          nullable: true
          title: id
          type: string
        imageName:
          nullable: true
          title: imageName
          type: string
        isDefault:
          readOnly: true
          title: isDefault
          type: boolean
        keywordMatching:
          $ref: '#/components/schemas/KeywordMatchingType'
        keywords:
          items:
            type: string
          nullable: true
          title: keywords
          type: array
        lastMatch:
          format: date-time
          nullable: true
          title: lastMatch
          type: string
        name:
          nullable: true
          title: name
          type: string
        options:
          $ref: '#/components/schemas/CategoryInfoOptions'
        order:
          format: int32
          title: order
          type: integer
      title: CategoryInfo
      type: object
    CategoryInfoOptions:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      format: int32
      title: CategoryInfoOptions
      type: integer
    CategoryMetrics:
      additionalProperties: false
      example:
        lastAlert: 2000-01-23T04:56:07.000+00:00
        last24Hours: 0
        subscriberCount: 6
        categoryId: categoryId
      properties:
        categoryId:
          nullable: true
          title: categoryId
          type: string
        last24Hours:
          format: int64
          title: last24Hours
          type: integer
        lastAlert:
          format: date-time
          nullable: true
          title: lastAlert
          type: string
        subscriberCount:
          format: int32
          title: subscriberCount
          type: integer
      title: CategoryMetrics
      type: object
    CategorySubscriptionInfo:
      additionalProperties: false
      example:
        userId: userId
        status: 0
      properties:
        status:
          $ref: '#/components/schemas/CategorySubscriptionStatus'
        userId:
          nullable: true
          title: userId
          type: string
      title: CategorySubscriptionInfo
      type: object
    CategorySubscriptionStatus:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: CategorySubscriptionStatus
      type: integer
    ChangeAlertStatusFilterInfo:
      additionalProperties: false
      example:
        categoryIds:
        - categoryIds
        - categoryIds
        minDate: 2000-01-23T04:56:07.000+00:00
        scope: 0
        maxDate: 2000-01-23T04:56:07.000+00:00
        teamIds:
        - teamIds
        - teamIds
      properties:
        categoryIds:
          items:
            type: string
          nullable: true
          title: categoryIds
          type: array
        maxDate:
          format: date-time
          nullable: true
          title: maxDate
          type: string
        minDate:
          format: date-time
          nullable: true
          title: minDate
          type: string
        scope:
          $ref: '#/components/schemas/StatusChangeScope'
        teamIds:
          items:
            type: string
          nullable: true
          title: teamIds
          type: array
      title: ChangeAlertStatusFilterInfo
      type: object
    ChangeAlertStatusInfo:
      additionalProperties: false
      example:
        description: description
        userId: userId
      properties:
        description:
          nullable: true
          title: description
          type: string
        userId:
          nullable: true
          title: userId
          type: string
      title: ChangeAlertStatusInfo
      type: object
    ChangeAlertStatusMultipleInfo:
      additionalProperties: false
      example:
        alertIds:
        - alertIds
        - alertIds
        description: description
        userId: userId
      properties:
        alertIds:
          items:
            type: string
          nullable: true
          title: alertIds
          type: array
        description:
          nullable: true
          title: description
          type: string
        userId:
          nullable: true
          title: userId
          type: string
      title: ChangeAlertStatusMultipleInfo
      type: object
    ChannelPriceInfo:
      additionalProperties: false
      example:
        smsPerMessage: 0
        voicePerMinute: 6
      properties:
        smsPerMessage:
          format: int32
          title: smsPerMessage
          type: integer
        voicePerMinute:
          format: int32
          title: voicePerMinute
          type: integer
      title: ChannelPriceInfo
      type: object
    ChannelTypes:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      format: int32
      title: ChannelTypes
      type: integer
    ContactAddressInfo:
      additionalProperties: false
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        address: address
        created: 2000-01-23T04:56:07.000+00:00
        channel: 6
        options: 5
        id: id
        device:
          ringtoneDisabled: true
          appVersion: appVersion
          osVersion: osVersion
          name: name
          ringtone: ringtone
          type: 1
          deviceId: deviceId
        userId: userId
      properties:
        address:
          nullable: true
          title: address
          type: string
        channel:
          $ref: '#/components/schemas/ChannelTypes'
        created:
          format: date-time
          title: created
          type: string
        device:
          $ref: '#/components/schemas/Device'
        id:
          nullable: true
          title: id
          type: string
        lastUpdated:
          format: date-time
          title: lastUpdated
          type: string
        options:
          format: int32
          title: options
          type: integer
        userId:
          nullable: true
          title: userId
          type: string
      title: ContactAddressInfo
      type: object
    DeleteRangeInfo:
      additionalProperties: false
      example:
        from: 2000-01-23T04:56:07.000+00:00
        to: 2000-01-23T04:56:07.000+00:00
      properties:
        from:
          format: date-time
          title: from
          type: string
        to:
          format: date-time
          title: to
          type: string
      title: DeleteRangeInfo
      type: object
    Device:
      additionalProperties: false
      example:
        ringtoneDisabled: true
        appVersion: appVersion
        osVersion: osVersion
        name: name
        ringtone: ringtone
        type: 1
        deviceId: deviceId
      properties:
        appVersion:
          nullable: true
          title: appVersion
          type: string
        deviceId:
          nullable: true
          title: deviceId
          type: string
        name:
          nullable: true
          title: name
          type: string
        osVersion:
          nullable: true
          title: osVersion
          type: string
        ringtone:
          nullable: true
          title: ringtone
          type: string
        ringtoneDisabled:
          title: ringtoneDisabled
          type: boolean
        type:
          $ref: '#/components/schemas/DeviceType'
      title: Device
      type: object
    DeviceType:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: DeviceType
      type: integer
    DutyAuditReportFileInfo:
      additionalProperties: false
      title: DutyAuditReportFileInfo
      type: object
    DutySummaryInfo:
      additionalProperties: false
      example:
        dutyEnd: 2000-01-23T04:56:07.000+00:00
        dutyStart: 2000-01-23T04:56:07.000+00:00
        dutyId: dutyId
      properties:
        dutyEnd:
          format: date-time
          nullable: true
          title: dutyEnd
          type: string
        dutyId:
          nullable: true
          title: dutyId
          type: string
        dutyStart:
          format: date-time
          nullable: true
          title: dutyStart
          type: string
      title: DutySummaryInfo
      type: object
    Encoding:
      enum:
      - 0
      - 1
      format: int32
      title: Encoding
      type: integer
    ErrorResponseContent:
      additionalProperties: false
      example:
        code: 2
        requestId: requestId
        details: details
        message: message
        errors:
        - details: details
          message: message
        - details: details
          message: message
      properties:
        code:
          format: int32
          title: code
          type: integer
        details:
          nullable: true
          title: details
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ErrorResponseContentBase'
          nullable: true
          title: errors
          type: array
        message:
          nullable: true
          title: message
          type: string
        requestId:
          nullable: true
          title: requestId
          type: string
      title: ErrorResponseContent
      type: object
    ErrorResponseContentBase:
      additionalProperties: false
      example:
        details: details
        message: message
      properties:
        details:
          nullable: true
          title: details
          type: string
        message:
          nullable: true
          title: message
          type: string
      title: ErrorResponseContentBase
      type: object
    EventFilter:
      additionalProperties: false
      example:
        minCreationDate: 2000-01-23T04:56:07.000+00:00
        modifiedSince: 2000-01-23T04:56:07.000+00:00
        teamId: teamId
        eventStatusCode: 0
        maxCreationDate: 2000-01-23T04:56:07.000+00:00
        textToSearch: textToSearch
        continuationToken:
          nextTableName: nextTableName
          nextRowKey: nextRowKey
          nextPartitionKey: nextPartitionKey
      properties:
        continuationToken:
          $ref: '#/components/schemas/PagedResultsPublicContinuationToken'
        eventStatusCode:
          $ref: '#/components/schemas/EventStatusCodes'
        maxCreationDate:
          format: date-time
          nullable: true
          title: maxCreationDate
          type: string
        minCreationDate:
          format: date-time
          nullable: true
          title: minCreationDate
          type: string
        modifiedSince:
          format: date-time
          nullable: true
          title: modifiedSince
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
        textToSearch:
          nullable: true
          title: textToSearch
          type: string
      title: EventFilter
      type: object
    EventParameterInfo:
      additionalProperties: false
      example:
        name: name
        type: 7
        value: value
        order: 2
      properties:
        name:
          nullable: true
          title: name
          type: string
        order:
          format: int32
          title: order
          type: integer
        type:
          $ref: '#/components/schemas/EventParameterTypes'
        value:
          nullable: true
          title: value
          type: string
      title: EventParameterInfo
      type: object
    EventParameterTypes:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 100
      format: int32
      title: EventParameterTypes
      type: integer
    EventSeverities:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: EventSeverities
      type: integer
    EventSourceEndpointInfo:
      additionalProperties: false
      example:
        lastEventRaised: 2000-01-23T04:56:07.000+00:00
        address: address
        groupId: groupId
        teamId: teamId
        subscriptionId: subscriptionId
        type: 0
      properties:
        address:
          nullable: true
          title: address
          type: string
        groupId:
          nullable: true
          title: groupId
          type: string
        lastEventRaised:
          format: date-time
          nullable: true
          title: lastEventRaised
          type: string
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
        type:
          $ref: '#/components/schemas/EventSourceEndpointTypes'
      title: EventSourceEndpointInfo
      type: object
    EventSourceEndpointTypes:
      enum:
      - 0
      - 1
      - 2
      - 3
      format: int32
      title: EventSourceEndpointTypes
      type: integer
    EventSourceTypes:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      format: int32
      title: EventSourceTypes
      type: integer
    EventStatusCodes:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 1000
      format: int32
      title: EventStatusCodes
      type: integer
    InventoryScriptInfo:
      additionalProperties: false
      example:
        scriptId: scriptId
        data:
          scriptType: scriptType
          name: name
          description: description
          shortDescription: shortDescription
        visibility: visibility
        scriptName: scriptName
        config: ""
        eventPattern: ""
        scriptLocalizationDetails:
        - data:
            scriptType: scriptType
            name: name
            description: description
            shortDescription: shortDescription
          configMetadata: ""
          language: language
        - data:
            scriptType: scriptType
            name: name
            description: description
            shortDescription: shortDescription
          configMetadata: ""
          language: language
      properties:
        config:
          nullable: true
          title: config
        data:
          $ref: '#/components/schemas/ScriptDescriptionData'
        eventPattern:
          nullable: true
          title: eventPattern
        scriptId:
          nullable: true
          title: scriptId
          type: string
        scriptLocalizationDetails:
          items:
            $ref: '#/components/schemas/ScriptLocalizationDetail'
          nullable: true
          title: scriptLocalizationDetails
          type: array
        scriptName:
          nullable: true
          title: scriptName
          type: string
        visibility:
          nullable: true
          title: visibility
          type: string
      title: InventoryScriptInfo
      type: object
    InvitedUserInfo:
      additionalProperties: false
      example:
        mail: mail
        roleId: roleId
        name: name
        id: id
        isInvite: true
      properties:
        id:
          nullable: true
          title: id
          type: string
        isInvite:
          title: isInvite
          type: boolean
        mail:
          nullable: true
          title: mail
          type: string
        name:
          nullable: true
          title: name
          type: string
        roleId:
          nullable: true
          title: roleId
          type: string
      title: InvitedUserInfo
      type: object
    KeywordMatchingType:
      enum:
      - 0
      - 1
      format: int32
      title: KeywordMatchingType
      type: integer
    OverviewAlert:
      additionalProperties: false
      example:
        eventId: eventId
        flags: 1
        annotations:
        - annotationType: 0
          id: id
          text: text
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        - annotationType: 0
          id: id
          text: text
          userId: userId
          timestamp: 2000-01-23T04:56:07.000+00:00
        requiredAcknowledgements: 5
        title: title
        historyDetailed:
          closedBy: closedBy
          acknowledged: 2000-01-23T04:56:07.000+00:00
          created: 2000-01-23T04:56:07.000+00:00
          closed: 2000-01-23T04:56:07.000+00:00
          historyEntries:
          - id: id
            type: 5
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          - id: id
            type: 5
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          acknowledgedgements:
          - acknowledgedgements
          - acknowledgedgements
        teamId: teamId
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        text: text
        alertDeliveryStatus:
          users:
          - userId: userId
            statusCode: 6
          - userId: userId
            statusCode: 6
          statusCode: 0
        subscriptionId: subscriptionId
        categoryId: categoryId
        status: 5
      properties:
        alertDeliveryStatus:
          $ref: '#/components/schemas/AlertDeliveryStatusInfo'
        annotations:
          items:
            $ref: '#/components/schemas/AlertAnnotationInfo'
          nullable: true
          title: annotations
          type: array
        categoryId:
          nullable: true
          title: categoryId
          type: string
        eventId:
          nullable: true
          title: eventId
          type: string
        flags:
          format: int32
          title: flags
          type: integer
        historyDetailed:
          $ref: '#/components/schemas/AlertHistoryInfoDetailed'
        id:
          nullable: true
          title: id
          type: string
        lastModified:
          format: date-time
          title: lastModified
          type: string
        requiredAcknowledgements:
          format: int32
          title: requiredAcknowledgements
          type: integer
        status:
          $ref: '#/components/schemas/AlertStatusCodes'
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
        text:
          nullable: true
          title: text
          type: string
        title:
          nullable: true
          title: title
          type: string
      title: OverviewAlert
      type: object
    OverviewAlertPagedResultsPublic:
      additionalProperties: false
      example:
        hasMore: true
        results:
        - eventId: eventId
          flags: 1
          annotations:
          - annotationType: 0
            id: id
            text: text
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          - annotationType: 0
            id: id
            text: text
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          requiredAcknowledgements: 5
          title: title
          historyDetailed:
            closedBy: closedBy
            acknowledged: 2000-01-23T04:56:07.000+00:00
            created: 2000-01-23T04:56:07.000+00:00
            closed: 2000-01-23T04:56:07.000+00:00
            historyEntries:
            - id: id
              type: 5
              userId: userId
              timestamp: 2000-01-23T04:56:07.000+00:00
            - id: id
              type: 5
              userId: userId
              timestamp: 2000-01-23T04:56:07.000+00:00
            acknowledgedgements:
            - acknowledgedgements
            - acknowledgedgements
          teamId: teamId
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          text: text
          alertDeliveryStatus:
            users:
            - userId: userId
              statusCode: 6
            - userId: userId
              statusCode: 6
            statusCode: 0
          subscriptionId: subscriptionId
          categoryId: categoryId
          status: 5
        - eventId: eventId
          flags: 1
          annotations:
          - annotationType: 0
            id: id
            text: text
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          - annotationType: 0
            id: id
            text: text
            userId: userId
            timestamp: 2000-01-23T04:56:07.000+00:00
          requiredAcknowledgements: 5
          title: title
          historyDetailed:
            closedBy: closedBy
            acknowledged: 2000-01-23T04:56:07.000+00:00
            created: 2000-01-23T04:56:07.000+00:00
            closed: 2000-01-23T04:56:07.000+00:00
            historyEntries:
            - id: id
              type: 5
              userId: userId
              timestamp: 2000-01-23T04:56:07.000+00:00
            - id: id
              type: 5
              userId: userId
              timestamp: 2000-01-23T04:56:07.000+00:00
            acknowledgedgements:
            - acknowledgedgements
            - acknowledgedgements
          teamId: teamId
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          text: text
          alertDeliveryStatus:
            users:
            - userId: userId
              statusCode: 6
            - userId: userId
              statusCode: 6
            statusCode: 0
          subscriptionId: subscriptionId
          categoryId: categoryId
          status: 5
        continuationToken:
          nextTableName: nextTableName
          nextRowKey: nextRowKey
          nextPartitionKey: nextPartitionKey
      properties:
        continuationToken:
          $ref: '#/components/schemas/PagedResultsPublicContinuationToken'
        hasMore:
          readOnly: true
          title: hasMore
          type: boolean
        results:
          items:
            $ref: '#/components/schemas/OverviewAlert'
          nullable: true
          title: results
          type: array
      title: OverviewAlertPagedResultsPublic
      type: object
    OverviewEvent:
      additionalProperties: false
      example:
        severity: 1
        creationTime: 2000-01-23T04:56:07.000+00:00
        eventSourceType: 0
        title: title
        closedAlerts:
        - closedAlerts
        - closedAlerts
        eventStatus: 6
        teamId: teamId
        alertId: alertId
        id: id
        lastModified: 2000-01-23T04:56:07.000+00:00
        text: text
        categoryId: categoryId
        acknowledgedAlerts:
        - acknowledgedAlerts
        - acknowledgedAlerts
      properties:
        acknowledgedAlerts:
          items:
            type: string
          nullable: true
          title: acknowledgedAlerts
          type: array
        alertId:
          nullable: true
          title: alertId
          type: string
        categoryId:
          nullable: true
          title: categoryId
          type: string
        closedAlerts:
          items:
            type: string
          nullable: true
          title: closedAlerts
          type: array
        creationTime:
          format: date-time
          title: creationTime
          type: string
        eventSourceType:
          $ref: '#/components/schemas/EventSourceTypes'
        eventStatus:
          $ref: '#/components/schemas/EventStatusCodes'
        id:
          nullable: true
          title: id
          type: string
        lastModified:
          format: date-time
          title: lastModified
          type: string
        severity:
          $ref: '#/components/schemas/EventSeverities'
        teamId:
          nullable: true
          title: teamId
          type: string
        text:
          nullable: true
          title: text
          type: string
        title:
          nullable: true
          title: title
          type: string
      title: OverviewEvent
      type: object
    OverviewEventPagedResultsPublic:
      additionalProperties: false
      example:
        hasMore: true
        results:
        - severity: 1
          creationTime: 2000-01-23T04:56:07.000+00:00
          eventSourceType: 0
          title: title
          closedAlerts:
          - closedAlerts
          - closedAlerts
          eventStatus: 6
          teamId: teamId
          alertId: alertId
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          text: text
          categoryId: categoryId
          acknowledgedAlerts:
          - acknowledgedAlerts
          - acknowledgedAlerts
        - severity: 1
          creationTime: 2000-01-23T04:56:07.000+00:00
          eventSourceType: 0
          title: title
          closedAlerts:
          - closedAlerts
          - closedAlerts
          eventStatus: 6
          teamId: teamId
          alertId: alertId
          id: id
          lastModified: 2000-01-23T04:56:07.000+00:00
          text: text
          categoryId: categoryId
          acknowledgedAlerts:
          - acknowledgedAlerts
          - acknowledgedAlerts
        continuationToken:
          nextTableName: nextTableName
          nextRowKey: nextRowKey
          nextPartitionKey: nextPartitionKey
      properties:
        continuationToken:
          $ref: '#/components/schemas/PagedResultsPublicContinuationToken'
        hasMore:
          readOnly: true
          title: hasMore
          type: boolean
        results:
          items:
            $ref: '#/components/schemas/OverviewEvent'
          nullable: true
          title: results
          type: array
      title: OverviewEventPagedResultsPublic
      type: object
    PagedResultsPublicContinuationToken:
      additionalProperties: false
      example:
        nextTableName: nextTableName
        nextRowKey: nextRowKey
        nextPartitionKey: nextPartitionKey
      properties:
        nextPartitionKey:
          nullable: true
          title: nextPartitionKey
          type: string
        nextRowKey:
          nullable: true
          title: nextRowKey
          type: string
        nextTableName:
          nullable: true
          title: nextTableName
          type: string
      title: PagedResultsPublicContinuationToken
      type: object
    PersistentNotificationModes:
      enum:
      - 0
      - 1
      format: int32
      title: PersistentNotificationModes
      type: integer
    PrepaidBalanceInfo:
      additionalProperties: false
      example:
        latestTopUp: 2000-01-23T04:56:07.000+00:00
        balance: 0
        pendingTransaction: true
      properties:
        balance:
          format: int32
          title: balance
          type: integer
        latestTopUp:
          format: date-time
          nullable: true
          title: latestTopUp
          type: string
        pendingTransaction:
          title: pendingTransaction
          type: boolean
      title: PrepaidBalanceInfo
      type: object
    PrepaidSettingsInfo:
      additionalProperties: false
      example:
        topUpLimit: 6
        topUpAmount: 0
        topUpEnabled: true
      properties:
        topUpAmount:
          format: int32
          title: topUpAmount
          type: integer
        topUpEnabled:
          title: topUpEnabled
          type: boolean
        topUpLimit:
          format: int32
          title: topUpLimit
          type: integer
      title: PrepaidSettingsInfo
      type: object
    PrepaidTransactionInfo:
      additionalProperties: false
      example:
        createdBy: createdBy
        credits: 0
        created: 2000-01-23T04:56:07.000+00:00
        packageCode: packageCode
        autoTopUpId: autoTopUpId
        modified: 2000-01-23T04:56:07.000+00:00
        currency: currency
        subscriptionId: subscriptionId
        transactionId: transactionId
        status: status
        statusCode: 6
      properties:
        autoTopUpId:
          nullable: true
          title: autoTopUpId
          type: string
        created:
          format: date-time
          title: created
          type: string
        createdBy:
          nullable: true
          title: createdBy
          type: string
        credits:
          format: int32
          title: credits
          type: integer
        currency:
          nullable: true
          title: currency
          type: string
        modified:
          format: date-time
          title: modified
          type: string
        packageCode:
          nullable: true
          title: packageCode
          type: string
        status:
          nullable: true
          title: status
          type: string
        statusCode:
          format: int32
          title: statusCode
          type: integer
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        transactionId:
          nullable: true
          title: transactionId
          type: string
      title: PrepaidTransactionInfo
      type: object
    RaiseAlertInfo:
      additionalProperties: false
      example:
        severity: 6
        attachments:
        - name: name
          id: id
          encoding: 6
          contentType: contentType
          content: content
        - name: name
          id: id
          encoding: 6
          contentType: contentType
          content: content
        flags: 0
        externalId: externalId
        text: text
        category: category
        title: title
        parameters:
        - name: name
          type: 7
          value: value
          order: 2
        - name: name
          type: 7
          value: value
          order: 2
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/AlertAttachment'
          nullable: true
          title: attachments
          type: array
        category:
          nullable: true
          title: category
          type: string
        externalId:
          nullable: true
          title: externalId
          type: string
        flags:
          format: int32
          title: flags
          type: integer
        parameters:
          items:
            $ref: '#/components/schemas/EventParameterInfo'
          nullable: true
          title: parameters
          type: array
        severity:
          $ref: '#/components/schemas/AlertSeverities'
        text:
          nullable: true
          title: text
          type: string
        title:
          nullable: true
          title: title
          type: string
      title: RaiseAlertInfo
      type: object
    ScheduleInfo:
      additionalProperties: false
      example:
        options: 0
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
        id: id
        userId: userId
      properties:
        end:
          format: date-time
          title: end
          type: string
        id:
          nullable: true
          title: id
          type: string
        options:
          format: int32
          title: options
          type: integer
        start:
          format: date-time
          title: start
          type: string
        userId:
          nullable: true
          title: userId
          type: string
      title: ScheduleInfo
      type: object
    ScriptDescriptionData:
      additionalProperties: false
      example:
        scriptType: scriptType
        name: name
        description: description
        shortDescription: shortDescription
      properties:
        description:
          nullable: true
          title: description
          type: string
        name:
          nullable: true
          title: name
          type: string
        scriptType:
          nullable: true
          title: scriptType
          type: string
        shortDescription:
          nullable: true
          title: shortDescription
          type: string
      title: ScriptDescriptionData
      type: object
    ScriptInstanceCustomUserData:
      additionalProperties: false
      example:
        scriptId: scriptId
        instanceId: instanceId
        customScriptDescription: customScriptDescription
        customScriptName: customScriptName
      properties:
        customScriptDescription:
          nullable: true
          title: customScriptDescription
          type: string
        customScriptName:
          nullable: true
          title: customScriptName
          type: string
        instanceId:
          nullable: true
          title: instanceId
          type: string
        scriptId:
          nullable: true
          title: scriptId
          type: string
      title: ScriptInstanceCustomUserData
      type: object
    ScriptInstanceDetails:
      additionalProperties: false
      example:
        scriptId: scriptId
        instanceId: instanceId
        teamId: teamId
        scriptName: scriptName
        lastModified: 2000-01-23T04:56:07.000+00:00
        subscriptionId: subscriptionId
        config: ""
        eventPattern: ""
        enabled: true
        runtimeInformation:
          statusMessage: statusMessage
          status: 0
        customScriptDescription: customScriptDescription
        customScriptName: customScriptName
      properties:
        config:
          nullable: true
          title: config
        customScriptDescription:
          nullable: true
          title: customScriptDescription
          type: string
        customScriptName:
          nullable: true
          title: customScriptName
          type: string
        enabled:
          title: enabled
          type: boolean
        eventPattern:
          nullable: true
          title: eventPattern
        instanceId:
          nullable: true
          title: instanceId
          type: string
        lastModified:
          format: date-time
          nullable: true
          title: lastModified
          type: string
        runtimeInformation:
          $ref: '#/components/schemas/ScriptInstanceInfoRuntimeInformationModel'
        scriptId:
          nullable: true
          title: scriptId
          type: string
        scriptName:
          nullable: true
          title: scriptName
          type: string
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
      title: ScriptInstanceDetails
      type: object
    ScriptInstanceInfoRuntimeInformationModel:
      additionalProperties: false
      example:
        statusMessage: statusMessage
        status: 0
      properties:
        status:
          $ref: '#/components/schemas/ScriptInstanceInfoRuntimeStatus'
        statusMessage:
          nullable: true
          title: statusMessage
          type: string
      title: ScriptInstanceInfoRuntimeInformationModel
      type: object
    ScriptInstanceInfoRuntimeStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      - -1
      format: int32
      title: ScriptInstanceInfoRuntimeStatus
      type: integer
    ScriptLocalizationDetail:
      additionalProperties: false
      example:
        data:
          scriptType: scriptType
          name: name
          description: description
          shortDescription: shortDescription
        configMetadata: ""
        language: language
      properties:
        configMetadata:
          nullable: true
          title: configMetadata
        data:
          $ref: '#/components/schemas/ScriptDescriptionData'
        language:
          nullable: true
          title: language
          type: string
      title: ScriptLocalizationDetail
      type: object
    StatusChangeScope:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: StatusChangeScope
      type: integer
    StringItemsWrapper:
      additionalProperties: false
      example:
        items:
        - items
        - items
      properties:
        items:
          items:
            type: string
          nullable: true
          title: items
          type: array
      title: StringItemsWrapper
      type: object
    SubscriptionFeature:
      additionalProperties: false
      example:
        name: name
        type: 0
        value: value
      properties:
        name:
          nullable: true
          title: name
          type: string
        type:
          format: int32
          title: type
          type: integer
        value:
          nullable: true
          title: value
          type: string
      title: SubscriptionFeature
      type: object
    SubscriptionInfo:
      additionalProperties: false
      example:
        planState: 0
        branchId: branchId
        country: country
        externalAccountId: externalAccountId
        referralEnabled: true
        name: name
        currency: currency
        id: id
        ownerId: ownerId
        planCode: planCode
        nextBilling: 2000-01-23T04:56:07.000+00:00
        status: 6
      properties:
        branchId:
          nullable: true
          title: branchId
          type: string
        country:
          nullable: true
          title: country
          type: string
        currency:
          nullable: true
          title: currency
          type: string
        externalAccountId:
          nullable: true
          title: externalAccountId
          type: string
        id:
          nullable: true
          title: id
          type: string
        name:
          nullable: true
          title: name
          type: string
        nextBilling:
          format: date-time
          nullable: true
          title: nextBilling
          type: string
        ownerId:
          nullable: true
          title: ownerId
          type: string
        planCode:
          nullable: true
          title: planCode
          type: string
        planState:
          format: int32
          title: planState
          type: integer
        referralEnabled:
          title: referralEnabled
          type: boolean
        status:
          format: int32
          title: status
          type: integer
      title: SubscriptionInfo
      type: object
    SubscriptionProfile:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          nullable: true
          title: name
          type: string
      title: SubscriptionProfile
      type: object
    TeamCategoryOptOutModes:
      enum:
      - 0
      - 1
      - 2
      format: int32
      title: TeamCategoryOptOutModes
      type: integer
    TeamDutySummaryInfo:
      additionalProperties: false
      example:
        dutyAssistEnabled: true
        dutySummaries:
        - dutyEnd: 2000-01-23T04:56:07.000+00:00
          dutyStart: 2000-01-23T04:56:07.000+00:00
          dutyId: dutyId
        - dutyEnd: 2000-01-23T04:56:07.000+00:00
          dutyStart: 2000-01-23T04:56:07.000+00:00
          dutyId: dutyId
      properties:
        dutyAssistEnabled:
          title: dutyAssistEnabled
          type: boolean
        dutySummaries:
          items:
            $ref: '#/components/schemas/DutySummaryInfo'
          nullable: true
          title: dutySummaries
          type: array
      title: TeamDutySummaryInfo
      type: object
    TeamInfo:
      additionalProperties: false
      example:
        timezone: timezone
        name: name
        id: id
        subscriptionId: subscriptionId
        memberIds:
        - memberIds
        - memberIds
      properties:
        id:
          nullable: true
          title: id
          type: string
        memberIds:
          items:
            type: string
          nullable: true
          title: memberIds
          type: array
        name:
          nullable: true
          title: name
          type: string
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        timezone:
          nullable: true
          title: timezone
          type: string
      title: TeamInfo
      type: object
    TeamProfile:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          nullable: true
          title: name
          type: string
      title: TeamProfile
      type: object
    TeamSetupProgress:
      additionalProperties: false
      example:
        completedSteps:
        - completedSteps
        - completedSteps
        teamId: teamId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        completedSteps:
          items:
            type: string
          nullable: true
          title: completedSteps
          type: array
        teamId:
          nullable: true
          title: teamId
          type: string
        timestamp:
          format: date-time
          title: timestamp
          type: string
      title: TeamSetupProgress
      type: object
    UpdatePasswordInfo:
      additionalProperties: false
      example:
        newPassword: newPassword
        currentPassword: currentPassword
      properties:
        currentPassword:
          nullable: true
          title: currentPassword
          type: string
        newPassword:
          nullable: true
          title: newPassword
          type: string
      title: UpdatePasswordInfo
      type: object
    UserDeliveryStatusInfo:
      additionalProperties: false
      example:
        userId: userId
        statusCode: 6
      properties:
        statusCode:
          $ref: '#/components/schemas/UserDeliveryStatusInfoCodes'
        userId:
          nullable: true
          title: userId
          type: string
      title: UserDeliveryStatusInfo
      type: object
    UserDeliveryStatusInfoCodes:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 6
      - 8
      - 24
      - 26
      - 30
      - 31
      - 32
      format: int32
      title: UserDeliveryStatusInfoCodes
      type: integer
    UserDutyInfo:
      additionalProperties: false
      example:
        overdue: true
        lastStatusChange: 2000-01-23T04:56:07.000+00:00
        onManagerDuty: true
        onDuty: true
      properties:
        lastStatusChange:
          format: date-time
          nullable: true
          title: lastStatusChange
          type: string
        onDuty:
          title: onDuty
          type: boolean
        onManagerDuty:
          title: onManagerDuty
          type: boolean
        overdue:
          title: overdue
          type: boolean
      title: UserDutyInfo
      type: object
    UserImage:
      additionalProperties: false
      example:
        contentDisposition: contentDisposition
        name: name
        contentEncoding: contentEncoding
        lastModified: 2000-01-23T04:56:07.000+00:00
        contentType: contentType
        content: content
      properties:
        content:
          format: byte
          nullable: true
          title: content
          type: string
        contentDisposition:
          nullable: true
          title: contentDisposition
          type: string
        contentEncoding:
          nullable: true
          title: contentEncoding
          type: string
        contentType:
          nullable: true
          title: contentType
          type: string
        lastModified:
          format: date-time
          nullable: true
          title: lastModified
          type: string
        name:
          nullable: true
          title: name
          type: string
      title: UserImage
      type: object
    UserInfo:
      additionalProperties: false
      example:
        contactAddresses:
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          address: address
          created: 2000-01-23T04:56:07.000+00:00
          channel: 6
          options: 5
          id: id
          device:
            ringtoneDisabled: true
            appVersion: appVersion
            osVersion: osVersion
            name: name
            ringtone: ringtone
            type: 1
            deviceId: deviceId
          userId: userId
        - lastUpdated: 2000-01-23T04:56:07.000+00:00
          address: address
          created: 2000-01-23T04:56:07.000+00:00
          channel: 6
          options: 5
          id: id
          device:
            ringtoneDisabled: true
            appVersion: appVersion
            osVersion: osVersion
            name: name
            ringtone: ringtone
            type: 1
            deviceId: deviceId
          userId: userId
        isDeactivated: true
        mail: mail
        roleId: roleId
        dutyInfo:
          overdue: true
          lastStatusChange: 2000-01-23T04:56:07.000+00:00
          onManagerDuty: true
          onDuty: true
        name: name
        colorIndex: 0
        timeZone: timeZone
        userImageLastModified: 2000-01-23T04:56:07.000+00:00
        id: id
        isInvite: true
        subscriptionId: subscriptionId
      properties:
        colorIndex:
          format: int32
          title: colorIndex
          type: integer
        contactAddresses:
          items:
            $ref: '#/components/schemas/ContactAddressInfo'
          nullable: true
          title: contactAddresses
          type: array
        dutyInfo:
          $ref: '#/components/schemas/UserDutyInfo'
        id:
          nullable: true
          title: id
          type: string
        isDeactivated:
          title: isDeactivated
          type: boolean
        isInvite:
          title: isInvite
          type: boolean
        mail:
          nullable: true
          title: mail
          type: string
        name:
          nullable: true
          title: name
          type: string
        roleId:
          nullable: true
          title: roleId
          type: string
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        timeZone:
          nullable: true
          title: timeZone
          type: string
        userImageLastModified:
          format: date-time
          nullable: true
          title: userImageLastModified
          type: string
      title: UserInfo
      type: object
    UserInvitationInfo:
      additionalProperties: false
      example:
        inviterId: inviterId
        userMail: userMail
      properties:
        inviterId:
          nullable: true
          title: inviterId
          type: string
        userMail:
          nullable: true
          title: userMail
          type: string
      title: UserInvitationInfo
      type: object
    UserInvitationResult:
      additionalProperties: false
      example:
        success: true
        errorMessage: errorMessage
        errorCode: 0
        invitedUser:
          mail: mail
          roleId: roleId
          name: name
          id: id
          isInvite: true
      properties:
        errorCode:
          format: int32
          nullable: true
          title: errorCode
          type: integer
        errorMessage:
          nullable: true
          title: errorMessage
          type: string
        invitedUser:
          $ref: '#/components/schemas/InvitedUserInfo'
        success:
          title: success
          type: boolean
      title: UserInvitationResult
      type: object
    UserInvite:
      additionalProperties: false
      example:
        roleId: roleId
        email: email
      properties:
        email:
          nullable: true
          title: email
          type: string
        roleId:
          nullable: true
          title: roleId
          type: string
      title: UserInvite
      type: object
    UserLicenseInfo:
      additionalProperties: false
      example:
        isFree: true
        isTrial: true
        planCode: planCode
        currentUsers: 0
        licensedUsers: 6
      properties:
        currentUsers:
          format: int32
          title: currentUsers
          type: integer
        isFree:
          title: isFree
          type: boolean
        isTrial:
          title: isTrial
          type: boolean
        licensedUsers:
          format: int32
          title: licensedUsers
          type: integer
        planCode:
          nullable: true
          title: planCode
          type: string
      title: UserLicenseInfo
      type: object
    UserMembership:
      additionalProperties: false
      example:
        roleId: roleId
        isValid: true
        teamId: teamId
      properties:
        isValid:
          readOnly: true
          title: isValid
          type: boolean
        roleId:
          nullable: true
          title: roleId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
      title: UserMembership
      type: object
    UserProfile:
      additionalProperties: false
      example:
        name: name
      properties:
        name:
          nullable: true
          title: name
          type: string
      title: UserProfile
      type: object
    UserSetupProgress:
      additionalProperties: false
      example:
        completedSteps:
        - completedSteps
        - completedSteps
        userId: userId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        completedSteps:
          items:
            type: string
          nullable: true
          title: completedSteps
          type: array
        timestamp:
          format: date-time
          title: timestamp
          type: string
        userId:
          nullable: true
          title: userId
          type: string
      title: UserSetupProgress
      type: object
    UsersInvitation:
      additionalProperties: false
      example:
        inviterId: inviterId
        invites:
        - roleId: roleId
          email: email
        - roleId: roleId
          email: email
      properties:
        inviterId:
          nullable: true
          title: inviterId
          type: string
        invites:
          items:
            $ref: '#/components/schemas/UserInvite'
          nullable: true
          title: invites
          type: array
      title: UsersInvitation
      type: object
    WebhookBaseInfo:
      additionalProperties: false
      example:
        teamId: teamId
        name: name
        externalAddress: externalAddress
      properties:
        externalAddress:
          nullable: true
          title: externalAddress
          type: string
        name:
          nullable: true
          title: name
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
      title: WebhookBaseInfo
      type: object
    WebhookInfo:
      additionalProperties: false
      example:
        teamId: teamId
        name: name
        externalAddress: externalAddress
        id: id
        subscriptionId: subscriptionId
        enabled: true
      properties:
        enabled:
          title: enabled
          type: boolean
        externalAddress:
          nullable: true
          title: externalAddress
          type: string
        id:
          nullable: true
          title: id
          type: string
        name:
          nullable: true
          title: name
          type: string
        subscriptionId:
          nullable: true
          title: subscriptionId
          type: string
        teamId:
          nullable: true
          title: teamId
          type: string
      title: WebhookInfo
      type: object
  securitySchemes:
    oauth2:
      flows:
        authorizationCode:
          authorizationUrl: https://connect.signl4.com/identity/connect/authorize
          refreshUrl: https://connect.signl4.com/identity/connect/token
          scopes:
            offline_access: Access write operations
            public_api_read: Access write operations
            public_api_write: Access read operations
          tokenUrl: https://connect.signl4.com/identity/connect/token
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_oauth2
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_oauth2
x-hasEquivalentPaths: true
