/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlertAnnotationInfo;
import org.openapitools.client.model.AlertDeliveryStatusInfo;
import org.openapitools.client.model.AlertHistoryInfoDetailed;
import org.openapitools.client.model.AlertStatusCodes;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OverviewAlert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OverviewAlert {
  public static final String SERIALIZED_NAME_ALERT_DELIVERY_STATUS = "alertDeliveryStatus";
  @SerializedName(SERIALIZED_NAME_ALERT_DELIVERY_STATUS)
  private AlertDeliveryStatusInfo alertDeliveryStatus;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<AlertAnnotationInfo> annotations;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private Integer flags;

  public static final String SERIALIZED_NAME_HISTORY_DETAILED = "historyDetailed";
  @SerializedName(SERIALIZED_NAME_HISTORY_DETAILED)
  private AlertHistoryInfoDetailed historyDetailed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_REQUIRED_ACKNOWLEDGEMENTS = "requiredAcknowledgements";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ACKNOWLEDGEMENTS)
  private Integer requiredAcknowledgements;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AlertStatusCodes status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public OverviewAlert() {
  }

  public OverviewAlert alertDeliveryStatus(AlertDeliveryStatusInfo alertDeliveryStatus) {
    this.alertDeliveryStatus = alertDeliveryStatus;
    return this;
  }

  /**
   * Get alertDeliveryStatus
   * @return alertDeliveryStatus
   */
  @javax.annotation.Nullable
  public AlertDeliveryStatusInfo getAlertDeliveryStatus() {
    return alertDeliveryStatus;
  }

  public void setAlertDeliveryStatus(AlertDeliveryStatusInfo alertDeliveryStatus) {
    this.alertDeliveryStatus = alertDeliveryStatus;
  }


  public OverviewAlert annotations(List<AlertAnnotationInfo> annotations) {
    this.annotations = annotations;
    return this;
  }

  public OverviewAlert addAnnotationsItem(AlertAnnotationInfo annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<AlertAnnotationInfo> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<AlertAnnotationInfo> annotations) {
    this.annotations = annotations;
  }


  public OverviewAlert categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public OverviewAlert eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public OverviewAlert flags(Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public Integer getFlags() {
    return flags;
  }

  public void setFlags(Integer flags) {
    this.flags = flags;
  }


  public OverviewAlert historyDetailed(AlertHistoryInfoDetailed historyDetailed) {
    this.historyDetailed = historyDetailed;
    return this;
  }

  /**
   * Get historyDetailed
   * @return historyDetailed
   */
  @javax.annotation.Nullable
  public AlertHistoryInfoDetailed getHistoryDetailed() {
    return historyDetailed;
  }

  public void setHistoryDetailed(AlertHistoryInfoDetailed historyDetailed) {
    this.historyDetailed = historyDetailed;
  }


  public OverviewAlert id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OverviewAlert lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public OverviewAlert requiredAcknowledgements(Integer requiredAcknowledgements) {
    this.requiredAcknowledgements = requiredAcknowledgements;
    return this;
  }

  /**
   * Get requiredAcknowledgements
   * @return requiredAcknowledgements
   */
  @javax.annotation.Nullable
  public Integer getRequiredAcknowledgements() {
    return requiredAcknowledgements;
  }

  public void setRequiredAcknowledgements(Integer requiredAcknowledgements) {
    this.requiredAcknowledgements = requiredAcknowledgements;
  }


  public OverviewAlert status(AlertStatusCodes status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AlertStatusCodes getStatus() {
    return status;
  }

  public void setStatus(AlertStatusCodes status) {
    this.status = status;
  }


  public OverviewAlert subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public OverviewAlert teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public OverviewAlert text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public OverviewAlert title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverviewAlert overviewAlert = (OverviewAlert) o;
    return Objects.equals(this.alertDeliveryStatus, overviewAlert.alertDeliveryStatus) &&
        Objects.equals(this.annotations, overviewAlert.annotations) &&
        Objects.equals(this.categoryId, overviewAlert.categoryId) &&
        Objects.equals(this.eventId, overviewAlert.eventId) &&
        Objects.equals(this.flags, overviewAlert.flags) &&
        Objects.equals(this.historyDetailed, overviewAlert.historyDetailed) &&
        Objects.equals(this.id, overviewAlert.id) &&
        Objects.equals(this.lastModified, overviewAlert.lastModified) &&
        Objects.equals(this.requiredAcknowledgements, overviewAlert.requiredAcknowledgements) &&
        Objects.equals(this.status, overviewAlert.status) &&
        Objects.equals(this.subscriptionId, overviewAlert.subscriptionId) &&
        Objects.equals(this.teamId, overviewAlert.teamId) &&
        Objects.equals(this.text, overviewAlert.text) &&
        Objects.equals(this.title, overviewAlert.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertDeliveryStatus, annotations, categoryId, eventId, flags, historyDetailed, id, lastModified, requiredAcknowledgements, status, subscriptionId, teamId, text, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverviewAlert {\n");
    sb.append("    alertDeliveryStatus: ").append(toIndentedString(alertDeliveryStatus)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    historyDetailed: ").append(toIndentedString(historyDetailed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    requiredAcknowledgements: ").append(toIndentedString(requiredAcknowledgements)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertDeliveryStatus");
    openapiFields.add("annotations");
    openapiFields.add("categoryId");
    openapiFields.add("eventId");
    openapiFields.add("flags");
    openapiFields.add("historyDetailed");
    openapiFields.add("id");
    openapiFields.add("lastModified");
    openapiFields.add("requiredAcknowledgements");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");
    openapiFields.add("teamId");
    openapiFields.add("text");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OverviewAlert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OverviewAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverviewAlert is not found in the empty JSON string", OverviewAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OverviewAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OverviewAlert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertDeliveryStatus`
      if (jsonObj.get("alertDeliveryStatus") != null && !jsonObj.get("alertDeliveryStatus").isJsonNull()) {
        AlertDeliveryStatusInfo.validateJsonElement(jsonObj.get("alertDeliveryStatus"));
      }
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull()) {
        JsonArray jsonArrayannotations = jsonObj.getAsJsonArray("annotations");
        if (jsonArrayannotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
          }

          // validate the optional field `annotations` (array)
          for (int i = 0; i < jsonArrayannotations.size(); i++) {
            AlertAnnotationInfo.validateJsonElement(jsonArrayannotations.get(i));
          };
        }
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      // validate the optional field `historyDetailed`
      if (jsonObj.get("historyDetailed") != null && !jsonObj.get("historyDetailed").isJsonNull()) {
        AlertHistoryInfoDetailed.validateJsonElement(jsonObj.get("historyDetailed"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AlertStatusCodes.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("teamId") != null && !jsonObj.get("teamId").isJsonNull()) && !jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverviewAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverviewAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverviewAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverviewAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<OverviewAlert>() {
           @Override
           public void write(JsonWriter out, OverviewAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OverviewAlert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OverviewAlert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OverviewAlert
   * @throws IOException if the JSON string is invalid with respect to OverviewAlert
   */
  public static OverviewAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverviewAlert.class);
  }

  /**
   * Convert an instance of OverviewAlert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

