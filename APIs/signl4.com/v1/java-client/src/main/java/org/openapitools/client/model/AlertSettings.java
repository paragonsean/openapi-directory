/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertFilterActions;
import org.openapitools.client.model.AlertFilterModes;
import org.openapitools.client.model.AlertResponseModes;
import org.openapitools.client.model.PersistentNotificationModes;
import org.openapitools.client.model.TeamCategoryOptOutModes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertSettings {
  public static final String SERIALIZED_NAME_FILTER_ACTION = "filterAction";
  @SerializedName(SERIALIZED_NAME_FILTER_ACTION)
  private AlertFilterActions filterAction;

  public static final String SERIALIZED_NAME_FILTER_MODE = "filterMode";
  @SerializedName(SERIALIZED_NAME_FILTER_MODE)
  private AlertFilterModes filterMode;

  public static final String SERIALIZED_NAME_OPT_OUT_MODE = "optOutMode";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_MODE)
  private TeamCategoryOptOutModes optOutMode;

  public static final String SERIALIZED_NAME_PERSISTENT_NOTIFICICATION_MODE = "persistentNotificicationMode";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_NOTIFICICATION_MODE)
  private PersistentNotificationModes persistentNotificicationMode;

  public static final String SERIALIZED_NAME_RESPONSE_MODE = "responseMode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODE)
  private AlertResponseModes responseMode;

  public static final String SERIALIZED_NAME_RESPONSE_TIME = "responseTime";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME)
  private Integer responseTime;

  public AlertSettings() {
  }

  public AlertSettings filterAction(AlertFilterActions filterAction) {
    this.filterAction = filterAction;
    return this;
  }

  /**
   * Get filterAction
   * @return filterAction
   */
  @javax.annotation.Nullable
  public AlertFilterActions getFilterAction() {
    return filterAction;
  }

  public void setFilterAction(AlertFilterActions filterAction) {
    this.filterAction = filterAction;
  }


  public AlertSettings filterMode(AlertFilterModes filterMode) {
    this.filterMode = filterMode;
    return this;
  }

  /**
   * Get filterMode
   * @return filterMode
   */
  @javax.annotation.Nullable
  public AlertFilterModes getFilterMode() {
    return filterMode;
  }

  public void setFilterMode(AlertFilterModes filterMode) {
    this.filterMode = filterMode;
  }


  public AlertSettings optOutMode(TeamCategoryOptOutModes optOutMode) {
    this.optOutMode = optOutMode;
    return this;
  }

  /**
   * Get optOutMode
   * @return optOutMode
   */
  @javax.annotation.Nullable
  public TeamCategoryOptOutModes getOptOutMode() {
    return optOutMode;
  }

  public void setOptOutMode(TeamCategoryOptOutModes optOutMode) {
    this.optOutMode = optOutMode;
  }


  public AlertSettings persistentNotificicationMode(PersistentNotificationModes persistentNotificicationMode) {
    this.persistentNotificicationMode = persistentNotificicationMode;
    return this;
  }

  /**
   * Get persistentNotificicationMode
   * @return persistentNotificicationMode
   */
  @javax.annotation.Nullable
  public PersistentNotificationModes getPersistentNotificicationMode() {
    return persistentNotificicationMode;
  }

  public void setPersistentNotificicationMode(PersistentNotificationModes persistentNotificicationMode) {
    this.persistentNotificicationMode = persistentNotificicationMode;
  }


  public AlertSettings responseMode(AlertResponseModes responseMode) {
    this.responseMode = responseMode;
    return this;
  }

  /**
   * Get responseMode
   * @return responseMode
   */
  @javax.annotation.Nullable
  public AlertResponseModes getResponseMode() {
    return responseMode;
  }

  public void setResponseMode(AlertResponseModes responseMode) {
    this.responseMode = responseMode;
  }


  public AlertSettings responseTime(Integer responseTime) {
    this.responseTime = responseTime;
    return this;
  }

  /**
   * Get responseTime
   * @return responseTime
   */
  @javax.annotation.Nullable
  public Integer getResponseTime() {
    return responseTime;
  }

  public void setResponseTime(Integer responseTime) {
    this.responseTime = responseTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertSettings alertSettings = (AlertSettings) o;
    return Objects.equals(this.filterAction, alertSettings.filterAction) &&
        Objects.equals(this.filterMode, alertSettings.filterMode) &&
        Objects.equals(this.optOutMode, alertSettings.optOutMode) &&
        Objects.equals(this.persistentNotificicationMode, alertSettings.persistentNotificicationMode) &&
        Objects.equals(this.responseMode, alertSettings.responseMode) &&
        Objects.equals(this.responseTime, alertSettings.responseTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterAction, filterMode, optOutMode, persistentNotificicationMode, responseMode, responseTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertSettings {\n");
    sb.append("    filterAction: ").append(toIndentedString(filterAction)).append("\n");
    sb.append("    filterMode: ").append(toIndentedString(filterMode)).append("\n");
    sb.append("    optOutMode: ").append(toIndentedString(optOutMode)).append("\n");
    sb.append("    persistentNotificicationMode: ").append(toIndentedString(persistentNotificicationMode)).append("\n");
    sb.append("    responseMode: ").append(toIndentedString(responseMode)).append("\n");
    sb.append("    responseTime: ").append(toIndentedString(responseTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterAction");
    openapiFields.add("filterMode");
    openapiFields.add("optOutMode");
    openapiFields.add("persistentNotificicationMode");
    openapiFields.add("responseMode");
    openapiFields.add("responseTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertSettings is not found in the empty JSON string", AlertSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filterAction`
      if (jsonObj.get("filterAction") != null && !jsonObj.get("filterAction").isJsonNull()) {
        AlertFilterActions.validateJsonElement(jsonObj.get("filterAction"));
      }
      // validate the optional field `filterMode`
      if (jsonObj.get("filterMode") != null && !jsonObj.get("filterMode").isJsonNull()) {
        AlertFilterModes.validateJsonElement(jsonObj.get("filterMode"));
      }
      // validate the optional field `optOutMode`
      if (jsonObj.get("optOutMode") != null && !jsonObj.get("optOutMode").isJsonNull()) {
        TeamCategoryOptOutModes.validateJsonElement(jsonObj.get("optOutMode"));
      }
      // validate the optional field `persistentNotificicationMode`
      if (jsonObj.get("persistentNotificicationMode") != null && !jsonObj.get("persistentNotificicationMode").isJsonNull()) {
        PersistentNotificationModes.validateJsonElement(jsonObj.get("persistentNotificicationMode"));
      }
      // validate the optional field `responseMode`
      if (jsonObj.get("responseMode") != null && !jsonObj.get("responseMode").isJsonNull()) {
        AlertResponseModes.validateJsonElement(jsonObj.get("responseMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertSettings>() {
           @Override
           public void write(JsonWriter out, AlertSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertSettings
   * @throws IOException if the JSON string is invalid with respect to AlertSettings
   */
  public static AlertSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertSettings.class);
  }

  /**
   * Convert an instance of AlertSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

