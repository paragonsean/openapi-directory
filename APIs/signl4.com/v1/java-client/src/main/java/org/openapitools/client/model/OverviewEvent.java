/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventSeverities;
import org.openapitools.client.model.EventSourceTypes;
import org.openapitools.client.model.EventStatusCodes;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OverviewEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OverviewEvent {
  public static final String SERIALIZED_NAME_ACKNOWLEDGED_ALERTS = "acknowledgedAlerts";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED_ALERTS)
  private List<String> acknowledgedAlerts;

  public static final String SERIALIZED_NAME_ALERT_ID = "alertId";
  @SerializedName(SERIALIZED_NAME_ALERT_ID)
  private String alertId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CLOSED_ALERTS = "closedAlerts";
  @SerializedName(SERIALIZED_NAME_CLOSED_ALERTS)
  private List<String> closedAlerts;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_TYPE = "eventSourceType";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_TYPE)
  private EventSourceTypes eventSourceType;

  public static final String SERIALIZED_NAME_EVENT_STATUS = "eventStatus";
  @SerializedName(SERIALIZED_NAME_EVENT_STATUS)
  private EventStatusCodes eventStatus;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private EventSeverities severity;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public OverviewEvent() {
  }

  public OverviewEvent acknowledgedAlerts(List<String> acknowledgedAlerts) {
    this.acknowledgedAlerts = acknowledgedAlerts;
    return this;
  }

  public OverviewEvent addAcknowledgedAlertsItem(String acknowledgedAlertsItem) {
    if (this.acknowledgedAlerts == null) {
      this.acknowledgedAlerts = new ArrayList<>();
    }
    this.acknowledgedAlerts.add(acknowledgedAlertsItem);
    return this;
  }

  /**
   * Get acknowledgedAlerts
   * @return acknowledgedAlerts
   */
  @javax.annotation.Nullable
  public List<String> getAcknowledgedAlerts() {
    return acknowledgedAlerts;
  }

  public void setAcknowledgedAlerts(List<String> acknowledgedAlerts) {
    this.acknowledgedAlerts = acknowledgedAlerts;
  }


  public OverviewEvent alertId(String alertId) {
    this.alertId = alertId;
    return this;
  }

  /**
   * Get alertId
   * @return alertId
   */
  @javax.annotation.Nullable
  public String getAlertId() {
    return alertId;
  }

  public void setAlertId(String alertId) {
    this.alertId = alertId;
  }


  public OverviewEvent categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public OverviewEvent closedAlerts(List<String> closedAlerts) {
    this.closedAlerts = closedAlerts;
    return this;
  }

  public OverviewEvent addClosedAlertsItem(String closedAlertsItem) {
    if (this.closedAlerts == null) {
      this.closedAlerts = new ArrayList<>();
    }
    this.closedAlerts.add(closedAlertsItem);
    return this;
  }

  /**
   * Get closedAlerts
   * @return closedAlerts
   */
  @javax.annotation.Nullable
  public List<String> getClosedAlerts() {
    return closedAlerts;
  }

  public void setClosedAlerts(List<String> closedAlerts) {
    this.closedAlerts = closedAlerts;
  }


  public OverviewEvent creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public OverviewEvent eventSourceType(EventSourceTypes eventSourceType) {
    this.eventSourceType = eventSourceType;
    return this;
  }

  /**
   * Get eventSourceType
   * @return eventSourceType
   */
  @javax.annotation.Nullable
  public EventSourceTypes getEventSourceType() {
    return eventSourceType;
  }

  public void setEventSourceType(EventSourceTypes eventSourceType) {
    this.eventSourceType = eventSourceType;
  }


  public OverviewEvent eventStatus(EventStatusCodes eventStatus) {
    this.eventStatus = eventStatus;
    return this;
  }

  /**
   * Get eventStatus
   * @return eventStatus
   */
  @javax.annotation.Nullable
  public EventStatusCodes getEventStatus() {
    return eventStatus;
  }

  public void setEventStatus(EventStatusCodes eventStatus) {
    this.eventStatus = eventStatus;
  }


  public OverviewEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OverviewEvent lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public OverviewEvent severity(EventSeverities severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public EventSeverities getSeverity() {
    return severity;
  }

  public void setSeverity(EventSeverities severity) {
    this.severity = severity;
  }


  public OverviewEvent teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public OverviewEvent text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public OverviewEvent title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverviewEvent overviewEvent = (OverviewEvent) o;
    return Objects.equals(this.acknowledgedAlerts, overviewEvent.acknowledgedAlerts) &&
        Objects.equals(this.alertId, overviewEvent.alertId) &&
        Objects.equals(this.categoryId, overviewEvent.categoryId) &&
        Objects.equals(this.closedAlerts, overviewEvent.closedAlerts) &&
        Objects.equals(this.creationTime, overviewEvent.creationTime) &&
        Objects.equals(this.eventSourceType, overviewEvent.eventSourceType) &&
        Objects.equals(this.eventStatus, overviewEvent.eventStatus) &&
        Objects.equals(this.id, overviewEvent.id) &&
        Objects.equals(this.lastModified, overviewEvent.lastModified) &&
        Objects.equals(this.severity, overviewEvent.severity) &&
        Objects.equals(this.teamId, overviewEvent.teamId) &&
        Objects.equals(this.text, overviewEvent.text) &&
        Objects.equals(this.title, overviewEvent.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgedAlerts, alertId, categoryId, closedAlerts, creationTime, eventSourceType, eventStatus, id, lastModified, severity, teamId, text, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverviewEvent {\n");
    sb.append("    acknowledgedAlerts: ").append(toIndentedString(acknowledgedAlerts)).append("\n");
    sb.append("    alertId: ").append(toIndentedString(alertId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    closedAlerts: ").append(toIndentedString(closedAlerts)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    eventSourceType: ").append(toIndentedString(eventSourceType)).append("\n");
    sb.append("    eventStatus: ").append(toIndentedString(eventStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgedAlerts");
    openapiFields.add("alertId");
    openapiFields.add("categoryId");
    openapiFields.add("closedAlerts");
    openapiFields.add("creationTime");
    openapiFields.add("eventSourceType");
    openapiFields.add("eventStatus");
    openapiFields.add("id");
    openapiFields.add("lastModified");
    openapiFields.add("severity");
    openapiFields.add("teamId");
    openapiFields.add("text");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OverviewEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OverviewEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverviewEvent is not found in the empty JSON string", OverviewEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OverviewEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OverviewEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("acknowledgedAlerts") != null && !jsonObj.get("acknowledgedAlerts").isJsonNull() && !jsonObj.get("acknowledgedAlerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgedAlerts` to be an array in the JSON string but got `%s`", jsonObj.get("acknowledgedAlerts").toString()));
      }
      if ((jsonObj.get("alertId") != null && !jsonObj.get("alertId").isJsonNull()) && !jsonObj.get("alertId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertId").toString()));
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("closedAlerts") != null && !jsonObj.get("closedAlerts").isJsonNull() && !jsonObj.get("closedAlerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedAlerts` to be an array in the JSON string but got `%s`", jsonObj.get("closedAlerts").toString()));
      }
      // validate the optional field `eventSourceType`
      if (jsonObj.get("eventSourceType") != null && !jsonObj.get("eventSourceType").isJsonNull()) {
        EventSourceTypes.validateJsonElement(jsonObj.get("eventSourceType"));
      }
      // validate the optional field `eventStatus`
      if (jsonObj.get("eventStatus") != null && !jsonObj.get("eventStatus").isJsonNull()) {
        EventStatusCodes.validateJsonElement(jsonObj.get("eventStatus"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        EventSeverities.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("teamId") != null && !jsonObj.get("teamId").isJsonNull()) && !jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverviewEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverviewEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverviewEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverviewEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<OverviewEvent>() {
           @Override
           public void write(JsonWriter out, OverviewEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OverviewEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OverviewEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OverviewEvent
   * @throws IOException if the JSON string is invalid with respect to OverviewEvent
   */
  public static OverviewEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverviewEvent.class);
  }

  /**
   * Convert an instance of OverviewEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

