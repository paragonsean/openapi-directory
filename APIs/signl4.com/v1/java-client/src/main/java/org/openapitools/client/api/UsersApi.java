/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.StringItemsWrapper;
import org.openapitools.client.model.UpdatePasswordInfo;
import org.openapitools.client.model.UserDutyInfo;
import org.openapitools.client.model.UserImage;
import org.openapitools.client.model.UserInfo;
import org.openapitools.client.model.UserProfile;
import org.openapitools.client.model.UserSetupProgress;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the users with their information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersGetCall(_callback);

    }

    /**
     * Get all Users
     * Returns a list of user objects with details such as their email address and duty information. Only users who  are part of your team will be returned.
     * @return List&lt;UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the users with their information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public List<UserInfo> usersGet() throws ApiException {
        ApiResponse<List<UserInfo>> localVarResp = usersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all Users
     * Returns a list of user objects with details such as their email address and duty information. Only users who  are part of your team will be returned.
     * @return ApiResponse&lt;List&lt;UserInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the users with their information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserInfo>> usersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Users (asynchronously)
     * Returns a list of user objects with details such as their email address and duty information. Only users who  are part of your team will be returned.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the users with their information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(final ApiCallback<List<UserInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdChangePasswordPut
     * @param userId User ID of user whose password should be changed. (required)
     * @param updatePasswordInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdChangePasswordPutCall(String userId, UpdatePasswordInfo updatePasswordInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePasswordInfo;

        // create path and map variables
        String localVarPath = "/users/{userId}/changePassword"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdChangePasswordPutValidateBeforeCall(String userId, UpdatePasswordInfo updatePasswordInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdChangePasswordPut(Async)");
        }

        return usersUserIdChangePasswordPutCall(userId, updatePasswordInfo, _callback);

    }

    /**
     * Updates the password of a user
     * 
     * @param userId User ID of user whose password should be changed. (required)
     * @param updatePasswordInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void usersUserIdChangePasswordPut(String userId, UpdatePasswordInfo updatePasswordInfo) throws ApiException {
        usersUserIdChangePasswordPutWithHttpInfo(userId, updatePasswordInfo);
    }

    /**
     * Updates the password of a user
     * 
     * @param userId User ID of user whose password should be changed. (required)
     * @param updatePasswordInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUserIdChangePasswordPutWithHttpInfo(String userId, UpdatePasswordInfo updatePasswordInfo) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdChangePasswordPutValidateBeforeCall(userId, updatePasswordInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the password of a user (asynchronously)
     * 
     * @param userId User ID of user whose password should be changed. (required)
     * @param updatePasswordInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdChangePasswordPutAsync(String userId, UpdatePasswordInfo updatePasswordInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdChangePasswordPutValidateBeforeCall(userId, updatePasswordInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdCheckPermissionsPost
     * @param userId ID of the user to check permissions for. (required)
     * @param teamId  (optional)
     * @param stringItemsWrapper List of permissions to check (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdCheckPermissionsPostCall(String userId, String teamId, StringItemsWrapper stringItemsWrapper, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringItemsWrapper;

        // create path and map variables
        String localVarPath = "/users/{userId}/checkPermissions"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdCheckPermissionsPostValidateBeforeCall(String userId, String teamId, StringItemsWrapper stringItemsWrapper, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdCheckPermissionsPost(Async)");
        }

        return usersUserIdCheckPermissionsPostCall(userId, teamId, stringItemsWrapper, _callback);

    }

    /**
     * Checks if a user has the provided permission.
     * 
     * @param userId ID of the user to check permissions for. (required)
     * @param teamId  (optional)
     * @param stringItemsWrapper List of permissions to check (optional)
     * @return UserImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserImage usersUserIdCheckPermissionsPost(String userId, String teamId, StringItemsWrapper stringItemsWrapper) throws ApiException {
        ApiResponse<UserImage> localVarResp = usersUserIdCheckPermissionsPostWithHttpInfo(userId, teamId, stringItemsWrapper);
        return localVarResp.getData();
    }

    /**
     * Checks if a user has the provided permission.
     * 
     * @param userId ID of the user to check permissions for. (required)
     * @param teamId  (optional)
     * @param stringItemsWrapper List of permissions to check (optional)
     * @return ApiResponse&lt;UserImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserImage> usersUserIdCheckPermissionsPostWithHttpInfo(String userId, String teamId, StringItemsWrapper stringItemsWrapper) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdCheckPermissionsPostValidateBeforeCall(userId, teamId, stringItemsWrapper, null);
        Type localVarReturnType = new TypeToken<UserImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks if a user has the provided permission. (asynchronously)
     * 
     * @param userId ID of the user to check permissions for. (required)
     * @param teamId  (optional)
     * @param stringItemsWrapper List of permissions to check (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdCheckPermissionsPostAsync(String userId, String teamId, StringItemsWrapper stringItemsWrapper, final ApiCallback<UserImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdCheckPermissionsPostValidateBeforeCall(userId, teamId, stringItemsWrapper, _callback);
        Type localVarReturnType = new TypeToken<UserImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdDutyStatusGet
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty successfully loaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that duty information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDutyStatusGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/dutyStatus"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdDutyStatusGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdDutyStatusGet(Async)");
        }

        return usersUserIdDutyStatusGetCall(userId, _callback);

    }

    /**
     * Get duty status by user Id
     * Returns a object with duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return UserDutyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty successfully loaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that duty information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public UserDutyInfo usersUserIdDutyStatusGet(String userId) throws ApiException {
        ApiResponse<UserDutyInfo> localVarResp = usersUserIdDutyStatusGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get duty status by user Id
     * Returns a object with duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return ApiResponse&lt;UserDutyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty successfully loaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that duty information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDutyInfo> usersUserIdDutyStatusGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdDutyStatusGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get duty status by user Id (asynchronously)
     * Returns a object with duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty successfully loaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that duty information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdDutyStatusGetAsync(String userId, final ApiCallback<UserDutyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdDutyStatusGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdGet
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that user&#39;s information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdGet(Async)");
        }

        return usersUserIdGetCall(userId, _callback);

    }

    /**
     * Get User by Id
     * Returns a user object with details such as his email address and duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that user&#39;s information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public UserInfo usersUserIdGet(String userId) throws ApiException {
        ApiResponse<UserInfo> localVarResp = usersUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User by Id
     * Returns a user object with details such as his email address and duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return ApiResponse&lt;UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that user&#39;s information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserInfo> usersUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User by Id (asynchronously)
     * Returns a user object with details such as his email address and duty information.
     * @param userId Identifier of the user to get. Use &#39;Me&#39; to get information about the currently logged in user. This is not possible with an api key.  Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User could be successfully identified. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request that user&#39;s information. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdGetAsync(String userId, final ApiCallback<UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdImageGet
     * @param userId  (required)
     * @param height  (optional)
     * @param width  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdImageGetCall(String userId, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/image"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdImageGetValidateBeforeCall(String userId, Integer height, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdImageGet(Async)");
        }

        return usersUserIdImageGetCall(userId, height, width, _callback);

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param height  (optional)
     * @param width  (optional)
     * @return UserImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UserImage usersUserIdImageGet(String userId, Integer height, Integer width) throws ApiException {
        ApiResponse<UserImage> localVarResp = usersUserIdImageGetWithHttpInfo(userId, height, width);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param height  (optional)
     * @param width  (optional)
     * @return ApiResponse&lt;UserImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserImage> usersUserIdImageGetWithHttpInfo(String userId, Integer height, Integer width) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdImageGetValidateBeforeCall(userId, height, width, null);
        Type localVarReturnType = new TypeToken<UserImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param height  (optional)
     * @param width  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdImageGetAsync(String userId, Integer height, Integer width, final ApiCallback<UserImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdImageGetValidateBeforeCall(userId, height, width, _callback);
        Type localVarReturnType = new TypeToken<UserImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdImagePost
     * @param userId Id of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image was successfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either a passed parameter was either empty/null or the request&#39;s multipart does not contain a  file. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to upoload an image for the specified user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the user was not found or they aren&#39;t activated yet. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdImagePostCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/image"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdImagePostValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdImagePost(Async)");
        }

        return usersUserIdImagePostCall(userId, _callback);

    }

    /**
     * Uploaded a profile image for a specified user.
     * 
     * @param userId Id of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image was successfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either a passed parameter was either empty/null or the request&#39;s multipart does not contain a  file. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to upoload an image for the specified user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the user was not found or they aren&#39;t activated yet. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void usersUserIdImagePost(String userId) throws ApiException {
        usersUserIdImagePostWithHttpInfo(userId);
    }

    /**
     * Uploaded a profile image for a specified user.
     * 
     * @param userId Id of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image was successfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either a passed parameter was either empty/null or the request&#39;s multipart does not contain a  file. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to upoload an image for the specified user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the user was not found or they aren&#39;t activated yet. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersUserIdImagePostWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdImagePostValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Uploaded a profile image for a specified user. (asynchronously)
     * 
     * @param userId Id of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image was successfully uploaded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either a passed parameter was either empty/null or the request&#39;s multipart does not contain a  file. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to upoload an image for the specified user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the user was not found or they aren&#39;t activated yet. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdImagePostAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdImagePostValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdProfilePut
     * @param userId ID of user to update. (required)
     * @param userProfile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdProfilePutCall(String userId, UserProfile userProfile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userProfile;

        // create path and map variables
        String localVarPath = "/users/{userId}/profile"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdProfilePutValidateBeforeCall(String userId, UserProfile userProfile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdProfilePut(Async)");
        }

        return usersUserIdProfilePutCall(userId, userProfile, _callback);

    }

    /**
     * Updates user profile of an user
     * 
     * @param userId ID of user to update. (required)
     * @param userProfile  (optional)
     * @return UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserInfo usersUserIdProfilePut(String userId, UserProfile userProfile) throws ApiException {
        ApiResponse<UserInfo> localVarResp = usersUserIdProfilePutWithHttpInfo(userId, userProfile);
        return localVarResp.getData();
    }

    /**
     * Updates user profile of an user
     * 
     * @param userId ID of user to update. (required)
     * @param userProfile  (optional)
     * @return ApiResponse&lt;UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserInfo> usersUserIdProfilePutWithHttpInfo(String userId, UserProfile userProfile) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdProfilePutValidateBeforeCall(userId, userProfile, null);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates user profile of an user (asynchronously)
     * 
     * @param userId ID of user to update. (required)
     * @param userProfile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdProfilePutAsync(String userId, UserProfile userProfile, final ApiCallback<UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdProfilePutValidateBeforeCall(userId, userProfile, _callback);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdPunchInAsManagerPost
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchInAsManagerPostCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/punchInAsManager"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdPunchInAsManagerPostValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPunchInAsManagerPost(Async)");
        }

        return usersUserIdPunchInAsManagerPostCall(userId, _callback);

    }

    /**
     * Punch User in as Manager
     * The specified user will be punched in to duty as a manager.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return UserDutyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public UserDutyInfo usersUserIdPunchInAsManagerPost(String userId) throws ApiException {
        ApiResponse<UserDutyInfo> localVarResp = usersUserIdPunchInAsManagerPostWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Punch User in as Manager
     * The specified user will be punched in to duty as a manager.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return ApiResponse&lt;UserDutyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDutyInfo> usersUserIdPunchInAsManagerPostWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdPunchInAsManagerPostValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Punch User in as Manager (asynchronously)
     * The specified user will be punched in to duty as a manager.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchInAsManagerPostAsync(String userId, final ApiCallback<UserDutyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdPunchInAsManagerPostValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdPunchInPost
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchInPostCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/punchIn"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdPunchInPostValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPunchInPost(Async)");
        }

        return usersUserIdPunchInPostCall(userId, _callback);

    }

    /**
     * Punch User in
     * The specified user will be punched in to duty.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return UserDutyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public UserDutyInfo usersUserIdPunchInPost(String userId) throws ApiException {
        ApiResponse<UserDutyInfo> localVarResp = usersUserIdPunchInPostWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Punch User in
     * The specified user will be punched in to duty.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return ApiResponse&lt;UserDutyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDutyInfo> usersUserIdPunchInPostWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdPunchInPostValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Punch User in (asynchronously)
     * The specified user will be punched in to duty.
     * @param userId Identifier of the user to punch in. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user tried to change the punch in a different user. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchInPostAsync(String userId, final ApiCallback<UserDutyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdPunchInPostValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdPunchOutPost
     * @param userId Identifier of the user to punch out. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user was punched out successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user tried to punch out someone else, which is not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The desired user was not found by passed id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The desired user was not punched out because it would violate  the minumum on-duty members setting  from the team. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchOutPostCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/punchOut"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdPunchOutPostValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPunchOutPost(Async)");
        }

        return usersUserIdPunchOutPostCall(userId, _callback);

    }

    /**
     * Punch User out
     * The specified user will be punched out from duty.
     * @param userId Identifier of the user to punch out. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return UserDutyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user was punched out successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user tried to punch out someone else, which is not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The desired user was not found by passed id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The desired user was not punched out because it would violate  the minumum on-duty members setting  from the team. </td><td>  -  </td></tr>
     </table>
     */
    public UserDutyInfo usersUserIdPunchOutPost(String userId) throws ApiException {
        ApiResponse<UserDutyInfo> localVarResp = usersUserIdPunchOutPostWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Punch User out
     * The specified user will be punched out from duty.
     * @param userId Identifier of the user to punch out. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @return ApiResponse&lt;UserDutyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user was punched out successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user tried to punch out someone else, which is not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The desired user was not found by passed id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The desired user was not punched out because it would violate  the minumum on-duty members setting  from the team. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDutyInfo> usersUserIdPunchOutPostWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdPunchOutPostValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Punch User out (asynchronously)
     * The specified user will be punched out from duty.
     * @param userId Identifier of the user to punch out. Use &#39;Me&#39; to get information about the currently logged in  user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.â (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user was punched out successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required authentifaction information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requesting user tried to punch out someone else, which is not allowed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The desired user was not found by passed id. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The desired user was not punched out because it would violate  the minumum on-duty members setting  from the team. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdPunchOutPostAsync(String userId, final ApiCallback<UserDutyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdPunchOutPostValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserDutyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIdSetupProgressGet
     * @param userId ID of the user the progress should be retrieved for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdSetupProgressGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/setupProgress"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIdSetupProgressGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdSetupProgressGet(Async)");
        }

        return usersUserIdSetupProgressGetCall(userId, _callback);

    }

    /**
     * Gets setup progress of a specific user.
     * 
     * @param userId ID of the user the progress should be retrieved for. (required)
     * @return UserSetupProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserSetupProgress usersUserIdSetupProgressGet(String userId) throws ApiException {
        ApiResponse<UserSetupProgress> localVarResp = usersUserIdSetupProgressGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Gets setup progress of a specific user.
     * 
     * @param userId ID of the user the progress should be retrieved for. (required)
     * @return ApiResponse&lt;UserSetupProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSetupProgress> usersUserIdSetupProgressGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = usersUserIdSetupProgressGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserSetupProgress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets setup progress of a specific user. (asynchronously)
     * 
     * @param userId ID of the user the progress should be retrieved for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIdSetupProgressGetAsync(String userId, final ApiCallback<UserSetupProgress> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIdSetupProgressGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserSetupProgress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
