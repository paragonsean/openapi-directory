/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertCounts;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertReport {
  public static final String SERIALIZED_NAME_LAST24_HOURS = "last24Hours";
  @SerializedName(SERIALIZED_NAME_LAST24_HOURS)
  private AlertCounts last24Hours;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TEAM_CURRENT_DUTY = "teamCurrentDuty";
  @SerializedName(SERIALIZED_NAME_TEAM_CURRENT_DUTY)
  private AlertCounts teamCurrentDuty;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_TEAM_LAST_DUTY = "teamLastDuty";
  @SerializedName(SERIALIZED_NAME_TEAM_LAST_DUTY)
  private AlertCounts teamLastDuty;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_LAST_DUTY_CHANGE = "userLastDutyChange";
  @SerializedName(SERIALIZED_NAME_USER_LAST_DUTY_CHANGE)
  private AlertCounts userLastDutyChange;

  public AlertReport() {
  }

  public AlertReport last24Hours(AlertCounts last24Hours) {
    this.last24Hours = last24Hours;
    return this;
  }

  /**
   * Get last24Hours
   * @return last24Hours
   */
  @javax.annotation.Nullable
  public AlertCounts getLast24Hours() {
    return last24Hours;
  }

  public void setLast24Hours(AlertCounts last24Hours) {
    this.last24Hours = last24Hours;
  }


  public AlertReport subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public AlertReport teamCurrentDuty(AlertCounts teamCurrentDuty) {
    this.teamCurrentDuty = teamCurrentDuty;
    return this;
  }

  /**
   * Get teamCurrentDuty
   * @return teamCurrentDuty
   */
  @javax.annotation.Nullable
  public AlertCounts getTeamCurrentDuty() {
    return teamCurrentDuty;
  }

  public void setTeamCurrentDuty(AlertCounts teamCurrentDuty) {
    this.teamCurrentDuty = teamCurrentDuty;
  }


  public AlertReport teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public AlertReport teamLastDuty(AlertCounts teamLastDuty) {
    this.teamLastDuty = teamLastDuty;
    return this;
  }

  /**
   * Get teamLastDuty
   * @return teamLastDuty
   */
  @javax.annotation.Nullable
  public AlertCounts getTeamLastDuty() {
    return teamLastDuty;
  }

  public void setTeamLastDuty(AlertCounts teamLastDuty) {
    this.teamLastDuty = teamLastDuty;
  }


  public AlertReport userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public AlertReport userLastDutyChange(AlertCounts userLastDutyChange) {
    this.userLastDutyChange = userLastDutyChange;
    return this;
  }

  /**
   * Get userLastDutyChange
   * @return userLastDutyChange
   */
  @javax.annotation.Nullable
  public AlertCounts getUserLastDutyChange() {
    return userLastDutyChange;
  }

  public void setUserLastDutyChange(AlertCounts userLastDutyChange) {
    this.userLastDutyChange = userLastDutyChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertReport alertReport = (AlertReport) o;
    return Objects.equals(this.last24Hours, alertReport.last24Hours) &&
        Objects.equals(this.subscriptionId, alertReport.subscriptionId) &&
        Objects.equals(this.teamCurrentDuty, alertReport.teamCurrentDuty) &&
        Objects.equals(this.teamId, alertReport.teamId) &&
        Objects.equals(this.teamLastDuty, alertReport.teamLastDuty) &&
        Objects.equals(this.userId, alertReport.userId) &&
        Objects.equals(this.userLastDutyChange, alertReport.userLastDutyChange);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(last24Hours, subscriptionId, teamCurrentDuty, teamId, teamLastDuty, userId, userLastDutyChange);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertReport {\n");
    sb.append("    last24Hours: ").append(toIndentedString(last24Hours)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    teamCurrentDuty: ").append(toIndentedString(teamCurrentDuty)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    teamLastDuty: ").append(toIndentedString(teamLastDuty)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userLastDutyChange: ").append(toIndentedString(userLastDutyChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last24Hours");
    openapiFields.add("subscriptionId");
    openapiFields.add("teamCurrentDuty");
    openapiFields.add("teamId");
    openapiFields.add("teamLastDuty");
    openapiFields.add("userId");
    openapiFields.add("userLastDutyChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertReport is not found in the empty JSON string", AlertReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `last24Hours`
      if (jsonObj.get("last24Hours") != null && !jsonObj.get("last24Hours").isJsonNull()) {
        AlertCounts.validateJsonElement(jsonObj.get("last24Hours"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      // validate the optional field `teamCurrentDuty`
      if (jsonObj.get("teamCurrentDuty") != null && !jsonObj.get("teamCurrentDuty").isJsonNull()) {
        AlertCounts.validateJsonElement(jsonObj.get("teamCurrentDuty"));
      }
      if ((jsonObj.get("teamId") != null && !jsonObj.get("teamId").isJsonNull()) && !jsonObj.get("teamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamId").toString()));
      }
      // validate the optional field `teamLastDuty`
      if (jsonObj.get("teamLastDuty") != null && !jsonObj.get("teamLastDuty").isJsonNull()) {
        AlertCounts.validateJsonElement(jsonObj.get("teamLastDuty"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      // validate the optional field `userLastDutyChange`
      if (jsonObj.get("userLastDutyChange") != null && !jsonObj.get("userLastDutyChange").isJsonNull()) {
        AlertCounts.validateJsonElement(jsonObj.get("userLastDutyChange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertReport>() {
           @Override
           public void write(JsonWriter out, AlertReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertReport
   * @throws IOException if the JSON string is invalid with respect to AlertReport
   */
  public static AlertReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertReport.class);
  }

  /**
   * Convert an instance of AlertReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

