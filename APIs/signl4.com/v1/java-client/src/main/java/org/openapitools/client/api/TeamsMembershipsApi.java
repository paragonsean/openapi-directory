/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.InvitedUserInfo;
import org.openapitools.client.model.UserInfo;
import org.openapitools.client.model.UserInvitationInfo;
import org.openapitools.client.model.UserInvitationResult;
import org.openapitools.client.model.UserMembership;
import org.openapitools.client.model.UsersInvitation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsMembershipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsMembershipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsMembershipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsTeamIdMembershipsGet
     * @param teamId Team ID of team you want to request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitations are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsTeamIdMembershipsGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsGet(Async)");
        }

        return teamsTeamIdMembershipsGetCall(teamId, _callback);

    }

    /**
     * Get all invites of a team.
     * 
     * @param teamId Team ID of team you want to request. (required)
     * @return List&lt;InvitedUserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitations are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<InvitedUserInfo> teamsTeamIdMembershipsGet(String teamId) throws ApiException {
        ApiResponse<List<InvitedUserInfo>> localVarResp = teamsTeamIdMembershipsGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get all invites of a team.
     * 
     * @param teamId Team ID of team you want to request. (required)
     * @return ApiResponse&lt;List&lt;InvitedUserInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitations are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvitedUserInfo>> teamsTeamIdMembershipsGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsTeamIdMembershipsGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<List<InvitedUserInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all invites of a team. (asynchronously)
     * 
     * @param teamId Team ID of team you want to request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitations are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsGetAsync(String teamId, final ApiCallback<List<InvitedUserInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsTeamIdMembershipsGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<List<InvitedUserInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsTeamIdMembershipsPost
     * @param teamId Id of team the user should be invited to. (required)
     * @param usersInvitation Information about user to invite and inviter id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitation results are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsPostCall(String teamId, UsersInvitation usersInvitation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersInvitation;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsTeamIdMembershipsPostValidateBeforeCall(String teamId, UsersInvitation usersInvitation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsPost(Async)");
        }

        return teamsTeamIdMembershipsPostCall(teamId, usersInvitation, _callback);

    }

    /**
     * Invite users to a team
     * 
     * @param teamId Id of team the user should be invited to. (required)
     * @param usersInvitation Information about user to invite and inviter id. (optional)
     * @return List&lt;UserInvitationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitation results are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UserInvitationResult> teamsTeamIdMembershipsPost(String teamId, UsersInvitation usersInvitation) throws ApiException {
        ApiResponse<List<UserInvitationResult>> localVarResp = teamsTeamIdMembershipsPostWithHttpInfo(teamId, usersInvitation);
        return localVarResp.getData();
    }

    /**
     * Invite users to a team
     * 
     * @param teamId Id of team the user should be invited to. (required)
     * @param usersInvitation Information about user to invite and inviter id. (optional)
     * @return ApiResponse&lt;List&lt;UserInvitationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitation results are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserInvitationResult>> teamsTeamIdMembershipsPostWithHttpInfo(String teamId, UsersInvitation usersInvitation) throws ApiException {
        okhttp3.Call localVarCall = teamsTeamIdMembershipsPostValidateBeforeCall(teamId, usersInvitation, null);
        Type localVarReturnType = new TypeToken<List<UserInvitationResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite users to a team (asynchronously)
     * 
     * @param teamId Id of team the user should be invited to. (required)
     * @param usersInvitation Information about user to invite and inviter id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invitation results are returned. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsPostAsync(String teamId, UsersInvitation usersInvitation, final ApiCallback<List<UserInvitationResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsTeamIdMembershipsPostValidateBeforeCall(teamId, usersInvitation, _callback);
        Type localVarReturnType = new TypeToken<List<UserInvitationResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsTeamIdMembershipsResendInviteMailPost
     * @param teamId Team ID of team with invited user. (required)
     * @param userInvitationInfo Information which user should be invited again. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsResendInviteMailPostCall(String teamId, UserInvitationInfo userInvitationInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userInvitationInfo;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/resendInviteMail"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsTeamIdMembershipsResendInviteMailPostValidateBeforeCall(String teamId, UserInvitationInfo userInvitationInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsResendInviteMailPost(Async)");
        }

        return teamsTeamIdMembershipsResendInviteMailPostCall(teamId, userInvitationInfo, _callback);

    }

    /**
     * Sends invite email again if an invite exists
     * 
     * @param teamId Team ID of team with invited user. (required)
     * @param userInvitationInfo Information which user should be invited again. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public String teamsTeamIdMembershipsResendInviteMailPost(String teamId, UserInvitationInfo userInvitationInfo) throws ApiException {
        ApiResponse<String> localVarResp = teamsTeamIdMembershipsResendInviteMailPostWithHttpInfo(teamId, userInvitationInfo);
        return localVarResp.getData();
    }

    /**
     * Sends invite email again if an invite exists
     * 
     * @param teamId Team ID of team with invited user. (required)
     * @param userInvitationInfo Information which user should be invited again. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> teamsTeamIdMembershipsResendInviteMailPostWithHttpInfo(String teamId, UserInvitationInfo userInvitationInfo) throws ApiException {
        okhttp3.Call localVarCall = teamsTeamIdMembershipsResendInviteMailPostValidateBeforeCall(teamId, userInvitationInfo, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends invite email again if an invite exists (asynchronously)
     * 
     * @param teamId Team ID of team with invited user. (required)
     * @param userInvitationInfo Information which user should be invited again. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsResendInviteMailPostAsync(String teamId, UserInvitationInfo userInvitationInfo, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsTeamIdMembershipsResendInviteMailPostValidateBeforeCall(teamId, userInvitationInfo, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsTeamIdMembershipsUserIdDelete
     * @param teamId ID of the team the user should be deleted from (required)
     * @param userId ID of the user that should be deleted (required)
     * @param requesterUserId User ID of user which will remove the other user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsUserIdDeleteCall(String teamId, String userId, String requesterUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{userId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterUserId", requesterUserId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsTeamIdMembershipsUserIdDeleteValidateBeforeCall(String teamId, String userId, String requesterUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsUserIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling teamsTeamIdMembershipsUserIdDelete(Async)");
        }

        return teamsTeamIdMembershipsUserIdDeleteCall(teamId, userId, requesterUserId, _callback);

    }

    /**
     * Removes a user or invitation from a team, and may delete the user if he is not in any team.
     * 
     * @param teamId ID of the team the user should be deleted from (required)
     * @param userId ID of the user that should be deleted (required)
     * @param requesterUserId User ID of user which will remove the other user. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public String teamsTeamIdMembershipsUserIdDelete(String teamId, String userId, String requesterUserId) throws ApiException {
        ApiResponse<String> localVarResp = teamsTeamIdMembershipsUserIdDeleteWithHttpInfo(teamId, userId, requesterUserId);
        return localVarResp.getData();
    }

    /**
     * Removes a user or invitation from a team, and may delete the user if he is not in any team.
     * 
     * @param teamId ID of the team the user should be deleted from (required)
     * @param userId ID of the user that should be deleted (required)
     * @param requesterUserId User ID of user which will remove the other user. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> teamsTeamIdMembershipsUserIdDeleteWithHttpInfo(String teamId, String userId, String requesterUserId) throws ApiException {
        okhttp3.Call localVarCall = teamsTeamIdMembershipsUserIdDeleteValidateBeforeCall(teamId, userId, requesterUserId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a user or invitation from a team, and may delete the user if he is not in any team. (asynchronously)
     * 
     * @param teamId ID of the team the user should be deleted from (required)
     * @param userId ID of the user that should be deleted (required)
     * @param requesterUserId User ID of user which will remove the other user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsUserIdDeleteAsync(String teamId, String userId, String requesterUserId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsTeamIdMembershipsUserIdDeleteValidateBeforeCall(teamId, userId, requesterUserId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsTeamIdMembershipsUserIdPut
     * @param teamId Team the user you want to update belongs to at the moment. (required)
     * @param userId User ID of user you want to update. (required)
     * @param requesterUserId User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights. (optional)
     * @param userMembership Information about role id and target team id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsUserIdPutCall(String teamId, String userId, String requesterUserId, UserMembership userMembership, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userMembership;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{userId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterUserId", requesterUserId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsTeamIdMembershipsUserIdPutValidateBeforeCall(String teamId, String userId, String requesterUserId, UserMembership userMembership, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsTeamIdMembershipsUserIdPut(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling teamsTeamIdMembershipsUserIdPut(Async)");
        }

        return teamsTeamIdMembershipsUserIdPutCall(teamId, userId, requesterUserId, userMembership, _callback);

    }

    /**
     * Update user&#39;s team membership.
     * Updates the user&#39;s team membership. You can move the user to another team within the subscription  and/or change the user&#39;s role.
     * @param teamId Team the user you want to update belongs to at the moment. (required)
     * @param userId User ID of user you want to update. (required)
     * @param requesterUserId User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights. (optional)
     * @param userMembership Information about role id and target team id. (optional)
     * @return UserInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserInfo teamsTeamIdMembershipsUserIdPut(String teamId, String userId, String requesterUserId, UserMembership userMembership) throws ApiException {
        ApiResponse<UserInfo> localVarResp = teamsTeamIdMembershipsUserIdPutWithHttpInfo(teamId, userId, requesterUserId, userMembership);
        return localVarResp.getData();
    }

    /**
     * Update user&#39;s team membership.
     * Updates the user&#39;s team membership. You can move the user to another team within the subscription  and/or change the user&#39;s role.
     * @param teamId Team the user you want to update belongs to at the moment. (required)
     * @param userId User ID of user you want to update. (required)
     * @param requesterUserId User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights. (optional)
     * @param userMembership Information about role id and target team id. (optional)
     * @return ApiResponse&lt;UserInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserInfo> teamsTeamIdMembershipsUserIdPutWithHttpInfo(String teamId, String userId, String requesterUserId, UserMembership userMembership) throws ApiException {
        okhttp3.Call localVarCall = teamsTeamIdMembershipsUserIdPutValidateBeforeCall(teamId, userId, requesterUserId, userMembership, null);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user&#39;s team membership. (asynchronously)
     * Updates the user&#39;s team membership. You can move the user to another team within the subscription  and/or change the user&#39;s role.
     * @param teamId Team the user you want to update belongs to at the moment. (required)
     * @param userId User ID of user you want to update. (required)
     * @param requesterUserId User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights. (optional)
     * @param userMembership Information about role id and target team id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters or authentifaction info could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You&#39;re not allowed to request the access all required entities. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsTeamIdMembershipsUserIdPutAsync(String teamId, String userId, String requesterUserId, UserMembership userMembership, final ApiCallback<UserInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsTeamIdMembershipsUserIdPutValidateBeforeCall(teamId, userId, requesterUserId, userMembership, _callback);
        Type localVarReturnType = new TypeToken<UserInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
