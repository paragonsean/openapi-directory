/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactAddressInfo;
import org.openapitools.client.model.UserDutyInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserInfo {
  public static final String SERIALIZED_NAME_COLOR_INDEX = "colorIndex";
  @SerializedName(SERIALIZED_NAME_COLOR_INDEX)
  private Integer colorIndex;

  public static final String SERIALIZED_NAME_CONTACT_ADDRESSES = "contactAddresses";
  @SerializedName(SERIALIZED_NAME_CONTACT_ADDRESSES)
  private List<ContactAddressInfo> contactAddresses;

  public static final String SERIALIZED_NAME_DUTY_INFO = "dutyInfo";
  @SerializedName(SERIALIZED_NAME_DUTY_INFO)
  private UserDutyInfo dutyInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DEACTIVATED = "isDeactivated";
  @SerializedName(SERIALIZED_NAME_IS_DEACTIVATED)
  private Boolean isDeactivated;

  public static final String SERIALIZED_NAME_IS_INVITE = "isInvite";
  @SerializedName(SERIALIZED_NAME_IS_INVITE)
  private Boolean isInvite;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ID = "roleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private String roleId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_USER_IMAGE_LAST_MODIFIED = "userImageLastModified";
  @SerializedName(SERIALIZED_NAME_USER_IMAGE_LAST_MODIFIED)
  private OffsetDateTime userImageLastModified;

  public UserInfo() {
  }

  public UserInfo colorIndex(Integer colorIndex) {
    this.colorIndex = colorIndex;
    return this;
  }

  /**
   * Get colorIndex
   * @return colorIndex
   */
  @javax.annotation.Nullable
  public Integer getColorIndex() {
    return colorIndex;
  }

  public void setColorIndex(Integer colorIndex) {
    this.colorIndex = colorIndex;
  }


  public UserInfo contactAddresses(List<ContactAddressInfo> contactAddresses) {
    this.contactAddresses = contactAddresses;
    return this;
  }

  public UserInfo addContactAddressesItem(ContactAddressInfo contactAddressesItem) {
    if (this.contactAddresses == null) {
      this.contactAddresses = new ArrayList<>();
    }
    this.contactAddresses.add(contactAddressesItem);
    return this;
  }

  /**
   * Get contactAddresses
   * @return contactAddresses
   */
  @javax.annotation.Nullable
  public List<ContactAddressInfo> getContactAddresses() {
    return contactAddresses;
  }

  public void setContactAddresses(List<ContactAddressInfo> contactAddresses) {
    this.contactAddresses = contactAddresses;
  }


  public UserInfo dutyInfo(UserDutyInfo dutyInfo) {
    this.dutyInfo = dutyInfo;
    return this;
  }

  /**
   * Get dutyInfo
   * @return dutyInfo
   */
  @javax.annotation.Nullable
  public UserDutyInfo getDutyInfo() {
    return dutyInfo;
  }

  public void setDutyInfo(UserDutyInfo dutyInfo) {
    this.dutyInfo = dutyInfo;
  }


  public UserInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserInfo isDeactivated(Boolean isDeactivated) {
    this.isDeactivated = isDeactivated;
    return this;
  }

  /**
   * Get isDeactivated
   * @return isDeactivated
   */
  @javax.annotation.Nullable
  public Boolean getIsDeactivated() {
    return isDeactivated;
  }

  public void setIsDeactivated(Boolean isDeactivated) {
    this.isDeactivated = isDeactivated;
  }


  public UserInfo isInvite(Boolean isInvite) {
    this.isInvite = isInvite;
    return this;
  }

  /**
   * Get isInvite
   * @return isInvite
   */
  @javax.annotation.Nullable
  public Boolean getIsInvite() {
    return isInvite;
  }

  public void setIsInvite(Boolean isInvite) {
    this.isInvite = isInvite;
  }


  public UserInfo mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * Get mail
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public UserInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserInfo roleId(String roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * Get roleId
   * @return roleId
   */
  @javax.annotation.Nullable
  public String getRoleId() {
    return roleId;
  }

  public void setRoleId(String roleId) {
    this.roleId = roleId;
  }


  public UserInfo subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public UserInfo timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public UserInfo userImageLastModified(OffsetDateTime userImageLastModified) {
    this.userImageLastModified = userImageLastModified;
    return this;
  }

  /**
   * Get userImageLastModified
   * @return userImageLastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUserImageLastModified() {
    return userImageLastModified;
  }

  public void setUserImageLastModified(OffsetDateTime userImageLastModified) {
    this.userImageLastModified = userImageLastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.colorIndex, userInfo.colorIndex) &&
        Objects.equals(this.contactAddresses, userInfo.contactAddresses) &&
        Objects.equals(this.dutyInfo, userInfo.dutyInfo) &&
        Objects.equals(this.id, userInfo.id) &&
        Objects.equals(this.isDeactivated, userInfo.isDeactivated) &&
        Objects.equals(this.isInvite, userInfo.isInvite) &&
        Objects.equals(this.mail, userInfo.mail) &&
        Objects.equals(this.name, userInfo.name) &&
        Objects.equals(this.roleId, userInfo.roleId) &&
        Objects.equals(this.subscriptionId, userInfo.subscriptionId) &&
        Objects.equals(this.timeZone, userInfo.timeZone) &&
        Objects.equals(this.userImageLastModified, userInfo.userImageLastModified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorIndex, contactAddresses, dutyInfo, id, isDeactivated, isInvite, mail, name, roleId, subscriptionId, timeZone, userImageLastModified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    sb.append("    colorIndex: ").append(toIndentedString(colorIndex)).append("\n");
    sb.append("    contactAddresses: ").append(toIndentedString(contactAddresses)).append("\n");
    sb.append("    dutyInfo: ").append(toIndentedString(dutyInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDeactivated: ").append(toIndentedString(isDeactivated)).append("\n");
    sb.append("    isInvite: ").append(toIndentedString(isInvite)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    userImageLastModified: ").append(toIndentedString(userImageLastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorIndex");
    openapiFields.add("contactAddresses");
    openapiFields.add("dutyInfo");
    openapiFields.add("id");
    openapiFields.add("isDeactivated");
    openapiFields.add("isInvite");
    openapiFields.add("mail");
    openapiFields.add("name");
    openapiFields.add("roleId");
    openapiFields.add("subscriptionId");
    openapiFields.add("timeZone");
    openapiFields.add("userImageLastModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserInfo is not found in the empty JSON string", UserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contactAddresses") != null && !jsonObj.get("contactAddresses").isJsonNull()) {
        JsonArray jsonArraycontactAddresses = jsonObj.getAsJsonArray("contactAddresses");
        if (jsonArraycontactAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contactAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contactAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("contactAddresses").toString()));
          }

          // validate the optional field `contactAddresses` (array)
          for (int i = 0; i < jsonArraycontactAddresses.size(); i++) {
            ContactAddressInfo.validateJsonElement(jsonArraycontactAddresses.get(i));
          };
        }
      }
      // validate the optional field `dutyInfo`
      if (jsonObj.get("dutyInfo") != null && !jsonObj.get("dutyInfo").isJsonNull()) {
        UserDutyInfo.validateJsonElement(jsonObj.get("dutyInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mail") != null && !jsonObj.get("mail").isJsonNull()) && !jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("roleId") != null && !jsonObj.get("roleId").isJsonNull()) && !jsonObj.get("roleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleId").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UserInfo>() {
           @Override
           public void write(JsonWriter out, UserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserInfo
   * @throws IOException if the JSON string is invalid with respect to UserInfo
   */
  public static UserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserInfo.class);
  }

  /**
   * Convert an instance of UserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

