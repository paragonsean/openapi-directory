/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DutySummaryInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DutySummaryInfo {
  public static final String SERIALIZED_NAME_DUTY_END = "dutyEnd";
  @SerializedName(SERIALIZED_NAME_DUTY_END)
  private OffsetDateTime dutyEnd;

  public static final String SERIALIZED_NAME_DUTY_ID = "dutyId";
  @SerializedName(SERIALIZED_NAME_DUTY_ID)
  private String dutyId;

  public static final String SERIALIZED_NAME_DUTY_START = "dutyStart";
  @SerializedName(SERIALIZED_NAME_DUTY_START)
  private OffsetDateTime dutyStart;

  public DutySummaryInfo() {
  }

  public DutySummaryInfo dutyEnd(OffsetDateTime dutyEnd) {
    this.dutyEnd = dutyEnd;
    return this;
  }

  /**
   * Get dutyEnd
   * @return dutyEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDutyEnd() {
    return dutyEnd;
  }

  public void setDutyEnd(OffsetDateTime dutyEnd) {
    this.dutyEnd = dutyEnd;
  }


  public DutySummaryInfo dutyId(String dutyId) {
    this.dutyId = dutyId;
    return this;
  }

  /**
   * Get dutyId
   * @return dutyId
   */
  @javax.annotation.Nullable
  public String getDutyId() {
    return dutyId;
  }

  public void setDutyId(String dutyId) {
    this.dutyId = dutyId;
  }


  public DutySummaryInfo dutyStart(OffsetDateTime dutyStart) {
    this.dutyStart = dutyStart;
    return this;
  }

  /**
   * Get dutyStart
   * @return dutyStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDutyStart() {
    return dutyStart;
  }

  public void setDutyStart(OffsetDateTime dutyStart) {
    this.dutyStart = dutyStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DutySummaryInfo dutySummaryInfo = (DutySummaryInfo) o;
    return Objects.equals(this.dutyEnd, dutySummaryInfo.dutyEnd) &&
        Objects.equals(this.dutyId, dutySummaryInfo.dutyId) &&
        Objects.equals(this.dutyStart, dutySummaryInfo.dutyStart);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dutyEnd, dutyId, dutyStart);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DutySummaryInfo {\n");
    sb.append("    dutyEnd: ").append(toIndentedString(dutyEnd)).append("\n");
    sb.append("    dutyId: ").append(toIndentedString(dutyId)).append("\n");
    sb.append("    dutyStart: ").append(toIndentedString(dutyStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dutyEnd");
    openapiFields.add("dutyId");
    openapiFields.add("dutyStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DutySummaryInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DutySummaryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DutySummaryInfo is not found in the empty JSON string", DutySummaryInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DutySummaryInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DutySummaryInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dutyId") != null && !jsonObj.get("dutyId").isJsonNull()) && !jsonObj.get("dutyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dutyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dutyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DutySummaryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DutySummaryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DutySummaryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DutySummaryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DutySummaryInfo>() {
           @Override
           public void write(JsonWriter out, DutySummaryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DutySummaryInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DutySummaryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DutySummaryInfo
   * @throws IOException if the JSON string is invalid with respect to DutySummaryInfo
   */
  public static DutySummaryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DutySummaryInfo.class);
  }

  /**
   * Convert an instance of DutySummaryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

