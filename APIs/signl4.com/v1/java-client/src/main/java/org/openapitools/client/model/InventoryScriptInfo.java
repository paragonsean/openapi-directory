/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScriptDescriptionData;
import org.openapitools.client.model.ScriptLocalizationDetail;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InventoryScriptInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryScriptInfo {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Object config = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private ScriptDescriptionData data;

  public static final String SERIALIZED_NAME_EVENT_PATTERN = "eventPattern";
  @SerializedName(SERIALIZED_NAME_EVENT_PATTERN)
  private Object eventPattern = null;

  public static final String SERIALIZED_NAME_SCRIPT_ID = "scriptId";
  @SerializedName(SERIALIZED_NAME_SCRIPT_ID)
  private String scriptId;

  public static final String SERIALIZED_NAME_SCRIPT_LOCALIZATION_DETAILS = "scriptLocalizationDetails";
  @SerializedName(SERIALIZED_NAME_SCRIPT_LOCALIZATION_DETAILS)
  private List<ScriptLocalizationDetail> scriptLocalizationDetails;

  public static final String SERIALIZED_NAME_SCRIPT_NAME = "scriptName";
  @SerializedName(SERIALIZED_NAME_SCRIPT_NAME)
  private String scriptName;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public InventoryScriptInfo() {
  }

  public InventoryScriptInfo config(Object config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public Object getConfig() {
    return config;
  }

  public void setConfig(Object config) {
    this.config = config;
  }


  public InventoryScriptInfo data(ScriptDescriptionData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public ScriptDescriptionData getData() {
    return data;
  }

  public void setData(ScriptDescriptionData data) {
    this.data = data;
  }


  public InventoryScriptInfo eventPattern(Object eventPattern) {
    this.eventPattern = eventPattern;
    return this;
  }

  /**
   * Get eventPattern
   * @return eventPattern
   */
  @javax.annotation.Nullable
  public Object getEventPattern() {
    return eventPattern;
  }

  public void setEventPattern(Object eventPattern) {
    this.eventPattern = eventPattern;
  }


  public InventoryScriptInfo scriptId(String scriptId) {
    this.scriptId = scriptId;
    return this;
  }

  /**
   * Get scriptId
   * @return scriptId
   */
  @javax.annotation.Nullable
  public String getScriptId() {
    return scriptId;
  }

  public void setScriptId(String scriptId) {
    this.scriptId = scriptId;
  }


  public InventoryScriptInfo scriptLocalizationDetails(List<ScriptLocalizationDetail> scriptLocalizationDetails) {
    this.scriptLocalizationDetails = scriptLocalizationDetails;
    return this;
  }

  public InventoryScriptInfo addScriptLocalizationDetailsItem(ScriptLocalizationDetail scriptLocalizationDetailsItem) {
    if (this.scriptLocalizationDetails == null) {
      this.scriptLocalizationDetails = new ArrayList<>();
    }
    this.scriptLocalizationDetails.add(scriptLocalizationDetailsItem);
    return this;
  }

  /**
   * Get scriptLocalizationDetails
   * @return scriptLocalizationDetails
   */
  @javax.annotation.Nullable
  public List<ScriptLocalizationDetail> getScriptLocalizationDetails() {
    return scriptLocalizationDetails;
  }

  public void setScriptLocalizationDetails(List<ScriptLocalizationDetail> scriptLocalizationDetails) {
    this.scriptLocalizationDetails = scriptLocalizationDetails;
  }


  public InventoryScriptInfo scriptName(String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  /**
   * Get scriptName
   * @return scriptName
   */
  @javax.annotation.Nullable
  public String getScriptName() {
    return scriptName;
  }

  public void setScriptName(String scriptName) {
    this.scriptName = scriptName;
  }


  public InventoryScriptInfo visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryScriptInfo inventoryScriptInfo = (InventoryScriptInfo) o;
    return Objects.equals(this.config, inventoryScriptInfo.config) &&
        Objects.equals(this.data, inventoryScriptInfo.data) &&
        Objects.equals(this.eventPattern, inventoryScriptInfo.eventPattern) &&
        Objects.equals(this.scriptId, inventoryScriptInfo.scriptId) &&
        Objects.equals(this.scriptLocalizationDetails, inventoryScriptInfo.scriptLocalizationDetails) &&
        Objects.equals(this.scriptName, inventoryScriptInfo.scriptName) &&
        Objects.equals(this.visibility, inventoryScriptInfo.visibility);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, data, eventPattern, scriptId, scriptLocalizationDetails, scriptName, visibility);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryScriptInfo {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    eventPattern: ").append(toIndentedString(eventPattern)).append("\n");
    sb.append("    scriptId: ").append(toIndentedString(scriptId)).append("\n");
    sb.append("    scriptLocalizationDetails: ").append(toIndentedString(scriptLocalizationDetails)).append("\n");
    sb.append("    scriptName: ").append(toIndentedString(scriptName)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("data");
    openapiFields.add("eventPattern");
    openapiFields.add("scriptId");
    openapiFields.add("scriptLocalizationDetails");
    openapiFields.add("scriptName");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryScriptInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryScriptInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryScriptInfo is not found in the empty JSON string", InventoryScriptInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryScriptInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryScriptInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        ScriptDescriptionData.validateJsonElement(jsonObj.get("data"));
      }
      if ((jsonObj.get("scriptId") != null && !jsonObj.get("scriptId").isJsonNull()) && !jsonObj.get("scriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptId").toString()));
      }
      if (jsonObj.get("scriptLocalizationDetails") != null && !jsonObj.get("scriptLocalizationDetails").isJsonNull()) {
        JsonArray jsonArrayscriptLocalizationDetails = jsonObj.getAsJsonArray("scriptLocalizationDetails");
        if (jsonArrayscriptLocalizationDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scriptLocalizationDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scriptLocalizationDetails` to be an array in the JSON string but got `%s`", jsonObj.get("scriptLocalizationDetails").toString()));
          }

          // validate the optional field `scriptLocalizationDetails` (array)
          for (int i = 0; i < jsonArrayscriptLocalizationDetails.size(); i++) {
            ScriptLocalizationDetail.validateJsonElement(jsonArrayscriptLocalizationDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("scriptName") != null && !jsonObj.get("scriptName").isJsonNull()) && !jsonObj.get("scriptName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptName").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryScriptInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryScriptInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryScriptInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryScriptInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryScriptInfo>() {
           @Override
           public void write(JsonWriter out, InventoryScriptInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryScriptInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryScriptInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryScriptInfo
   * @throws IOException if the JSON string is invalid with respect to InventoryScriptInfo
   */
  public static InventoryScriptInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryScriptInfo.class);
  }

  /**
   * Convert an instance of InventoryScriptInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

