/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CategoryInfo;
import org.openapitools.client.model.CategoryMetrics;
import org.openapitools.client.model.CategorySubscriptionInfo;
import org.openapitools.client.model.ErrorResponseContent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoriesImagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the alert categories. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No categories were found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesImagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesImagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return categoriesImagesGetCall(_callback);

    }

    /**
     * Gets the names of all alert category images.  You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the alert categories. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No categories were found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> categoriesImagesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = categoriesImagesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the names of all alert category images.  You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the alert categories. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No categories were found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> categoriesImagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesImagesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the names of all alert category images.  You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the alert categories. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request was canceled. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No categories were found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesImagesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesImagesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdDelete
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the delete operation was successful </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdDeleteCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdDeleteValidateBeforeCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdDelete(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdDelete(Async)");
        }

        return categoriesTeamIdCategoryIdDeleteCall(teamId, categoryId, _callback);

    }

    /**
     * Delete an existing category
     * Sample Request:                    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the delete operation was successful </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesTeamIdCategoryIdDelete(String teamId, String categoryId) throws ApiException {
        categoriesTeamIdCategoryIdDeleteWithHttpInfo(teamId, categoryId);
    }

    /**
     * Delete an existing category
     * Sample Request:                    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the delete operation was successful </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesTeamIdCategoryIdDeleteWithHttpInfo(String teamId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdDeleteValidateBeforeCall(teamId, categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing category (asynchronously)
     * Sample Request:                    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the delete operation was successful </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdDeleteAsync(String teamId, String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdDeleteValidateBeforeCall(teamId, categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdGet
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdGetCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdGetValidateBeforeCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdGet(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdGet(Async)");
        }

        return categoriesTeamIdCategoryIdGetCall(teamId, categoryId, _callback);

    }

    /**
     * Get a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @return CategoryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public CategoryInfo categoriesTeamIdCategoryIdGet(String teamId, String categoryId) throws ApiException {
        ApiResponse<CategoryInfo> localVarResp = categoriesTeamIdCategoryIdGetWithHttpInfo(teamId, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @return ApiResponse&lt;CategoryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryInfo> categoriesTeamIdCategoryIdGetWithHttpInfo(String teamId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdGetValidateBeforeCall(teamId, categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific category (asynchronously)
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdGetAsync(String teamId, String categoryId, final ApiCallback<CategoryInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdGetValidateBeforeCall(teamId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdMetricsGet
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdMetricsGetCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}/metrics"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdMetricsGetValidateBeforeCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdMetricsGet(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdMetricsGet(Async)");
        }

        return categoriesTeamIdCategoryIdMetricsGetCall(teamId, categoryId, _callback);

    }

    /**
     * Get metrics for a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @return CategoryMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public CategoryMetrics categoriesTeamIdCategoryIdMetricsGet(String teamId, String categoryId) throws ApiException {
        ApiResponse<CategoryMetrics> localVarResp = categoriesTeamIdCategoryIdMetricsGetWithHttpInfo(teamId, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get metrics for a specific category
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @return ApiResponse&lt;CategoryMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryMetrics> categoriesTeamIdCategoryIdMetricsGetWithHttpInfo(String teamId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdMetricsGetValidateBeforeCall(teamId, categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for a specific category (asynchronously)
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId ID of the category to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdMetricsGetAsync(String teamId, String categoryId, final ApiCallback<CategoryMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdMetricsGetValidateBeforeCall(teamId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdPut
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId  (required)
     * @param categoryInfo Category to be updated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdPutCall(String teamId, String categoryId, CategoryInfo categoryInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryInfo;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdPutValidateBeforeCall(String teamId, String categoryId, CategoryInfo categoryInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdPut(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdPut(Async)");
        }

        return categoriesTeamIdCategoryIdPutCall(teamId, categoryId, categoryInfo, _callback);

    }

    /**
     * Update an existing category
     * Sample Request:                    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e      {          \&quot;name\&quot;: \&quot;Water-Updated\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;All\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              },              {                  \&quot;value\&quot;: \&quot;Wet\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId  (required)
     * @param categoryInfo Category to be updated (optional)
     * @return CategoryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public CategoryInfo categoriesTeamIdCategoryIdPut(String teamId, String categoryId, CategoryInfo categoryInfo) throws ApiException {
        ApiResponse<CategoryInfo> localVarResp = categoriesTeamIdCategoryIdPutWithHttpInfo(teamId, categoryId, categoryInfo);
        return localVarResp.getData();
    }

    /**
     * Update an existing category
     * Sample Request:                    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e      {          \&quot;name\&quot;: \&quot;Water-Updated\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;All\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              },              {                  \&quot;value\&quot;: \&quot;Wet\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId  (required)
     * @param categoryInfo Category to be updated (optional)
     * @return ApiResponse&lt;CategoryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryInfo> categoriesTeamIdCategoryIdPutWithHttpInfo(String teamId, String categoryId, CategoryInfo categoryInfo) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdPutValidateBeforeCall(teamId, categoryId, categoryInfo, null);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing category (asynchronously)
     * Sample Request:                    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e      {          \&quot;name\&quot;: \&quot;Water-Updated\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;All\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              },              {                  \&quot;value\&quot;: \&quot;Wet\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId  (required)
     * @param categoryInfo Category to be updated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdPutAsync(String teamId, String categoryId, CategoryInfo categoryInfo, final ApiCallback<CategoryInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdPutValidateBeforeCall(teamId, categoryId, categoryInfo, _callback);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdSubscriptionsGet
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to get subscriptions for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsGetCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}/subscriptions"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsGetValidateBeforeCall(String teamId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdSubscriptionsGet(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdSubscriptionsGet(Async)");
        }

        return categoriesTeamIdCategoryIdSubscriptionsGetCall(teamId, categoryId, _callback);

    }

    /**
     * Get category subscriptions
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to get subscriptions for (required)
     * @return List&lt;CategorySubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public List<CategorySubscriptionInfo> categoriesTeamIdCategoryIdSubscriptionsGet(String teamId, String categoryId) throws ApiException {
        ApiResponse<List<CategorySubscriptionInfo>> localVarResp = categoriesTeamIdCategoryIdSubscriptionsGetWithHttpInfo(teamId, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get category subscriptions
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to get subscriptions for (required)
     * @return ApiResponse&lt;List&lt;CategorySubscriptionInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategorySubscriptionInfo>> categoriesTeamIdCategoryIdSubscriptionsGetWithHttpInfo(String teamId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdSubscriptionsGetValidateBeforeCall(teamId, categoryId, null);
        Type localVarReturnType = new TypeToken<List<CategorySubscriptionInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get category subscriptions (asynchronously)
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to get subscriptions for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsGetAsync(String teamId, String categoryId, final ApiCallback<List<CategorySubscriptionInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdSubscriptionsGetValidateBeforeCall(teamId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<List<CategorySubscriptionInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdCategoryIdSubscriptionsPost
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to be updated (required)
     * @param categorySubscriptionInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsPostCall(String teamId, String categoryId, List<CategorySubscriptionInfo> categorySubscriptionInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categorySubscriptionInfo;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/{categoryId}/subscriptions"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsPostValidateBeforeCall(String teamId, String categoryId, List<CategorySubscriptionInfo> categorySubscriptionInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdCategoryIdSubscriptionsPost(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesTeamIdCategoryIdSubscriptionsPost(Async)");
        }

        return categoriesTeamIdCategoryIdSubscriptionsPostCall(teamId, categoryId, categorySubscriptionInfo, _callback);

    }

    /**
     * Set category subscriptions
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to be updated (required)
     * @param categorySubscriptionInfo  (optional)
     * @return List&lt;CategorySubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public List<CategorySubscriptionInfo> categoriesTeamIdCategoryIdSubscriptionsPost(String teamId, String categoryId, List<CategorySubscriptionInfo> categorySubscriptionInfo) throws ApiException {
        ApiResponse<List<CategorySubscriptionInfo>> localVarResp = categoriesTeamIdCategoryIdSubscriptionsPostWithHttpInfo(teamId, categoryId, categorySubscriptionInfo);
        return localVarResp.getData();
    }

    /**
     * Set category subscriptions
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to be updated (required)
     * @param categorySubscriptionInfo  (optional)
     * @return ApiResponse&lt;List&lt;CategorySubscriptionInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategorySubscriptionInfo>> categoriesTeamIdCategoryIdSubscriptionsPostWithHttpInfo(String teamId, String categoryId, List<CategorySubscriptionInfo> categorySubscriptionInfo) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdSubscriptionsPostValidateBeforeCall(teamId, categoryId, categorySubscriptionInfo, null);
        Type localVarReturnType = new TypeToken<List<CategorySubscriptionInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set category subscriptions (asynchronously)
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryId Category to be updated (required)
     * @param categorySubscriptionInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated category subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdCategoryIdSubscriptionsPostAsync(String teamId, String categoryId, List<CategorySubscriptionInfo> categorySubscriptionInfo, final ApiCallback<List<CategorySubscriptionInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdCategoryIdSubscriptionsPostValidateBeforeCall(teamId, categoryId, categorySubscriptionInfo, _callback);
        Type localVarReturnType = new TypeToken<List<CategorySubscriptionInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdGet
     * @param teamId ID of the team the categories belong to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category infos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdGet(Async)");
        }

        return categoriesTeamIdGetCall(teamId, _callback);

    }

    /**
     * Get all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
     * @param teamId ID of the team the categories belong to (required)
     * @return List&lt;CategoryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category infos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public List<CategoryInfo> categoriesTeamIdGet(String teamId) throws ApiException {
        ApiResponse<List<CategoryInfo>> localVarResp = categoriesTeamIdGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
     * @param teamId ID of the team the categories belong to (required)
     * @return ApiResponse&lt;List&lt;CategoryInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category infos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategoryInfo>> categoriesTeamIdGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<List<CategoryInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all categories (asynchronously)
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
     * @param teamId ID of the team the categories belong to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the category infos </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdGetAsync(String teamId, final ApiCallback<List<CategoryInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<List<CategoryInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdMetricsGet
     * @param teamId ID of the team the categories belongs to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdMetricsGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{teamId}/metrics"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdMetricsGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdMetricsGet(Async)");
        }

        return categoriesTeamIdMetricsGetCall(teamId, _callback);

    }

    /**
     * Get metrics for all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
     * @param teamId ID of the team the categories belongs to (required)
     * @return List&lt;CategoryMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public List<CategoryMetrics> categoriesTeamIdMetricsGet(String teamId) throws ApiException {
        ApiResponse<List<CategoryMetrics>> localVarResp = categoriesTeamIdMetricsGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get metrics for all categories
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
     * @param teamId ID of the team the categories belongs to (required)
     * @return ApiResponse&lt;List&lt;CategoryMetrics&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategoryMetrics>> categoriesTeamIdMetricsGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdMetricsGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<List<CategoryMetrics>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for all categories (asynchronously)
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
     * @param teamId ID of the team the categories belongs to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of category metrics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdMetricsGetAsync(String teamId, final ApiCallback<List<CategoryMetrics>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdMetricsGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<List<CategoryMetrics>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesTeamIdPost
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryInfo Category to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdPostCall(String teamId, CategoryInfo categoryInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryInfo;

        // create path and map variables
        String localVarPath = "/categories/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesTeamIdPostValidateBeforeCall(String teamId, CategoryInfo categoryInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling categoriesTeamIdPost(Async)");
        }

        return categoriesTeamIdPostCall(teamId, categoryInfo, _callback);

    }

    /**
     * Create a new category
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7      {          \&quot;name\&quot;: \&quot;Water\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;Any\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryInfo Category to be created (optional)
     * @return CategoryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public CategoryInfo categoriesTeamIdPost(String teamId, CategoryInfo categoryInfo) throws ApiException {
        ApiResponse<CategoryInfo> localVarResp = categoriesTeamIdPostWithHttpInfo(teamId, categoryInfo);
        return localVarResp.getData();
    }

    /**
     * Create a new category
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7      {          \&quot;name\&quot;: \&quot;Water\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;Any\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryInfo Category to be created (optional)
     * @return ApiResponse&lt;CategoryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryInfo> categoriesTeamIdPostWithHttpInfo(String teamId, CategoryInfo categoryInfo) throws ApiException {
        okhttp3.Call localVarCall = categoriesTeamIdPostValidateBeforeCall(teamId, categoryInfo, null);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new category (asynchronously)
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7      {          \&quot;name\&quot;: \&quot;Water\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;Any\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              }          ]      }
     * @param teamId ID of the team the category belongs to (required)
     * @param categoryInfo Category to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the input is not valid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you have no permission to access this resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> If any server side errors occur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesTeamIdPostAsync(String teamId, CategoryInfo categoryInfo, final ApiCallback<CategoryInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesTeamIdPostValidateBeforeCall(teamId, categoryInfo, _callback);
        Type localVarReturnType = new TypeToken<CategoryInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
