/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.WebhookBaseInfo;
import org.openapitools.client.model.WebhookInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getWebhookById
     * @param webhookId Id of the outbound webhook to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about the requested webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webhook was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookByIdCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookByIdValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhookById(Async)");
        }

        return getWebhookByIdCall(webhookId, _callback);

    }

    /**
     * Get Webhook by Id
     * Returns information of the webhook specified by the passed id.
     * @param webhookId Id of the outbound webhook to be retrieved. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about the requested webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webhook was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public String getWebhookById(String webhookId) throws ApiException {
        ApiResponse<String> localVarResp = getWebhookByIdWithHttpInfo(webhookId);
        return localVarResp.getData();
    }

    /**
     * Get Webhook by Id
     * Returns information of the webhook specified by the passed id.
     * @param webhookId Id of the outbound webhook to be retrieved. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about the requested webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webhook was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getWebhookByIdWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookByIdValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Webhook by Id (asynchronously)
     * Returns information of the webhook specified by the passed id.
     * @param webhookId Id of the outbound webhook to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about the requested webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webhook was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookByIdAsync(String webhookId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookByIdValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksGet
     * @param teamId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about all outbound webhooks in the subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription does not have any outbound webhooks. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        return webhooksGetCall(teamId, _callback);

    }

    /**
     * Get Webhooks
     * Returns a collection of defined outbound webhooks in the system.
     * @param teamId  (optional)
     * @return List&lt;WebhookInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about all outbound webhooks in the subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription does not have any outbound webhooks. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public List<WebhookInfo> webhooksGet(String teamId) throws ApiException {
        ApiResponse<List<WebhookInfo>> localVarResp = webhooksGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get Webhooks
     * Returns a collection of defined outbound webhooks in the system.
     * @param teamId  (optional)
     * @return ApiResponse&lt;List&lt;WebhookInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about all outbound webhooks in the subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription does not have any outbound webhooks. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebhookInfo>> webhooksGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<List<WebhookInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Webhooks (asynchronously)
     * Returns a collection of defined outbound webhooks in the system.
     * @param teamId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request was successful and response body contains information about all outbound webhooks in the subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The subscription does not have any outbound webhooks. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksGetAsync(String teamId, final ApiCallback<List<WebhookInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<List<WebhookInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksPost
     * @param webhookBaseInfo Json object that contains the external URL of the webhook. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Action was successful and response contains the id of the newly created webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either the webhook object or a necessary property was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksPostCall(WebhookBaseInfo webhookBaseInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookBaseInfo;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksPostValidateBeforeCall(WebhookBaseInfo webhookBaseInfo, final ApiCallback _callback) throws ApiException {
        return webhooksPostCall(webhookBaseInfo, _callback);

    }

    /**
     * Create Webhook
     * Creates a new outbound webhook that will be notified when certain events occur.
     * @param webhookBaseInfo Json object that contains the external URL of the webhook. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Action was successful and response contains the id of the newly created webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either the webhook object or a necessary property was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public String webhooksPost(WebhookBaseInfo webhookBaseInfo) throws ApiException {
        ApiResponse<String> localVarResp = webhooksPostWithHttpInfo(webhookBaseInfo);
        return localVarResp.getData();
    }

    /**
     * Create Webhook
     * Creates a new outbound webhook that will be notified when certain events occur.
     * @param webhookBaseInfo Json object that contains the external URL of the webhook. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Action was successful and response contains the id of the newly created webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either the webhook object or a necessary property was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> webhooksPostWithHttpInfo(WebhookBaseInfo webhookBaseInfo) throws ApiException {
        okhttp3.Call localVarCall = webhooksPostValidateBeforeCall(webhookBaseInfo, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Webhook (asynchronously)
     * Creates a new outbound webhook that will be notified when certain events occur.
     * @param webhookBaseInfo Json object that contains the external URL of the webhook. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Action was successful and response contains the id of the newly created webhook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Either the webhook object or a necessary property was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksPostAsync(WebhookBaseInfo webhookBaseInfo, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksPostValidateBeforeCall(webhookBaseInfo, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksWebhookIdDelete
     * @param webhookId Id of the outbound webhook that will be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdDeleteCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksWebhookIdDeleteValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhooksWebhookIdDelete(Async)");
        }

        return webhooksWebhookIdDeleteCall(webhookId, _callback);

    }

    /**
     * Delete Webhook by Id
     * Deletes the specified webhook so that it will no longer be notified.
     * @param webhookId Id of the outbound webhook that will be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public void webhooksWebhookIdDelete(String webhookId) throws ApiException {
        webhooksWebhookIdDeleteWithHttpInfo(webhookId);
    }

    /**
     * Delete Webhook by Id
     * Deletes the specified webhook so that it will no longer be notified.
     * @param webhookId Id of the outbound webhook that will be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> webhooksWebhookIdDeleteWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = webhooksWebhookIdDeleteValidateBeforeCall(webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Webhook by Id (asynchronously)
     * Deletes the specified webhook so that it will no longer be notified.
     * @param webhookId Id of the outbound webhook that will be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The passed webhook id was invalid or empty. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdDeleteAsync(String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksWebhookIdDeleteValidateBeforeCall(webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksWebhookIdDisablePost
     * @param webhookId Webhook ID for webhook which should be disabled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable was successful and response body contains the webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdDisablePostCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/disable"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksWebhookIdDisablePostValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhooksWebhookIdDisablePost(Async)");
        }

        return webhooksWebhookIdDisablePostCall(webhookId, _callback);

    }

    /**
     * Ability to enable a webHook.
     * 
     * @param webhookId Webhook ID for webhook which should be disabled. (required)
     * @return WebhookInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable was successful and response body contains the webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public WebhookInfo webhooksWebhookIdDisablePost(String webhookId) throws ApiException {
        ApiResponse<WebhookInfo> localVarResp = webhooksWebhookIdDisablePostWithHttpInfo(webhookId);
        return localVarResp.getData();
    }

    /**
     * Ability to enable a webHook.
     * 
     * @param webhookId Webhook ID for webhook which should be disabled. (required)
     * @return ApiResponse&lt;WebhookInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable was successful and response body contains the webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookInfo> webhooksWebhookIdDisablePostWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = webhooksWebhookIdDisablePostValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ability to enable a webHook. (asynchronously)
     * 
     * @param webhookId Webhook ID for webhook which should be disabled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable was successful and response body contains the webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdDisablePostAsync(String webhookId, final ApiCallback<WebhookInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksWebhookIdDisablePostValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksWebhookIdEnablePost
     * @param webhookId Webhook ID for webhook which should be enabled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdEnablePostCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/enable"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksWebhookIdEnablePostValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhooksWebhookIdEnablePost(Async)");
        }

        return webhooksWebhookIdEnablePostCall(webhookId, _callback);

    }

    /**
     * Ability to disable a webHook.
     * 
     * @param webhookId Webhook ID for webhook which should be enabled. (required)
     * @return WebhookInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookInfo webhooksWebhookIdEnablePost(String webhookId) throws ApiException {
        ApiResponse<WebhookInfo> localVarResp = webhooksWebhookIdEnablePostWithHttpInfo(webhookId);
        return localVarResp.getData();
    }

    /**
     * Ability to disable a webHook.
     * 
     * @param webhookId Webhook ID for webhook which should be enabled. (required)
     * @return ApiResponse&lt;WebhookInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookInfo> webhooksWebhookIdEnablePostWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = webhooksWebhookIdEnablePostValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ability to disable a webHook. (asynchronously)
     * 
     * @param webhookId Webhook ID for webhook which should be enabled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdEnablePostAsync(String webhookId, final ApiCallback<WebhookInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksWebhookIdEnablePostValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhooksWebhookIdPut
     * @param webhookId Id of the outbound webhook to be updated. (required)
     * @param webhookBaseInfo Json object containing the updated URL of the webhook. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful and response body contains the updated webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdPutCall(String webhookId, WebhookBaseInfo webhookBaseInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookBaseInfo;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhooksWebhookIdPutValidateBeforeCall(String webhookId, WebhookBaseInfo webhookBaseInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling webhooksWebhookIdPut(Async)");
        }

        return webhooksWebhookIdPutCall(webhookId, webhookBaseInfo, _callback);

    }

    /**
     * Update Webhook by Id
     * Updates the specified webhook.
     * @param webhookId Id of the outbound webhook to be updated. (required)
     * @param webhookBaseInfo Json object containing the updated URL of the webhook. (optional)
     * @return WebhookInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful and response body contains the updated webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public WebhookInfo webhooksWebhookIdPut(String webhookId, WebhookBaseInfo webhookBaseInfo) throws ApiException {
        ApiResponse<WebhookInfo> localVarResp = webhooksWebhookIdPutWithHttpInfo(webhookId, webhookBaseInfo);
        return localVarResp.getData();
    }

    /**
     * Update Webhook by Id
     * Updates the specified webhook.
     * @param webhookId Id of the outbound webhook to be updated. (required)
     * @param webhookBaseInfo Json object containing the updated URL of the webhook. (optional)
     * @return ApiResponse&lt;WebhookInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful and response body contains the updated webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookInfo> webhooksWebhookIdPutWithHttpInfo(String webhookId, WebhookBaseInfo webhookBaseInfo) throws ApiException {
        okhttp3.Call localVarCall = webhooksWebhookIdPutValidateBeforeCall(webhookId, webhookBaseInfo, null);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Webhook by Id (asynchronously)
     * Updates the specified webhook.
     * @param webhookId Id of the outbound webhook to be updated. (required)
     * @param webhookBaseInfo Json object containing the updated URL of the webhook. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update was successful and response body contains the updated webhook details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or null. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Webhook with specified id was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal has occured. The response body may contain more information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhooksWebhookIdPutAsync(String webhookId, WebhookBaseInfo webhookBaseInfo, final ApiCallback<WebhookInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhooksWebhookIdPutValidateBeforeCall(webhookId, webhookBaseInfo, _callback);
        Type localVarReturnType = new TypeToken<WebhookInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
