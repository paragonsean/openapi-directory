/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryAugmentation;
import org.openapitools.client.model.CategoryInfoOptions;
import org.openapitools.client.model.KeywordMatchingType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CategoryInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategoryInfo {
  public static final String SERIALIZED_NAME_AUGMENTATIONS = "augmentations";
  @SerializedName(SERIALIZED_NAME_AUGMENTATIONS)
  private List<CategoryAugmentation> augmentations;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_NAME = "imageName";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_KEYWORD_MATCHING = "keywordMatching";
  @SerializedName(SERIALIZED_NAME_KEYWORD_MATCHING)
  private KeywordMatchingType keywordMatching;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords;

  public static final String SERIALIZED_NAME_LAST_MATCH = "lastMatch";
  @SerializedName(SERIALIZED_NAME_LAST_MATCH)
  private OffsetDateTime lastMatch;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private CategoryInfoOptions options;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public CategoryInfo() {
  }

  public CategoryInfo(
     Boolean isDefault
  ) {
    this();
    this.isDefault = isDefault;
  }

  public CategoryInfo augmentations(List<CategoryAugmentation> augmentations) {
    this.augmentations = augmentations;
    return this;
  }

  public CategoryInfo addAugmentationsItem(CategoryAugmentation augmentationsItem) {
    if (this.augmentations == null) {
      this.augmentations = new ArrayList<>();
    }
    this.augmentations.add(augmentationsItem);
    return this;
  }

  /**
   * Get augmentations
   * @return augmentations
   */
  @javax.annotation.Nullable
  public List<CategoryAugmentation> getAugmentations() {
    return augmentations;
  }

  public void setAugmentations(List<CategoryAugmentation> augmentations) {
    this.augmentations = augmentations;
  }


  public CategoryInfo color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public CategoryInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CategoryInfo imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Get imageName
   * @return imageName
   */
  @javax.annotation.Nullable
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }



  public CategoryInfo keywordMatching(KeywordMatchingType keywordMatching) {
    this.keywordMatching = keywordMatching;
    return this;
  }

  /**
   * Get keywordMatching
   * @return keywordMatching
   */
  @javax.annotation.Nullable
  public KeywordMatchingType getKeywordMatching() {
    return keywordMatching;
  }

  public void setKeywordMatching(KeywordMatchingType keywordMatching) {
    this.keywordMatching = keywordMatching;
  }


  public CategoryInfo keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public CategoryInfo addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public CategoryInfo lastMatch(OffsetDateTime lastMatch) {
    this.lastMatch = lastMatch;
    return this;
  }

  /**
   * Get lastMatch
   * @return lastMatch
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastMatch() {
    return lastMatch;
  }

  public void setLastMatch(OffsetDateTime lastMatch) {
    this.lastMatch = lastMatch;
  }


  public CategoryInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CategoryInfo options(CategoryInfoOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public CategoryInfoOptions getOptions() {
    return options;
  }

  public void setOptions(CategoryInfoOptions options) {
    this.options = options;
  }


  public CategoryInfo order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryInfo categoryInfo = (CategoryInfo) o;
    return Objects.equals(this.augmentations, categoryInfo.augmentations) &&
        Objects.equals(this.color, categoryInfo.color) &&
        Objects.equals(this.id, categoryInfo.id) &&
        Objects.equals(this.imageName, categoryInfo.imageName) &&
        Objects.equals(this.isDefault, categoryInfo.isDefault) &&
        Objects.equals(this.keywordMatching, categoryInfo.keywordMatching) &&
        Objects.equals(this.keywords, categoryInfo.keywords) &&
        Objects.equals(this.lastMatch, categoryInfo.lastMatch) &&
        Objects.equals(this.name, categoryInfo.name) &&
        Objects.equals(this.options, categoryInfo.options) &&
        Objects.equals(this.order, categoryInfo.order);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(augmentations, color, id, imageName, isDefault, keywordMatching, keywords, lastMatch, name, options, order);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryInfo {\n");
    sb.append("    augmentations: ").append(toIndentedString(augmentations)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    keywordMatching: ").append(toIndentedString(keywordMatching)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    lastMatch: ").append(toIndentedString(lastMatch)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("augmentations");
    openapiFields.add("color");
    openapiFields.add("id");
    openapiFields.add("imageName");
    openapiFields.add("isDefault");
    openapiFields.add("keywordMatching");
    openapiFields.add("keywords");
    openapiFields.add("lastMatch");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryInfo is not found in the empty JSON string", CategoryInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("augmentations") != null && !jsonObj.get("augmentations").isJsonNull()) {
        JsonArray jsonArrayaugmentations = jsonObj.getAsJsonArray("augmentations");
        if (jsonArrayaugmentations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("augmentations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `augmentations` to be an array in the JSON string but got `%s`", jsonObj.get("augmentations").toString()));
          }

          // validate the optional field `augmentations` (array)
          for (int i = 0; i < jsonArrayaugmentations.size(); i++) {
            CategoryAugmentation.validateJsonElement(jsonArrayaugmentations.get(i));
          };
        }
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("imageName") != null && !jsonObj.get("imageName").isJsonNull()) && !jsonObj.get("imageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageName").toString()));
      }
      // validate the optional field `keywordMatching`
      if (jsonObj.get("keywordMatching") != null && !jsonObj.get("keywordMatching").isJsonNull()) {
        KeywordMatchingType.validateJsonElement(jsonObj.get("keywordMatching"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        CategoryInfoOptions.validateJsonElement(jsonObj.get("options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryInfo>() {
           @Override
           public void write(JsonWriter out, CategoryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryInfo
   * @throws IOException if the JSON string is invalid with respect to CategoryInfo
   */
  public static CategoryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryInfo.class);
  }

  /**
   * Convert an instance of CategoryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

