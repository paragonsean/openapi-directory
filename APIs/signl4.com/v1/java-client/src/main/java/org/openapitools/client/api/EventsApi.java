/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.EventFilter;
import org.openapitools.client.model.EventParameterInfo;
import org.openapitools.client.model.OverviewEvent;
import org.openapitools.client.model.OverviewEventPagedResultsPublic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsEventIdOverviewGet
     * @param eventId Id of event to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns overview event with specific id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event with specified id could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventIdOverviewGetCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}/overview"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsEventIdOverviewGetValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdOverviewGet(Async)");
        }

        return eventsEventIdOverviewGetCall(eventId, _callback);

    }

    /**
     * Get overview event
     * Get overview event by id.
     * @param eventId Id of event to get. (required)
     * @return OverviewEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns overview event with specific id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event with specified id could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public OverviewEvent eventsEventIdOverviewGet(String eventId) throws ApiException {
        ApiResponse<OverviewEvent> localVarResp = eventsEventIdOverviewGetWithHttpInfo(eventId);
        return localVarResp.getData();
    }

    /**
     * Get overview event
     * Get overview event by id.
     * @param eventId Id of event to get. (required)
     * @return ApiResponse&lt;OverviewEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns overview event with specific id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event with specified id could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewEvent> eventsEventIdOverviewGetWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = eventsEventIdOverviewGetValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<OverviewEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get overview event (asynchronously)
     * Get overview event by id.
     * @param eventId Id of event to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns overview event with specific id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event with specified id could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventIdOverviewGetAsync(String eventId, final ApiCallback<OverviewEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsEventIdOverviewGetValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<OverviewEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsEventIdParametersGet
     * @param eventId Event Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventIdParametersGetCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}/parameters"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsEventIdParametersGetValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsEventIdParametersGet(Async)");
        }

        return eventsEventIdParametersGetCall(eventId, _callback);

    }

    /**
     * Get event parameters
     * Get parameters of an event by id.
     * @param eventId Event Id of the requested Alert. (required)
     * @return List&lt;EventParameterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public List<EventParameterInfo> eventsEventIdParametersGet(String eventId) throws ApiException {
        ApiResponse<List<EventParameterInfo>> localVarResp = eventsEventIdParametersGetWithHttpInfo(eventId);
        return localVarResp.getData();
    }

    /**
     * Get event parameters
     * Get parameters of an event by id.
     * @param eventId Event Id of the requested Alert. (required)
     * @return ApiResponse&lt;List&lt;EventParameterInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventParameterInfo>> eventsEventIdParametersGetWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = eventsEventIdParametersGetValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<List<EventParameterInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get event parameters (asynchronously)
     * Get parameters of an event by id.
     * @param eventId Event Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventIdParametersGetAsync(String eventId, final ApiCallback<List<EventParameterInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsEventIdParametersGetValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<List<EventParameterInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsPagedPost
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                   Number of alerts could be less if filtered but at least 1. (optional)
     * @param eventFilter The filter defines which alerts are supposed to be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns paged result with found events and continuation token, if database holds more events. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No event could be found (with passed filter) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsPagedPostCall(Integer maxResults, EventFilter eventFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventFilter;

        // create path and map variables
        String localVarPath = "/events/paged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsPagedPostValidateBeforeCall(Integer maxResults, EventFilter eventFilter, final ApiCallback _callback) throws ApiException {
        return eventsPagedPostCall(maxResults, eventFilter, _callback);

    }

    /**
     * Get overview event paged.
     * Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                   Number of alerts could be less if filtered but at least 1. (optional)
     * @param eventFilter The filter defines which alerts are supposed to be retrieved. (optional)
     * @return OverviewEventPagedResultsPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns paged result with found events and continuation token, if database holds more events. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No event could be found (with passed filter) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public OverviewEventPagedResultsPublic eventsPagedPost(Integer maxResults, EventFilter eventFilter) throws ApiException {
        ApiResponse<OverviewEventPagedResultsPublic> localVarResp = eventsPagedPostWithHttpInfo(maxResults, eventFilter);
        return localVarResp.getData();
    }

    /**
     * Get overview event paged.
     * Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                   Number of alerts could be less if filtered but at least 1. (optional)
     * @param eventFilter The filter defines which alerts are supposed to be retrieved. (optional)
     * @return ApiResponse&lt;OverviewEventPagedResultsPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns paged result with found events and continuation token, if database holds more events. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No event could be found (with passed filter) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewEventPagedResultsPublic> eventsPagedPostWithHttpInfo(Integer maxResults, EventFilter eventFilter) throws ApiException {
        okhttp3.Call localVarCall = eventsPagedPostValidateBeforeCall(maxResults, eventFilter, null);
        Type localVarReturnType = new TypeToken<OverviewEventPagedResultsPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get overview event paged. (asynchronously)
     * Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                   Number of alerts could be less if filtered but at least 1. (optional)
     * @param eventFilter The filter defines which alerts are supposed to be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns paged result with found events and continuation token, if database holds more events. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No event could be found (with passed filter) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsPagedPostAsync(Integer maxResults, EventFilter eventFilter, final ApiCallback<OverviewEventPagedResultsPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsPagedPostValidateBeforeCall(maxResults, eventFilter, _callback);
        Type localVarReturnType = new TypeToken<OverviewEventPagedResultsPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
