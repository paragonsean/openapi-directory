/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlertHistoryInfoEntry;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlertHistoryInfoDetailed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertHistoryInfoDetailed {
  public static final String SERIALIZED_NAME_ACKNOWLEDGED = "acknowledged";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED)
  private OffsetDateTime acknowledged;

  public static final String SERIALIZED_NAME_ACKNOWLEDGEDGEMENTS = "acknowledgedgements";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEDGEMENTS)
  private List<String> acknowledgedgements;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private OffsetDateTime closed;

  public static final String SERIALIZED_NAME_CLOSED_BY = "closedBy";
  @SerializedName(SERIALIZED_NAME_CLOSED_BY)
  private String closedBy;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_HISTORY_ENTRIES = "historyEntries";
  @SerializedName(SERIALIZED_NAME_HISTORY_ENTRIES)
  private List<AlertHistoryInfoEntry> historyEntries;

  public AlertHistoryInfoDetailed() {
  }

  public AlertHistoryInfoDetailed acknowledged(OffsetDateTime acknowledged) {
    this.acknowledged = acknowledged;
    return this;
  }

  /**
   * Get acknowledged
   * @return acknowledged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAcknowledged() {
    return acknowledged;
  }

  public void setAcknowledged(OffsetDateTime acknowledged) {
    this.acknowledged = acknowledged;
  }


  public AlertHistoryInfoDetailed acknowledgedgements(List<String> acknowledgedgements) {
    this.acknowledgedgements = acknowledgedgements;
    return this;
  }

  public AlertHistoryInfoDetailed addAcknowledgedgementsItem(String acknowledgedgementsItem) {
    if (this.acknowledgedgements == null) {
      this.acknowledgedgements = new ArrayList<>();
    }
    this.acknowledgedgements.add(acknowledgedgementsItem);
    return this;
  }

  /**
   * Get acknowledgedgements
   * @return acknowledgedgements
   */
  @javax.annotation.Nullable
  public List<String> getAcknowledgedgements() {
    return acknowledgedgements;
  }

  public void setAcknowledgedgements(List<String> acknowledgedgements) {
    this.acknowledgedgements = acknowledgedgements;
  }


  public AlertHistoryInfoDetailed closed(OffsetDateTime closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosed() {
    return closed;
  }

  public void setClosed(OffsetDateTime closed) {
    this.closed = closed;
  }


  public AlertHistoryInfoDetailed closedBy(String closedBy) {
    this.closedBy = closedBy;
    return this;
  }

  /**
   * Get closedBy
   * @return closedBy
   */
  @javax.annotation.Nullable
  public String getClosedBy() {
    return closedBy;
  }

  public void setClosedBy(String closedBy) {
    this.closedBy = closedBy;
  }


  public AlertHistoryInfoDetailed created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public AlertHistoryInfoDetailed historyEntries(List<AlertHistoryInfoEntry> historyEntries) {
    this.historyEntries = historyEntries;
    return this;
  }

  public AlertHistoryInfoDetailed addHistoryEntriesItem(AlertHistoryInfoEntry historyEntriesItem) {
    if (this.historyEntries == null) {
      this.historyEntries = new ArrayList<>();
    }
    this.historyEntries.add(historyEntriesItem);
    return this;
  }

  /**
   * Get historyEntries
   * @return historyEntries
   */
  @javax.annotation.Nullable
  public List<AlertHistoryInfoEntry> getHistoryEntries() {
    return historyEntries;
  }

  public void setHistoryEntries(List<AlertHistoryInfoEntry> historyEntries) {
    this.historyEntries = historyEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertHistoryInfoDetailed alertHistoryInfoDetailed = (AlertHistoryInfoDetailed) o;
    return Objects.equals(this.acknowledged, alertHistoryInfoDetailed.acknowledged) &&
        Objects.equals(this.acknowledgedgements, alertHistoryInfoDetailed.acknowledgedgements) &&
        Objects.equals(this.closed, alertHistoryInfoDetailed.closed) &&
        Objects.equals(this.closedBy, alertHistoryInfoDetailed.closedBy) &&
        Objects.equals(this.created, alertHistoryInfoDetailed.created) &&
        Objects.equals(this.historyEntries, alertHistoryInfoDetailed.historyEntries);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledged, acknowledgedgements, closed, closedBy, created, historyEntries);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertHistoryInfoDetailed {\n");
    sb.append("    acknowledged: ").append(toIndentedString(acknowledged)).append("\n");
    sb.append("    acknowledgedgements: ").append(toIndentedString(acknowledgedgements)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    closedBy: ").append(toIndentedString(closedBy)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    historyEntries: ").append(toIndentedString(historyEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledged");
    openapiFields.add("acknowledgedgements");
    openapiFields.add("closed");
    openapiFields.add("closedBy");
    openapiFields.add("created");
    openapiFields.add("historyEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertHistoryInfoDetailed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertHistoryInfoDetailed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertHistoryInfoDetailed is not found in the empty JSON string", AlertHistoryInfoDetailed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertHistoryInfoDetailed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertHistoryInfoDetailed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("acknowledgedgements") != null && !jsonObj.get("acknowledgedgements").isJsonNull() && !jsonObj.get("acknowledgedgements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgedgements` to be an array in the JSON string but got `%s`", jsonObj.get("acknowledgedgements").toString()));
      }
      if ((jsonObj.get("closedBy") != null && !jsonObj.get("closedBy").isJsonNull()) && !jsonObj.get("closedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedBy").toString()));
      }
      if (jsonObj.get("historyEntries") != null && !jsonObj.get("historyEntries").isJsonNull()) {
        JsonArray jsonArrayhistoryEntries = jsonObj.getAsJsonArray("historyEntries");
        if (jsonArrayhistoryEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("historyEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `historyEntries` to be an array in the JSON string but got `%s`", jsonObj.get("historyEntries").toString()));
          }

          // validate the optional field `historyEntries` (array)
          for (int i = 0; i < jsonArrayhistoryEntries.size(); i++) {
            AlertHistoryInfoEntry.validateJsonElement(jsonArrayhistoryEntries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertHistoryInfoDetailed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertHistoryInfoDetailed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertHistoryInfoDetailed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertHistoryInfoDetailed.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertHistoryInfoDetailed>() {
           @Override
           public void write(JsonWriter out, AlertHistoryInfoDetailed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertHistoryInfoDetailed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertHistoryInfoDetailed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertHistoryInfoDetailed
   * @throws IOException if the JSON string is invalid with respect to AlertHistoryInfoDetailed
   */
  public static AlertHistoryInfoDetailed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertHistoryInfoDetailed.class);
  }

  /**
   * Convert an instance of AlertHistoryInfoDetailed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

