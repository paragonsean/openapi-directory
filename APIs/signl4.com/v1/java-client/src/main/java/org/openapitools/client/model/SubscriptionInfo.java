/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionInfo {
  public static final String SERIALIZED_NAME_BRANCH_ID = "branchId";
  @SerializedName(SERIALIZED_NAME_BRANCH_ID)
  private String branchId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "externalAccountId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_BILLING = "nextBilling";
  @SerializedName(SERIALIZED_NAME_NEXT_BILLING)
  private OffsetDateTime nextBilling;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_PLAN_CODE = "planCode";
  @SerializedName(SERIALIZED_NAME_PLAN_CODE)
  private String planCode;

  public static final String SERIALIZED_NAME_PLAN_STATE = "planState";
  @SerializedName(SERIALIZED_NAME_PLAN_STATE)
  private Integer planState;

  public static final String SERIALIZED_NAME_REFERRAL_ENABLED = "referralEnabled";
  @SerializedName(SERIALIZED_NAME_REFERRAL_ENABLED)
  private Boolean referralEnabled;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public SubscriptionInfo() {
  }

  public SubscriptionInfo branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

  /**
   * Get branchId
   * @return branchId
   */
  @javax.annotation.Nullable
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }


  public SubscriptionInfo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SubscriptionInfo currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SubscriptionInfo externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * Get externalAccountId
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public SubscriptionInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubscriptionInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SubscriptionInfo nextBilling(OffsetDateTime nextBilling) {
    this.nextBilling = nextBilling;
    return this;
  }

  /**
   * Get nextBilling
   * @return nextBilling
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextBilling() {
    return nextBilling;
  }

  public void setNextBilling(OffsetDateTime nextBilling) {
    this.nextBilling = nextBilling;
  }


  public SubscriptionInfo ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public SubscriptionInfo planCode(String planCode) {
    this.planCode = planCode;
    return this;
  }

  /**
   * Get planCode
   * @return planCode
   */
  @javax.annotation.Nullable
  public String getPlanCode() {
    return planCode;
  }

  public void setPlanCode(String planCode) {
    this.planCode = planCode;
  }


  public SubscriptionInfo planState(Integer planState) {
    this.planState = planState;
    return this;
  }

  /**
   * Get planState
   * @return planState
   */
  @javax.annotation.Nullable
  public Integer getPlanState() {
    return planState;
  }

  public void setPlanState(Integer planState) {
    this.planState = planState;
  }


  public SubscriptionInfo referralEnabled(Boolean referralEnabled) {
    this.referralEnabled = referralEnabled;
    return this;
  }

  /**
   * Get referralEnabled
   * @return referralEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReferralEnabled() {
    return referralEnabled;
  }

  public void setReferralEnabled(Boolean referralEnabled) {
    this.referralEnabled = referralEnabled;
  }


  public SubscriptionInfo status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionInfo subscriptionInfo = (SubscriptionInfo) o;
    return Objects.equals(this.branchId, subscriptionInfo.branchId) &&
        Objects.equals(this.country, subscriptionInfo.country) &&
        Objects.equals(this.currency, subscriptionInfo.currency) &&
        Objects.equals(this.externalAccountId, subscriptionInfo.externalAccountId) &&
        Objects.equals(this.id, subscriptionInfo.id) &&
        Objects.equals(this.name, subscriptionInfo.name) &&
        Objects.equals(this.nextBilling, subscriptionInfo.nextBilling) &&
        Objects.equals(this.ownerId, subscriptionInfo.ownerId) &&
        Objects.equals(this.planCode, subscriptionInfo.planCode) &&
        Objects.equals(this.planState, subscriptionInfo.planState) &&
        Objects.equals(this.referralEnabled, subscriptionInfo.referralEnabled) &&
        Objects.equals(this.status, subscriptionInfo.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchId, country, currency, externalAccountId, id, name, nextBilling, ownerId, planCode, planState, referralEnabled, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionInfo {\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextBilling: ").append(toIndentedString(nextBilling)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    planCode: ").append(toIndentedString(planCode)).append("\n");
    sb.append("    planState: ").append(toIndentedString(planState)).append("\n");
    sb.append("    referralEnabled: ").append(toIndentedString(referralEnabled)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branchId");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("externalAccountId");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nextBilling");
    openapiFields.add("ownerId");
    openapiFields.add("planCode");
    openapiFields.add("planState");
    openapiFields.add("referralEnabled");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionInfo is not found in the empty JSON string", SubscriptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branchId") != null && !jsonObj.get("branchId").isJsonNull()) && !jsonObj.get("branchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchId").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("externalAccountId") != null && !jsonObj.get("externalAccountId").isJsonNull()) && !jsonObj.get("externalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccountId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if ((jsonObj.get("planCode") != null && !jsonObj.get("planCode").isJsonNull()) && !jsonObj.get("planCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionInfo>() {
           @Override
           public void write(JsonWriter out, SubscriptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionInfo
   * @throws IOException if the JSON string is invalid with respect to SubscriptionInfo
   */
  public static SubscriptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionInfo.class);
  }

  /**
   * Convert an instance of SubscriptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

