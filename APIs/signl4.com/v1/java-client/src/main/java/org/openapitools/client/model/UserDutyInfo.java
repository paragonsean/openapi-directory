/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserDutyInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDutyInfo {
  public static final String SERIALIZED_NAME_LAST_STATUS_CHANGE = "lastStatusChange";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_CHANGE)
  private OffsetDateTime lastStatusChange;

  public static final String SERIALIZED_NAME_ON_DUTY = "onDuty";
  @SerializedName(SERIALIZED_NAME_ON_DUTY)
  private Boolean onDuty;

  public static final String SERIALIZED_NAME_ON_MANAGER_DUTY = "onManagerDuty";
  @SerializedName(SERIALIZED_NAME_ON_MANAGER_DUTY)
  private Boolean onManagerDuty;

  public static final String SERIALIZED_NAME_OVERDUE = "overdue";
  @SerializedName(SERIALIZED_NAME_OVERDUE)
  private Boolean overdue;

  public UserDutyInfo() {
  }

  public UserDutyInfo lastStatusChange(OffsetDateTime lastStatusChange) {
    this.lastStatusChange = lastStatusChange;
    return this;
  }

  /**
   * Get lastStatusChange
   * @return lastStatusChange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusChange() {
    return lastStatusChange;
  }

  public void setLastStatusChange(OffsetDateTime lastStatusChange) {
    this.lastStatusChange = lastStatusChange;
  }


  public UserDutyInfo onDuty(Boolean onDuty) {
    this.onDuty = onDuty;
    return this;
  }

  /**
   * Get onDuty
   * @return onDuty
   */
  @javax.annotation.Nullable
  public Boolean getOnDuty() {
    return onDuty;
  }

  public void setOnDuty(Boolean onDuty) {
    this.onDuty = onDuty;
  }


  public UserDutyInfo onManagerDuty(Boolean onManagerDuty) {
    this.onManagerDuty = onManagerDuty;
    return this;
  }

  /**
   * Get onManagerDuty
   * @return onManagerDuty
   */
  @javax.annotation.Nullable
  public Boolean getOnManagerDuty() {
    return onManagerDuty;
  }

  public void setOnManagerDuty(Boolean onManagerDuty) {
    this.onManagerDuty = onManagerDuty;
  }


  public UserDutyInfo overdue(Boolean overdue) {
    this.overdue = overdue;
    return this;
  }

  /**
   * Get overdue
   * @return overdue
   */
  @javax.annotation.Nullable
  public Boolean getOverdue() {
    return overdue;
  }

  public void setOverdue(Boolean overdue) {
    this.overdue = overdue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDutyInfo userDutyInfo = (UserDutyInfo) o;
    return Objects.equals(this.lastStatusChange, userDutyInfo.lastStatusChange) &&
        Objects.equals(this.onDuty, userDutyInfo.onDuty) &&
        Objects.equals(this.onManagerDuty, userDutyInfo.onManagerDuty) &&
        Objects.equals(this.overdue, userDutyInfo.overdue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastStatusChange, onDuty, onManagerDuty, overdue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDutyInfo {\n");
    sb.append("    lastStatusChange: ").append(toIndentedString(lastStatusChange)).append("\n");
    sb.append("    onDuty: ").append(toIndentedString(onDuty)).append("\n");
    sb.append("    onManagerDuty: ").append(toIndentedString(onManagerDuty)).append("\n");
    sb.append("    overdue: ").append(toIndentedString(overdue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastStatusChange");
    openapiFields.add("onDuty");
    openapiFields.add("onManagerDuty");
    openapiFields.add("overdue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDutyInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDutyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDutyInfo is not found in the empty JSON string", UserDutyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDutyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDutyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDutyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDutyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDutyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDutyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDutyInfo>() {
           @Override
           public void write(JsonWriter out, UserDutyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDutyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDutyInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDutyInfo
   * @throws IOException if the JSON string is invalid with respect to UserDutyInfo
   */
  public static UserDutyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDutyInfo.class);
  }

  /**
   * Convert an instance of UserDutyInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

