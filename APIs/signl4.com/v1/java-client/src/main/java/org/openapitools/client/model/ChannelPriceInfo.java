/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelPriceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:56.092625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelPriceInfo {
  public static final String SERIALIZED_NAME_SMS_PER_MESSAGE = "smsPerMessage";
  @SerializedName(SERIALIZED_NAME_SMS_PER_MESSAGE)
  private Integer smsPerMessage;

  public static final String SERIALIZED_NAME_VOICE_PER_MINUTE = "voicePerMinute";
  @SerializedName(SERIALIZED_NAME_VOICE_PER_MINUTE)
  private Integer voicePerMinute;

  public ChannelPriceInfo() {
  }

  public ChannelPriceInfo smsPerMessage(Integer smsPerMessage) {
    this.smsPerMessage = smsPerMessage;
    return this;
  }

  /**
   * Get smsPerMessage
   * @return smsPerMessage
   */
  @javax.annotation.Nullable
  public Integer getSmsPerMessage() {
    return smsPerMessage;
  }

  public void setSmsPerMessage(Integer smsPerMessage) {
    this.smsPerMessage = smsPerMessage;
  }


  public ChannelPriceInfo voicePerMinute(Integer voicePerMinute) {
    this.voicePerMinute = voicePerMinute;
    return this;
  }

  /**
   * Get voicePerMinute
   * @return voicePerMinute
   */
  @javax.annotation.Nullable
  public Integer getVoicePerMinute() {
    return voicePerMinute;
  }

  public void setVoicePerMinute(Integer voicePerMinute) {
    this.voicePerMinute = voicePerMinute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelPriceInfo channelPriceInfo = (ChannelPriceInfo) o;
    return Objects.equals(this.smsPerMessage, channelPriceInfo.smsPerMessage) &&
        Objects.equals(this.voicePerMinute, channelPriceInfo.voicePerMinute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(smsPerMessage, voicePerMinute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelPriceInfo {\n");
    sb.append("    smsPerMessage: ").append(toIndentedString(smsPerMessage)).append("\n");
    sb.append("    voicePerMinute: ").append(toIndentedString(voicePerMinute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("smsPerMessage");
    openapiFields.add("voicePerMinute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelPriceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelPriceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelPriceInfo is not found in the empty JSON string", ChannelPriceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelPriceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelPriceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelPriceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelPriceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelPriceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelPriceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelPriceInfo>() {
           @Override
           public void write(JsonWriter out, ChannelPriceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelPriceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelPriceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelPriceInfo
   * @throws IOException if the JSON string is invalid with respect to ChannelPriceInfo
   */
  public static ChannelPriceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelPriceInfo.class);
  }

  /**
   * Convert an instance of ChannelPriceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

