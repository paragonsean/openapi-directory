/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.InventoryScriptInfo;
import org.openapitools.client.model.ScriptInstanceCustomUserData;
import org.openapitools.client.model.ScriptInstanceDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScriptsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScriptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScriptsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scriptsInstancesGet
     * @param teamId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        return scriptsInstancesGetCall(teamId, _callback);

    }

    /**
     * Returns all script instances of the SIGNL4 team
     * Returns all script instances in the subscription.
     * @param teamId  (optional)
     * @return List&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
     </table>
     */
    public List<ScriptInstanceDetails> scriptsInstancesGet(String teamId) throws ApiException {
        ApiResponse<List<ScriptInstanceDetails>> localVarResp = scriptsInstancesGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Returns all script instances of the SIGNL4 team
     * Returns all script instances in the subscription.
     * @param teamId  (optional)
     * @return ApiResponse&lt;List&lt;ScriptInstanceDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScriptInstanceDetails>> scriptsInstancesGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<List<ScriptInstanceDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all script instances of the SIGNL4 team (asynchronously)
     * Returns all script instances in the subscription.
     * @param teamId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesGetAsync(String teamId, final ApiCallback<List<ScriptInstanceDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<List<ScriptInstanceDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdDataPut
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceCustomUserData Script instance to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDataPutCall(String instanceId, ScriptInstanceCustomUserData scriptInstanceCustomUserData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scriptInstanceCustomUserData;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}/data"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdDataPutValidateBeforeCall(String instanceId, ScriptInstanceCustomUserData scriptInstanceCustomUserData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDataPut(Async)");
        }

        return scriptsInstancesInstanceIdDataPutCall(instanceId, scriptInstanceCustomUserData, _callback);

    }

    /**
     * Updates custom data of a given script instance which includes its display name.
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceCustomUserData Script instance to be updated. (optional)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesInstanceIdDataPut(String instanceId, ScriptInstanceCustomUserData scriptInstanceCustomUserData) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesInstanceIdDataPutWithHttpInfo(instanceId, scriptInstanceCustomUserData);
        return localVarResp.getData();
    }

    /**
     * Updates custom data of a given script instance which includes its display name.
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceCustomUserData Script instance to be updated. (optional)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesInstanceIdDataPutWithHttpInfo(String instanceId, ScriptInstanceCustomUserData scriptInstanceCustomUserData) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDataPutValidateBeforeCall(instanceId, scriptInstanceCustomUserData, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom data of a given script instance which includes its display name. (asynchronously)
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceCustomUserData Script instance to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDataPutAsync(String instanceId, ScriptInstanceCustomUserData scriptInstanceCustomUserData, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDataPutValidateBeforeCall(instanceId, scriptInstanceCustomUserData, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdDelete
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDeleteCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdDeleteValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDelete(Async)");
        }

        return scriptsInstancesInstanceIdDeleteCall(instanceId, _callback);

    }

    /**
     * Deletes a script instance.
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public void scriptsInstancesInstanceIdDelete(String instanceId) throws ApiException {
        scriptsInstancesInstanceIdDeleteWithHttpInfo(instanceId);
    }

    /**
     * Deletes a script instance.
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scriptsInstancesInstanceIdDeleteWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDeleteValidateBeforeCall(instanceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a script instance. (asynchronously)
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDeleteAsync(String instanceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDeleteValidateBeforeCall(instanceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdDisablePost
     * @param instanceId Id of the instance to be disabled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDisablePostCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}/disable"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdDisablePostValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdDisablePost(Async)");
        }

        return scriptsInstancesInstanceIdDisablePostCall(instanceId, _callback);

    }

    /**
     * Disables a given script instance.
     * 
     * @param instanceId Id of the instance to be disabled. (required)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesInstanceIdDisablePost(String instanceId) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesInstanceIdDisablePostWithHttpInfo(instanceId);
        return localVarResp.getData();
    }

    /**
     * Disables a given script instance.
     * 
     * @param instanceId Id of the instance to be disabled. (required)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesInstanceIdDisablePostWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDisablePostValidateBeforeCall(instanceId, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disables a given script instance. (asynchronously)
     * 
     * @param instanceId Id of the instance to be disabled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdDisablePostAsync(String instanceId, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdDisablePostValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdEnablePost
     * @param instanceId Id of the instance to be enabled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdEnablePostCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}/enable"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdEnablePostValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdEnablePost(Async)");
        }

        return scriptsInstancesInstanceIdEnablePostCall(instanceId, _callback);

    }

    /**
     * Enables a script instance.
     * 
     * @param instanceId Id of the instance to be enabled. (required)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesInstanceIdEnablePost(String instanceId) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesInstanceIdEnablePostWithHttpInfo(instanceId);
        return localVarResp.getData();
    }

    /**
     * Enables a script instance.
     * 
     * @param instanceId Id of the instance to be enabled. (required)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesInstanceIdEnablePostWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdEnablePostValidateBeforeCall(instanceId, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables a script instance. (asynchronously)
     * 
     * @param instanceId Id of the instance to be enabled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdEnablePostAsync(String instanceId, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdEnablePostValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdGet
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdGetCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdGetValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdGet(Async)");
        }

        return scriptsInstancesInstanceIdGetCall(instanceId, _callback);

    }

    /**
     * Returns all information about a given script instance which includes its runtime status.
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesInstanceIdGet(String instanceId) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesInstanceIdGetWithHttpInfo(instanceId);
        return localVarResp.getData();
    }

    /**
     * Returns all information about a given script instance which includes its runtime status.
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesInstanceIdGetWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdGetValidateBeforeCall(instanceId, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all information about a given script instance which includes its runtime status. (asynchronously)
     * Gets the script instance specified by the passed instance id.
     * @param instanceId Instance Id of script instance to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdGetAsync(String instanceId, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdGetValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesInstanceIdPut
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceDetails Script instance to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdPutCall(String instanceId, ScriptInstanceDetails scriptInstanceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scriptInstanceDetails;

        // create path and map variables
        String localVarPath = "/scripts/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesInstanceIdPutValidateBeforeCall(String instanceId, ScriptInstanceDetails scriptInstanceDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling scriptsInstancesInstanceIdPut(Async)");
        }

        return scriptsInstancesInstanceIdPutCall(instanceId, scriptInstanceDetails, _callback);

    }

    /**
     * Updates a given script instance, typically used for updating the configuration of a script.
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceDetails Script instance to be updated. (optional)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesInstanceIdPut(String instanceId, ScriptInstanceDetails scriptInstanceDetails) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesInstanceIdPutWithHttpInfo(instanceId, scriptInstanceDetails);
        return localVarResp.getData();
    }

    /**
     * Updates a given script instance, typically used for updating the configuration of a script.
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceDetails Script instance to be updated. (optional)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesInstanceIdPutWithHttpInfo(String instanceId, ScriptInstanceDetails scriptInstanceDetails) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesInstanceIdPutValidateBeforeCall(instanceId, scriptInstanceDetails, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a given script instance, typically used for updating the configuration of a script. (asynchronously)
     * Updates the specified script instance.
     * @param instanceId InstanceId of the script to be updated. (required)
     * @param scriptInstanceDetails Script instance to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesInstanceIdPutAsync(String instanceId, ScriptInstanceDetails scriptInstanceDetails, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesInstanceIdPutValidateBeforeCall(instanceId, scriptInstanceDetails, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInstancesPost
     * @param scriptInstanceDetails Script instance to be created. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesPostCall(ScriptInstanceDetails scriptInstanceDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scriptInstanceDetails;

        // create path and map variables
        String localVarPath = "/scripts/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInstancesPostValidateBeforeCall(ScriptInstanceDetails scriptInstanceDetails, final ApiCallback _callback) throws ApiException {
        return scriptsInstancesPostCall(scriptInstanceDetails, _callback);

    }

    /**
     * Creates a new script instance in the in the SIGNL4 team.
     * Creates a new script instance of the script specified in the request body.
     * @param scriptInstanceDetails Script instance to be created. (optional)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInstancesPost(ScriptInstanceDetails scriptInstanceDetails) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInstancesPostWithHttpInfo(scriptInstanceDetails);
        return localVarResp.getData();
    }

    /**
     * Creates a new script instance in the in the SIGNL4 team.
     * Creates a new script instance of the script specified in the request body.
     * @param scriptInstanceDetails Script instance to be created. (optional)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInstancesPostWithHttpInfo(ScriptInstanceDetails scriptInstanceDetails) throws ApiException {
        okhttp3.Call localVarCall = scriptsInstancesPostValidateBeforeCall(scriptInstanceDetails, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new script instance in the in the SIGNL4 team. (asynchronously)
     * Creates a new script instance of the script specified in the request body.
     * @param scriptInstanceDetails Script instance to be created. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Existing script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> New script instance was updated as specified in body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error has occurred during instance creation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInstancesPostAsync(ScriptInstanceDetails scriptInstanceDetails, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInstancesPostValidateBeforeCall(scriptInstanceDetails, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInventoryGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error orccurred while loading all inventory scripts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInventoryGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return scriptsInventoryGetCall(_callback);

    }

    /**
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * @return List&lt;InventoryScriptInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error orccurred while loading all inventory scripts. </td><td>  -  </td></tr>
     </table>
     */
    public List<InventoryScriptInfo> scriptsInventoryGet() throws ApiException {
        ApiResponse<List<InventoryScriptInfo>> localVarResp = scriptsInventoryGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * @return ApiResponse&lt;List&lt;InventoryScriptInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error orccurred while loading all inventory scripts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InventoryScriptInfo>> scriptsInventoryGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = scriptsInventoryGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InventoryScriptInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription. (asynchronously)
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error orccurred while loading all inventory scripts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryGetAsync(final ApiCallback<List<InventoryScriptInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInventoryGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InventoryScriptInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInventoryParsedGet
     * @param language  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryParsedGetCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/inventory/parsed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInventoryParsedGetValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        return scriptsInventoryParsedGetCall(language, _callback);

    }

    /**
     * Returns all inventory scripts.
     * 
     * @param language  (optional)
     * @return List&lt;InventoryScriptInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<InventoryScriptInfo> scriptsInventoryParsedGet(String language) throws ApiException {
        ApiResponse<List<InventoryScriptInfo>> localVarResp = scriptsInventoryParsedGetWithHttpInfo(language);
        return localVarResp.getData();
    }

    /**
     * Returns all inventory scripts.
     * 
     * @param language  (optional)
     * @return ApiResponse&lt;List&lt;InventoryScriptInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InventoryScriptInfo>> scriptsInventoryParsedGetWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = scriptsInventoryParsedGetValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<List<InventoryScriptInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all inventory scripts. (asynchronously)
     * 
     * @param language  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryParsedGetAsync(String language, final ApiCallback<List<InventoryScriptInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInventoryParsedGetValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<List<InventoryScriptInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scriptsInventoryParsedScriptIdGet
     * @param scriptId The Id of the script to be returned. (required)
     * @param language  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryParsedScriptIdGetCall(String scriptId, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scripts/inventory/parsed/{scriptId}"
            .replace("{" + "scriptId" + "}", localVarApiClient.escapeString(scriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scriptsInventoryParsedScriptIdGetValidateBeforeCall(String scriptId, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scriptId' is set
        if (scriptId == null) {
            throw new ApiException("Missing the required parameter 'scriptId' when calling scriptsInventoryParsedScriptIdGet(Async)");
        }

        return scriptsInventoryParsedScriptIdGetCall(scriptId, language, _callback);

    }

    /**
     * Returns an inventory script by its id.
     * Gets the script specified by the passed script id.
     * @param scriptId The Id of the script to be returned. (required)
     * @param language  (optional)
     * @return ScriptInstanceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptInstanceDetails scriptsInventoryParsedScriptIdGet(String scriptId, String language) throws ApiException {
        ApiResponse<ScriptInstanceDetails> localVarResp = scriptsInventoryParsedScriptIdGetWithHttpInfo(scriptId, language);
        return localVarResp.getData();
    }

    /**
     * Returns an inventory script by its id.
     * Gets the script specified by the passed script id.
     * @param scriptId The Id of the script to be returned. (required)
     * @param language  (optional)
     * @return ApiResponse&lt;ScriptInstanceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptInstanceDetails> scriptsInventoryParsedScriptIdGetWithHttpInfo(String scriptId, String language) throws ApiException {
        okhttp3.Call localVarCall = scriptsInventoryParsedScriptIdGetValidateBeforeCall(scriptId, language, null);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an inventory script by its id. (asynchronously)
     * Gets the script specified by the passed script id.
     * @param scriptId The Id of the script to be returned. (required)
     * @param language  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database or in memory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scriptsInventoryParsedScriptIdGetAsync(String scriptId, String language, final ApiCallback<ScriptInstanceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scriptsInventoryParsedScriptIdGetValidateBeforeCall(scriptId, language, _callback);
        Type localVarReturnType = new TypeToken<ScriptInstanceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
