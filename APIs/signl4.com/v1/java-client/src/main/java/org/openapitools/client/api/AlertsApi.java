/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlertAnnotationInfo;
import org.openapitools.client.model.AlertAttachmentInfo;
import org.openapitools.client.model.AlertFilterPublic;
import org.openapitools.client.model.AlertInfo;
import org.openapitools.client.model.AlertNotificationInfo;
import org.openapitools.client.model.AlertReport;
import org.openapitools.client.model.ChangeAlertStatusFilterInfo;
import org.openapitools.client.model.ChangeAlertStatusInfo;
import org.openapitools.client.model.ChangeAlertStatusMultipleInfo;
import org.openapitools.client.model.ErrorResponseContent;
import java.io.File;
import org.openapitools.client.model.OverviewAlert;
import org.openapitools.client.model.OverviewAlertPagedResultsPublic;
import org.openapitools.client.model.RaiseAlertInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alertsAcknowledgeAllPost
     * @param userId User ID of the user to be used to acknowledge the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAcknowledgeAllPostCall(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusFilterInfo;

        // create path and map variables
        String localVarPath = "/alerts/acknowledgeAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAcknowledgeAllPostValidateBeforeCall(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback _callback) throws ApiException {
        return alertsAcknowledgeAllPostCall(userId, changeAlertStatusFilterInfo, _callback);

    }

    /**
     * Confirms all visible alerts
     * This method confirms all unhandled alerts your team currently has by a specific user.
     * @param userId User ID of the user to be used to acknowledge the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsAcknowledgeAllPost(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo) throws ApiException {
        alertsAcknowledgeAllPostWithHttpInfo(userId, changeAlertStatusFilterInfo);
    }

    /**
     * Confirms all visible alerts
     * This method confirms all unhandled alerts your team currently has by a specific user.
     * @param userId User ID of the user to be used to acknowledge the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsAcknowledgeAllPostWithHttpInfo(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAcknowledgeAllPostValidateBeforeCall(userId, changeAlertStatusFilterInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirms all visible alerts (asynchronously)
     * This method confirms all unhandled alerts your team currently has by a specific user.
     * @param userId User ID of the user to be used to acknowledge the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAcknowledgeAllPostAsync(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAcknowledgeAllPostValidateBeforeCall(userId, changeAlertStatusFilterInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAcknowledgeMultiplePost
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAcknowledgeMultiplePostCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusMultipleInfo;

        // create path and map variables
        String localVarPath = "/alerts/acknowledgeMultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAcknowledgeMultiplePostValidateBeforeCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        return alertsAcknowledgeMultiplePostCall(changeAlertStatusMultipleInfo, _callback);

    }

    /**
     * Acknowlegde multiple alerts
     * This method confirms all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsAcknowledgeMultiplePost(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        alertsAcknowledgeMultiplePostWithHttpInfo(changeAlertStatusMultipleInfo);
    }

    /**
     * Acknowlegde multiple alerts
     * This method confirms all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsAcknowledgeMultiplePostWithHttpInfo(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAcknowledgeMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Acknowlegde multiple alerts (asynchronously)
     * This method confirms all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAcknowledgeMultiplePostAsync(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAcknowledgeMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdAcknowledgePost
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be acknowledged because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAcknowledgePostCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusInfo;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/acknowledge"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdAcknowledgePostValidateBeforeCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdAcknowledgePost(Async)");
        }

        return alertsAlertIdAcknowledgePostCall(alertId, changeAlertStatusInfo, _callback);

    }

    /**
     * Acknowledge an alert
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @return AlertInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be acknowledged because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertInfo alertsAlertIdAcknowledgePost(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        ApiResponse<AlertInfo> localVarResp = alertsAlertIdAcknowledgePostWithHttpInfo(alertId, changeAlertStatusInfo);
        return localVarResp.getData();
    }

    /**
     * Acknowledge an alert
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @return ApiResponse&lt;AlertInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be acknowledged because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertInfo> alertsAlertIdAcknowledgePostWithHttpInfo(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdAcknowledgePostValidateBeforeCall(alertId, changeAlertStatusInfo, null);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledge an alert (asynchronously)
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be acknowledged because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAcknowledgePostAsync(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback<AlertInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdAcknowledgePostValidateBeforeCall(alertId, changeAlertStatusInfo, _callback);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdAnnotatePost
     * @param alertId Id of the alert to annotate. (required)
     * @param alertAnnotationInfo Annotation Information. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAnnotatePostCall(String alertId, AlertAnnotationInfo alertAnnotationInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertAnnotationInfo;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/annotate"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdAnnotatePostValidateBeforeCall(String alertId, AlertAnnotationInfo alertAnnotationInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdAnnotatePost(Async)");
        }

        return alertsAlertIdAnnotatePostCall(alertId, alertAnnotationInfo, _callback);

    }

    /**
     * Annotate Alert
     * Annotates an alert by given Annotation Info.
     * @param alertId Id of the alert to annotate. (required)
     * @param alertAnnotationInfo Annotation Information. (optional)
     * @return AlertAnnotationInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertAnnotationInfo alertsAlertIdAnnotatePost(String alertId, AlertAnnotationInfo alertAnnotationInfo) throws ApiException {
        ApiResponse<AlertAnnotationInfo> localVarResp = alertsAlertIdAnnotatePostWithHttpInfo(alertId, alertAnnotationInfo);
        return localVarResp.getData();
    }

    /**
     * Annotate Alert
     * Annotates an alert by given Annotation Info.
     * @param alertId Id of the alert to annotate. (required)
     * @param alertAnnotationInfo Annotation Information. (optional)
     * @return ApiResponse&lt;AlertAnnotationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertAnnotationInfo> alertsAlertIdAnnotatePostWithHttpInfo(String alertId, AlertAnnotationInfo alertAnnotationInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdAnnotatePostValidateBeforeCall(alertId, alertAnnotationInfo, null);
        Type localVarReturnType = new TypeToken<AlertAnnotationInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annotate Alert (asynchronously)
     * Annotates an alert by given Annotation Info.
     * @param alertId Id of the alert to annotate. (required)
     * @param alertAnnotationInfo Annotation Information. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAnnotatePostAsync(String alertId, AlertAnnotationInfo alertAnnotationInfo, final ApiCallback<AlertAnnotationInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdAnnotatePostValidateBeforeCall(alertId, alertAnnotationInfo, _callback);
        Type localVarReturnType = new TypeToken<AlertAnnotationInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdAnnotationsGet
     * @param alertId Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No annotations were found for the alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAnnotationsGetCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/annotations"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdAnnotationsGetValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdAnnotationsGet(Async)");
        }

        return alertsAlertIdAnnotationsGetCall(alertId, _callback);

    }

    /**
     * Get annotations of an alert
     * Get annotations of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return List&lt;AlertAnnotationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No annotations were found for the alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AlertAnnotationInfo> alertsAlertIdAnnotationsGet(String alertId) throws ApiException {
        ApiResponse<List<AlertAnnotationInfo>> localVarResp = alertsAlertIdAnnotationsGetWithHttpInfo(alertId);
        return localVarResp.getData();
    }

    /**
     * Get annotations of an alert
     * Get annotations of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return ApiResponse&lt;List&lt;AlertAnnotationInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No annotations were found for the alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlertAnnotationInfo>> alertsAlertIdAnnotationsGetWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdAnnotationsGetValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<List<AlertAnnotationInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get annotations of an alert (asynchronously)
     * Get annotations of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No annotations were found for the alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAnnotationsGetAsync(String alertId, final ApiCallback<List<AlertAnnotationInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdAnnotationsGetValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<List<AlertAnnotationInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdAttachmentsAttachmentIdGet
     * @param alertId Id of the alert that contains the wanted attachment. (required)
     * @param attachmentId Id of the attachment, that you want to retrieve. (required)
     * @param width Optional parameter defining the wanted width of the picture that is retrieved. (optional)
     * @param height Optional parameter defining the wanted height of the picture that is retrieved. (optional)
     * @param scale Optional parameter defining whether it&#39;s wanted to scale the retrieved image. Default is set to  true. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the attachment image with additional meta information. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image of the attachment was not uploaded yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The attachment image was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAttachmentsAttachmentIdGetCall(String alertId, String attachmentId, Integer width, Integer height, Boolean scale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/attachments/{attachmentId}"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (scale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scale", scale));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdAttachmentsAttachmentIdGetValidateBeforeCall(String alertId, String attachmentId, Integer width, Integer height, Boolean scale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdAttachmentsAttachmentIdGet(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling alertsAlertIdAttachmentsAttachmentIdGet(Async)");
        }

        return alertsAlertIdAttachmentsAttachmentIdGetCall(alertId, attachmentId, width, height, scale, _callback);

    }

    /**
     * Gets a specified attachment of a specified alert.
     * 
     * @param alertId Id of the alert that contains the wanted attachment. (required)
     * @param attachmentId Id of the attachment, that you want to retrieve. (required)
     * @param width Optional parameter defining the wanted width of the picture that is retrieved. (optional)
     * @param height Optional parameter defining the wanted height of the picture that is retrieved. (optional)
     * @param scale Optional parameter defining whether it&#39;s wanted to scale the retrieved image. Default is set to  true. (optional, default to true)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the attachment image with additional meta information. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image of the attachment was not uploaded yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The attachment image was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public File alertsAlertIdAttachmentsAttachmentIdGet(String alertId, String attachmentId, Integer width, Integer height, Boolean scale) throws ApiException {
        ApiResponse<File> localVarResp = alertsAlertIdAttachmentsAttachmentIdGetWithHttpInfo(alertId, attachmentId, width, height, scale);
        return localVarResp.getData();
    }

    /**
     * Gets a specified attachment of a specified alert.
     * 
     * @param alertId Id of the alert that contains the wanted attachment. (required)
     * @param attachmentId Id of the attachment, that you want to retrieve. (required)
     * @param width Optional parameter defining the wanted width of the picture that is retrieved. (optional)
     * @param height Optional parameter defining the wanted height of the picture that is retrieved. (optional)
     * @param scale Optional parameter defining whether it&#39;s wanted to scale the retrieved image. Default is set to  true. (optional, default to true)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the attachment image with additional meta information. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image of the attachment was not uploaded yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The attachment image was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> alertsAlertIdAttachmentsAttachmentIdGetWithHttpInfo(String alertId, String attachmentId, Integer width, Integer height, Boolean scale) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdAttachmentsAttachmentIdGetValidateBeforeCall(alertId, attachmentId, width, height, scale, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specified attachment of a specified alert. (asynchronously)
     * 
     * @param alertId Id of the alert that contains the wanted attachment. (required)
     * @param attachmentId Id of the attachment, that you want to retrieve. (required)
     * @param width Optional parameter defining the wanted width of the picture that is retrieved. (optional)
     * @param height Optional parameter defining the wanted height of the picture that is retrieved. (optional)
     * @param scale Optional parameter defining whether it&#39;s wanted to scale the retrieved image. Default is set to  true. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the attachment image with additional meta information. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The image of the attachment was not uploaded yet. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A passed parameter was either empty or invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The attachment image was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAttachmentsAttachmentIdGetAsync(String alertId, String attachmentId, Integer width, Integer height, Boolean scale, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdAttachmentsAttachmentIdGetValidateBeforeCall(alertId, attachmentId, width, height, scale, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdAttachmentsGet
     * @param alertId Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAttachmentsGetCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/attachments"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdAttachmentsGetValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdAttachmentsGet(Async)");
        }

        return alertsAlertIdAttachmentsGetCall(alertId, _callback);

    }

    /**
     * Get attachments of an alert
     * Get attachments of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return List&lt;AlertAttachmentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public List<AlertAttachmentInfo> alertsAlertIdAttachmentsGet(String alertId) throws ApiException {
        ApiResponse<List<AlertAttachmentInfo>> localVarResp = alertsAlertIdAttachmentsGetWithHttpInfo(alertId);
        return localVarResp.getData();
    }

    /**
     * Get attachments of an alert
     * Get attachments of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return ApiResponse&lt;List&lt;AlertAttachmentInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlertAttachmentInfo>> alertsAlertIdAttachmentsGetWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdAttachmentsGetValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<List<AlertAttachmentInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attachments of an alert (asynchronously)
     * Get attachments of an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdAttachmentsGetAsync(String alertId, final ApiCallback<List<AlertAttachmentInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdAttachmentsGetValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<List<AlertAttachmentInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdClosePost
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be closed because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdClosePostCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusInfo;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/close"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdClosePostValidateBeforeCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdClosePost(Async)");
        }

        return alertsAlertIdClosePostCall(alertId, changeAlertStatusInfo, _callback);

    }

    /**
     * Close an alert
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @return AlertInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be closed because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertInfo alertsAlertIdClosePost(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        ApiResponse<AlertInfo> localVarResp = alertsAlertIdClosePostWithHttpInfo(alertId, changeAlertStatusInfo);
        return localVarResp.getData();
    }

    /**
     * Close an alert
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @return ApiResponse&lt;AlertInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be closed because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertInfo> alertsAlertIdClosePostWithHttpInfo(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdClosePostValidateBeforeCall(alertId, changeAlertStatusInfo, null);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Close an alert (asynchronously)
     * 
     * @param alertId Id to acknowledge an alert. (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No alert with id was found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Alert can&#39;t be closed because it is against the defined alert lifecycle. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdClosePostAsync(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback<AlertInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdClosePostValidateBeforeCall(alertId, changeAlertStatusInfo, _callback);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdGet
     * @param alertId Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdGetCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdGetValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdGet(Async)");
        }

        return alertsAlertIdGetCall(alertId, _callback);

    }

    /**
     * Get Alert
     * Gets an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return AlertInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertInfo alertsAlertIdGet(String alertId) throws ApiException {
        ApiResponse<AlertInfo> localVarResp = alertsAlertIdGetWithHttpInfo(alertId);
        return localVarResp.getData();
    }

    /**
     * Get Alert
     * Gets an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return ApiResponse&lt;AlertInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertInfo> alertsAlertIdGetWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdGetValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Alert (asynchronously)
     * Gets an alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdGetAsync(String alertId, final ApiCallback<AlertInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdGetValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdNotificationsGet
     * @param alertId Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdNotificationsGetCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/notifications"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdNotificationsGetValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdNotificationsGet(Async)");
        }

        return alertsAlertIdNotificationsGetCall(alertId, _callback);

    }

    /**
     * Get alert notifications
     * Get notifications of all users by alert id.
     * @param alertId Id of the requested Alert. (required)
     * @return List&lt;AlertNotificationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public List<AlertNotificationInfo> alertsAlertIdNotificationsGet(String alertId) throws ApiException {
        ApiResponse<List<AlertNotificationInfo>> localVarResp = alertsAlertIdNotificationsGetWithHttpInfo(alertId);
        return localVarResp.getData();
    }

    /**
     * Get alert notifications
     * Get notifications of all users by alert id.
     * @param alertId Id of the requested Alert. (required)
     * @return ApiResponse&lt;List&lt;AlertNotificationInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlertNotificationInfo>> alertsAlertIdNotificationsGetWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdNotificationsGetValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<List<AlertNotificationInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get alert notifications (asynchronously)
     * Get notifications of all users by alert id.
     * @param alertId Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdNotificationsGetAsync(String alertId, final ApiCallback<List<AlertNotificationInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdNotificationsGetValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<List<AlertNotificationInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdOverviewGet
     * @param alertId Id of the requested Alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns alert with all information attached. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdOverviewGetCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/overview"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdOverviewGetValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdOverviewGet(Async)");
        }

        return alertsAlertIdOverviewGetCall(alertId, _callback);

    }

    /**
     * Get an overview alert.
     * Get overview alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return OverviewAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns alert with all information attached. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OverviewAlert alertsAlertIdOverviewGet(String alertId) throws ApiException {
        ApiResponse<OverviewAlert> localVarResp = alertsAlertIdOverviewGetWithHttpInfo(alertId);
        return localVarResp.getData();
    }

    /**
     * Get an overview alert.
     * Get overview alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @return ApiResponse&lt;OverviewAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns alert with all information attached. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewAlert> alertsAlertIdOverviewGetWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdOverviewGetValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an overview alert. (asynchronously)
     * Get overview alert by id.
     * @param alertId Id of the requested Alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns alert with all information attached. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdOverviewGetAsync(String alertId, final ApiCallback<OverviewAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdOverviewGetValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdUndoAcknowledgePost
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the acknowledgement. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdUndoAcknowledgePostCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusInfo;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/undoAcknowledge"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdUndoAcknowledgePostValidateBeforeCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdUndoAcknowledgePost(Async)");
        }

        return alertsAlertIdUndoAcknowledgePostCall(alertId, changeAlertStatusInfo, _callback);

    }

    /**
     * Undo the acknowledgement of an alert.
     * This method tries to undo an alert acknowledgement.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @return OverviewAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the acknowledgement. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public OverviewAlert alertsAlertIdUndoAcknowledgePost(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        ApiResponse<OverviewAlert> localVarResp = alertsAlertIdUndoAcknowledgePostWithHttpInfo(alertId, changeAlertStatusInfo);
        return localVarResp.getData();
    }

    /**
     * Undo the acknowledgement of an alert.
     * This method tries to undo an alert acknowledgement.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @return ApiResponse&lt;OverviewAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the acknowledgement. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewAlert> alertsAlertIdUndoAcknowledgePostWithHttpInfo(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdUndoAcknowledgePostValidateBeforeCall(alertId, changeAlertStatusInfo, null);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Undo the acknowledgement of an alert. (asynchronously)
     * This method tries to undo an alert acknowledgement.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated alert. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the acknowledgement. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdUndoAcknowledgePostAsync(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback<OverviewAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdUndoAcknowledgePostValidateBeforeCall(alertId, changeAlertStatusInfo, _callback);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsAlertIdUndoClosePost
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the close. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdUndoClosePostCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusInfo;

        // create path and map variables
        String localVarPath = "/alerts/{alertId}/undoClose"
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsAlertIdUndoClosePostValidateBeforeCall(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsAlertIdUndoClosePost(Async)");
        }

        return alertsAlertIdUndoClosePostCall(alertId, changeAlertStatusInfo, _callback);

    }

    /**
     * Undo the closure of an alert.
     * This method tries to undo an alert close.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @return OverviewAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the close. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public OverviewAlert alertsAlertIdUndoClosePost(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        ApiResponse<OverviewAlert> localVarResp = alertsAlertIdUndoClosePostWithHttpInfo(alertId, changeAlertStatusInfo);
        return localVarResp.getData();
    }

    /**
     * Undo the closure of an alert.
     * This method tries to undo an alert close.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @return ApiResponse&lt;OverviewAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the close. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewAlert> alertsAlertIdUndoClosePostWithHttpInfo(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsAlertIdUndoClosePostValidateBeforeCall(alertId, changeAlertStatusInfo, null);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Undo the closure of an alert. (asynchronously)
     * This method tries to undo an alert close.
     * @param alertId  (required)
     * @param changeAlertStatusInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is not allowed to undo the close. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsAlertIdUndoClosePostAsync(String alertId, ChangeAlertStatusInfo changeAlertStatusInfo, final ApiCallback<OverviewAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsAlertIdUndoClosePostValidateBeforeCall(alertId, changeAlertStatusInfo, _callback);
        Type localVarReturnType = new TypeToken<OverviewAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsCloseAllPost
     * @param userId User ID of the user to be used to close the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsCloseAllPostCall(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusFilterInfo;

        // create path and map variables
        String localVarPath = "/alerts/closeAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsCloseAllPostValidateBeforeCall(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback _callback) throws ApiException {
        return alertsCloseAllPostCall(userId, changeAlertStatusFilterInfo, _callback);

    }

    /**
     * Close all acknowledged alerts.
     * This method closes all acknowledged alerts your team currently has.
     * @param userId User ID of the user to be used to close the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsCloseAllPost(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo) throws ApiException {
        alertsCloseAllPostWithHttpInfo(userId, changeAlertStatusFilterInfo);
    }

    /**
     * Close all acknowledged alerts.
     * This method closes all acknowledged alerts your team currently has.
     * @param userId User ID of the user to be used to close the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsCloseAllPostWithHttpInfo(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsCloseAllPostValidateBeforeCall(userId, changeAlertStatusFilterInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Close all acknowledged alerts. (asynchronously)
     * This method closes all acknowledged alerts your team currently has.
     * @param userId User ID of the user to be used to close the alarms. (optional)
     * @param changeAlertStatusFilterInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsCloseAllPostAsync(String userId, ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsCloseAllPostValidateBeforeCall(userId, changeAlertStatusFilterInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsCloseMultiplePost
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsCloseMultiplePostCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusMultipleInfo;

        // create path and map variables
        String localVarPath = "/alerts/closeMultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsCloseMultiplePostValidateBeforeCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        return alertsCloseMultiplePostCall(changeAlertStatusMultipleInfo, _callback);

    }

    /**
     * Close multiple alerts
     * This method closes all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsCloseMultiplePost(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        alertsCloseMultiplePostWithHttpInfo(changeAlertStatusMultipleInfo);
    }

    /**
     * Close multiple alerts
     * This method closes all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsCloseMultiplePostWithHttpInfo(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsCloseMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Close multiple alerts (asynchronously)
     * This method closes all alerts provided.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsCloseMultiplePostAsync(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsCloseMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsPagedPost
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                  Number of alerts could be less if filtered but at least 1. (optional)
     * @param userId User ID of the user you want to get alerts for. (optional)
     * @param alertFilterPublic The filter defines which alerts are supposed to be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paged result with found alerts and continuation token if more alerts are in the database. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There were no alerts found for the specified filter. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsPagedPostCall(Integer maxResults, String userId, AlertFilterPublic alertFilterPublic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertFilterPublic;

        // create path and map variables
        String localVarPath = "/alerts/paged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsPagedPostValidateBeforeCall(Integer maxResults, String userId, AlertFilterPublic alertFilterPublic, final ApiCallback _callback) throws ApiException {
        return alertsPagedPostCall(maxResults, userId, alertFilterPublic, _callback);

    }

    /**
     * Gets alerts paged
     * 
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                  Number of alerts could be less if filtered but at least 1. (optional)
     * @param userId User ID of the user you want to get alerts for. (optional)
     * @param alertFilterPublic The filter defines which alerts are supposed to be retrieved. (optional)
     * @return OverviewAlertPagedResultsPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paged result with found alerts and continuation token if more alerts are in the database. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There were no alerts found for the specified filter. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public OverviewAlertPagedResultsPublic alertsPagedPost(Integer maxResults, String userId, AlertFilterPublic alertFilterPublic) throws ApiException {
        ApiResponse<OverviewAlertPagedResultsPublic> localVarResp = alertsPagedPostWithHttpInfo(maxResults, userId, alertFilterPublic);
        return localVarResp.getData();
    }

    /**
     * Gets alerts paged
     * 
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                  Number of alerts could be less if filtered but at least 1. (optional)
     * @param userId User ID of the user you want to get alerts for. (optional)
     * @param alertFilterPublic The filter defines which alerts are supposed to be retrieved. (optional)
     * @return ApiResponse&lt;OverviewAlertPagedResultsPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paged result with found alerts and continuation token if more alerts are in the database. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There were no alerts found for the specified filter. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewAlertPagedResultsPublic> alertsPagedPostWithHttpInfo(Integer maxResults, String userId, AlertFilterPublic alertFilterPublic) throws ApiException {
        okhttp3.Call localVarCall = alertsPagedPostValidateBeforeCall(maxResults, userId, alertFilterPublic, null);
        Type localVarReturnType = new TypeToken<OverviewAlertPagedResultsPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets alerts paged (asynchronously)
     * 
     * @param maxResults Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.                  Number of alerts could be less if filtered but at least 1. (optional)
     * @param userId User ID of the user you want to get alerts for. (optional)
     * @param alertFilterPublic The filter defines which alerts are supposed to be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paged result with found alerts and continuation token if more alerts are in the database. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> There were no alerts found for the specified filter. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required parameters could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authorization failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsPagedPostAsync(Integer maxResults, String userId, AlertFilterPublic alertFilterPublic, final ApiCallback<OverviewAlertPagedResultsPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsPagedPostValidateBeforeCall(maxResults, userId, alertFilterPublic, _callback);
        Type localVarReturnType = new TypeToken<OverviewAlertPagedResultsPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsPost
     * @param raiseAlertInfo Alert to raise. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsPostCall(RaiseAlertInfo raiseAlertInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = raiseAlertInfo;

        // create path and map variables
        String localVarPath = "/alerts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsPostValidateBeforeCall(RaiseAlertInfo raiseAlertInfo, final ApiCallback _callback) throws ApiException {
        return alertsPostCall(raiseAlertInfo, _callback);

    }

    /**
     * Trigger Alert
     * Triggers a new alert for your team. All team members on duty will receive alert notifications.
     * @param raiseAlertInfo Alert to raise. (optional)
     * @return AlertInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertInfo alertsPost(RaiseAlertInfo raiseAlertInfo) throws ApiException {
        ApiResponse<AlertInfo> localVarResp = alertsPostWithHttpInfo(raiseAlertInfo);
        return localVarResp.getData();
    }

    /**
     * Trigger Alert
     * Triggers a new alert for your team. All team members on duty will receive alert notifications.
     * @param raiseAlertInfo Alert to raise. (optional)
     * @return ApiResponse&lt;AlertInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertInfo> alertsPostWithHttpInfo(RaiseAlertInfo raiseAlertInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsPostValidateBeforeCall(raiseAlertInfo, null);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger Alert (asynchronously)
     * Triggers a new alert for your team. All team members on duty will receive alert notifications.
     * @param raiseAlertInfo Alert to raise. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsPostAsync(RaiseAlertInfo raiseAlertInfo, final ApiCallback<AlertInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsPostValidateBeforeCall(raiseAlertInfo, _callback);
        Type localVarReturnType = new TypeToken<AlertInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsReportGet
     * @param userId User ID of the user for whom you want a report. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsReportGetCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsReportGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        return alertsReportGetCall(userId, _callback);

    }

    /**
     * Get Alert Report
     * Returns information about the occurred alert volume in different time periods as well as information about the  response behaviour (amount of confirmed and unhandled alerts) of your team members.
     * @param userId User ID of the user for whom you want a report. (optional)
     * @return AlertReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public AlertReport alertsReportGet(String userId) throws ApiException {
        ApiResponse<AlertReport> localVarResp = alertsReportGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get Alert Report
     * Returns information about the occurred alert volume in different time periods as well as information about the  response behaviour (amount of confirmed and unhandled alerts) of your team members.
     * @param userId User ID of the user for whom you want a report. (optional)
     * @return ApiResponse&lt;AlertReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertReport> alertsReportGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = alertsReportGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<AlertReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Alert Report (asynchronously)
     * Returns information about the occurred alert volume in different time periods as well as information about the  response behaviour (amount of confirmed and unhandled alerts) of your team members.
     * @param userId User ID of the user for whom you want a report. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Required entities could not be found in the database. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsReportGetAsync(String userId, final ApiCallback<AlertReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsReportGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<AlertReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUndoAcknowledgeMultiplePost
     * @param changeAlertStatusMultipleInfo Configure which user should be undone for which alerts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUndoAcknowledgeMultiplePostCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusMultipleInfo;

        // create path and map variables
        String localVarPath = "/alerts/undoAcknowledgeMultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUndoAcknowledgeMultiplePostValidateBeforeCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        return alertsUndoAcknowledgeMultiplePostCall(changeAlertStatusMultipleInfo, _callback);

    }

    /**
     * Queue undo of multiple acknowledgments.
     * This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo Configure which user should be undone for which alerts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUndoAcknowledgeMultiplePost(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        alertsUndoAcknowledgeMultiplePostWithHttpInfo(changeAlertStatusMultipleInfo);
    }

    /**
     * Queue undo of multiple acknowledgments.
     * This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo Configure which user should be undone for which alerts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUndoAcknowledgeMultiplePostWithHttpInfo(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsUndoAcknowledgeMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Queue undo of multiple acknowledgments. (asynchronously)
     * This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo Configure which user should be undone for which alerts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUndoAcknowledgeMultiplePostAsync(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUndoAcknowledgeMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUndoCloseMultiplePost
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUndoCloseMultiplePostCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAlertStatusMultipleInfo;

        // create path and map variables
        String localVarPath = "/alerts/undoCloseMultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUndoCloseMultiplePostValidateBeforeCall(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback _callback) throws ApiException {
        return alertsUndoCloseMultiplePostCall(changeAlertStatusMultipleInfo, _callback);

    }

    /**
     * Withdraw closure of multiple alerts
     * This method tries to undo multiple alert closes. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUndoCloseMultiplePost(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        alertsUndoCloseMultiplePostWithHttpInfo(changeAlertStatusMultipleInfo);
    }

    /**
     * Withdraw closure of multiple alerts
     * This method tries to undo multiple alert closes. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUndoCloseMultiplePostWithHttpInfo(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo) throws ApiException {
        okhttp3.Call localVarCall = alertsUndoCloseMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Withdraw closure of multiple alerts (asynchronously)
     * This method tries to undo multiple alert closes. The operation is handled in the background.
     * @param changeAlertStatusMultipleInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Required information could not be found in the request/claims. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal general error occured. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUndoCloseMultiplePostAsync(ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUndoCloseMultiplePostValidateBeforeCall(changeAlertStatusMultipleInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
