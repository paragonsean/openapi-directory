/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.StringItemsWrapper;
import org.openapitools.client.model.UpdatePasswordInfo;
import org.openapitools.client.model.UserDutyInfo;
import org.openapitools.client.model.UserImage;
import org.openapitools.client.model.UserInfo;
import org.openapitools.client.model.UserProfile;
import org.openapitools.client.model.UserSetupProgress;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Get all Users
     *
     * Returns a list of user objects with details such as their email address and duty information. Only users who  are part of your team will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        List<UserInfo> response = api.usersGet();
        // TODO: test validations
    }

    /**
     * Updates the password of a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdChangePasswordPutTest() throws ApiException {
        String userId = null;
        UpdatePasswordInfo updatePasswordInfo = null;
        api.usersUserIdChangePasswordPut(userId, updatePasswordInfo);
        // TODO: test validations
    }

    /**
     * Checks if a user has the provided permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdCheckPermissionsPostTest() throws ApiException {
        String userId = null;
        String teamId = null;
        StringItemsWrapper stringItemsWrapper = null;
        UserImage response = api.usersUserIdCheckPermissionsPost(userId, teamId, stringItemsWrapper);
        // TODO: test validations
    }

    /**
     * Get duty status by user Id
     *
     * Returns a object with duty information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdDutyStatusGetTest() throws ApiException {
        String userId = null;
        UserDutyInfo response = api.usersUserIdDutyStatusGet(userId);
        // TODO: test validations
    }

    /**
     * Get User by Id
     *
     * Returns a user object with details such as his email address and duty information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        String userId = null;
        UserInfo response = api.usersUserIdGet(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdImageGetTest() throws ApiException {
        String userId = null;
        Integer height = null;
        Integer width = null;
        UserImage response = api.usersUserIdImageGet(userId, height, width);
        // TODO: test validations
    }

    /**
     * Uploaded a profile image for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdImagePostTest() throws ApiException {
        String userId = null;
        api.usersUserIdImagePost(userId);
        // TODO: test validations
    }

    /**
     * Updates user profile of an user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdProfilePutTest() throws ApiException {
        String userId = null;
        UserProfile userProfile = null;
        UserInfo response = api.usersUserIdProfilePut(userId, userProfile);
        // TODO: test validations
    }

    /**
     * Punch User in as Manager
     *
     * The specified user will be punched in to duty as a manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPunchInAsManagerPostTest() throws ApiException {
        String userId = null;
        UserDutyInfo response = api.usersUserIdPunchInAsManagerPost(userId);
        // TODO: test validations
    }

    /**
     * Punch User in
     *
     * The specified user will be punched in to duty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPunchInPostTest() throws ApiException {
        String userId = null;
        UserDutyInfo response = api.usersUserIdPunchInPost(userId);
        // TODO: test validations
    }

    /**
     * Punch User out
     *
     * The specified user will be punched out from duty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdPunchOutPostTest() throws ApiException {
        String userId = null;
        UserDutyInfo response = api.usersUserIdPunchOutPost(userId);
        // TODO: test validations
    }

    /**
     * Gets setup progress of a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdSetupProgressGetTest() throws ApiException {
        String userId = null;
        UserSetupProgress response = api.usersUserIdSetupProgressGet(userId);
        // TODO: test validations
    }

}
