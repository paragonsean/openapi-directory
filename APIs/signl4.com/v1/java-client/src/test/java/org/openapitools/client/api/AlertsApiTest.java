/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlertAnnotationInfo;
import org.openapitools.client.model.AlertAttachmentInfo;
import org.openapitools.client.model.AlertFilterPublic;
import org.openapitools.client.model.AlertInfo;
import org.openapitools.client.model.AlertNotificationInfo;
import org.openapitools.client.model.AlertReport;
import org.openapitools.client.model.ChangeAlertStatusFilterInfo;
import org.openapitools.client.model.ChangeAlertStatusInfo;
import org.openapitools.client.model.ChangeAlertStatusMultipleInfo;
import org.openapitools.client.model.ErrorResponseContent;
import java.io.File;
import org.openapitools.client.model.OverviewAlert;
import org.openapitools.client.model.OverviewAlertPagedResultsPublic;
import org.openapitools.client.model.RaiseAlertInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertsApi
 */
@Disabled
public class AlertsApiTest {

    private final AlertsApi api = new AlertsApi();

    /**
     * Confirms all visible alerts
     *
     * This method confirms all unhandled alerts your team currently has by a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAcknowledgeAllPostTest() throws ApiException {
        String userId = null;
        ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo = null;
        api.alertsAcknowledgeAllPost(userId, changeAlertStatusFilterInfo);
        // TODO: test validations
    }

    /**
     * Acknowlegde multiple alerts
     *
     * This method confirms all alerts provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAcknowledgeMultiplePostTest() throws ApiException {
        ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo = null;
        api.alertsAcknowledgeMultiplePost(changeAlertStatusMultipleInfo);
        // TODO: test validations
    }

    /**
     * Acknowledge an alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdAcknowledgePostTest() throws ApiException {
        String alertId = null;
        ChangeAlertStatusInfo changeAlertStatusInfo = null;
        AlertInfo response = api.alertsAlertIdAcknowledgePost(alertId, changeAlertStatusInfo);
        // TODO: test validations
    }

    /**
     * Annotate Alert
     *
     * Annotates an alert by given Annotation Info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdAnnotatePostTest() throws ApiException {
        String alertId = null;
        AlertAnnotationInfo alertAnnotationInfo = null;
        AlertAnnotationInfo response = api.alertsAlertIdAnnotatePost(alertId, alertAnnotationInfo);
        // TODO: test validations
    }

    /**
     * Get annotations of an alert
     *
     * Get annotations of an alert by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdAnnotationsGetTest() throws ApiException {
        String alertId = null;
        List<AlertAnnotationInfo> response = api.alertsAlertIdAnnotationsGet(alertId);
        // TODO: test validations
    }

    /**
     * Gets a specified attachment of a specified alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdAttachmentsAttachmentIdGetTest() throws ApiException {
        String alertId = null;
        String attachmentId = null;
        Integer width = null;
        Integer height = null;
        Boolean scale = null;
        File response = api.alertsAlertIdAttachmentsAttachmentIdGet(alertId, attachmentId, width, height, scale);
        // TODO: test validations
    }

    /**
     * Get attachments of an alert
     *
     * Get attachments of an alert by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdAttachmentsGetTest() throws ApiException {
        String alertId = null;
        List<AlertAttachmentInfo> response = api.alertsAlertIdAttachmentsGet(alertId);
        // TODO: test validations
    }

    /**
     * Close an alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdClosePostTest() throws ApiException {
        String alertId = null;
        ChangeAlertStatusInfo changeAlertStatusInfo = null;
        AlertInfo response = api.alertsAlertIdClosePost(alertId, changeAlertStatusInfo);
        // TODO: test validations
    }

    /**
     * Get Alert
     *
     * Gets an alert by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdGetTest() throws ApiException {
        String alertId = null;
        AlertInfo response = api.alertsAlertIdGet(alertId);
        // TODO: test validations
    }

    /**
     * Get alert notifications
     *
     * Get notifications of all users by alert id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdNotificationsGetTest() throws ApiException {
        String alertId = null;
        List<AlertNotificationInfo> response = api.alertsAlertIdNotificationsGet(alertId);
        // TODO: test validations
    }

    /**
     * Get an overview alert.
     *
     * Get overview alert by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdOverviewGetTest() throws ApiException {
        String alertId = null;
        OverviewAlert response = api.alertsAlertIdOverviewGet(alertId);
        // TODO: test validations
    }

    /**
     * Undo the acknowledgement of an alert.
     *
     * This method tries to undo an alert acknowledgement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdUndoAcknowledgePostTest() throws ApiException {
        String alertId = null;
        ChangeAlertStatusInfo changeAlertStatusInfo = null;
        OverviewAlert response = api.alertsAlertIdUndoAcknowledgePost(alertId, changeAlertStatusInfo);
        // TODO: test validations
    }

    /**
     * Undo the closure of an alert.
     *
     * This method tries to undo an alert close.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsAlertIdUndoClosePostTest() throws ApiException {
        String alertId = null;
        ChangeAlertStatusInfo changeAlertStatusInfo = null;
        OverviewAlert response = api.alertsAlertIdUndoClosePost(alertId, changeAlertStatusInfo);
        // TODO: test validations
    }

    /**
     * Close all acknowledged alerts.
     *
     * This method closes all acknowledged alerts your team currently has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsCloseAllPostTest() throws ApiException {
        String userId = null;
        ChangeAlertStatusFilterInfo changeAlertStatusFilterInfo = null;
        api.alertsCloseAllPost(userId, changeAlertStatusFilterInfo);
        // TODO: test validations
    }

    /**
     * Close multiple alerts
     *
     * This method closes all alerts provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsCloseMultiplePostTest() throws ApiException {
        ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo = null;
        api.alertsCloseMultiplePost(changeAlertStatusMultipleInfo);
        // TODO: test validations
    }

    /**
     * Gets alerts paged
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsPagedPostTest() throws ApiException {
        Integer maxResults = null;
        String userId = null;
        AlertFilterPublic alertFilterPublic = null;
        OverviewAlertPagedResultsPublic response = api.alertsPagedPost(maxResults, userId, alertFilterPublic);
        // TODO: test validations
    }

    /**
     * Trigger Alert
     *
     * Triggers a new alert for your team. All team members on duty will receive alert notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsPostTest() throws ApiException {
        RaiseAlertInfo raiseAlertInfo = null;
        AlertInfo response = api.alertsPost(raiseAlertInfo);
        // TODO: test validations
    }

    /**
     * Get Alert Report
     *
     * Returns information about the occurred alert volume in different time periods as well as information about the  response behaviour (amount of confirmed and unhandled alerts) of your team members.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsReportGetTest() throws ApiException {
        String userId = null;
        AlertReport response = api.alertsReportGet(userId);
        // TODO: test validations
    }

    /**
     * Queue undo of multiple acknowledgments.
     *
     * This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUndoAcknowledgeMultiplePostTest() throws ApiException {
        ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo = null;
        api.alertsUndoAcknowledgeMultiplePost(changeAlertStatusMultipleInfo);
        // TODO: test validations
    }

    /**
     * Withdraw closure of multiple alerts
     *
     * This method tries to undo multiple alert closes. The operation is handled in the background.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUndoCloseMultiplePostTest() throws ApiException {
        ChangeAlertStatusMultipleInfo changeAlertStatusMultipleInfo = null;
        api.alertsUndoCloseMultiplePost(changeAlertStatusMultipleInfo);
        // TODO: test validations
    }

}
