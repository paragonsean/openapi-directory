/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.PrepaidBalanceInfo;
import org.openapitools.client.model.PrepaidSettingsInfo;
import org.openapitools.client.model.PrepaidTransactionInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrepaidApi
 */
@Disabled
public class PrepaidApiTest {

    private final PrepaidApi api = new PrepaidApi();

    /**
     * Get your subscription&#39;s current prepaid balance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepaidBalanceGetTest() throws ApiException {
        PrepaidBalanceInfo response = api.prepaidBalanceGet();
        // TODO: test validations
    }

    /**
     * Get your subscription&#39;s current prepaid settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepaidSettingsGetTest() throws ApiException {
        PrepaidSettingsInfo response = api.prepaidSettingsGet();
        // TODO: test validations
    }

    /**
     * Update your subscription&#39;s current prepaid settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepaidSettingsPutTest() throws ApiException {
        PrepaidSettingsInfo prepaidSettingsInfo = null;
        PrepaidSettingsInfo response = api.prepaidSettingsPut(prepaidSettingsInfo);
        // TODO: test validations
    }

    /**
     * Get your subscription&#39;s prepaid transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prepaidTransactionsGetTest() throws ApiException {
        List<PrepaidTransactionInfo> response = api.prepaidTransactionsGet();
        // TODO: test validations
    }

    /**
     * Get a subscription&#39;s current prepaid balance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdPrepaidBalanceGetTest() throws ApiException {
        String subscriptionId = null;
        PrepaidBalanceInfo response = api.subscriptionsSubscriptionIdPrepaidBalanceGet(subscriptionId);
        // TODO: test validations
    }

    /**
     * Get a subscription&#39;s current prepaid settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdPrepaidSettingsGetTest() throws ApiException {
        String subscriptionId = null;
        PrepaidSettingsInfo response = api.subscriptionsSubscriptionIdPrepaidSettingsGet(subscriptionId);
        // TODO: test validations
    }

    /**
     * Update a subscription&#39;s current prepaid settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdPrepaidSettingsPutTest() throws ApiException {
        String subscriptionId = null;
        PrepaidSettingsInfo prepaidSettingsInfo = null;
        PrepaidSettingsInfo response = api.subscriptionsSubscriptionIdPrepaidSettingsPut(subscriptionId, prepaidSettingsInfo);
        // TODO: test validations
    }

    /**
     * Get a subscription&#39;s prepaid transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdPrepaidTransactionsGetTest() throws ApiException {
        String subscriptionId = null;
        List<PrepaidTransactionInfo> response = api.subscriptionsSubscriptionIdPrepaidTransactionsGet(subscriptionId);
        // TODO: test validations
    }

}
