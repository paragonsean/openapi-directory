/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertFilterActions;
import org.openapitools.client.model.AlertFilterModes;
import org.openapitools.client.model.AlertResponseModes;
import org.openapitools.client.model.PersistentNotificationModes;
import org.openapitools.client.model.TeamCategoryOptOutModes;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AlertSettings
 */
public class AlertSettingsTest {
    private final AlertSettings model = new AlertSettings();

    /**
     * Model tests for AlertSettings
     */
    @Test
    public void testAlertSettings() {
        // TODO: test AlertSettings
    }

    /**
     * Test the property 'filterAction'
     */
    @Test
    public void filterActionTest() {
        // TODO: test filterAction
    }

    /**
     * Test the property 'filterMode'
     */
    @Test
    public void filterModeTest() {
        // TODO: test filterMode
    }

    /**
     * Test the property 'optOutMode'
     */
    @Test
    public void optOutModeTest() {
        // TODO: test optOutMode
    }

    /**
     * Test the property 'persistentNotificicationMode'
     */
    @Test
    public void persistentNotificicationModeTest() {
        // TODO: test persistentNotificicationMode
    }

    /**
     * Test the property 'responseMode'
     */
    @Test
    public void responseModeTest() {
        // TODO: test responseMode
    }

    /**
     * Test the property 'responseTime'
     */
    @Test
    public void responseTimeTest() {
        // TODO: test responseTime
    }

}
