/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.EventFilter;
import org.openapitools.client.model.EventParameterInfo;
import org.openapitools.client.model.OverviewEvent;
import org.openapitools.client.model.OverviewEventPagedResultsPublic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Get overview event
     *
     * Get overview event by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventIdOverviewGetTest() throws ApiException {
        String eventId = null;
        OverviewEvent response = api.eventsEventIdOverviewGet(eventId);
        // TODO: test validations
    }

    /**
     * Get event parameters
     *
     * Get parameters of an event by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventIdParametersGetTest() throws ApiException {
        String eventId = null;
        List<EventParameterInfo> response = api.eventsEventIdParametersGet(eventId);
        // TODO: test validations
    }

    /**
     * Get overview event paged.
     *
     * Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsPagedPostTest() throws ApiException {
        Integer maxResults = null;
        EventFilter eventFilter = null;
        OverviewEventPagedResultsPublic response = api.eventsPagedPost(maxResults, eventFilter);
        // TODO: test validations
    }

}
