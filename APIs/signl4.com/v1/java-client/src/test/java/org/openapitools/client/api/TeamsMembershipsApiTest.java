/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.InvitedUserInfo;
import org.openapitools.client.model.UserInfo;
import org.openapitools.client.model.UserInvitationInfo;
import org.openapitools.client.model.UserInvitationResult;
import org.openapitools.client.model.UserMembership;
import org.openapitools.client.model.UsersInvitation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsMembershipsApi
 */
@Disabled
public class TeamsMembershipsApiTest {

    private final TeamsMembershipsApi api = new TeamsMembershipsApi();

    /**
     * Get all invites of a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdMembershipsGetTest() throws ApiException {
        String teamId = null;
        List<InvitedUserInfo> response = api.teamsTeamIdMembershipsGet(teamId);
        // TODO: test validations
    }

    /**
     * Invite users to a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdMembershipsPostTest() throws ApiException {
        String teamId = null;
        UsersInvitation usersInvitation = null;
        List<UserInvitationResult> response = api.teamsTeamIdMembershipsPost(teamId, usersInvitation);
        // TODO: test validations
    }

    /**
     * Sends invite email again if an invite exists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdMembershipsResendInviteMailPostTest() throws ApiException {
        String teamId = null;
        UserInvitationInfo userInvitationInfo = null;
        String response = api.teamsTeamIdMembershipsResendInviteMailPost(teamId, userInvitationInfo);
        // TODO: test validations
    }

    /**
     * Removes a user or invitation from a team, and may delete the user if he is not in any team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdMembershipsUserIdDeleteTest() throws ApiException {
        String teamId = null;
        String userId = null;
        String requesterUserId = null;
        String response = api.teamsTeamIdMembershipsUserIdDelete(teamId, userId, requesterUserId);
        // TODO: test validations
    }

    /**
     * Update user&#39;s team membership.
     *
     * Updates the user&#39;s team membership. You can move the user to another team within the subscription  and/or change the user&#39;s role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdMembershipsUserIdPutTest() throws ApiException {
        String teamId = null;
        String userId = null;
        String requesterUserId = null;
        UserMembership userMembership = null;
        UserInfo response = api.teamsTeamIdMembershipsUserIdPut(teamId, userId, requesterUserId, userMembership);
        // TODO: test validations
    }

}
