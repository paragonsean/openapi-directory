/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlertSettings;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.EventSourceEndpointInfo;
import java.io.File;
import org.openapitools.client.model.TeamInfo;
import org.openapitools.client.model.TeamProfile;
import org.openapitools.client.model.TeamSetupProgress;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * Get infos for all teams of the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdTeamsGetTest() throws ApiException {
        String subscriptionId = null;
        List<TeamInfo> response = api.subscriptionsSubscriptionIdTeamsGet(subscriptionId);
        // TODO: test validations
    }

    /**
     * Get infos of all teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGetTest() throws ApiException {
        List<TeamInfo> response = api.teamsGet();
        // TODO: test validations
    }

    /**
     * Returns Alert Report
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdAlertReportsFileNameGetTest() throws ApiException {
        String teamId = null;
        String fileName = null;
        File response = api.teamsTeamIdAlertReportsFileNameGet(teamId, fileName);
        // TODO: test validations
    }

    /**
     * Get information about downloadable alert reports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdAlertReportsGetTest() throws ApiException {
        String teamId = null;
        List<Object> response = api.teamsTeamIdAlertReportsGet(teamId);
        // TODO: test validations
    }

    /**
     * Gets alert settings of a specific team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdAlertSettingsGetTest() throws ApiException {
        String teamId = null;
        AlertSettings response = api.teamsTeamIdAlertSettingsGet(teamId);
        // TODO: test validations
    }

    /**
     * Sets alert settings of a specific team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdAlertSettingsPostTest() throws ApiException {
        String teamId = null;
        AlertSettings alertSettings = null;
        AlertSettings response = api.teamsTeamIdAlertSettingsPost(teamId, alertSettings);
        // TODO: test validations
    }

    /**
     * Gets event sources of a specific team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdEventSourcesGetTest() throws ApiException {
        String teamId = null;
        List<EventSourceEndpointInfo> response = api.teamsTeamIdEventSourcesGet(teamId);
        // TODO: test validations
    }

    /**
     * Gets infos of a specific team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdGetTest() throws ApiException {
        String teamId = null;
        TeamInfo response = api.teamsTeamIdGet(teamId);
        // TODO: test validations
    }

    /**
     * Updates team profile of a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdProfilePutTest() throws ApiException {
        String teamId = null;
        TeamProfile teamProfile = null;
        TeamInfo response = api.teamsTeamIdProfilePut(teamId, teamProfile);
        // TODO: test validations
    }

    /**
     * Gets setup progress of a specific team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSetupProgressGetTest() throws ApiException {
        String teamId = null;
        TeamSetupProgress response = api.teamsTeamIdSetupProgressGet(teamId);
        // TODO: test validations
    }

}
