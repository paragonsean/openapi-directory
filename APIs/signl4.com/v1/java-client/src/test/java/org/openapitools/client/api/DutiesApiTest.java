/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteRangeInfo;
import org.openapitools.client.model.ErrorResponseContent;
import java.io.File;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ScheduleInfo;
import org.openapitools.client.model.TeamDutySummaryInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DutiesApi
 */
@Disabled
public class DutiesApiTest {

    private final DutiesApi api = new DutiesApi();

    /**
     * Download duty report with a specific fileName
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdDutyReportsFileNameGetTest() throws ApiException {
        String teamId = null;
        String fileName = null;
        File response = api.teamsTeamIdDutyReportsFileNameGet(teamId, fileName);
        // TODO: test validations
    }

    /**
     * Get Information about downloadable reports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdDutyReportsGetTest() throws ApiException {
        String teamId = null;
        List<Object> response = api.teamsTeamIdDutyReportsGet(teamId);
        // TODO: test validations
    }

    /**
     * Get duty assistant info for a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdDutysummaryGetTest() throws ApiException {
        String teamId = null;
        Boolean lastTwoDuties = null;
        TeamDutySummaryInfo response = api.teamsTeamIdDutysummaryGet(teamId, lastTwoDuties);
        // TODO: test validations
    }

    /**
     * Delete duty schedules in range
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesDeleteRangePostTest() throws ApiException {
        String teamId = null;
        DeleteRangeInfo deleteRangeInfo = null;
        List<ScheduleInfo> response = api.teamsTeamIdSchedulesDeleteRangePost(teamId, deleteRangeInfo);
        // TODO: test validations
    }

    /**
     * Delete a specific duty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesDutyIdDeleteTest() throws ApiException {
        String teamId = null;
        String dutyId = null;
        api.teamsTeamIdSchedulesDutyIdDelete(teamId, dutyId);
        // TODO: test validations
    }

    /**
     * Returns information about all duties that belong to the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesGetTest() throws ApiException {
        String teamId = null;
        String userId = null;
        OffsetDateTime minDate = null;
        Integer limit = null;
        List<ScheduleInfo> response = api.teamsTeamIdSchedulesGet(teamId, userId, minDate, limit);
        // TODO: test validations
    }

    /**
     * Save multiple schedules. It is possible to override existing schedules if you wish
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesMultiplePostTest() throws ApiException {
        String teamId = null;
        Boolean overrideExisting = null;
        List<ScheduleInfo> scheduleInfo = null;
        List<ScheduleInfo> response = api.teamsTeamIdSchedulesMultiplePost(teamId, overrideExisting, scheduleInfo);
        // TODO: test validations
    }

    /**
     * Create/Update given duty schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesPostTest() throws ApiException {
        String teamId = null;
        ScheduleInfo scheduleInfo = null;
        ScheduleInfo response = api.teamsTeamIdSchedulesPost(teamId, scheduleInfo);
        // TODO: test validations
    }

    /**
     * Returns information of the duty schedule with the specified Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTeamIdSchedulesScheduleIdGetTest() throws ApiException {
        String teamId = null;
        String scheduleId = null;
        ScheduleInfo response = api.teamsTeamIdSchedulesScheduleIdGet(teamId, scheduleId);
        // TODO: test validations
    }

}
