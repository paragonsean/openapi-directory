/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CategoryInfo;
import org.openapitools.client.model.CategoryMetrics;
import org.openapitools.client.model.CategorySubscriptionInfo;
import org.openapitools.client.model.ErrorResponseContent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
@Disabled
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    /**
     * Gets the names of all alert category images.  You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesImagesGetTest() throws ApiException {
        List<String> response = api.categoriesImagesGet();
        // TODO: test validations
    }

    /**
     * Delete an existing category
     *
     * Sample Request:                    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdDeleteTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        api.categoriesTeamIdCategoryIdDelete(teamId, categoryId);
        // TODO: test validations
    }

    /**
     * Get a specific category
     *
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdGetTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        CategoryInfo response = api.categoriesTeamIdCategoryIdGet(teamId, categoryId);
        // TODO: test validations
    }

    /**
     * Get metrics for a specific category
     *
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdMetricsGetTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        CategoryMetrics response = api.categoriesTeamIdCategoryIdMetricsGet(teamId, categoryId);
        // TODO: test validations
    }

    /**
     * Update an existing category
     *
     * Sample Request:                    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e      {          \&quot;name\&quot;: \&quot;Water-Updated\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;All\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              },              {                  \&quot;value\&quot;: \&quot;Wet\&quot;              }          ]      }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdPutTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        CategoryInfo categoryInfo = null;
        CategoryInfo response = api.categoriesTeamIdCategoryIdPut(teamId, categoryId, categoryInfo);
        // TODO: test validations
    }

    /**
     * Get category subscriptions
     *
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdSubscriptionsGetTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        List<CategorySubscriptionInfo> response = api.categoriesTeamIdCategoryIdSubscriptionsGet(teamId, categoryId);
        // TODO: test validations
    }

    /**
     * Set category subscriptions
     *
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions      {      }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdCategoryIdSubscriptionsPostTest() throws ApiException {
        String teamId = null;
        String categoryId = null;
        List<CategorySubscriptionInfo> categorySubscriptionInfo = null;
        List<CategorySubscriptionInfo> response = api.categoriesTeamIdCategoryIdSubscriptionsPost(teamId, categoryId, categorySubscriptionInfo);
        // TODO: test validations
    }

    /**
     * Get all categories
     *
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdGetTest() throws ApiException {
        String teamId = null;
        List<CategoryInfo> response = api.categoriesTeamIdGet(teamId);
        // TODO: test validations
    }

    /**
     * Get metrics for all categories
     *
     * Sample Request:                    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdMetricsGetTest() throws ApiException {
        String teamId = null;
        List<CategoryMetrics> response = api.categoriesTeamIdMetricsGet(teamId);
        // TODO: test validations
    }

    /**
     * Create a new category
     *
     * Sample Request:                    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7      {          \&quot;name\&quot;: \&quot;Water\&quot;,          \&quot;imageName\&quot;: \&quot;water.svg\&quot;,          \&quot;color\&quot;: \&quot;#0000cc\&quot;,          \&quot;keywordMatching\&quot;: \&quot;Any\&quot;,          \&quot;keywords\&quot;: [              {                  \&quot;value\&quot;: \&quot;H2O\&quot;              },              {                  \&quot;value\&quot;: \&quot;Water\&quot;              }          ]      }
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesTeamIdPostTest() throws ApiException {
        String teamId = null;
        CategoryInfo categoryInfo = null;
        CategoryInfo response = api.categoriesTeamIdPost(teamId, categoryInfo);
        // TODO: test validations
    }

}
