/*
 * SIGNL4 API
 * <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponseContent;
import org.openapitools.client.model.InventoryScriptInfo;
import org.openapitools.client.model.ScriptInstanceCustomUserData;
import org.openapitools.client.model.ScriptInstanceDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScriptsApi
 */
@Disabled
public class ScriptsApiTest {

    private final ScriptsApi api = new ScriptsApi();

    /**
     * Returns all script instances of the SIGNL4 team
     *
     * Returns all script instances in the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesGetTest() throws ApiException {
        String teamId = null;
        List<ScriptInstanceDetails> response = api.scriptsInstancesGet(teamId);
        // TODO: test validations
    }

    /**
     * Updates custom data of a given script instance which includes its display name.
     *
     * Updates the specified script instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdDataPutTest() throws ApiException {
        String instanceId = null;
        ScriptInstanceCustomUserData scriptInstanceCustomUserData = null;
        ScriptInstanceDetails response = api.scriptsInstancesInstanceIdDataPut(instanceId, scriptInstanceCustomUserData);
        // TODO: test validations
    }

    /**
     * Deletes a script instance.
     *
     * Gets the script instance specified by the passed instance id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdDeleteTest() throws ApiException {
        String instanceId = null;
        api.scriptsInstancesInstanceIdDelete(instanceId);
        // TODO: test validations
    }

    /**
     * Disables a given script instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdDisablePostTest() throws ApiException {
        String instanceId = null;
        ScriptInstanceDetails response = api.scriptsInstancesInstanceIdDisablePost(instanceId);
        // TODO: test validations
    }

    /**
     * Enables a script instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdEnablePostTest() throws ApiException {
        String instanceId = null;
        ScriptInstanceDetails response = api.scriptsInstancesInstanceIdEnablePost(instanceId);
        // TODO: test validations
    }

    /**
     * Returns all information about a given script instance which includes its runtime status.
     *
     * Gets the script instance specified by the passed instance id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdGetTest() throws ApiException {
        String instanceId = null;
        ScriptInstanceDetails response = api.scriptsInstancesInstanceIdGet(instanceId);
        // TODO: test validations
    }

    /**
     * Updates a given script instance, typically used for updating the configuration of a script.
     *
     * Updates the specified script instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesInstanceIdPutTest() throws ApiException {
        String instanceId = null;
        ScriptInstanceDetails scriptInstanceDetails = null;
        ScriptInstanceDetails response = api.scriptsInstancesInstanceIdPut(instanceId, scriptInstanceDetails);
        // TODO: test validations
    }

    /**
     * Creates a new script instance in the in the SIGNL4 team.
     *
     * Creates a new script instance of the script specified in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInstancesPostTest() throws ApiException {
        ScriptInstanceDetails scriptInstanceDetails = null;
        ScriptInstanceDetails response = api.scriptsInstancesPost(scriptInstanceDetails);
        // TODO: test validations
    }

    /**
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     *
     * Returns all available inventory scripts which can be added to a SIGNL4 subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInventoryGetTest() throws ApiException {
        List<InventoryScriptInfo> response = api.scriptsInventoryGet();
        // TODO: test validations
    }

    /**
     * Returns all inventory scripts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInventoryParsedGetTest() throws ApiException {
        String language = null;
        List<InventoryScriptInfo> response = api.scriptsInventoryParsedGet(language);
        // TODO: test validations
    }

    /**
     * Returns an inventory script by its id.
     *
     * Gets the script specified by the passed script id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scriptsInventoryParsedScriptIdGetTest() throws ApiException {
        String scriptId = null;
        String language = null;
        ScriptInstanceDetails response = api.scriptsInventoryParsedScriptIdGet(scriptId, language);
        // TODO: test validations
    }

}
