/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Member from '../model/Member';
import Memberresponse from '../model/Memberresponse';
import Members from '../model/Members';

/**
* Members service.
* @module api/MembersApi
* @version 1.0.0
*/
export default class MembersApi {

    /**
    * Constructs a new MembersApi. 
    * @alias module:api/MembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMember operation.
     * @callback module:api/MembersApi~createMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Memberresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new member in the Vestorly Platform
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/Member} member Member you want to create
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/MembersApi~createMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Memberresponse}
     */
    createMember(vestorlyAuth, member, opts, callback) {
      opts = opts || {};
      let postBody = member;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling createMember");
      }
      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling createMember");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Memberresponse;
      return this.apiClient.callApi(
        '/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findMemberByID operation.
     * @callback module:api/MembersApi~findMemberByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Memberresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single member
     * @param {String} id Mongo ID of member to fetch
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/MembersApi~findMemberByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Memberresponse}
     */
    findMemberByID(id, vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findMemberByID");
      }
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findMemberByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Memberresponse;
      return this.apiClient.callApi(
        '/members/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findMembers operation.
     * @callback module:api/MembersApi~findMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Members} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all members
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {Number} [start] Skips number of members from start
     * @param {Number} [limit] Number of members to return
     * @param {module:api/MembersApi~findMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Members}
     */
    findMembers(vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findMembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Members;
      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMemberByID operation.
     * @callback module:api/MembersApi~updateMemberByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Memberresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single member
     * @param {String} id Mongo ID of member to fetch
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/Member} member Member you want to update
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/MembersApi~updateMemberByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Memberresponse}
     */
    updateMemberByID(id, vestorlyAuth, member, opts, callback) {
      opts = opts || {};
      let postBody = member;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMemberByID");
      }
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling updateMemberByID");
      }
      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling updateMemberByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Memberresponse;
      return this.apiClient.callApi(
        '/members/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
