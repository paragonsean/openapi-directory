/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomFeedFilterInput from '../model/CustomFeedFilterInput';
import CustomFeedFilterresponse from '../model/CustomFeedFilterresponse';
import CustomFeedFilters from '../model/CustomFeedFilters';

/**
* CustomFeedFilters service.
* @module api/CustomFeedFiltersApi
* @version 1.0.0
*/
export default class CustomFeedFiltersApi {

    /**
    * Constructs a new CustomFeedFiltersApi. 
    * @alias module:api/CustomFeedFiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomFeedFilter operation.
     * @callback module:api/CustomFeedFiltersApi~createCustomFeedFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFeedFilterresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Category filter
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/CustomFeedFilterInput} customFeedFilter Category filter to add
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/CustomFeedFiltersApi~createCustomFeedFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFeedFilterresponse}
     */
    createCustomFeedFilter(vestorlyAuth, customFeedFilter, opts, callback) {
      opts = opts || {};
      let postBody = customFeedFilter;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling createCustomFeedFilter");
      }
      // verify the required parameter 'customFeedFilter' is set
      if (customFeedFilter === undefined || customFeedFilter === null) {
        throw new Error("Missing the required parameter 'customFeedFilter' when calling createCustomFeedFilter");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomFeedFilterresponse;
      return this.apiClient.callApi(
        '/custom_feed_filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomFeedFilter operation.
     * @callback module:api/CustomFeedFiltersApi~deleteCustomFeedFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFeedFilterresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the Category's filter
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id id of category filter to delete
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/CustomFeedFiltersApi~deleteCustomFeedFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFeedFilterresponse}
     */
    deleteCustomFeedFilter(vestorlyAuth, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling deleteCustomFeedFilter");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomFeedFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomFeedFilterresponse;
      return this.apiClient.callApi(
        '/custom_feed_filters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCustomFeedFilterByID operation.
     * @callback module:api/CustomFeedFiltersApi~findCustomFeedFilterByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFeedFilterresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Category's filter
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id Custom Feed Filter Id to fetch
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/CustomFeedFiltersApi~findCustomFeedFilterByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFeedFilterresponse}
     */
    findCustomFeedFilterByID(vestorlyAuth, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findCustomFeedFilterByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findCustomFeedFilterByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CustomFeedFilterresponse;
      return this.apiClient.callApi(
        '/custom_feed_filters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findCustomFeedFilters operation.
     * @callback module:api/CustomFeedFiltersApi~findCustomFeedFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFeedFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Categorie's filters
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/CustomFeedFiltersApi~findCustomFeedFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFeedFilters}
     */
    findCustomFeedFilters(vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findCustomFeedFilters");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CustomFeedFilters;
      return this.apiClient.callApi(
        '/custom_feed_filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFeedFilterById operation.
     * @callback module:api/CustomFeedFiltersApi~updateCustomFeedFilterByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFeedFilterresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Category Feed Filter
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id id of category filter to update
     * @param {module:model/CustomFeedFilterInput} customFeedFilter Category filter to add
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/CustomFeedFiltersApi~updateCustomFeedFilterByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFeedFilterresponse}
     */
    updateCustomFeedFilterById(vestorlyAuth, id, customFeedFilter, opts, callback) {
      opts = opts || {};
      let postBody = customFeedFilter;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling updateCustomFeedFilterById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomFeedFilterById");
      }
      // verify the required parameter 'customFeedFilter' is set
      if (customFeedFilter === undefined || customFeedFilter === null) {
        throw new Error("Missing the required parameter 'customFeedFilter' when calling updateCustomFeedFilterById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomFeedFilterresponse;
      return this.apiClient.callApi(
        '/custom_feed_filters/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
