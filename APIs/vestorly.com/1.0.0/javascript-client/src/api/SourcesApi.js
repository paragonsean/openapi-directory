/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SourceInput from '../model/SourceInput';
import Sourceresponse from '../model/Sourceresponse';
import Sources from '../model/Sources';

/**
* Sources service.
* @module api/SourcesApi
* @version 1.0.0
*/
export default class SourcesApi {

    /**
    * Constructs a new SourcesApi. 
    * @alias module:api/SourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSource operation.
     * @callback module:api/SourcesApi~createSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sourceresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create source
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/SourceInput} source Source
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/SourcesApi~createSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sourceresponse}
     */
    createSource(vestorlyAuth, source, opts, callback) {
      opts = opts || {};
      let postBody = source;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling createSource");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling createSource");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Sourceresponse;
      return this.apiClient.callApi(
        '/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSources operation.
     * @callback module:api/SourcesApi~findSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all sources
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/SourcesApi~findSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sources}
     */
    findSources(vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findSources");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Sources;
      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceByID operation.
     * @callback module:api/SourcesApi~getSourceByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sourceresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Source By ID
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id ID of source to fetch
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/SourcesApi~getSourceByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sourceresponse}
     */
    getSourceByID(vestorlyAuth, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling getSourceByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSourceByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Sourceresponse;
      return this.apiClient.callApi(
        '/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceByID operation.
     * @callback module:api/SourcesApi~updateSourceByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sourceresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Source By ID
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id ID of source to fetch
     * @param {module:model/SourceInput} source Source
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/SourcesApi~updateSourceByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sourceresponse}
     */
    updateSourceByID(vestorlyAuth, id, source, opts, callback) {
      opts = opts || {};
      let postBody = source;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling updateSourceByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSourceByID");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling updateSourceByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Sourceresponse;
      return this.apiClient.callApi(
        '/sources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
