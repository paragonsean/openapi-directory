/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Post from '../model/Post';
import PostInput from '../model/PostInput';
import Postresponse from '../model/Postresponse';
import Posts from '../model/Posts';

/**
* Posts service.
* @module api/PostsApi
* @version 1.0.0
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:api/PostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPost operation.
     * @callback module:api/PostsApi~createPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new post in the Vestorly Platform
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/PostInput} post Post you want to create
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/PostsApi~createPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postresponse}
     */
    createPost(vestorlyAuth, post, opts, callback) {
      opts = opts || {};
      let postBody = post;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling createPost");
      }
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling createPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Postresponse;
      return this.apiClient.callApi(
        '/posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findPosts operation.
     * @callback module:api/PostsApi~findPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Posts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all posts
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {String} [textQuery] Filter post by parameters
     * @param {String} [externalUrl] Filter by External URL
     * @param {String} [isPublished] Filter by is_published boolean
     * @param {module:api/PostsApi~findPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Posts}
     */
    findPosts(vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findPosts");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken'],
        'text_query': opts['textQuery'],
        'external_url': opts['externalUrl'],
        'is_published': opts['isPublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Posts;
      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostByID operation.
     * @callback module:api/PostsApi~getPostByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query all posts
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id ID of post to fetch
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/PostsApi~getPostByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postresponse}
     */
    getPostByID(vestorlyAuth, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling getPostByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPostByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Postresponse;
      return this.apiClient.callApi(
        '/posts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePostByID operation.
     * @callback module:api/PostsApi~updatePostByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Postresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update A Post
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {String} id id of post to update
     * @param {module:model/Post} post Post you want to update
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/PostsApi~updatePostByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Postresponse}
     */
    updatePostByID(vestorlyAuth, id, post, opts, callback) {
      opts = opts || {};
      let postBody = post;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling updatePostByID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePostByID");
      }
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling updatePostByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Postresponse;
      return this.apiClient.callApi(
        '/posts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
