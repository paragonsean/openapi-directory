/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewsletterSettings from '../model/NewsletterSettings';
import NewsletterSettingsInput from '../model/NewsletterSettingsInput';
import Newslettersettingresponse from '../model/Newslettersettingresponse';

/**
* NewsletterSettings service.
* @module api/NewsletterSettingsApi
* @version 1.0.0
*/
export default class NewsletterSettingsApi {

    /**
    * Constructs a new NewsletterSettingsApi. 
    * @alias module:api/NewsletterSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findNewsletterSettings operation.
     * @callback module:api/NewsletterSettingsApi~findNewsletterSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewsletterSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all newsletter settings
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/NewsletterSettingsApi~findNewsletterSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewsletterSettings}
     */
    findNewsletterSettings(vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findNewsletterSettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = NewsletterSettings;
      return this.apiClient.callApi(
        '/newsletter_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findNewsletterSettingsByID operation.
     * @callback module:api/NewsletterSettingsApi~findNewsletterSettingsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Newslettersettingresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single newsletter settings if the user has access
     * @param {String} id Mongo ID of newsletter settings to fetch
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/NewsletterSettingsApi~findNewsletterSettingsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Newslettersettingresponse}
     */
    findNewsletterSettingsByID(id, vestorlyAuth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findNewsletterSettingsByID");
      }
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling findNewsletterSettingsByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Newslettersettingresponse;
      return this.apiClient.callApi(
        '/newsletter_settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNewsletterSettingsByID operation.
     * @callback module:api/NewsletterSettingsApi~updateNewsletterSettingsByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Newslettersettingresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single newsletter setting by ID
     * @param {String} id Mongo ID of newsletter settings to update
     * @param {String} vestorlyAuth Vestorly Auth Token
     * @param {module:model/NewsletterSettingsInput} newsletterSetting newsletter settings
     * @param {Object} opts Optional parameters
     * @param {String} [accessToken] OAuth Token
     * @param {module:api/NewsletterSettingsApi~updateNewsletterSettingsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Newslettersettingresponse}
     */
    updateNewsletterSettingsByID(id, vestorlyAuth, newsletterSetting, opts, callback) {
      opts = opts || {};
      let postBody = newsletterSetting;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNewsletterSettingsByID");
      }
      // verify the required parameter 'vestorlyAuth' is set
      if (vestorlyAuth === undefined || vestorlyAuth === null) {
        throw new Error("Missing the required parameter 'vestorlyAuth' when calling updateNewsletterSettingsByID");
      }
      // verify the required parameter 'newsletterSetting' is set
      if (newsletterSetting === undefined || newsletterSetting === null) {
        throw new Error("Missing the required parameter 'newsletterSetting' when calling updateNewsletterSettingsByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'vestorly_auth': vestorlyAuth,
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access_token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Newslettersettingresponse;
      return this.apiClient.callApi(
        '/newsletter_settings/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
