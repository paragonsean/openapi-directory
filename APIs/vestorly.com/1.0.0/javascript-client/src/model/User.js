/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.0.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param id {String} 
     */
    constructor(id) { 
        
        User.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['_id'] = id;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new_user')) {
                obj['new_user'] = ApiClient.convertToType(data['new_user'], 'Boolean');
            }
            if (data.hasOwnProperty('picture_url')) {
                obj['picture_url'] = ApiClient.convertToType(data['picture_url'], 'String');
            }
            if (data.hasOwnProperty('plan_expired')) {
                obj['plan_expired'] = ApiClient.convertToType(data['plan_expired'], 'Boolean');
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('plan_setup')) {
                obj['plan_setup'] = ApiClient.convertToType(data['plan_setup'], 'Boolean');
            }
            if (data.hasOwnProperty('plan_status')) {
                obj['plan_status'] = ApiClient.convertToType(data['plan_status'], 'String');
            }
            if (data.hasOwnProperty('plan_stripe')) {
                obj['plan_stripe'] = ApiClient.convertToType(data['plan_stripe'], 'Boolean');
            }
            if (data.hasOwnProperty('show_tour')) {
                obj['show_tour'] = ApiClient.convertToType(data['show_tour'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('user_type')) {
                obj['user_type'] = ApiClient.convertToType(data['user_type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['picture_url'] && !(typeof data['picture_url'] === 'string' || data['picture_url'] instanceof String)) {
            throw new Error("Expected the field `picture_url` to be a primitive type in the JSON string but got " + data['picture_url']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['plan_status'] && !(typeof data['plan_status'] === 'string' || data['plan_status'] instanceof String)) {
            throw new Error("Expected the field `plan_status` to be a primitive type in the JSON string but got " + data['plan_status']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['user_type'] && !(typeof data['user_type'] === 'string' || data['user_type'] instanceof String)) {
            throw new Error("Expected the field `user_type` to be a primitive type in the JSON string but got " + data['user_type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

User.RequiredProperties = ["_id"];

/**
 * @member {String} _id
 */
User.prototype['_id'] = undefined;

/**
 * @member {String} company
 */
User.prototype['company'] = undefined;

/**
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * @member {Boolean} new_user
 */
User.prototype['new_user'] = undefined;

/**
 * @member {String} picture_url
 */
User.prototype['picture_url'] = undefined;

/**
 * @member {Boolean} plan_expired
 */
User.prototype['plan_expired'] = undefined;

/**
 * @member {String} plan_id
 */
User.prototype['plan_id'] = undefined;

/**
 * @member {Boolean} plan_setup
 */
User.prototype['plan_setup'] = undefined;

/**
 * @member {String} plan_status
 */
User.prototype['plan_status'] = undefined;

/**
 * @member {Boolean} plan_stripe
 */
User.prototype['plan_stripe'] = undefined;

/**
 * @member {Boolean} show_tour
 */
User.prototype['show_tour'] = undefined;

/**
 * @member {String} slug
 */
User.prototype['slug'] = undefined;

/**
 * @member {String} user_type
 */
User.prototype['user_type'] = undefined;

/**
 * @member {String} username
 */
User.prototype['username'] = undefined;

/**
 * @member {String} website
 */
User.prototype['website'] = undefined;






export default User;

