/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Settings from './Settings';
import User from './User';

/**
 * The Session model module.
 * @module model/Session
 * @version 1.0.0
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('current_user')) {
                obj['current_user'] = User.constructFromObject(data['current_user']);
            }
            if (data.hasOwnProperty('new_user')) {
                obj['new_user'] = ApiClient.convertToType(data['new_user'], 'Boolean');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = Settings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('vestorly-auth')) {
                obj['vestorly-auth'] = ApiClient.convertToType(data['vestorly-auth'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // validate the optional field `current_user`
        if (data['current_user']) { // data not null
          User.validateJSON(data['current_user']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          Settings.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['vestorly-auth'] && !(typeof data['vestorly-auth'] === 'string' || data['vestorly-auth'] instanceof String)) {
            throw new Error("Expected the field `vestorly-auth` to be a primitive type in the JSON string but got " + data['vestorly-auth']);
        }

        return true;
    }


}



/**
 * @member {String} _id
 */
Session.prototype['_id'] = undefined;

/**
 * @member {module:model/User} current_user
 */
Session.prototype['current_user'] = undefined;

/**
 * @member {Boolean} new_user
 */
Session.prototype['new_user'] = undefined;

/**
 * @member {module:model/Settings} settings
 */
Session.prototype['settings'] = undefined;

/**
 * @member {String} vestorly-auth
 */
Session.prototype['vestorly-auth'] = undefined;






export default Session;

