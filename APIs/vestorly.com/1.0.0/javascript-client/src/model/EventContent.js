/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventContent model module.
 * @module model/EventContent
 * @version 1.0.0
 */
class EventContent {
    /**
     * Constructs a new <code>EventContent</code>.
     * @alias module:model/EventContent
     */
    constructor() { 
        
        EventContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventContent} obj Optional instance to populate.
     * @return {module:model/EventContent} The populated <code>EventContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventContent();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('content_field')) {
                obj['content_field'] = ApiClient.convertToType(data['content_field'], 'String');
            }
            if (data.hasOwnProperty('content_id')) {
                obj['content_id'] = ApiClient.convertToType(data['content_id'], 'String');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['content_field'] && !(typeof data['content_field'] === 'string' || data['content_field'] instanceof String)) {
            throw new Error("Expected the field `content_field` to be a primitive type in the JSON string but got " + data['content_field']);
        }
        // ensure the json data is a string
        if (data['content_id'] && !(typeof data['content_id'] === 'string' || data['content_id'] instanceof String)) {
            throw new Error("Expected the field `content_id` to be a primitive type in the JSON string but got " + data['content_id']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Mongo id of event
 * @member {String} _id
 */
EventContent.prototype['_id'] = undefined;

/**
 * @member {String} content_field
 */
EventContent.prototype['content_field'] = undefined;

/**
 * @member {String} content_id
 */
EventContent.prototype['content_id'] = undefined;

/**
 * @member {String} content_type
 */
EventContent.prototype['content_type'] = undefined;

/**
 * @member {String} created_at
 */
EventContent.prototype['created_at'] = undefined;

/**
 * @member {String} slug
 */
EventContent.prototype['slug'] = undefined;

/**
 * @member {String} updated_at
 */
EventContent.prototype['updated_at'] = undefined;






export default EventContent;

