/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Features from './Features';
import OrgSetting from './OrgSetting';
import PersonalSettings from './PersonalSettings';

/**
 * The Settings model module.
 * @module model/Settings
 * @version 1.0.0
 */
class Settings {
    /**
     * Constructs a new <code>Settings</code>.
     * @alias module:model/Settings
     * @param id {String} 
     */
    constructor(id) { 
        
        Settings.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['_id'] = id;
    }

    /**
     * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settings} obj Optional instance to populate.
     * @return {module:model/Settings} The populated <code>Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settings();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('adv_brochure')) {
                obj['adv_brochure'] = ApiClient.convertToType(data['adv_brochure'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('disclosure')) {
                obj['disclosure'] = ApiClient.convertToType(data['disclosure'], 'String');
            }
            if (data.hasOwnProperty('feature')) {
                obj['feature'] = Features.constructFromObject(data['feature']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgsetting')) {
                obj['orgsetting'] = OrgSetting.constructFromObject(data['orgsetting']);
            }
            if (data.hasOwnProperty('personalsetting')) {
                obj['personalsetting'] = PersonalSettings.constructFromObject(data['personalsetting']);
            }
            if (data.hasOwnProperty('picture_url')) {
                obj['picture_url'] = ApiClient.convertToType(data['picture_url'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Settings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['adv_brochure'] && !(typeof data['adv_brochure'] === 'string' || data['adv_brochure'] instanceof String)) {
            throw new Error("Expected the field `adv_brochure` to be a primitive type in the JSON string but got " + data['adv_brochure']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['disclosure'] && !(typeof data['disclosure'] === 'string' || data['disclosure'] instanceof String)) {
            throw new Error("Expected the field `disclosure` to be a primitive type in the JSON string but got " + data['disclosure']);
        }
        // validate the optional field `feature`
        if (data['feature']) { // data not null
          Features.validateJSON(data['feature']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `orgsetting`
        if (data['orgsetting']) { // data not null
          OrgSetting.validateJSON(data['orgsetting']);
        }
        // validate the optional field `personalsetting`
        if (data['personalsetting']) { // data not null
          PersonalSettings.validateJSON(data['personalsetting']);
        }
        // ensure the json data is a string
        if (data['picture_url'] && !(typeof data['picture_url'] === 'string' || data['picture_url'] instanceof String)) {
            throw new Error("Expected the field `picture_url` to be a primitive type in the JSON string but got " + data['picture_url']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Settings.RequiredProperties = ["_id"];

/**
 * @member {String} _id
 */
Settings.prototype['_id'] = undefined;

/**
 * @member {String} adv_brochure
 */
Settings.prototype['adv_brochure'] = undefined;

/**
 * @member {String} company
 */
Settings.prototype['company'] = undefined;

/**
 * @member {String} disclosure
 */
Settings.prototype['disclosure'] = undefined;

/**
 * @member {module:model/Features} feature
 */
Settings.prototype['feature'] = undefined;

/**
 * @member {String} name
 */
Settings.prototype['name'] = undefined;

/**
 * @member {module:model/OrgSetting} orgsetting
 */
Settings.prototype['orgsetting'] = undefined;

/**
 * @member {module:model/PersonalSettings} personalsetting
 */
Settings.prototype['personalsetting'] = undefined;

/**
 * @member {String} picture_url
 */
Settings.prototype['picture_url'] = undefined;

/**
 * @member {String} slug
 */
Settings.prototype['slug'] = undefined;

/**
 * @member {String} website
 */
Settings.prototype['website'] = undefined;






export default Settings;

