/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Source model module.
 * @module model/Source
 * @version 1.0.0
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * @alias module:model/Source
     * @param id {String} 
     * @param name {String} 
     * @param rssPublisher {String} 
     * @param url {String} 
     */
    constructor(id, name, rssPublisher, url) { 
        
        Source.initialize(this, id, name, rssPublisher, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, rssPublisher, url) { 
        obj['_id'] = id;
        obj['name'] = name;
        obj['rss_publisher'] = rssPublisher;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('custom_rss_feed')) {
                obj['custom_rss_feed'] = ApiClient.convertToType(data['custom_rss_feed'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rss_publisher')) {
                obj['rss_publisher'] = ApiClient.convertToType(data['rss_publisher'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Source.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rss_publisher'] && !(typeof data['rss_publisher'] === 'string' || data['rss_publisher'] instanceof String)) {
            throw new Error("Expected the field `rss_publisher` to be a primitive type in the JSON string but got " + data['rss_publisher']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Source.RequiredProperties = ["_id", "name", "rss_publisher", "url"];

/**
 * @member {String} _id
 */
Source.prototype['_id'] = undefined;

/**
 * @member {Boolean} custom_rss_feed
 */
Source.prototype['custom_rss_feed'] = undefined;

/**
 * @member {Boolean} enabled
 */
Source.prototype['enabled'] = undefined;

/**
 * @member {String} logo_url
 */
Source.prototype['logo_url'] = undefined;

/**
 * @member {String} name
 */
Source.prototype['name'] = undefined;

/**
 * @member {String} rss_publisher
 */
Source.prototype['rss_publisher'] = undefined;

/**
 * @member {String} url
 */
Source.prototype['url'] = undefined;






export default Source;

