/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventContent from './EventContent';

/**
 * The EventInput model module.
 * @module model/EventInput
 * @version 1.0.0
 */
class EventInput {
    /**
     * Constructs a new <code>EventInput</code>.
     * @alias module:model/EventInput
     * @param originalUrl {String} 
     * @param subjectEmail {String} 
     * @param type {module:model/EventInput.TypeEnum} 
     */
    constructor(originalUrl, subjectEmail, type) { 
        
        EventInput.initialize(this, originalUrl, subjectEmail, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, originalUrl, subjectEmail, type) { 
        obj['original_url'] = originalUrl;
        obj['subject_email'] = subjectEmail;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>EventInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventInput} obj Optional instance to populate.
     * @return {module:model/EventInput} The populated <code>EventInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventInput();

            if (data.hasOwnProperty('advisor_id')) {
                obj['advisor_id'] = ApiClient.convertToType(data['advisor_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('event_content')) {
                obj['event_content'] = EventContent.constructFromObject(data['event_content']);
            }
            if (data.hasOwnProperty('original_url')) {
                obj['original_url'] = ApiClient.convertToType(data['original_url'], 'String');
            }
            if (data.hasOwnProperty('originator_email')) {
                obj['originator_email'] = ApiClient.convertToType(data['originator_email'], 'String');
            }
            if (data.hasOwnProperty('originator_id')) {
                obj['originator_id'] = ApiClient.convertToType(data['originator_id'], 'String');
            }
            if (data.hasOwnProperty('parent_event_id')) {
                obj['parent_event_id'] = ApiClient.convertToType(data['parent_event_id'], 'String');
            }
            if (data.hasOwnProperty('referer')) {
                obj['referer'] = ApiClient.convertToType(data['referer'], 'String');
            }
            if (data.hasOwnProperty('subject_email')) {
                obj['subject_email'] = ApiClient.convertToType(data['subject_email'], 'String');
            }
            if (data.hasOwnProperty('subject_id')) {
                obj['subject_id'] = ApiClient.convertToType(data['subject_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['advisor_id'] && !(typeof data['advisor_id'] === 'string' || data['advisor_id'] instanceof String)) {
            throw new Error("Expected the field `advisor_id` to be a primitive type in the JSON string but got " + data['advisor_id']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `event_content`
        if (data['event_content']) { // data not null
          EventContent.validateJSON(data['event_content']);
        }
        // ensure the json data is a string
        if (data['original_url'] && !(typeof data['original_url'] === 'string' || data['original_url'] instanceof String)) {
            throw new Error("Expected the field `original_url` to be a primitive type in the JSON string but got " + data['original_url']);
        }
        // ensure the json data is a string
        if (data['originator_email'] && !(typeof data['originator_email'] === 'string' || data['originator_email'] instanceof String)) {
            throw new Error("Expected the field `originator_email` to be a primitive type in the JSON string but got " + data['originator_email']);
        }
        // ensure the json data is a string
        if (data['originator_id'] && !(typeof data['originator_id'] === 'string' || data['originator_id'] instanceof String)) {
            throw new Error("Expected the field `originator_id` to be a primitive type in the JSON string but got " + data['originator_id']);
        }
        // ensure the json data is a string
        if (data['parent_event_id'] && !(typeof data['parent_event_id'] === 'string' || data['parent_event_id'] instanceof String)) {
            throw new Error("Expected the field `parent_event_id` to be a primitive type in the JSON string but got " + data['parent_event_id']);
        }
        // ensure the json data is a string
        if (data['referer'] && !(typeof data['referer'] === 'string' || data['referer'] instanceof String)) {
            throw new Error("Expected the field `referer` to be a primitive type in the JSON string but got " + data['referer']);
        }
        // ensure the json data is a string
        if (data['subject_email'] && !(typeof data['subject_email'] === 'string' || data['subject_email'] instanceof String)) {
            throw new Error("Expected the field `subject_email` to be a primitive type in the JSON string but got " + data['subject_email']);
        }
        // ensure the json data is a string
        if (data['subject_id'] && !(typeof data['subject_id'] === 'string' || data['subject_id'] instanceof String)) {
            throw new Error("Expected the field `subject_id` to be a primitive type in the JSON string but got " + data['subject_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

EventInput.RequiredProperties = ["original_url", "subject_email", "type"];

/**
 * @member {String} advisor_id
 */
EventInput.prototype['advisor_id'] = undefined;

/**
 * @member {String} created_at
 */
EventInput.prototype['created_at'] = undefined;

/**
 * @member {module:model/EventContent} event_content
 */
EventInput.prototype['event_content'] = undefined;

/**
 * @member {String} original_url
 */
EventInput.prototype['original_url'] = undefined;

/**
 * @member {String} originator_email
 */
EventInput.prototype['originator_email'] = undefined;

/**
 * @member {String} originator_id
 */
EventInput.prototype['originator_id'] = undefined;

/**
 * @member {String} parent_event_id
 */
EventInput.prototype['parent_event_id'] = undefined;

/**
 * @member {String} referer
 */
EventInput.prototype['referer'] = undefined;

/**
 * @member {String} subject_email
 */
EventInput.prototype['subject_email'] = undefined;

/**
 * @member {String} subject_id
 */
EventInput.prototype['subject_id'] = undefined;

/**
 * @member {module:model/EventInput.TypeEnum} type
 */
EventInput.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EventInput['TypeEnum'] = {

    /**
     * value: "page_view"
     * @const
     */
    "page_view": "page_view",

    /**
     * value: "sign_up"
     * @const
     */
    "sign_up": "sign_up",

    /**
     * value: "sign_in"
     * @const
     */
    "sign_in": "sign_in",

    /**
     * value: "content_posted"
     * @const
     */
    "content_posted": "content_posted",

    /**
     * value: "create_post"
     * @const
     */
    "create_post": "create_post",

    /**
     * value: "publish_post"
     * @const
     */
    "publish_post": "publish_post",

    /**
     * value: "update_post"
     * @const
     */
    "update_post": "update_post",

    /**
     * value: "delete_post"
     * @const
     */
    "delete_post": "delete_post",

    /**
     * value: "unpublish_post"
     * @const
     */
    "unpublish_post": "unpublish_post",

    /**
     * value: "invite"
     * @const
     */
    "invite": "invite",

    /**
     * value: "publish_newsletter"
     * @const
     */
    "publish_newsletter": "publish_newsletter",

    /**
     * value: "publish_social"
     * @const
     */
    "publish_social": "publish_social",

    /**
     * value: "click"
     * @const
     */
    "click": "click",

    /**
     * value: "delivered"
     * @const
     */
    "delivered": "delivered",

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "dropped"
     * @const
     */
    "dropped": "dropped",

    /**
     * value: "bounce"
     * @const
     */
    "bounce": "bounce"
};



export default EventInput;

