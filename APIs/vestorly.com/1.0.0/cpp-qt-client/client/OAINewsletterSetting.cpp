/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewsletterSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewsletterSetting::OAINewsletterSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewsletterSetting::OAINewsletterSetting() {
    this->initializeModel();
}

OAINewsletterSetting::~OAINewsletterSetting() {}

void OAINewsletterSetting::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_banner_color_isSet = false;
    m_banner_color_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_email_accent_color_isSet = false;
    m_email_accent_color_isValid = false;

    m_email_day_of_week_isSet = false;
    m_email_day_of_week_isValid = false;

    m_email_hour_isSet = false;
    m_email_hour_isValid = false;

    m_email_status_isSet = false;
    m_email_status_isValid = false;

    m_facebook_active_wall_isSet = false;
    m_facebook_active_wall_isValid = false;

    m_footer_email_font_isSet = false;
    m_footer_email_font_isValid = false;

    m_footer_html_isSet = false;
    m_footer_html_isValid = false;

    m_footer_image_url_isSet = false;
    m_footer_image_url_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_header_background_color_isSet = false;
    m_header_background_color_isValid = false;

    m_header_image_url_isSet = false;
    m_header_image_url_isValid = false;

    m_intro_text_isSet = false;
    m_intro_text_isValid = false;

    m_linkedin_active_wall_isSet = false;
    m_linkedin_active_wall_isValid = false;

    m_montage_enabled_isSet = false;
    m_montage_enabled_isValid = false;

    m_montage_facebook_image_url_isSet = false;
    m_montage_facebook_image_url_isValid = false;

    m_montage_linkedin_image_url_isSet = false;
    m_montage_linkedin_image_url_isValid = false;

    m_montage_title_isSet = false;
    m_montage_title_isValid = false;

    m_montage_twitter_image_url_isSet = false;
    m_montage_twitter_image_url_isValid = false;

    m_newsletter_ids_isSet = false;
    m_newsletter_ids_isValid = false;

    m_newsletter_type_isSet = false;
    m_newsletter_type_isValid = false;

    m_primary_email_font_isSet = false;
    m_primary_email_font_isValid = false;

    m_salutation_text_isSet = false;
    m_salutation_text_isValid = false;

    m_social_day_of_week_isSet = false;
    m_social_day_of_week_isValid = false;

    m_social_description_isSet = false;
    m_social_description_isValid = false;

    m_social_posting_text_isSet = false;
    m_social_posting_text_isValid = false;

    m_social_title_isSet = false;
    m_social_title_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_title_color_isSet = false;
    m_title_color_isValid = false;
}

void OAINewsletterSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewsletterSetting::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_banner_color_isValid = ::OpenAPI::fromJsonValue(m_banner_color, json[QString("banner_color")]);
    m_banner_color_isSet = !json[QString("banner_color")].isNull() && m_banner_color_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_email_accent_color_isValid = ::OpenAPI::fromJsonValue(m_email_accent_color, json[QString("email_accent_color")]);
    m_email_accent_color_isSet = !json[QString("email_accent_color")].isNull() && m_email_accent_color_isValid;

    m_email_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_email_day_of_week, json[QString("email_day_of_week")]);
    m_email_day_of_week_isSet = !json[QString("email_day_of_week")].isNull() && m_email_day_of_week_isValid;

    m_email_hour_isValid = ::OpenAPI::fromJsonValue(m_email_hour, json[QString("email_hour")]);
    m_email_hour_isSet = !json[QString("email_hour")].isNull() && m_email_hour_isValid;

    m_email_status_isValid = ::OpenAPI::fromJsonValue(m_email_status, json[QString("email_status")]);
    m_email_status_isSet = !json[QString("email_status")].isNull() && m_email_status_isValid;

    m_facebook_active_wall_isValid = ::OpenAPI::fromJsonValue(m_facebook_active_wall, json[QString("facebook_active_wall")]);
    m_facebook_active_wall_isSet = !json[QString("facebook_active_wall")].isNull() && m_facebook_active_wall_isValid;

    m_footer_email_font_isValid = ::OpenAPI::fromJsonValue(m_footer_email_font, json[QString("footer_email_font")]);
    m_footer_email_font_isSet = !json[QString("footer_email_font")].isNull() && m_footer_email_font_isValid;

    m_footer_html_isValid = ::OpenAPI::fromJsonValue(m_footer_html, json[QString("footer_html")]);
    m_footer_html_isSet = !json[QString("footer_html")].isNull() && m_footer_html_isValid;

    m_footer_image_url_isValid = ::OpenAPI::fromJsonValue(m_footer_image_url, json[QString("footer_image_url")]);
    m_footer_image_url_isSet = !json[QString("footer_image_url")].isNull() && m_footer_image_url_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_header_background_color_isValid = ::OpenAPI::fromJsonValue(m_header_background_color, json[QString("header_background_color")]);
    m_header_background_color_isSet = !json[QString("header_background_color")].isNull() && m_header_background_color_isValid;

    m_header_image_url_isValid = ::OpenAPI::fromJsonValue(m_header_image_url, json[QString("header_image_url")]);
    m_header_image_url_isSet = !json[QString("header_image_url")].isNull() && m_header_image_url_isValid;

    m_intro_text_isValid = ::OpenAPI::fromJsonValue(m_intro_text, json[QString("intro_text")]);
    m_intro_text_isSet = !json[QString("intro_text")].isNull() && m_intro_text_isValid;

    m_linkedin_active_wall_isValid = ::OpenAPI::fromJsonValue(m_linkedin_active_wall, json[QString("linkedin_active_wall")]);
    m_linkedin_active_wall_isSet = !json[QString("linkedin_active_wall")].isNull() && m_linkedin_active_wall_isValid;

    m_montage_enabled_isValid = ::OpenAPI::fromJsonValue(m_montage_enabled, json[QString("montage_enabled")]);
    m_montage_enabled_isSet = !json[QString("montage_enabled")].isNull() && m_montage_enabled_isValid;

    m_montage_facebook_image_url_isValid = ::OpenAPI::fromJsonValue(m_montage_facebook_image_url, json[QString("montage_facebook_image_url")]);
    m_montage_facebook_image_url_isSet = !json[QString("montage_facebook_image_url")].isNull() && m_montage_facebook_image_url_isValid;

    m_montage_linkedin_image_url_isValid = ::OpenAPI::fromJsonValue(m_montage_linkedin_image_url, json[QString("montage_linkedin_image_url")]);
    m_montage_linkedin_image_url_isSet = !json[QString("montage_linkedin_image_url")].isNull() && m_montage_linkedin_image_url_isValid;

    m_montage_title_isValid = ::OpenAPI::fromJsonValue(m_montage_title, json[QString("montage_title")]);
    m_montage_title_isSet = !json[QString("montage_title")].isNull() && m_montage_title_isValid;

    m_montage_twitter_image_url_isValid = ::OpenAPI::fromJsonValue(m_montage_twitter_image_url, json[QString("montage_twitter_image_url")]);
    m_montage_twitter_image_url_isSet = !json[QString("montage_twitter_image_url")].isNull() && m_montage_twitter_image_url_isValid;

    m_newsletter_ids_isValid = ::OpenAPI::fromJsonValue(m_newsletter_ids, json[QString("newsletter_ids")]);
    m_newsletter_ids_isSet = !json[QString("newsletter_ids")].isNull() && m_newsletter_ids_isValid;

    m_newsletter_type_isValid = ::OpenAPI::fromJsonValue(m_newsletter_type, json[QString("newsletter_type")]);
    m_newsletter_type_isSet = !json[QString("newsletter_type")].isNull() && m_newsletter_type_isValid;

    m_primary_email_font_isValid = ::OpenAPI::fromJsonValue(m_primary_email_font, json[QString("primary_email_font")]);
    m_primary_email_font_isSet = !json[QString("primary_email_font")].isNull() && m_primary_email_font_isValid;

    m_salutation_text_isValid = ::OpenAPI::fromJsonValue(m_salutation_text, json[QString("salutation_text")]);
    m_salutation_text_isSet = !json[QString("salutation_text")].isNull() && m_salutation_text_isValid;

    m_social_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_social_day_of_week, json[QString("social_day_of_week")]);
    m_social_day_of_week_isSet = !json[QString("social_day_of_week")].isNull() && m_social_day_of_week_isValid;

    m_social_description_isValid = ::OpenAPI::fromJsonValue(m_social_description, json[QString("social_description")]);
    m_social_description_isSet = !json[QString("social_description")].isNull() && m_social_description_isValid;

    m_social_posting_text_isValid = ::OpenAPI::fromJsonValue(m_social_posting_text, json[QString("social_posting_text")]);
    m_social_posting_text_isSet = !json[QString("social_posting_text")].isNull() && m_social_posting_text_isValid;

    m_social_title_isValid = ::OpenAPI::fromJsonValue(m_social_title, json[QString("social_title")]);
    m_social_title_isSet = !json[QString("social_title")].isNull() && m_social_title_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_title_color_isValid = ::OpenAPI::fromJsonValue(m_title_color, json[QString("title_color")]);
    m_title_color_isSet = !json[QString("title_color")].isNull() && m_title_color_isValid;
}

QString OAINewsletterSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewsletterSetting::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_banner_color_isSet) {
        obj.insert(QString("banner_color"), ::OpenAPI::toJsonValue(m_banner_color));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_email_accent_color_isSet) {
        obj.insert(QString("email_accent_color"), ::OpenAPI::toJsonValue(m_email_accent_color));
    }
    if (m_email_day_of_week_isSet) {
        obj.insert(QString("email_day_of_week"), ::OpenAPI::toJsonValue(m_email_day_of_week));
    }
    if (m_email_hour_isSet) {
        obj.insert(QString("email_hour"), ::OpenAPI::toJsonValue(m_email_hour));
    }
    if (m_email_status_isSet) {
        obj.insert(QString("email_status"), ::OpenAPI::toJsonValue(m_email_status));
    }
    if (m_facebook_active_wall_isSet) {
        obj.insert(QString("facebook_active_wall"), ::OpenAPI::toJsonValue(m_facebook_active_wall));
    }
    if (m_footer_email_font_isSet) {
        obj.insert(QString("footer_email_font"), ::OpenAPI::toJsonValue(m_footer_email_font));
    }
    if (m_footer_html_isSet) {
        obj.insert(QString("footer_html"), ::OpenAPI::toJsonValue(m_footer_html));
    }
    if (m_footer_image_url_isSet) {
        obj.insert(QString("footer_image_url"), ::OpenAPI::toJsonValue(m_footer_image_url));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_header_background_color_isSet) {
        obj.insert(QString("header_background_color"), ::OpenAPI::toJsonValue(m_header_background_color));
    }
    if (m_header_image_url_isSet) {
        obj.insert(QString("header_image_url"), ::OpenAPI::toJsonValue(m_header_image_url));
    }
    if (m_intro_text_isSet) {
        obj.insert(QString("intro_text"), ::OpenAPI::toJsonValue(m_intro_text));
    }
    if (m_linkedin_active_wall_isSet) {
        obj.insert(QString("linkedin_active_wall"), ::OpenAPI::toJsonValue(m_linkedin_active_wall));
    }
    if (m_montage_enabled_isSet) {
        obj.insert(QString("montage_enabled"), ::OpenAPI::toJsonValue(m_montage_enabled));
    }
    if (m_montage_facebook_image_url_isSet) {
        obj.insert(QString("montage_facebook_image_url"), ::OpenAPI::toJsonValue(m_montage_facebook_image_url));
    }
    if (m_montage_linkedin_image_url_isSet) {
        obj.insert(QString("montage_linkedin_image_url"), ::OpenAPI::toJsonValue(m_montage_linkedin_image_url));
    }
    if (m_montage_title_isSet) {
        obj.insert(QString("montage_title"), ::OpenAPI::toJsonValue(m_montage_title));
    }
    if (m_montage_twitter_image_url_isSet) {
        obj.insert(QString("montage_twitter_image_url"), ::OpenAPI::toJsonValue(m_montage_twitter_image_url));
    }
    if (m_newsletter_ids.size() > 0) {
        obj.insert(QString("newsletter_ids"), ::OpenAPI::toJsonValue(m_newsletter_ids));
    }
    if (m_newsletter_type_isSet) {
        obj.insert(QString("newsletter_type"), ::OpenAPI::toJsonValue(m_newsletter_type));
    }
    if (m_primary_email_font_isSet) {
        obj.insert(QString("primary_email_font"), ::OpenAPI::toJsonValue(m_primary_email_font));
    }
    if (m_salutation_text_isSet) {
        obj.insert(QString("salutation_text"), ::OpenAPI::toJsonValue(m_salutation_text));
    }
    if (m_social_day_of_week_isSet) {
        obj.insert(QString("social_day_of_week"), ::OpenAPI::toJsonValue(m_social_day_of_week));
    }
    if (m_social_description_isSet) {
        obj.insert(QString("social_description"), ::OpenAPI::toJsonValue(m_social_description));
    }
    if (m_social_posting_text_isSet) {
        obj.insert(QString("social_posting_text"), ::OpenAPI::toJsonValue(m_social_posting_text));
    }
    if (m_social_title_isSet) {
        obj.insert(QString("social_title"), ::OpenAPI::toJsonValue(m_social_title));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_title_color_isSet) {
        obj.insert(QString("title_color"), ::OpenAPI::toJsonValue(m_title_color));
    }
    return obj;
}

QString OAINewsletterSetting::getId() const {
    return m__id;
}
void OAINewsletterSetting::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINewsletterSetting::is__id_Set() const{
    return m__id_isSet;
}

bool OAINewsletterSetting::is__id_Valid() const{
    return m__id_isValid;
}

QString OAINewsletterSetting::getBannerColor() const {
    return m_banner_color;
}
void OAINewsletterSetting::setBannerColor(const QString &banner_color) {
    m_banner_color = banner_color;
    m_banner_color_isSet = true;
}

bool OAINewsletterSetting::is_banner_color_Set() const{
    return m_banner_color_isSet;
}

bool OAINewsletterSetting::is_banner_color_Valid() const{
    return m_banner_color_isValid;
}

QString OAINewsletterSetting::getBodyHtml() const {
    return m_body_html;
}
void OAINewsletterSetting::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAINewsletterSetting::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAINewsletterSetting::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAINewsletterSetting::getEmailAccentColor() const {
    return m_email_accent_color;
}
void OAINewsletterSetting::setEmailAccentColor(const QString &email_accent_color) {
    m_email_accent_color = email_accent_color;
    m_email_accent_color_isSet = true;
}

bool OAINewsletterSetting::is_email_accent_color_Set() const{
    return m_email_accent_color_isSet;
}

bool OAINewsletterSetting::is_email_accent_color_Valid() const{
    return m_email_accent_color_isValid;
}

qint32 OAINewsletterSetting::getEmailDayOfWeek() const {
    return m_email_day_of_week;
}
void OAINewsletterSetting::setEmailDayOfWeek(const qint32 &email_day_of_week) {
    m_email_day_of_week = email_day_of_week;
    m_email_day_of_week_isSet = true;
}

bool OAINewsletterSetting::is_email_day_of_week_Set() const{
    return m_email_day_of_week_isSet;
}

bool OAINewsletterSetting::is_email_day_of_week_Valid() const{
    return m_email_day_of_week_isValid;
}

qint32 OAINewsletterSetting::getEmailHour() const {
    return m_email_hour;
}
void OAINewsletterSetting::setEmailHour(const qint32 &email_hour) {
    m_email_hour = email_hour;
    m_email_hour_isSet = true;
}

bool OAINewsletterSetting::is_email_hour_Set() const{
    return m_email_hour_isSet;
}

bool OAINewsletterSetting::is_email_hour_Valid() const{
    return m_email_hour_isValid;
}

QString OAINewsletterSetting::getEmailStatus() const {
    return m_email_status;
}
void OAINewsletterSetting::setEmailStatus(const QString &email_status) {
    m_email_status = email_status;
    m_email_status_isSet = true;
}

bool OAINewsletterSetting::is_email_status_Set() const{
    return m_email_status_isSet;
}

bool OAINewsletterSetting::is_email_status_Valid() const{
    return m_email_status_isValid;
}

QString OAINewsletterSetting::getFacebookActiveWall() const {
    return m_facebook_active_wall;
}
void OAINewsletterSetting::setFacebookActiveWall(const QString &facebook_active_wall) {
    m_facebook_active_wall = facebook_active_wall;
    m_facebook_active_wall_isSet = true;
}

bool OAINewsletterSetting::is_facebook_active_wall_Set() const{
    return m_facebook_active_wall_isSet;
}

bool OAINewsletterSetting::is_facebook_active_wall_Valid() const{
    return m_facebook_active_wall_isValid;
}

QString OAINewsletterSetting::getFooterEmailFont() const {
    return m_footer_email_font;
}
void OAINewsletterSetting::setFooterEmailFont(const QString &footer_email_font) {
    m_footer_email_font = footer_email_font;
    m_footer_email_font_isSet = true;
}

bool OAINewsletterSetting::is_footer_email_font_Set() const{
    return m_footer_email_font_isSet;
}

bool OAINewsletterSetting::is_footer_email_font_Valid() const{
    return m_footer_email_font_isValid;
}

QString OAINewsletterSetting::getFooterHtml() const {
    return m_footer_html;
}
void OAINewsletterSetting::setFooterHtml(const QString &footer_html) {
    m_footer_html = footer_html;
    m_footer_html_isSet = true;
}

bool OAINewsletterSetting::is_footer_html_Set() const{
    return m_footer_html_isSet;
}

bool OAINewsletterSetting::is_footer_html_Valid() const{
    return m_footer_html_isValid;
}

QString OAINewsletterSetting::getFooterImageUrl() const {
    return m_footer_image_url;
}
void OAINewsletterSetting::setFooterImageUrl(const QString &footer_image_url) {
    m_footer_image_url = footer_image_url;
    m_footer_image_url_isSet = true;
}

bool OAINewsletterSetting::is_footer_image_url_Set() const{
    return m_footer_image_url_isSet;
}

bool OAINewsletterSetting::is_footer_image_url_Valid() const{
    return m_footer_image_url_isValid;
}

QString OAINewsletterSetting::getGroupId() const {
    return m_group_id;
}
void OAINewsletterSetting::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAINewsletterSetting::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAINewsletterSetting::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAINewsletterSetting::getHeaderBackgroundColor() const {
    return m_header_background_color;
}
void OAINewsletterSetting::setHeaderBackgroundColor(const QString &header_background_color) {
    m_header_background_color = header_background_color;
    m_header_background_color_isSet = true;
}

bool OAINewsletterSetting::is_header_background_color_Set() const{
    return m_header_background_color_isSet;
}

bool OAINewsletterSetting::is_header_background_color_Valid() const{
    return m_header_background_color_isValid;
}

QString OAINewsletterSetting::getHeaderImageUrl() const {
    return m_header_image_url;
}
void OAINewsletterSetting::setHeaderImageUrl(const QString &header_image_url) {
    m_header_image_url = header_image_url;
    m_header_image_url_isSet = true;
}

bool OAINewsletterSetting::is_header_image_url_Set() const{
    return m_header_image_url_isSet;
}

bool OAINewsletterSetting::is_header_image_url_Valid() const{
    return m_header_image_url_isValid;
}

QString OAINewsletterSetting::getIntroText() const {
    return m_intro_text;
}
void OAINewsletterSetting::setIntroText(const QString &intro_text) {
    m_intro_text = intro_text;
    m_intro_text_isSet = true;
}

bool OAINewsletterSetting::is_intro_text_Set() const{
    return m_intro_text_isSet;
}

bool OAINewsletterSetting::is_intro_text_Valid() const{
    return m_intro_text_isValid;
}

QString OAINewsletterSetting::getLinkedinActiveWall() const {
    return m_linkedin_active_wall;
}
void OAINewsletterSetting::setLinkedinActiveWall(const QString &linkedin_active_wall) {
    m_linkedin_active_wall = linkedin_active_wall;
    m_linkedin_active_wall_isSet = true;
}

bool OAINewsletterSetting::is_linkedin_active_wall_Set() const{
    return m_linkedin_active_wall_isSet;
}

bool OAINewsletterSetting::is_linkedin_active_wall_Valid() const{
    return m_linkedin_active_wall_isValid;
}

bool OAINewsletterSetting::isMontageEnabled() const {
    return m_montage_enabled;
}
void OAINewsletterSetting::setMontageEnabled(const bool &montage_enabled) {
    m_montage_enabled = montage_enabled;
    m_montage_enabled_isSet = true;
}

bool OAINewsletterSetting::is_montage_enabled_Set() const{
    return m_montage_enabled_isSet;
}

bool OAINewsletterSetting::is_montage_enabled_Valid() const{
    return m_montage_enabled_isValid;
}

QString OAINewsletterSetting::getMontageFacebookImageUrl() const {
    return m_montage_facebook_image_url;
}
void OAINewsletterSetting::setMontageFacebookImageUrl(const QString &montage_facebook_image_url) {
    m_montage_facebook_image_url = montage_facebook_image_url;
    m_montage_facebook_image_url_isSet = true;
}

bool OAINewsletterSetting::is_montage_facebook_image_url_Set() const{
    return m_montage_facebook_image_url_isSet;
}

bool OAINewsletterSetting::is_montage_facebook_image_url_Valid() const{
    return m_montage_facebook_image_url_isValid;
}

QString OAINewsletterSetting::getMontageLinkedinImageUrl() const {
    return m_montage_linkedin_image_url;
}
void OAINewsletterSetting::setMontageLinkedinImageUrl(const QString &montage_linkedin_image_url) {
    m_montage_linkedin_image_url = montage_linkedin_image_url;
    m_montage_linkedin_image_url_isSet = true;
}

bool OAINewsletterSetting::is_montage_linkedin_image_url_Set() const{
    return m_montage_linkedin_image_url_isSet;
}

bool OAINewsletterSetting::is_montage_linkedin_image_url_Valid() const{
    return m_montage_linkedin_image_url_isValid;
}

QString OAINewsletterSetting::getMontageTitle() const {
    return m_montage_title;
}
void OAINewsletterSetting::setMontageTitle(const QString &montage_title) {
    m_montage_title = montage_title;
    m_montage_title_isSet = true;
}

bool OAINewsletterSetting::is_montage_title_Set() const{
    return m_montage_title_isSet;
}

bool OAINewsletterSetting::is_montage_title_Valid() const{
    return m_montage_title_isValid;
}

QString OAINewsletterSetting::getMontageTwitterImageUrl() const {
    return m_montage_twitter_image_url;
}
void OAINewsletterSetting::setMontageTwitterImageUrl(const QString &montage_twitter_image_url) {
    m_montage_twitter_image_url = montage_twitter_image_url;
    m_montage_twitter_image_url_isSet = true;
}

bool OAINewsletterSetting::is_montage_twitter_image_url_Set() const{
    return m_montage_twitter_image_url_isSet;
}

bool OAINewsletterSetting::is_montage_twitter_image_url_Valid() const{
    return m_montage_twitter_image_url_isValid;
}

QList<QString> OAINewsletterSetting::getNewsletterIds() const {
    return m_newsletter_ids;
}
void OAINewsletterSetting::setNewsletterIds(const QList<QString> &newsletter_ids) {
    m_newsletter_ids = newsletter_ids;
    m_newsletter_ids_isSet = true;
}

bool OAINewsletterSetting::is_newsletter_ids_Set() const{
    return m_newsletter_ids_isSet;
}

bool OAINewsletterSetting::is_newsletter_ids_Valid() const{
    return m_newsletter_ids_isValid;
}

QString OAINewsletterSetting::getNewsletterType() const {
    return m_newsletter_type;
}
void OAINewsletterSetting::setNewsletterType(const QString &newsletter_type) {
    m_newsletter_type = newsletter_type;
    m_newsletter_type_isSet = true;
}

bool OAINewsletterSetting::is_newsletter_type_Set() const{
    return m_newsletter_type_isSet;
}

bool OAINewsletterSetting::is_newsletter_type_Valid() const{
    return m_newsletter_type_isValid;
}

QString OAINewsletterSetting::getPrimaryEmailFont() const {
    return m_primary_email_font;
}
void OAINewsletterSetting::setPrimaryEmailFont(const QString &primary_email_font) {
    m_primary_email_font = primary_email_font;
    m_primary_email_font_isSet = true;
}

bool OAINewsletterSetting::is_primary_email_font_Set() const{
    return m_primary_email_font_isSet;
}

bool OAINewsletterSetting::is_primary_email_font_Valid() const{
    return m_primary_email_font_isValid;
}

QString OAINewsletterSetting::getSalutationText() const {
    return m_salutation_text;
}
void OAINewsletterSetting::setSalutationText(const QString &salutation_text) {
    m_salutation_text = salutation_text;
    m_salutation_text_isSet = true;
}

bool OAINewsletterSetting::is_salutation_text_Set() const{
    return m_salutation_text_isSet;
}

bool OAINewsletterSetting::is_salutation_text_Valid() const{
    return m_salutation_text_isValid;
}

qint32 OAINewsletterSetting::getSocialDayOfWeek() const {
    return m_social_day_of_week;
}
void OAINewsletterSetting::setSocialDayOfWeek(const qint32 &social_day_of_week) {
    m_social_day_of_week = social_day_of_week;
    m_social_day_of_week_isSet = true;
}

bool OAINewsletterSetting::is_social_day_of_week_Set() const{
    return m_social_day_of_week_isSet;
}

bool OAINewsletterSetting::is_social_day_of_week_Valid() const{
    return m_social_day_of_week_isValid;
}

QString OAINewsletterSetting::getSocialDescription() const {
    return m_social_description;
}
void OAINewsletterSetting::setSocialDescription(const QString &social_description) {
    m_social_description = social_description;
    m_social_description_isSet = true;
}

bool OAINewsletterSetting::is_social_description_Set() const{
    return m_social_description_isSet;
}

bool OAINewsletterSetting::is_social_description_Valid() const{
    return m_social_description_isValid;
}

QString OAINewsletterSetting::getSocialPostingText() const {
    return m_social_posting_text;
}
void OAINewsletterSetting::setSocialPostingText(const QString &social_posting_text) {
    m_social_posting_text = social_posting_text;
    m_social_posting_text_isSet = true;
}

bool OAINewsletterSetting::is_social_posting_text_Set() const{
    return m_social_posting_text_isSet;
}

bool OAINewsletterSetting::is_social_posting_text_Valid() const{
    return m_social_posting_text_isValid;
}

QString OAINewsletterSetting::getSocialTitle() const {
    return m_social_title;
}
void OAINewsletterSetting::setSocialTitle(const QString &social_title) {
    m_social_title = social_title;
    m_social_title_isSet = true;
}

bool OAINewsletterSetting::is_social_title_Set() const{
    return m_social_title_isSet;
}

bool OAINewsletterSetting::is_social_title_Valid() const{
    return m_social_title_isValid;
}

QString OAINewsletterSetting::getSubject() const {
    return m_subject;
}
void OAINewsletterSetting::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAINewsletterSetting::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAINewsletterSetting::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAINewsletterSetting::getTitleColor() const {
    return m_title_color;
}
void OAINewsletterSetting::setTitleColor(const QString &title_color) {
    m_title_color = title_color;
    m_title_color_isSet = true;
}

bool OAINewsletterSetting::is_title_color_Set() const{
    return m_title_color_isSet;
}

bool OAINewsletterSetting::is_title_color_Valid() const{
    return m_title_color_isValid;
}

bool OAINewsletterSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_accent_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_active_wall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_email_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intro_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_active_wall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_montage_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_montage_facebook_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_montage_linkedin_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_montage_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_montage_twitter_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_newsletter_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_newsletter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salutation_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_posting_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewsletterSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && true;
}

} // namespace OpenAPI
