/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPostsApi_H
#define OAI_OAIPostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPost.h"
#include "OAIPostInput.h"
#include "OAIPostresponse.h"
#include "OAIPosts.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPostsApi : public QObject {
    Q_OBJECT

public:
    OAIPostsApi(const int timeOut = 0);
    ~OAIPostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  post OAIPostInput [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void createPost(const QString &vestorly_auth, const OAIPostInput &post, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  access_token QString [optional]
    * @param[in]  text_query QString [optional]
    * @param[in]  external_url QString [optional]
    * @param[in]  is_published QString [optional]
    */
    virtual void findPosts(const QString &vestorly_auth, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_published = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void getPostByID(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  post OAIPost [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void updatePostByID(const QString &vestorly_auth, const QString &id, const OAIPost &post, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPostCallback(OAIHttpRequestWorker *worker);
    void findPostsCallback(OAIHttpRequestWorker *worker);
    void getPostByIDCallback(OAIHttpRequestWorker *worker);
    void updatePostByIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPostSignal(OAIPostresponse summary);
    void findPostsSignal(OAIPosts summary);
    void getPostByIDSignal(OAIPostresponse summary);
    void updatePostByIDSignal(OAIPostresponse summary);


    void createPostSignalFull(OAIHttpRequestWorker *worker, OAIPostresponse summary);
    void findPostsSignalFull(OAIHttpRequestWorker *worker, OAIPosts summary);
    void getPostByIDSignalFull(OAIHttpRequestWorker *worker, OAIPostresponse summary);
    void updatePostByIDSignalFull(OAIHttpRequestWorker *worker, OAIPostresponse summary);

    Q_DECL_DEPRECATED_X("Use createPostSignalError() instead")
    void createPostSignalE(OAIPostresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPostSignalError(OAIPostresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findPostsSignalError() instead")
    void findPostsSignalE(OAIPosts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findPostsSignalError(OAIPosts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostByIDSignalError() instead")
    void getPostByIDSignalE(OAIPostresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostByIDSignalError(OAIPostresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePostByIDSignalError() instead")
    void updatePostByIDSignalE(OAIPostresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePostByIDSignalError(OAIPostresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPostSignalErrorFull() instead")
    void createPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findPostsSignalErrorFull() instead")
    void findPostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findPostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostByIDSignalErrorFull() instead")
    void getPostByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePostByIDSignalErrorFull() instead")
    void updatePostByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePostByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
