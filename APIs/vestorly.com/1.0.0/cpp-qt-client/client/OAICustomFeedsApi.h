/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomFeedsApi_H
#define OAI_OAICustomFeedsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomFeedInput.h"
#include "OAICustomFeedresponse.h"
#include "OAICustomFeeds.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomFeedsApi : public QObject {
    Q_OBJECT

public:
    OAICustomFeedsApi(const int timeOut = 0);
    ~OAICustomFeedsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  custom_feed OAICustomFeedInput [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void createCustomFeed(const QString &vestorly_auth, const OAICustomFeedInput &custom_feed, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void deleteCustomFeed(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void duplicateCustomFeed(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void findCustomFeedByID(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void findCustomFeeds(const QString &vestorly_auth, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  custom_feed OAICustomFeedInput [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void updateCategoryById(const QString &vestorly_auth, const QString &id, const OAICustomFeedInput &custom_feed, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomFeedCallback(OAIHttpRequestWorker *worker);
    void deleteCustomFeedCallback(OAIHttpRequestWorker *worker);
    void duplicateCustomFeedCallback(OAIHttpRequestWorker *worker);
    void findCustomFeedByIDCallback(OAIHttpRequestWorker *worker);
    void findCustomFeedsCallback(OAIHttpRequestWorker *worker);
    void updateCategoryByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomFeedSignal(OAICustomFeedresponse summary);
    void deleteCustomFeedSignal(OAICustomFeedresponse summary);
    void duplicateCustomFeedSignal(OAICustomFeedresponse summary);
    void findCustomFeedByIDSignal(OAICustomFeedresponse summary);
    void findCustomFeedsSignal(OAICustomFeeds summary);
    void updateCategoryByIdSignal(OAICustomFeedresponse summary);


    void createCustomFeedSignalFull(OAIHttpRequestWorker *worker, OAICustomFeedresponse summary);
    void deleteCustomFeedSignalFull(OAIHttpRequestWorker *worker, OAICustomFeedresponse summary);
    void duplicateCustomFeedSignalFull(OAIHttpRequestWorker *worker, OAICustomFeedresponse summary);
    void findCustomFeedByIDSignalFull(OAIHttpRequestWorker *worker, OAICustomFeedresponse summary);
    void findCustomFeedsSignalFull(OAIHttpRequestWorker *worker, OAICustomFeeds summary);
    void updateCategoryByIdSignalFull(OAIHttpRequestWorker *worker, OAICustomFeedresponse summary);

    Q_DECL_DEPRECATED_X("Use createCustomFeedSignalError() instead")
    void createCustomFeedSignalE(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFeedSignalError(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFeedSignalError() instead")
    void deleteCustomFeedSignalE(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFeedSignalError(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateCustomFeedSignalError() instead")
    void duplicateCustomFeedSignalE(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateCustomFeedSignalError(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCustomFeedByIDSignalError() instead")
    void findCustomFeedByIDSignalE(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCustomFeedByIDSignalError(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCustomFeedsSignalError() instead")
    void findCustomFeedsSignalE(OAICustomFeeds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findCustomFeedsSignalError(OAICustomFeeds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCategoryByIdSignalError() instead")
    void updateCategoryByIdSignalE(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCategoryByIdSignalError(OAICustomFeedresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomFeedSignalErrorFull() instead")
    void createCustomFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomFeedSignalErrorFull() instead")
    void deleteCustomFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateCustomFeedSignalErrorFull() instead")
    void duplicateCustomFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateCustomFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCustomFeedByIDSignalErrorFull() instead")
    void findCustomFeedByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCustomFeedByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findCustomFeedsSignalErrorFull() instead")
    void findCustomFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findCustomFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCategoryByIdSignalErrorFull() instead")
    void updateCategoryByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCategoryByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
