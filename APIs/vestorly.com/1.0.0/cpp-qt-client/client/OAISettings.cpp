/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_adv_brochure_isSet = false;
    m_adv_brochure_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_disclosure_isSet = false;
    m_disclosure_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_orgsetting_isSet = false;
    m_orgsetting_isValid = false;

    m_personalsetting_isSet = false;
    m_personalsetting_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_adv_brochure_isValid = ::OpenAPI::fromJsonValue(m_adv_brochure, json[QString("adv_brochure")]);
    m_adv_brochure_isSet = !json[QString("adv_brochure")].isNull() && m_adv_brochure_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_disclosure_isValid = ::OpenAPI::fromJsonValue(m_disclosure, json[QString("disclosure")]);
    m_disclosure_isSet = !json[QString("disclosure")].isNull() && m_disclosure_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_orgsetting_isValid = ::OpenAPI::fromJsonValue(m_orgsetting, json[QString("orgsetting")]);
    m_orgsetting_isSet = !json[QString("orgsetting")].isNull() && m_orgsetting_isValid;

    m_personalsetting_isValid = ::OpenAPI::fromJsonValue(m_personalsetting, json[QString("personalsetting")]);
    m_personalsetting_isSet = !json[QString("personalsetting")].isNull() && m_personalsetting_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_adv_brochure_isSet) {
        obj.insert(QString("adv_brochure"), ::OpenAPI::toJsonValue(m_adv_brochure));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_disclosure_isSet) {
        obj.insert(QString("disclosure"), ::OpenAPI::toJsonValue(m_disclosure));
    }
    if (m_feature.isSet()) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_orgsetting.isSet()) {
        obj.insert(QString("orgsetting"), ::OpenAPI::toJsonValue(m_orgsetting));
    }
    if (m_personalsetting.isSet()) {
        obj.insert(QString("personalsetting"), ::OpenAPI::toJsonValue(m_personalsetting));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAISettings::getId() const {
    return m__id;
}
void OAISettings::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAISettings::is__id_Set() const{
    return m__id_isSet;
}

bool OAISettings::is__id_Valid() const{
    return m__id_isValid;
}

QString OAISettings::getAdvBrochure() const {
    return m_adv_brochure;
}
void OAISettings::setAdvBrochure(const QString &adv_brochure) {
    m_adv_brochure = adv_brochure;
    m_adv_brochure_isSet = true;
}

bool OAISettings::is_adv_brochure_Set() const{
    return m_adv_brochure_isSet;
}

bool OAISettings::is_adv_brochure_Valid() const{
    return m_adv_brochure_isValid;
}

QString OAISettings::getCompany() const {
    return m_company;
}
void OAISettings::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAISettings::is_company_Set() const{
    return m_company_isSet;
}

bool OAISettings::is_company_Valid() const{
    return m_company_isValid;
}

QString OAISettings::getDisclosure() const {
    return m_disclosure;
}
void OAISettings::setDisclosure(const QString &disclosure) {
    m_disclosure = disclosure;
    m_disclosure_isSet = true;
}

bool OAISettings::is_disclosure_Set() const{
    return m_disclosure_isSet;
}

bool OAISettings::is_disclosure_Valid() const{
    return m_disclosure_isValid;
}

OAIFeatures OAISettings::getFeature() const {
    return m_feature;
}
void OAISettings::setFeature(const OAIFeatures &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAISettings::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAISettings::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAISettings::getName() const {
    return m_name;
}
void OAISettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAISettings::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrgSetting OAISettings::getOrgsetting() const {
    return m_orgsetting;
}
void OAISettings::setOrgsetting(const OAIOrgSetting &orgsetting) {
    m_orgsetting = orgsetting;
    m_orgsetting_isSet = true;
}

bool OAISettings::is_orgsetting_Set() const{
    return m_orgsetting_isSet;
}

bool OAISettings::is_orgsetting_Valid() const{
    return m_orgsetting_isValid;
}

OAIPersonalSettings OAISettings::getPersonalsetting() const {
    return m_personalsetting;
}
void OAISettings::setPersonalsetting(const OAIPersonalSettings &personalsetting) {
    m_personalsetting = personalsetting;
    m_personalsetting_isSet = true;
}

bool OAISettings::is_personalsetting_Set() const{
    return m_personalsetting_isSet;
}

bool OAISettings::is_personalsetting_Valid() const{
    return m_personalsetting_isValid;
}

QString OAISettings::getPictureUrl() const {
    return m_picture_url;
}
void OAISettings::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAISettings::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAISettings::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

QString OAISettings::getSlug() const {
    return m_slug;
}
void OAISettings::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAISettings::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAISettings::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAISettings::getWebsite() const {
    return m_website;
}
void OAISettings::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAISettings::is_website_Set() const{
    return m_website_isSet;
}

bool OAISettings::is_website_Valid() const{
    return m_website_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adv_brochure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disclosure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orgsetting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personalsetting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && true;
}

} // namespace OpenAPI
