/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_current_user_isSet = false;
    m_current_user_isValid = false;

    m_new_user_isSet = false;
    m_new_user_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_vestorly_auth_isSet = false;
    m_vestorly_auth_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_current_user_isValid = ::OpenAPI::fromJsonValue(m_current_user, json[QString("current_user")]);
    m_current_user_isSet = !json[QString("current_user")].isNull() && m_current_user_isValid;

    m_new_user_isValid = ::OpenAPI::fromJsonValue(m_new_user, json[QString("new_user")]);
    m_new_user_isSet = !json[QString("new_user")].isNull() && m_new_user_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_vestorly_auth_isValid = ::OpenAPI::fromJsonValue(m_vestorly_auth, json[QString("vestorly-auth")]);
    m_vestorly_auth_isSet = !json[QString("vestorly-auth")].isNull() && m_vestorly_auth_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_current_user.isSet()) {
        obj.insert(QString("current_user"), ::OpenAPI::toJsonValue(m_current_user));
    }
    if (m_new_user_isSet) {
        obj.insert(QString("new_user"), ::OpenAPI::toJsonValue(m_new_user));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_vestorly_auth_isSet) {
        obj.insert(QString("vestorly-auth"), ::OpenAPI::toJsonValue(m_vestorly_auth));
    }
    return obj;
}

QString OAISession::getId() const {
    return m__id;
}
void OAISession::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAISession::is__id_Set() const{
    return m__id_isSet;
}

bool OAISession::is__id_Valid() const{
    return m__id_isValid;
}

OAIUser OAISession::getCurrentUser() const {
    return m_current_user;
}
void OAISession::setCurrentUser(const OAIUser &current_user) {
    m_current_user = current_user;
    m_current_user_isSet = true;
}

bool OAISession::is_current_user_Set() const{
    return m_current_user_isSet;
}

bool OAISession::is_current_user_Valid() const{
    return m_current_user_isValid;
}

bool OAISession::isNewUser() const {
    return m_new_user;
}
void OAISession::setNewUser(const bool &new_user) {
    m_new_user = new_user;
    m_new_user_isSet = true;
}

bool OAISession::is_new_user_Set() const{
    return m_new_user_isSet;
}

bool OAISession::is_new_user_Valid() const{
    return m_new_user_isValid;
}

OAISettings OAISession::getSettings() const {
    return m_settings;
}
void OAISession::setSettings(const OAISettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAISession::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAISession::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAISession::getVestorlyAuth() const {
    return m_vestorly_auth;
}
void OAISession::setVestorlyAuth(const QString &vestorly_auth) {
    m_vestorly_auth = vestorly_auth;
    m_vestorly_auth_isSet = true;
}

bool OAISession::is_vestorly_auth_Set() const{
    return m_vestorly_auth_isSet;
}

bool OAISession::is_vestorly_auth_Valid() const{
    return m_vestorly_auth_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vestorly_auth_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
