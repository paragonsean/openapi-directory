/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupInput.h"
#include "OAIGroupresponse.h"
#include "OAIGroups.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  group OAIGroupInput [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void createGroup(const QString &vestorly_auth, const OAIGroupInput &group, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void deleteGroup(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void findGroupByID(const QString &vestorly_auth, const QString &id, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void findGroups(const QString &vestorly_auth, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  id QString [required]
    * @param[in]  group OAIGroupInput [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void updateGroupById(const QString &vestorly_auth, const QString &id, const OAIGroupInput &group, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGroupCallback(OAIHttpRequestWorker *worker);
    void deleteGroupCallback(OAIHttpRequestWorker *worker);
    void findGroupByIDCallback(OAIHttpRequestWorker *worker);
    void findGroupsCallback(OAIHttpRequestWorker *worker);
    void updateGroupByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGroupSignal(OAIGroupresponse summary);
    void deleteGroupSignal(OAIGroupresponse summary);
    void findGroupByIDSignal(OAIGroupresponse summary);
    void findGroupsSignal(OAIGroups summary);
    void updateGroupByIdSignal(OAIGroupresponse summary);


    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupresponse summary);
    void deleteGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroupresponse summary);
    void findGroupByIDSignalFull(OAIHttpRequestWorker *worker, OAIGroupresponse summary);
    void findGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroups summary);
    void updateGroupByIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupresponse summary);

    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalError() instead")
    void deleteGroupSignalE(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalError(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupByIDSignalError() instead")
    void findGroupByIDSignalE(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupByIDSignalError(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalError() instead")
    void findGroupsSignalE(OAIGroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalError(OAIGroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupByIdSignalError() instead")
    void updateGroupByIdSignalE(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupByIdSignalError(OAIGroupresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupSignalErrorFull() instead")
    void deleteGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupByIDSignalErrorFull() instead")
    void findGroupByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findGroupsSignalErrorFull() instead")
    void findGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupByIdSignalErrorFull() instead")
    void updateGroupByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
