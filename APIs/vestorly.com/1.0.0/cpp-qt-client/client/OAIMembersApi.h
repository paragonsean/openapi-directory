/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMembersApi_H
#define OAI_OAIMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMember.h"
#include "OAIMemberresponse.h"
#include "OAIMembers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMembersApi : public QObject {
    Q_OBJECT

public:
    OAIMembersApi(const int timeOut = 0);
    ~OAIMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  member OAIMember [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void createMember(const QString &vestorly_auth, const OAIMember &member, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void findMemberByID(const QString &id, const QString &vestorly_auth, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  access_token QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void findMembers(const QString &vestorly_auth, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  vestorly_auth QString [required]
    * @param[in]  member OAIMember [required]
    * @param[in]  access_token QString [optional]
    */
    virtual void updateMemberByID(const QString &id, const QString &vestorly_auth, const OAIMember &member, const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createMemberCallback(OAIHttpRequestWorker *worker);
    void findMemberByIDCallback(OAIHttpRequestWorker *worker);
    void findMembersCallback(OAIHttpRequestWorker *worker);
    void updateMemberByIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createMemberSignal(OAIMemberresponse summary);
    void findMemberByIDSignal(OAIMemberresponse summary);
    void findMembersSignal(OAIMembers summary);
    void updateMemberByIDSignal(OAIMemberresponse summary);


    void createMemberSignalFull(OAIHttpRequestWorker *worker, OAIMemberresponse summary);
    void findMemberByIDSignalFull(OAIHttpRequestWorker *worker, OAIMemberresponse summary);
    void findMembersSignalFull(OAIHttpRequestWorker *worker, OAIMembers summary);
    void updateMemberByIDSignalFull(OAIHttpRequestWorker *worker, OAIMemberresponse summary);

    Q_DECL_DEPRECATED_X("Use createMemberSignalError() instead")
    void createMemberSignalE(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMemberSignalError(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMemberByIDSignalError() instead")
    void findMemberByIDSignalE(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findMemberByIDSignalError(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMembersSignalError() instead")
    void findMembersSignalE(OAIMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findMembersSignalError(OAIMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMemberByIDSignalError() instead")
    void updateMemberByIDSignalE(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMemberByIDSignalError(OAIMemberresponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createMemberSignalErrorFull() instead")
    void createMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMemberByIDSignalErrorFull() instead")
    void findMemberByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findMemberByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findMembersSignalErrorFull() instead")
    void findMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMemberByIDSignalErrorFull() instead")
    void updateMemberByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMemberByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
