/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgSetting::OAIOrgSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgSetting::OAIOrgSetting() {
    this->initializeModel();
}

OAIOrgSetting::~OAIOrgSetting() {}

void OAIOrgSetting::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_company_address_isSet = false;
    m_company_address_isValid = false;

    m_company_contact_email_isSet = false;
    m_company_contact_email_isValid = false;

    m_company_homepage_url_isSet = false;
    m_company_homepage_url_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_privacy_policy_url_isSet = false;
    m_privacy_policy_url_isValid = false;

    m_site_url_isSet = false;
    m_site_url_isValid = false;

    m_terms_and_conditions_url_isSet = false;
    m_terms_and_conditions_url_isValid = false;
}

void OAIOrgSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgSetting::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_company_address_isValid = ::OpenAPI::fromJsonValue(m_company_address, json[QString("company_address")]);
    m_company_address_isSet = !json[QString("company_address")].isNull() && m_company_address_isValid;

    m_company_contact_email_isValid = ::OpenAPI::fromJsonValue(m_company_contact_email, json[QString("company_contact_email")]);
    m_company_contact_email_isSet = !json[QString("company_contact_email")].isNull() && m_company_contact_email_isValid;

    m_company_homepage_url_isValid = ::OpenAPI::fromJsonValue(m_company_homepage_url, json[QString("company_homepage_url")]);
    m_company_homepage_url_isSet = !json[QString("company_homepage_url")].isNull() && m_company_homepage_url_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_privacy_policy_url_isValid = ::OpenAPI::fromJsonValue(m_privacy_policy_url, json[QString("privacy_policy_url")]);
    m_privacy_policy_url_isSet = !json[QString("privacy_policy_url")].isNull() && m_privacy_policy_url_isValid;

    m_site_url_isValid = ::OpenAPI::fromJsonValue(m_site_url, json[QString("site_url")]);
    m_site_url_isSet = !json[QString("site_url")].isNull() && m_site_url_isValid;

    m_terms_and_conditions_url_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions_url, json[QString("terms_and_conditions_url")]);
    m_terms_and_conditions_url_isSet = !json[QString("terms_and_conditions_url")].isNull() && m_terms_and_conditions_url_isValid;
}

QString OAIOrgSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgSetting::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_company_address_isSet) {
        obj.insert(QString("company_address"), ::OpenAPI::toJsonValue(m_company_address));
    }
    if (m_company_contact_email_isSet) {
        obj.insert(QString("company_contact_email"), ::OpenAPI::toJsonValue(m_company_contact_email));
    }
    if (m_company_homepage_url_isSet) {
        obj.insert(QString("company_homepage_url"), ::OpenAPI::toJsonValue(m_company_homepage_url));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_privacy_policy_url_isSet) {
        obj.insert(QString("privacy_policy_url"), ::OpenAPI::toJsonValue(m_privacy_policy_url));
    }
    if (m_site_url_isSet) {
        obj.insert(QString("site_url"), ::OpenAPI::toJsonValue(m_site_url));
    }
    if (m_terms_and_conditions_url_isSet) {
        obj.insert(QString("terms_and_conditions_url"), ::OpenAPI::toJsonValue(m_terms_and_conditions_url));
    }
    return obj;
}

QString OAIOrgSetting::getId() const {
    return m__id;
}
void OAIOrgSetting::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIOrgSetting::is__id_Set() const{
    return m__id_isSet;
}

bool OAIOrgSetting::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIOrgSetting::getCompanyAddress() const {
    return m_company_address;
}
void OAIOrgSetting::setCompanyAddress(const QString &company_address) {
    m_company_address = company_address;
    m_company_address_isSet = true;
}

bool OAIOrgSetting::is_company_address_Set() const{
    return m_company_address_isSet;
}

bool OAIOrgSetting::is_company_address_Valid() const{
    return m_company_address_isValid;
}

QString OAIOrgSetting::getCompanyContactEmail() const {
    return m_company_contact_email;
}
void OAIOrgSetting::setCompanyContactEmail(const QString &company_contact_email) {
    m_company_contact_email = company_contact_email;
    m_company_contact_email_isSet = true;
}

bool OAIOrgSetting::is_company_contact_email_Set() const{
    return m_company_contact_email_isSet;
}

bool OAIOrgSetting::is_company_contact_email_Valid() const{
    return m_company_contact_email_isValid;
}

QString OAIOrgSetting::getCompanyHomepageUrl() const {
    return m_company_homepage_url;
}
void OAIOrgSetting::setCompanyHomepageUrl(const QString &company_homepage_url) {
    m_company_homepage_url = company_homepage_url;
    m_company_homepage_url_isSet = true;
}

bool OAIOrgSetting::is_company_homepage_url_Set() const{
    return m_company_homepage_url_isSet;
}

bool OAIOrgSetting::is_company_homepage_url_Valid() const{
    return m_company_homepage_url_isValid;
}

bool OAIOrgSetting::isIsDefault() const {
    return m_is_default;
}
void OAIOrgSetting::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIOrgSetting::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIOrgSetting::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIOrgSetting::getName() const {
    return m_name;
}
void OAIOrgSetting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrgSetting::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrgSetting::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrgSetting::getPrivacyPolicyUrl() const {
    return m_privacy_policy_url;
}
void OAIOrgSetting::setPrivacyPolicyUrl(const QString &privacy_policy_url) {
    m_privacy_policy_url = privacy_policy_url;
    m_privacy_policy_url_isSet = true;
}

bool OAIOrgSetting::is_privacy_policy_url_Set() const{
    return m_privacy_policy_url_isSet;
}

bool OAIOrgSetting::is_privacy_policy_url_Valid() const{
    return m_privacy_policy_url_isValid;
}

QString OAIOrgSetting::getSiteUrl() const {
    return m_site_url;
}
void OAIOrgSetting::setSiteUrl(const QString &site_url) {
    m_site_url = site_url;
    m_site_url_isSet = true;
}

bool OAIOrgSetting::is_site_url_Set() const{
    return m_site_url_isSet;
}

bool OAIOrgSetting::is_site_url_Valid() const{
    return m_site_url_isValid;
}

QString OAIOrgSetting::getTermsAndConditionsUrl() const {
    return m_terms_and_conditions_url;
}
void OAIOrgSetting::setTermsAndConditionsUrl(const QString &terms_and_conditions_url) {
    m_terms_and_conditions_url = terms_and_conditions_url;
    m_terms_and_conditions_url_isSet = true;
}

bool OAIOrgSetting::is_terms_and_conditions_url_Set() const{
    return m_terms_and_conditions_url_isSet;
}

bool OAIOrgSetting::is_terms_and_conditions_url_Valid() const{
    return m_terms_and_conditions_url_isValid;
}

bool OAIOrgSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_homepage_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_policy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && true;
}

} // namespace OpenAPI
