/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember::OAIMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember::OAIMember() {
    this->initializeModel();
}

OAIMember::~OAIMember() {}

void OAIMember::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_data_estimated_isSet = false;
    m_data_estimated_isValid = false;

    m_education_isSet = false;
    m_education_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_estimated_location_isSet = false;
    m_estimated_location_isValid = false;

    m_estimated_zip_isSet = false;
    m_estimated_zip_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_genuine_email_isSet = false;
    m_genuine_email_isValid = false;

    m_high_net_worth_isSet = false;
    m_high_net_worth_isValid = false;

    m_home_market_value_isSet = false;
    m_home_market_value_isValid = false;

    m_home_owner_status_isSet = false;
    m_home_owner_status_isValid = false;

    m_hometown_isSet = false;
    m_hometown_isValid = false;

    m_household_income_isSet = false;
    m_household_income_isValid = false;

    m_interest_consultation_isSet = false;
    m_interest_consultation_isValid = false;

    m_interest_in_new_advisor_isSet = false;
    m_interest_in_new_advisor_isValid = false;

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_invited_on_isSet = false;
    m_invited_on_isValid = false;

    m_is_client_isSet = false;
    m_is_client_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_last_active_date_isSet = false;
    m_last_active_date_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_marital_status_isSet = false;
    m_marital_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_occupation_isSet = false;
    m_occupation_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_picture_url_isSet = false;
    m_picture_url_isValid = false;

    m_portfolio_size_isSet = false;
    m_portfolio_size_isValid = false;

    m_profile_url_isSet = false;
    m_profile_url_isValid = false;

    m_register_ip_addr_isSet = false;
    m_register_ip_addr_isValid = false;

    m_signed_up_with_isSet = false;
    m_signed_up_with_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscribed_group_ids_isSet = false;
    m_subscribed_group_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_unsubscribed_isSet = false;
    m_unsubscribed_isValid = false;

    m_unsubscribed_date_isSet = false;
    m_unsubscribed_date_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_data_estimated_isValid = ::OpenAPI::fromJsonValue(m_data_estimated, json[QString("data_estimated")]);
    m_data_estimated_isSet = !json[QString("data_estimated")].isNull() && m_data_estimated_isValid;

    m_education_isValid = ::OpenAPI::fromJsonValue(m_education, json[QString("education")]);
    m_education_isSet = !json[QString("education")].isNull() && m_education_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_estimated_location_isValid = ::OpenAPI::fromJsonValue(m_estimated_location, json[QString("estimated_location")]);
    m_estimated_location_isSet = !json[QString("estimated_location")].isNull() && m_estimated_location_isValid;

    m_estimated_zip_isValid = ::OpenAPI::fromJsonValue(m_estimated_zip, json[QString("estimated_zip")]);
    m_estimated_zip_isSet = !json[QString("estimated_zip")].isNull() && m_estimated_zip_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_genuine_email_isValid = ::OpenAPI::fromJsonValue(m_genuine_email, json[QString("genuine_email")]);
    m_genuine_email_isSet = !json[QString("genuine_email")].isNull() && m_genuine_email_isValid;

    m_high_net_worth_isValid = ::OpenAPI::fromJsonValue(m_high_net_worth, json[QString("high_net_worth")]);
    m_high_net_worth_isSet = !json[QString("high_net_worth")].isNull() && m_high_net_worth_isValid;

    m_home_market_value_isValid = ::OpenAPI::fromJsonValue(m_home_market_value, json[QString("home_market_value")]);
    m_home_market_value_isSet = !json[QString("home_market_value")].isNull() && m_home_market_value_isValid;

    m_home_owner_status_isValid = ::OpenAPI::fromJsonValue(m_home_owner_status, json[QString("home_owner_status")]);
    m_home_owner_status_isSet = !json[QString("home_owner_status")].isNull() && m_home_owner_status_isValid;

    m_hometown_isValid = ::OpenAPI::fromJsonValue(m_hometown, json[QString("hometown")]);
    m_hometown_isSet = !json[QString("hometown")].isNull() && m_hometown_isValid;

    m_household_income_isValid = ::OpenAPI::fromJsonValue(m_household_income, json[QString("household_income")]);
    m_household_income_isSet = !json[QString("household_income")].isNull() && m_household_income_isValid;

    m_interest_consultation_isValid = ::OpenAPI::fromJsonValue(m_interest_consultation, json[QString("interest_consultation")]);
    m_interest_consultation_isSet = !json[QString("interest_consultation")].isNull() && m_interest_consultation_isValid;

    m_interest_in_new_advisor_isValid = ::OpenAPI::fromJsonValue(m_interest_in_new_advisor, json[QString("interest_in_new_advisor")]);
    m_interest_in_new_advisor_isSet = !json[QString("interest_in_new_advisor")].isNull() && m_interest_in_new_advisor_isValid;

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("invited_by")]);
    m_invited_by_isSet = !json[QString("invited_by")].isNull() && m_invited_by_isValid;

    m_invited_on_isValid = ::OpenAPI::fromJsonValue(m_invited_on, json[QString("invited_on")]);
    m_invited_on_isSet = !json[QString("invited_on")].isNull() && m_invited_on_isValid;

    m_is_client_isValid = ::OpenAPI::fromJsonValue(m_is_client, json[QString("is_client")]);
    m_is_client_isSet = !json[QString("is_client")].isNull() && m_is_client_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("is_hidden")]);
    m_is_hidden_isSet = !json[QString("is_hidden")].isNull() && m_is_hidden_isValid;

    m_last_active_date_isValid = ::OpenAPI::fromJsonValue(m_last_active_date, json[QString("last_active_date")]);
    m_last_active_date_isSet = !json[QString("last_active_date")].isNull() && m_last_active_date_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_marital_status_isValid = ::OpenAPI::fromJsonValue(m_marital_status, json[QString("marital_status")]);
    m_marital_status_isSet = !json[QString("marital_status")].isNull() && m_marital_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_occupation_isValid = ::OpenAPI::fromJsonValue(m_occupation, json[QString("occupation")]);
    m_occupation_isSet = !json[QString("occupation")].isNull() && m_occupation_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_picture_url_isValid = ::OpenAPI::fromJsonValue(m_picture_url, json[QString("picture_url")]);
    m_picture_url_isSet = !json[QString("picture_url")].isNull() && m_picture_url_isValid;

    m_portfolio_size_isValid = ::OpenAPI::fromJsonValue(m_portfolio_size, json[QString("portfolio_size")]);
    m_portfolio_size_isSet = !json[QString("portfolio_size")].isNull() && m_portfolio_size_isValid;

    m_profile_url_isValid = ::OpenAPI::fromJsonValue(m_profile_url, json[QString("profile_url")]);
    m_profile_url_isSet = !json[QString("profile_url")].isNull() && m_profile_url_isValid;

    m_register_ip_addr_isValid = ::OpenAPI::fromJsonValue(m_register_ip_addr, json[QString("register_ip_addr")]);
    m_register_ip_addr_isSet = !json[QString("register_ip_addr")].isNull() && m_register_ip_addr_isValid;

    m_signed_up_with_isValid = ::OpenAPI::fromJsonValue(m_signed_up_with, json[QString("signed_up_with")]);
    m_signed_up_with_isSet = !json[QString("signed_up_with")].isNull() && m_signed_up_with_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscribed_group_ids_isValid = ::OpenAPI::fromJsonValue(m_subscribed_group_ids, json[QString("subscribed_group_ids")]);
    m_subscribed_group_ids_isSet = !json[QString("subscribed_group_ids")].isNull() && m_subscribed_group_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_unsubscribed_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed, json[QString("unsubscribed")]);
    m_unsubscribed_isSet = !json[QString("unsubscribed")].isNull() && m_unsubscribed_isValid;

    m_unsubscribed_date_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed_date, json[QString("unsubscribed_date")]);
    m_unsubscribed_date_isSet = !json[QString("unsubscribed_date")].isNull() && m_unsubscribed_date_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_assets_isSet) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_data_estimated_isSet) {
        obj.insert(QString("data_estimated"), ::OpenAPI::toJsonValue(m_data_estimated));
    }
    if (m_education_isSet) {
        obj.insert(QString("education"), ::OpenAPI::toJsonValue(m_education));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_estimated_location_isSet) {
        obj.insert(QString("estimated_location"), ::OpenAPI::toJsonValue(m_estimated_location));
    }
    if (m_estimated_zip_isSet) {
        obj.insert(QString("estimated_zip"), ::OpenAPI::toJsonValue(m_estimated_zip));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_genuine_email_isSet) {
        obj.insert(QString("genuine_email"), ::OpenAPI::toJsonValue(m_genuine_email));
    }
    if (m_high_net_worth_isSet) {
        obj.insert(QString("high_net_worth"), ::OpenAPI::toJsonValue(m_high_net_worth));
    }
    if (m_home_market_value_isSet) {
        obj.insert(QString("home_market_value"), ::OpenAPI::toJsonValue(m_home_market_value));
    }
    if (m_home_owner_status_isSet) {
        obj.insert(QString("home_owner_status"), ::OpenAPI::toJsonValue(m_home_owner_status));
    }
    if (m_hometown_isSet) {
        obj.insert(QString("hometown"), ::OpenAPI::toJsonValue(m_hometown));
    }
    if (m_household_income_isSet) {
        obj.insert(QString("household_income"), ::OpenAPI::toJsonValue(m_household_income));
    }
    if (m_interest_consultation_isSet) {
        obj.insert(QString("interest_consultation"), ::OpenAPI::toJsonValue(m_interest_consultation));
    }
    if (m_interest_in_new_advisor_isSet) {
        obj.insert(QString("interest_in_new_advisor"), ::OpenAPI::toJsonValue(m_interest_in_new_advisor));
    }
    if (m_invited_by_isSet) {
        obj.insert(QString("invited_by"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_invited_on_isSet) {
        obj.insert(QString("invited_on"), ::OpenAPI::toJsonValue(m_invited_on));
    }
    if (m_is_client_isSet) {
        obj.insert(QString("is_client"), ::OpenAPI::toJsonValue(m_is_client));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("is_hidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_last_active_date_isSet) {
        obj.insert(QString("last_active_date"), ::OpenAPI::toJsonValue(m_last_active_date));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_marital_status_isSet) {
        obj.insert(QString("marital_status"), ::OpenAPI::toJsonValue(m_marital_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_occupation_isSet) {
        obj.insert(QString("occupation"), ::OpenAPI::toJsonValue(m_occupation));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_picture_url_isSet) {
        obj.insert(QString("picture_url"), ::OpenAPI::toJsonValue(m_picture_url));
    }
    if (m_portfolio_size_isSet) {
        obj.insert(QString("portfolio_size"), ::OpenAPI::toJsonValue(m_portfolio_size));
    }
    if (m_profile_url_isSet) {
        obj.insert(QString("profile_url"), ::OpenAPI::toJsonValue(m_profile_url));
    }
    if (m_register_ip_addr_isSet) {
        obj.insert(QString("register_ip_addr"), ::OpenAPI::toJsonValue(m_register_ip_addr));
    }
    if (m_signed_up_with_isSet) {
        obj.insert(QString("signed_up_with"), ::OpenAPI::toJsonValue(m_signed_up_with));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscribed_group_ids.size() > 0) {
        obj.insert(QString("subscribed_group_ids"), ::OpenAPI::toJsonValue(m_subscribed_group_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_unsubscribed_isSet) {
        obj.insert(QString("unsubscribed"), ::OpenAPI::toJsonValue(m_unsubscribed));
    }
    if (m_unsubscribed_date_isSet) {
        obj.insert(QString("unsubscribed_date"), ::OpenAPI::toJsonValue(m_unsubscribed_date));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIMember::getId() const {
    return m__id;
}
void OAIMember::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIMember::is__id_Set() const{
    return m__id_isSet;
}

bool OAIMember::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIMember::getAddress() const {
    return m_address;
}
void OAIMember::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIMember::is_address_Set() const{
    return m_address_isSet;
}

bool OAIMember::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIMember::getAge() const {
    return m_age;
}
void OAIMember::setAge(const QString &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIMember::is_age_Set() const{
    return m_age_isSet;
}

bool OAIMember::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIMember::getAssets() const {
    return m_assets;
}
void OAIMember::setAssets(const QString &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIMember::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIMember::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIMember::getCity() const {
    return m_city;
}
void OAIMember::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIMember::is_city_Set() const{
    return m_city_isSet;
}

bool OAIMember::is_city_Valid() const{
    return m_city_isValid;
}

bool OAIMember::isDataEstimated() const {
    return m_data_estimated;
}
void OAIMember::setDataEstimated(const bool &data_estimated) {
    m_data_estimated = data_estimated;
    m_data_estimated_isSet = true;
}

bool OAIMember::is_data_estimated_Set() const{
    return m_data_estimated_isSet;
}

bool OAIMember::is_data_estimated_Valid() const{
    return m_data_estimated_isValid;
}

QString OAIMember::getEducation() const {
    return m_education;
}
void OAIMember::setEducation(const QString &education) {
    m_education = education;
    m_education_isSet = true;
}

bool OAIMember::is_education_Set() const{
    return m_education_isSet;
}

bool OAIMember::is_education_Valid() const{
    return m_education_isValid;
}

QString OAIMember::getEmail() const {
    return m_email;
}
void OAIMember::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMember::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMember::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIMember::getEstimatedLocation() const {
    return m_estimated_location;
}
void OAIMember::setEstimatedLocation(const QString &estimated_location) {
    m_estimated_location = estimated_location;
    m_estimated_location_isSet = true;
}

bool OAIMember::is_estimated_location_Set() const{
    return m_estimated_location_isSet;
}

bool OAIMember::is_estimated_location_Valid() const{
    return m_estimated_location_isValid;
}

QString OAIMember::getEstimatedZip() const {
    return m_estimated_zip;
}
void OAIMember::setEstimatedZip(const QString &estimated_zip) {
    m_estimated_zip = estimated_zip;
    m_estimated_zip_isSet = true;
}

bool OAIMember::is_estimated_zip_Set() const{
    return m_estimated_zip_isSet;
}

bool OAIMember::is_estimated_zip_Valid() const{
    return m_estimated_zip_isValid;
}

QString OAIMember::getFamily() const {
    return m_family;
}
void OAIMember::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIMember::is_family_Set() const{
    return m_family_isSet;
}

bool OAIMember::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIMember::getFirstName() const {
    return m_first_name;
}
void OAIMember::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIMember::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIMember::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIMember::getGender() const {
    return m_gender;
}
void OAIMember::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIMember::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIMember::is_gender_Valid() const{
    return m_gender_isValid;
}

bool OAIMember::isGenuineEmail() const {
    return m_genuine_email;
}
void OAIMember::setGenuineEmail(const bool &genuine_email) {
    m_genuine_email = genuine_email;
    m_genuine_email_isSet = true;
}

bool OAIMember::is_genuine_email_Set() const{
    return m_genuine_email_isSet;
}

bool OAIMember::is_genuine_email_Valid() const{
    return m_genuine_email_isValid;
}

bool OAIMember::isHighNetWorth() const {
    return m_high_net_worth;
}
void OAIMember::setHighNetWorth(const bool &high_net_worth) {
    m_high_net_worth = high_net_worth;
    m_high_net_worth_isSet = true;
}

bool OAIMember::is_high_net_worth_Set() const{
    return m_high_net_worth_isSet;
}

bool OAIMember::is_high_net_worth_Valid() const{
    return m_high_net_worth_isValid;
}

QString OAIMember::getHomeMarketValue() const {
    return m_home_market_value;
}
void OAIMember::setHomeMarketValue(const QString &home_market_value) {
    m_home_market_value = home_market_value;
    m_home_market_value_isSet = true;
}

bool OAIMember::is_home_market_value_Set() const{
    return m_home_market_value_isSet;
}

bool OAIMember::is_home_market_value_Valid() const{
    return m_home_market_value_isValid;
}

QString OAIMember::getHomeOwnerStatus() const {
    return m_home_owner_status;
}
void OAIMember::setHomeOwnerStatus(const QString &home_owner_status) {
    m_home_owner_status = home_owner_status;
    m_home_owner_status_isSet = true;
}

bool OAIMember::is_home_owner_status_Set() const{
    return m_home_owner_status_isSet;
}

bool OAIMember::is_home_owner_status_Valid() const{
    return m_home_owner_status_isValid;
}

QString OAIMember::getHometown() const {
    return m_hometown;
}
void OAIMember::setHometown(const QString &hometown) {
    m_hometown = hometown;
    m_hometown_isSet = true;
}

bool OAIMember::is_hometown_Set() const{
    return m_hometown_isSet;
}

bool OAIMember::is_hometown_Valid() const{
    return m_hometown_isValid;
}

QString OAIMember::getHouseholdIncome() const {
    return m_household_income;
}
void OAIMember::setHouseholdIncome(const QString &household_income) {
    m_household_income = household_income;
    m_household_income_isSet = true;
}

bool OAIMember::is_household_income_Set() const{
    return m_household_income_isSet;
}

bool OAIMember::is_household_income_Valid() const{
    return m_household_income_isValid;
}

QString OAIMember::getInterestConsultation() const {
    return m_interest_consultation;
}
void OAIMember::setInterestConsultation(const QString &interest_consultation) {
    m_interest_consultation = interest_consultation;
    m_interest_consultation_isSet = true;
}

bool OAIMember::is_interest_consultation_Set() const{
    return m_interest_consultation_isSet;
}

bool OAIMember::is_interest_consultation_Valid() const{
    return m_interest_consultation_isValid;
}

QString OAIMember::getInterestInNewAdvisor() const {
    return m_interest_in_new_advisor;
}
void OAIMember::setInterestInNewAdvisor(const QString &interest_in_new_advisor) {
    m_interest_in_new_advisor = interest_in_new_advisor;
    m_interest_in_new_advisor_isSet = true;
}

bool OAIMember::is_interest_in_new_advisor_Set() const{
    return m_interest_in_new_advisor_isSet;
}

bool OAIMember::is_interest_in_new_advisor_Valid() const{
    return m_interest_in_new_advisor_isValid;
}

QString OAIMember::getInvitedBy() const {
    return m_invited_by;
}
void OAIMember::setInvitedBy(const QString &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIMember::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIMember::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

QString OAIMember::getInvitedOn() const {
    return m_invited_on;
}
void OAIMember::setInvitedOn(const QString &invited_on) {
    m_invited_on = invited_on;
    m_invited_on_isSet = true;
}

bool OAIMember::is_invited_on_Set() const{
    return m_invited_on_isSet;
}

bool OAIMember::is_invited_on_Valid() const{
    return m_invited_on_isValid;
}

bool OAIMember::isIsClient() const {
    return m_is_client;
}
void OAIMember::setIsClient(const bool &is_client) {
    m_is_client = is_client;
    m_is_client_isSet = true;
}

bool OAIMember::is_is_client_Set() const{
    return m_is_client_isSet;
}

bool OAIMember::is_is_client_Valid() const{
    return m_is_client_isValid;
}

bool OAIMember::isIsHidden() const {
    return m_is_hidden;
}
void OAIMember::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIMember::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIMember::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

QString OAIMember::getLastActiveDate() const {
    return m_last_active_date;
}
void OAIMember::setLastActiveDate(const QString &last_active_date) {
    m_last_active_date = last_active_date;
    m_last_active_date_isSet = true;
}

bool OAIMember::is_last_active_date_Set() const{
    return m_last_active_date_isSet;
}

bool OAIMember::is_last_active_date_Valid() const{
    return m_last_active_date_isValid;
}

QString OAIMember::getLastName() const {
    return m_last_name;
}
void OAIMember::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIMember::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIMember::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIMember::getLocation() const {
    return m_location;
}
void OAIMember::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMember::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMember::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMember::getMaritalStatus() const {
    return m_marital_status;
}
void OAIMember::setMaritalStatus(const QString &marital_status) {
    m_marital_status = marital_status;
    m_marital_status_isSet = true;
}

bool OAIMember::is_marital_status_Set() const{
    return m_marital_status_isSet;
}

bool OAIMember::is_marital_status_Valid() const{
    return m_marital_status_isValid;
}

QString OAIMember::getMessage() const {
    return m_message;
}
void OAIMember::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMember::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMember::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIMember::getOccupation() const {
    return m_occupation;
}
void OAIMember::setOccupation(const QString &occupation) {
    m_occupation = occupation;
    m_occupation_isSet = true;
}

bool OAIMember::is_occupation_Set() const{
    return m_occupation_isSet;
}

bool OAIMember::is_occupation_Valid() const{
    return m_occupation_isValid;
}

QString OAIMember::getPhone() const {
    return m_phone;
}
void OAIMember::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIMember::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIMember::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIMember::getPictureUrl() const {
    return m_picture_url;
}
void OAIMember::setPictureUrl(const QString &picture_url) {
    m_picture_url = picture_url;
    m_picture_url_isSet = true;
}

bool OAIMember::is_picture_url_Set() const{
    return m_picture_url_isSet;
}

bool OAIMember::is_picture_url_Valid() const{
    return m_picture_url_isValid;
}

QString OAIMember::getPortfolioSize() const {
    return m_portfolio_size;
}
void OAIMember::setPortfolioSize(const QString &portfolio_size) {
    m_portfolio_size = portfolio_size;
    m_portfolio_size_isSet = true;
}

bool OAIMember::is_portfolio_size_Set() const{
    return m_portfolio_size_isSet;
}

bool OAIMember::is_portfolio_size_Valid() const{
    return m_portfolio_size_isValid;
}

QString OAIMember::getProfileUrl() const {
    return m_profile_url;
}
void OAIMember::setProfileUrl(const QString &profile_url) {
    m_profile_url = profile_url;
    m_profile_url_isSet = true;
}

bool OAIMember::is_profile_url_Set() const{
    return m_profile_url_isSet;
}

bool OAIMember::is_profile_url_Valid() const{
    return m_profile_url_isValid;
}

QString OAIMember::getRegisterIpAddr() const {
    return m_register_ip_addr;
}
void OAIMember::setRegisterIpAddr(const QString &register_ip_addr) {
    m_register_ip_addr = register_ip_addr;
    m_register_ip_addr_isSet = true;
}

bool OAIMember::is_register_ip_addr_Set() const{
    return m_register_ip_addr_isSet;
}

bool OAIMember::is_register_ip_addr_Valid() const{
    return m_register_ip_addr_isValid;
}

QString OAIMember::getSignedUpWith() const {
    return m_signed_up_with;
}
void OAIMember::setSignedUpWith(const QString &signed_up_with) {
    m_signed_up_with = signed_up_with;
    m_signed_up_with_isSet = true;
}

bool OAIMember::is_signed_up_with_Set() const{
    return m_signed_up_with_isSet;
}

bool OAIMember::is_signed_up_with_Valid() const{
    return m_signed_up_with_isValid;
}

QString OAIMember::getState() const {
    return m_state;
}
void OAIMember::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMember::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMember::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIMember::getSubscribedGroupIds() const {
    return m_subscribed_group_ids;
}
void OAIMember::setSubscribedGroupIds(const QList<QString> &subscribed_group_ids) {
    m_subscribed_group_ids = subscribed_group_ids;
    m_subscribed_group_ids_isSet = true;
}

bool OAIMember::is_subscribed_group_ids_Set() const{
    return m_subscribed_group_ids_isSet;
}

bool OAIMember::is_subscribed_group_ids_Valid() const{
    return m_subscribed_group_ids_isValid;
}

QList<QString> OAIMember::getTags() const {
    return m_tags;
}
void OAIMember::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMember::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMember::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIMember::isUnsubscribed() const {
    return m_unsubscribed;
}
void OAIMember::setUnsubscribed(const bool &unsubscribed) {
    m_unsubscribed = unsubscribed;
    m_unsubscribed_isSet = true;
}

bool OAIMember::is_unsubscribed_Set() const{
    return m_unsubscribed_isSet;
}

bool OAIMember::is_unsubscribed_Valid() const{
    return m_unsubscribed_isValid;
}

bool OAIMember::isUnsubscribedDate() const {
    return m_unsubscribed_date;
}
void OAIMember::setUnsubscribedDate(const bool &unsubscribed_date) {
    m_unsubscribed_date = unsubscribed_date;
    m_unsubscribed_date_isSet = true;
}

bool OAIMember::is_unsubscribed_date_Set() const{
    return m_unsubscribed_date_isSet;
}

bool OAIMember::is_unsubscribed_date_Valid() const{
    return m_unsubscribed_date_isValid;
}

QString OAIMember::getUserType() const {
    return m_user_type;
}
void OAIMember::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIMember::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIMember::is_user_type_Valid() const{
    return m_user_type_isValid;
}

QString OAIMember::getZip() const {
    return m_zip;
}
void OAIMember::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIMember::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIMember::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_education_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genuine_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_owner_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hometown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_household_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_consultation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_in_new_advisor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_active_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marital_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_ip_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_up_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && m_email_isValid && true;
}

} // namespace OpenAPI
