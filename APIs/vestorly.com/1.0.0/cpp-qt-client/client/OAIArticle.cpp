/**
 * Vestorly API
 * Vestorly Developers API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle::OAIArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle::OAIArticle() {
    this->initializeModel();
}

OAIArticle::~OAIArticle() {}

void OAIArticle::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_external_url_source_isSet = false;
    m_external_url_source_isValid = false;

    m_external_url_type_isSet = false;
    m_external_url_type_isValid = false;

    m_image_height_isSet = false;
    m_image_height_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_image_width_isSet = false;
    m_image_width_isValid = false;

    m_is_mobile_proxy_needed_isSet = false;
    m_is_mobile_proxy_needed_isValid = false;

    m_is_proxy_needed_isSet = false;
    m_is_proxy_needed_isValid = false;

    m_is_responsive_isSet = false;
    m_is_responsive_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_needs_sanitize_isSet = false;
    m_needs_sanitize_isValid = false;

    m_proxy_url_isSet = false;
    m_proxy_url_isValid = false;

    m_redirector_link_isSet = false;
    m_redirector_link_isValid = false;

    m_square_logo_url_isSet = false;
    m_square_logo_url_isValid = false;

    m_suitability_score_isSet = false;
    m_suitability_score_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("external_url")]);
    m_external_url_isSet = !json[QString("external_url")].isNull() && m_external_url_isValid;

    m_external_url_source_isValid = ::OpenAPI::fromJsonValue(m_external_url_source, json[QString("external_url_source")]);
    m_external_url_source_isSet = !json[QString("external_url_source")].isNull() && m_external_url_source_isValid;

    m_external_url_type_isValid = ::OpenAPI::fromJsonValue(m_external_url_type, json[QString("external_url_type")]);
    m_external_url_type_isSet = !json[QString("external_url_type")].isNull() && m_external_url_type_isValid;

    m_image_height_isValid = ::OpenAPI::fromJsonValue(m_image_height, json[QString("image_height")]);
    m_image_height_isSet = !json[QString("image_height")].isNull() && m_image_height_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("image_path")]);
    m_image_path_isSet = !json[QString("image_path")].isNull() && m_image_path_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_image_width_isValid = ::OpenAPI::fromJsonValue(m_image_width, json[QString("image_width")]);
    m_image_width_isSet = !json[QString("image_width")].isNull() && m_image_width_isValid;

    m_is_mobile_proxy_needed_isValid = ::OpenAPI::fromJsonValue(m_is_mobile_proxy_needed, json[QString("is_mobile_proxy_needed")]);
    m_is_mobile_proxy_needed_isSet = !json[QString("is_mobile_proxy_needed")].isNull() && m_is_mobile_proxy_needed_isValid;

    m_is_proxy_needed_isValid = ::OpenAPI::fromJsonValue(m_is_proxy_needed, json[QString("is_proxy_needed")]);
    m_is_proxy_needed_isSet = !json[QString("is_proxy_needed")].isNull() && m_is_proxy_needed_isValid;

    m_is_responsive_isValid = ::OpenAPI::fromJsonValue(m_is_responsive, json[QString("is_responsive")]);
    m_is_responsive_isSet = !json[QString("is_responsive")].isNull() && m_is_responsive_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_needs_sanitize_isValid = ::OpenAPI::fromJsonValue(m_needs_sanitize, json[QString("needs_sanitize")]);
    m_needs_sanitize_isSet = !json[QString("needs_sanitize")].isNull() && m_needs_sanitize_isValid;

    m_proxy_url_isValid = ::OpenAPI::fromJsonValue(m_proxy_url, json[QString("proxy_url")]);
    m_proxy_url_isSet = !json[QString("proxy_url")].isNull() && m_proxy_url_isValid;

    m_redirector_link_isValid = ::OpenAPI::fromJsonValue(m_redirector_link, json[QString("redirector_link")]);
    m_redirector_link_isSet = !json[QString("redirector_link")].isNull() && m_redirector_link_isValid;

    m_square_logo_url_isValid = ::OpenAPI::fromJsonValue(m_square_logo_url, json[QString("square_logo_url")]);
    m_square_logo_url_isSet = !json[QString("square_logo_url")].isNull() && m_square_logo_url_isValid;

    m_suitability_score_isValid = ::OpenAPI::fromJsonValue(m_suitability_score, json[QString("suitability_score")]);
    m_suitability_score_isSet = !json[QString("suitability_score")].isNull() && m_suitability_score_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("external_url"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_external_url_source_isSet) {
        obj.insert(QString("external_url_source"), ::OpenAPI::toJsonValue(m_external_url_source));
    }
    if (m_external_url_type_isSet) {
        obj.insert(QString("external_url_type"), ::OpenAPI::toJsonValue(m_external_url_type));
    }
    if (m_image_height_isSet) {
        obj.insert(QString("image_height"), ::OpenAPI::toJsonValue(m_image_height));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("image_path"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_image_width_isSet) {
        obj.insert(QString("image_width"), ::OpenAPI::toJsonValue(m_image_width));
    }
    if (m_is_mobile_proxy_needed_isSet) {
        obj.insert(QString("is_mobile_proxy_needed"), ::OpenAPI::toJsonValue(m_is_mobile_proxy_needed));
    }
    if (m_is_proxy_needed_isSet) {
        obj.insert(QString("is_proxy_needed"), ::OpenAPI::toJsonValue(m_is_proxy_needed));
    }
    if (m_is_responsive_isSet) {
        obj.insert(QString("is_responsive"), ::OpenAPI::toJsonValue(m_is_responsive));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_needs_sanitize_isSet) {
        obj.insert(QString("needs_sanitize"), ::OpenAPI::toJsonValue(m_needs_sanitize));
    }
    if (m_proxy_url_isSet) {
        obj.insert(QString("proxy_url"), ::OpenAPI::toJsonValue(m_proxy_url));
    }
    if (m_redirector_link_isSet) {
        obj.insert(QString("redirector_link"), ::OpenAPI::toJsonValue(m_redirector_link));
    }
    if (m_square_logo_url_isSet) {
        obj.insert(QString("square_logo_url"), ::OpenAPI::toJsonValue(m_square_logo_url));
    }
    if (m_suitability_score_isSet) {
        obj.insert(QString("suitability_score"), ::OpenAPI::toJsonValue(m_suitability_score));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIArticle::getId() const {
    return m__id;
}
void OAIArticle::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIArticle::is__id_Set() const{
    return m__id_isSet;
}

bool OAIArticle::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIArticle::getBody() const {
    return m_body;
}
void OAIArticle::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIArticle::is_body_Set() const{
    return m_body_isSet;
}

bool OAIArticle::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIArticle::getCreatedAt() const {
    return m_created_at;
}
void OAIArticle::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIArticle::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIArticle::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIArticle::getExternalUrl() const {
    return m_external_url;
}
void OAIArticle::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAIArticle::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAIArticle::is_external_url_Valid() const{
    return m_external_url_isValid;
}

QString OAIArticle::getExternalUrlSource() const {
    return m_external_url_source;
}
void OAIArticle::setExternalUrlSource(const QString &external_url_source) {
    m_external_url_source = external_url_source;
    m_external_url_source_isSet = true;
}

bool OAIArticle::is_external_url_source_Set() const{
    return m_external_url_source_isSet;
}

bool OAIArticle::is_external_url_source_Valid() const{
    return m_external_url_source_isValid;
}

QString OAIArticle::getExternalUrlType() const {
    return m_external_url_type;
}
void OAIArticle::setExternalUrlType(const QString &external_url_type) {
    m_external_url_type = external_url_type;
    m_external_url_type_isSet = true;
}

bool OAIArticle::is_external_url_type_Set() const{
    return m_external_url_type_isSet;
}

bool OAIArticle::is_external_url_type_Valid() const{
    return m_external_url_type_isValid;
}

qint32 OAIArticle::getImageHeight() const {
    return m_image_height;
}
void OAIArticle::setImageHeight(const qint32 &image_height) {
    m_image_height = image_height;
    m_image_height_isSet = true;
}

bool OAIArticle::is_image_height_Set() const{
    return m_image_height_isSet;
}

bool OAIArticle::is_image_height_Valid() const{
    return m_image_height_isValid;
}

QString OAIArticle::getImagePath() const {
    return m_image_path;
}
void OAIArticle::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAIArticle::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAIArticle::is_image_path_Valid() const{
    return m_image_path_isValid;
}

QString OAIArticle::getImageUrl() const {
    return m_image_url;
}
void OAIArticle::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIArticle::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIArticle::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 OAIArticle::getImageWidth() const {
    return m_image_width;
}
void OAIArticle::setImageWidth(const qint32 &image_width) {
    m_image_width = image_width;
    m_image_width_isSet = true;
}

bool OAIArticle::is_image_width_Set() const{
    return m_image_width_isSet;
}

bool OAIArticle::is_image_width_Valid() const{
    return m_image_width_isValid;
}

bool OAIArticle::isIsMobileProxyNeeded() const {
    return m_is_mobile_proxy_needed;
}
void OAIArticle::setIsMobileProxyNeeded(const bool &is_mobile_proxy_needed) {
    m_is_mobile_proxy_needed = is_mobile_proxy_needed;
    m_is_mobile_proxy_needed_isSet = true;
}

bool OAIArticle::is_is_mobile_proxy_needed_Set() const{
    return m_is_mobile_proxy_needed_isSet;
}

bool OAIArticle::is_is_mobile_proxy_needed_Valid() const{
    return m_is_mobile_proxy_needed_isValid;
}

bool OAIArticle::isIsProxyNeeded() const {
    return m_is_proxy_needed;
}
void OAIArticle::setIsProxyNeeded(const bool &is_proxy_needed) {
    m_is_proxy_needed = is_proxy_needed;
    m_is_proxy_needed_isSet = true;
}

bool OAIArticle::is_is_proxy_needed_Set() const{
    return m_is_proxy_needed_isSet;
}

bool OAIArticle::is_is_proxy_needed_Valid() const{
    return m_is_proxy_needed_isValid;
}

bool OAIArticle::isIsResponsive() const {
    return m_is_responsive;
}
void OAIArticle::setIsResponsive(const bool &is_responsive) {
    m_is_responsive = is_responsive;
    m_is_responsive_isSet = true;
}

bool OAIArticle::is_is_responsive_Set() const{
    return m_is_responsive_isSet;
}

bool OAIArticle::is_is_responsive_Valid() const{
    return m_is_responsive_isValid;
}

QString OAIArticle::getLogoUrl() const {
    return m_logo_url;
}
void OAIArticle::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIArticle::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIArticle::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

bool OAIArticle::isNeedsSanitize() const {
    return m_needs_sanitize;
}
void OAIArticle::setNeedsSanitize(const bool &needs_sanitize) {
    m_needs_sanitize = needs_sanitize;
    m_needs_sanitize_isSet = true;
}

bool OAIArticle::is_needs_sanitize_Set() const{
    return m_needs_sanitize_isSet;
}

bool OAIArticle::is_needs_sanitize_Valid() const{
    return m_needs_sanitize_isValid;
}

QString OAIArticle::getProxyUrl() const {
    return m_proxy_url;
}
void OAIArticle::setProxyUrl(const QString &proxy_url) {
    m_proxy_url = proxy_url;
    m_proxy_url_isSet = true;
}

bool OAIArticle::is_proxy_url_Set() const{
    return m_proxy_url_isSet;
}

bool OAIArticle::is_proxy_url_Valid() const{
    return m_proxy_url_isValid;
}

QString OAIArticle::getRedirectorLink() const {
    return m_redirector_link;
}
void OAIArticle::setRedirectorLink(const QString &redirector_link) {
    m_redirector_link = redirector_link;
    m_redirector_link_isSet = true;
}

bool OAIArticle::is_redirector_link_Set() const{
    return m_redirector_link_isSet;
}

bool OAIArticle::is_redirector_link_Valid() const{
    return m_redirector_link_isValid;
}

QString OAIArticle::getSquareLogoUrl() const {
    return m_square_logo_url;
}
void OAIArticle::setSquareLogoUrl(const QString &square_logo_url) {
    m_square_logo_url = square_logo_url;
    m_square_logo_url_isSet = true;
}

bool OAIArticle::is_square_logo_url_Set() const{
    return m_square_logo_url_isSet;
}

bool OAIArticle::is_square_logo_url_Valid() const{
    return m_square_logo_url_isValid;
}

QString OAIArticle::getSuitabilityScore() const {
    return m_suitability_score;
}
void OAIArticle::setSuitabilityScore(const QString &suitability_score) {
    m_suitability_score = suitability_score;
    m_suitability_score_isSet = true;
}

bool OAIArticle::is_suitability_score_Set() const{
    return m_suitability_score_isSet;
}

bool OAIArticle::is_suitability_score_Valid() const{
    return m_suitability_score_isValid;
}

QString OAIArticle::getSummary() const {
    return m_summary;
}
void OAIArticle::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIArticle::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIArticle::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIArticle::getTitle() const {
    return m_title;
}
void OAIArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIArticle::getTopic() const {
    return m_topic;
}
void OAIArticle::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIArticle::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIArticle::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIArticle::getUrl() const {
    return m_url;
}
void OAIArticle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticle::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticle::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_proxy_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_proxy_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_responsive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_sanitize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirector_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_square_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
